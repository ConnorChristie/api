// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/mwitkow/go-proto-validators/validator.proto

package com.github.mwitkow.go_proto_validators;

public final class Validator {
  private Validator() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(com.github.mwitkow.go_proto_validators.Validator.field);
    registry.add(com.github.mwitkow.go_proto_validators.Validator.oneof);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface FieldValidatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:validator.FieldValidator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Uses a Golang RE2-syntax regex to match the field contents.
     * </pre>
     *
     * <code>optional string regex = 1[json_name = "regex"];</code>
     */
    boolean hasRegex();
    /**
     * <pre>
     * Uses a Golang RE2-syntax regex to match the field contents.
     * </pre>
     *
     * <code>optional string regex = 1[json_name = "regex"];</code>
     */
    java.lang.String getRegex();
    /**
     * <pre>
     * Uses a Golang RE2-syntax regex to match the field contents.
     * </pre>
     *
     * <code>optional string regex = 1[json_name = "regex"];</code>
     */
    com.google.protobuf.ByteString
        getRegexBytes();

    /**
     * <pre>
     * Field value of integer strictly greater than this value.
     * </pre>
     *
     * <code>optional int64 int_gt = 2[json_name = "intGt"];</code>
     */
    boolean hasIntGt();
    /**
     * <pre>
     * Field value of integer strictly greater than this value.
     * </pre>
     *
     * <code>optional int64 int_gt = 2[json_name = "intGt"];</code>
     */
    long getIntGt();

    /**
     * <pre>
     * Field value of integer strictly smaller than this value.
     * </pre>
     *
     * <code>optional int64 int_lt = 3[json_name = "intLt"];</code>
     */
    boolean hasIntLt();
    /**
     * <pre>
     * Field value of integer strictly smaller than this value.
     * </pre>
     *
     * <code>optional int64 int_lt = 3[json_name = "intLt"];</code>
     */
    long getIntLt();

    /**
     * <pre>
     * Used for nested message types, requires that the message type exists.
     * </pre>
     *
     * <code>optional bool msg_exists = 4[json_name = "msgExists"];</code>
     */
    boolean hasMsgExists();
    /**
     * <pre>
     * Used for nested message types, requires that the message type exists.
     * </pre>
     *
     * <code>optional bool msg_exists = 4[json_name = "msgExists"];</code>
     */
    boolean getMsgExists();

    /**
     * <pre>
     * Human error specifies a user-customizable error that is visible to the user.
     * </pre>
     *
     * <code>optional string human_error = 5[json_name = "humanError"];</code>
     */
    boolean hasHumanError();
    /**
     * <pre>
     * Human error specifies a user-customizable error that is visible to the user.
     * </pre>
     *
     * <code>optional string human_error = 5[json_name = "humanError"];</code>
     */
    java.lang.String getHumanError();
    /**
     * <pre>
     * Human error specifies a user-customizable error that is visible to the user.
     * </pre>
     *
     * <code>optional string human_error = 5[json_name = "humanError"];</code>
     */
    com.google.protobuf.ByteString
        getHumanErrorBytes();

    /**
     * <pre>
     * Field value of double strictly greater than this value.
     * Note that this value can only take on a valid floating point
     * value. Use together with float_epsilon if you need something more specific.
     * </pre>
     *
     * <code>optional double float_gt = 6[json_name = "floatGt"];</code>
     */
    boolean hasFloatGt();
    /**
     * <pre>
     * Field value of double strictly greater than this value.
     * Note that this value can only take on a valid floating point
     * value. Use together with float_epsilon if you need something more specific.
     * </pre>
     *
     * <code>optional double float_gt = 6[json_name = "floatGt"];</code>
     */
    double getFloatGt();

    /**
     * <pre>
     * Field value of double strictly smaller than this value.
     * Note that this value can only take on a valid floating point
     * value. Use together with float_epsilon if you need something more specific.
     * </pre>
     *
     * <code>optional double float_lt = 7[json_name = "floatLt"];</code>
     */
    boolean hasFloatLt();
    /**
     * <pre>
     * Field value of double strictly smaller than this value.
     * Note that this value can only take on a valid floating point
     * value. Use together with float_epsilon if you need something more specific.
     * </pre>
     *
     * <code>optional double float_lt = 7[json_name = "floatLt"];</code>
     */
    double getFloatLt();

    /**
     * <pre>
     * Field value of double describing the epsilon within which
     * any comparison should be considered to be true. For example,
     * when using float_gt = 0.35, using a float_epsilon of 0.05
     * would mean that any value above 0.30 is acceptable. It can be
     * thought of as a {float_value_condition} +- {float_epsilon}.
     * If unset, no correction for floating point inaccuracies in
     * comparisons will be attempted.
     * </pre>
     *
     * <code>optional double float_epsilon = 8[json_name = "floatEpsilon"];</code>
     */
    boolean hasFloatEpsilon();
    /**
     * <pre>
     * Field value of double describing the epsilon within which
     * any comparison should be considered to be true. For example,
     * when using float_gt = 0.35, using a float_epsilon of 0.05
     * would mean that any value above 0.30 is acceptable. It can be
     * thought of as a {float_value_condition} +- {float_epsilon}.
     * If unset, no correction for floating point inaccuracies in
     * comparisons will be attempted.
     * </pre>
     *
     * <code>optional double float_epsilon = 8[json_name = "floatEpsilon"];</code>
     */
    double getFloatEpsilon();

    /**
     * <pre>
     * Floating-point value compared to which the field content should be greater or equal.
     * </pre>
     *
     * <code>optional double float_gte = 9[json_name = "floatGte"];</code>
     */
    boolean hasFloatGte();
    /**
     * <pre>
     * Floating-point value compared to which the field content should be greater or equal.
     * </pre>
     *
     * <code>optional double float_gte = 9[json_name = "floatGte"];</code>
     */
    double getFloatGte();

    /**
     * <pre>
     * Floating-point value compared to which the field content should be smaller or equal.
     * </pre>
     *
     * <code>optional double float_lte = 10[json_name = "floatLte"];</code>
     */
    boolean hasFloatLte();
    /**
     * <pre>
     * Floating-point value compared to which the field content should be smaller or equal.
     * </pre>
     *
     * <code>optional double float_lte = 10[json_name = "floatLte"];</code>
     */
    double getFloatLte();

    /**
     * <pre>
     * Used for string fields, requires the string to be not empty (i.e different from "").
     * </pre>
     *
     * <code>optional bool string_not_empty = 11[json_name = "stringNotEmpty"];</code>
     */
    boolean hasStringNotEmpty();
    /**
     * <pre>
     * Used for string fields, requires the string to be not empty (i.e different from "").
     * </pre>
     *
     * <code>optional bool string_not_empty = 11[json_name = "stringNotEmpty"];</code>
     */
    boolean getStringNotEmpty();

    /**
     * <pre>
     * Repeated field with at least this number of elements.
     * </pre>
     *
     * <code>optional int64 repeated_count_min = 12[json_name = "repeatedCountMin"];</code>
     */
    boolean hasRepeatedCountMin();
    /**
     * <pre>
     * Repeated field with at least this number of elements.
     * </pre>
     *
     * <code>optional int64 repeated_count_min = 12[json_name = "repeatedCountMin"];</code>
     */
    long getRepeatedCountMin();

    /**
     * <pre>
     * Repeated field with at most this number of elements.
     * </pre>
     *
     * <code>optional int64 repeated_count_max = 13[json_name = "repeatedCountMax"];</code>
     */
    boolean hasRepeatedCountMax();
    /**
     * <pre>
     * Repeated field with at most this number of elements.
     * </pre>
     *
     * <code>optional int64 repeated_count_max = 13[json_name = "repeatedCountMax"];</code>
     */
    long getRepeatedCountMax();

    /**
     * <pre>
     * Field value of length greater than this value.
     * </pre>
     *
     * <code>optional int64 length_gt = 14[json_name = "lengthGt"];</code>
     */
    boolean hasLengthGt();
    /**
     * <pre>
     * Field value of length greater than this value.
     * </pre>
     *
     * <code>optional int64 length_gt = 14[json_name = "lengthGt"];</code>
     */
    long getLengthGt();

    /**
     * <pre>
     * Field value of length smaller than this value.
     * </pre>
     *
     * <code>optional int64 length_lt = 15[json_name = "lengthLt"];</code>
     */
    boolean hasLengthLt();
    /**
     * <pre>
     * Field value of length smaller than this value.
     * </pre>
     *
     * <code>optional int64 length_lt = 15[json_name = "lengthLt"];</code>
     */
    long getLengthLt();

    /**
     * <pre>
     * Field value of integer strictly equal this value.
     * </pre>
     *
     * <code>optional int64 length_eq = 16[json_name = "lengthEq"];</code>
     */
    boolean hasLengthEq();
    /**
     * <pre>
     * Field value of integer strictly equal this value.
     * </pre>
     *
     * <code>optional int64 length_eq = 16[json_name = "lengthEq"];</code>
     */
    long getLengthEq();

    /**
     * <pre>
     * Requires that the value is in the enum.
     * </pre>
     *
     * <code>optional bool is_in_enum = 17[json_name = "isInEnum"];</code>
     */
    boolean hasIsInEnum();
    /**
     * <pre>
     * Requires that the value is in the enum.
     * </pre>
     *
     * <code>optional bool is_in_enum = 17[json_name = "isInEnum"];</code>
     */
    boolean getIsInEnum();

    /**
     * <pre>
     * Ensures that a string value is in UUID format.
     * uuid_ver specifies the valid UUID versions. Valid values are: 0-5.
     * If uuid_ver is 0 all UUID versions are accepted.
     * </pre>
     *
     * <code>optional int32 uuid_ver = 18[json_name = "uuidVer"];</code>
     */
    boolean hasUuidVer();
    /**
     * <pre>
     * Ensures that a string value is in UUID format.
     * uuid_ver specifies the valid UUID versions. Valid values are: 0-5.
     * If uuid_ver is 0 all UUID versions are accepted.
     * </pre>
     *
     * <code>optional int32 uuid_ver = 18[json_name = "uuidVer"];</code>
     */
    int getUuidVer();
  }
  /**
   * Protobuf type {@code validator.FieldValidator}
   */
  public  static final class FieldValidator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:validator.FieldValidator)
      FieldValidatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FieldValidator.newBuilder() to construct.
    private FieldValidator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FieldValidator() {
      regex_ = "";
      intGt_ = 0L;
      intLt_ = 0L;
      msgExists_ = false;
      humanError_ = "";
      floatGt_ = 0D;
      floatLt_ = 0D;
      floatEpsilon_ = 0D;
      floatGte_ = 0D;
      floatLte_ = 0D;
      stringNotEmpty_ = false;
      repeatedCountMin_ = 0L;
      repeatedCountMax_ = 0L;
      lengthGt_ = 0L;
      lengthLt_ = 0L;
      lengthEq_ = 0L;
      isInEnum_ = false;
      uuidVer_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FieldValidator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              regex_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              intGt_ = input.readInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              intLt_ = input.readInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              msgExists_ = input.readBool();
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              humanError_ = bs;
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              floatGt_ = input.readDouble();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              floatLt_ = input.readDouble();
              break;
            }
            case 65: {
              bitField0_ |= 0x00000080;
              floatEpsilon_ = input.readDouble();
              break;
            }
            case 73: {
              bitField0_ |= 0x00000100;
              floatGte_ = input.readDouble();
              break;
            }
            case 81: {
              bitField0_ |= 0x00000200;
              floatLte_ = input.readDouble();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              stringNotEmpty_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              repeatedCountMin_ = input.readInt64();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              repeatedCountMax_ = input.readInt64();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              lengthGt_ = input.readInt64();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              lengthLt_ = input.readInt64();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              lengthEq_ = input.readInt64();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              isInEnum_ = input.readBool();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              uuidVer_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.mwitkow.go_proto_validators.Validator.internal_static_validator_FieldValidator_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.mwitkow.go_proto_validators.Validator.internal_static_validator_FieldValidator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.mwitkow.go_proto_validators.Validator.FieldValidator.class, com.github.mwitkow.go_proto_validators.Validator.FieldValidator.Builder.class);
    }

    private int bitField0_;
    public static final int REGEX_FIELD_NUMBER = 1;
    private volatile java.lang.Object regex_;
    /**
     * <pre>
     * Uses a Golang RE2-syntax regex to match the field contents.
     * </pre>
     *
     * <code>optional string regex = 1[json_name = "regex"];</code>
     */
    public boolean hasRegex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Uses a Golang RE2-syntax regex to match the field contents.
     * </pre>
     *
     * <code>optional string regex = 1[json_name = "regex"];</code>
     */
    public java.lang.String getRegex() {
      java.lang.Object ref = regex_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          regex_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Uses a Golang RE2-syntax regex to match the field contents.
     * </pre>
     *
     * <code>optional string regex = 1[json_name = "regex"];</code>
     */
    public com.google.protobuf.ByteString
        getRegexBytes() {
      java.lang.Object ref = regex_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        regex_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INT_GT_FIELD_NUMBER = 2;
    private long intGt_;
    /**
     * <pre>
     * Field value of integer strictly greater than this value.
     * </pre>
     *
     * <code>optional int64 int_gt = 2[json_name = "intGt"];</code>
     */
    public boolean hasIntGt() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Field value of integer strictly greater than this value.
     * </pre>
     *
     * <code>optional int64 int_gt = 2[json_name = "intGt"];</code>
     */
    public long getIntGt() {
      return intGt_;
    }

    public static final int INT_LT_FIELD_NUMBER = 3;
    private long intLt_;
    /**
     * <pre>
     * Field value of integer strictly smaller than this value.
     * </pre>
     *
     * <code>optional int64 int_lt = 3[json_name = "intLt"];</code>
     */
    public boolean hasIntLt() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Field value of integer strictly smaller than this value.
     * </pre>
     *
     * <code>optional int64 int_lt = 3[json_name = "intLt"];</code>
     */
    public long getIntLt() {
      return intLt_;
    }

    public static final int MSG_EXISTS_FIELD_NUMBER = 4;
    private boolean msgExists_;
    /**
     * <pre>
     * Used for nested message types, requires that the message type exists.
     * </pre>
     *
     * <code>optional bool msg_exists = 4[json_name = "msgExists"];</code>
     */
    public boolean hasMsgExists() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Used for nested message types, requires that the message type exists.
     * </pre>
     *
     * <code>optional bool msg_exists = 4[json_name = "msgExists"];</code>
     */
    public boolean getMsgExists() {
      return msgExists_;
    }

    public static final int HUMAN_ERROR_FIELD_NUMBER = 5;
    private volatile java.lang.Object humanError_;
    /**
     * <pre>
     * Human error specifies a user-customizable error that is visible to the user.
     * </pre>
     *
     * <code>optional string human_error = 5[json_name = "humanError"];</code>
     */
    public boolean hasHumanError() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * Human error specifies a user-customizable error that is visible to the user.
     * </pre>
     *
     * <code>optional string human_error = 5[json_name = "humanError"];</code>
     */
    public java.lang.String getHumanError() {
      java.lang.Object ref = humanError_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          humanError_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Human error specifies a user-customizable error that is visible to the user.
     * </pre>
     *
     * <code>optional string human_error = 5[json_name = "humanError"];</code>
     */
    public com.google.protobuf.ByteString
        getHumanErrorBytes() {
      java.lang.Object ref = humanError_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        humanError_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FLOAT_GT_FIELD_NUMBER = 6;
    private double floatGt_;
    /**
     * <pre>
     * Field value of double strictly greater than this value.
     * Note that this value can only take on a valid floating point
     * value. Use together with float_epsilon if you need something more specific.
     * </pre>
     *
     * <code>optional double float_gt = 6[json_name = "floatGt"];</code>
     */
    public boolean hasFloatGt() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * Field value of double strictly greater than this value.
     * Note that this value can only take on a valid floating point
     * value. Use together with float_epsilon if you need something more specific.
     * </pre>
     *
     * <code>optional double float_gt = 6[json_name = "floatGt"];</code>
     */
    public double getFloatGt() {
      return floatGt_;
    }

    public static final int FLOAT_LT_FIELD_NUMBER = 7;
    private double floatLt_;
    /**
     * <pre>
     * Field value of double strictly smaller than this value.
     * Note that this value can only take on a valid floating point
     * value. Use together with float_epsilon if you need something more specific.
     * </pre>
     *
     * <code>optional double float_lt = 7[json_name = "floatLt"];</code>
     */
    public boolean hasFloatLt() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * Field value of double strictly smaller than this value.
     * Note that this value can only take on a valid floating point
     * value. Use together with float_epsilon if you need something more specific.
     * </pre>
     *
     * <code>optional double float_lt = 7[json_name = "floatLt"];</code>
     */
    public double getFloatLt() {
      return floatLt_;
    }

    public static final int FLOAT_EPSILON_FIELD_NUMBER = 8;
    private double floatEpsilon_;
    /**
     * <pre>
     * Field value of double describing the epsilon within which
     * any comparison should be considered to be true. For example,
     * when using float_gt = 0.35, using a float_epsilon of 0.05
     * would mean that any value above 0.30 is acceptable. It can be
     * thought of as a {float_value_condition} +- {float_epsilon}.
     * If unset, no correction for floating point inaccuracies in
     * comparisons will be attempted.
     * </pre>
     *
     * <code>optional double float_epsilon = 8[json_name = "floatEpsilon"];</code>
     */
    public boolean hasFloatEpsilon() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * Field value of double describing the epsilon within which
     * any comparison should be considered to be true. For example,
     * when using float_gt = 0.35, using a float_epsilon of 0.05
     * would mean that any value above 0.30 is acceptable. It can be
     * thought of as a {float_value_condition} +- {float_epsilon}.
     * If unset, no correction for floating point inaccuracies in
     * comparisons will be attempted.
     * </pre>
     *
     * <code>optional double float_epsilon = 8[json_name = "floatEpsilon"];</code>
     */
    public double getFloatEpsilon() {
      return floatEpsilon_;
    }

    public static final int FLOAT_GTE_FIELD_NUMBER = 9;
    private double floatGte_;
    /**
     * <pre>
     * Floating-point value compared to which the field content should be greater or equal.
     * </pre>
     *
     * <code>optional double float_gte = 9[json_name = "floatGte"];</code>
     */
    public boolean hasFloatGte() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * Floating-point value compared to which the field content should be greater or equal.
     * </pre>
     *
     * <code>optional double float_gte = 9[json_name = "floatGte"];</code>
     */
    public double getFloatGte() {
      return floatGte_;
    }

    public static final int FLOAT_LTE_FIELD_NUMBER = 10;
    private double floatLte_;
    /**
     * <pre>
     * Floating-point value compared to which the field content should be smaller or equal.
     * </pre>
     *
     * <code>optional double float_lte = 10[json_name = "floatLte"];</code>
     */
    public boolean hasFloatLte() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     * Floating-point value compared to which the field content should be smaller or equal.
     * </pre>
     *
     * <code>optional double float_lte = 10[json_name = "floatLte"];</code>
     */
    public double getFloatLte() {
      return floatLte_;
    }

    public static final int STRING_NOT_EMPTY_FIELD_NUMBER = 11;
    private boolean stringNotEmpty_;
    /**
     * <pre>
     * Used for string fields, requires the string to be not empty (i.e different from "").
     * </pre>
     *
     * <code>optional bool string_not_empty = 11[json_name = "stringNotEmpty"];</code>
     */
    public boolean hasStringNotEmpty() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     * Used for string fields, requires the string to be not empty (i.e different from "").
     * </pre>
     *
     * <code>optional bool string_not_empty = 11[json_name = "stringNotEmpty"];</code>
     */
    public boolean getStringNotEmpty() {
      return stringNotEmpty_;
    }

    public static final int REPEATED_COUNT_MIN_FIELD_NUMBER = 12;
    private long repeatedCountMin_;
    /**
     * <pre>
     * Repeated field with at least this number of elements.
     * </pre>
     *
     * <code>optional int64 repeated_count_min = 12[json_name = "repeatedCountMin"];</code>
     */
    public boolean hasRepeatedCountMin() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     * Repeated field with at least this number of elements.
     * </pre>
     *
     * <code>optional int64 repeated_count_min = 12[json_name = "repeatedCountMin"];</code>
     */
    public long getRepeatedCountMin() {
      return repeatedCountMin_;
    }

    public static final int REPEATED_COUNT_MAX_FIELD_NUMBER = 13;
    private long repeatedCountMax_;
    /**
     * <pre>
     * Repeated field with at most this number of elements.
     * </pre>
     *
     * <code>optional int64 repeated_count_max = 13[json_name = "repeatedCountMax"];</code>
     */
    public boolean hasRepeatedCountMax() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     * Repeated field with at most this number of elements.
     * </pre>
     *
     * <code>optional int64 repeated_count_max = 13[json_name = "repeatedCountMax"];</code>
     */
    public long getRepeatedCountMax() {
      return repeatedCountMax_;
    }

    public static final int LENGTH_GT_FIELD_NUMBER = 14;
    private long lengthGt_;
    /**
     * <pre>
     * Field value of length greater than this value.
     * </pre>
     *
     * <code>optional int64 length_gt = 14[json_name = "lengthGt"];</code>
     */
    public boolean hasLengthGt() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     * Field value of length greater than this value.
     * </pre>
     *
     * <code>optional int64 length_gt = 14[json_name = "lengthGt"];</code>
     */
    public long getLengthGt() {
      return lengthGt_;
    }

    public static final int LENGTH_LT_FIELD_NUMBER = 15;
    private long lengthLt_;
    /**
     * <pre>
     * Field value of length smaller than this value.
     * </pre>
     *
     * <code>optional int64 length_lt = 15[json_name = "lengthLt"];</code>
     */
    public boolean hasLengthLt() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <pre>
     * Field value of length smaller than this value.
     * </pre>
     *
     * <code>optional int64 length_lt = 15[json_name = "lengthLt"];</code>
     */
    public long getLengthLt() {
      return lengthLt_;
    }

    public static final int LENGTH_EQ_FIELD_NUMBER = 16;
    private long lengthEq_;
    /**
     * <pre>
     * Field value of integer strictly equal this value.
     * </pre>
     *
     * <code>optional int64 length_eq = 16[json_name = "lengthEq"];</code>
     */
    public boolean hasLengthEq() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <pre>
     * Field value of integer strictly equal this value.
     * </pre>
     *
     * <code>optional int64 length_eq = 16[json_name = "lengthEq"];</code>
     */
    public long getLengthEq() {
      return lengthEq_;
    }

    public static final int IS_IN_ENUM_FIELD_NUMBER = 17;
    private boolean isInEnum_;
    /**
     * <pre>
     * Requires that the value is in the enum.
     * </pre>
     *
     * <code>optional bool is_in_enum = 17[json_name = "isInEnum"];</code>
     */
    public boolean hasIsInEnum() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <pre>
     * Requires that the value is in the enum.
     * </pre>
     *
     * <code>optional bool is_in_enum = 17[json_name = "isInEnum"];</code>
     */
    public boolean getIsInEnum() {
      return isInEnum_;
    }

    public static final int UUID_VER_FIELD_NUMBER = 18;
    private int uuidVer_;
    /**
     * <pre>
     * Ensures that a string value is in UUID format.
     * uuid_ver specifies the valid UUID versions. Valid values are: 0-5.
     * If uuid_ver is 0 all UUID versions are accepted.
     * </pre>
     *
     * <code>optional int32 uuid_ver = 18[json_name = "uuidVer"];</code>
     */
    public boolean hasUuidVer() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <pre>
     * Ensures that a string value is in UUID format.
     * uuid_ver specifies the valid UUID versions. Valid values are: 0-5.
     * If uuid_ver is 0 all UUID versions are accepted.
     * </pre>
     *
     * <code>optional int32 uuid_ver = 18[json_name = "uuidVer"];</code>
     */
    public int getUuidVer() {
      return uuidVer_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, regex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, intGt_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, intLt_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, msgExists_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, humanError_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(6, floatGt_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(7, floatLt_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeDouble(8, floatEpsilon_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeDouble(9, floatGte_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeDouble(10, floatLte_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(11, stringNotEmpty_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt64(12, repeatedCountMin_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt64(13, repeatedCountMax_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt64(14, lengthGt_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt64(15, lengthLt_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt64(16, lengthEq_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeBool(17, isInEnum_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(18, uuidVer_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, regex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, intGt_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, intLt_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, msgExists_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, humanError_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, floatGt_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, floatLt_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, floatEpsilon_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, floatGte_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, floatLte_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, stringNotEmpty_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(12, repeatedCountMin_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(13, repeatedCountMax_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(14, lengthGt_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(15, lengthLt_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(16, lengthEq_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17, isInEnum_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, uuidVer_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.github.mwitkow.go_proto_validators.Validator.FieldValidator)) {
        return super.equals(obj);
      }
      com.github.mwitkow.go_proto_validators.Validator.FieldValidator other = (com.github.mwitkow.go_proto_validators.Validator.FieldValidator) obj;

      boolean result = true;
      result = result && (hasRegex() == other.hasRegex());
      if (hasRegex()) {
        result = result && getRegex()
            .equals(other.getRegex());
      }
      result = result && (hasIntGt() == other.hasIntGt());
      if (hasIntGt()) {
        result = result && (getIntGt()
            == other.getIntGt());
      }
      result = result && (hasIntLt() == other.hasIntLt());
      if (hasIntLt()) {
        result = result && (getIntLt()
            == other.getIntLt());
      }
      result = result && (hasMsgExists() == other.hasMsgExists());
      if (hasMsgExists()) {
        result = result && (getMsgExists()
            == other.getMsgExists());
      }
      result = result && (hasHumanError() == other.hasHumanError());
      if (hasHumanError()) {
        result = result && getHumanError()
            .equals(other.getHumanError());
      }
      result = result && (hasFloatGt() == other.hasFloatGt());
      if (hasFloatGt()) {
        result = result && (
            java.lang.Double.doubleToLongBits(getFloatGt())
            == java.lang.Double.doubleToLongBits(
                other.getFloatGt()));
      }
      result = result && (hasFloatLt() == other.hasFloatLt());
      if (hasFloatLt()) {
        result = result && (
            java.lang.Double.doubleToLongBits(getFloatLt())
            == java.lang.Double.doubleToLongBits(
                other.getFloatLt()));
      }
      result = result && (hasFloatEpsilon() == other.hasFloatEpsilon());
      if (hasFloatEpsilon()) {
        result = result && (
            java.lang.Double.doubleToLongBits(getFloatEpsilon())
            == java.lang.Double.doubleToLongBits(
                other.getFloatEpsilon()));
      }
      result = result && (hasFloatGte() == other.hasFloatGte());
      if (hasFloatGte()) {
        result = result && (
            java.lang.Double.doubleToLongBits(getFloatGte())
            == java.lang.Double.doubleToLongBits(
                other.getFloatGte()));
      }
      result = result && (hasFloatLte() == other.hasFloatLte());
      if (hasFloatLte()) {
        result = result && (
            java.lang.Double.doubleToLongBits(getFloatLte())
            == java.lang.Double.doubleToLongBits(
                other.getFloatLte()));
      }
      result = result && (hasStringNotEmpty() == other.hasStringNotEmpty());
      if (hasStringNotEmpty()) {
        result = result && (getStringNotEmpty()
            == other.getStringNotEmpty());
      }
      result = result && (hasRepeatedCountMin() == other.hasRepeatedCountMin());
      if (hasRepeatedCountMin()) {
        result = result && (getRepeatedCountMin()
            == other.getRepeatedCountMin());
      }
      result = result && (hasRepeatedCountMax() == other.hasRepeatedCountMax());
      if (hasRepeatedCountMax()) {
        result = result && (getRepeatedCountMax()
            == other.getRepeatedCountMax());
      }
      result = result && (hasLengthGt() == other.hasLengthGt());
      if (hasLengthGt()) {
        result = result && (getLengthGt()
            == other.getLengthGt());
      }
      result = result && (hasLengthLt() == other.hasLengthLt());
      if (hasLengthLt()) {
        result = result && (getLengthLt()
            == other.getLengthLt());
      }
      result = result && (hasLengthEq() == other.hasLengthEq());
      if (hasLengthEq()) {
        result = result && (getLengthEq()
            == other.getLengthEq());
      }
      result = result && (hasIsInEnum() == other.hasIsInEnum());
      if (hasIsInEnum()) {
        result = result && (getIsInEnum()
            == other.getIsInEnum());
      }
      result = result && (hasUuidVer() == other.hasUuidVer());
      if (hasUuidVer()) {
        result = result && (getUuidVer()
            == other.getUuidVer());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasRegex()) {
        hash = (37 * hash) + REGEX_FIELD_NUMBER;
        hash = (53 * hash) + getRegex().hashCode();
      }
      if (hasIntGt()) {
        hash = (37 * hash) + INT_GT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getIntGt());
      }
      if (hasIntLt()) {
        hash = (37 * hash) + INT_LT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getIntLt());
      }
      if (hasMsgExists()) {
        hash = (37 * hash) + MSG_EXISTS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getMsgExists());
      }
      if (hasHumanError()) {
        hash = (37 * hash) + HUMAN_ERROR_FIELD_NUMBER;
        hash = (53 * hash) + getHumanError().hashCode();
      }
      if (hasFloatGt()) {
        hash = (37 * hash) + FLOAT_GT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getFloatGt()));
      }
      if (hasFloatLt()) {
        hash = (37 * hash) + FLOAT_LT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getFloatLt()));
      }
      if (hasFloatEpsilon()) {
        hash = (37 * hash) + FLOAT_EPSILON_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getFloatEpsilon()));
      }
      if (hasFloatGte()) {
        hash = (37 * hash) + FLOAT_GTE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getFloatGte()));
      }
      if (hasFloatLte()) {
        hash = (37 * hash) + FLOAT_LTE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getFloatLte()));
      }
      if (hasStringNotEmpty()) {
        hash = (37 * hash) + STRING_NOT_EMPTY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getStringNotEmpty());
      }
      if (hasRepeatedCountMin()) {
        hash = (37 * hash) + REPEATED_COUNT_MIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getRepeatedCountMin());
      }
      if (hasRepeatedCountMax()) {
        hash = (37 * hash) + REPEATED_COUNT_MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getRepeatedCountMax());
      }
      if (hasLengthGt()) {
        hash = (37 * hash) + LENGTH_GT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getLengthGt());
      }
      if (hasLengthLt()) {
        hash = (37 * hash) + LENGTH_LT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getLengthLt());
      }
      if (hasLengthEq()) {
        hash = (37 * hash) + LENGTH_EQ_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getLengthEq());
      }
      if (hasIsInEnum()) {
        hash = (37 * hash) + IS_IN_ENUM_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsInEnum());
      }
      if (hasUuidVer()) {
        hash = (37 * hash) + UUID_VER_FIELD_NUMBER;
        hash = (53 * hash) + getUuidVer();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.github.mwitkow.go_proto_validators.Validator.FieldValidator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.FieldValidator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.FieldValidator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.FieldValidator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.FieldValidator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.FieldValidator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.FieldValidator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.FieldValidator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.FieldValidator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.FieldValidator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.FieldValidator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.FieldValidator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.github.mwitkow.go_proto_validators.Validator.FieldValidator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code validator.FieldValidator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:validator.FieldValidator)
        com.github.mwitkow.go_proto_validators.Validator.FieldValidatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.github.mwitkow.go_proto_validators.Validator.internal_static_validator_FieldValidator_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.github.mwitkow.go_proto_validators.Validator.internal_static_validator_FieldValidator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.github.mwitkow.go_proto_validators.Validator.FieldValidator.class, com.github.mwitkow.go_proto_validators.Validator.FieldValidator.Builder.class);
      }

      // Construct using com.github.mwitkow.go_proto_validators.Validator.FieldValidator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        regex_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        intGt_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        intLt_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        msgExists_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        humanError_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        floatGt_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        floatLt_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        floatEpsilon_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000080);
        floatGte_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        floatLte_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000200);
        stringNotEmpty_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        repeatedCountMin_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000800);
        repeatedCountMax_ = 0L;
        bitField0_ = (bitField0_ & ~0x00001000);
        lengthGt_ = 0L;
        bitField0_ = (bitField0_ & ~0x00002000);
        lengthLt_ = 0L;
        bitField0_ = (bitField0_ & ~0x00004000);
        lengthEq_ = 0L;
        bitField0_ = (bitField0_ & ~0x00008000);
        isInEnum_ = false;
        bitField0_ = (bitField0_ & ~0x00010000);
        uuidVer_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.github.mwitkow.go_proto_validators.Validator.internal_static_validator_FieldValidator_descriptor;
      }

      public com.github.mwitkow.go_proto_validators.Validator.FieldValidator getDefaultInstanceForType() {
        return com.github.mwitkow.go_proto_validators.Validator.FieldValidator.getDefaultInstance();
      }

      public com.github.mwitkow.go_proto_validators.Validator.FieldValidator build() {
        com.github.mwitkow.go_proto_validators.Validator.FieldValidator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.github.mwitkow.go_proto_validators.Validator.FieldValidator buildPartial() {
        com.github.mwitkow.go_proto_validators.Validator.FieldValidator result = new com.github.mwitkow.go_proto_validators.Validator.FieldValidator(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.regex_ = regex_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.intGt_ = intGt_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.intLt_ = intLt_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.msgExists_ = msgExists_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.humanError_ = humanError_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.floatGt_ = floatGt_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.floatLt_ = floatLt_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.floatEpsilon_ = floatEpsilon_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.floatGte_ = floatGte_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.floatLte_ = floatLte_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.stringNotEmpty_ = stringNotEmpty_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.repeatedCountMin_ = repeatedCountMin_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.repeatedCountMax_ = repeatedCountMax_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.lengthGt_ = lengthGt_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.lengthLt_ = lengthLt_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.lengthEq_ = lengthEq_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.isInEnum_ = isInEnum_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.uuidVer_ = uuidVer_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.github.mwitkow.go_proto_validators.Validator.FieldValidator) {
          return mergeFrom((com.github.mwitkow.go_proto_validators.Validator.FieldValidator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.github.mwitkow.go_proto_validators.Validator.FieldValidator other) {
        if (other == com.github.mwitkow.go_proto_validators.Validator.FieldValidator.getDefaultInstance()) return this;
        if (other.hasRegex()) {
          bitField0_ |= 0x00000001;
          regex_ = other.regex_;
          onChanged();
        }
        if (other.hasIntGt()) {
          setIntGt(other.getIntGt());
        }
        if (other.hasIntLt()) {
          setIntLt(other.getIntLt());
        }
        if (other.hasMsgExists()) {
          setMsgExists(other.getMsgExists());
        }
        if (other.hasHumanError()) {
          bitField0_ |= 0x00000010;
          humanError_ = other.humanError_;
          onChanged();
        }
        if (other.hasFloatGt()) {
          setFloatGt(other.getFloatGt());
        }
        if (other.hasFloatLt()) {
          setFloatLt(other.getFloatLt());
        }
        if (other.hasFloatEpsilon()) {
          setFloatEpsilon(other.getFloatEpsilon());
        }
        if (other.hasFloatGte()) {
          setFloatGte(other.getFloatGte());
        }
        if (other.hasFloatLte()) {
          setFloatLte(other.getFloatLte());
        }
        if (other.hasStringNotEmpty()) {
          setStringNotEmpty(other.getStringNotEmpty());
        }
        if (other.hasRepeatedCountMin()) {
          setRepeatedCountMin(other.getRepeatedCountMin());
        }
        if (other.hasRepeatedCountMax()) {
          setRepeatedCountMax(other.getRepeatedCountMax());
        }
        if (other.hasLengthGt()) {
          setLengthGt(other.getLengthGt());
        }
        if (other.hasLengthLt()) {
          setLengthLt(other.getLengthLt());
        }
        if (other.hasLengthEq()) {
          setLengthEq(other.getLengthEq());
        }
        if (other.hasIsInEnum()) {
          setIsInEnum(other.getIsInEnum());
        }
        if (other.hasUuidVer()) {
          setUuidVer(other.getUuidVer());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.github.mwitkow.go_proto_validators.Validator.FieldValidator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.github.mwitkow.go_proto_validators.Validator.FieldValidator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object regex_ = "";
      /**
       * <pre>
       * Uses a Golang RE2-syntax regex to match the field contents.
       * </pre>
       *
       * <code>optional string regex = 1[json_name = "regex"];</code>
       */
      public boolean hasRegex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Uses a Golang RE2-syntax regex to match the field contents.
       * </pre>
       *
       * <code>optional string regex = 1[json_name = "regex"];</code>
       */
      public java.lang.String getRegex() {
        java.lang.Object ref = regex_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            regex_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Uses a Golang RE2-syntax regex to match the field contents.
       * </pre>
       *
       * <code>optional string regex = 1[json_name = "regex"];</code>
       */
      public com.google.protobuf.ByteString
          getRegexBytes() {
        java.lang.Object ref = regex_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          regex_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Uses a Golang RE2-syntax regex to match the field contents.
       * </pre>
       *
       * <code>optional string regex = 1[json_name = "regex"];</code>
       */
      public Builder setRegex(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        regex_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Uses a Golang RE2-syntax regex to match the field contents.
       * </pre>
       *
       * <code>optional string regex = 1[json_name = "regex"];</code>
       */
      public Builder clearRegex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        regex_ = getDefaultInstance().getRegex();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Uses a Golang RE2-syntax regex to match the field contents.
       * </pre>
       *
       * <code>optional string regex = 1[json_name = "regex"];</code>
       */
      public Builder setRegexBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        regex_ = value;
        onChanged();
        return this;
      }

      private long intGt_ ;
      /**
       * <pre>
       * Field value of integer strictly greater than this value.
       * </pre>
       *
       * <code>optional int64 int_gt = 2[json_name = "intGt"];</code>
       */
      public boolean hasIntGt() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Field value of integer strictly greater than this value.
       * </pre>
       *
       * <code>optional int64 int_gt = 2[json_name = "intGt"];</code>
       */
      public long getIntGt() {
        return intGt_;
      }
      /**
       * <pre>
       * Field value of integer strictly greater than this value.
       * </pre>
       *
       * <code>optional int64 int_gt = 2[json_name = "intGt"];</code>
       */
      public Builder setIntGt(long value) {
        bitField0_ |= 0x00000002;
        intGt_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Field value of integer strictly greater than this value.
       * </pre>
       *
       * <code>optional int64 int_gt = 2[json_name = "intGt"];</code>
       */
      public Builder clearIntGt() {
        bitField0_ = (bitField0_ & ~0x00000002);
        intGt_ = 0L;
        onChanged();
        return this;
      }

      private long intLt_ ;
      /**
       * <pre>
       * Field value of integer strictly smaller than this value.
       * </pre>
       *
       * <code>optional int64 int_lt = 3[json_name = "intLt"];</code>
       */
      public boolean hasIntLt() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Field value of integer strictly smaller than this value.
       * </pre>
       *
       * <code>optional int64 int_lt = 3[json_name = "intLt"];</code>
       */
      public long getIntLt() {
        return intLt_;
      }
      /**
       * <pre>
       * Field value of integer strictly smaller than this value.
       * </pre>
       *
       * <code>optional int64 int_lt = 3[json_name = "intLt"];</code>
       */
      public Builder setIntLt(long value) {
        bitField0_ |= 0x00000004;
        intLt_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Field value of integer strictly smaller than this value.
       * </pre>
       *
       * <code>optional int64 int_lt = 3[json_name = "intLt"];</code>
       */
      public Builder clearIntLt() {
        bitField0_ = (bitField0_ & ~0x00000004);
        intLt_ = 0L;
        onChanged();
        return this;
      }

      private boolean msgExists_ ;
      /**
       * <pre>
       * Used for nested message types, requires that the message type exists.
       * </pre>
       *
       * <code>optional bool msg_exists = 4[json_name = "msgExists"];</code>
       */
      public boolean hasMsgExists() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * Used for nested message types, requires that the message type exists.
       * </pre>
       *
       * <code>optional bool msg_exists = 4[json_name = "msgExists"];</code>
       */
      public boolean getMsgExists() {
        return msgExists_;
      }
      /**
       * <pre>
       * Used for nested message types, requires that the message type exists.
       * </pre>
       *
       * <code>optional bool msg_exists = 4[json_name = "msgExists"];</code>
       */
      public Builder setMsgExists(boolean value) {
        bitField0_ |= 0x00000008;
        msgExists_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Used for nested message types, requires that the message type exists.
       * </pre>
       *
       * <code>optional bool msg_exists = 4[json_name = "msgExists"];</code>
       */
      public Builder clearMsgExists() {
        bitField0_ = (bitField0_ & ~0x00000008);
        msgExists_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object humanError_ = "";
      /**
       * <pre>
       * Human error specifies a user-customizable error that is visible to the user.
       * </pre>
       *
       * <code>optional string human_error = 5[json_name = "humanError"];</code>
       */
      public boolean hasHumanError() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * Human error specifies a user-customizable error that is visible to the user.
       * </pre>
       *
       * <code>optional string human_error = 5[json_name = "humanError"];</code>
       */
      public java.lang.String getHumanError() {
        java.lang.Object ref = humanError_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            humanError_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Human error specifies a user-customizable error that is visible to the user.
       * </pre>
       *
       * <code>optional string human_error = 5[json_name = "humanError"];</code>
       */
      public com.google.protobuf.ByteString
          getHumanErrorBytes() {
        java.lang.Object ref = humanError_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          humanError_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Human error specifies a user-customizable error that is visible to the user.
       * </pre>
       *
       * <code>optional string human_error = 5[json_name = "humanError"];</code>
       */
      public Builder setHumanError(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        humanError_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Human error specifies a user-customizable error that is visible to the user.
       * </pre>
       *
       * <code>optional string human_error = 5[json_name = "humanError"];</code>
       */
      public Builder clearHumanError() {
        bitField0_ = (bitField0_ & ~0x00000010);
        humanError_ = getDefaultInstance().getHumanError();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Human error specifies a user-customizable error that is visible to the user.
       * </pre>
       *
       * <code>optional string human_error = 5[json_name = "humanError"];</code>
       */
      public Builder setHumanErrorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        humanError_ = value;
        onChanged();
        return this;
      }

      private double floatGt_ ;
      /**
       * <pre>
       * Field value of double strictly greater than this value.
       * Note that this value can only take on a valid floating point
       * value. Use together with float_epsilon if you need something more specific.
       * </pre>
       *
       * <code>optional double float_gt = 6[json_name = "floatGt"];</code>
       */
      public boolean hasFloatGt() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * Field value of double strictly greater than this value.
       * Note that this value can only take on a valid floating point
       * value. Use together with float_epsilon if you need something more specific.
       * </pre>
       *
       * <code>optional double float_gt = 6[json_name = "floatGt"];</code>
       */
      public double getFloatGt() {
        return floatGt_;
      }
      /**
       * <pre>
       * Field value of double strictly greater than this value.
       * Note that this value can only take on a valid floating point
       * value. Use together with float_epsilon if you need something more specific.
       * </pre>
       *
       * <code>optional double float_gt = 6[json_name = "floatGt"];</code>
       */
      public Builder setFloatGt(double value) {
        bitField0_ |= 0x00000020;
        floatGt_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Field value of double strictly greater than this value.
       * Note that this value can only take on a valid floating point
       * value. Use together with float_epsilon if you need something more specific.
       * </pre>
       *
       * <code>optional double float_gt = 6[json_name = "floatGt"];</code>
       */
      public Builder clearFloatGt() {
        bitField0_ = (bitField0_ & ~0x00000020);
        floatGt_ = 0D;
        onChanged();
        return this;
      }

      private double floatLt_ ;
      /**
       * <pre>
       * Field value of double strictly smaller than this value.
       * Note that this value can only take on a valid floating point
       * value. Use together with float_epsilon if you need something more specific.
       * </pre>
       *
       * <code>optional double float_lt = 7[json_name = "floatLt"];</code>
       */
      public boolean hasFloatLt() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * Field value of double strictly smaller than this value.
       * Note that this value can only take on a valid floating point
       * value. Use together with float_epsilon if you need something more specific.
       * </pre>
       *
       * <code>optional double float_lt = 7[json_name = "floatLt"];</code>
       */
      public double getFloatLt() {
        return floatLt_;
      }
      /**
       * <pre>
       * Field value of double strictly smaller than this value.
       * Note that this value can only take on a valid floating point
       * value. Use together with float_epsilon if you need something more specific.
       * </pre>
       *
       * <code>optional double float_lt = 7[json_name = "floatLt"];</code>
       */
      public Builder setFloatLt(double value) {
        bitField0_ |= 0x00000040;
        floatLt_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Field value of double strictly smaller than this value.
       * Note that this value can only take on a valid floating point
       * value. Use together with float_epsilon if you need something more specific.
       * </pre>
       *
       * <code>optional double float_lt = 7[json_name = "floatLt"];</code>
       */
      public Builder clearFloatLt() {
        bitField0_ = (bitField0_ & ~0x00000040);
        floatLt_ = 0D;
        onChanged();
        return this;
      }

      private double floatEpsilon_ ;
      /**
       * <pre>
       * Field value of double describing the epsilon within which
       * any comparison should be considered to be true. For example,
       * when using float_gt = 0.35, using a float_epsilon of 0.05
       * would mean that any value above 0.30 is acceptable. It can be
       * thought of as a {float_value_condition} +- {float_epsilon}.
       * If unset, no correction for floating point inaccuracies in
       * comparisons will be attempted.
       * </pre>
       *
       * <code>optional double float_epsilon = 8[json_name = "floatEpsilon"];</code>
       */
      public boolean hasFloatEpsilon() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * Field value of double describing the epsilon within which
       * any comparison should be considered to be true. For example,
       * when using float_gt = 0.35, using a float_epsilon of 0.05
       * would mean that any value above 0.30 is acceptable. It can be
       * thought of as a {float_value_condition} +- {float_epsilon}.
       * If unset, no correction for floating point inaccuracies in
       * comparisons will be attempted.
       * </pre>
       *
       * <code>optional double float_epsilon = 8[json_name = "floatEpsilon"];</code>
       */
      public double getFloatEpsilon() {
        return floatEpsilon_;
      }
      /**
       * <pre>
       * Field value of double describing the epsilon within which
       * any comparison should be considered to be true. For example,
       * when using float_gt = 0.35, using a float_epsilon of 0.05
       * would mean that any value above 0.30 is acceptable. It can be
       * thought of as a {float_value_condition} +- {float_epsilon}.
       * If unset, no correction for floating point inaccuracies in
       * comparisons will be attempted.
       * </pre>
       *
       * <code>optional double float_epsilon = 8[json_name = "floatEpsilon"];</code>
       */
      public Builder setFloatEpsilon(double value) {
        bitField0_ |= 0x00000080;
        floatEpsilon_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Field value of double describing the epsilon within which
       * any comparison should be considered to be true. For example,
       * when using float_gt = 0.35, using a float_epsilon of 0.05
       * would mean that any value above 0.30 is acceptable. It can be
       * thought of as a {float_value_condition} +- {float_epsilon}.
       * If unset, no correction for floating point inaccuracies in
       * comparisons will be attempted.
       * </pre>
       *
       * <code>optional double float_epsilon = 8[json_name = "floatEpsilon"];</code>
       */
      public Builder clearFloatEpsilon() {
        bitField0_ = (bitField0_ & ~0x00000080);
        floatEpsilon_ = 0D;
        onChanged();
        return this;
      }

      private double floatGte_ ;
      /**
       * <pre>
       * Floating-point value compared to which the field content should be greater or equal.
       * </pre>
       *
       * <code>optional double float_gte = 9[json_name = "floatGte"];</code>
       */
      public boolean hasFloatGte() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * Floating-point value compared to which the field content should be greater or equal.
       * </pre>
       *
       * <code>optional double float_gte = 9[json_name = "floatGte"];</code>
       */
      public double getFloatGte() {
        return floatGte_;
      }
      /**
       * <pre>
       * Floating-point value compared to which the field content should be greater or equal.
       * </pre>
       *
       * <code>optional double float_gte = 9[json_name = "floatGte"];</code>
       */
      public Builder setFloatGte(double value) {
        bitField0_ |= 0x00000100;
        floatGte_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Floating-point value compared to which the field content should be greater or equal.
       * </pre>
       *
       * <code>optional double float_gte = 9[json_name = "floatGte"];</code>
       */
      public Builder clearFloatGte() {
        bitField0_ = (bitField0_ & ~0x00000100);
        floatGte_ = 0D;
        onChanged();
        return this;
      }

      private double floatLte_ ;
      /**
       * <pre>
       * Floating-point value compared to which the field content should be smaller or equal.
       * </pre>
       *
       * <code>optional double float_lte = 10[json_name = "floatLte"];</code>
       */
      public boolean hasFloatLte() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * Floating-point value compared to which the field content should be smaller or equal.
       * </pre>
       *
       * <code>optional double float_lte = 10[json_name = "floatLte"];</code>
       */
      public double getFloatLte() {
        return floatLte_;
      }
      /**
       * <pre>
       * Floating-point value compared to which the field content should be smaller or equal.
       * </pre>
       *
       * <code>optional double float_lte = 10[json_name = "floatLte"];</code>
       */
      public Builder setFloatLte(double value) {
        bitField0_ |= 0x00000200;
        floatLte_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Floating-point value compared to which the field content should be smaller or equal.
       * </pre>
       *
       * <code>optional double float_lte = 10[json_name = "floatLte"];</code>
       */
      public Builder clearFloatLte() {
        bitField0_ = (bitField0_ & ~0x00000200);
        floatLte_ = 0D;
        onChanged();
        return this;
      }

      private boolean stringNotEmpty_ ;
      /**
       * <pre>
       * Used for string fields, requires the string to be not empty (i.e different from "").
       * </pre>
       *
       * <code>optional bool string_not_empty = 11[json_name = "stringNotEmpty"];</code>
       */
      public boolean hasStringNotEmpty() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       * Used for string fields, requires the string to be not empty (i.e different from "").
       * </pre>
       *
       * <code>optional bool string_not_empty = 11[json_name = "stringNotEmpty"];</code>
       */
      public boolean getStringNotEmpty() {
        return stringNotEmpty_;
      }
      /**
       * <pre>
       * Used for string fields, requires the string to be not empty (i.e different from "").
       * </pre>
       *
       * <code>optional bool string_not_empty = 11[json_name = "stringNotEmpty"];</code>
       */
      public Builder setStringNotEmpty(boolean value) {
        bitField0_ |= 0x00000400;
        stringNotEmpty_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Used for string fields, requires the string to be not empty (i.e different from "").
       * </pre>
       *
       * <code>optional bool string_not_empty = 11[json_name = "stringNotEmpty"];</code>
       */
      public Builder clearStringNotEmpty() {
        bitField0_ = (bitField0_ & ~0x00000400);
        stringNotEmpty_ = false;
        onChanged();
        return this;
      }

      private long repeatedCountMin_ ;
      /**
       * <pre>
       * Repeated field with at least this number of elements.
       * </pre>
       *
       * <code>optional int64 repeated_count_min = 12[json_name = "repeatedCountMin"];</code>
       */
      public boolean hasRepeatedCountMin() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       * Repeated field with at least this number of elements.
       * </pre>
       *
       * <code>optional int64 repeated_count_min = 12[json_name = "repeatedCountMin"];</code>
       */
      public long getRepeatedCountMin() {
        return repeatedCountMin_;
      }
      /**
       * <pre>
       * Repeated field with at least this number of elements.
       * </pre>
       *
       * <code>optional int64 repeated_count_min = 12[json_name = "repeatedCountMin"];</code>
       */
      public Builder setRepeatedCountMin(long value) {
        bitField0_ |= 0x00000800;
        repeatedCountMin_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Repeated field with at least this number of elements.
       * </pre>
       *
       * <code>optional int64 repeated_count_min = 12[json_name = "repeatedCountMin"];</code>
       */
      public Builder clearRepeatedCountMin() {
        bitField0_ = (bitField0_ & ~0x00000800);
        repeatedCountMin_ = 0L;
        onChanged();
        return this;
      }

      private long repeatedCountMax_ ;
      /**
       * <pre>
       * Repeated field with at most this number of elements.
       * </pre>
       *
       * <code>optional int64 repeated_count_max = 13[json_name = "repeatedCountMax"];</code>
       */
      public boolean hasRepeatedCountMax() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       * Repeated field with at most this number of elements.
       * </pre>
       *
       * <code>optional int64 repeated_count_max = 13[json_name = "repeatedCountMax"];</code>
       */
      public long getRepeatedCountMax() {
        return repeatedCountMax_;
      }
      /**
       * <pre>
       * Repeated field with at most this number of elements.
       * </pre>
       *
       * <code>optional int64 repeated_count_max = 13[json_name = "repeatedCountMax"];</code>
       */
      public Builder setRepeatedCountMax(long value) {
        bitField0_ |= 0x00001000;
        repeatedCountMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Repeated field with at most this number of elements.
       * </pre>
       *
       * <code>optional int64 repeated_count_max = 13[json_name = "repeatedCountMax"];</code>
       */
      public Builder clearRepeatedCountMax() {
        bitField0_ = (bitField0_ & ~0x00001000);
        repeatedCountMax_ = 0L;
        onChanged();
        return this;
      }

      private long lengthGt_ ;
      /**
       * <pre>
       * Field value of length greater than this value.
       * </pre>
       *
       * <code>optional int64 length_gt = 14[json_name = "lengthGt"];</code>
       */
      public boolean hasLengthGt() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <pre>
       * Field value of length greater than this value.
       * </pre>
       *
       * <code>optional int64 length_gt = 14[json_name = "lengthGt"];</code>
       */
      public long getLengthGt() {
        return lengthGt_;
      }
      /**
       * <pre>
       * Field value of length greater than this value.
       * </pre>
       *
       * <code>optional int64 length_gt = 14[json_name = "lengthGt"];</code>
       */
      public Builder setLengthGt(long value) {
        bitField0_ |= 0x00002000;
        lengthGt_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Field value of length greater than this value.
       * </pre>
       *
       * <code>optional int64 length_gt = 14[json_name = "lengthGt"];</code>
       */
      public Builder clearLengthGt() {
        bitField0_ = (bitField0_ & ~0x00002000);
        lengthGt_ = 0L;
        onChanged();
        return this;
      }

      private long lengthLt_ ;
      /**
       * <pre>
       * Field value of length smaller than this value.
       * </pre>
       *
       * <code>optional int64 length_lt = 15[json_name = "lengthLt"];</code>
       */
      public boolean hasLengthLt() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <pre>
       * Field value of length smaller than this value.
       * </pre>
       *
       * <code>optional int64 length_lt = 15[json_name = "lengthLt"];</code>
       */
      public long getLengthLt() {
        return lengthLt_;
      }
      /**
       * <pre>
       * Field value of length smaller than this value.
       * </pre>
       *
       * <code>optional int64 length_lt = 15[json_name = "lengthLt"];</code>
       */
      public Builder setLengthLt(long value) {
        bitField0_ |= 0x00004000;
        lengthLt_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Field value of length smaller than this value.
       * </pre>
       *
       * <code>optional int64 length_lt = 15[json_name = "lengthLt"];</code>
       */
      public Builder clearLengthLt() {
        bitField0_ = (bitField0_ & ~0x00004000);
        lengthLt_ = 0L;
        onChanged();
        return this;
      }

      private long lengthEq_ ;
      /**
       * <pre>
       * Field value of integer strictly equal this value.
       * </pre>
       *
       * <code>optional int64 length_eq = 16[json_name = "lengthEq"];</code>
       */
      public boolean hasLengthEq() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <pre>
       * Field value of integer strictly equal this value.
       * </pre>
       *
       * <code>optional int64 length_eq = 16[json_name = "lengthEq"];</code>
       */
      public long getLengthEq() {
        return lengthEq_;
      }
      /**
       * <pre>
       * Field value of integer strictly equal this value.
       * </pre>
       *
       * <code>optional int64 length_eq = 16[json_name = "lengthEq"];</code>
       */
      public Builder setLengthEq(long value) {
        bitField0_ |= 0x00008000;
        lengthEq_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Field value of integer strictly equal this value.
       * </pre>
       *
       * <code>optional int64 length_eq = 16[json_name = "lengthEq"];</code>
       */
      public Builder clearLengthEq() {
        bitField0_ = (bitField0_ & ~0x00008000);
        lengthEq_ = 0L;
        onChanged();
        return this;
      }

      private boolean isInEnum_ ;
      /**
       * <pre>
       * Requires that the value is in the enum.
       * </pre>
       *
       * <code>optional bool is_in_enum = 17[json_name = "isInEnum"];</code>
       */
      public boolean hasIsInEnum() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <pre>
       * Requires that the value is in the enum.
       * </pre>
       *
       * <code>optional bool is_in_enum = 17[json_name = "isInEnum"];</code>
       */
      public boolean getIsInEnum() {
        return isInEnum_;
      }
      /**
       * <pre>
       * Requires that the value is in the enum.
       * </pre>
       *
       * <code>optional bool is_in_enum = 17[json_name = "isInEnum"];</code>
       */
      public Builder setIsInEnum(boolean value) {
        bitField0_ |= 0x00010000;
        isInEnum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Requires that the value is in the enum.
       * </pre>
       *
       * <code>optional bool is_in_enum = 17[json_name = "isInEnum"];</code>
       */
      public Builder clearIsInEnum() {
        bitField0_ = (bitField0_ & ~0x00010000);
        isInEnum_ = false;
        onChanged();
        return this;
      }

      private int uuidVer_ ;
      /**
       * <pre>
       * Ensures that a string value is in UUID format.
       * uuid_ver specifies the valid UUID versions. Valid values are: 0-5.
       * If uuid_ver is 0 all UUID versions are accepted.
       * </pre>
       *
       * <code>optional int32 uuid_ver = 18[json_name = "uuidVer"];</code>
       */
      public boolean hasUuidVer() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <pre>
       * Ensures that a string value is in UUID format.
       * uuid_ver specifies the valid UUID versions. Valid values are: 0-5.
       * If uuid_ver is 0 all UUID versions are accepted.
       * </pre>
       *
       * <code>optional int32 uuid_ver = 18[json_name = "uuidVer"];</code>
       */
      public int getUuidVer() {
        return uuidVer_;
      }
      /**
       * <pre>
       * Ensures that a string value is in UUID format.
       * uuid_ver specifies the valid UUID versions. Valid values are: 0-5.
       * If uuid_ver is 0 all UUID versions are accepted.
       * </pre>
       *
       * <code>optional int32 uuid_ver = 18[json_name = "uuidVer"];</code>
       */
      public Builder setUuidVer(int value) {
        bitField0_ |= 0x00020000;
        uuidVer_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Ensures that a string value is in UUID format.
       * uuid_ver specifies the valid UUID versions. Valid values are: 0-5.
       * If uuid_ver is 0 all UUID versions are accepted.
       * </pre>
       *
       * <code>optional int32 uuid_ver = 18[json_name = "uuidVer"];</code>
       */
      public Builder clearUuidVer() {
        bitField0_ = (bitField0_ & ~0x00020000);
        uuidVer_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:validator.FieldValidator)
    }

    // @@protoc_insertion_point(class_scope:validator.FieldValidator)
    private static final com.github.mwitkow.go_proto_validators.Validator.FieldValidator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.github.mwitkow.go_proto_validators.Validator.FieldValidator();
    }

    public static com.github.mwitkow.go_proto_validators.Validator.FieldValidator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<FieldValidator>
        PARSER = new com.google.protobuf.AbstractParser<FieldValidator>() {
      public FieldValidator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FieldValidator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FieldValidator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FieldValidator> getParserForType() {
      return PARSER;
    }

    public com.github.mwitkow.go_proto_validators.Validator.FieldValidator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OneofValidatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:validator.OneofValidator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Require that one of the oneof fields is set.
     * </pre>
     *
     * <code>optional bool required = 1[json_name = "required"];</code>
     */
    boolean hasRequired();
    /**
     * <pre>
     * Require that one of the oneof fields is set.
     * </pre>
     *
     * <code>optional bool required = 1[json_name = "required"];</code>
     */
    boolean getRequired();
  }
  /**
   * Protobuf type {@code validator.OneofValidator}
   */
  public  static final class OneofValidator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:validator.OneofValidator)
      OneofValidatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use OneofValidator.newBuilder() to construct.
    private OneofValidator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OneofValidator() {
      required_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private OneofValidator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              required_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.mwitkow.go_proto_validators.Validator.internal_static_validator_OneofValidator_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.mwitkow.go_proto_validators.Validator.internal_static_validator_OneofValidator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.mwitkow.go_proto_validators.Validator.OneofValidator.class, com.github.mwitkow.go_proto_validators.Validator.OneofValidator.Builder.class);
    }

    private int bitField0_;
    public static final int REQUIRED_FIELD_NUMBER = 1;
    private boolean required_;
    /**
     * <pre>
     * Require that one of the oneof fields is set.
     * </pre>
     *
     * <code>optional bool required = 1[json_name = "required"];</code>
     */
    public boolean hasRequired() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Require that one of the oneof fields is set.
     * </pre>
     *
     * <code>optional bool required = 1[json_name = "required"];</code>
     */
    public boolean getRequired() {
      return required_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, required_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, required_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.github.mwitkow.go_proto_validators.Validator.OneofValidator)) {
        return super.equals(obj);
      }
      com.github.mwitkow.go_proto_validators.Validator.OneofValidator other = (com.github.mwitkow.go_proto_validators.Validator.OneofValidator) obj;

      boolean result = true;
      result = result && (hasRequired() == other.hasRequired());
      if (hasRequired()) {
        result = result && (getRequired()
            == other.getRequired());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasRequired()) {
        hash = (37 * hash) + REQUIRED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getRequired());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.github.mwitkow.go_proto_validators.Validator.OneofValidator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.OneofValidator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.OneofValidator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.OneofValidator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.OneofValidator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.OneofValidator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.OneofValidator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.OneofValidator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.OneofValidator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.OneofValidator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.OneofValidator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.mwitkow.go_proto_validators.Validator.OneofValidator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.github.mwitkow.go_proto_validators.Validator.OneofValidator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code validator.OneofValidator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:validator.OneofValidator)
        com.github.mwitkow.go_proto_validators.Validator.OneofValidatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.github.mwitkow.go_proto_validators.Validator.internal_static_validator_OneofValidator_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.github.mwitkow.go_proto_validators.Validator.internal_static_validator_OneofValidator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.github.mwitkow.go_proto_validators.Validator.OneofValidator.class, com.github.mwitkow.go_proto_validators.Validator.OneofValidator.Builder.class);
      }

      // Construct using com.github.mwitkow.go_proto_validators.Validator.OneofValidator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        required_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.github.mwitkow.go_proto_validators.Validator.internal_static_validator_OneofValidator_descriptor;
      }

      public com.github.mwitkow.go_proto_validators.Validator.OneofValidator getDefaultInstanceForType() {
        return com.github.mwitkow.go_proto_validators.Validator.OneofValidator.getDefaultInstance();
      }

      public com.github.mwitkow.go_proto_validators.Validator.OneofValidator build() {
        com.github.mwitkow.go_proto_validators.Validator.OneofValidator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.github.mwitkow.go_proto_validators.Validator.OneofValidator buildPartial() {
        com.github.mwitkow.go_proto_validators.Validator.OneofValidator result = new com.github.mwitkow.go_proto_validators.Validator.OneofValidator(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.required_ = required_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.github.mwitkow.go_proto_validators.Validator.OneofValidator) {
          return mergeFrom((com.github.mwitkow.go_proto_validators.Validator.OneofValidator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.github.mwitkow.go_proto_validators.Validator.OneofValidator other) {
        if (other == com.github.mwitkow.go_proto_validators.Validator.OneofValidator.getDefaultInstance()) return this;
        if (other.hasRequired()) {
          setRequired(other.getRequired());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.github.mwitkow.go_proto_validators.Validator.OneofValidator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.github.mwitkow.go_proto_validators.Validator.OneofValidator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean required_ ;
      /**
       * <pre>
       * Require that one of the oneof fields is set.
       * </pre>
       *
       * <code>optional bool required = 1[json_name = "required"];</code>
       */
      public boolean hasRequired() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Require that one of the oneof fields is set.
       * </pre>
       *
       * <code>optional bool required = 1[json_name = "required"];</code>
       */
      public boolean getRequired() {
        return required_;
      }
      /**
       * <pre>
       * Require that one of the oneof fields is set.
       * </pre>
       *
       * <code>optional bool required = 1[json_name = "required"];</code>
       */
      public Builder setRequired(boolean value) {
        bitField0_ |= 0x00000001;
        required_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Require that one of the oneof fields is set.
       * </pre>
       *
       * <code>optional bool required = 1[json_name = "required"];</code>
       */
      public Builder clearRequired() {
        bitField0_ = (bitField0_ & ~0x00000001);
        required_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:validator.OneofValidator)
    }

    // @@protoc_insertion_point(class_scope:validator.OneofValidator)
    private static final com.github.mwitkow.go_proto_validators.Validator.OneofValidator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.github.mwitkow.go_proto_validators.Validator.OneofValidator();
    }

    public static com.github.mwitkow.go_proto_validators.Validator.OneofValidator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<OneofValidator>
        PARSER = new com.google.protobuf.AbstractParser<OneofValidator>() {
      public OneofValidator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OneofValidator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<OneofValidator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OneofValidator> getParserForType() {
      return PARSER;
    }

    public com.github.mwitkow.go_proto_validators.Validator.OneofValidator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int FIELD_FIELD_NUMBER = 65020;
  /**
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      com.github.mwitkow.go_proto_validators.Validator.FieldValidator> field = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        com.github.mwitkow.go_proto_validators.Validator.FieldValidator.class,
        com.github.mwitkow.go_proto_validators.Validator.FieldValidator.getDefaultInstance());
  public static final int ONEOF_FIELD_NUMBER = 65021;
  /**
   * <code>extend .google.protobuf.OneofOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.OneofOptions,
      com.github.mwitkow.go_proto_validators.Validator.OneofValidator> oneof = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        com.github.mwitkow.go_proto_validators.Validator.OneofValidator.class,
        com.github.mwitkow.go_proto_validators.Validator.OneofValidator.getDefaultInstance());
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_validator_FieldValidator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_validator_FieldValidator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_validator_OneofValidator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_validator_OneofValidator_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n6github.com/mwitkow/go-proto-validators" +
      "/validator.proto\022\tvalidator\032 google/prot" +
      "obuf/descriptor.proto\"\277\004\n\016FieldValidator" +
      "\022\024\n\005regex\030\001 \001(\tR\005regex\022\025\n\006int_gt\030\002 \001(\003R\005" +
      "intGt\022\025\n\006int_lt\030\003 \001(\003R\005intLt\022\035\n\nmsg_exis" +
      "ts\030\004 \001(\010R\tmsgExists\022\037\n\013human_error\030\005 \001(\t" +
      "R\nhumanError\022\031\n\010float_gt\030\006 \001(\001R\007floatGt\022" +
      "\031\n\010float_lt\030\007 \001(\001R\007floatLt\022#\n\rfloat_epsi" +
      "lon\030\010 \001(\001R\014floatEpsilon\022\033\n\tfloat_gte\030\t \001" +
      "(\001R\010floatGte\022\033\n\tfloat_lte\030\n \001(\001R\010floatLt" +
      "e\022(\n\020string_not_empty\030\013 \001(\010R\016stringNotEm" +
      "pty\022,\n\022repeated_count_min\030\014 \001(\003R\020repeate" +
      "dCountMin\022,\n\022repeated_count_max\030\r \001(\003R\020r" +
      "epeatedCountMax\022\033\n\tlength_gt\030\016 \001(\003R\010leng" +
      "thGt\022\033\n\tlength_lt\030\017 \001(\003R\010lengthLt\022\033\n\tlen" +
      "gth_eq\030\020 \001(\003R\010lengthEq\022\034\n\nis_in_enum\030\021 \001" +
      "(\010R\010isInEnum\022\031\n\010uuid_ver\030\022 \001(\005R\007uuidVer\"" +
      ",\n\016OneofValidator\022\032\n\010required\030\001 \001(\010R\010req" +
      "uired:P\n\005field\022\035.google.protobuf.FieldOp" +
      "tions\030\374\373\003 \001(\0132\031.validator.FieldValidator" +
      "R\005field:P\n\005oneof\022\035.google.protobuf.Oneof" +
      "Options\030\375\373\003 \001(\0132\031.validator.OneofValidat" +
      "orR\005oneofBZ\n&com.github.mwitkow.go_proto" +
      "_validatorsZ0github.com/mwitkow/go-proto" +
      "-validators;validator"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.DescriptorProtos.getDescriptor(),
        }, assigner);
    internal_static_validator_FieldValidator_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_validator_FieldValidator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_validator_FieldValidator_descriptor,
        new java.lang.String[] { "Regex", "IntGt", "IntLt", "MsgExists", "HumanError", "FloatGt", "FloatLt", "FloatEpsilon", "FloatGte", "FloatLte", "StringNotEmpty", "RepeatedCountMin", "RepeatedCountMax", "LengthGt", "LengthLt", "LengthEq", "IsInEnum", "UuidVer", });
    internal_static_validator_OneofValidator_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_validator_OneofValidator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_validator_OneofValidator_descriptor,
        new java.lang.String[] { "Required", });
    field.internalInit(descriptor.getExtensions().get(0));
    oneof.internalInit(descriptor.getExtensions().get(1));
    com.google.protobuf.DescriptorProtos.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
