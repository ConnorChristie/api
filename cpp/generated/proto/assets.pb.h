// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/assets.proto

#ifndef PROTOBUF_INCLUDED_proto_2fassets_2eproto
#define PROTOBUF_INCLUDED_proto_2fassets_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fassets_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fassets_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_proto_2fassets_2eproto();
namespace vega {
class Asset;
class AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
class AssetSource;
class AssetSourceDefaultTypeInternal;
extern AssetSourceDefaultTypeInternal _AssetSource_default_instance_;
class BuiltinAsset;
class BuiltinAssetDefaultTypeInternal;
extern BuiltinAssetDefaultTypeInternal _BuiltinAsset_default_instance_;
class DevAssets;
class DevAssetsDefaultTypeInternal;
extern DevAssetsDefaultTypeInternal _DevAssets_default_instance_;
class ERC20;
class ERC20DefaultTypeInternal;
extern ERC20DefaultTypeInternal _ERC20_default_instance_;
}  // namespace vega
namespace google {
namespace protobuf {
template<> ::vega::Asset* Arena::CreateMaybeMessage<::vega::Asset>(Arena*);
template<> ::vega::AssetSource* Arena::CreateMaybeMessage<::vega::AssetSource>(Arena*);
template<> ::vega::BuiltinAsset* Arena::CreateMaybeMessage<::vega::BuiltinAsset>(Arena*);
template<> ::vega::DevAssets* Arena::CreateMaybeMessage<::vega::DevAssets>(Arena*);
template<> ::vega::ERC20* Arena::CreateMaybeMessage<::vega::ERC20>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace vega {

// ===================================================================

class Asset :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Asset) */ {
 public:
  Asset();
  virtual ~Asset();

  Asset(const Asset& from);

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(Asset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Asset& default_instance();

  enum SourceCase {
    kBuiltinAsset = 101,
    kErc20 = 102,
    SOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Asset* other);
  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Asset* New() const final {
    return CreateMaybeMessage<Asset>(nullptr);
  }

  Asset* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Asset& from);
  void MergeFrom(const Asset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string symbol = 3;
  void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string totalSupply = 4;
  void clear_totalsupply();
  static const int kTotalSupplyFieldNumber = 4;
  const ::std::string& totalsupply() const;
  void set_totalsupply(const ::std::string& value);
  #if LANG_CXX11
  void set_totalsupply(::std::string&& value);
  #endif
  void set_totalsupply(const char* value);
  void set_totalsupply(const char* value, size_t size);
  ::std::string* mutable_totalsupply();
  ::std::string* release_totalsupply();
  void set_allocated_totalsupply(::std::string* totalsupply);

  // uint64 decimals = 5;
  void clear_decimals();
  static const int kDecimalsFieldNumber = 5;
  ::google::protobuf::uint64 decimals() const;
  void set_decimals(::google::protobuf::uint64 value);

  // .vega.BuiltinAsset builtinAsset = 101;
  bool has_builtinasset() const;
  void clear_builtinasset();
  static const int kBuiltinAssetFieldNumber = 101;
  const ::vega::BuiltinAsset& builtinasset() const;
  ::vega::BuiltinAsset* release_builtinasset();
  ::vega::BuiltinAsset* mutable_builtinasset();
  void set_allocated_builtinasset(::vega::BuiltinAsset* builtinasset);

  // .vega.ERC20 erc20 = 102;
  bool has_erc20() const;
  void clear_erc20();
  static const int kErc20FieldNumber = 102;
  const ::vega::ERC20& erc20() const;
  ::vega::ERC20* release_erc20();
  ::vega::ERC20* mutable_erc20();
  void set_allocated_erc20(::vega::ERC20* erc20);

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:vega.Asset)
 private:
  class HasBitSetters;
  void set_has_builtinasset();
  void set_has_erc20();

  inline bool has_source() const;
  inline void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr totalsupply_;
  ::google::protobuf::uint64 decimals_;
  union SourceUnion {
    SourceUnion() {}
    ::vega::BuiltinAsset* builtinasset_;
    ::vega::ERC20* erc20_;
  } source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fassets_2eproto;
};
// -------------------------------------------------------------------

class AssetSource :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.AssetSource) */ {
 public:
  AssetSource();
  virtual ~AssetSource();

  AssetSource(const AssetSource& from);

  inline AssetSource& operator=(const AssetSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AssetSource(AssetSource&& from) noexcept
    : AssetSource() {
    *this = ::std::move(from);
  }

  inline AssetSource& operator=(AssetSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AssetSource& default_instance();

  enum SourceCase {
    kBuiltinAsset = 1,
    kErc20 = 2,
    SOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssetSource* internal_default_instance() {
    return reinterpret_cast<const AssetSource*>(
               &_AssetSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AssetSource* other);
  friend void swap(AssetSource& a, AssetSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AssetSource* New() const final {
    return CreateMaybeMessage<AssetSource>(nullptr);
  }

  AssetSource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AssetSource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AssetSource& from);
  void MergeFrom(const AssetSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .vega.BuiltinAsset builtinAsset = 1;
  bool has_builtinasset() const;
  void clear_builtinasset();
  static const int kBuiltinAssetFieldNumber = 1;
  const ::vega::BuiltinAsset& builtinasset() const;
  ::vega::BuiltinAsset* release_builtinasset();
  ::vega::BuiltinAsset* mutable_builtinasset();
  void set_allocated_builtinasset(::vega::BuiltinAsset* builtinasset);

  // .vega.ERC20 erc20 = 2;
  bool has_erc20() const;
  void clear_erc20();
  static const int kErc20FieldNumber = 2;
  const ::vega::ERC20& erc20() const;
  ::vega::ERC20* release_erc20();
  ::vega::ERC20* mutable_erc20();
  void set_allocated_erc20(::vega::ERC20* erc20);

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:vega.AssetSource)
 private:
  class HasBitSetters;
  void set_has_builtinasset();
  void set_has_erc20();

  inline bool has_source() const;
  inline void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union SourceUnion {
    SourceUnion() {}
    ::vega::BuiltinAsset* builtinasset_;
    ::vega::ERC20* erc20_;
  } source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fassets_2eproto;
};
// -------------------------------------------------------------------

class BuiltinAsset :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.BuiltinAsset) */ {
 public:
  BuiltinAsset();
  virtual ~BuiltinAsset();

  BuiltinAsset(const BuiltinAsset& from);

  inline BuiltinAsset& operator=(const BuiltinAsset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuiltinAsset(BuiltinAsset&& from) noexcept
    : BuiltinAsset() {
    *this = ::std::move(from);
  }

  inline BuiltinAsset& operator=(BuiltinAsset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BuiltinAsset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuiltinAsset* internal_default_instance() {
    return reinterpret_cast<const BuiltinAsset*>(
               &_BuiltinAsset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BuiltinAsset* other);
  friend void swap(BuiltinAsset& a, BuiltinAsset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuiltinAsset* New() const final {
    return CreateMaybeMessage<BuiltinAsset>(nullptr);
  }

  BuiltinAsset* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BuiltinAsset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BuiltinAsset& from);
  void MergeFrom(const BuiltinAsset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuiltinAsset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string symbol = 3;
  void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string totalSupply = 4;
  void clear_totalsupply();
  static const int kTotalSupplyFieldNumber = 4;
  const ::std::string& totalsupply() const;
  void set_totalsupply(const ::std::string& value);
  #if LANG_CXX11
  void set_totalsupply(::std::string&& value);
  #endif
  void set_totalsupply(const char* value);
  void set_totalsupply(const char* value, size_t size);
  ::std::string* mutable_totalsupply();
  ::std::string* release_totalsupply();
  void set_allocated_totalsupply(::std::string* totalsupply);

  // uint64 decimals = 5;
  void clear_decimals();
  static const int kDecimalsFieldNumber = 5;
  ::google::protobuf::uint64 decimals() const;
  void set_decimals(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vega.BuiltinAsset)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr totalsupply_;
  ::google::protobuf::uint64 decimals_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fassets_2eproto;
};
// -------------------------------------------------------------------

class ERC20 :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.ERC20) */ {
 public:
  ERC20();
  virtual ~ERC20();

  ERC20(const ERC20& from);

  inline ERC20& operator=(const ERC20& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ERC20(ERC20&& from) noexcept
    : ERC20() {
    *this = ::std::move(from);
  }

  inline ERC20& operator=(ERC20&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ERC20& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ERC20* internal_default_instance() {
    return reinterpret_cast<const ERC20*>(
               &_ERC20_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ERC20* other);
  friend void swap(ERC20& a, ERC20& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ERC20* New() const final {
    return CreateMaybeMessage<ERC20>(nullptr);
  }

  ERC20* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ERC20>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ERC20& from);
  void MergeFrom(const ERC20& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ERC20* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string contractAddress = 1;
  void clear_contractaddress();
  static const int kContractAddressFieldNumber = 1;
  const ::std::string& contractaddress() const;
  void set_contractaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_contractaddress(::std::string&& value);
  #endif
  void set_contractaddress(const char* value);
  void set_contractaddress(const char* value, size_t size);
  ::std::string* mutable_contractaddress();
  ::std::string* release_contractaddress();
  void set_allocated_contractaddress(::std::string* contractaddress);

  // @@protoc_insertion_point(class_scope:vega.ERC20)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr contractaddress_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fassets_2eproto;
};
// -------------------------------------------------------------------

class DevAssets :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.DevAssets) */ {
 public:
  DevAssets();
  virtual ~DevAssets();

  DevAssets(const DevAssets& from);

  inline DevAssets& operator=(const DevAssets& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DevAssets(DevAssets&& from) noexcept
    : DevAssets() {
    *this = ::std::move(from);
  }

  inline DevAssets& operator=(DevAssets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DevAssets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DevAssets* internal_default_instance() {
    return reinterpret_cast<const DevAssets*>(
               &_DevAssets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DevAssets* other);
  friend void swap(DevAssets& a, DevAssets& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DevAssets* New() const final {
    return CreateMaybeMessage<DevAssets>(nullptr);
  }

  DevAssets* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DevAssets>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DevAssets& from);
  void MergeFrom(const DevAssets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DevAssets* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vega.AssetSource sources = 1;
  int sources_size() const;
  void clear_sources();
  static const int kSourcesFieldNumber = 1;
  ::vega::AssetSource* mutable_sources(int index);
  ::google::protobuf::RepeatedPtrField< ::vega::AssetSource >*
      mutable_sources();
  const ::vega::AssetSource& sources(int index) const;
  ::vega::AssetSource* add_sources();
  const ::google::protobuf::RepeatedPtrField< ::vega::AssetSource >&
      sources() const;

  // @@protoc_insertion_point(class_scope:vega.DevAssets)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::vega::AssetSource > sources_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fassets_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Asset

// string ID = 1;
inline void Asset::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Asset::id() const {
  // @@protoc_insertion_point(field_get:vega.Asset.ID)
  return id_.GetNoArena();
}
inline void Asset::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Asset.ID)
}
#if LANG_CXX11
inline void Asset::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Asset.ID)
}
#endif
inline void Asset::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Asset.ID)
}
inline void Asset::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Asset.ID)
}
inline ::std::string* Asset::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:vega.Asset.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Asset::release_id() {
  // @@protoc_insertion_point(field_release:vega.Asset.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Asset::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:vega.Asset.ID)
}

// string name = 2;
inline void Asset::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Asset::name() const {
  // @@protoc_insertion_point(field_get:vega.Asset.name)
  return name_.GetNoArena();
}
inline void Asset::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Asset.name)
}
#if LANG_CXX11
inline void Asset::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Asset.name)
}
#endif
inline void Asset::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Asset.name)
}
inline void Asset::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Asset.name)
}
inline ::std::string* Asset::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vega.Asset.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Asset::release_name() {
  // @@protoc_insertion_point(field_release:vega.Asset.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Asset::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vega.Asset.name)
}

// string symbol = 3;
inline void Asset::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Asset::symbol() const {
  // @@protoc_insertion_point(field_get:vega.Asset.symbol)
  return symbol_.GetNoArena();
}
inline void Asset::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Asset.symbol)
}
#if LANG_CXX11
inline void Asset::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Asset.symbol)
}
#endif
inline void Asset::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Asset.symbol)
}
inline void Asset::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Asset.symbol)
}
inline ::std::string* Asset::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:vega.Asset.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Asset::release_symbol() {
  // @@protoc_insertion_point(field_release:vega.Asset.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Asset::set_allocated_symbol(::std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:vega.Asset.symbol)
}

// string totalSupply = 4;
inline void Asset::clear_totalsupply() {
  totalsupply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Asset::totalsupply() const {
  // @@protoc_insertion_point(field_get:vega.Asset.totalSupply)
  return totalsupply_.GetNoArena();
}
inline void Asset::set_totalsupply(const ::std::string& value) {
  
  totalsupply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Asset.totalSupply)
}
#if LANG_CXX11
inline void Asset::set_totalsupply(::std::string&& value) {
  
  totalsupply_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Asset.totalSupply)
}
#endif
inline void Asset::set_totalsupply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  totalsupply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Asset.totalSupply)
}
inline void Asset::set_totalsupply(const char* value, size_t size) {
  
  totalsupply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Asset.totalSupply)
}
inline ::std::string* Asset::mutable_totalsupply() {
  
  // @@protoc_insertion_point(field_mutable:vega.Asset.totalSupply)
  return totalsupply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Asset::release_totalsupply() {
  // @@protoc_insertion_point(field_release:vega.Asset.totalSupply)
  
  return totalsupply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Asset::set_allocated_totalsupply(::std::string* totalsupply) {
  if (totalsupply != nullptr) {
    
  } else {
    
  }
  totalsupply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), totalsupply);
  // @@protoc_insertion_point(field_set_allocated:vega.Asset.totalSupply)
}

// uint64 decimals = 5;
inline void Asset::clear_decimals() {
  decimals_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Asset::decimals() const {
  // @@protoc_insertion_point(field_get:vega.Asset.decimals)
  return decimals_;
}
inline void Asset::set_decimals(::google::protobuf::uint64 value) {
  
  decimals_ = value;
  // @@protoc_insertion_point(field_set:vega.Asset.decimals)
}

// .vega.BuiltinAsset builtinAsset = 101;
inline bool Asset::has_builtinasset() const {
  return source_case() == kBuiltinAsset;
}
inline void Asset::set_has_builtinasset() {
  _oneof_case_[0] = kBuiltinAsset;
}
inline void Asset::clear_builtinasset() {
  if (has_builtinasset()) {
    delete source_.builtinasset_;
    clear_has_source();
  }
}
inline ::vega::BuiltinAsset* Asset::release_builtinasset() {
  // @@protoc_insertion_point(field_release:vega.Asset.builtinAsset)
  if (has_builtinasset()) {
    clear_has_source();
      ::vega::BuiltinAsset* temp = source_.builtinasset_;
    source_.builtinasset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::BuiltinAsset& Asset::builtinasset() const {
  // @@protoc_insertion_point(field_get:vega.Asset.builtinAsset)
  return has_builtinasset()
      ? *source_.builtinasset_
      : *reinterpret_cast< ::vega::BuiltinAsset*>(&::vega::_BuiltinAsset_default_instance_);
}
inline ::vega::BuiltinAsset* Asset::mutable_builtinasset() {
  if (!has_builtinasset()) {
    clear_source();
    set_has_builtinasset();
    source_.builtinasset_ = CreateMaybeMessage< ::vega::BuiltinAsset >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:vega.Asset.builtinAsset)
  return source_.builtinasset_;
}

// .vega.ERC20 erc20 = 102;
inline bool Asset::has_erc20() const {
  return source_case() == kErc20;
}
inline void Asset::set_has_erc20() {
  _oneof_case_[0] = kErc20;
}
inline void Asset::clear_erc20() {
  if (has_erc20()) {
    delete source_.erc20_;
    clear_has_source();
  }
}
inline ::vega::ERC20* Asset::release_erc20() {
  // @@protoc_insertion_point(field_release:vega.Asset.erc20)
  if (has_erc20()) {
    clear_has_source();
      ::vega::ERC20* temp = source_.erc20_;
    source_.erc20_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::ERC20& Asset::erc20() const {
  // @@protoc_insertion_point(field_get:vega.Asset.erc20)
  return has_erc20()
      ? *source_.erc20_
      : *reinterpret_cast< ::vega::ERC20*>(&::vega::_ERC20_default_instance_);
}
inline ::vega::ERC20* Asset::mutable_erc20() {
  if (!has_erc20()) {
    clear_source();
    set_has_erc20();
    source_.erc20_ = CreateMaybeMessage< ::vega::ERC20 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:vega.Asset.erc20)
  return source_.erc20_;
}

inline bool Asset::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void Asset::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline Asset::SourceCase Asset::source_case() const {
  return Asset::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AssetSource

// .vega.BuiltinAsset builtinAsset = 1;
inline bool AssetSource::has_builtinasset() const {
  return source_case() == kBuiltinAsset;
}
inline void AssetSource::set_has_builtinasset() {
  _oneof_case_[0] = kBuiltinAsset;
}
inline void AssetSource::clear_builtinasset() {
  if (has_builtinasset()) {
    delete source_.builtinasset_;
    clear_has_source();
  }
}
inline ::vega::BuiltinAsset* AssetSource::release_builtinasset() {
  // @@protoc_insertion_point(field_release:vega.AssetSource.builtinAsset)
  if (has_builtinasset()) {
    clear_has_source();
      ::vega::BuiltinAsset* temp = source_.builtinasset_;
    source_.builtinasset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::BuiltinAsset& AssetSource::builtinasset() const {
  // @@protoc_insertion_point(field_get:vega.AssetSource.builtinAsset)
  return has_builtinasset()
      ? *source_.builtinasset_
      : *reinterpret_cast< ::vega::BuiltinAsset*>(&::vega::_BuiltinAsset_default_instance_);
}
inline ::vega::BuiltinAsset* AssetSource::mutable_builtinasset() {
  if (!has_builtinasset()) {
    clear_source();
    set_has_builtinasset();
    source_.builtinasset_ = CreateMaybeMessage< ::vega::BuiltinAsset >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:vega.AssetSource.builtinAsset)
  return source_.builtinasset_;
}

// .vega.ERC20 erc20 = 2;
inline bool AssetSource::has_erc20() const {
  return source_case() == kErc20;
}
inline void AssetSource::set_has_erc20() {
  _oneof_case_[0] = kErc20;
}
inline void AssetSource::clear_erc20() {
  if (has_erc20()) {
    delete source_.erc20_;
    clear_has_source();
  }
}
inline ::vega::ERC20* AssetSource::release_erc20() {
  // @@protoc_insertion_point(field_release:vega.AssetSource.erc20)
  if (has_erc20()) {
    clear_has_source();
      ::vega::ERC20* temp = source_.erc20_;
    source_.erc20_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::ERC20& AssetSource::erc20() const {
  // @@protoc_insertion_point(field_get:vega.AssetSource.erc20)
  return has_erc20()
      ? *source_.erc20_
      : *reinterpret_cast< ::vega::ERC20*>(&::vega::_ERC20_default_instance_);
}
inline ::vega::ERC20* AssetSource::mutable_erc20() {
  if (!has_erc20()) {
    clear_source();
    set_has_erc20();
    source_.erc20_ = CreateMaybeMessage< ::vega::ERC20 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:vega.AssetSource.erc20)
  return source_.erc20_;
}

inline bool AssetSource::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void AssetSource::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline AssetSource::SourceCase AssetSource::source_case() const {
  return AssetSource::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BuiltinAsset

// string name = 2;
inline void BuiltinAsset::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuiltinAsset::name() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAsset.name)
  return name_.GetNoArena();
}
inline void BuiltinAsset::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.BuiltinAsset.name)
}
#if LANG_CXX11
inline void BuiltinAsset::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.BuiltinAsset.name)
}
#endif
inline void BuiltinAsset::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.BuiltinAsset.name)
}
inline void BuiltinAsset::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.BuiltinAsset.name)
}
inline ::std::string* BuiltinAsset::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:vega.BuiltinAsset.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuiltinAsset::release_name() {
  // @@protoc_insertion_point(field_release:vega.BuiltinAsset.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuiltinAsset::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:vega.BuiltinAsset.name)
}

// string symbol = 3;
inline void BuiltinAsset::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuiltinAsset::symbol() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAsset.symbol)
  return symbol_.GetNoArena();
}
inline void BuiltinAsset::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.BuiltinAsset.symbol)
}
#if LANG_CXX11
inline void BuiltinAsset::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.BuiltinAsset.symbol)
}
#endif
inline void BuiltinAsset::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.BuiltinAsset.symbol)
}
inline void BuiltinAsset::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.BuiltinAsset.symbol)
}
inline ::std::string* BuiltinAsset::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:vega.BuiltinAsset.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuiltinAsset::release_symbol() {
  // @@protoc_insertion_point(field_release:vega.BuiltinAsset.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuiltinAsset::set_allocated_symbol(::std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:vega.BuiltinAsset.symbol)
}

// string totalSupply = 4;
inline void BuiltinAsset::clear_totalsupply() {
  totalsupply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuiltinAsset::totalsupply() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAsset.totalSupply)
  return totalsupply_.GetNoArena();
}
inline void BuiltinAsset::set_totalsupply(const ::std::string& value) {
  
  totalsupply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.BuiltinAsset.totalSupply)
}
#if LANG_CXX11
inline void BuiltinAsset::set_totalsupply(::std::string&& value) {
  
  totalsupply_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.BuiltinAsset.totalSupply)
}
#endif
inline void BuiltinAsset::set_totalsupply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  totalsupply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.BuiltinAsset.totalSupply)
}
inline void BuiltinAsset::set_totalsupply(const char* value, size_t size) {
  
  totalsupply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.BuiltinAsset.totalSupply)
}
inline ::std::string* BuiltinAsset::mutable_totalsupply() {
  
  // @@protoc_insertion_point(field_mutable:vega.BuiltinAsset.totalSupply)
  return totalsupply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuiltinAsset::release_totalsupply() {
  // @@protoc_insertion_point(field_release:vega.BuiltinAsset.totalSupply)
  
  return totalsupply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuiltinAsset::set_allocated_totalsupply(::std::string* totalsupply) {
  if (totalsupply != nullptr) {
    
  } else {
    
  }
  totalsupply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), totalsupply);
  // @@protoc_insertion_point(field_set_allocated:vega.BuiltinAsset.totalSupply)
}

// uint64 decimals = 5;
inline void BuiltinAsset::clear_decimals() {
  decimals_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BuiltinAsset::decimals() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAsset.decimals)
  return decimals_;
}
inline void BuiltinAsset::set_decimals(::google::protobuf::uint64 value) {
  
  decimals_ = value;
  // @@protoc_insertion_point(field_set:vega.BuiltinAsset.decimals)
}

// -------------------------------------------------------------------

// ERC20

// string contractAddress = 1;
inline void ERC20::clear_contractaddress() {
  contractaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ERC20::contractaddress() const {
  // @@protoc_insertion_point(field_get:vega.ERC20.contractAddress)
  return contractaddress_.GetNoArena();
}
inline void ERC20::set_contractaddress(const ::std::string& value) {
  
  contractaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.ERC20.contractAddress)
}
#if LANG_CXX11
inline void ERC20::set_contractaddress(::std::string&& value) {
  
  contractaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.ERC20.contractAddress)
}
#endif
inline void ERC20::set_contractaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.ERC20.contractAddress)
}
inline void ERC20::set_contractaddress(const char* value, size_t size) {
  
  contractaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.ERC20.contractAddress)
}
inline ::std::string* ERC20::mutable_contractaddress() {
  
  // @@protoc_insertion_point(field_mutable:vega.ERC20.contractAddress)
  return contractaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ERC20::release_contractaddress() {
  // @@protoc_insertion_point(field_release:vega.ERC20.contractAddress)
  
  return contractaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ERC20::set_allocated_contractaddress(::std::string* contractaddress) {
  if (contractaddress != nullptr) {
    
  } else {
    
  }
  contractaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractaddress);
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20.contractAddress)
}

// -------------------------------------------------------------------

// DevAssets

// repeated .vega.AssetSource sources = 1;
inline int DevAssets::sources_size() const {
  return sources_.size();
}
inline void DevAssets::clear_sources() {
  sources_.Clear();
}
inline ::vega::AssetSource* DevAssets::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:vega.DevAssets.sources)
  return sources_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vega::AssetSource >*
DevAssets::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:vega.DevAssets.sources)
  return &sources_;
}
inline const ::vega::AssetSource& DevAssets::sources(int index) const {
  // @@protoc_insertion_point(field_get:vega.DevAssets.sources)
  return sources_.Get(index);
}
inline ::vega::AssetSource* DevAssets::add_sources() {
  // @@protoc_insertion_point(field_add:vega.DevAssets.sources)
  return sources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vega::AssetSource >&
DevAssets::sources() const {
  // @@protoc_insertion_point(field_list:vega.DevAssets.sources)
  return sources_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vega

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_proto_2fassets_2eproto
