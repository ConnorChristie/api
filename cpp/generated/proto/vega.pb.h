// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/vega.proto

#ifndef PROTOBUF_INCLUDED_proto_2fvega_2eproto
#define PROTOBUF_INCLUDED_proto_2fvega_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "github.com/mwitkow/go-proto-validators/validator.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fvega_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[45]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_proto_2fvega_2eproto();
namespace vega {
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class AuctionIndicativeState;
class AuctionIndicativeStateDefaultTypeInternal;
extern AuctionIndicativeStateDefaultTypeInternal _AuctionIndicativeState_default_instance_;
class Candle;
class CandleDefaultTypeInternal;
extern CandleDefaultTypeInternal _Candle_default_instance_;
class Deposit;
class DepositDefaultTypeInternal;
extern DepositDefaultTypeInternal _Deposit_default_instance_;
class Erc20WithdrawExt;
class Erc20WithdrawExtDefaultTypeInternal;
extern Erc20WithdrawExtDefaultTypeInternal _Erc20WithdrawExt_default_instance_;
class ErrorDetail;
class ErrorDetailDefaultTypeInternal;
extern ErrorDetailDefaultTypeInternal _ErrorDetail_default_instance_;
class Fee;
class FeeDefaultTypeInternal;
extern FeeDefaultTypeInternal _Fee_default_instance_;
class FinancialAmount;
class FinancialAmountDefaultTypeInternal;
extern FinancialAmountDefaultTypeInternal _FinancialAmount_default_instance_;
class LedgerEntry;
class LedgerEntryDefaultTypeInternal;
extern LedgerEntryDefaultTypeInternal _LedgerEntry_default_instance_;
class MarginLevels;
class MarginLevelsDefaultTypeInternal;
extern MarginLevelsDefaultTypeInternal _MarginLevels_default_instance_;
class MarketData;
class MarketDataDefaultTypeInternal;
extern MarketDataDefaultTypeInternal _MarketData_default_instance_;
class MarketDepth;
class MarketDepthDefaultTypeInternal;
extern MarketDepthDefaultTypeInternal _MarketDepth_default_instance_;
class MarketDepthUpdate;
class MarketDepthUpdateDefaultTypeInternal;
extern MarketDepthUpdateDefaultTypeInternal _MarketDepthUpdate_default_instance_;
class NodeRegistration;
class NodeRegistrationDefaultTypeInternal;
extern NodeRegistrationDefaultTypeInternal _NodeRegistration_default_instance_;
class NodeSignature;
class NodeSignatureDefaultTypeInternal;
extern NodeSignatureDefaultTypeInternal _NodeSignature_default_instance_;
class NodeVote;
class NodeVoteDefaultTypeInternal;
extern NodeVoteDefaultTypeInternal _NodeVote_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class OrderAmendment;
class OrderAmendmentDefaultTypeInternal;
extern OrderAmendmentDefaultTypeInternal _OrderAmendment_default_instance_;
class OrderCancellation;
class OrderCancellationDefaultTypeInternal;
extern OrderCancellationDefaultTypeInternal _OrderCancellation_default_instance_;
class OrderCancellationConfirmation;
class OrderCancellationConfirmationDefaultTypeInternal;
extern OrderCancellationConfirmationDefaultTypeInternal _OrderCancellationConfirmation_default_instance_;
class OrderConfirmation;
class OrderConfirmationDefaultTypeInternal;
extern OrderConfirmationDefaultTypeInternal _OrderConfirmation_default_instance_;
class OrderSubmission;
class OrderSubmissionDefaultTypeInternal;
extern OrderSubmissionDefaultTypeInternal _OrderSubmission_default_instance_;
class Party;
class PartyDefaultTypeInternal;
extern PartyDefaultTypeInternal _Party_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class PositionTrade;
class PositionTradeDefaultTypeInternal;
extern PositionTradeDefaultTypeInternal _PositionTrade_default_instance_;
class Price;
class PriceDefaultTypeInternal;
extern PriceDefaultTypeInternal _Price_default_instance_;
class PriceLevel;
class PriceLevelDefaultTypeInternal;
extern PriceLevelDefaultTypeInternal _PriceLevel_default_instance_;
class RiskFactor;
class RiskFactorDefaultTypeInternal;
extern RiskFactorDefaultTypeInternal _RiskFactor_default_instance_;
class RiskResult;
class RiskResultDefaultTypeInternal;
extern RiskResultDefaultTypeInternal _RiskResult_default_instance_;
class RiskResult_PredictedNextRiskFactorsEntry_DoNotUse;
class RiskResult_PredictedNextRiskFactorsEntry_DoNotUseDefaultTypeInternal;
extern RiskResult_PredictedNextRiskFactorsEntry_DoNotUseDefaultTypeInternal _RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_default_instance_;
class RiskResult_RiskFactorsEntry_DoNotUse;
class RiskResult_RiskFactorsEntry_DoNotUseDefaultTypeInternal;
extern RiskResult_RiskFactorsEntry_DoNotUseDefaultTypeInternal _RiskResult_RiskFactorsEntry_DoNotUse_default_instance_;
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class SignedBundle;
class SignedBundleDefaultTypeInternal;
extern SignedBundleDefaultTypeInternal _SignedBundle_default_instance_;
class Statistics;
class StatisticsDefaultTypeInternal;
extern StatisticsDefaultTypeInternal _Statistics_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class Trade;
class TradeDefaultTypeInternal;
extern TradeDefaultTypeInternal _Trade_default_instance_;
class TradeSet;
class TradeSetDefaultTypeInternal;
extern TradeSetDefaultTypeInternal _TradeSet_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class Transfer;
class TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
class TransferBalance;
class TransferBalanceDefaultTypeInternal;
extern TransferBalanceDefaultTypeInternal _TransferBalance_default_instance_;
class TransferRequest;
class TransferRequestDefaultTypeInternal;
extern TransferRequestDefaultTypeInternal _TransferRequest_default_instance_;
class TransferResponse;
class TransferResponseDefaultTypeInternal;
extern TransferResponseDefaultTypeInternal _TransferResponse_default_instance_;
class WithdrawExt;
class WithdrawExtDefaultTypeInternal;
extern WithdrawExtDefaultTypeInternal _WithdrawExt_default_instance_;
class WithdrawSubmission;
class WithdrawSubmissionDefaultTypeInternal;
extern WithdrawSubmissionDefaultTypeInternal _WithdrawSubmission_default_instance_;
class Withdrawal;
class WithdrawalDefaultTypeInternal;
extern WithdrawalDefaultTypeInternal _Withdrawal_default_instance_;
}  // namespace vega
namespace google {
namespace protobuf {
template<> ::vega::Account* Arena::CreateMaybeMessage<::vega::Account>(Arena*);
template<> ::vega::AuctionIndicativeState* Arena::CreateMaybeMessage<::vega::AuctionIndicativeState>(Arena*);
template<> ::vega::Candle* Arena::CreateMaybeMessage<::vega::Candle>(Arena*);
template<> ::vega::Deposit* Arena::CreateMaybeMessage<::vega::Deposit>(Arena*);
template<> ::vega::Erc20WithdrawExt* Arena::CreateMaybeMessage<::vega::Erc20WithdrawExt>(Arena*);
template<> ::vega::ErrorDetail* Arena::CreateMaybeMessage<::vega::ErrorDetail>(Arena*);
template<> ::vega::Fee* Arena::CreateMaybeMessage<::vega::Fee>(Arena*);
template<> ::vega::FinancialAmount* Arena::CreateMaybeMessage<::vega::FinancialAmount>(Arena*);
template<> ::vega::LedgerEntry* Arena::CreateMaybeMessage<::vega::LedgerEntry>(Arena*);
template<> ::vega::MarginLevels* Arena::CreateMaybeMessage<::vega::MarginLevels>(Arena*);
template<> ::vega::MarketData* Arena::CreateMaybeMessage<::vega::MarketData>(Arena*);
template<> ::vega::MarketDepth* Arena::CreateMaybeMessage<::vega::MarketDepth>(Arena*);
template<> ::vega::MarketDepthUpdate* Arena::CreateMaybeMessage<::vega::MarketDepthUpdate>(Arena*);
template<> ::vega::NodeRegistration* Arena::CreateMaybeMessage<::vega::NodeRegistration>(Arena*);
template<> ::vega::NodeSignature* Arena::CreateMaybeMessage<::vega::NodeSignature>(Arena*);
template<> ::vega::NodeVote* Arena::CreateMaybeMessage<::vega::NodeVote>(Arena*);
template<> ::vega::Order* Arena::CreateMaybeMessage<::vega::Order>(Arena*);
template<> ::vega::OrderAmendment* Arena::CreateMaybeMessage<::vega::OrderAmendment>(Arena*);
template<> ::vega::OrderCancellation* Arena::CreateMaybeMessage<::vega::OrderCancellation>(Arena*);
template<> ::vega::OrderCancellationConfirmation* Arena::CreateMaybeMessage<::vega::OrderCancellationConfirmation>(Arena*);
template<> ::vega::OrderConfirmation* Arena::CreateMaybeMessage<::vega::OrderConfirmation>(Arena*);
template<> ::vega::OrderSubmission* Arena::CreateMaybeMessage<::vega::OrderSubmission>(Arena*);
template<> ::vega::Party* Arena::CreateMaybeMessage<::vega::Party>(Arena*);
template<> ::vega::Position* Arena::CreateMaybeMessage<::vega::Position>(Arena*);
template<> ::vega::PositionTrade* Arena::CreateMaybeMessage<::vega::PositionTrade>(Arena*);
template<> ::vega::Price* Arena::CreateMaybeMessage<::vega::Price>(Arena*);
template<> ::vega::PriceLevel* Arena::CreateMaybeMessage<::vega::PriceLevel>(Arena*);
template<> ::vega::RiskFactor* Arena::CreateMaybeMessage<::vega::RiskFactor>(Arena*);
template<> ::vega::RiskResult* Arena::CreateMaybeMessage<::vega::RiskResult>(Arena*);
template<> ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse* Arena::CreateMaybeMessage<::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse>(Arena*);
template<> ::vega::RiskResult_RiskFactorsEntry_DoNotUse* Arena::CreateMaybeMessage<::vega::RiskResult_RiskFactorsEntry_DoNotUse>(Arena*);
template<> ::vega::Signature* Arena::CreateMaybeMessage<::vega::Signature>(Arena*);
template<> ::vega::SignedBundle* Arena::CreateMaybeMessage<::vega::SignedBundle>(Arena*);
template<> ::vega::Statistics* Arena::CreateMaybeMessage<::vega::Statistics>(Arena*);
template<> ::vega::Timestamp* Arena::CreateMaybeMessage<::vega::Timestamp>(Arena*);
template<> ::vega::Trade* Arena::CreateMaybeMessage<::vega::Trade>(Arena*);
template<> ::vega::TradeSet* Arena::CreateMaybeMessage<::vega::TradeSet>(Arena*);
template<> ::vega::Transaction* Arena::CreateMaybeMessage<::vega::Transaction>(Arena*);
template<> ::vega::Transfer* Arena::CreateMaybeMessage<::vega::Transfer>(Arena*);
template<> ::vega::TransferBalance* Arena::CreateMaybeMessage<::vega::TransferBalance>(Arena*);
template<> ::vega::TransferRequest* Arena::CreateMaybeMessage<::vega::TransferRequest>(Arena*);
template<> ::vega::TransferResponse* Arena::CreateMaybeMessage<::vega::TransferResponse>(Arena*);
template<> ::vega::WithdrawExt* Arena::CreateMaybeMessage<::vega::WithdrawExt>(Arena*);
template<> ::vega::WithdrawSubmission* Arena::CreateMaybeMessage<::vega::WithdrawSubmission>(Arena*);
template<> ::vega::Withdrawal* Arena::CreateMaybeMessage<::vega::Withdrawal>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace vega {

enum Order_TimeInForce {
  Order_TimeInForce_TIF_UNSPECIFIED = 0,
  Order_TimeInForce_TIF_GTC = 1,
  Order_TimeInForce_TIF_GTT = 2,
  Order_TimeInForce_TIF_IOC = 3,
  Order_TimeInForce_TIF_FOK = 4,
  Order_TimeInForce_TIF_GFA = 5,
  Order_TimeInForce_TIF_GFN = 6,
  Order_TimeInForce_Order_TimeInForce_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Order_TimeInForce_Order_TimeInForce_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Order_TimeInForce_IsValid(int value);
const Order_TimeInForce Order_TimeInForce_TimeInForce_MIN = Order_TimeInForce_TIF_UNSPECIFIED;
const Order_TimeInForce Order_TimeInForce_TimeInForce_MAX = Order_TimeInForce_TIF_GFN;
const int Order_TimeInForce_TimeInForce_ARRAYSIZE = Order_TimeInForce_TimeInForce_MAX + 1;

const ::google::protobuf::EnumDescriptor* Order_TimeInForce_descriptor();
inline const ::std::string& Order_TimeInForce_Name(Order_TimeInForce value) {
  return ::google::protobuf::internal::NameOfEnum(
    Order_TimeInForce_descriptor(), value);
}
inline bool Order_TimeInForce_Parse(
    const ::std::string& name, Order_TimeInForce* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Order_TimeInForce>(
    Order_TimeInForce_descriptor(), name, value);
}
enum Order_Type {
  Order_Type_TYPE_UNSPECIFIED = 0,
  Order_Type_TYPE_LIMIT = 1,
  Order_Type_TYPE_MARKET = 2,
  Order_Type_TYPE_NETWORK = 3,
  Order_Type_Order_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Order_Type_Order_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Order_Type_IsValid(int value);
const Order_Type Order_Type_Type_MIN = Order_Type_TYPE_UNSPECIFIED;
const Order_Type Order_Type_Type_MAX = Order_Type_TYPE_NETWORK;
const int Order_Type_Type_ARRAYSIZE = Order_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Order_Type_descriptor();
inline const ::std::string& Order_Type_Name(Order_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Order_Type_descriptor(), value);
}
inline bool Order_Type_Parse(
    const ::std::string& name, Order_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Order_Type>(
    Order_Type_descriptor(), name, value);
}
enum Order_Status {
  Order_Status_STATUS_INVALID = 0,
  Order_Status_STATUS_ACTIVE = 1,
  Order_Status_STATUS_EXPIRED = 2,
  Order_Status_STATUS_CANCELLED = 3,
  Order_Status_STATUS_STOPPED = 4,
  Order_Status_STATUS_FILLED = 5,
  Order_Status_STATUS_REJECTED = 6,
  Order_Status_STATUS_PARTIALLY_FILLED = 7,
  Order_Status_Order_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Order_Status_Order_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Order_Status_IsValid(int value);
const Order_Status Order_Status_Status_MIN = Order_Status_STATUS_INVALID;
const Order_Status Order_Status_Status_MAX = Order_Status_STATUS_PARTIALLY_FILLED;
const int Order_Status_Status_ARRAYSIZE = Order_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Order_Status_descriptor();
inline const ::std::string& Order_Status_Name(Order_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Order_Status_descriptor(), value);
}
inline bool Order_Status_Parse(
    const ::std::string& name, Order_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Order_Status>(
    Order_Status_descriptor(), name, value);
}
enum Trade_Type {
  Trade_Type_TYPE_UNSPECIFIED = 0,
  Trade_Type_TYPE_DEFAULT = 1,
  Trade_Type_TYPE_NETWORK_CLOSE_OUT_GOOD = 2,
  Trade_Type_TYPE_NETWORK_CLOSE_OUT_BAD = 3,
  Trade_Type_Trade_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Trade_Type_Trade_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Trade_Type_IsValid(int value);
const Trade_Type Trade_Type_Type_MIN = Trade_Type_TYPE_UNSPECIFIED;
const Trade_Type Trade_Type_Type_MAX = Trade_Type_TYPE_NETWORK_CLOSE_OUT_BAD;
const int Trade_Type_Type_ARRAYSIZE = Trade_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Trade_Type_descriptor();
inline const ::std::string& Trade_Type_Name(Trade_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Trade_Type_descriptor(), value);
}
inline bool Trade_Type_Parse(
    const ::std::string& name, Trade_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Trade_Type>(
    Trade_Type_descriptor(), name, value);
}
enum Deposit_Status {
  Deposit_Status_DEPOSIT_STATUS_UNSPECIFIED = 0,
  Deposit_Status_DEPOSIT_STATUS_OPEN = 1,
  Deposit_Status_DEPOSIT_STATUS_CANCELLED = 2,
  Deposit_Status_DEPOSIT_STATUS_FINALIZED = 3,
  Deposit_Status_Deposit_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Deposit_Status_Deposit_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Deposit_Status_IsValid(int value);
const Deposit_Status Deposit_Status_Status_MIN = Deposit_Status_DEPOSIT_STATUS_UNSPECIFIED;
const Deposit_Status Deposit_Status_Status_MAX = Deposit_Status_DEPOSIT_STATUS_FINALIZED;
const int Deposit_Status_Status_ARRAYSIZE = Deposit_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Deposit_Status_descriptor();
inline const ::std::string& Deposit_Status_Name(Deposit_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Deposit_Status_descriptor(), value);
}
inline bool Deposit_Status_Parse(
    const ::std::string& name, Deposit_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Deposit_Status>(
    Deposit_Status_descriptor(), name, value);
}
enum Withdrawal_Status {
  Withdrawal_Status_WITHDRAWAL_STATUS_UNSPECIFIED = 0,
  Withdrawal_Status_WITHDRAWAL_STATUS_OPEN = 1,
  Withdrawal_Status_WITHDRAWAL_STATUS_CANCELLED = 2,
  Withdrawal_Status_WITHDRAWAL_STATUS_FINALIZED = 3,
  Withdrawal_Status_Withdrawal_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Withdrawal_Status_Withdrawal_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Withdrawal_Status_IsValid(int value);
const Withdrawal_Status Withdrawal_Status_Status_MIN = Withdrawal_Status_WITHDRAWAL_STATUS_UNSPECIFIED;
const Withdrawal_Status Withdrawal_Status_Status_MAX = Withdrawal_Status_WITHDRAWAL_STATUS_FINALIZED;
const int Withdrawal_Status_Status_ARRAYSIZE = Withdrawal_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Withdrawal_Status_descriptor();
inline const ::std::string& Withdrawal_Status_Name(Withdrawal_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Withdrawal_Status_descriptor(), value);
}
inline bool Withdrawal_Status_Parse(
    const ::std::string& name, Withdrawal_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Withdrawal_Status>(
    Withdrawal_Status_descriptor(), name, value);
}
enum Side {
  SIDE_UNSPECIFIED = 0,
  SIDE_BUY = 1,
  SIDE_SELL = 2,
  Side_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Side_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Side_IsValid(int value);
const Side Side_MIN = SIDE_UNSPECIFIED;
const Side Side_MAX = SIDE_SELL;
const int Side_ARRAYSIZE = Side_MAX + 1;

const ::google::protobuf::EnumDescriptor* Side_descriptor();
inline const ::std::string& Side_Name(Side value) {
  return ::google::protobuf::internal::NameOfEnum(
    Side_descriptor(), value);
}
inline bool Side_Parse(
    const ::std::string& name, Side* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Side>(
    Side_descriptor(), name, value);
}
enum Interval {
  INTERVAL_UNSPECIFIED = 0,
  INTERVAL_I1M = 60,
  INTERVAL_I5M = 300,
  INTERVAL_I15M = 900,
  INTERVAL_I1H = 3600,
  INTERVAL_I6H = 21600,
  INTERVAL_I1D = 86400,
  Interval_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Interval_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Interval_IsValid(int value);
const Interval Interval_MIN = INTERVAL_UNSPECIFIED;
const Interval Interval_MAX = INTERVAL_I1D;
const int Interval_ARRAYSIZE = Interval_MAX + 1;

const ::google::protobuf::EnumDescriptor* Interval_descriptor();
inline const ::std::string& Interval_Name(Interval value) {
  return ::google::protobuf::internal::NameOfEnum(
    Interval_descriptor(), value);
}
inline bool Interval_Parse(
    const ::std::string& name, Interval* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Interval>(
    Interval_descriptor(), name, value);
}
enum MarketState {
  MARKET_STATE_UNSPECIFIED = 0,
  MARKET_STATE_CONTINUOUS = 1,
  MARKET_STATE_AUCTION = 2,
  MarketState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  MarketState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool MarketState_IsValid(int value);
const MarketState MarketState_MIN = MARKET_STATE_UNSPECIFIED;
const MarketState MarketState_MAX = MARKET_STATE_AUCTION;
const int MarketState_ARRAYSIZE = MarketState_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarketState_descriptor();
inline const ::std::string& MarketState_Name(MarketState value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarketState_descriptor(), value);
}
inline bool MarketState_Parse(
    const ::std::string& name, MarketState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarketState>(
    MarketState_descriptor(), name, value);
}
enum OrderError {
  ORDER_ERROR_NONE = 0,
  ORDER_ERROR_INVALID_MARKET_ID = 1,
  ORDER_ERROR_INVALID_ORDER_ID = 2,
  ORDER_ERROR_OUT_OF_SEQUENCE = 3,
  ORDER_ERROR_INVALID_REMAINING_SIZE = 4,
  ORDER_ERROR_TIME_FAILURE = 5,
  ORDER_ERROR_REMOVAL_FAILURE = 6,
  ORDER_ERROR_INVALID_EXPIRATION_DATETIME = 7,
  ORDER_ERROR_INVALID_ORDER_REFERENCE = 8,
  ORDER_ERROR_EDIT_NOT_ALLOWED = 9,
  ORDER_ERROR_AMEND_FAILURE = 10,
  ORDER_ERROR_NOT_FOUND = 11,
  ORDER_ERROR_INVALID_PARTY_ID = 12,
  ORDER_ERROR_MARKET_CLOSED = 13,
  ORDER_ERROR_MARGIN_CHECK_FAILED = 14,
  ORDER_ERROR_MISSING_GENERAL_ACCOUNT = 15,
  ORDER_ERROR_INTERNAL_ERROR = 16,
  ORDER_ERROR_INVALID_SIZE = 17,
  ORDER_ERROR_INVALID_PERSISTENCE = 18,
  ORDER_ERROR_INVALID_TYPE = 19,
  ORDER_ERROR_SELF_TRADING = 20,
  ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES = 21,
  ORDER_ERROR_INCORRECT_MARKET_TYPE = 22,
  ORDER_ERROR_INVALID_TIME_IN_FORCE = 23,
  ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION = 24,
  ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING = 25,
  ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT = 26,
  ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT = 27,
  ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT = 28,
  ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC = 29,
  ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN = 30,
  ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN = 31,
  OrderError_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  OrderError_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool OrderError_IsValid(int value);
const OrderError OrderError_MIN = ORDER_ERROR_NONE;
const OrderError OrderError_MAX = ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN;
const int OrderError_ARRAYSIZE = OrderError_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderError_descriptor();
inline const ::std::string& OrderError_Name(OrderError value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderError_descriptor(), value);
}
inline bool OrderError_Parse(
    const ::std::string& name, OrderError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderError>(
    OrderError_descriptor(), name, value);
}
enum ChainStatus {
  CHAIN_STATUS_UNSPECIFIED = 0,
  CHAIN_STATUS_DISCONNECTED = 1,
  CHAIN_STATUS_REPLAYING = 2,
  CHAIN_STATUS_CONNECTED = 3,
  ChainStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ChainStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ChainStatus_IsValid(int value);
const ChainStatus ChainStatus_MIN = CHAIN_STATUS_UNSPECIFIED;
const ChainStatus ChainStatus_MAX = CHAIN_STATUS_CONNECTED;
const int ChainStatus_ARRAYSIZE = ChainStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChainStatus_descriptor();
inline const ::std::string& ChainStatus_Name(ChainStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChainStatus_descriptor(), value);
}
inline bool ChainStatus_Parse(
    const ::std::string& name, ChainStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChainStatus>(
    ChainStatus_descriptor(), name, value);
}
enum AccountType {
  ACCOUNT_TYPE_UNSPECIFIED = 0,
  ACCOUNT_TYPE_INSURANCE = 1,
  ACCOUNT_TYPE_SETTLEMENT = 2,
  ACCOUNT_TYPE_MARGIN = 3,
  ACCOUNT_TYPE_GENERAL = 4,
  ACCOUNT_TYPE_FEES_INFRASTRUCTURE = 5,
  ACCOUNT_TYPE_FEES_LIQUIDITY = 6,
  ACCOUNT_TYPE_FEES_MAKER = 7,
  ACCOUNT_TYPE_LOCK_WITHDRAW = 8,
  AccountType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  AccountType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool AccountType_IsValid(int value);
const AccountType AccountType_MIN = ACCOUNT_TYPE_UNSPECIFIED;
const AccountType AccountType_MAX = ACCOUNT_TYPE_LOCK_WITHDRAW;
const int AccountType_ARRAYSIZE = AccountType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccountType_descriptor();
inline const ::std::string& AccountType_Name(AccountType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccountType_descriptor(), value);
}
inline bool AccountType_Parse(
    const ::std::string& name, AccountType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccountType>(
    AccountType_descriptor(), name, value);
}
enum TransferType {
  TRANSFER_TYPE_UNSPECIFIED = 0,
  TRANSFER_TYPE_LOSS = 1,
  TRANSFER_TYPE_WIN = 2,
  TRANSFER_TYPE_CLOSE = 3,
  TRANSFER_TYPE_MTM_LOSS = 4,
  TRANSFER_TYPE_MTM_WIN = 5,
  TRANSFER_TYPE_MARGIN_LOW = 6,
  TRANSFER_TYPE_MARGIN_HIGH = 7,
  TRANSFER_TYPE_MARGIN_CONFISCATED = 8,
  TRANSFER_TYPE_MAKER_FEE_PAY = 9,
  TRANSFER_TYPE_MAKER_FEE_RECEIVE = 10,
  TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY = 11,
  TRANSFER_TYPE_LIQUIDITY_FEE_PAY = 12,
  TransferType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  TransferType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool TransferType_IsValid(int value);
const TransferType TransferType_MIN = TRANSFER_TYPE_UNSPECIFIED;
const TransferType TransferType_MAX = TRANSFER_TYPE_LIQUIDITY_FEE_PAY;
const int TransferType_ARRAYSIZE = TransferType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransferType_descriptor();
inline const ::std::string& TransferType_Name(TransferType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransferType_descriptor(), value);
}
inline bool TransferType_Parse(
    const ::std::string& name, TransferType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransferType>(
    TransferType_descriptor(), name, value);
}
enum NodeSignatureKind {
  NODE_SIGNATURE_KIND_UNSPECIFIED = 0,
  NODE_SIGNATURE_KIND_ASSET_NEW = 1,
  NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL = 2,
  NodeSignatureKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  NodeSignatureKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool NodeSignatureKind_IsValid(int value);
const NodeSignatureKind NodeSignatureKind_MIN = NODE_SIGNATURE_KIND_UNSPECIFIED;
const NodeSignatureKind NodeSignatureKind_MAX = NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL;
const int NodeSignatureKind_ARRAYSIZE = NodeSignatureKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeSignatureKind_descriptor();
inline const ::std::string& NodeSignatureKind_Name(NodeSignatureKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeSignatureKind_descriptor(), value);
}
inline bool NodeSignatureKind_Parse(
    const ::std::string& name, NodeSignatureKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeSignatureKind>(
    NodeSignatureKind_descriptor(), name, value);
}
// ===================================================================

class Price :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Price) */ {
 public:
  Price();
  virtual ~Price();

  Price(const Price& from);

  inline Price& operator=(const Price& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Price(Price&& from) noexcept
    : Price() {
    *this = ::std::move(from);
  }

  inline Price& operator=(Price&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Price& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Price* internal_default_instance() {
    return reinterpret_cast<const Price*>(
               &_Price_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Price* other);
  friend void swap(Price& a, Price& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Price* New() const final {
    return CreateMaybeMessage<Price>(nullptr);
  }

  Price* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Price>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Price& from);
  void MergeFrom(const Price& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Price* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint64 value() const;
  void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vega.Price)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class Timestamp :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Timestamp) */ {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Timestamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Timestamp* other);
  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return CreateMaybeMessage<Timestamp>(nullptr);
  }

  Timestamp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:vega.Timestamp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class Party :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Party) */ {
 public:
  Party();
  virtual ~Party();

  Party(const Party& from);

  inline Party& operator=(const Party& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Party(Party&& from) noexcept
    : Party() {
    *this = ::std::move(from);
  }

  inline Party& operator=(Party&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Party& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Party* internal_default_instance() {
    return reinterpret_cast<const Party*>(
               &_Party_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Party* other);
  friend void swap(Party& a, Party& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Party* New() const final {
    return CreateMaybeMessage<Party>(nullptr);
  }

  Party* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Party>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Party& from);
  void MergeFrom(const Party& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Party* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1 [(.validator.field) = {
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:vega.Party)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class RiskFactor :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.RiskFactor) */ {
 public:
  RiskFactor();
  virtual ~RiskFactor();

  RiskFactor(const RiskFactor& from);

  inline RiskFactor& operator=(const RiskFactor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RiskFactor(RiskFactor&& from) noexcept
    : RiskFactor() {
    *this = ::std::move(from);
  }

  inline RiskFactor& operator=(RiskFactor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RiskFactor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RiskFactor* internal_default_instance() {
    return reinterpret_cast<const RiskFactor*>(
               &_RiskFactor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RiskFactor* other);
  friend void swap(RiskFactor& a, RiskFactor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RiskFactor* New() const final {
    return CreateMaybeMessage<RiskFactor>(nullptr);
  }

  RiskFactor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RiskFactor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RiskFactor& from);
  void MergeFrom(const RiskFactor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RiskFactor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string market = 1;
  void clear_market();
  static const int kMarketFieldNumber = 1;
  const ::std::string& market() const;
  void set_market(const ::std::string& value);
  #if LANG_CXX11
  void set_market(::std::string&& value);
  #endif
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  ::std::string* mutable_market();
  ::std::string* release_market();
  void set_allocated_market(::std::string* market);

  // double short = 2;
  void clear_short_();
  static const int kShortFieldNumber = 2;
  double short_() const;
  void set_short_(double value);

  // double long = 3;
  void clear_long_();
  static const int kLongFieldNumber = 3;
  double long_() const;
  void set_long_(double value);

  // @@protoc_insertion_point(class_scope:vega.RiskFactor)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr market_;
  double short__;
  double long__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class RiskResult_RiskFactorsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RiskResult_RiskFactorsEntry_DoNotUse, 
    ::std::string, ::vega::RiskFactor,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<RiskResult_RiskFactorsEntry_DoNotUse, 
    ::std::string, ::vega::RiskFactor,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RiskResult_RiskFactorsEntry_DoNotUse();
  RiskResult_RiskFactorsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RiskResult_RiskFactorsEntry_DoNotUse& other);
  static const RiskResult_RiskFactorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RiskResult_RiskFactorsEntry_DoNotUse*>(&_RiskResult_RiskFactorsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RiskResult_PredictedNextRiskFactorsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RiskResult_PredictedNextRiskFactorsEntry_DoNotUse, 
    ::std::string, ::vega::RiskFactor,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<RiskResult_PredictedNextRiskFactorsEntry_DoNotUse, 
    ::std::string, ::vega::RiskFactor,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RiskResult_PredictedNextRiskFactorsEntry_DoNotUse();
  RiskResult_PredictedNextRiskFactorsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RiskResult_PredictedNextRiskFactorsEntry_DoNotUse& other);
  static const RiskResult_PredictedNextRiskFactorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RiskResult_PredictedNextRiskFactorsEntry_DoNotUse*>(&_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RiskResult :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.RiskResult) */ {
 public:
  RiskResult();
  virtual ~RiskResult();

  RiskResult(const RiskResult& from);

  inline RiskResult& operator=(const RiskResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RiskResult(RiskResult&& from) noexcept
    : RiskResult() {
    *this = ::std::move(from);
  }

  inline RiskResult& operator=(RiskResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RiskResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RiskResult* internal_default_instance() {
    return reinterpret_cast<const RiskResult*>(
               &_RiskResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RiskResult* other);
  friend void swap(RiskResult& a, RiskResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RiskResult* New() const final {
    return CreateMaybeMessage<RiskResult>(nullptr);
  }

  RiskResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RiskResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RiskResult& from);
  void MergeFrom(const RiskResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RiskResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .vega.RiskFactor> riskFactors = 2;
  int riskfactors_size() const;
  void clear_riskfactors();
  static const int kRiskFactorsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >&
      riskfactors() const;
  ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >*
      mutable_riskfactors();

  // map<string, .vega.RiskFactor> predictedNextRiskFactors = 4;
  int predictednextriskfactors_size() const;
  void clear_predictednextriskfactors();
  static const int kPredictedNextRiskFactorsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >&
      predictednextriskfactors() const;
  ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >*
      mutable_predictednextriskfactors();

  // int64 updatedTimestamp = 1;
  void clear_updatedtimestamp();
  static const int kUpdatedTimestampFieldNumber = 1;
  ::google::protobuf::int64 updatedtimestamp() const;
  void set_updatedtimestamp(::google::protobuf::int64 value);

  // int64 nextUpdateTimestamp = 3;
  void clear_nextupdatetimestamp();
  static const int kNextUpdateTimestampFieldNumber = 3;
  ::google::protobuf::int64 nextupdatetimestamp() const;
  void set_nextupdatetimestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:vega.RiskResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      RiskResult_RiskFactorsEntry_DoNotUse,
      ::std::string, ::vega::RiskFactor,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > riskfactors_;
  ::google::protobuf::internal::MapField<
      RiskResult_PredictedNextRiskFactorsEntry_DoNotUse,
      ::std::string, ::vega::RiskFactor,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > predictednextriskfactors_;
  ::google::protobuf::int64 updatedtimestamp_;
  ::google::protobuf::int64 nextupdatetimestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class Order :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Order) */ {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(Order&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Order* other);
  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Order_TimeInForce TimeInForce;
  static const TimeInForce TIF_UNSPECIFIED =
    Order_TimeInForce_TIF_UNSPECIFIED;
  static const TimeInForce TIF_GTC =
    Order_TimeInForce_TIF_GTC;
  static const TimeInForce TIF_GTT =
    Order_TimeInForce_TIF_GTT;
  static const TimeInForce TIF_IOC =
    Order_TimeInForce_TIF_IOC;
  static const TimeInForce TIF_FOK =
    Order_TimeInForce_TIF_FOK;
  static const TimeInForce TIF_GFA =
    Order_TimeInForce_TIF_GFA;
  static const TimeInForce TIF_GFN =
    Order_TimeInForce_TIF_GFN;
  static inline bool TimeInForce_IsValid(int value) {
    return Order_TimeInForce_IsValid(value);
  }
  static const TimeInForce TimeInForce_MIN =
    Order_TimeInForce_TimeInForce_MIN;
  static const TimeInForce TimeInForce_MAX =
    Order_TimeInForce_TimeInForce_MAX;
  static const int TimeInForce_ARRAYSIZE =
    Order_TimeInForce_TimeInForce_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TimeInForce_descriptor() {
    return Order_TimeInForce_descriptor();
  }
  static inline const ::std::string& TimeInForce_Name(TimeInForce value) {
    return Order_TimeInForce_Name(value);
  }
  static inline bool TimeInForce_Parse(const ::std::string& name,
      TimeInForce* value) {
    return Order_TimeInForce_Parse(name, value);
  }

  typedef Order_Type Type;
  static const Type TYPE_UNSPECIFIED =
    Order_Type_TYPE_UNSPECIFIED;
  static const Type TYPE_LIMIT =
    Order_Type_TYPE_LIMIT;
  static const Type TYPE_MARKET =
    Order_Type_TYPE_MARKET;
  static const Type TYPE_NETWORK =
    Order_Type_TYPE_NETWORK;
  static inline bool Type_IsValid(int value) {
    return Order_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Order_Type_Type_MIN;
  static const Type Type_MAX =
    Order_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Order_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Order_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Order_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Order_Type_Parse(name, value);
  }

  typedef Order_Status Status;
  static const Status STATUS_INVALID =
    Order_Status_STATUS_INVALID;
  static const Status STATUS_ACTIVE =
    Order_Status_STATUS_ACTIVE;
  static const Status STATUS_EXPIRED =
    Order_Status_STATUS_EXPIRED;
  static const Status STATUS_CANCELLED =
    Order_Status_STATUS_CANCELLED;
  static const Status STATUS_STOPPED =
    Order_Status_STATUS_STOPPED;
  static const Status STATUS_FILLED =
    Order_Status_STATUS_FILLED;
  static const Status STATUS_REJECTED =
    Order_Status_STATUS_REJECTED;
  static const Status STATUS_PARTIALLY_FILLED =
    Order_Status_STATUS_PARTIALLY_FILLED;
  static inline bool Status_IsValid(int value) {
    return Order_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Order_Status_Status_MIN;
  static const Status Status_MAX =
    Order_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Order_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Order_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Order_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Order_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string marketID = 2;
  void clear_marketid();
  static const int kMarketIDFieldNumber = 2;
  const ::std::string& marketid() const;
  void set_marketid(const ::std::string& value);
  #if LANG_CXX11
  void set_marketid(::std::string&& value);
  #endif
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  ::std::string* mutable_marketid();
  ::std::string* release_marketid();
  void set_allocated_marketid(::std::string* marketid);

  // string partyID = 3;
  void clear_partyid();
  static const int kPartyIDFieldNumber = 3;
  const ::std::string& partyid() const;
  void set_partyid(const ::std::string& value);
  #if LANG_CXX11
  void set_partyid(::std::string&& value);
  #endif
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  ::std::string* mutable_partyid();
  ::std::string* release_partyid();
  void set_allocated_partyid(::std::string* partyid);

  // string reference = 13;
  void clear_reference();
  static const int kReferenceFieldNumber = 13;
  const ::std::string& reference() const;
  void set_reference(const ::std::string& value);
  #if LANG_CXX11
  void set_reference(::std::string&& value);
  #endif
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  ::std::string* mutable_reference();
  ::std::string* release_reference();
  void set_allocated_reference(::std::string* reference);

  // uint64 price = 5;
  void clear_price();
  static const int kPriceFieldNumber = 5;
  ::google::protobuf::uint64 price() const;
  void set_price(::google::protobuf::uint64 value);

  // uint64 size = 6;
  void clear_size();
  static const int kSizeFieldNumber = 6;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // .vega.Side side = 4;
  void clear_side();
  static const int kSideFieldNumber = 4;
  ::vega::Side side() const;
  void set_side(::vega::Side value);

  // .vega.Order.TimeInForce timeInForce = 8;
  void clear_timeinforce();
  static const int kTimeInForceFieldNumber = 8;
  ::vega::Order_TimeInForce timeinforce() const;
  void set_timeinforce(::vega::Order_TimeInForce value);

  // uint64 remaining = 7;
  void clear_remaining();
  static const int kRemainingFieldNumber = 7;
  ::google::protobuf::uint64 remaining() const;
  void set_remaining(::google::protobuf::uint64 value);

  // int64 createdAt = 10;
  void clear_createdat();
  static const int kCreatedAtFieldNumber = 10;
  ::google::protobuf::int64 createdat() const;
  void set_createdat(::google::protobuf::int64 value);

  // .vega.Order.Type type = 9;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::vega::Order_Type type() const;
  void set_type(::vega::Order_Type value);

  // .vega.Order.Status status = 11;
  void clear_status();
  static const int kStatusFieldNumber = 11;
  ::vega::Order_Status status() const;
  void set_status(::vega::Order_Status value);

  // int64 expiresAt = 12;
  void clear_expiresat();
  static const int kExpiresAtFieldNumber = 12;
  ::google::protobuf::int64 expiresat() const;
  void set_expiresat(::google::protobuf::int64 value);

  // int64 updatedAt = 15;
  void clear_updatedat();
  static const int kUpdatedAtFieldNumber = 15;
  ::google::protobuf::int64 updatedat() const;
  void set_updatedat(::google::protobuf::int64 value);

  // uint64 version = 16;
  void clear_version();
  static const int kVersionFieldNumber = 16;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // uint64 batchID = 17;
  void clear_batchid();
  static const int kBatchIDFieldNumber = 17;
  ::google::protobuf::uint64 batchid() const;
  void set_batchid(::google::protobuf::uint64 value);

  // .vega.OrderError reason = 14;
  void clear_reason();
  static const int kReasonFieldNumber = 14;
  ::vega::OrderError reason() const;
  void set_reason(::vega::OrderError value);

  // @@protoc_insertion_point(class_scope:vega.Order)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr marketid_;
  ::google::protobuf::internal::ArenaStringPtr partyid_;
  ::google::protobuf::internal::ArenaStringPtr reference_;
  ::google::protobuf::uint64 price_;
  ::google::protobuf::uint64 size_;
  int side_;
  int timeinforce_;
  ::google::protobuf::uint64 remaining_;
  ::google::protobuf::int64 createdat_;
  int type_;
  int status_;
  ::google::protobuf::int64 expiresat_;
  ::google::protobuf::int64 updatedat_;
  ::google::protobuf::uint64 version_;
  ::google::protobuf::uint64 batchid_;
  int reason_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class OrderCancellationConfirmation :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.OrderCancellationConfirmation) */ {
 public:
  OrderCancellationConfirmation();
  virtual ~OrderCancellationConfirmation();

  OrderCancellationConfirmation(const OrderCancellationConfirmation& from);

  inline OrderCancellationConfirmation& operator=(const OrderCancellationConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderCancellationConfirmation(OrderCancellationConfirmation&& from) noexcept
    : OrderCancellationConfirmation() {
    *this = ::std::move(from);
  }

  inline OrderCancellationConfirmation& operator=(OrderCancellationConfirmation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OrderCancellationConfirmation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderCancellationConfirmation* internal_default_instance() {
    return reinterpret_cast<const OrderCancellationConfirmation*>(
               &_OrderCancellationConfirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(OrderCancellationConfirmation* other);
  friend void swap(OrderCancellationConfirmation& a, OrderCancellationConfirmation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderCancellationConfirmation* New() const final {
    return CreateMaybeMessage<OrderCancellationConfirmation>(nullptr);
  }

  OrderCancellationConfirmation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderCancellationConfirmation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderCancellationConfirmation& from);
  void MergeFrom(const OrderCancellationConfirmation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderCancellationConfirmation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .vega.Order order = 1;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 1;
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);

  // @@protoc_insertion_point(class_scope:vega.OrderCancellationConfirmation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::vega::Order* order_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class OrderConfirmation :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.OrderConfirmation) */ {
 public:
  OrderConfirmation();
  virtual ~OrderConfirmation();

  OrderConfirmation(const OrderConfirmation& from);

  inline OrderConfirmation& operator=(const OrderConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderConfirmation(OrderConfirmation&& from) noexcept
    : OrderConfirmation() {
    *this = ::std::move(from);
  }

  inline OrderConfirmation& operator=(OrderConfirmation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OrderConfirmation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderConfirmation* internal_default_instance() {
    return reinterpret_cast<const OrderConfirmation*>(
               &_OrderConfirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(OrderConfirmation* other);
  friend void swap(OrderConfirmation& a, OrderConfirmation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderConfirmation* New() const final {
    return CreateMaybeMessage<OrderConfirmation>(nullptr);
  }

  OrderConfirmation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderConfirmation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderConfirmation& from);
  void MergeFrom(const OrderConfirmation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderConfirmation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vega.Trade trades = 2;
  int trades_size() const;
  void clear_trades();
  static const int kTradesFieldNumber = 2;
  ::vega::Trade* mutable_trades(int index);
  ::google::protobuf::RepeatedPtrField< ::vega::Trade >*
      mutable_trades();
  const ::vega::Trade& trades(int index) const;
  ::vega::Trade* add_trades();
  const ::google::protobuf::RepeatedPtrField< ::vega::Trade >&
      trades() const;

  // repeated .vega.Order passiveOrdersAffected = 3;
  int passiveordersaffected_size() const;
  void clear_passiveordersaffected();
  static const int kPassiveOrdersAffectedFieldNumber = 3;
  ::vega::Order* mutable_passiveordersaffected(int index);
  ::google::protobuf::RepeatedPtrField< ::vega::Order >*
      mutable_passiveordersaffected();
  const ::vega::Order& passiveordersaffected(int index) const;
  ::vega::Order* add_passiveordersaffected();
  const ::google::protobuf::RepeatedPtrField< ::vega::Order >&
      passiveordersaffected() const;

  // .vega.Order order = 1;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 1;
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);

  // @@protoc_insertion_point(class_scope:vega.OrderConfirmation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::vega::Trade > trades_;
  ::google::protobuf::RepeatedPtrField< ::vega::Order > passiveordersaffected_;
  ::vega::Order* order_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class AuctionIndicativeState :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.AuctionIndicativeState) */ {
 public:
  AuctionIndicativeState();
  virtual ~AuctionIndicativeState();

  AuctionIndicativeState(const AuctionIndicativeState& from);

  inline AuctionIndicativeState& operator=(const AuctionIndicativeState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuctionIndicativeState(AuctionIndicativeState&& from) noexcept
    : AuctionIndicativeState() {
    *this = ::std::move(from);
  }

  inline AuctionIndicativeState& operator=(AuctionIndicativeState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuctionIndicativeState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuctionIndicativeState* internal_default_instance() {
    return reinterpret_cast<const AuctionIndicativeState*>(
               &_AuctionIndicativeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(AuctionIndicativeState* other);
  friend void swap(AuctionIndicativeState& a, AuctionIndicativeState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuctionIndicativeState* New() const final {
    return CreateMaybeMessage<AuctionIndicativeState>(nullptr);
  }

  AuctionIndicativeState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuctionIndicativeState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuctionIndicativeState& from);
  void MergeFrom(const AuctionIndicativeState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuctionIndicativeState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string marketID = 1;
  void clear_marketid();
  static const int kMarketIDFieldNumber = 1;
  const ::std::string& marketid() const;
  void set_marketid(const ::std::string& value);
  #if LANG_CXX11
  void set_marketid(::std::string&& value);
  #endif
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  ::std::string* mutable_marketid();
  ::std::string* release_marketid();
  void set_allocated_marketid(::std::string* marketid);

  // uint64 indicativePrice = 2;
  void clear_indicativeprice();
  static const int kIndicativePriceFieldNumber = 2;
  ::google::protobuf::uint64 indicativeprice() const;
  void set_indicativeprice(::google::protobuf::uint64 value);

  // uint64 indicativeVolume = 3;
  void clear_indicativevolume();
  static const int kIndicativeVolumeFieldNumber = 3;
  ::google::protobuf::uint64 indicativevolume() const;
  void set_indicativevolume(::google::protobuf::uint64 value);

  // int64 auctionStart = 4;
  void clear_auctionstart();
  static const int kAuctionStartFieldNumber = 4;
  ::google::protobuf::int64 auctionstart() const;
  void set_auctionstart(::google::protobuf::int64 value);

  // int64 auctionEnd = 5;
  void clear_auctionend();
  static const int kAuctionEndFieldNumber = 5;
  ::google::protobuf::int64 auctionend() const;
  void set_auctionend(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:vega.AuctionIndicativeState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr marketid_;
  ::google::protobuf::uint64 indicativeprice_;
  ::google::protobuf::uint64 indicativevolume_;
  ::google::protobuf::int64 auctionstart_;
  ::google::protobuf::int64 auctionend_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class Trade :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Trade) */ {
 public:
  Trade();
  virtual ~Trade();

  Trade(const Trade& from);

  inline Trade& operator=(const Trade& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trade(Trade&& from) noexcept
    : Trade() {
    *this = ::std::move(from);
  }

  inline Trade& operator=(Trade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Trade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trade* internal_default_instance() {
    return reinterpret_cast<const Trade*>(
               &_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Trade* other);
  friend void swap(Trade& a, Trade& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trade* New() const final {
    return CreateMaybeMessage<Trade>(nullptr);
  }

  Trade* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Trade>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Trade& from);
  void MergeFrom(const Trade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trade* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Trade_Type Type;
  static const Type TYPE_UNSPECIFIED =
    Trade_Type_TYPE_UNSPECIFIED;
  static const Type TYPE_DEFAULT =
    Trade_Type_TYPE_DEFAULT;
  static const Type TYPE_NETWORK_CLOSE_OUT_GOOD =
    Trade_Type_TYPE_NETWORK_CLOSE_OUT_GOOD;
  static const Type TYPE_NETWORK_CLOSE_OUT_BAD =
    Trade_Type_TYPE_NETWORK_CLOSE_OUT_BAD;
  static inline bool Type_IsValid(int value) {
    return Trade_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Trade_Type_Type_MIN;
  static const Type Type_MAX =
    Trade_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Trade_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Trade_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Trade_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Trade_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string marketID = 2;
  void clear_marketid();
  static const int kMarketIDFieldNumber = 2;
  const ::std::string& marketid() const;
  void set_marketid(const ::std::string& value);
  #if LANG_CXX11
  void set_marketid(::std::string&& value);
  #endif
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  ::std::string* mutable_marketid();
  ::std::string* release_marketid();
  void set_allocated_marketid(::std::string* marketid);

  // string buyer = 5;
  void clear_buyer();
  static const int kBuyerFieldNumber = 5;
  const ::std::string& buyer() const;
  void set_buyer(const ::std::string& value);
  #if LANG_CXX11
  void set_buyer(::std::string&& value);
  #endif
  void set_buyer(const char* value);
  void set_buyer(const char* value, size_t size);
  ::std::string* mutable_buyer();
  ::std::string* release_buyer();
  void set_allocated_buyer(::std::string* buyer);

  // string seller = 6;
  void clear_seller();
  static const int kSellerFieldNumber = 6;
  const ::std::string& seller() const;
  void set_seller(const ::std::string& value);
  #if LANG_CXX11
  void set_seller(::std::string&& value);
  #endif
  void set_seller(const char* value);
  void set_seller(const char* value, size_t size);
  ::std::string* mutable_seller();
  ::std::string* release_seller();
  void set_allocated_seller(::std::string* seller);

  // string buyOrder = 8;
  void clear_buyorder();
  static const int kBuyOrderFieldNumber = 8;
  const ::std::string& buyorder() const;
  void set_buyorder(const ::std::string& value);
  #if LANG_CXX11
  void set_buyorder(::std::string&& value);
  #endif
  void set_buyorder(const char* value);
  void set_buyorder(const char* value, size_t size);
  ::std::string* mutable_buyorder();
  ::std::string* release_buyorder();
  void set_allocated_buyorder(::std::string* buyorder);

  // string sellOrder = 9;
  void clear_sellorder();
  static const int kSellOrderFieldNumber = 9;
  const ::std::string& sellorder() const;
  void set_sellorder(const ::std::string& value);
  #if LANG_CXX11
  void set_sellorder(::std::string&& value);
  #endif
  void set_sellorder(const char* value);
  void set_sellorder(const char* value, size_t size);
  ::std::string* mutable_sellorder();
  ::std::string* release_sellorder();
  void set_allocated_sellorder(::std::string* sellorder);

  // .vega.Fee buyerFee = 12;
  bool has_buyerfee() const;
  void clear_buyerfee();
  static const int kBuyerFeeFieldNumber = 12;
  const ::vega::Fee& buyerfee() const;
  ::vega::Fee* release_buyerfee();
  ::vega::Fee* mutable_buyerfee();
  void set_allocated_buyerfee(::vega::Fee* buyerfee);

  // .vega.Fee sellerFee = 13;
  bool has_sellerfee() const;
  void clear_sellerfee();
  static const int kSellerFeeFieldNumber = 13;
  const ::vega::Fee& sellerfee() const;
  ::vega::Fee* release_sellerfee();
  ::vega::Fee* mutable_sellerfee();
  void set_allocated_sellerfee(::vega::Fee* sellerfee);

  // uint64 price = 3;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  ::google::protobuf::uint64 price() const;
  void set_price(::google::protobuf::uint64 value);

  // uint64 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // .vega.Side aggressor = 7;
  void clear_aggressor();
  static const int kAggressorFieldNumber = 7;
  ::vega::Side aggressor() const;
  void set_aggressor(::vega::Side value);

  // .vega.Trade.Type type = 11;
  void clear_type();
  static const int kTypeFieldNumber = 11;
  ::vega::Trade_Type type() const;
  void set_type(::vega::Trade_Type value);

  // int64 timestamp = 10;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 10;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // uint64 buyerAuctionBatch = 14;
  void clear_buyerauctionbatch();
  static const int kBuyerAuctionBatchFieldNumber = 14;
  ::google::protobuf::uint64 buyerauctionbatch() const;
  void set_buyerauctionbatch(::google::protobuf::uint64 value);

  // uint64 sellerAuctionBatch = 15;
  void clear_sellerauctionbatch();
  static const int kSellerAuctionBatchFieldNumber = 15;
  ::google::protobuf::uint64 sellerauctionbatch() const;
  void set_sellerauctionbatch(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vega.Trade)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr marketid_;
  ::google::protobuf::internal::ArenaStringPtr buyer_;
  ::google::protobuf::internal::ArenaStringPtr seller_;
  ::google::protobuf::internal::ArenaStringPtr buyorder_;
  ::google::protobuf::internal::ArenaStringPtr sellorder_;
  ::vega::Fee* buyerfee_;
  ::vega::Fee* sellerfee_;
  ::google::protobuf::uint64 price_;
  ::google::protobuf::uint64 size_;
  int aggressor_;
  int type_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::uint64 buyerauctionbatch_;
  ::google::protobuf::uint64 sellerauctionbatch_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class Fee :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Fee) */ {
 public:
  Fee();
  virtual ~Fee();

  Fee(const Fee& from);

  inline Fee& operator=(const Fee& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Fee(Fee&& from) noexcept
    : Fee() {
    *this = ::std::move(from);
  }

  inline Fee& operator=(Fee&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Fee& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fee* internal_default_instance() {
    return reinterpret_cast<const Fee*>(
               &_Fee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Fee* other);
  friend void swap(Fee& a, Fee& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Fee* New() const final {
    return CreateMaybeMessage<Fee>(nullptr);
  }

  Fee* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Fee>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Fee& from);
  void MergeFrom(const Fee& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fee* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 makerFee = 1;
  void clear_makerfee();
  static const int kMakerFeeFieldNumber = 1;
  ::google::protobuf::uint64 makerfee() const;
  void set_makerfee(::google::protobuf::uint64 value);

  // uint64 infrastructureFee = 2;
  void clear_infrastructurefee();
  static const int kInfrastructureFeeFieldNumber = 2;
  ::google::protobuf::uint64 infrastructurefee() const;
  void set_infrastructurefee(::google::protobuf::uint64 value);

  // uint64 liquidityFee = 3;
  void clear_liquidityfee();
  static const int kLiquidityFeeFieldNumber = 3;
  ::google::protobuf::uint64 liquidityfee() const;
  void set_liquidityfee(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vega.Fee)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 makerfee_;
  ::google::protobuf::uint64 infrastructurefee_;
  ::google::protobuf::uint64 liquidityfee_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class TradeSet :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.TradeSet) */ {
 public:
  TradeSet();
  virtual ~TradeSet();

  TradeSet(const TradeSet& from);

  inline TradeSet& operator=(const TradeSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TradeSet(TradeSet&& from) noexcept
    : TradeSet() {
    *this = ::std::move(from);
  }

  inline TradeSet& operator=(TradeSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TradeSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeSet* internal_default_instance() {
    return reinterpret_cast<const TradeSet*>(
               &_TradeSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(TradeSet* other);
  friend void swap(TradeSet& a, TradeSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradeSet* New() const final {
    return CreateMaybeMessage<TradeSet>(nullptr);
  }

  TradeSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TradeSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TradeSet& from);
  void MergeFrom(const TradeSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vega.Trade trades = 1;
  int trades_size() const;
  void clear_trades();
  static const int kTradesFieldNumber = 1;
  ::vega::Trade* mutable_trades(int index);
  ::google::protobuf::RepeatedPtrField< ::vega::Trade >*
      mutable_trades();
  const ::vega::Trade& trades(int index) const;
  ::vega::Trade* add_trades();
  const ::google::protobuf::RepeatedPtrField< ::vega::Trade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:vega.TradeSet)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::vega::Trade > trades_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class Candle :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Candle) */ {
 public:
  Candle();
  virtual ~Candle();

  Candle(const Candle& from);

  inline Candle& operator=(const Candle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Candle(Candle&& from) noexcept
    : Candle() {
    *this = ::std::move(from);
  }

  inline Candle& operator=(Candle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Candle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Candle* internal_default_instance() {
    return reinterpret_cast<const Candle*>(
               &_Candle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Candle* other);
  friend void swap(Candle& a, Candle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Candle* New() const final {
    return CreateMaybeMessage<Candle>(nullptr);
  }

  Candle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Candle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Candle& from);
  void MergeFrom(const Candle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Candle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string datetime = 2;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 2;
  const ::std::string& datetime() const;
  void set_datetime(const ::std::string& value);
  #if LANG_CXX11
  void set_datetime(::std::string&& value);
  #endif
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  ::std::string* mutable_datetime();
  ::std::string* release_datetime();
  void set_allocated_datetime(::std::string* datetime);

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // uint64 high = 3;
  void clear_high();
  static const int kHighFieldNumber = 3;
  ::google::protobuf::uint64 high() const;
  void set_high(::google::protobuf::uint64 value);

  // uint64 low = 4;
  void clear_low();
  static const int kLowFieldNumber = 4;
  ::google::protobuf::uint64 low() const;
  void set_low(::google::protobuf::uint64 value);

  // uint64 open = 5;
  void clear_open();
  static const int kOpenFieldNumber = 5;
  ::google::protobuf::uint64 open() const;
  void set_open(::google::protobuf::uint64 value);

  // uint64 close = 6;
  void clear_close();
  static const int kCloseFieldNumber = 6;
  ::google::protobuf::uint64 close() const;
  void set_close(::google::protobuf::uint64 value);

  // uint64 volume = 7;
  void clear_volume();
  static const int kVolumeFieldNumber = 7;
  ::google::protobuf::uint64 volume() const;
  void set_volume(::google::protobuf::uint64 value);

  // .vega.Interval interval = 8;
  void clear_interval();
  static const int kIntervalFieldNumber = 8;
  ::vega::Interval interval() const;
  void set_interval(::vega::Interval value);

  // @@protoc_insertion_point(class_scope:vega.Candle)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr datetime_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::uint64 high_;
  ::google::protobuf::uint64 low_;
  ::google::protobuf::uint64 open_;
  ::google::protobuf::uint64 close_;
  ::google::protobuf::uint64 volume_;
  int interval_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class PriceLevel :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.PriceLevel) */ {
 public:
  PriceLevel();
  virtual ~PriceLevel();

  PriceLevel(const PriceLevel& from);

  inline PriceLevel& operator=(const PriceLevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PriceLevel(PriceLevel&& from) noexcept
    : PriceLevel() {
    *this = ::std::move(from);
  }

  inline PriceLevel& operator=(PriceLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PriceLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PriceLevel* internal_default_instance() {
    return reinterpret_cast<const PriceLevel*>(
               &_PriceLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(PriceLevel* other);
  friend void swap(PriceLevel& a, PriceLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PriceLevel* New() const final {
    return CreateMaybeMessage<PriceLevel>(nullptr);
  }

  PriceLevel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PriceLevel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PriceLevel& from);
  void MergeFrom(const PriceLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceLevel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 price = 1;
  void clear_price();
  static const int kPriceFieldNumber = 1;
  ::google::protobuf::uint64 price() const;
  void set_price(::google::protobuf::uint64 value);

  // uint64 numberOfOrders = 2;
  void clear_numberoforders();
  static const int kNumberOfOrdersFieldNumber = 2;
  ::google::protobuf::uint64 numberoforders() const;
  void set_numberoforders(::google::protobuf::uint64 value);

  // uint64 volume = 3;
  void clear_volume();
  static const int kVolumeFieldNumber = 3;
  ::google::protobuf::uint64 volume() const;
  void set_volume(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vega.PriceLevel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 price_;
  ::google::protobuf::uint64 numberoforders_;
  ::google::protobuf::uint64 volume_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class MarketDepth :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.MarketDepth) */ {
 public:
  MarketDepth();
  virtual ~MarketDepth();

  MarketDepth(const MarketDepth& from);

  inline MarketDepth& operator=(const MarketDepth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarketDepth(MarketDepth&& from) noexcept
    : MarketDepth() {
    *this = ::std::move(from);
  }

  inline MarketDepth& operator=(MarketDepth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MarketDepth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketDepth* internal_default_instance() {
    return reinterpret_cast<const MarketDepth*>(
               &_MarketDepth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(MarketDepth* other);
  friend void swap(MarketDepth& a, MarketDepth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarketDepth* New() const final {
    return CreateMaybeMessage<MarketDepth>(nullptr);
  }

  MarketDepth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MarketDepth& from);
  void MergeFrom(const MarketDepth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vega.PriceLevel buy = 2;
  int buy_size() const;
  void clear_buy();
  static const int kBuyFieldNumber = 2;
  ::vega::PriceLevel* mutable_buy(int index);
  ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_buy();
  const ::vega::PriceLevel& buy(int index) const;
  ::vega::PriceLevel* add_buy();
  const ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >&
      buy() const;

  // repeated .vega.PriceLevel sell = 3;
  int sell_size() const;
  void clear_sell();
  static const int kSellFieldNumber = 3;
  ::vega::PriceLevel* mutable_sell(int index);
  ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_sell();
  const ::vega::PriceLevel& sell(int index) const;
  ::vega::PriceLevel* add_sell();
  const ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >&
      sell() const;

  // string marketID = 1;
  void clear_marketid();
  static const int kMarketIDFieldNumber = 1;
  const ::std::string& marketid() const;
  void set_marketid(const ::std::string& value);
  #if LANG_CXX11
  void set_marketid(::std::string&& value);
  #endif
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  ::std::string* mutable_marketid();
  ::std::string* release_marketid();
  void set_allocated_marketid(::std::string* marketid);

  // uint64 sequenceNumber = 4;
  void clear_sequencenumber();
  static const int kSequenceNumberFieldNumber = 4;
  ::google::protobuf::uint64 sequencenumber() const;
  void set_sequencenumber(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vega.MarketDepth)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel > buy_;
  ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel > sell_;
  ::google::protobuf::internal::ArenaStringPtr marketid_;
  ::google::protobuf::uint64 sequencenumber_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class MarketDepthUpdate :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.MarketDepthUpdate) */ {
 public:
  MarketDepthUpdate();
  virtual ~MarketDepthUpdate();

  MarketDepthUpdate(const MarketDepthUpdate& from);

  inline MarketDepthUpdate& operator=(const MarketDepthUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarketDepthUpdate(MarketDepthUpdate&& from) noexcept
    : MarketDepthUpdate() {
    *this = ::std::move(from);
  }

  inline MarketDepthUpdate& operator=(MarketDepthUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MarketDepthUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketDepthUpdate* internal_default_instance() {
    return reinterpret_cast<const MarketDepthUpdate*>(
               &_MarketDepthUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(MarketDepthUpdate* other);
  friend void swap(MarketDepthUpdate& a, MarketDepthUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarketDepthUpdate* New() const final {
    return CreateMaybeMessage<MarketDepthUpdate>(nullptr);
  }

  MarketDepthUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepthUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MarketDepthUpdate& from);
  void MergeFrom(const MarketDepthUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vega.PriceLevel buy = 2;
  int buy_size() const;
  void clear_buy();
  static const int kBuyFieldNumber = 2;
  ::vega::PriceLevel* mutable_buy(int index);
  ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_buy();
  const ::vega::PriceLevel& buy(int index) const;
  ::vega::PriceLevel* add_buy();
  const ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >&
      buy() const;

  // repeated .vega.PriceLevel sell = 3;
  int sell_size() const;
  void clear_sell();
  static const int kSellFieldNumber = 3;
  ::vega::PriceLevel* mutable_sell(int index);
  ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_sell();
  const ::vega::PriceLevel& sell(int index) const;
  ::vega::PriceLevel* add_sell();
  const ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >&
      sell() const;

  // string marketID = 1;
  void clear_marketid();
  static const int kMarketIDFieldNumber = 1;
  const ::std::string& marketid() const;
  void set_marketid(const ::std::string& value);
  #if LANG_CXX11
  void set_marketid(::std::string&& value);
  #endif
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  ::std::string* mutable_marketid();
  ::std::string* release_marketid();
  void set_allocated_marketid(::std::string* marketid);

  // uint64 sequenceNumber = 4;
  void clear_sequencenumber();
  static const int kSequenceNumberFieldNumber = 4;
  ::google::protobuf::uint64 sequencenumber() const;
  void set_sequencenumber(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vega.MarketDepthUpdate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel > buy_;
  ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel > sell_;
  ::google::protobuf::internal::ArenaStringPtr marketid_;
  ::google::protobuf::uint64 sequencenumber_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class Position :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string marketID = 1;
  void clear_marketid();
  static const int kMarketIDFieldNumber = 1;
  const ::std::string& marketid() const;
  void set_marketid(const ::std::string& value);
  #if LANG_CXX11
  void set_marketid(::std::string&& value);
  #endif
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  ::std::string* mutable_marketid();
  ::std::string* release_marketid();
  void set_allocated_marketid(::std::string* marketid);

  // string partyID = 2;
  void clear_partyid();
  static const int kPartyIDFieldNumber = 2;
  const ::std::string& partyid() const;
  void set_partyid(const ::std::string& value);
  #if LANG_CXX11
  void set_partyid(::std::string&& value);
  #endif
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  ::std::string* mutable_partyid();
  ::std::string* release_partyid();
  void set_allocated_partyid(::std::string* partyid);

  // int64 openVolume = 3;
  void clear_openvolume();
  static const int kOpenVolumeFieldNumber = 3;
  ::google::protobuf::int64 openvolume() const;
  void set_openvolume(::google::protobuf::int64 value);

  // int64 realisedPNL = 4;
  void clear_realisedpnl();
  static const int kRealisedPNLFieldNumber = 4;
  ::google::protobuf::int64 realisedpnl() const;
  void set_realisedpnl(::google::protobuf::int64 value);

  // int64 unrealisedPNL = 5;
  void clear_unrealisedpnl();
  static const int kUnrealisedPNLFieldNumber = 5;
  ::google::protobuf::int64 unrealisedpnl() const;
  void set_unrealisedpnl(::google::protobuf::int64 value);

  // uint64 averageEntryPrice = 6;
  void clear_averageentryprice();
  static const int kAverageEntryPriceFieldNumber = 6;
  ::google::protobuf::uint64 averageentryprice() const;
  void set_averageentryprice(::google::protobuf::uint64 value);

  // int64 updatedAt = 7;
  void clear_updatedat();
  static const int kUpdatedAtFieldNumber = 7;
  ::google::protobuf::int64 updatedat() const;
  void set_updatedat(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:vega.Position)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr marketid_;
  ::google::protobuf::internal::ArenaStringPtr partyid_;
  ::google::protobuf::int64 openvolume_;
  ::google::protobuf::int64 realisedpnl_;
  ::google::protobuf::int64 unrealisedpnl_;
  ::google::protobuf::uint64 averageentryprice_;
  ::google::protobuf::int64 updatedat_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class PositionTrade :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.PositionTrade) */ {
 public:
  PositionTrade();
  virtual ~PositionTrade();

  PositionTrade(const PositionTrade& from);

  inline PositionTrade& operator=(const PositionTrade& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PositionTrade(PositionTrade&& from) noexcept
    : PositionTrade() {
    *this = ::std::move(from);
  }

  inline PositionTrade& operator=(PositionTrade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PositionTrade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionTrade* internal_default_instance() {
    return reinterpret_cast<const PositionTrade*>(
               &_PositionTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(PositionTrade* other);
  friend void swap(PositionTrade& a, PositionTrade& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PositionTrade* New() const final {
    return CreateMaybeMessage<PositionTrade>(nullptr);
  }

  PositionTrade* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PositionTrade>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PositionTrade& from);
  void MergeFrom(const PositionTrade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionTrade* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 volume = 1;
  void clear_volume();
  static const int kVolumeFieldNumber = 1;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // uint64 price = 2;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  ::google::protobuf::uint64 price() const;
  void set_price(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vega.PositionTrade)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 volume_;
  ::google::protobuf::uint64 price_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class Statistics :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Statistics) */ {
 public:
  Statistics();
  virtual ~Statistics();

  Statistics(const Statistics& from);

  inline Statistics& operator=(const Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Statistics(Statistics&& from) noexcept
    : Statistics() {
    *this = ::std::move(from);
  }

  inline Statistics& operator=(Statistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Statistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Statistics* internal_default_instance() {
    return reinterpret_cast<const Statistics*>(
               &_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(Statistics* other);
  friend void swap(Statistics& a, Statistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Statistics* New() const final {
    return CreateMaybeMessage<Statistics>(nullptr);
  }

  Statistics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Statistics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Statistics& from);
  void MergeFrom(const Statistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Statistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string genesisTime = 4;
  void clear_genesistime();
  static const int kGenesisTimeFieldNumber = 4;
  const ::std::string& genesistime() const;
  void set_genesistime(const ::std::string& value);
  #if LANG_CXX11
  void set_genesistime(::std::string&& value);
  #endif
  void set_genesistime(const char* value);
  void set_genesistime(const char* value, size_t size);
  ::std::string* mutable_genesistime();
  ::std::string* release_genesistime();
  void set_allocated_genesistime(::std::string* genesistime);

  // string currentTime = 5;
  void clear_currenttime();
  static const int kCurrentTimeFieldNumber = 5;
  const ::std::string& currenttime() const;
  void set_currenttime(const ::std::string& value);
  #if LANG_CXX11
  void set_currenttime(::std::string&& value);
  #endif
  void set_currenttime(const char* value);
  void set_currenttime(const char* value, size_t size);
  ::std::string* mutable_currenttime();
  ::std::string* release_currenttime();
  void set_allocated_currenttime(::std::string* currenttime);

  // string vegaTime = 6;
  void clear_vegatime();
  static const int kVegaTimeFieldNumber = 6;
  const ::std::string& vegatime() const;
  void set_vegatime(const ::std::string& value);
  #if LANG_CXX11
  void set_vegatime(::std::string&& value);
  #endif
  void set_vegatime(const char* value);
  void set_vegatime(const char* value, size_t size);
  ::std::string* mutable_vegatime();
  ::std::string* release_vegatime();
  void set_allocated_vegatime(::std::string* vegatime);

  // string appVersionHash = 28;
  void clear_appversionhash();
  static const int kAppVersionHashFieldNumber = 28;
  const ::std::string& appversionhash() const;
  void set_appversionhash(const ::std::string& value);
  #if LANG_CXX11
  void set_appversionhash(::std::string&& value);
  #endif
  void set_appversionhash(const char* value);
  void set_appversionhash(const char* value, size_t size);
  ::std::string* mutable_appversionhash();
  ::std::string* release_appversionhash();
  void set_allocated_appversionhash(::std::string* appversionhash);

  // string appVersion = 29;
  void clear_appversion();
  static const int kAppVersionFieldNumber = 29;
  const ::std::string& appversion() const;
  void set_appversion(const ::std::string& value);
  #if LANG_CXX11
  void set_appversion(::std::string&& value);
  #endif
  void set_appversion(const char* value);
  void set_appversion(const char* value, size_t size);
  ::std::string* mutable_appversion();
  ::std::string* release_appversion();
  void set_allocated_appversion(::std::string* appversion);

  // string chainVersion = 30;
  void clear_chainversion();
  static const int kChainVersionFieldNumber = 30;
  const ::std::string& chainversion() const;
  void set_chainversion(const ::std::string& value);
  #if LANG_CXX11
  void set_chainversion(::std::string&& value);
  #endif
  void set_chainversion(const char* value);
  void set_chainversion(const char* value, size_t size);
  ::std::string* mutable_chainversion();
  ::std::string* release_chainversion();
  void set_allocated_chainversion(::std::string* chainversion);

  // string uptime = 32;
  void clear_uptime();
  static const int kUptimeFieldNumber = 32;
  const ::std::string& uptime() const;
  void set_uptime(const ::std::string& value);
  #if LANG_CXX11
  void set_uptime(::std::string&& value);
  #endif
  void set_uptime(const char* value);
  void set_uptime(const char* value, size_t size);
  ::std::string* mutable_uptime();
  ::std::string* release_uptime();
  void set_allocated_uptime(::std::string* uptime);

  // string chainID = 33;
  void clear_chainid();
  static const int kChainIDFieldNumber = 33;
  const ::std::string& chainid() const;
  void set_chainid(const ::std::string& value);
  #if LANG_CXX11
  void set_chainid(::std::string&& value);
  #endif
  void set_chainid(const char* value);
  void set_chainid(const char* value, size_t size);
  ::std::string* mutable_chainid();
  ::std::string* release_chainid();
  void set_allocated_chainid(::std::string* chainid);

  // uint64 blockHeight = 1;
  void clear_blockheight();
  static const int kBlockHeightFieldNumber = 1;
  ::google::protobuf::uint64 blockheight() const;
  void set_blockheight(::google::protobuf::uint64 value);

  // uint64 backlogLength = 2;
  void clear_backloglength();
  static const int kBacklogLengthFieldNumber = 2;
  ::google::protobuf::uint64 backloglength() const;
  void set_backloglength(::google::protobuf::uint64 value);

  // uint64 totalPeers = 3;
  void clear_totalpeers();
  static const int kTotalPeersFieldNumber = 3;
  ::google::protobuf::uint64 totalpeers() const;
  void set_totalpeers(::google::protobuf::uint64 value);

  // uint64 txPerBlock = 8;
  void clear_txperblock();
  static const int kTxPerBlockFieldNumber = 8;
  ::google::protobuf::uint64 txperblock() const;
  void set_txperblock(::google::protobuf::uint64 value);

  // uint64 averageTxBytes = 9;
  void clear_averagetxbytes();
  static const int kAverageTxBytesFieldNumber = 9;
  ::google::protobuf::uint64 averagetxbytes() const;
  void set_averagetxbytes(::google::protobuf::uint64 value);

  // uint64 averageOrdersPerBlock = 10;
  void clear_averageordersperblock();
  static const int kAverageOrdersPerBlockFieldNumber = 10;
  ::google::protobuf::uint64 averageordersperblock() const;
  void set_averageordersperblock(::google::protobuf::uint64 value);

  // uint64 tradesPerSecond = 11;
  void clear_tradespersecond();
  static const int kTradesPerSecondFieldNumber = 11;
  ::google::protobuf::uint64 tradespersecond() const;
  void set_tradespersecond(::google::protobuf::uint64 value);

  // uint64 ordersPerSecond = 12;
  void clear_orderspersecond();
  static const int kOrdersPerSecondFieldNumber = 12;
  ::google::protobuf::uint64 orderspersecond() const;
  void set_orderspersecond(::google::protobuf::uint64 value);

  // uint64 totalMarkets = 13;
  void clear_totalmarkets();
  static const int kTotalMarketsFieldNumber = 13;
  ::google::protobuf::uint64 totalmarkets() const;
  void set_totalmarkets(::google::protobuf::uint64 value);

  // .vega.ChainStatus status = 7;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  ::vega::ChainStatus status() const;
  void set_status(::vega::ChainStatus value);

  // uint32 orderSubscriptions = 21;
  void clear_ordersubscriptions();
  static const int kOrderSubscriptionsFieldNumber = 21;
  ::google::protobuf::uint32 ordersubscriptions() const;
  void set_ordersubscriptions(::google::protobuf::uint32 value);

  // uint64 totalAmendOrder = 16;
  void clear_totalamendorder();
  static const int kTotalAmendOrderFieldNumber = 16;
  ::google::protobuf::uint64 totalamendorder() const;
  void set_totalamendorder(::google::protobuf::uint64 value);

  // uint64 totalCancelOrder = 17;
  void clear_totalcancelorder();
  static const int kTotalCancelOrderFieldNumber = 17;
  ::google::protobuf::uint64 totalcancelorder() const;
  void set_totalcancelorder(::google::protobuf::uint64 value);

  // uint64 totalCreateOrder = 18;
  void clear_totalcreateorder();
  static const int kTotalCreateOrderFieldNumber = 18;
  ::google::protobuf::uint64 totalcreateorder() const;
  void set_totalcreateorder(::google::protobuf::uint64 value);

  // uint64 totalOrders = 19;
  void clear_totalorders();
  static const int kTotalOrdersFieldNumber = 19;
  ::google::protobuf::uint64 totalorders() const;
  void set_totalorders(::google::protobuf::uint64 value);

  // uint64 totalTrades = 20;
  void clear_totaltrades();
  static const int kTotalTradesFieldNumber = 20;
  ::google::protobuf::uint64 totaltrades() const;
  void set_totaltrades(::google::protobuf::uint64 value);

  // uint32 tradeSubscriptions = 22;
  void clear_tradesubscriptions();
  static const int kTradeSubscriptionsFieldNumber = 22;
  ::google::protobuf::uint32 tradesubscriptions() const;
  void set_tradesubscriptions(::google::protobuf::uint32 value);

  // uint32 candleSubscriptions = 23;
  void clear_candlesubscriptions();
  static const int kCandleSubscriptionsFieldNumber = 23;
  ::google::protobuf::uint32 candlesubscriptions() const;
  void set_candlesubscriptions(::google::protobuf::uint32 value);

  // uint32 marketDepthSubscriptions = 24;
  void clear_marketdepthsubscriptions();
  static const int kMarketDepthSubscriptionsFieldNumber = 24;
  ::google::protobuf::uint32 marketdepthsubscriptions() const;
  void set_marketdepthsubscriptions(::google::protobuf::uint32 value);

  // uint32 positionsSubscriptions = 25;
  void clear_positionssubscriptions();
  static const int kPositionsSubscriptionsFieldNumber = 25;
  ::google::protobuf::uint32 positionssubscriptions() const;
  void set_positionssubscriptions(::google::protobuf::uint32 value);

  // uint32 accountSubscriptions = 26;
  void clear_accountsubscriptions();
  static const int kAccountSubscriptionsFieldNumber = 26;
  ::google::protobuf::uint32 accountsubscriptions() const;
  void set_accountsubscriptions(::google::protobuf::uint32 value);

  // uint32 marketDataSubscriptions = 27;
  void clear_marketdatasubscriptions();
  static const int kMarketDataSubscriptionsFieldNumber = 27;
  ::google::protobuf::uint32 marketdatasubscriptions() const;
  void set_marketdatasubscriptions(::google::protobuf::uint32 value);

  // uint64 blockDuration = 31;
  void clear_blockduration();
  static const int kBlockDurationFieldNumber = 31;
  ::google::protobuf::uint64 blockduration() const;
  void set_blockduration(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vega.Statistics)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr genesistime_;
  ::google::protobuf::internal::ArenaStringPtr currenttime_;
  ::google::protobuf::internal::ArenaStringPtr vegatime_;
  ::google::protobuf::internal::ArenaStringPtr appversionhash_;
  ::google::protobuf::internal::ArenaStringPtr appversion_;
  ::google::protobuf::internal::ArenaStringPtr chainversion_;
  ::google::protobuf::internal::ArenaStringPtr uptime_;
  ::google::protobuf::internal::ArenaStringPtr chainid_;
  ::google::protobuf::uint64 blockheight_;
  ::google::protobuf::uint64 backloglength_;
  ::google::protobuf::uint64 totalpeers_;
  ::google::protobuf::uint64 txperblock_;
  ::google::protobuf::uint64 averagetxbytes_;
  ::google::protobuf::uint64 averageordersperblock_;
  ::google::protobuf::uint64 tradespersecond_;
  ::google::protobuf::uint64 orderspersecond_;
  ::google::protobuf::uint64 totalmarkets_;
  int status_;
  ::google::protobuf::uint32 ordersubscriptions_;
  ::google::protobuf::uint64 totalamendorder_;
  ::google::protobuf::uint64 totalcancelorder_;
  ::google::protobuf::uint64 totalcreateorder_;
  ::google::protobuf::uint64 totalorders_;
  ::google::protobuf::uint64 totaltrades_;
  ::google::protobuf::uint32 tradesubscriptions_;
  ::google::protobuf::uint32 candlesubscriptions_;
  ::google::protobuf::uint32 marketdepthsubscriptions_;
  ::google::protobuf::uint32 positionssubscriptions_;
  ::google::protobuf::uint32 accountsubscriptions_;
  ::google::protobuf::uint32 marketdatasubscriptions_;
  ::google::protobuf::uint64 blockduration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class Deposit :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Deposit) */ {
 public:
  Deposit();
  virtual ~Deposit();

  Deposit(const Deposit& from);

  inline Deposit& operator=(const Deposit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Deposit(Deposit&& from) noexcept
    : Deposit() {
    *this = ::std::move(from);
  }

  inline Deposit& operator=(Deposit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Deposit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Deposit* internal_default_instance() {
    return reinterpret_cast<const Deposit*>(
               &_Deposit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(Deposit* other);
  friend void swap(Deposit& a, Deposit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Deposit* New() const final {
    return CreateMaybeMessage<Deposit>(nullptr);
  }

  Deposit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Deposit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Deposit& from);
  void MergeFrom(const Deposit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deposit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Deposit_Status Status;
  static const Status DEPOSIT_STATUS_UNSPECIFIED =
    Deposit_Status_DEPOSIT_STATUS_UNSPECIFIED;
  static const Status DEPOSIT_STATUS_OPEN =
    Deposit_Status_DEPOSIT_STATUS_OPEN;
  static const Status DEPOSIT_STATUS_CANCELLED =
    Deposit_Status_DEPOSIT_STATUS_CANCELLED;
  static const Status DEPOSIT_STATUS_FINALIZED =
    Deposit_Status_DEPOSIT_STATUS_FINALIZED;
  static inline bool Status_IsValid(int value) {
    return Deposit_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Deposit_Status_Status_MIN;
  static const Status Status_MAX =
    Deposit_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Deposit_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Deposit_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Deposit_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Deposit_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string partyID = 3;
  void clear_partyid();
  static const int kPartyIDFieldNumber = 3;
  const ::std::string& partyid() const;
  void set_partyid(const ::std::string& value);
  #if LANG_CXX11
  void set_partyid(::std::string&& value);
  #endif
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  ::std::string* mutable_partyid();
  ::std::string* release_partyid();
  void set_allocated_partyid(::std::string* partyid);

  // string asset = 4;
  void clear_asset();
  static const int kAssetFieldNumber = 4;
  const ::std::string& asset() const;
  void set_asset(const ::std::string& value);
  #if LANG_CXX11
  void set_asset(::std::string&& value);
  #endif
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  ::std::string* mutable_asset();
  ::std::string* release_asset();
  void set_allocated_asset(::std::string* asset);

  // string amount = 5;
  void clear_amount();
  static const int kAmountFieldNumber = 5;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  #if LANG_CXX11
  void set_amount(::std::string&& value);
  #endif
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // string txHash = 6;
  void clear_txhash();
  static const int kTxHashFieldNumber = 6;
  const ::std::string& txhash() const;
  void set_txhash(const ::std::string& value);
  #if LANG_CXX11
  void set_txhash(::std::string&& value);
  #endif
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  ::std::string* mutable_txhash();
  ::std::string* release_txhash();
  void set_allocated_txhash(::std::string* txhash);

  // int64 creditedTimestamp = 7;
  void clear_creditedtimestamp();
  static const int kCreditedTimestampFieldNumber = 7;
  ::google::protobuf::int64 creditedtimestamp() const;
  void set_creditedtimestamp(::google::protobuf::int64 value);

  // int64 createdTimestamp = 8;
  void clear_createdtimestamp();
  static const int kCreatedTimestampFieldNumber = 8;
  ::google::protobuf::int64 createdtimestamp() const;
  void set_createdtimestamp(::google::protobuf::int64 value);

  // .vega.Deposit.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::vega::Deposit_Status status() const;
  void set_status(::vega::Deposit_Status value);

  // @@protoc_insertion_point(class_scope:vega.Deposit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr partyid_;
  ::google::protobuf::internal::ArenaStringPtr asset_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::google::protobuf::internal::ArenaStringPtr txhash_;
  ::google::protobuf::int64 creditedtimestamp_;
  ::google::protobuf::int64 createdtimestamp_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class Withdrawal :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Withdrawal) */ {
 public:
  Withdrawal();
  virtual ~Withdrawal();

  Withdrawal(const Withdrawal& from);

  inline Withdrawal& operator=(const Withdrawal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Withdrawal(Withdrawal&& from) noexcept
    : Withdrawal() {
    *this = ::std::move(from);
  }

  inline Withdrawal& operator=(Withdrawal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Withdrawal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Withdrawal* internal_default_instance() {
    return reinterpret_cast<const Withdrawal*>(
               &_Withdrawal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(Withdrawal* other);
  friend void swap(Withdrawal& a, Withdrawal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Withdrawal* New() const final {
    return CreateMaybeMessage<Withdrawal>(nullptr);
  }

  Withdrawal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Withdrawal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Withdrawal& from);
  void MergeFrom(const Withdrawal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Withdrawal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Withdrawal_Status Status;
  static const Status WITHDRAWAL_STATUS_UNSPECIFIED =
    Withdrawal_Status_WITHDRAWAL_STATUS_UNSPECIFIED;
  static const Status WITHDRAWAL_STATUS_OPEN =
    Withdrawal_Status_WITHDRAWAL_STATUS_OPEN;
  static const Status WITHDRAWAL_STATUS_CANCELLED =
    Withdrawal_Status_WITHDRAWAL_STATUS_CANCELLED;
  static const Status WITHDRAWAL_STATUS_FINALIZED =
    Withdrawal_Status_WITHDRAWAL_STATUS_FINALIZED;
  static inline bool Status_IsValid(int value) {
    return Withdrawal_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Withdrawal_Status_Status_MIN;
  static const Status Status_MAX =
    Withdrawal_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Withdrawal_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Withdrawal_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Withdrawal_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Withdrawal_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string partyID = 2;
  void clear_partyid();
  static const int kPartyIDFieldNumber = 2;
  const ::std::string& partyid() const;
  void set_partyid(const ::std::string& value);
  #if LANG_CXX11
  void set_partyid(::std::string&& value);
  #endif
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  ::std::string* mutable_partyid();
  ::std::string* release_partyid();
  void set_allocated_partyid(::std::string* partyid);

  // string asset = 4;
  void clear_asset();
  static const int kAssetFieldNumber = 4;
  const ::std::string& asset() const;
  void set_asset(const ::std::string& value);
  #if LANG_CXX11
  void set_asset(::std::string&& value);
  #endif
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  ::std::string* mutable_asset();
  ::std::string* release_asset();
  void set_allocated_asset(::std::string* asset);

  // string ref = 6;
  void clear_ref();
  static const int kRefFieldNumber = 6;
  const ::std::string& ref() const;
  void set_ref(const ::std::string& value);
  #if LANG_CXX11
  void set_ref(::std::string&& value);
  #endif
  void set_ref(const char* value);
  void set_ref(const char* value, size_t size);
  ::std::string* mutable_ref();
  ::std::string* release_ref();
  void set_allocated_ref(::std::string* ref);

  // string txHash = 8;
  void clear_txhash();
  static const int kTxHashFieldNumber = 8;
  const ::std::string& txhash() const;
  void set_txhash(const ::std::string& value);
  #if LANG_CXX11
  void set_txhash(::std::string&& value);
  #endif
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  ::std::string* mutable_txhash();
  ::std::string* release_txhash();
  void set_allocated_txhash(::std::string* txhash);

  // .vega.WithdrawExt ext = 11;
  bool has_ext() const;
  void clear_ext();
  static const int kExtFieldNumber = 11;
  const ::vega::WithdrawExt& ext() const;
  ::vega::WithdrawExt* release_ext();
  ::vega::WithdrawExt* mutable_ext();
  void set_allocated_ext(::vega::WithdrawExt* ext);

  // uint64 amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // int64 expiry = 7;
  void clear_expiry();
  static const int kExpiryFieldNumber = 7;
  ::google::protobuf::int64 expiry() const;
  void set_expiry(::google::protobuf::int64 value);

  // int64 createdTimestamp = 9;
  void clear_createdtimestamp();
  static const int kCreatedTimestampFieldNumber = 9;
  ::google::protobuf::int64 createdtimestamp() const;
  void set_createdtimestamp(::google::protobuf::int64 value);

  // int64 withdrawnTimestamp = 10;
  void clear_withdrawntimestamp();
  static const int kWithdrawnTimestampFieldNumber = 10;
  ::google::protobuf::int64 withdrawntimestamp() const;
  void set_withdrawntimestamp(::google::protobuf::int64 value);

  // .vega.Withdrawal.Status status = 5;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::vega::Withdrawal_Status status() const;
  void set_status(::vega::Withdrawal_Status value);

  // @@protoc_insertion_point(class_scope:vega.Withdrawal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr partyid_;
  ::google::protobuf::internal::ArenaStringPtr asset_;
  ::google::protobuf::internal::ArenaStringPtr ref_;
  ::google::protobuf::internal::ArenaStringPtr txhash_;
  ::vega::WithdrawExt* ext_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::int64 expiry_;
  ::google::protobuf::int64 createdtimestamp_;
  ::google::protobuf::int64 withdrawntimestamp_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class WithdrawSubmission :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.WithdrawSubmission) */ {
 public:
  WithdrawSubmission();
  virtual ~WithdrawSubmission();

  WithdrawSubmission(const WithdrawSubmission& from);

  inline WithdrawSubmission& operator=(const WithdrawSubmission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WithdrawSubmission(WithdrawSubmission&& from) noexcept
    : WithdrawSubmission() {
    *this = ::std::move(from);
  }

  inline WithdrawSubmission& operator=(WithdrawSubmission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WithdrawSubmission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WithdrawSubmission* internal_default_instance() {
    return reinterpret_cast<const WithdrawSubmission*>(
               &_WithdrawSubmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(WithdrawSubmission* other);
  friend void swap(WithdrawSubmission& a, WithdrawSubmission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WithdrawSubmission* New() const final {
    return CreateMaybeMessage<WithdrawSubmission>(nullptr);
  }

  WithdrawSubmission* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawSubmission>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WithdrawSubmission& from);
  void MergeFrom(const WithdrawSubmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawSubmission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string partyID = 1;
  void clear_partyid();
  static const int kPartyIDFieldNumber = 1;
  const ::std::string& partyid() const;
  void set_partyid(const ::std::string& value);
  #if LANG_CXX11
  void set_partyid(::std::string&& value);
  #endif
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  ::std::string* mutable_partyid();
  ::std::string* release_partyid();
  void set_allocated_partyid(::std::string* partyid);

  // string asset = 3;
  void clear_asset();
  static const int kAssetFieldNumber = 3;
  const ::std::string& asset() const;
  void set_asset(const ::std::string& value);
  #if LANG_CXX11
  void set_asset(::std::string&& value);
  #endif
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  ::std::string* mutable_asset();
  ::std::string* release_asset();
  void set_allocated_asset(::std::string* asset);

  // .vega.WithdrawExt ext = 4;
  bool has_ext() const;
  void clear_ext();
  static const int kExtFieldNumber = 4;
  const ::vega::WithdrawExt& ext() const;
  ::vega::WithdrawExt* release_ext();
  ::vega::WithdrawExt* mutable_ext();
  void set_allocated_ext(::vega::WithdrawExt* ext);

  // uint64 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vega.WithdrawSubmission)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr partyid_;
  ::google::protobuf::internal::ArenaStringPtr asset_;
  ::vega::WithdrawExt* ext_;
  ::google::protobuf::uint64 amount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class WithdrawExt :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.WithdrawExt) */ {
 public:
  WithdrawExt();
  virtual ~WithdrawExt();

  WithdrawExt(const WithdrawExt& from);

  inline WithdrawExt& operator=(const WithdrawExt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WithdrawExt(WithdrawExt&& from) noexcept
    : WithdrawExt() {
    *this = ::std::move(from);
  }

  inline WithdrawExt& operator=(WithdrawExt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WithdrawExt& default_instance();

  enum ExtCase {
    kErc20 = 1,
    EXT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WithdrawExt* internal_default_instance() {
    return reinterpret_cast<const WithdrawExt*>(
               &_WithdrawExt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(WithdrawExt* other);
  friend void swap(WithdrawExt& a, WithdrawExt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WithdrawExt* New() const final {
    return CreateMaybeMessage<WithdrawExt>(nullptr);
  }

  WithdrawExt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawExt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WithdrawExt& from);
  void MergeFrom(const WithdrawExt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawExt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .vega.Erc20WithdrawExt erc20 = 1;
  bool has_erc20() const;
  void clear_erc20();
  static const int kErc20FieldNumber = 1;
  const ::vega::Erc20WithdrawExt& erc20() const;
  ::vega::Erc20WithdrawExt* release_erc20();
  ::vega::Erc20WithdrawExt* mutable_erc20();
  void set_allocated_erc20(::vega::Erc20WithdrawExt* erc20);

  void clear_ext();
  ExtCase ext_case() const;
  // @@protoc_insertion_point(class_scope:vega.WithdrawExt)
 private:
  class HasBitSetters;
  void set_has_erc20();

  inline bool has_ext() const;
  inline void clear_has_ext();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ExtUnion {
    ExtUnion() {}
    ::vega::Erc20WithdrawExt* erc20_;
  } ext_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class Erc20WithdrawExt :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Erc20WithdrawExt) */ {
 public:
  Erc20WithdrawExt();
  virtual ~Erc20WithdrawExt();

  Erc20WithdrawExt(const Erc20WithdrawExt& from);

  inline Erc20WithdrawExt& operator=(const Erc20WithdrawExt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Erc20WithdrawExt(Erc20WithdrawExt&& from) noexcept
    : Erc20WithdrawExt() {
    *this = ::std::move(from);
  }

  inline Erc20WithdrawExt& operator=(Erc20WithdrawExt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Erc20WithdrawExt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Erc20WithdrawExt* internal_default_instance() {
    return reinterpret_cast<const Erc20WithdrawExt*>(
               &_Erc20WithdrawExt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(Erc20WithdrawExt* other);
  friend void swap(Erc20WithdrawExt& a, Erc20WithdrawExt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Erc20WithdrawExt* New() const final {
    return CreateMaybeMessage<Erc20WithdrawExt>(nullptr);
  }

  Erc20WithdrawExt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Erc20WithdrawExt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Erc20WithdrawExt& from);
  void MergeFrom(const Erc20WithdrawExt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Erc20WithdrawExt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string receiverAddress = 1;
  void clear_receiveraddress();
  static const int kReceiverAddressFieldNumber = 1;
  const ::std::string& receiveraddress() const;
  void set_receiveraddress(const ::std::string& value);
  #if LANG_CXX11
  void set_receiveraddress(::std::string&& value);
  #endif
  void set_receiveraddress(const char* value);
  void set_receiveraddress(const char* value, size_t size);
  ::std::string* mutable_receiveraddress();
  ::std::string* release_receiveraddress();
  void set_allocated_receiveraddress(::std::string* receiveraddress);

  // @@protoc_insertion_point(class_scope:vega.Erc20WithdrawExt)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr receiveraddress_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class OrderAmendment :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.OrderAmendment) */ {
 public:
  OrderAmendment();
  virtual ~OrderAmendment();

  OrderAmendment(const OrderAmendment& from);

  inline OrderAmendment& operator=(const OrderAmendment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderAmendment(OrderAmendment&& from) noexcept
    : OrderAmendment() {
    *this = ::std::move(from);
  }

  inline OrderAmendment& operator=(OrderAmendment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OrderAmendment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderAmendment* internal_default_instance() {
    return reinterpret_cast<const OrderAmendment*>(
               &_OrderAmendment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(OrderAmendment* other);
  friend void swap(OrderAmendment& a, OrderAmendment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderAmendment* New() const final {
    return CreateMaybeMessage<OrderAmendment>(nullptr);
  }

  OrderAmendment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderAmendment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderAmendment& from);
  void MergeFrom(const OrderAmendment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderAmendment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string orderID = 1 [(.validator.field) = {
  void clear_orderid();
  static const int kOrderIDFieldNumber = 1;
  const ::std::string& orderid() const;
  void set_orderid(const ::std::string& value);
  #if LANG_CXX11
  void set_orderid(::std::string&& value);
  #endif
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  ::std::string* mutable_orderid();
  ::std::string* release_orderid();
  void set_allocated_orderid(::std::string* orderid);

  // string partyID = 2 [(.validator.field) = {
  void clear_partyid();
  static const int kPartyIDFieldNumber = 2;
  const ::std::string& partyid() const;
  void set_partyid(const ::std::string& value);
  #if LANG_CXX11
  void set_partyid(::std::string&& value);
  #endif
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  ::std::string* mutable_partyid();
  ::std::string* release_partyid();
  void set_allocated_partyid(::std::string* partyid);

  // string marketID = 3;
  void clear_marketid();
  static const int kMarketIDFieldNumber = 3;
  const ::std::string& marketid() const;
  void set_marketid(const ::std::string& value);
  #if LANG_CXX11
  void set_marketid(::std::string&& value);
  #endif
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  ::std::string* mutable_marketid();
  ::std::string* release_marketid();
  void set_allocated_marketid(::std::string* marketid);

  // .vega.Price price = 4;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  const ::vega::Price& price() const;
  ::vega::Price* release_price();
  ::vega::Price* mutable_price();
  void set_allocated_price(::vega::Price* price);

  // .vega.Timestamp expiresAt = 6;
  bool has_expiresat() const;
  void clear_expiresat();
  static const int kExpiresAtFieldNumber = 6;
  const ::vega::Timestamp& expiresat() const;
  ::vega::Timestamp* release_expiresat();
  ::vega::Timestamp* mutable_expiresat();
  void set_allocated_expiresat(::vega::Timestamp* expiresat);

  // int64 sizeDelta = 5;
  void clear_sizedelta();
  static const int kSizeDeltaFieldNumber = 5;
  ::google::protobuf::int64 sizedelta() const;
  void set_sizedelta(::google::protobuf::int64 value);

  // .vega.Order.TimeInForce timeInForce = 7;
  void clear_timeinforce();
  static const int kTimeInForceFieldNumber = 7;
  ::vega::Order_TimeInForce timeinforce() const;
  void set_timeinforce(::vega::Order_TimeInForce value);

  // @@protoc_insertion_point(class_scope:vega.OrderAmendment)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr orderid_;
  ::google::protobuf::internal::ArenaStringPtr partyid_;
  ::google::protobuf::internal::ArenaStringPtr marketid_;
  ::vega::Price* price_;
  ::vega::Timestamp* expiresat_;
  ::google::protobuf::int64 sizedelta_;
  int timeinforce_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class OrderSubmission :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.OrderSubmission) */ {
 public:
  OrderSubmission();
  virtual ~OrderSubmission();

  OrderSubmission(const OrderSubmission& from);

  inline OrderSubmission& operator=(const OrderSubmission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderSubmission(OrderSubmission&& from) noexcept
    : OrderSubmission() {
    *this = ::std::move(from);
  }

  inline OrderSubmission& operator=(OrderSubmission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OrderSubmission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderSubmission* internal_default_instance() {
    return reinterpret_cast<const OrderSubmission*>(
               &_OrderSubmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(OrderSubmission* other);
  friend void swap(OrderSubmission& a, OrderSubmission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderSubmission* New() const final {
    return CreateMaybeMessage<OrderSubmission>(nullptr);
  }

  OrderSubmission* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderSubmission>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderSubmission& from);
  void MergeFrom(const OrderSubmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderSubmission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1 [(.validator.field) = {
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string marketID = 2 [(.validator.field) = {
  void clear_marketid();
  static const int kMarketIDFieldNumber = 2;
  const ::std::string& marketid() const;
  void set_marketid(const ::std::string& value);
  #if LANG_CXX11
  void set_marketid(::std::string&& value);
  #endif
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  ::std::string* mutable_marketid();
  ::std::string* release_marketid();
  void set_allocated_marketid(::std::string* marketid);

  // string partyID = 3 [(.validator.field) = {
  void clear_partyid();
  static const int kPartyIDFieldNumber = 3;
  const ::std::string& partyid() const;
  void set_partyid(const ::std::string& value);
  #if LANG_CXX11
  void set_partyid(::std::string&& value);
  #endif
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  ::std::string* mutable_partyid();
  ::std::string* release_partyid();
  void set_allocated_partyid(::std::string* partyid);

  // string reference = 10;
  void clear_reference();
  static const int kReferenceFieldNumber = 10;
  const ::std::string& reference() const;
  void set_reference(const ::std::string& value);
  #if LANG_CXX11
  void set_reference(::std::string&& value);
  #endif
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  ::std::string* mutable_reference();
  ::std::string* release_reference();
  void set_allocated_reference(::std::string* reference);

  // uint64 price = 4;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  ::google::protobuf::uint64 price() const;
  void set_price(::google::protobuf::uint64 value);

  // uint64 size = 5 [(.validator.field) = {
  void clear_size();
  static const int kSizeFieldNumber = 5;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // .vega.Side side = 6 [(.validator.field) = {
  void clear_side();
  static const int kSideFieldNumber = 6;
  ::vega::Side side() const;
  void set_side(::vega::Side value);

  // .vega.Order.TimeInForce timeInForce = 7 [(.validator.field) = {
  void clear_timeinforce();
  static const int kTimeInForceFieldNumber = 7;
  ::vega::Order_TimeInForce timeinforce() const;
  void set_timeinforce(::vega::Order_TimeInForce value);

  // int64 expiresAt = 8;
  void clear_expiresat();
  static const int kExpiresAtFieldNumber = 8;
  ::google::protobuf::int64 expiresat() const;
  void set_expiresat(::google::protobuf::int64 value);

  // .vega.Order.Type type = 9 [(.validator.field) = {
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::vega::Order_Type type() const;
  void set_type(::vega::Order_Type value);

  // @@protoc_insertion_point(class_scope:vega.OrderSubmission)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr marketid_;
  ::google::protobuf::internal::ArenaStringPtr partyid_;
  ::google::protobuf::internal::ArenaStringPtr reference_;
  ::google::protobuf::uint64 price_;
  ::google::protobuf::uint64 size_;
  int side_;
  int timeinforce_;
  ::google::protobuf::int64 expiresat_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class OrderCancellation :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.OrderCancellation) */ {
 public:
  OrderCancellation();
  virtual ~OrderCancellation();

  OrderCancellation(const OrderCancellation& from);

  inline OrderCancellation& operator=(const OrderCancellation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderCancellation(OrderCancellation&& from) noexcept
    : OrderCancellation() {
    *this = ::std::move(from);
  }

  inline OrderCancellation& operator=(OrderCancellation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OrderCancellation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderCancellation* internal_default_instance() {
    return reinterpret_cast<const OrderCancellation*>(
               &_OrderCancellation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(OrderCancellation* other);
  friend void swap(OrderCancellation& a, OrderCancellation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderCancellation* New() const final {
    return CreateMaybeMessage<OrderCancellation>(nullptr);
  }

  OrderCancellation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderCancellation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderCancellation& from);
  void MergeFrom(const OrderCancellation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderCancellation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string orderID = 1;
  void clear_orderid();
  static const int kOrderIDFieldNumber = 1;
  const ::std::string& orderid() const;
  void set_orderid(const ::std::string& value);
  #if LANG_CXX11
  void set_orderid(::std::string&& value);
  #endif
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  ::std::string* mutable_orderid();
  ::std::string* release_orderid();
  void set_allocated_orderid(::std::string* orderid);

  // string marketID = 2;
  void clear_marketid();
  static const int kMarketIDFieldNumber = 2;
  const ::std::string& marketid() const;
  void set_marketid(const ::std::string& value);
  #if LANG_CXX11
  void set_marketid(::std::string&& value);
  #endif
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  ::std::string* mutable_marketid();
  ::std::string* release_marketid();
  void set_allocated_marketid(::std::string* marketid);

  // string partyID = 3 [(.validator.field) = {
  void clear_partyid();
  static const int kPartyIDFieldNumber = 3;
  const ::std::string& partyid() const;
  void set_partyid(const ::std::string& value);
  #if LANG_CXX11
  void set_partyid(::std::string&& value);
  #endif
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  ::std::string* mutable_partyid();
  ::std::string* release_partyid();
  void set_allocated_partyid(::std::string* partyid);

  // @@protoc_insertion_point(class_scope:vega.OrderCancellation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr orderid_;
  ::google::protobuf::internal::ArenaStringPtr marketid_;
  ::google::protobuf::internal::ArenaStringPtr partyid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class NodeRegistration :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.NodeRegistration) */ {
 public:
  NodeRegistration();
  virtual ~NodeRegistration();

  NodeRegistration(const NodeRegistration& from);

  inline NodeRegistration& operator=(const NodeRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeRegistration(NodeRegistration&& from) noexcept
    : NodeRegistration() {
    *this = ::std::move(from);
  }

  inline NodeRegistration& operator=(NodeRegistration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeRegistration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeRegistration* internal_default_instance() {
    return reinterpret_cast<const NodeRegistration*>(
               &_NodeRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(NodeRegistration* other);
  friend void swap(NodeRegistration& a, NodeRegistration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeRegistration* New() const final {
    return CreateMaybeMessage<NodeRegistration>(nullptr);
  }

  NodeRegistration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeRegistration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeRegistration& from);
  void MergeFrom(const NodeRegistration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeRegistration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pubKey = 1 [(.validator.field) = {
  void clear_pubkey();
  static const int kPubKeyFieldNumber = 1;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // bytes chainPubKey = 2 [(.validator.field) = {
  void clear_chainpubkey();
  static const int kChainPubKeyFieldNumber = 2;
  const ::std::string& chainpubkey() const;
  void set_chainpubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_chainpubkey(::std::string&& value);
  #endif
  void set_chainpubkey(const char* value);
  void set_chainpubkey(const void* value, size_t size);
  ::std::string* mutable_chainpubkey();
  ::std::string* release_chainpubkey();
  void set_allocated_chainpubkey(::std::string* chainpubkey);

  // @@protoc_insertion_point(class_scope:vega.NodeRegistration)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr chainpubkey_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class NodeVote :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.NodeVote) */ {
 public:
  NodeVote();
  virtual ~NodeVote();

  NodeVote(const NodeVote& from);

  inline NodeVote& operator=(const NodeVote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeVote(NodeVote&& from) noexcept
    : NodeVote() {
    *this = ::std::move(from);
  }

  inline NodeVote& operator=(NodeVote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeVote* internal_default_instance() {
    return reinterpret_cast<const NodeVote*>(
               &_NodeVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(NodeVote* other);
  friend void swap(NodeVote& a, NodeVote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeVote* New() const final {
    return CreateMaybeMessage<NodeVote>(nullptr);
  }

  NodeVote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeVote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeVote& from);
  void MergeFrom(const NodeVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeVote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pubKey = 1 [(.validator.field) = {
  void clear_pubkey();
  static const int kPubKeyFieldNumber = 1;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // string reference = 2 [(.validator.field) = {
  void clear_reference();
  static const int kReferenceFieldNumber = 2;
  const ::std::string& reference() const;
  void set_reference(const ::std::string& value);
  #if LANG_CXX11
  void set_reference(::std::string&& value);
  #endif
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  ::std::string* mutable_reference();
  ::std::string* release_reference();
  void set_allocated_reference(::std::string* reference);

  // @@protoc_insertion_point(class_scope:vega.NodeVote)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class Account :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Account) */ {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(Account&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(Account* other);
  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string owner = 2;
  void clear_owner();
  static const int kOwnerFieldNumber = 2;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_owner(::std::string&& value);
  #endif
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // string asset = 4;
  void clear_asset();
  static const int kAssetFieldNumber = 4;
  const ::std::string& asset() const;
  void set_asset(const ::std::string& value);
  #if LANG_CXX11
  void set_asset(::std::string&& value);
  #endif
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  ::std::string* mutable_asset();
  ::std::string* release_asset();
  void set_allocated_asset(::std::string* asset);

  // string marketID = 5;
  void clear_marketid();
  static const int kMarketIDFieldNumber = 5;
  const ::std::string& marketid() const;
  void set_marketid(const ::std::string& value);
  #if LANG_CXX11
  void set_marketid(::std::string&& value);
  #endif
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  ::std::string* mutable_marketid();
  ::std::string* release_marketid();
  void set_allocated_marketid(::std::string* marketid);

  // uint64 balance = 3;
  void clear_balance();
  static const int kBalanceFieldNumber = 3;
  ::google::protobuf::uint64 balance() const;
  void set_balance(::google::protobuf::uint64 value);

  // .vega.AccountType type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::vega::AccountType type() const;
  void set_type(::vega::AccountType value);

  // @@protoc_insertion_point(class_scope:vega.Account)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  ::google::protobuf::internal::ArenaStringPtr asset_;
  ::google::protobuf::internal::ArenaStringPtr marketid_;
  ::google::protobuf::uint64 balance_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class FinancialAmount :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.FinancialAmount) */ {
 public:
  FinancialAmount();
  virtual ~FinancialAmount();

  FinancialAmount(const FinancialAmount& from);

  inline FinancialAmount& operator=(const FinancialAmount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FinancialAmount(FinancialAmount&& from) noexcept
    : FinancialAmount() {
    *this = ::std::move(from);
  }

  inline FinancialAmount& operator=(FinancialAmount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FinancialAmount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinancialAmount* internal_default_instance() {
    return reinterpret_cast<const FinancialAmount*>(
               &_FinancialAmount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(FinancialAmount* other);
  friend void swap(FinancialAmount& a, FinancialAmount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FinancialAmount* New() const final {
    return CreateMaybeMessage<FinancialAmount>(nullptr);
  }

  FinancialAmount* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FinancialAmount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FinancialAmount& from);
  void MergeFrom(const FinancialAmount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinancialAmount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string asset = 2;
  void clear_asset();
  static const int kAssetFieldNumber = 2;
  const ::std::string& asset() const;
  void set_asset(const ::std::string& value);
  #if LANG_CXX11
  void set_asset(::std::string&& value);
  #endif
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  ::std::string* mutable_asset();
  ::std::string* release_asset();
  void set_allocated_asset(::std::string* asset);

  // int64 amount = 1;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:vega.FinancialAmount)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr asset_;
  ::google::protobuf::int64 amount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class Transfer :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Transfer) */ {
 public:
  Transfer();
  virtual ~Transfer();

  Transfer(const Transfer& from);

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(Transfer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Transfer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(Transfer* other);
  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transfer* New() const final {
    return CreateMaybeMessage<Transfer>(nullptr);
  }

  Transfer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Transfer& from);
  void MergeFrom(const Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string owner = 1;
  void clear_owner();
  static const int kOwnerFieldNumber = 1;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_owner(::std::string&& value);
  #endif
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // .vega.FinancialAmount amount = 2;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  const ::vega::FinancialAmount& amount() const;
  ::vega::FinancialAmount* release_amount();
  ::vega::FinancialAmount* mutable_amount();
  void set_allocated_amount(::vega::FinancialAmount* amount);

  // int64 minAmount = 4;
  void clear_minamount();
  static const int kMinAmountFieldNumber = 4;
  ::google::protobuf::int64 minamount() const;
  void set_minamount(::google::protobuf::int64 value);

  // .vega.TransferType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::vega::TransferType type() const;
  void set_type(::vega::TransferType value);

  // @@protoc_insertion_point(class_scope:vega.Transfer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  ::vega::FinancialAmount* amount_;
  ::google::protobuf::int64 minamount_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class TransferRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.TransferRequest) */ {
 public:
  TransferRequest();
  virtual ~TransferRequest();

  TransferRequest(const TransferRequest& from);

  inline TransferRequest& operator=(const TransferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferRequest(TransferRequest&& from) noexcept
    : TransferRequest() {
    *this = ::std::move(from);
  }

  inline TransferRequest& operator=(TransferRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TransferRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferRequest* internal_default_instance() {
    return reinterpret_cast<const TransferRequest*>(
               &_TransferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(TransferRequest* other);
  friend void swap(TransferRequest& a, TransferRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferRequest* New() const final {
    return CreateMaybeMessage<TransferRequest>(nullptr);
  }

  TransferRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferRequest& from);
  void MergeFrom(const TransferRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vega.Account fromAccount = 1;
  int fromaccount_size() const;
  void clear_fromaccount();
  static const int kFromAccountFieldNumber = 1;
  ::vega::Account* mutable_fromaccount(int index);
  ::google::protobuf::RepeatedPtrField< ::vega::Account >*
      mutable_fromaccount();
  const ::vega::Account& fromaccount(int index) const;
  ::vega::Account* add_fromaccount();
  const ::google::protobuf::RepeatedPtrField< ::vega::Account >&
      fromaccount() const;

  // repeated .vega.Account toAccount = 2;
  int toaccount_size() const;
  void clear_toaccount();
  static const int kToAccountFieldNumber = 2;
  ::vega::Account* mutable_toaccount(int index);
  ::google::protobuf::RepeatedPtrField< ::vega::Account >*
      mutable_toaccount();
  const ::vega::Account& toaccount(int index) const;
  ::vega::Account* add_toaccount();
  const ::google::protobuf::RepeatedPtrField< ::vega::Account >&
      toaccount() const;

  // string asset = 5;
  void clear_asset();
  static const int kAssetFieldNumber = 5;
  const ::std::string& asset() const;
  void set_asset(const ::std::string& value);
  #if LANG_CXX11
  void set_asset(::std::string&& value);
  #endif
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  ::std::string* mutable_asset();
  ::std::string* release_asset();
  void set_allocated_asset(::std::string* asset);

  // string reference = 6;
  void clear_reference();
  static const int kReferenceFieldNumber = 6;
  const ::std::string& reference() const;
  void set_reference(const ::std::string& value);
  #if LANG_CXX11
  void set_reference(::std::string&& value);
  #endif
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  ::std::string* mutable_reference();
  ::std::string* release_reference();
  void set_allocated_reference(::std::string* reference);

  // uint64 amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // uint64 minAmount = 4;
  void clear_minamount();
  static const int kMinAmountFieldNumber = 4;
  ::google::protobuf::uint64 minamount() const;
  void set_minamount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vega.TransferRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::vega::Account > fromaccount_;
  ::google::protobuf::RepeatedPtrField< ::vega::Account > toaccount_;
  ::google::protobuf::internal::ArenaStringPtr asset_;
  ::google::protobuf::internal::ArenaStringPtr reference_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 minamount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class LedgerEntry :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.LedgerEntry) */ {
 public:
  LedgerEntry();
  virtual ~LedgerEntry();

  LedgerEntry(const LedgerEntry& from);

  inline LedgerEntry& operator=(const LedgerEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LedgerEntry(LedgerEntry&& from) noexcept
    : LedgerEntry() {
    *this = ::std::move(from);
  }

  inline LedgerEntry& operator=(LedgerEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LedgerEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LedgerEntry* internal_default_instance() {
    return reinterpret_cast<const LedgerEntry*>(
               &_LedgerEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(LedgerEntry* other);
  friend void swap(LedgerEntry& a, LedgerEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LedgerEntry* New() const final {
    return CreateMaybeMessage<LedgerEntry>(nullptr);
  }

  LedgerEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LedgerEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LedgerEntry& from);
  void MergeFrom(const LedgerEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LedgerEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fromAccount = 1;
  void clear_fromaccount();
  static const int kFromAccountFieldNumber = 1;
  const ::std::string& fromaccount() const;
  void set_fromaccount(const ::std::string& value);
  #if LANG_CXX11
  void set_fromaccount(::std::string&& value);
  #endif
  void set_fromaccount(const char* value);
  void set_fromaccount(const char* value, size_t size);
  ::std::string* mutable_fromaccount();
  ::std::string* release_fromaccount();
  void set_allocated_fromaccount(::std::string* fromaccount);

  // string toAccount = 2;
  void clear_toaccount();
  static const int kToAccountFieldNumber = 2;
  const ::std::string& toaccount() const;
  void set_toaccount(const ::std::string& value);
  #if LANG_CXX11
  void set_toaccount(::std::string&& value);
  #endif
  void set_toaccount(const char* value);
  void set_toaccount(const char* value, size_t size);
  ::std::string* mutable_toaccount();
  ::std::string* release_toaccount();
  void set_allocated_toaccount(::std::string* toaccount);

  // string reference = 4;
  void clear_reference();
  static const int kReferenceFieldNumber = 4;
  const ::std::string& reference() const;
  void set_reference(const ::std::string& value);
  #if LANG_CXX11
  void set_reference(::std::string&& value);
  #endif
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  ::std::string* mutable_reference();
  ::std::string* release_reference();
  void set_allocated_reference(::std::string* reference);

  // string type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // uint64 amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // int64 timestamp = 6;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:vega.LedgerEntry)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fromaccount_;
  ::google::protobuf::internal::ArenaStringPtr toaccount_;
  ::google::protobuf::internal::ArenaStringPtr reference_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class TransferBalance :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.TransferBalance) */ {
 public:
  TransferBalance();
  virtual ~TransferBalance();

  TransferBalance(const TransferBalance& from);

  inline TransferBalance& operator=(const TransferBalance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferBalance(TransferBalance&& from) noexcept
    : TransferBalance() {
    *this = ::std::move(from);
  }

  inline TransferBalance& operator=(TransferBalance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TransferBalance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferBalance* internal_default_instance() {
    return reinterpret_cast<const TransferBalance*>(
               &_TransferBalance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(TransferBalance* other);
  friend void swap(TransferBalance& a, TransferBalance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferBalance* New() const final {
    return CreateMaybeMessage<TransferBalance>(nullptr);
  }

  TransferBalance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferBalance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferBalance& from);
  void MergeFrom(const TransferBalance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferBalance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .vega.Account account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::vega::Account& account() const;
  ::vega::Account* release_account();
  ::vega::Account* mutable_account();
  void set_allocated_account(::vega::Account* account);

  // uint64 balance = 2;
  void clear_balance();
  static const int kBalanceFieldNumber = 2;
  ::google::protobuf::uint64 balance() const;
  void set_balance(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vega.TransferBalance)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::vega::Account* account_;
  ::google::protobuf::uint64 balance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class TransferResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.TransferResponse) */ {
 public:
  TransferResponse();
  virtual ~TransferResponse();

  TransferResponse(const TransferResponse& from);

  inline TransferResponse& operator=(const TransferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferResponse(TransferResponse&& from) noexcept
    : TransferResponse() {
    *this = ::std::move(from);
  }

  inline TransferResponse& operator=(TransferResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TransferResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferResponse* internal_default_instance() {
    return reinterpret_cast<const TransferResponse*>(
               &_TransferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(TransferResponse* other);
  friend void swap(TransferResponse& a, TransferResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferResponse* New() const final {
    return CreateMaybeMessage<TransferResponse>(nullptr);
  }

  TransferResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferResponse& from);
  void MergeFrom(const TransferResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vega.LedgerEntry transfers = 1;
  int transfers_size() const;
  void clear_transfers();
  static const int kTransfersFieldNumber = 1;
  ::vega::LedgerEntry* mutable_transfers(int index);
  ::google::protobuf::RepeatedPtrField< ::vega::LedgerEntry >*
      mutable_transfers();
  const ::vega::LedgerEntry& transfers(int index) const;
  ::vega::LedgerEntry* add_transfers();
  const ::google::protobuf::RepeatedPtrField< ::vega::LedgerEntry >&
      transfers() const;

  // repeated .vega.TransferBalance balances = 2;
  int balances_size() const;
  void clear_balances();
  static const int kBalancesFieldNumber = 2;
  ::vega::TransferBalance* mutable_balances(int index);
  ::google::protobuf::RepeatedPtrField< ::vega::TransferBalance >*
      mutable_balances();
  const ::vega::TransferBalance& balances(int index) const;
  ::vega::TransferBalance* add_balances();
  const ::google::protobuf::RepeatedPtrField< ::vega::TransferBalance >&
      balances() const;

  // @@protoc_insertion_point(class_scope:vega.TransferResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::vega::LedgerEntry > transfers_;
  ::google::protobuf::RepeatedPtrField< ::vega::TransferBalance > balances_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class MarginLevels :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.MarginLevels) */ {
 public:
  MarginLevels();
  virtual ~MarginLevels();

  MarginLevels(const MarginLevels& from);

  inline MarginLevels& operator=(const MarginLevels& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarginLevels(MarginLevels&& from) noexcept
    : MarginLevels() {
    *this = ::std::move(from);
  }

  inline MarginLevels& operator=(MarginLevels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MarginLevels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarginLevels* internal_default_instance() {
    return reinterpret_cast<const MarginLevels*>(
               &_MarginLevels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(MarginLevels* other);
  friend void swap(MarginLevels& a, MarginLevels& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarginLevels* New() const final {
    return CreateMaybeMessage<MarginLevels>(nullptr);
  }

  MarginLevels* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MarginLevels>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MarginLevels& from);
  void MergeFrom(const MarginLevels& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarginLevels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string partyID = 5;
  void clear_partyid();
  static const int kPartyIDFieldNumber = 5;
  const ::std::string& partyid() const;
  void set_partyid(const ::std::string& value);
  #if LANG_CXX11
  void set_partyid(::std::string&& value);
  #endif
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  ::std::string* mutable_partyid();
  ::std::string* release_partyid();
  void set_allocated_partyid(::std::string* partyid);

  // string marketID = 6;
  void clear_marketid();
  static const int kMarketIDFieldNumber = 6;
  const ::std::string& marketid() const;
  void set_marketid(const ::std::string& value);
  #if LANG_CXX11
  void set_marketid(::std::string&& value);
  #endif
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  ::std::string* mutable_marketid();
  ::std::string* release_marketid();
  void set_allocated_marketid(::std::string* marketid);

  // string asset = 7;
  void clear_asset();
  static const int kAssetFieldNumber = 7;
  const ::std::string& asset() const;
  void set_asset(const ::std::string& value);
  #if LANG_CXX11
  void set_asset(::std::string&& value);
  #endif
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  ::std::string* mutable_asset();
  ::std::string* release_asset();
  void set_allocated_asset(::std::string* asset);

  // uint64 maintenanceMargin = 1;
  void clear_maintenancemargin();
  static const int kMaintenanceMarginFieldNumber = 1;
  ::google::protobuf::uint64 maintenancemargin() const;
  void set_maintenancemargin(::google::protobuf::uint64 value);

  // uint64 searchLevel = 2;
  void clear_searchlevel();
  static const int kSearchLevelFieldNumber = 2;
  ::google::protobuf::uint64 searchlevel() const;
  void set_searchlevel(::google::protobuf::uint64 value);

  // uint64 initialMargin = 3;
  void clear_initialmargin();
  static const int kInitialMarginFieldNumber = 3;
  ::google::protobuf::uint64 initialmargin() const;
  void set_initialmargin(::google::protobuf::uint64 value);

  // uint64 collateralReleaseLevel = 4;
  void clear_collateralreleaselevel();
  static const int kCollateralReleaseLevelFieldNumber = 4;
  ::google::protobuf::uint64 collateralreleaselevel() const;
  void set_collateralreleaselevel(::google::protobuf::uint64 value);

  // int64 timestamp = 8;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 8;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:vega.MarginLevels)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr partyid_;
  ::google::protobuf::internal::ArenaStringPtr marketid_;
  ::google::protobuf::internal::ArenaStringPtr asset_;
  ::google::protobuf::uint64 maintenancemargin_;
  ::google::protobuf::uint64 searchlevel_;
  ::google::protobuf::uint64 initialmargin_;
  ::google::protobuf::uint64 collateralreleaselevel_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class MarketData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.MarketData) */ {
 public:
  MarketData();
  virtual ~MarketData();

  MarketData(const MarketData& from);

  inline MarketData& operator=(const MarketData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarketData(MarketData&& from) noexcept
    : MarketData() {
    *this = ::std::move(from);
  }

  inline MarketData& operator=(MarketData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MarketData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketData* internal_default_instance() {
    return reinterpret_cast<const MarketData*>(
               &_MarketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(MarketData* other);
  friend void swap(MarketData& a, MarketData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarketData* New() const final {
    return CreateMaybeMessage<MarketData>(nullptr);
  }

  MarketData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MarketData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MarketData& from);
  void MergeFrom(const MarketData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string market = 7;
  void clear_market();
  static const int kMarketFieldNumber = 7;
  const ::std::string& market() const;
  void set_market(const ::std::string& value);
  #if LANG_CXX11
  void set_market(::std::string&& value);
  #endif
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  ::std::string* mutable_market();
  ::std::string* release_market();
  void set_allocated_market(::std::string* market);

  // uint64 markPrice = 1;
  void clear_markprice();
  static const int kMarkPriceFieldNumber = 1;
  ::google::protobuf::uint64 markprice() const;
  void set_markprice(::google::protobuf::uint64 value);

  // uint64 bestBidPrice = 2;
  void clear_bestbidprice();
  static const int kBestBidPriceFieldNumber = 2;
  ::google::protobuf::uint64 bestbidprice() const;
  void set_bestbidprice(::google::protobuf::uint64 value);

  // uint64 bestBidVolume = 3;
  void clear_bestbidvolume();
  static const int kBestBidVolumeFieldNumber = 3;
  ::google::protobuf::uint64 bestbidvolume() const;
  void set_bestbidvolume(::google::protobuf::uint64 value);

  // uint64 bestOfferPrice = 4;
  void clear_bestofferprice();
  static const int kBestOfferPriceFieldNumber = 4;
  ::google::protobuf::uint64 bestofferprice() const;
  void set_bestofferprice(::google::protobuf::uint64 value);

  // uint64 bestOfferVolume = 5;
  void clear_bestoffervolume();
  static const int kBestOfferVolumeFieldNumber = 5;
  ::google::protobuf::uint64 bestoffervolume() const;
  void set_bestoffervolume(::google::protobuf::uint64 value);

  // uint64 midPrice = 6;
  void clear_midprice();
  static const int kMidPriceFieldNumber = 6;
  ::google::protobuf::uint64 midprice() const;
  void set_midprice(::google::protobuf::uint64 value);

  // int64 timestamp = 8;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 8;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // uint64 openInterest = 9;
  void clear_openinterest();
  static const int kOpenInterestFieldNumber = 9;
  ::google::protobuf::uint64 openinterest() const;
  void set_openinterest(::google::protobuf::uint64 value);

  // int64 auctionEnd = 10;
  void clear_auctionend();
  static const int kAuctionEndFieldNumber = 10;
  ::google::protobuf::int64 auctionend() const;
  void set_auctionend(::google::protobuf::int64 value);

  // int64 auctionStart = 11;
  void clear_auctionstart();
  static const int kAuctionStartFieldNumber = 11;
  ::google::protobuf::int64 auctionstart() const;
  void set_auctionstart(::google::protobuf::int64 value);

  // uint64 indicativePrice = 12;
  void clear_indicativeprice();
  static const int kIndicativePriceFieldNumber = 12;
  ::google::protobuf::uint64 indicativeprice() const;
  void set_indicativeprice(::google::protobuf::uint64 value);

  // uint64 indicativeVolume = 13;
  void clear_indicativevolume();
  static const int kIndicativeVolumeFieldNumber = 13;
  ::google::protobuf::uint64 indicativevolume() const;
  void set_indicativevolume(::google::protobuf::uint64 value);

  // .vega.MarketState marketState = 14;
  void clear_marketstate();
  static const int kMarketStateFieldNumber = 14;
  ::vega::MarketState marketstate() const;
  void set_marketstate(::vega::MarketState value);

  // @@protoc_insertion_point(class_scope:vega.MarketData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr market_;
  ::google::protobuf::uint64 markprice_;
  ::google::protobuf::uint64 bestbidprice_;
  ::google::protobuf::uint64 bestbidvolume_;
  ::google::protobuf::uint64 bestofferprice_;
  ::google::protobuf::uint64 bestoffervolume_;
  ::google::protobuf::uint64 midprice_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::uint64 openinterest_;
  ::google::protobuf::int64 auctionend_;
  ::google::protobuf::int64 auctionstart_;
  ::google::protobuf::uint64 indicativeprice_;
  ::google::protobuf::uint64 indicativevolume_;
  int marketstate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class ErrorDetail :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.ErrorDetail) */ {
 public:
  ErrorDetail();
  virtual ~ErrorDetail();

  ErrorDetail(const ErrorDetail& from);

  inline ErrorDetail& operator=(const ErrorDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorDetail(ErrorDetail&& from) noexcept
    : ErrorDetail() {
    *this = ::std::move(from);
  }

  inline ErrorDetail& operator=(ErrorDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ErrorDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorDetail* internal_default_instance() {
    return reinterpret_cast<const ErrorDetail*>(
               &_ErrorDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(ErrorDetail* other);
  friend void swap(ErrorDetail& a, ErrorDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorDetail* New() const final {
    return CreateMaybeMessage<ErrorDetail>(nullptr);
  }

  ErrorDetail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ErrorDetail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ErrorDetail& from);
  void MergeFrom(const ErrorDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string inner = 3;
  void clear_inner();
  static const int kInnerFieldNumber = 3;
  const ::std::string& inner() const;
  void set_inner(const ::std::string& value);
  #if LANG_CXX11
  void set_inner(::std::string&& value);
  #endif
  void set_inner(const char* value);
  void set_inner(const char* value, size_t size);
  ::std::string* mutable_inner();
  ::std::string* release_inner();
  void set_allocated_inner(::std::string* inner);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vega.ErrorDetail)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr inner_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class Transaction :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Transaction& default_instance();

  enum FromCase {
    kAddress = 1001,
    kPubKey = 1002,
    FROM_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(Transaction* other);
  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes inputData = 1;
  void clear_inputdata();
  static const int kInputDataFieldNumber = 1;
  const ::std::string& inputdata() const;
  void set_inputdata(const ::std::string& value);
  #if LANG_CXX11
  void set_inputdata(::std::string&& value);
  #endif
  void set_inputdata(const char* value);
  void set_inputdata(const void* value, size_t size);
  ::std::string* mutable_inputdata();
  ::std::string* release_inputdata();
  void set_allocated_inputdata(::std::string* inputdata);

  // uint64 nonce = 2;
  void clear_nonce();
  static const int kNonceFieldNumber = 2;
  ::google::protobuf::uint64 nonce() const;
  void set_nonce(::google::protobuf::uint64 value);

  // bytes address = 1001;
  private:
  bool has_address() const;
  public:
  void clear_address();
  static const int kAddressFieldNumber = 1001;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // bytes pubKey = 1002;
  private:
  bool has_pubkey() const;
  public:
  void clear_pubkey();
  static const int kPubKeyFieldNumber = 1002;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  void clear_from();
  FromCase from_case() const;
  // @@protoc_insertion_point(class_scope:vega.Transaction)
 private:
  class HasBitSetters;
  void set_has_address();
  void set_has_pubkey();

  inline bool has_from() const;
  inline void clear_has_from();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inputdata_;
  ::google::protobuf::uint64 nonce_;
  union FromUnion {
    FromUnion() {}
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::ArenaStringPtr pubkey_;
  } from_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class Signature :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.Signature) */ {
 public:
  Signature();
  virtual ~Signature();

  Signature(const Signature& from);

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(Signature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Signature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(Signature* other);
  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Signature* New() const final {
    return CreateMaybeMessage<Signature>(nullptr);
  }

  Signature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes sig = 1;
  void clear_sig();
  static const int kSigFieldNumber = 1;
  const ::std::string& sig() const;
  void set_sig(const ::std::string& value);
  #if LANG_CXX11
  void set_sig(::std::string&& value);
  #endif
  void set_sig(const char* value);
  void set_sig(const void* value, size_t size);
  ::std::string* mutable_sig();
  ::std::string* release_sig();
  void set_allocated_sig(::std::string* sig);

  // string algo = 2;
  void clear_algo();
  static const int kAlgoFieldNumber = 2;
  const ::std::string& algo() const;
  void set_algo(const ::std::string& value);
  #if LANG_CXX11
  void set_algo(::std::string&& value);
  #endif
  void set_algo(const char* value);
  void set_algo(const char* value, size_t size);
  ::std::string* mutable_algo();
  ::std::string* release_algo();
  void set_allocated_algo(::std::string* algo);

  // uint64 version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vega.Signature)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sig_;
  ::google::protobuf::internal::ArenaStringPtr algo_;
  ::google::protobuf::uint64 version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class SignedBundle :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.SignedBundle) */ {
 public:
  SignedBundle();
  virtual ~SignedBundle();

  SignedBundle(const SignedBundle& from);

  inline SignedBundle& operator=(const SignedBundle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignedBundle(SignedBundle&& from) noexcept
    : SignedBundle() {
    *this = ::std::move(from);
  }

  inline SignedBundle& operator=(SignedBundle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SignedBundle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignedBundle* internal_default_instance() {
    return reinterpret_cast<const SignedBundle*>(
               &_SignedBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(SignedBundle* other);
  friend void swap(SignedBundle& a, SignedBundle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignedBundle* New() const final {
    return CreateMaybeMessage<SignedBundle>(nullptr);
  }

  SignedBundle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignedBundle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignedBundle& from);
  void MergeFrom(const SignedBundle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignedBundle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes tx = 1;
  void clear_tx();
  static const int kTxFieldNumber = 1;
  const ::std::string& tx() const;
  void set_tx(const ::std::string& value);
  #if LANG_CXX11
  void set_tx(::std::string&& value);
  #endif
  void set_tx(const char* value);
  void set_tx(const void* value, size_t size);
  ::std::string* mutable_tx();
  ::std::string* release_tx();
  void set_allocated_tx(::std::string* tx);

  // .vega.Signature sig = 2;
  bool has_sig() const;
  void clear_sig();
  static const int kSigFieldNumber = 2;
  const ::vega::Signature& sig() const;
  ::vega::Signature* release_sig();
  ::vega::Signature* mutable_sig();
  void set_allocated_sig(::vega::Signature* sig);

  // @@protoc_insertion_point(class_scope:vega.SignedBundle)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tx_;
  ::vega::Signature* sig_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// -------------------------------------------------------------------

class NodeSignature :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vega.NodeSignature) */ {
 public:
  NodeSignature();
  virtual ~NodeSignature();

  NodeSignature(const NodeSignature& from);

  inline NodeSignature& operator=(const NodeSignature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeSignature(NodeSignature&& from) noexcept
    : NodeSignature() {
    *this = ::std::move(from);
  }

  inline NodeSignature& operator=(NodeSignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeSignature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeSignature* internal_default_instance() {
    return reinterpret_cast<const NodeSignature*>(
               &_NodeSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(NodeSignature* other);
  friend void swap(NodeSignature& a, NodeSignature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeSignature* New() const final {
    return CreateMaybeMessage<NodeSignature>(nullptr);
  }

  NodeSignature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeSignature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeSignature& from);
  void MergeFrom(const NodeSignature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeSignature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // bytes sig = 2;
  void clear_sig();
  static const int kSigFieldNumber = 2;
  const ::std::string& sig() const;
  void set_sig(const ::std::string& value);
  #if LANG_CXX11
  void set_sig(::std::string&& value);
  #endif
  void set_sig(const char* value);
  void set_sig(const void* value, size_t size);
  ::std::string* mutable_sig();
  ::std::string* release_sig();
  void set_allocated_sig(::std::string* sig);

  // .vega.NodeSignatureKind kind = 3;
  void clear_kind();
  static const int kKindFieldNumber = 3;
  ::vega::NodeSignatureKind kind() const;
  void set_kind(::vega::NodeSignatureKind value);

  // @@protoc_insertion_point(class_scope:vega.NodeSignature)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr sig_;
  int kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fvega_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Price

// uint64 value = 1;
inline void Price::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Price::value() const {
  // @@protoc_insertion_point(field_get:vega.Price.value)
  return value_;
}
inline void Price::set_value(::google::protobuf::uint64 value) {

  value_ = value;
  // @@protoc_insertion_point(field_set:vega.Price.value)
}

// -------------------------------------------------------------------

// Timestamp

// int64 value = 1;
inline void Timestamp::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Timestamp::value() const {
  // @@protoc_insertion_point(field_get:vega.Timestamp.value)
  return value_;
}
inline void Timestamp::set_value(::google::protobuf::int64 value) {

  value_ = value;
  // @@protoc_insertion_point(field_set:vega.Timestamp.value)
}

// -------------------------------------------------------------------

// Party

// string id = 1 [(.validator.field) = {
inline void Party::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Party::id() const {
  // @@protoc_insertion_point(field_get:vega.Party.id)
  return id_.GetNoArena();
}
inline void Party::set_id(const ::std::string& value) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Party.id)
}
#if LANG_CXX11
inline void Party::set_id(::std::string&& value) {

  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Party.id)
}
#endif
inline void Party::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Party.id)
}
inline void Party::set_id(const char* value, size_t size) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Party.id)
}
inline ::std::string* Party::mutable_id() {

  // @@protoc_insertion_point(field_mutable:vega.Party.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Party::release_id() {
  // @@protoc_insertion_point(field_release:vega.Party.id)

  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Party::set_allocated_id(::std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:vega.Party.id)
}

// -------------------------------------------------------------------

// RiskFactor

// string market = 1;
inline void RiskFactor::clear_market() {
  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RiskFactor::market() const {
  // @@protoc_insertion_point(field_get:vega.RiskFactor.market)
  return market_.GetNoArena();
}
inline void RiskFactor::set_market(const ::std::string& value) {

  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.RiskFactor.market)
}
#if LANG_CXX11
inline void RiskFactor::set_market(::std::string&& value) {

  market_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.RiskFactor.market)
}
#endif
inline void RiskFactor::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.RiskFactor.market)
}
inline void RiskFactor::set_market(const char* value, size_t size) {

  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.RiskFactor.market)
}
inline ::std::string* RiskFactor::mutable_market() {

  // @@protoc_insertion_point(field_mutable:vega.RiskFactor.market)
  return market_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RiskFactor::release_market() {
  // @@protoc_insertion_point(field_release:vega.RiskFactor.market)

  return market_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RiskFactor::set_allocated_market(::std::string* market) {
  if (market != nullptr) {

  } else {

  }
  market_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:vega.RiskFactor.market)
}

// double short = 2;
inline void RiskFactor::clear_short_() {
  short__ = 0;
}
inline double RiskFactor::short_() const {
  // @@protoc_insertion_point(field_get:vega.RiskFactor.short)
  return short__;
}
inline void RiskFactor::set_short_(double value) {

  short__ = value;
  // @@protoc_insertion_point(field_set:vega.RiskFactor.short)
}

// double long = 3;
inline void RiskFactor::clear_long_() {
  long__ = 0;
}
inline double RiskFactor::long_() const {
  // @@protoc_insertion_point(field_get:vega.RiskFactor.long)
  return long__;
}
inline void RiskFactor::set_long_(double value) {

  long__ = value;
  // @@protoc_insertion_point(field_set:vega.RiskFactor.long)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RiskResult

// int64 updatedTimestamp = 1;
inline void RiskResult::clear_updatedtimestamp() {
  updatedtimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 RiskResult::updatedtimestamp() const {
  // @@protoc_insertion_point(field_get:vega.RiskResult.updatedTimestamp)
  return updatedtimestamp_;
}
inline void RiskResult::set_updatedtimestamp(::google::protobuf::int64 value) {

  updatedtimestamp_ = value;
  // @@protoc_insertion_point(field_set:vega.RiskResult.updatedTimestamp)
}

// map<string, .vega.RiskFactor> riskFactors = 2;
inline int RiskResult::riskfactors_size() const {
  return riskfactors_.size();
}
inline void RiskResult::clear_riskfactors() {
  riskfactors_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >&
RiskResult::riskfactors() const {
  // @@protoc_insertion_point(field_map:vega.RiskResult.riskFactors)
  return riskfactors_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >*
RiskResult::mutable_riskfactors() {
  // @@protoc_insertion_point(field_mutable_map:vega.RiskResult.riskFactors)
  return riskfactors_.MutableMap();
}

// int64 nextUpdateTimestamp = 3;
inline void RiskResult::clear_nextupdatetimestamp() {
  nextupdatetimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 RiskResult::nextupdatetimestamp() const {
  // @@protoc_insertion_point(field_get:vega.RiskResult.nextUpdateTimestamp)
  return nextupdatetimestamp_;
}
inline void RiskResult::set_nextupdatetimestamp(::google::protobuf::int64 value) {

  nextupdatetimestamp_ = value;
  // @@protoc_insertion_point(field_set:vega.RiskResult.nextUpdateTimestamp)
}

// map<string, .vega.RiskFactor> predictedNextRiskFactors = 4;
inline int RiskResult::predictednextriskfactors_size() const {
  return predictednextriskfactors_.size();
}
inline void RiskResult::clear_predictednextriskfactors() {
  predictednextriskfactors_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >&
RiskResult::predictednextriskfactors() const {
  // @@protoc_insertion_point(field_map:vega.RiskResult.predictedNextRiskFactors)
  return predictednextriskfactors_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >*
RiskResult::mutable_predictednextriskfactors() {
  // @@protoc_insertion_point(field_mutable_map:vega.RiskResult.predictedNextRiskFactors)
  return predictednextriskfactors_.MutableMap();
}

// -------------------------------------------------------------------

// Order

// string id = 1;
inline void Order::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::id() const {
  // @@protoc_insertion_point(field_get:vega.Order.id)
  return id_.GetNoArena();
}
inline void Order::set_id(const ::std::string& value) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Order.id)
}
#if LANG_CXX11
inline void Order::set_id(::std::string&& value) {

  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Order.id)
}
#endif
inline void Order::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Order.id)
}
inline void Order::set_id(const char* value, size_t size) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Order.id)
}
inline ::std::string* Order::mutable_id() {

  // @@protoc_insertion_point(field_mutable:vega.Order.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_id() {
  // @@protoc_insertion_point(field_release:vega.Order.id)

  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_id(::std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:vega.Order.id)
}

// string marketID = 2;
inline void Order::clear_marketid() {
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::marketid() const {
  // @@protoc_insertion_point(field_get:vega.Order.marketID)
  return marketid_.GetNoArena();
}
inline void Order::set_marketid(const ::std::string& value) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Order.marketID)
}
#if LANG_CXX11
inline void Order::set_marketid(::std::string&& value) {

  marketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Order.marketID)
}
#endif
inline void Order::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Order.marketID)
}
inline void Order::set_marketid(const char* value, size_t size) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Order.marketID)
}
inline ::std::string* Order::mutable_marketid() {

  // @@protoc_insertion_point(field_mutable:vega.Order.marketID)
  return marketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.Order.marketID)

  return marketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_marketid(::std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketid);
  // @@protoc_insertion_point(field_set_allocated:vega.Order.marketID)
}

// string partyID = 3;
inline void Order::clear_partyid() {
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::partyid() const {
  // @@protoc_insertion_point(field_get:vega.Order.partyID)
  return partyid_.GetNoArena();
}
inline void Order::set_partyid(const ::std::string& value) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Order.partyID)
}
#if LANG_CXX11
inline void Order::set_partyid(::std::string&& value) {

  partyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Order.partyID)
}
#endif
inline void Order::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Order.partyID)
}
inline void Order::set_partyid(const char* value, size_t size) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Order.partyID)
}
inline ::std::string* Order::mutable_partyid() {

  // @@protoc_insertion_point(field_mutable:vega.Order.partyID)
  return partyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.Order.partyID)

  return partyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_partyid(::std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partyid);
  // @@protoc_insertion_point(field_set_allocated:vega.Order.partyID)
}

// .vega.Side side = 4;
inline void Order::clear_side() {
  side_ = 0;
}
inline ::vega::Side Order::side() const {
  // @@protoc_insertion_point(field_get:vega.Order.side)
  return static_cast< ::vega::Side >(side_);
}
inline void Order::set_side(::vega::Side value) {

  side_ = value;
  // @@protoc_insertion_point(field_set:vega.Order.side)
}

// uint64 price = 5;
inline void Order::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Order::price() const {
  // @@protoc_insertion_point(field_get:vega.Order.price)
  return price_;
}
inline void Order::set_price(::google::protobuf::uint64 value) {

  price_ = value;
  // @@protoc_insertion_point(field_set:vega.Order.price)
}

// uint64 size = 6;
inline void Order::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Order::size() const {
  // @@protoc_insertion_point(field_get:vega.Order.size)
  return size_;
}
inline void Order::set_size(::google::protobuf::uint64 value) {

  size_ = value;
  // @@protoc_insertion_point(field_set:vega.Order.size)
}

// uint64 remaining = 7;
inline void Order::clear_remaining() {
  remaining_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Order::remaining() const {
  // @@protoc_insertion_point(field_get:vega.Order.remaining)
  return remaining_;
}
inline void Order::set_remaining(::google::protobuf::uint64 value) {

  remaining_ = value;
  // @@protoc_insertion_point(field_set:vega.Order.remaining)
}

// .vega.Order.TimeInForce timeInForce = 8;
inline void Order::clear_timeinforce() {
  timeinforce_ = 0;
}
inline ::vega::Order_TimeInForce Order::timeinforce() const {
  // @@protoc_insertion_point(field_get:vega.Order.timeInForce)
  return static_cast< ::vega::Order_TimeInForce >(timeinforce_);
}
inline void Order::set_timeinforce(::vega::Order_TimeInForce value) {

  timeinforce_ = value;
  // @@protoc_insertion_point(field_set:vega.Order.timeInForce)
}

// .vega.Order.Type type = 9;
inline void Order::clear_type() {
  type_ = 0;
}
inline ::vega::Order_Type Order::type() const {
  // @@protoc_insertion_point(field_get:vega.Order.type)
  return static_cast< ::vega::Order_Type >(type_);
}
inline void Order::set_type(::vega::Order_Type value) {

  type_ = value;
  // @@protoc_insertion_point(field_set:vega.Order.type)
}

// int64 createdAt = 10;
inline void Order::clear_createdat() {
  createdat_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Order::createdat() const {
  // @@protoc_insertion_point(field_get:vega.Order.createdAt)
  return createdat_;
}
inline void Order::set_createdat(::google::protobuf::int64 value) {

  createdat_ = value;
  // @@protoc_insertion_point(field_set:vega.Order.createdAt)
}

// .vega.Order.Status status = 11;
inline void Order::clear_status() {
  status_ = 0;
}
inline ::vega::Order_Status Order::status() const {
  // @@protoc_insertion_point(field_get:vega.Order.status)
  return static_cast< ::vega::Order_Status >(status_);
}
inline void Order::set_status(::vega::Order_Status value) {

  status_ = value;
  // @@protoc_insertion_point(field_set:vega.Order.status)
}

// int64 expiresAt = 12;
inline void Order::clear_expiresat() {
  expiresat_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Order::expiresat() const {
  // @@protoc_insertion_point(field_get:vega.Order.expiresAt)
  return expiresat_;
}
inline void Order::set_expiresat(::google::protobuf::int64 value) {

  expiresat_ = value;
  // @@protoc_insertion_point(field_set:vega.Order.expiresAt)
}

// string reference = 13;
inline void Order::clear_reference() {
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::reference() const {
  // @@protoc_insertion_point(field_get:vega.Order.reference)
  return reference_.GetNoArena();
}
inline void Order::set_reference(const ::std::string& value) {

  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Order.reference)
}
#if LANG_CXX11
inline void Order::set_reference(::std::string&& value) {

  reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Order.reference)
}
#endif
inline void Order::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Order.reference)
}
inline void Order::set_reference(const char* value, size_t size) {

  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Order.reference)
}
inline ::std::string* Order::mutable_reference() {

  // @@protoc_insertion_point(field_mutable:vega.Order.reference)
  return reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_reference() {
  // @@protoc_insertion_point(field_release:vega.Order.reference)

  return reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_reference(::std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference);
  // @@protoc_insertion_point(field_set_allocated:vega.Order.reference)
}

// .vega.OrderError reason = 14;
inline void Order::clear_reason() {
  reason_ = 0;
}
inline ::vega::OrderError Order::reason() const {
  // @@protoc_insertion_point(field_get:vega.Order.reason)
  return static_cast< ::vega::OrderError >(reason_);
}
inline void Order::set_reason(::vega::OrderError value) {

  reason_ = value;
  // @@protoc_insertion_point(field_set:vega.Order.reason)
}

// int64 updatedAt = 15;
inline void Order::clear_updatedat() {
  updatedat_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Order::updatedat() const {
  // @@protoc_insertion_point(field_get:vega.Order.updatedAt)
  return updatedat_;
}
inline void Order::set_updatedat(::google::protobuf::int64 value) {

  updatedat_ = value;
  // @@protoc_insertion_point(field_set:vega.Order.updatedAt)
}

// uint64 version = 16;
inline void Order::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Order::version() const {
  // @@protoc_insertion_point(field_get:vega.Order.version)
  return version_;
}
inline void Order::set_version(::google::protobuf::uint64 value) {

  version_ = value;
  // @@protoc_insertion_point(field_set:vega.Order.version)
}

// uint64 batchID = 17;
inline void Order::clear_batchid() {
  batchid_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Order::batchid() const {
  // @@protoc_insertion_point(field_get:vega.Order.batchID)
  return batchid_;
}
inline void Order::set_batchid(::google::protobuf::uint64 value) {

  batchid_ = value;
  // @@protoc_insertion_point(field_set:vega.Order.batchID)
}

// -------------------------------------------------------------------

// OrderCancellationConfirmation

// .vega.Order order = 1;
inline bool OrderCancellationConfirmation::has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline void OrderCancellationConfirmation::clear_order() {
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
inline const ::vega::Order& OrderCancellationConfirmation::order() const {
  const ::vega::Order* p = order_;
  // @@protoc_insertion_point(field_get:vega.OrderCancellationConfirmation.order)
  return p != nullptr ? *p : *reinterpret_cast<const ::vega::Order*>(
      &::vega::_Order_default_instance_);
}
inline ::vega::Order* OrderCancellationConfirmation::release_order() {
  // @@protoc_insertion_point(field_release:vega.OrderCancellationConfirmation.order)

  ::vega::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::vega::Order* OrderCancellationConfirmation::mutable_order() {

  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Order>(GetArenaNoVirtual());
    order_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vega.OrderCancellationConfirmation.order)
  return order_;
}
inline void OrderCancellationConfirmation::set_allocated_order(::vega::Order* order) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete order_;
  }
  if (order) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }

  } else {

  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:vega.OrderCancellationConfirmation.order)
}

// -------------------------------------------------------------------

// OrderConfirmation

// .vega.Order order = 1;
inline bool OrderConfirmation::has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline void OrderConfirmation::clear_order() {
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
inline const ::vega::Order& OrderConfirmation::order() const {
  const ::vega::Order* p = order_;
  // @@protoc_insertion_point(field_get:vega.OrderConfirmation.order)
  return p != nullptr ? *p : *reinterpret_cast<const ::vega::Order*>(
      &::vega::_Order_default_instance_);
}
inline ::vega::Order* OrderConfirmation::release_order() {
  // @@protoc_insertion_point(field_release:vega.OrderConfirmation.order)

  ::vega::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::vega::Order* OrderConfirmation::mutable_order() {

  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Order>(GetArenaNoVirtual());
    order_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vega.OrderConfirmation.order)
  return order_;
}
inline void OrderConfirmation::set_allocated_order(::vega::Order* order) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete order_;
  }
  if (order) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }

  } else {

  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:vega.OrderConfirmation.order)
}

// repeated .vega.Trade trades = 2;
inline int OrderConfirmation::trades_size() const {
  return trades_.size();
}
inline void OrderConfirmation::clear_trades() {
  trades_.Clear();
}
inline ::vega::Trade* OrderConfirmation::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:vega.OrderConfirmation.trades)
  return trades_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vega::Trade >*
OrderConfirmation::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:vega.OrderConfirmation.trades)
  return &trades_;
}
inline const ::vega::Trade& OrderConfirmation::trades(int index) const {
  // @@protoc_insertion_point(field_get:vega.OrderConfirmation.trades)
  return trades_.Get(index);
}
inline ::vega::Trade* OrderConfirmation::add_trades() {
  // @@protoc_insertion_point(field_add:vega.OrderConfirmation.trades)
  return trades_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vega::Trade >&
OrderConfirmation::trades() const {
  // @@protoc_insertion_point(field_list:vega.OrderConfirmation.trades)
  return trades_;
}

// repeated .vega.Order passiveOrdersAffected = 3;
inline int OrderConfirmation::passiveordersaffected_size() const {
  return passiveordersaffected_.size();
}
inline void OrderConfirmation::clear_passiveordersaffected() {
  passiveordersaffected_.Clear();
}
inline ::vega::Order* OrderConfirmation::mutable_passiveordersaffected(int index) {
  // @@protoc_insertion_point(field_mutable:vega.OrderConfirmation.passiveOrdersAffected)
  return passiveordersaffected_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vega::Order >*
OrderConfirmation::mutable_passiveordersaffected() {
  // @@protoc_insertion_point(field_mutable_list:vega.OrderConfirmation.passiveOrdersAffected)
  return &passiveordersaffected_;
}
inline const ::vega::Order& OrderConfirmation::passiveordersaffected(int index) const {
  // @@protoc_insertion_point(field_get:vega.OrderConfirmation.passiveOrdersAffected)
  return passiveordersaffected_.Get(index);
}
inline ::vega::Order* OrderConfirmation::add_passiveordersaffected() {
  // @@protoc_insertion_point(field_add:vega.OrderConfirmation.passiveOrdersAffected)
  return passiveordersaffected_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vega::Order >&
OrderConfirmation::passiveordersaffected() const {
  // @@protoc_insertion_point(field_list:vega.OrderConfirmation.passiveOrdersAffected)
  return passiveordersaffected_;
}

// -------------------------------------------------------------------

// AuctionIndicativeState

// string marketID = 1;
inline void AuctionIndicativeState::clear_marketid() {
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuctionIndicativeState::marketid() const {
  // @@protoc_insertion_point(field_get:vega.AuctionIndicativeState.marketID)
  return marketid_.GetNoArena();
}
inline void AuctionIndicativeState::set_marketid(const ::std::string& value) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.AuctionIndicativeState.marketID)
}
#if LANG_CXX11
inline void AuctionIndicativeState::set_marketid(::std::string&& value) {

  marketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.AuctionIndicativeState.marketID)
}
#endif
inline void AuctionIndicativeState::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.AuctionIndicativeState.marketID)
}
inline void AuctionIndicativeState::set_marketid(const char* value, size_t size) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.AuctionIndicativeState.marketID)
}
inline ::std::string* AuctionIndicativeState::mutable_marketid() {

  // @@protoc_insertion_point(field_mutable:vega.AuctionIndicativeState.marketID)
  return marketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuctionIndicativeState::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.AuctionIndicativeState.marketID)

  return marketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuctionIndicativeState::set_allocated_marketid(::std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketid);
  // @@protoc_insertion_point(field_set_allocated:vega.AuctionIndicativeState.marketID)
}

// uint64 indicativePrice = 2;
inline void AuctionIndicativeState::clear_indicativeprice() {
  indicativeprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AuctionIndicativeState::indicativeprice() const {
  // @@protoc_insertion_point(field_get:vega.AuctionIndicativeState.indicativePrice)
  return indicativeprice_;
}
inline void AuctionIndicativeState::set_indicativeprice(::google::protobuf::uint64 value) {

  indicativeprice_ = value;
  // @@protoc_insertion_point(field_set:vega.AuctionIndicativeState.indicativePrice)
}

// uint64 indicativeVolume = 3;
inline void AuctionIndicativeState::clear_indicativevolume() {
  indicativevolume_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AuctionIndicativeState::indicativevolume() const {
  // @@protoc_insertion_point(field_get:vega.AuctionIndicativeState.indicativeVolume)
  return indicativevolume_;
}
inline void AuctionIndicativeState::set_indicativevolume(::google::protobuf::uint64 value) {

  indicativevolume_ = value;
  // @@protoc_insertion_point(field_set:vega.AuctionIndicativeState.indicativeVolume)
}

// int64 auctionStart = 4;
inline void AuctionIndicativeState::clear_auctionstart() {
  auctionstart_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 AuctionIndicativeState::auctionstart() const {
  // @@protoc_insertion_point(field_get:vega.AuctionIndicativeState.auctionStart)
  return auctionstart_;
}
inline void AuctionIndicativeState::set_auctionstart(::google::protobuf::int64 value) {

  auctionstart_ = value;
  // @@protoc_insertion_point(field_set:vega.AuctionIndicativeState.auctionStart)
}

// int64 auctionEnd = 5;
inline void AuctionIndicativeState::clear_auctionend() {
  auctionend_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 AuctionIndicativeState::auctionend() const {
  // @@protoc_insertion_point(field_get:vega.AuctionIndicativeState.auctionEnd)
  return auctionend_;
}
inline void AuctionIndicativeState::set_auctionend(::google::protobuf::int64 value) {

  auctionend_ = value;
  // @@protoc_insertion_point(field_set:vega.AuctionIndicativeState.auctionEnd)
}

// -------------------------------------------------------------------

// Trade

// string id = 1;
inline void Trade::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Trade::id() const {
  // @@protoc_insertion_point(field_get:vega.Trade.id)
  return id_.GetNoArena();
}
inline void Trade::set_id(const ::std::string& value) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Trade.id)
}
#if LANG_CXX11
inline void Trade::set_id(::std::string&& value) {

  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.id)
}
#endif
inline void Trade::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Trade.id)
}
inline void Trade::set_id(const char* value, size_t size) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.id)
}
inline ::std::string* Trade::mutable_id() {

  // @@protoc_insertion_point(field_mutable:vega.Trade.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trade::release_id() {
  // @@protoc_insertion_point(field_release:vega.Trade.id)

  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trade::set_allocated_id(::std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.id)
}

// string marketID = 2;
inline void Trade::clear_marketid() {
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Trade::marketid() const {
  // @@protoc_insertion_point(field_get:vega.Trade.marketID)
  return marketid_.GetNoArena();
}
inline void Trade::set_marketid(const ::std::string& value) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Trade.marketID)
}
#if LANG_CXX11
inline void Trade::set_marketid(::std::string&& value) {

  marketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.marketID)
}
#endif
inline void Trade::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Trade.marketID)
}
inline void Trade::set_marketid(const char* value, size_t size) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.marketID)
}
inline ::std::string* Trade::mutable_marketid() {

  // @@protoc_insertion_point(field_mutable:vega.Trade.marketID)
  return marketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trade::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.Trade.marketID)

  return marketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trade::set_allocated_marketid(::std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketid);
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.marketID)
}

// uint64 price = 3;
inline void Trade::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Trade::price() const {
  // @@protoc_insertion_point(field_get:vega.Trade.price)
  return price_;
}
inline void Trade::set_price(::google::protobuf::uint64 value) {

  price_ = value;
  // @@protoc_insertion_point(field_set:vega.Trade.price)
}

// uint64 size = 4;
inline void Trade::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Trade::size() const {
  // @@protoc_insertion_point(field_get:vega.Trade.size)
  return size_;
}
inline void Trade::set_size(::google::protobuf::uint64 value) {

  size_ = value;
  // @@protoc_insertion_point(field_set:vega.Trade.size)
}

// string buyer = 5;
inline void Trade::clear_buyer() {
  buyer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Trade::buyer() const {
  // @@protoc_insertion_point(field_get:vega.Trade.buyer)
  return buyer_.GetNoArena();
}
inline void Trade::set_buyer(const ::std::string& value) {

  buyer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Trade.buyer)
}
#if LANG_CXX11
inline void Trade::set_buyer(::std::string&& value) {

  buyer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.buyer)
}
#endif
inline void Trade::set_buyer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  buyer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Trade.buyer)
}
inline void Trade::set_buyer(const char* value, size_t size) {

  buyer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.buyer)
}
inline ::std::string* Trade::mutable_buyer() {

  // @@protoc_insertion_point(field_mutable:vega.Trade.buyer)
  return buyer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trade::release_buyer() {
  // @@protoc_insertion_point(field_release:vega.Trade.buyer)

  return buyer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trade::set_allocated_buyer(::std::string* buyer) {
  if (buyer != nullptr) {

  } else {

  }
  buyer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buyer);
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.buyer)
}

// string seller = 6;
inline void Trade::clear_seller() {
  seller_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Trade::seller() const {
  // @@protoc_insertion_point(field_get:vega.Trade.seller)
  return seller_.GetNoArena();
}
inline void Trade::set_seller(const ::std::string& value) {

  seller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Trade.seller)
}
#if LANG_CXX11
inline void Trade::set_seller(::std::string&& value) {

  seller_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.seller)
}
#endif
inline void Trade::set_seller(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  seller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Trade.seller)
}
inline void Trade::set_seller(const char* value, size_t size) {

  seller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.seller)
}
inline ::std::string* Trade::mutable_seller() {

  // @@protoc_insertion_point(field_mutable:vega.Trade.seller)
  return seller_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trade::release_seller() {
  // @@protoc_insertion_point(field_release:vega.Trade.seller)

  return seller_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trade::set_allocated_seller(::std::string* seller) {
  if (seller != nullptr) {

  } else {

  }
  seller_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seller);
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.seller)
}

// .vega.Side aggressor = 7;
inline void Trade::clear_aggressor() {
  aggressor_ = 0;
}
inline ::vega::Side Trade::aggressor() const {
  // @@protoc_insertion_point(field_get:vega.Trade.aggressor)
  return static_cast< ::vega::Side >(aggressor_);
}
inline void Trade::set_aggressor(::vega::Side value) {

  aggressor_ = value;
  // @@protoc_insertion_point(field_set:vega.Trade.aggressor)
}

// string buyOrder = 8;
inline void Trade::clear_buyorder() {
  buyorder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Trade::buyorder() const {
  // @@protoc_insertion_point(field_get:vega.Trade.buyOrder)
  return buyorder_.GetNoArena();
}
inline void Trade::set_buyorder(const ::std::string& value) {

  buyorder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Trade.buyOrder)
}
#if LANG_CXX11
inline void Trade::set_buyorder(::std::string&& value) {

  buyorder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.buyOrder)
}
#endif
inline void Trade::set_buyorder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  buyorder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Trade.buyOrder)
}
inline void Trade::set_buyorder(const char* value, size_t size) {

  buyorder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.buyOrder)
}
inline ::std::string* Trade::mutable_buyorder() {

  // @@protoc_insertion_point(field_mutable:vega.Trade.buyOrder)
  return buyorder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trade::release_buyorder() {
  // @@protoc_insertion_point(field_release:vega.Trade.buyOrder)

  return buyorder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trade::set_allocated_buyorder(::std::string* buyorder) {
  if (buyorder != nullptr) {

  } else {

  }
  buyorder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buyorder);
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.buyOrder)
}

// string sellOrder = 9;
inline void Trade::clear_sellorder() {
  sellorder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Trade::sellorder() const {
  // @@protoc_insertion_point(field_get:vega.Trade.sellOrder)
  return sellorder_.GetNoArena();
}
inline void Trade::set_sellorder(const ::std::string& value) {

  sellorder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Trade.sellOrder)
}
#if LANG_CXX11
inline void Trade::set_sellorder(::std::string&& value) {

  sellorder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.sellOrder)
}
#endif
inline void Trade::set_sellorder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  sellorder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Trade.sellOrder)
}
inline void Trade::set_sellorder(const char* value, size_t size) {

  sellorder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.sellOrder)
}
inline ::std::string* Trade::mutable_sellorder() {

  // @@protoc_insertion_point(field_mutable:vega.Trade.sellOrder)
  return sellorder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trade::release_sellorder() {
  // @@protoc_insertion_point(field_release:vega.Trade.sellOrder)

  return sellorder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trade::set_allocated_sellorder(::std::string* sellorder) {
  if (sellorder != nullptr) {

  } else {

  }
  sellorder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sellorder);
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.sellOrder)
}

// int64 timestamp = 10;
inline void Trade::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Trade::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.Trade.timestamp)
  return timestamp_;
}
inline void Trade::set_timestamp(::google::protobuf::int64 value) {

  timestamp_ = value;
  // @@protoc_insertion_point(field_set:vega.Trade.timestamp)
}

// .vega.Trade.Type type = 11;
inline void Trade::clear_type() {
  type_ = 0;
}
inline ::vega::Trade_Type Trade::type() const {
  // @@protoc_insertion_point(field_get:vega.Trade.type)
  return static_cast< ::vega::Trade_Type >(type_);
}
inline void Trade::set_type(::vega::Trade_Type value) {

  type_ = value;
  // @@protoc_insertion_point(field_set:vega.Trade.type)
}

// .vega.Fee buyerFee = 12;
inline bool Trade::has_buyerfee() const {
  return this != internal_default_instance() && buyerfee_ != nullptr;
}
inline void Trade::clear_buyerfee() {
  if (GetArenaNoVirtual() == nullptr && buyerfee_ != nullptr) {
    delete buyerfee_;
  }
  buyerfee_ = nullptr;
}
inline const ::vega::Fee& Trade::buyerfee() const {
  const ::vega::Fee* p = buyerfee_;
  // @@protoc_insertion_point(field_get:vega.Trade.buyerFee)
  return p != nullptr ? *p : *reinterpret_cast<const ::vega::Fee*>(
      &::vega::_Fee_default_instance_);
}
inline ::vega::Fee* Trade::release_buyerfee() {
  // @@protoc_insertion_point(field_release:vega.Trade.buyerFee)

  ::vega::Fee* temp = buyerfee_;
  buyerfee_ = nullptr;
  return temp;
}
inline ::vega::Fee* Trade::mutable_buyerfee() {

  if (buyerfee_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Fee>(GetArenaNoVirtual());
    buyerfee_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vega.Trade.buyerFee)
  return buyerfee_;
}
inline void Trade::set_allocated_buyerfee(::vega::Fee* buyerfee) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete buyerfee_;
  }
  if (buyerfee) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      buyerfee = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, buyerfee, submessage_arena);
    }

  } else {

  }
  buyerfee_ = buyerfee;
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.buyerFee)
}

// .vega.Fee sellerFee = 13;
inline bool Trade::has_sellerfee() const {
  return this != internal_default_instance() && sellerfee_ != nullptr;
}
inline void Trade::clear_sellerfee() {
  if (GetArenaNoVirtual() == nullptr && sellerfee_ != nullptr) {
    delete sellerfee_;
  }
  sellerfee_ = nullptr;
}
inline const ::vega::Fee& Trade::sellerfee() const {
  const ::vega::Fee* p = sellerfee_;
  // @@protoc_insertion_point(field_get:vega.Trade.sellerFee)
  return p != nullptr ? *p : *reinterpret_cast<const ::vega::Fee*>(
      &::vega::_Fee_default_instance_);
}
inline ::vega::Fee* Trade::release_sellerfee() {
  // @@protoc_insertion_point(field_release:vega.Trade.sellerFee)

  ::vega::Fee* temp = sellerfee_;
  sellerfee_ = nullptr;
  return temp;
}
inline ::vega::Fee* Trade::mutable_sellerfee() {

  if (sellerfee_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Fee>(GetArenaNoVirtual());
    sellerfee_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vega.Trade.sellerFee)
  return sellerfee_;
}
inline void Trade::set_allocated_sellerfee(::vega::Fee* sellerfee) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sellerfee_;
  }
  if (sellerfee) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sellerfee = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sellerfee, submessage_arena);
    }

  } else {

  }
  sellerfee_ = sellerfee;
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.sellerFee)
}

// uint64 buyerAuctionBatch = 14;
inline void Trade::clear_buyerauctionbatch() {
  buyerauctionbatch_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Trade::buyerauctionbatch() const {
  // @@protoc_insertion_point(field_get:vega.Trade.buyerAuctionBatch)
  return buyerauctionbatch_;
}
inline void Trade::set_buyerauctionbatch(::google::protobuf::uint64 value) {

  buyerauctionbatch_ = value;
  // @@protoc_insertion_point(field_set:vega.Trade.buyerAuctionBatch)
}

// uint64 sellerAuctionBatch = 15;
inline void Trade::clear_sellerauctionbatch() {
  sellerauctionbatch_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Trade::sellerauctionbatch() const {
  // @@protoc_insertion_point(field_get:vega.Trade.sellerAuctionBatch)
  return sellerauctionbatch_;
}
inline void Trade::set_sellerauctionbatch(::google::protobuf::uint64 value) {

  sellerauctionbatch_ = value;
  // @@protoc_insertion_point(field_set:vega.Trade.sellerAuctionBatch)
}

// -------------------------------------------------------------------

// Fee

// uint64 makerFee = 1;
inline void Fee::clear_makerfee() {
  makerfee_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Fee::makerfee() const {
  // @@protoc_insertion_point(field_get:vega.Fee.makerFee)
  return makerfee_;
}
inline void Fee::set_makerfee(::google::protobuf::uint64 value) {

  makerfee_ = value;
  // @@protoc_insertion_point(field_set:vega.Fee.makerFee)
}

// uint64 infrastructureFee = 2;
inline void Fee::clear_infrastructurefee() {
  infrastructurefee_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Fee::infrastructurefee() const {
  // @@protoc_insertion_point(field_get:vega.Fee.infrastructureFee)
  return infrastructurefee_;
}
inline void Fee::set_infrastructurefee(::google::protobuf::uint64 value) {

  infrastructurefee_ = value;
  // @@protoc_insertion_point(field_set:vega.Fee.infrastructureFee)
}

// uint64 liquidityFee = 3;
inline void Fee::clear_liquidityfee() {
  liquidityfee_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Fee::liquidityfee() const {
  // @@protoc_insertion_point(field_get:vega.Fee.liquidityFee)
  return liquidityfee_;
}
inline void Fee::set_liquidityfee(::google::protobuf::uint64 value) {

  liquidityfee_ = value;
  // @@protoc_insertion_point(field_set:vega.Fee.liquidityFee)
}

// -------------------------------------------------------------------

// TradeSet

// repeated .vega.Trade trades = 1;
inline int TradeSet::trades_size() const {
  return trades_.size();
}
inline void TradeSet::clear_trades() {
  trades_.Clear();
}
inline ::vega::Trade* TradeSet::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TradeSet.trades)
  return trades_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vega::Trade >*
TradeSet::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:vega.TradeSet.trades)
  return &trades_;
}
inline const ::vega::Trade& TradeSet::trades(int index) const {
  // @@protoc_insertion_point(field_get:vega.TradeSet.trades)
  return trades_.Get(index);
}
inline ::vega::Trade* TradeSet::add_trades() {
  // @@protoc_insertion_point(field_add:vega.TradeSet.trades)
  return trades_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vega::Trade >&
TradeSet::trades() const {
  // @@protoc_insertion_point(field_list:vega.TradeSet.trades)
  return trades_;
}

// -------------------------------------------------------------------

// Candle

// int64 timestamp = 1;
inline void Candle::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Candle::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.Candle.timestamp)
  return timestamp_;
}
inline void Candle::set_timestamp(::google::protobuf::int64 value) {

  timestamp_ = value;
  // @@protoc_insertion_point(field_set:vega.Candle.timestamp)
}

// string datetime = 2;
inline void Candle::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Candle::datetime() const {
  // @@protoc_insertion_point(field_get:vega.Candle.datetime)
  return datetime_.GetNoArena();
}
inline void Candle::set_datetime(const ::std::string& value) {

  datetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Candle.datetime)
}
#if LANG_CXX11
inline void Candle::set_datetime(::std::string&& value) {

  datetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Candle.datetime)
}
#endif
inline void Candle::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  datetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Candle.datetime)
}
inline void Candle::set_datetime(const char* value, size_t size) {

  datetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Candle.datetime)
}
inline ::std::string* Candle::mutable_datetime() {

  // @@protoc_insertion_point(field_mutable:vega.Candle.datetime)
  return datetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Candle::release_datetime() {
  // @@protoc_insertion_point(field_release:vega.Candle.datetime)

  return datetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Candle::set_allocated_datetime(::std::string* datetime) {
  if (datetime != nullptr) {

  } else {

  }
  datetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:vega.Candle.datetime)
}

// uint64 high = 3;
inline void Candle::clear_high() {
  high_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Candle::high() const {
  // @@protoc_insertion_point(field_get:vega.Candle.high)
  return high_;
}
inline void Candle::set_high(::google::protobuf::uint64 value) {

  high_ = value;
  // @@protoc_insertion_point(field_set:vega.Candle.high)
}

// uint64 low = 4;
inline void Candle::clear_low() {
  low_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Candle::low() const {
  // @@protoc_insertion_point(field_get:vega.Candle.low)
  return low_;
}
inline void Candle::set_low(::google::protobuf::uint64 value) {

  low_ = value;
  // @@protoc_insertion_point(field_set:vega.Candle.low)
}

// uint64 open = 5;
inline void Candle::clear_open() {
  open_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Candle::open() const {
  // @@protoc_insertion_point(field_get:vega.Candle.open)
  return open_;
}
inline void Candle::set_open(::google::protobuf::uint64 value) {

  open_ = value;
  // @@protoc_insertion_point(field_set:vega.Candle.open)
}

// uint64 close = 6;
inline void Candle::clear_close() {
  close_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Candle::close() const {
  // @@protoc_insertion_point(field_get:vega.Candle.close)
  return close_;
}
inline void Candle::set_close(::google::protobuf::uint64 value) {

  close_ = value;
  // @@protoc_insertion_point(field_set:vega.Candle.close)
}

// uint64 volume = 7;
inline void Candle::clear_volume() {
  volume_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Candle::volume() const {
  // @@protoc_insertion_point(field_get:vega.Candle.volume)
  return volume_;
}
inline void Candle::set_volume(::google::protobuf::uint64 value) {

  volume_ = value;
  // @@protoc_insertion_point(field_set:vega.Candle.volume)
}

// .vega.Interval interval = 8;
inline void Candle::clear_interval() {
  interval_ = 0;
}
inline ::vega::Interval Candle::interval() const {
  // @@protoc_insertion_point(field_get:vega.Candle.interval)
  return static_cast< ::vega::Interval >(interval_);
}
inline void Candle::set_interval(::vega::Interval value) {

  interval_ = value;
  // @@protoc_insertion_point(field_set:vega.Candle.interval)
}

// -------------------------------------------------------------------

// PriceLevel

// uint64 price = 1;
inline void PriceLevel::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PriceLevel::price() const {
  // @@protoc_insertion_point(field_get:vega.PriceLevel.price)
  return price_;
}
inline void PriceLevel::set_price(::google::protobuf::uint64 value) {

  price_ = value;
  // @@protoc_insertion_point(field_set:vega.PriceLevel.price)
}

// uint64 numberOfOrders = 2;
inline void PriceLevel::clear_numberoforders() {
  numberoforders_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PriceLevel::numberoforders() const {
  // @@protoc_insertion_point(field_get:vega.PriceLevel.numberOfOrders)
  return numberoforders_;
}
inline void PriceLevel::set_numberoforders(::google::protobuf::uint64 value) {

  numberoforders_ = value;
  // @@protoc_insertion_point(field_set:vega.PriceLevel.numberOfOrders)
}

// uint64 volume = 3;
inline void PriceLevel::clear_volume() {
  volume_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PriceLevel::volume() const {
  // @@protoc_insertion_point(field_get:vega.PriceLevel.volume)
  return volume_;
}
inline void PriceLevel::set_volume(::google::protobuf::uint64 value) {

  volume_ = value;
  // @@protoc_insertion_point(field_set:vega.PriceLevel.volume)
}

// -------------------------------------------------------------------

// MarketDepth

// string marketID = 1;
inline void MarketDepth::clear_marketid() {
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketDepth::marketid() const {
  // @@protoc_insertion_point(field_get:vega.MarketDepth.marketID)
  return marketid_.GetNoArena();
}
inline void MarketDepth::set_marketid(const ::std::string& value) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.MarketDepth.marketID)
}
#if LANG_CXX11
inline void MarketDepth::set_marketid(::std::string&& value) {

  marketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketDepth.marketID)
}
#endif
inline void MarketDepth::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.MarketDepth.marketID)
}
inline void MarketDepth::set_marketid(const char* value, size_t size) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.MarketDepth.marketID)
}
inline ::std::string* MarketDepth::mutable_marketid() {

  // @@protoc_insertion_point(field_mutable:vega.MarketDepth.marketID)
  return marketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketDepth::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.MarketDepth.marketID)

  return marketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketDepth::set_allocated_marketid(::std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketid);
  // @@protoc_insertion_point(field_set_allocated:vega.MarketDepth.marketID)
}

// repeated .vega.PriceLevel buy = 2;
inline int MarketDepth::buy_size() const {
  return buy_.size();
}
inline void MarketDepth::clear_buy() {
  buy_.Clear();
}
inline ::vega::PriceLevel* MarketDepth::mutable_buy(int index) {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepth.buy)
  return buy_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepth::mutable_buy() {
  // @@protoc_insertion_point(field_mutable_list:vega.MarketDepth.buy)
  return &buy_;
}
inline const ::vega::PriceLevel& MarketDepth::buy(int index) const {
  // @@protoc_insertion_point(field_get:vega.MarketDepth.buy)
  return buy_.Get(index);
}
inline ::vega::PriceLevel* MarketDepth::add_buy() {
  // @@protoc_insertion_point(field_add:vega.MarketDepth.buy)
  return buy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepth::buy() const {
  // @@protoc_insertion_point(field_list:vega.MarketDepth.buy)
  return buy_;
}

// repeated .vega.PriceLevel sell = 3;
inline int MarketDepth::sell_size() const {
  return sell_.size();
}
inline void MarketDepth::clear_sell() {
  sell_.Clear();
}
inline ::vega::PriceLevel* MarketDepth::mutable_sell(int index) {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepth.sell)
  return sell_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepth::mutable_sell() {
  // @@protoc_insertion_point(field_mutable_list:vega.MarketDepth.sell)
  return &sell_;
}
inline const ::vega::PriceLevel& MarketDepth::sell(int index) const {
  // @@protoc_insertion_point(field_get:vega.MarketDepth.sell)
  return sell_.Get(index);
}
inline ::vega::PriceLevel* MarketDepth::add_sell() {
  // @@protoc_insertion_point(field_add:vega.MarketDepth.sell)
  return sell_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepth::sell() const {
  // @@protoc_insertion_point(field_list:vega.MarketDepth.sell)
  return sell_;
}

// uint64 sequenceNumber = 4;
inline void MarketDepth::clear_sequencenumber() {
  sequencenumber_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MarketDepth::sequencenumber() const {
  // @@protoc_insertion_point(field_get:vega.MarketDepth.sequenceNumber)
  return sequencenumber_;
}
inline void MarketDepth::set_sequencenumber(::google::protobuf::uint64 value) {

  sequencenumber_ = value;
  // @@protoc_insertion_point(field_set:vega.MarketDepth.sequenceNumber)
}

// -------------------------------------------------------------------

// MarketDepthUpdate

// string marketID = 1;
inline void MarketDepthUpdate::clear_marketid() {
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketDepthUpdate::marketid() const {
  // @@protoc_insertion_point(field_get:vega.MarketDepthUpdate.marketID)
  return marketid_.GetNoArena();
}
inline void MarketDepthUpdate::set_marketid(const ::std::string& value) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.MarketDepthUpdate.marketID)
}
#if LANG_CXX11
inline void MarketDepthUpdate::set_marketid(::std::string&& value) {

  marketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketDepthUpdate.marketID)
}
#endif
inline void MarketDepthUpdate::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.MarketDepthUpdate.marketID)
}
inline void MarketDepthUpdate::set_marketid(const char* value, size_t size) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.MarketDepthUpdate.marketID)
}
inline ::std::string* MarketDepthUpdate::mutable_marketid() {

  // @@protoc_insertion_point(field_mutable:vega.MarketDepthUpdate.marketID)
  return marketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketDepthUpdate::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.MarketDepthUpdate.marketID)

  return marketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketDepthUpdate::set_allocated_marketid(::std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketid);
  // @@protoc_insertion_point(field_set_allocated:vega.MarketDepthUpdate.marketID)
}

// repeated .vega.PriceLevel buy = 2;
inline int MarketDepthUpdate::buy_size() const {
  return buy_.size();
}
inline void MarketDepthUpdate::clear_buy() {
  buy_.Clear();
}
inline ::vega::PriceLevel* MarketDepthUpdate::mutable_buy(int index) {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepthUpdate.buy)
  return buy_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepthUpdate::mutable_buy() {
  // @@protoc_insertion_point(field_mutable_list:vega.MarketDepthUpdate.buy)
  return &buy_;
}
inline const ::vega::PriceLevel& MarketDepthUpdate::buy(int index) const {
  // @@protoc_insertion_point(field_get:vega.MarketDepthUpdate.buy)
  return buy_.Get(index);
}
inline ::vega::PriceLevel* MarketDepthUpdate::add_buy() {
  // @@protoc_insertion_point(field_add:vega.MarketDepthUpdate.buy)
  return buy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepthUpdate::buy() const {
  // @@protoc_insertion_point(field_list:vega.MarketDepthUpdate.buy)
  return buy_;
}

// repeated .vega.PriceLevel sell = 3;
inline int MarketDepthUpdate::sell_size() const {
  return sell_.size();
}
inline void MarketDepthUpdate::clear_sell() {
  sell_.Clear();
}
inline ::vega::PriceLevel* MarketDepthUpdate::mutable_sell(int index) {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepthUpdate.sell)
  return sell_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepthUpdate::mutable_sell() {
  // @@protoc_insertion_point(field_mutable_list:vega.MarketDepthUpdate.sell)
  return &sell_;
}
inline const ::vega::PriceLevel& MarketDepthUpdate::sell(int index) const {
  // @@protoc_insertion_point(field_get:vega.MarketDepthUpdate.sell)
  return sell_.Get(index);
}
inline ::vega::PriceLevel* MarketDepthUpdate::add_sell() {
  // @@protoc_insertion_point(field_add:vega.MarketDepthUpdate.sell)
  return sell_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepthUpdate::sell() const {
  // @@protoc_insertion_point(field_list:vega.MarketDepthUpdate.sell)
  return sell_;
}

// uint64 sequenceNumber = 4;
inline void MarketDepthUpdate::clear_sequencenumber() {
  sequencenumber_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MarketDepthUpdate::sequencenumber() const {
  // @@protoc_insertion_point(field_get:vega.MarketDepthUpdate.sequenceNumber)
  return sequencenumber_;
}
inline void MarketDepthUpdate::set_sequencenumber(::google::protobuf::uint64 value) {

  sequencenumber_ = value;
  // @@protoc_insertion_point(field_set:vega.MarketDepthUpdate.sequenceNumber)
}

// -------------------------------------------------------------------

// Position

// string marketID = 1;
inline void Position::clear_marketid() {
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Position::marketid() const {
  // @@protoc_insertion_point(field_get:vega.Position.marketID)
  return marketid_.GetNoArena();
}
inline void Position::set_marketid(const ::std::string& value) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Position.marketID)
}
#if LANG_CXX11
inline void Position::set_marketid(::std::string&& value) {

  marketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Position.marketID)
}
#endif
inline void Position::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Position.marketID)
}
inline void Position::set_marketid(const char* value, size_t size) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Position.marketID)
}
inline ::std::string* Position::mutable_marketid() {

  // @@protoc_insertion_point(field_mutable:vega.Position.marketID)
  return marketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Position::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.Position.marketID)

  return marketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Position::set_allocated_marketid(::std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketid);
  // @@protoc_insertion_point(field_set_allocated:vega.Position.marketID)
}

// string partyID = 2;
inline void Position::clear_partyid() {
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Position::partyid() const {
  // @@protoc_insertion_point(field_get:vega.Position.partyID)
  return partyid_.GetNoArena();
}
inline void Position::set_partyid(const ::std::string& value) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Position.partyID)
}
#if LANG_CXX11
inline void Position::set_partyid(::std::string&& value) {

  partyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Position.partyID)
}
#endif
inline void Position::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Position.partyID)
}
inline void Position::set_partyid(const char* value, size_t size) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Position.partyID)
}
inline ::std::string* Position::mutable_partyid() {

  // @@protoc_insertion_point(field_mutable:vega.Position.partyID)
  return partyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Position::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.Position.partyID)

  return partyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Position::set_allocated_partyid(::std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partyid);
  // @@protoc_insertion_point(field_set_allocated:vega.Position.partyID)
}

// int64 openVolume = 3;
inline void Position::clear_openvolume() {
  openvolume_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Position::openvolume() const {
  // @@protoc_insertion_point(field_get:vega.Position.openVolume)
  return openvolume_;
}
inline void Position::set_openvolume(::google::protobuf::int64 value) {

  openvolume_ = value;
  // @@protoc_insertion_point(field_set:vega.Position.openVolume)
}

// int64 realisedPNL = 4;
inline void Position::clear_realisedpnl() {
  realisedpnl_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Position::realisedpnl() const {
  // @@protoc_insertion_point(field_get:vega.Position.realisedPNL)
  return realisedpnl_;
}
inline void Position::set_realisedpnl(::google::protobuf::int64 value) {

  realisedpnl_ = value;
  // @@protoc_insertion_point(field_set:vega.Position.realisedPNL)
}

// int64 unrealisedPNL = 5;
inline void Position::clear_unrealisedpnl() {
  unrealisedpnl_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Position::unrealisedpnl() const {
  // @@protoc_insertion_point(field_get:vega.Position.unrealisedPNL)
  return unrealisedpnl_;
}
inline void Position::set_unrealisedpnl(::google::protobuf::int64 value) {

  unrealisedpnl_ = value;
  // @@protoc_insertion_point(field_set:vega.Position.unrealisedPNL)
}

// uint64 averageEntryPrice = 6;
inline void Position::clear_averageentryprice() {
  averageentryprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Position::averageentryprice() const {
  // @@protoc_insertion_point(field_get:vega.Position.averageEntryPrice)
  return averageentryprice_;
}
inline void Position::set_averageentryprice(::google::protobuf::uint64 value) {

  averageentryprice_ = value;
  // @@protoc_insertion_point(field_set:vega.Position.averageEntryPrice)
}

// int64 updatedAt = 7;
inline void Position::clear_updatedat() {
  updatedat_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Position::updatedat() const {
  // @@protoc_insertion_point(field_get:vega.Position.updatedAt)
  return updatedat_;
}
inline void Position::set_updatedat(::google::protobuf::int64 value) {

  updatedat_ = value;
  // @@protoc_insertion_point(field_set:vega.Position.updatedAt)
}

// -------------------------------------------------------------------

// PositionTrade

// int64 volume = 1;
inline void PositionTrade::clear_volume() {
  volume_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 PositionTrade::volume() const {
  // @@protoc_insertion_point(field_get:vega.PositionTrade.volume)
  return volume_;
}
inline void PositionTrade::set_volume(::google::protobuf::int64 value) {

  volume_ = value;
  // @@protoc_insertion_point(field_set:vega.PositionTrade.volume)
}

// uint64 price = 2;
inline void PositionTrade::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PositionTrade::price() const {
  // @@protoc_insertion_point(field_get:vega.PositionTrade.price)
  return price_;
}
inline void PositionTrade::set_price(::google::protobuf::uint64 value) {

  price_ = value;
  // @@protoc_insertion_point(field_set:vega.PositionTrade.price)
}

// -------------------------------------------------------------------

// Statistics

// uint64 blockHeight = 1;
inline void Statistics::clear_blockheight() {
  blockheight_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Statistics::blockheight() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.blockHeight)
  return blockheight_;
}
inline void Statistics::set_blockheight(::google::protobuf::uint64 value) {

  blockheight_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.blockHeight)
}

// uint64 backlogLength = 2;
inline void Statistics::clear_backloglength() {
  backloglength_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Statistics::backloglength() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.backlogLength)
  return backloglength_;
}
inline void Statistics::set_backloglength(::google::protobuf::uint64 value) {

  backloglength_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.backlogLength)
}

// uint64 totalPeers = 3;
inline void Statistics::clear_totalpeers() {
  totalpeers_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Statistics::totalpeers() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.totalPeers)
  return totalpeers_;
}
inline void Statistics::set_totalpeers(::google::protobuf::uint64 value) {

  totalpeers_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.totalPeers)
}

// string genesisTime = 4;
inline void Statistics::clear_genesistime() {
  genesistime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Statistics::genesistime() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.genesisTime)
  return genesistime_.GetNoArena();
}
inline void Statistics::set_genesistime(const ::std::string& value) {

  genesistime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Statistics.genesisTime)
}
#if LANG_CXX11
inline void Statistics::set_genesistime(::std::string&& value) {

  genesistime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.genesisTime)
}
#endif
inline void Statistics::set_genesistime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  genesistime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Statistics.genesisTime)
}
inline void Statistics::set_genesistime(const char* value, size_t size) {

  genesistime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.genesisTime)
}
inline ::std::string* Statistics::mutable_genesistime() {

  // @@protoc_insertion_point(field_mutable:vega.Statistics.genesisTime)
  return genesistime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Statistics::release_genesistime() {
  // @@protoc_insertion_point(field_release:vega.Statistics.genesisTime)

  return genesistime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Statistics::set_allocated_genesistime(::std::string* genesistime) {
  if (genesistime != nullptr) {

  } else {

  }
  genesistime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genesistime);
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.genesisTime)
}

// string currentTime = 5;
inline void Statistics::clear_currenttime() {
  currenttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Statistics::currenttime() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.currentTime)
  return currenttime_.GetNoArena();
}
inline void Statistics::set_currenttime(const ::std::string& value) {

  currenttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Statistics.currentTime)
}
#if LANG_CXX11
inline void Statistics::set_currenttime(::std::string&& value) {

  currenttime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.currentTime)
}
#endif
inline void Statistics::set_currenttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  currenttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Statistics.currentTime)
}
inline void Statistics::set_currenttime(const char* value, size_t size) {

  currenttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.currentTime)
}
inline ::std::string* Statistics::mutable_currenttime() {

  // @@protoc_insertion_point(field_mutable:vega.Statistics.currentTime)
  return currenttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Statistics::release_currenttime() {
  // @@protoc_insertion_point(field_release:vega.Statistics.currentTime)

  return currenttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Statistics::set_allocated_currenttime(::std::string* currenttime) {
  if (currenttime != nullptr) {

  } else {

  }
  currenttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currenttime);
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.currentTime)
}

// string vegaTime = 6;
inline void Statistics::clear_vegatime() {
  vegatime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Statistics::vegatime() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.vegaTime)
  return vegatime_.GetNoArena();
}
inline void Statistics::set_vegatime(const ::std::string& value) {

  vegatime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Statistics.vegaTime)
}
#if LANG_CXX11
inline void Statistics::set_vegatime(::std::string&& value) {

  vegatime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.vegaTime)
}
#endif
inline void Statistics::set_vegatime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  vegatime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Statistics.vegaTime)
}
inline void Statistics::set_vegatime(const char* value, size_t size) {

  vegatime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.vegaTime)
}
inline ::std::string* Statistics::mutable_vegatime() {

  // @@protoc_insertion_point(field_mutable:vega.Statistics.vegaTime)
  return vegatime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Statistics::release_vegatime() {
  // @@protoc_insertion_point(field_release:vega.Statistics.vegaTime)

  return vegatime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Statistics::set_allocated_vegatime(::std::string* vegatime) {
  if (vegatime != nullptr) {

  } else {

  }
  vegatime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vegatime);
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.vegaTime)
}

// .vega.ChainStatus status = 7;
inline void Statistics::clear_status() {
  status_ = 0;
}
inline ::vega::ChainStatus Statistics::status() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.status)
  return static_cast< ::vega::ChainStatus >(status_);
}
inline void Statistics::set_status(::vega::ChainStatus value) {

  status_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.status)
}

// uint64 txPerBlock = 8;
inline void Statistics::clear_txperblock() {
  txperblock_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Statistics::txperblock() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.txPerBlock)
  return txperblock_;
}
inline void Statistics::set_txperblock(::google::protobuf::uint64 value) {

  txperblock_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.txPerBlock)
}

// uint64 averageTxBytes = 9;
inline void Statistics::clear_averagetxbytes() {
  averagetxbytes_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Statistics::averagetxbytes() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.averageTxBytes)
  return averagetxbytes_;
}
inline void Statistics::set_averagetxbytes(::google::protobuf::uint64 value) {

  averagetxbytes_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.averageTxBytes)
}

// uint64 averageOrdersPerBlock = 10;
inline void Statistics::clear_averageordersperblock() {
  averageordersperblock_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Statistics::averageordersperblock() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.averageOrdersPerBlock)
  return averageordersperblock_;
}
inline void Statistics::set_averageordersperblock(::google::protobuf::uint64 value) {

  averageordersperblock_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.averageOrdersPerBlock)
}

// uint64 tradesPerSecond = 11;
inline void Statistics::clear_tradespersecond() {
  tradespersecond_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Statistics::tradespersecond() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.tradesPerSecond)
  return tradespersecond_;
}
inline void Statistics::set_tradespersecond(::google::protobuf::uint64 value) {

  tradespersecond_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.tradesPerSecond)
}

// uint64 ordersPerSecond = 12;
inline void Statistics::clear_orderspersecond() {
  orderspersecond_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Statistics::orderspersecond() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.ordersPerSecond)
  return orderspersecond_;
}
inline void Statistics::set_orderspersecond(::google::protobuf::uint64 value) {

  orderspersecond_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.ordersPerSecond)
}

// uint64 totalMarkets = 13;
inline void Statistics::clear_totalmarkets() {
  totalmarkets_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Statistics::totalmarkets() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.totalMarkets)
  return totalmarkets_;
}
inline void Statistics::set_totalmarkets(::google::protobuf::uint64 value) {

  totalmarkets_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.totalMarkets)
}

// uint64 totalAmendOrder = 16;
inline void Statistics::clear_totalamendorder() {
  totalamendorder_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Statistics::totalamendorder() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.totalAmendOrder)
  return totalamendorder_;
}
inline void Statistics::set_totalamendorder(::google::protobuf::uint64 value) {

  totalamendorder_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.totalAmendOrder)
}

// uint64 totalCancelOrder = 17;
inline void Statistics::clear_totalcancelorder() {
  totalcancelorder_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Statistics::totalcancelorder() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.totalCancelOrder)
  return totalcancelorder_;
}
inline void Statistics::set_totalcancelorder(::google::protobuf::uint64 value) {

  totalcancelorder_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.totalCancelOrder)
}

// uint64 totalCreateOrder = 18;
inline void Statistics::clear_totalcreateorder() {
  totalcreateorder_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Statistics::totalcreateorder() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.totalCreateOrder)
  return totalcreateorder_;
}
inline void Statistics::set_totalcreateorder(::google::protobuf::uint64 value) {

  totalcreateorder_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.totalCreateOrder)
}

// uint64 totalOrders = 19;
inline void Statistics::clear_totalorders() {
  totalorders_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Statistics::totalorders() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.totalOrders)
  return totalorders_;
}
inline void Statistics::set_totalorders(::google::protobuf::uint64 value) {

  totalorders_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.totalOrders)
}

// uint64 totalTrades = 20;
inline void Statistics::clear_totaltrades() {
  totaltrades_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Statistics::totaltrades() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.totalTrades)
  return totaltrades_;
}
inline void Statistics::set_totaltrades(::google::protobuf::uint64 value) {

  totaltrades_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.totalTrades)
}

// uint32 orderSubscriptions = 21;
inline void Statistics::clear_ordersubscriptions() {
  ordersubscriptions_ = 0u;
}
inline ::google::protobuf::uint32 Statistics::ordersubscriptions() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.orderSubscriptions)
  return ordersubscriptions_;
}
inline void Statistics::set_ordersubscriptions(::google::protobuf::uint32 value) {

  ordersubscriptions_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.orderSubscriptions)
}

// uint32 tradeSubscriptions = 22;
inline void Statistics::clear_tradesubscriptions() {
  tradesubscriptions_ = 0u;
}
inline ::google::protobuf::uint32 Statistics::tradesubscriptions() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.tradeSubscriptions)
  return tradesubscriptions_;
}
inline void Statistics::set_tradesubscriptions(::google::protobuf::uint32 value) {

  tradesubscriptions_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.tradeSubscriptions)
}

// uint32 candleSubscriptions = 23;
inline void Statistics::clear_candlesubscriptions() {
  candlesubscriptions_ = 0u;
}
inline ::google::protobuf::uint32 Statistics::candlesubscriptions() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.candleSubscriptions)
  return candlesubscriptions_;
}
inline void Statistics::set_candlesubscriptions(::google::protobuf::uint32 value) {

  candlesubscriptions_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.candleSubscriptions)
}

// uint32 marketDepthSubscriptions = 24;
inline void Statistics::clear_marketdepthsubscriptions() {
  marketdepthsubscriptions_ = 0u;
}
inline ::google::protobuf::uint32 Statistics::marketdepthsubscriptions() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.marketDepthSubscriptions)
  return marketdepthsubscriptions_;
}
inline void Statistics::set_marketdepthsubscriptions(::google::protobuf::uint32 value) {

  marketdepthsubscriptions_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.marketDepthSubscriptions)
}

// uint32 positionsSubscriptions = 25;
inline void Statistics::clear_positionssubscriptions() {
  positionssubscriptions_ = 0u;
}
inline ::google::protobuf::uint32 Statistics::positionssubscriptions() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.positionsSubscriptions)
  return positionssubscriptions_;
}
inline void Statistics::set_positionssubscriptions(::google::protobuf::uint32 value) {

  positionssubscriptions_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.positionsSubscriptions)
}

// uint32 accountSubscriptions = 26;
inline void Statistics::clear_accountsubscriptions() {
  accountsubscriptions_ = 0u;
}
inline ::google::protobuf::uint32 Statistics::accountsubscriptions() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.accountSubscriptions)
  return accountsubscriptions_;
}
inline void Statistics::set_accountsubscriptions(::google::protobuf::uint32 value) {

  accountsubscriptions_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.accountSubscriptions)
}

// uint32 marketDataSubscriptions = 27;
inline void Statistics::clear_marketdatasubscriptions() {
  marketdatasubscriptions_ = 0u;
}
inline ::google::protobuf::uint32 Statistics::marketdatasubscriptions() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.marketDataSubscriptions)
  return marketdatasubscriptions_;
}
inline void Statistics::set_marketdatasubscriptions(::google::protobuf::uint32 value) {

  marketdatasubscriptions_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.marketDataSubscriptions)
}

// string appVersionHash = 28;
inline void Statistics::clear_appversionhash() {
  appversionhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Statistics::appversionhash() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.appVersionHash)
  return appversionhash_.GetNoArena();
}
inline void Statistics::set_appversionhash(const ::std::string& value) {

  appversionhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Statistics.appVersionHash)
}
#if LANG_CXX11
inline void Statistics::set_appversionhash(::std::string&& value) {

  appversionhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.appVersionHash)
}
#endif
inline void Statistics::set_appversionhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  appversionhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Statistics.appVersionHash)
}
inline void Statistics::set_appversionhash(const char* value, size_t size) {

  appversionhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.appVersionHash)
}
inline ::std::string* Statistics::mutable_appversionhash() {

  // @@protoc_insertion_point(field_mutable:vega.Statistics.appVersionHash)
  return appversionhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Statistics::release_appversionhash() {
  // @@protoc_insertion_point(field_release:vega.Statistics.appVersionHash)

  return appversionhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Statistics::set_allocated_appversionhash(::std::string* appversionhash) {
  if (appversionhash != nullptr) {

  } else {

  }
  appversionhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appversionhash);
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.appVersionHash)
}

// string appVersion = 29;
inline void Statistics::clear_appversion() {
  appversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Statistics::appversion() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.appVersion)
  return appversion_.GetNoArena();
}
inline void Statistics::set_appversion(const ::std::string& value) {

  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Statistics.appVersion)
}
#if LANG_CXX11
inline void Statistics::set_appversion(::std::string&& value) {

  appversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.appVersion)
}
#endif
inline void Statistics::set_appversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Statistics.appVersion)
}
inline void Statistics::set_appversion(const char* value, size_t size) {

  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.appVersion)
}
inline ::std::string* Statistics::mutable_appversion() {

  // @@protoc_insertion_point(field_mutable:vega.Statistics.appVersion)
  return appversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Statistics::release_appversion() {
  // @@protoc_insertion_point(field_release:vega.Statistics.appVersion)

  return appversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Statistics::set_allocated_appversion(::std::string* appversion) {
  if (appversion != nullptr) {

  } else {

  }
  appversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appversion);
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.appVersion)
}

// string chainVersion = 30;
inline void Statistics::clear_chainversion() {
  chainversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Statistics::chainversion() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.chainVersion)
  return chainversion_.GetNoArena();
}
inline void Statistics::set_chainversion(const ::std::string& value) {

  chainversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Statistics.chainVersion)
}
#if LANG_CXX11
inline void Statistics::set_chainversion(::std::string&& value) {

  chainversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.chainVersion)
}
#endif
inline void Statistics::set_chainversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  chainversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Statistics.chainVersion)
}
inline void Statistics::set_chainversion(const char* value, size_t size) {

  chainversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.chainVersion)
}
inline ::std::string* Statistics::mutable_chainversion() {

  // @@protoc_insertion_point(field_mutable:vega.Statistics.chainVersion)
  return chainversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Statistics::release_chainversion() {
  // @@protoc_insertion_point(field_release:vega.Statistics.chainVersion)

  return chainversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Statistics::set_allocated_chainversion(::std::string* chainversion) {
  if (chainversion != nullptr) {

  } else {

  }
  chainversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chainversion);
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.chainVersion)
}

// uint64 blockDuration = 31;
inline void Statistics::clear_blockduration() {
  blockduration_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Statistics::blockduration() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.blockDuration)
  return blockduration_;
}
inline void Statistics::set_blockduration(::google::protobuf::uint64 value) {

  blockduration_ = value;
  // @@protoc_insertion_point(field_set:vega.Statistics.blockDuration)
}

// string uptime = 32;
inline void Statistics::clear_uptime() {
  uptime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Statistics::uptime() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.uptime)
  return uptime_.GetNoArena();
}
inline void Statistics::set_uptime(const ::std::string& value) {

  uptime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Statistics.uptime)
}
#if LANG_CXX11
inline void Statistics::set_uptime(::std::string&& value) {

  uptime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.uptime)
}
#endif
inline void Statistics::set_uptime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  uptime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Statistics.uptime)
}
inline void Statistics::set_uptime(const char* value, size_t size) {

  uptime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.uptime)
}
inline ::std::string* Statistics::mutable_uptime() {

  // @@protoc_insertion_point(field_mutable:vega.Statistics.uptime)
  return uptime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Statistics::release_uptime() {
  // @@protoc_insertion_point(field_release:vega.Statistics.uptime)

  return uptime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Statistics::set_allocated_uptime(::std::string* uptime) {
  if (uptime != nullptr) {

  } else {

  }
  uptime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uptime);
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.uptime)
}

// string chainID = 33;
inline void Statistics::clear_chainid() {
  chainid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Statistics::chainid() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.chainID)
  return chainid_.GetNoArena();
}
inline void Statistics::set_chainid(const ::std::string& value) {

  chainid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Statistics.chainID)
}
#if LANG_CXX11
inline void Statistics::set_chainid(::std::string&& value) {

  chainid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.chainID)
}
#endif
inline void Statistics::set_chainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  chainid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Statistics.chainID)
}
inline void Statistics::set_chainid(const char* value, size_t size) {

  chainid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.chainID)
}
inline ::std::string* Statistics::mutable_chainid() {

  // @@protoc_insertion_point(field_mutable:vega.Statistics.chainID)
  return chainid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Statistics::release_chainid() {
  // @@protoc_insertion_point(field_release:vega.Statistics.chainID)

  return chainid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Statistics::set_allocated_chainid(::std::string* chainid) {
  if (chainid != nullptr) {

  } else {

  }
  chainid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chainid);
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.chainID)
}

// -------------------------------------------------------------------

// Deposit

// string id = 1;
inline void Deposit::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Deposit::id() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.id)
  return id_.GetNoArena();
}
inline void Deposit::set_id(const ::std::string& value) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Deposit.id)
}
#if LANG_CXX11
inline void Deposit::set_id(::std::string&& value) {

  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Deposit.id)
}
#endif
inline void Deposit::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Deposit.id)
}
inline void Deposit::set_id(const char* value, size_t size) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Deposit.id)
}
inline ::std::string* Deposit::mutable_id() {

  // @@protoc_insertion_point(field_mutable:vega.Deposit.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Deposit::release_id() {
  // @@protoc_insertion_point(field_release:vega.Deposit.id)

  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Deposit::set_allocated_id(::std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:vega.Deposit.id)
}

// .vega.Deposit.Status status = 2;
inline void Deposit::clear_status() {
  status_ = 0;
}
inline ::vega::Deposit_Status Deposit::status() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.status)
  return static_cast< ::vega::Deposit_Status >(status_);
}
inline void Deposit::set_status(::vega::Deposit_Status value) {

  status_ = value;
  // @@protoc_insertion_point(field_set:vega.Deposit.status)
}

// string partyID = 3;
inline void Deposit::clear_partyid() {
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Deposit::partyid() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.partyID)
  return partyid_.GetNoArena();
}
inline void Deposit::set_partyid(const ::std::string& value) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Deposit.partyID)
}
#if LANG_CXX11
inline void Deposit::set_partyid(::std::string&& value) {

  partyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Deposit.partyID)
}
#endif
inline void Deposit::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Deposit.partyID)
}
inline void Deposit::set_partyid(const char* value, size_t size) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Deposit.partyID)
}
inline ::std::string* Deposit::mutable_partyid() {

  // @@protoc_insertion_point(field_mutable:vega.Deposit.partyID)
  return partyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Deposit::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.Deposit.partyID)

  return partyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Deposit::set_allocated_partyid(::std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partyid);
  // @@protoc_insertion_point(field_set_allocated:vega.Deposit.partyID)
}

// string asset = 4;
inline void Deposit::clear_asset() {
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Deposit::asset() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.asset)
  return asset_.GetNoArena();
}
inline void Deposit::set_asset(const ::std::string& value) {

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Deposit.asset)
}
#if LANG_CXX11
inline void Deposit::set_asset(::std::string&& value) {

  asset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Deposit.asset)
}
#endif
inline void Deposit::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Deposit.asset)
}
inline void Deposit::set_asset(const char* value, size_t size) {

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Deposit.asset)
}
inline ::std::string* Deposit::mutable_asset() {

  // @@protoc_insertion_point(field_mutable:vega.Deposit.asset)
  return asset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Deposit::release_asset() {
  // @@protoc_insertion_point(field_release:vega.Deposit.asset)

  return asset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Deposit::set_allocated_asset(::std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset);
  // @@protoc_insertion_point(field_set_allocated:vega.Deposit.asset)
}

// string amount = 5;
inline void Deposit::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Deposit::amount() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.amount)
  return amount_.GetNoArena();
}
inline void Deposit::set_amount(const ::std::string& value) {

  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Deposit.amount)
}
#if LANG_CXX11
inline void Deposit::set_amount(::std::string&& value) {

  amount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Deposit.amount)
}
#endif
inline void Deposit::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Deposit.amount)
}
inline void Deposit::set_amount(const char* value, size_t size) {

  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Deposit.amount)
}
inline ::std::string* Deposit::mutable_amount() {

  // @@protoc_insertion_point(field_mutable:vega.Deposit.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Deposit::release_amount() {
  // @@protoc_insertion_point(field_release:vega.Deposit.amount)

  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Deposit::set_allocated_amount(::std::string* amount) {
  if (amount != nullptr) {

  } else {

  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:vega.Deposit.amount)
}

// string txHash = 6;
inline void Deposit::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Deposit::txhash() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.txHash)
  return txhash_.GetNoArena();
}
inline void Deposit::set_txhash(const ::std::string& value) {

  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Deposit.txHash)
}
#if LANG_CXX11
inline void Deposit::set_txhash(::std::string&& value) {

  txhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Deposit.txHash)
}
#endif
inline void Deposit::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Deposit.txHash)
}
inline void Deposit::set_txhash(const char* value, size_t size) {

  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Deposit.txHash)
}
inline ::std::string* Deposit::mutable_txhash() {

  // @@protoc_insertion_point(field_mutable:vega.Deposit.txHash)
  return txhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Deposit::release_txhash() {
  // @@protoc_insertion_point(field_release:vega.Deposit.txHash)

  return txhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Deposit::set_allocated_txhash(::std::string* txhash) {
  if (txhash != nullptr) {

  } else {

  }
  txhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:vega.Deposit.txHash)
}

// int64 creditedTimestamp = 7;
inline void Deposit::clear_creditedtimestamp() {
  creditedtimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Deposit::creditedtimestamp() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.creditedTimestamp)
  return creditedtimestamp_;
}
inline void Deposit::set_creditedtimestamp(::google::protobuf::int64 value) {

  creditedtimestamp_ = value;
  // @@protoc_insertion_point(field_set:vega.Deposit.creditedTimestamp)
}

// int64 createdTimestamp = 8;
inline void Deposit::clear_createdtimestamp() {
  createdtimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Deposit::createdtimestamp() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.createdTimestamp)
  return createdtimestamp_;
}
inline void Deposit::set_createdtimestamp(::google::protobuf::int64 value) {

  createdtimestamp_ = value;
  // @@protoc_insertion_point(field_set:vega.Deposit.createdTimestamp)
}

// -------------------------------------------------------------------

// Withdrawal

// string id = 1;
inline void Withdrawal::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Withdrawal::id() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.id)
  return id_.GetNoArena();
}
inline void Withdrawal::set_id(const ::std::string& value) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.id)
}
#if LANG_CXX11
inline void Withdrawal::set_id(::std::string&& value) {

  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Withdrawal.id)
}
#endif
inline void Withdrawal::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Withdrawal.id)
}
inline void Withdrawal::set_id(const char* value, size_t size) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Withdrawal.id)
}
inline ::std::string* Withdrawal::mutable_id() {

  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Withdrawal::release_id() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.id)

  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Withdrawal::set_allocated_id(::std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.id)
}

// string partyID = 2;
inline void Withdrawal::clear_partyid() {
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Withdrawal::partyid() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.partyID)
  return partyid_.GetNoArena();
}
inline void Withdrawal::set_partyid(const ::std::string& value) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.partyID)
}
#if LANG_CXX11
inline void Withdrawal::set_partyid(::std::string&& value) {

  partyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Withdrawal.partyID)
}
#endif
inline void Withdrawal::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Withdrawal.partyID)
}
inline void Withdrawal::set_partyid(const char* value, size_t size) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Withdrawal.partyID)
}
inline ::std::string* Withdrawal::mutable_partyid() {

  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.partyID)
  return partyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Withdrawal::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.partyID)

  return partyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Withdrawal::set_allocated_partyid(::std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partyid);
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.partyID)
}

// uint64 amount = 3;
inline void Withdrawal::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Withdrawal::amount() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.amount)
  return amount_;
}
inline void Withdrawal::set_amount(::google::protobuf::uint64 value) {

  amount_ = value;
  // @@protoc_insertion_point(field_set:vega.Withdrawal.amount)
}

// string asset = 4;
inline void Withdrawal::clear_asset() {
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Withdrawal::asset() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.asset)
  return asset_.GetNoArena();
}
inline void Withdrawal::set_asset(const ::std::string& value) {

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.asset)
}
#if LANG_CXX11
inline void Withdrawal::set_asset(::std::string&& value) {

  asset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Withdrawal.asset)
}
#endif
inline void Withdrawal::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Withdrawal.asset)
}
inline void Withdrawal::set_asset(const char* value, size_t size) {

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Withdrawal.asset)
}
inline ::std::string* Withdrawal::mutable_asset() {

  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.asset)
  return asset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Withdrawal::release_asset() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.asset)

  return asset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Withdrawal::set_allocated_asset(::std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset);
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.asset)
}

// .vega.Withdrawal.Status status = 5;
inline void Withdrawal::clear_status() {
  status_ = 0;
}
inline ::vega::Withdrawal_Status Withdrawal::status() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.status)
  return static_cast< ::vega::Withdrawal_Status >(status_);
}
inline void Withdrawal::set_status(::vega::Withdrawal_Status value) {

  status_ = value;
  // @@protoc_insertion_point(field_set:vega.Withdrawal.status)
}

// string ref = 6;
inline void Withdrawal::clear_ref() {
  ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Withdrawal::ref() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.ref)
  return ref_.GetNoArena();
}
inline void Withdrawal::set_ref(const ::std::string& value) {

  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.ref)
}
#if LANG_CXX11
inline void Withdrawal::set_ref(::std::string&& value) {

  ref_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Withdrawal.ref)
}
#endif
inline void Withdrawal::set_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Withdrawal.ref)
}
inline void Withdrawal::set_ref(const char* value, size_t size) {

  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Withdrawal.ref)
}
inline ::std::string* Withdrawal::mutable_ref() {

  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.ref)
  return ref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Withdrawal::release_ref() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.ref)

  return ref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Withdrawal::set_allocated_ref(::std::string* ref) {
  if (ref != nullptr) {

  } else {

  }
  ref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref);
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.ref)
}

// int64 expiry = 7;
inline void Withdrawal::clear_expiry() {
  expiry_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Withdrawal::expiry() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.expiry)
  return expiry_;
}
inline void Withdrawal::set_expiry(::google::protobuf::int64 value) {

  expiry_ = value;
  // @@protoc_insertion_point(field_set:vega.Withdrawal.expiry)
}

// string txHash = 8;
inline void Withdrawal::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Withdrawal::txhash() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.txHash)
  return txhash_.GetNoArena();
}
inline void Withdrawal::set_txhash(const ::std::string& value) {

  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.txHash)
}
#if LANG_CXX11
inline void Withdrawal::set_txhash(::std::string&& value) {

  txhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Withdrawal.txHash)
}
#endif
inline void Withdrawal::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Withdrawal.txHash)
}
inline void Withdrawal::set_txhash(const char* value, size_t size) {

  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Withdrawal.txHash)
}
inline ::std::string* Withdrawal::mutable_txhash() {

  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.txHash)
  return txhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Withdrawal::release_txhash() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.txHash)

  return txhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Withdrawal::set_allocated_txhash(::std::string* txhash) {
  if (txhash != nullptr) {

  } else {

  }
  txhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.txHash)
}

// int64 createdTimestamp = 9;
inline void Withdrawal::clear_createdtimestamp() {
  createdtimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Withdrawal::createdtimestamp() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.createdTimestamp)
  return createdtimestamp_;
}
inline void Withdrawal::set_createdtimestamp(::google::protobuf::int64 value) {

  createdtimestamp_ = value;
  // @@protoc_insertion_point(field_set:vega.Withdrawal.createdTimestamp)
}

// int64 withdrawnTimestamp = 10;
inline void Withdrawal::clear_withdrawntimestamp() {
  withdrawntimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Withdrawal::withdrawntimestamp() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.withdrawnTimestamp)
  return withdrawntimestamp_;
}
inline void Withdrawal::set_withdrawntimestamp(::google::protobuf::int64 value) {

  withdrawntimestamp_ = value;
  // @@protoc_insertion_point(field_set:vega.Withdrawal.withdrawnTimestamp)
}

// .vega.WithdrawExt ext = 11;
inline bool Withdrawal::has_ext() const {
  return this != internal_default_instance() && ext_ != nullptr;
}
inline void Withdrawal::clear_ext() {
  if (GetArenaNoVirtual() == nullptr && ext_ != nullptr) {
    delete ext_;
  }
  ext_ = nullptr;
}
inline const ::vega::WithdrawExt& Withdrawal::ext() const {
  const ::vega::WithdrawExt* p = ext_;
  // @@protoc_insertion_point(field_get:vega.Withdrawal.ext)
  return p != nullptr ? *p : *reinterpret_cast<const ::vega::WithdrawExt*>(
      &::vega::_WithdrawExt_default_instance_);
}
inline ::vega::WithdrawExt* Withdrawal::release_ext() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.ext)

  ::vega::WithdrawExt* temp = ext_;
  ext_ = nullptr;
  return temp;
}
inline ::vega::WithdrawExt* Withdrawal::mutable_ext() {

  if (ext_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::WithdrawExt>(GetArenaNoVirtual());
    ext_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.ext)
  return ext_;
}
inline void Withdrawal::set_allocated_ext(::vega::WithdrawExt* ext) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ext_;
  }
  if (ext) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ext, submessage_arena);
    }

  } else {

  }
  ext_ = ext;
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.ext)
}

// -------------------------------------------------------------------

// WithdrawSubmission

// string partyID = 1;
inline void WithdrawSubmission::clear_partyid() {
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WithdrawSubmission::partyid() const {
  // @@protoc_insertion_point(field_get:vega.WithdrawSubmission.partyID)
  return partyid_.GetNoArena();
}
inline void WithdrawSubmission::set_partyid(const ::std::string& value) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.WithdrawSubmission.partyID)
}
#if LANG_CXX11
inline void WithdrawSubmission::set_partyid(::std::string&& value) {

  partyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.WithdrawSubmission.partyID)
}
#endif
inline void WithdrawSubmission::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.WithdrawSubmission.partyID)
}
inline void WithdrawSubmission::set_partyid(const char* value, size_t size) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.WithdrawSubmission.partyID)
}
inline ::std::string* WithdrawSubmission::mutable_partyid() {

  // @@protoc_insertion_point(field_mutable:vega.WithdrawSubmission.partyID)
  return partyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WithdrawSubmission::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.WithdrawSubmission.partyID)

  return partyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WithdrawSubmission::set_allocated_partyid(::std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partyid);
  // @@protoc_insertion_point(field_set_allocated:vega.WithdrawSubmission.partyID)
}

// uint64 amount = 2;
inline void WithdrawSubmission::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WithdrawSubmission::amount() const {
  // @@protoc_insertion_point(field_get:vega.WithdrawSubmission.amount)
  return amount_;
}
inline void WithdrawSubmission::set_amount(::google::protobuf::uint64 value) {

  amount_ = value;
  // @@protoc_insertion_point(field_set:vega.WithdrawSubmission.amount)
}

// string asset = 3;
inline void WithdrawSubmission::clear_asset() {
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WithdrawSubmission::asset() const {
  // @@protoc_insertion_point(field_get:vega.WithdrawSubmission.asset)
  return asset_.GetNoArena();
}
inline void WithdrawSubmission::set_asset(const ::std::string& value) {

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.WithdrawSubmission.asset)
}
#if LANG_CXX11
inline void WithdrawSubmission::set_asset(::std::string&& value) {

  asset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.WithdrawSubmission.asset)
}
#endif
inline void WithdrawSubmission::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.WithdrawSubmission.asset)
}
inline void WithdrawSubmission::set_asset(const char* value, size_t size) {

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.WithdrawSubmission.asset)
}
inline ::std::string* WithdrawSubmission::mutable_asset() {

  // @@protoc_insertion_point(field_mutable:vega.WithdrawSubmission.asset)
  return asset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WithdrawSubmission::release_asset() {
  // @@protoc_insertion_point(field_release:vega.WithdrawSubmission.asset)

  return asset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WithdrawSubmission::set_allocated_asset(::std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset);
  // @@protoc_insertion_point(field_set_allocated:vega.WithdrawSubmission.asset)
}

// .vega.WithdrawExt ext = 4;
inline bool WithdrawSubmission::has_ext() const {
  return this != internal_default_instance() && ext_ != nullptr;
}
inline void WithdrawSubmission::clear_ext() {
  if (GetArenaNoVirtual() == nullptr && ext_ != nullptr) {
    delete ext_;
  }
  ext_ = nullptr;
}
inline const ::vega::WithdrawExt& WithdrawSubmission::ext() const {
  const ::vega::WithdrawExt* p = ext_;
  // @@protoc_insertion_point(field_get:vega.WithdrawSubmission.ext)
  return p != nullptr ? *p : *reinterpret_cast<const ::vega::WithdrawExt*>(
      &::vega::_WithdrawExt_default_instance_);
}
inline ::vega::WithdrawExt* WithdrawSubmission::release_ext() {
  // @@protoc_insertion_point(field_release:vega.WithdrawSubmission.ext)

  ::vega::WithdrawExt* temp = ext_;
  ext_ = nullptr;
  return temp;
}
inline ::vega::WithdrawExt* WithdrawSubmission::mutable_ext() {

  if (ext_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::WithdrawExt>(GetArenaNoVirtual());
    ext_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vega.WithdrawSubmission.ext)
  return ext_;
}
inline void WithdrawSubmission::set_allocated_ext(::vega::WithdrawExt* ext) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ext_;
  }
  if (ext) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ext, submessage_arena);
    }

  } else {

  }
  ext_ = ext;
  // @@protoc_insertion_point(field_set_allocated:vega.WithdrawSubmission.ext)
}

// -------------------------------------------------------------------

// WithdrawExt

// .vega.Erc20WithdrawExt erc20 = 1;
inline bool WithdrawExt::has_erc20() const {
  return ext_case() == kErc20;
}
inline void WithdrawExt::set_has_erc20() {
  _oneof_case_[0] = kErc20;
}
inline void WithdrawExt::clear_erc20() {
  if (has_erc20()) {
    delete ext_.erc20_;
    clear_has_ext();
  }
}
inline ::vega::Erc20WithdrawExt* WithdrawExt::release_erc20() {
  // @@protoc_insertion_point(field_release:vega.WithdrawExt.erc20)
  if (has_erc20()) {
    clear_has_ext();
      ::vega::Erc20WithdrawExt* temp = ext_.erc20_;
    ext_.erc20_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Erc20WithdrawExt& WithdrawExt::erc20() const {
  // @@protoc_insertion_point(field_get:vega.WithdrawExt.erc20)
  return has_erc20()
      ? *ext_.erc20_
      : *reinterpret_cast< ::vega::Erc20WithdrawExt*>(&::vega::_Erc20WithdrawExt_default_instance_);
}
inline ::vega::Erc20WithdrawExt* WithdrawExt::mutable_erc20() {
  if (!has_erc20()) {
    clear_ext();
    set_has_erc20();
    ext_.erc20_ = CreateMaybeMessage< ::vega::Erc20WithdrawExt >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:vega.WithdrawExt.erc20)
  return ext_.erc20_;
}

inline bool WithdrawExt::has_ext() const {
  return ext_case() != EXT_NOT_SET;
}
inline void WithdrawExt::clear_has_ext() {
  _oneof_case_[0] = EXT_NOT_SET;
}
inline WithdrawExt::ExtCase WithdrawExt::ext_case() const {
  return WithdrawExt::ExtCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Erc20WithdrawExt

// string receiverAddress = 1;
inline void Erc20WithdrawExt::clear_receiveraddress() {
  receiveraddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Erc20WithdrawExt::receiveraddress() const {
  // @@protoc_insertion_point(field_get:vega.Erc20WithdrawExt.receiverAddress)
  return receiveraddress_.GetNoArena();
}
inline void Erc20WithdrawExt::set_receiveraddress(const ::std::string& value) {

  receiveraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Erc20WithdrawExt.receiverAddress)
}
#if LANG_CXX11
inline void Erc20WithdrawExt::set_receiveraddress(::std::string&& value) {

  receiveraddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Erc20WithdrawExt.receiverAddress)
}
#endif
inline void Erc20WithdrawExt::set_receiveraddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  receiveraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Erc20WithdrawExt.receiverAddress)
}
inline void Erc20WithdrawExt::set_receiveraddress(const char* value, size_t size) {

  receiveraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Erc20WithdrawExt.receiverAddress)
}
inline ::std::string* Erc20WithdrawExt::mutable_receiveraddress() {

  // @@protoc_insertion_point(field_mutable:vega.Erc20WithdrawExt.receiverAddress)
  return receiveraddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Erc20WithdrawExt::release_receiveraddress() {
  // @@protoc_insertion_point(field_release:vega.Erc20WithdrawExt.receiverAddress)

  return receiveraddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Erc20WithdrawExt::set_allocated_receiveraddress(::std::string* receiveraddress) {
  if (receiveraddress != nullptr) {

  } else {

  }
  receiveraddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiveraddress);
  // @@protoc_insertion_point(field_set_allocated:vega.Erc20WithdrawExt.receiverAddress)
}

// -------------------------------------------------------------------

// OrderAmendment

// string orderID = 1 [(.validator.field) = {
inline void OrderAmendment::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderAmendment::orderid() const {
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.orderID)
  return orderid_.GetNoArena();
}
inline void OrderAmendment::set_orderid(const ::std::string& value) {

  orderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.OrderAmendment.orderID)
}
#if LANG_CXX11
inline void OrderAmendment::set_orderid(::std::string&& value) {

  orderid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderAmendment.orderID)
}
#endif
inline void OrderAmendment::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  orderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.OrderAmendment.orderID)
}
inline void OrderAmendment::set_orderid(const char* value, size_t size) {

  orderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.OrderAmendment.orderID)
}
inline ::std::string* OrderAmendment::mutable_orderid() {

  // @@protoc_insertion_point(field_mutable:vega.OrderAmendment.orderID)
  return orderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderAmendment::release_orderid() {
  // @@protoc_insertion_point(field_release:vega.OrderAmendment.orderID)

  return orderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderAmendment::set_allocated_orderid(::std::string* orderid) {
  if (orderid != nullptr) {

  } else {

  }
  orderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:vega.OrderAmendment.orderID)
}

// string partyID = 2 [(.validator.field) = {
inline void OrderAmendment::clear_partyid() {
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderAmendment::partyid() const {
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.partyID)
  return partyid_.GetNoArena();
}
inline void OrderAmendment::set_partyid(const ::std::string& value) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.OrderAmendment.partyID)
}
#if LANG_CXX11
inline void OrderAmendment::set_partyid(::std::string&& value) {

  partyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderAmendment.partyID)
}
#endif
inline void OrderAmendment::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.OrderAmendment.partyID)
}
inline void OrderAmendment::set_partyid(const char* value, size_t size) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.OrderAmendment.partyID)
}
inline ::std::string* OrderAmendment::mutable_partyid() {

  // @@protoc_insertion_point(field_mutable:vega.OrderAmendment.partyID)
  return partyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderAmendment::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.OrderAmendment.partyID)

  return partyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderAmendment::set_allocated_partyid(::std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partyid);
  // @@protoc_insertion_point(field_set_allocated:vega.OrderAmendment.partyID)
}

// string marketID = 3;
inline void OrderAmendment::clear_marketid() {
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderAmendment::marketid() const {
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.marketID)
  return marketid_.GetNoArena();
}
inline void OrderAmendment::set_marketid(const ::std::string& value) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.OrderAmendment.marketID)
}
#if LANG_CXX11
inline void OrderAmendment::set_marketid(::std::string&& value) {

  marketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderAmendment.marketID)
}
#endif
inline void OrderAmendment::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.OrderAmendment.marketID)
}
inline void OrderAmendment::set_marketid(const char* value, size_t size) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.OrderAmendment.marketID)
}
inline ::std::string* OrderAmendment::mutable_marketid() {

  // @@protoc_insertion_point(field_mutable:vega.OrderAmendment.marketID)
  return marketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderAmendment::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.OrderAmendment.marketID)

  return marketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderAmendment::set_allocated_marketid(::std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketid);
  // @@protoc_insertion_point(field_set_allocated:vega.OrderAmendment.marketID)
}

// .vega.Price price = 4;
inline bool OrderAmendment::has_price() const {
  return this != internal_default_instance() && price_ != nullptr;
}
inline void OrderAmendment::clear_price() {
  if (GetArenaNoVirtual() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
}
inline const ::vega::Price& OrderAmendment::price() const {
  const ::vega::Price* p = price_;
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.price)
  return p != nullptr ? *p : *reinterpret_cast<const ::vega::Price*>(
      &::vega::_Price_default_instance_);
}
inline ::vega::Price* OrderAmendment::release_price() {
  // @@protoc_insertion_point(field_release:vega.OrderAmendment.price)

  ::vega::Price* temp = price_;
  price_ = nullptr;
  return temp;
}
inline ::vega::Price* OrderAmendment::mutable_price() {

  if (price_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Price>(GetArenaNoVirtual());
    price_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vega.OrderAmendment.price)
  return price_;
}
inline void OrderAmendment::set_allocated_price(::vega::Price* price) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete price_;
  }
  if (price) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      price = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }

  } else {

  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:vega.OrderAmendment.price)
}

// int64 sizeDelta = 5;
inline void OrderAmendment::clear_sizedelta() {
  sizedelta_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 OrderAmendment::sizedelta() const {
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.sizeDelta)
  return sizedelta_;
}
inline void OrderAmendment::set_sizedelta(::google::protobuf::int64 value) {

  sizedelta_ = value;
  // @@protoc_insertion_point(field_set:vega.OrderAmendment.sizeDelta)
}

// .vega.Timestamp expiresAt = 6;
inline bool OrderAmendment::has_expiresat() const {
  return this != internal_default_instance() && expiresat_ != nullptr;
}
inline void OrderAmendment::clear_expiresat() {
  if (GetArenaNoVirtual() == nullptr && expiresat_ != nullptr) {
    delete expiresat_;
  }
  expiresat_ = nullptr;
}
inline const ::vega::Timestamp& OrderAmendment::expiresat() const {
  const ::vega::Timestamp* p = expiresat_;
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.expiresAt)
  return p != nullptr ? *p : *reinterpret_cast<const ::vega::Timestamp*>(
      &::vega::_Timestamp_default_instance_);
}
inline ::vega::Timestamp* OrderAmendment::release_expiresat() {
  // @@protoc_insertion_point(field_release:vega.OrderAmendment.expiresAt)

  ::vega::Timestamp* temp = expiresat_;
  expiresat_ = nullptr;
  return temp;
}
inline ::vega::Timestamp* OrderAmendment::mutable_expiresat() {

  if (expiresat_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Timestamp>(GetArenaNoVirtual());
    expiresat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vega.OrderAmendment.expiresAt)
  return expiresat_;
}
inline void OrderAmendment::set_allocated_expiresat(::vega::Timestamp* expiresat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expiresat_;
  }
  if (expiresat) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expiresat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expiresat, submessage_arena);
    }

  } else {

  }
  expiresat_ = expiresat;
  // @@protoc_insertion_point(field_set_allocated:vega.OrderAmendment.expiresAt)
}

// .vega.Order.TimeInForce timeInForce = 7;
inline void OrderAmendment::clear_timeinforce() {
  timeinforce_ = 0;
}
inline ::vega::Order_TimeInForce OrderAmendment::timeinforce() const {
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.timeInForce)
  return static_cast< ::vega::Order_TimeInForce >(timeinforce_);
}
inline void OrderAmendment::set_timeinforce(::vega::Order_TimeInForce value) {

  timeinforce_ = value;
  // @@protoc_insertion_point(field_set:vega.OrderAmendment.timeInForce)
}

// -------------------------------------------------------------------

// OrderSubmission

// string id = 1 [(.validator.field) = {
inline void OrderSubmission::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderSubmission::id() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.id)
  return id_.GetNoArena();
}
inline void OrderSubmission::set_id(const ::std::string& value) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.id)
}
#if LANG_CXX11
inline void OrderSubmission::set_id(::std::string&& value) {

  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderSubmission.id)
}
#endif
inline void OrderSubmission::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.OrderSubmission.id)
}
inline void OrderSubmission::set_id(const char* value, size_t size) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.OrderSubmission.id)
}
inline ::std::string* OrderSubmission::mutable_id() {

  // @@protoc_insertion_point(field_mutable:vega.OrderSubmission.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderSubmission::release_id() {
  // @@protoc_insertion_point(field_release:vega.OrderSubmission.id)

  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderSubmission::set_allocated_id(::std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:vega.OrderSubmission.id)
}

// string marketID = 2 [(.validator.field) = {
inline void OrderSubmission::clear_marketid() {
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderSubmission::marketid() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.marketID)
  return marketid_.GetNoArena();
}
inline void OrderSubmission::set_marketid(const ::std::string& value) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.marketID)
}
#if LANG_CXX11
inline void OrderSubmission::set_marketid(::std::string&& value) {

  marketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderSubmission.marketID)
}
#endif
inline void OrderSubmission::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.OrderSubmission.marketID)
}
inline void OrderSubmission::set_marketid(const char* value, size_t size) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.OrderSubmission.marketID)
}
inline ::std::string* OrderSubmission::mutable_marketid() {

  // @@protoc_insertion_point(field_mutable:vega.OrderSubmission.marketID)
  return marketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderSubmission::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.OrderSubmission.marketID)

  return marketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderSubmission::set_allocated_marketid(::std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketid);
  // @@protoc_insertion_point(field_set_allocated:vega.OrderSubmission.marketID)
}

// string partyID = 3 [(.validator.field) = {
inline void OrderSubmission::clear_partyid() {
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderSubmission::partyid() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.partyID)
  return partyid_.GetNoArena();
}
inline void OrderSubmission::set_partyid(const ::std::string& value) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.partyID)
}
#if LANG_CXX11
inline void OrderSubmission::set_partyid(::std::string&& value) {

  partyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderSubmission.partyID)
}
#endif
inline void OrderSubmission::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.OrderSubmission.partyID)
}
inline void OrderSubmission::set_partyid(const char* value, size_t size) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.OrderSubmission.partyID)
}
inline ::std::string* OrderSubmission::mutable_partyid() {

  // @@protoc_insertion_point(field_mutable:vega.OrderSubmission.partyID)
  return partyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderSubmission::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.OrderSubmission.partyID)

  return partyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderSubmission::set_allocated_partyid(::std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partyid);
  // @@protoc_insertion_point(field_set_allocated:vega.OrderSubmission.partyID)
}

// uint64 price = 4;
inline void OrderSubmission::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 OrderSubmission::price() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.price)
  return price_;
}
inline void OrderSubmission::set_price(::google::protobuf::uint64 value) {

  price_ = value;
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.price)
}

// uint64 size = 5 [(.validator.field) = {
inline void OrderSubmission::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 OrderSubmission::size() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.size)
  return size_;
}
inline void OrderSubmission::set_size(::google::protobuf::uint64 value) {

  size_ = value;
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.size)
}

// .vega.Side side = 6 [(.validator.field) = {
inline void OrderSubmission::clear_side() {
  side_ = 0;
}
inline ::vega::Side OrderSubmission::side() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.side)
  return static_cast< ::vega::Side >(side_);
}
inline void OrderSubmission::set_side(::vega::Side value) {

  side_ = value;
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.side)
}

// .vega.Order.TimeInForce timeInForce = 7 [(.validator.field) = {
inline void OrderSubmission::clear_timeinforce() {
  timeinforce_ = 0;
}
inline ::vega::Order_TimeInForce OrderSubmission::timeinforce() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.timeInForce)
  return static_cast< ::vega::Order_TimeInForce >(timeinforce_);
}
inline void OrderSubmission::set_timeinforce(::vega::Order_TimeInForce value) {

  timeinforce_ = value;
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.timeInForce)
}

// int64 expiresAt = 8;
inline void OrderSubmission::clear_expiresat() {
  expiresat_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 OrderSubmission::expiresat() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.expiresAt)
  return expiresat_;
}
inline void OrderSubmission::set_expiresat(::google::protobuf::int64 value) {

  expiresat_ = value;
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.expiresAt)
}

// .vega.Order.Type type = 9 [(.validator.field) = {
inline void OrderSubmission::clear_type() {
  type_ = 0;
}
inline ::vega::Order_Type OrderSubmission::type() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.type)
  return static_cast< ::vega::Order_Type >(type_);
}
inline void OrderSubmission::set_type(::vega::Order_Type value) {

  type_ = value;
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.type)
}

// string reference = 10;
inline void OrderSubmission::clear_reference() {
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderSubmission::reference() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.reference)
  return reference_.GetNoArena();
}
inline void OrderSubmission::set_reference(const ::std::string& value) {

  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.reference)
}
#if LANG_CXX11
inline void OrderSubmission::set_reference(::std::string&& value) {

  reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderSubmission.reference)
}
#endif
inline void OrderSubmission::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.OrderSubmission.reference)
}
inline void OrderSubmission::set_reference(const char* value, size_t size) {

  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.OrderSubmission.reference)
}
inline ::std::string* OrderSubmission::mutable_reference() {

  // @@protoc_insertion_point(field_mutable:vega.OrderSubmission.reference)
  return reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderSubmission::release_reference() {
  // @@protoc_insertion_point(field_release:vega.OrderSubmission.reference)

  return reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderSubmission::set_allocated_reference(::std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference);
  // @@protoc_insertion_point(field_set_allocated:vega.OrderSubmission.reference)
}

// -------------------------------------------------------------------

// OrderCancellation

// string orderID = 1;
inline void OrderCancellation::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderCancellation::orderid() const {
  // @@protoc_insertion_point(field_get:vega.OrderCancellation.orderID)
  return orderid_.GetNoArena();
}
inline void OrderCancellation::set_orderid(const ::std::string& value) {

  orderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.OrderCancellation.orderID)
}
#if LANG_CXX11
inline void OrderCancellation::set_orderid(::std::string&& value) {

  orderid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderCancellation.orderID)
}
#endif
inline void OrderCancellation::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  orderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.OrderCancellation.orderID)
}
inline void OrderCancellation::set_orderid(const char* value, size_t size) {

  orderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.OrderCancellation.orderID)
}
inline ::std::string* OrderCancellation::mutable_orderid() {

  // @@protoc_insertion_point(field_mutable:vega.OrderCancellation.orderID)
  return orderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderCancellation::release_orderid() {
  // @@protoc_insertion_point(field_release:vega.OrderCancellation.orderID)

  return orderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderCancellation::set_allocated_orderid(::std::string* orderid) {
  if (orderid != nullptr) {

  } else {

  }
  orderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:vega.OrderCancellation.orderID)
}

// string marketID = 2;
inline void OrderCancellation::clear_marketid() {
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderCancellation::marketid() const {
  // @@protoc_insertion_point(field_get:vega.OrderCancellation.marketID)
  return marketid_.GetNoArena();
}
inline void OrderCancellation::set_marketid(const ::std::string& value) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.OrderCancellation.marketID)
}
#if LANG_CXX11
inline void OrderCancellation::set_marketid(::std::string&& value) {

  marketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderCancellation.marketID)
}
#endif
inline void OrderCancellation::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.OrderCancellation.marketID)
}
inline void OrderCancellation::set_marketid(const char* value, size_t size) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.OrderCancellation.marketID)
}
inline ::std::string* OrderCancellation::mutable_marketid() {

  // @@protoc_insertion_point(field_mutable:vega.OrderCancellation.marketID)
  return marketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderCancellation::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.OrderCancellation.marketID)

  return marketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderCancellation::set_allocated_marketid(::std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketid);
  // @@protoc_insertion_point(field_set_allocated:vega.OrderCancellation.marketID)
}

// string partyID = 3 [(.validator.field) = {
inline void OrderCancellation::clear_partyid() {
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderCancellation::partyid() const {
  // @@protoc_insertion_point(field_get:vega.OrderCancellation.partyID)
  return partyid_.GetNoArena();
}
inline void OrderCancellation::set_partyid(const ::std::string& value) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.OrderCancellation.partyID)
}
#if LANG_CXX11
inline void OrderCancellation::set_partyid(::std::string&& value) {

  partyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderCancellation.partyID)
}
#endif
inline void OrderCancellation::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.OrderCancellation.partyID)
}
inline void OrderCancellation::set_partyid(const char* value, size_t size) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.OrderCancellation.partyID)
}
inline ::std::string* OrderCancellation::mutable_partyid() {

  // @@protoc_insertion_point(field_mutable:vega.OrderCancellation.partyID)
  return partyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderCancellation::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.OrderCancellation.partyID)

  return partyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderCancellation::set_allocated_partyid(::std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partyid);
  // @@protoc_insertion_point(field_set_allocated:vega.OrderCancellation.partyID)
}

// -------------------------------------------------------------------

// NodeRegistration

// bytes pubKey = 1 [(.validator.field) = {
inline void NodeRegistration::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeRegistration::pubkey() const {
  // @@protoc_insertion_point(field_get:vega.NodeRegistration.pubKey)
  return pubkey_.GetNoArena();
}
inline void NodeRegistration::set_pubkey(const ::std::string& value) {

  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.NodeRegistration.pubKey)
}
#if LANG_CXX11
inline void NodeRegistration::set_pubkey(::std::string&& value) {

  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.NodeRegistration.pubKey)
}
#endif
inline void NodeRegistration::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.NodeRegistration.pubKey)
}
inline void NodeRegistration::set_pubkey(const void* value, size_t size) {

  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.NodeRegistration.pubKey)
}
inline ::std::string* NodeRegistration::mutable_pubkey() {

  // @@protoc_insertion_point(field_mutable:vega.NodeRegistration.pubKey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeRegistration::release_pubkey() {
  // @@protoc_insertion_point(field_release:vega.NodeRegistration.pubKey)

  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeRegistration::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != nullptr) {

  } else {

  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:vega.NodeRegistration.pubKey)
}

// bytes chainPubKey = 2 [(.validator.field) = {
inline void NodeRegistration::clear_chainpubkey() {
  chainpubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeRegistration::chainpubkey() const {
  // @@protoc_insertion_point(field_get:vega.NodeRegistration.chainPubKey)
  return chainpubkey_.GetNoArena();
}
inline void NodeRegistration::set_chainpubkey(const ::std::string& value) {

  chainpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.NodeRegistration.chainPubKey)
}
#if LANG_CXX11
inline void NodeRegistration::set_chainpubkey(::std::string&& value) {

  chainpubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.NodeRegistration.chainPubKey)
}
#endif
inline void NodeRegistration::set_chainpubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  chainpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.NodeRegistration.chainPubKey)
}
inline void NodeRegistration::set_chainpubkey(const void* value, size_t size) {

  chainpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.NodeRegistration.chainPubKey)
}
inline ::std::string* NodeRegistration::mutable_chainpubkey() {

  // @@protoc_insertion_point(field_mutable:vega.NodeRegistration.chainPubKey)
  return chainpubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeRegistration::release_chainpubkey() {
  // @@protoc_insertion_point(field_release:vega.NodeRegistration.chainPubKey)

  return chainpubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeRegistration::set_allocated_chainpubkey(::std::string* chainpubkey) {
  if (chainpubkey != nullptr) {

  } else {

  }
  chainpubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chainpubkey);
  // @@protoc_insertion_point(field_set_allocated:vega.NodeRegistration.chainPubKey)
}

// -------------------------------------------------------------------

// NodeVote

// bytes pubKey = 1 [(.validator.field) = {
inline void NodeVote::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeVote::pubkey() const {
  // @@protoc_insertion_point(field_get:vega.NodeVote.pubKey)
  return pubkey_.GetNoArena();
}
inline void NodeVote::set_pubkey(const ::std::string& value) {

  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.NodeVote.pubKey)
}
#if LANG_CXX11
inline void NodeVote::set_pubkey(::std::string&& value) {

  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.NodeVote.pubKey)
}
#endif
inline void NodeVote::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.NodeVote.pubKey)
}
inline void NodeVote::set_pubkey(const void* value, size_t size) {

  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.NodeVote.pubKey)
}
inline ::std::string* NodeVote::mutable_pubkey() {

  // @@protoc_insertion_point(field_mutable:vega.NodeVote.pubKey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeVote::release_pubkey() {
  // @@protoc_insertion_point(field_release:vega.NodeVote.pubKey)

  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeVote::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != nullptr) {

  } else {

  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:vega.NodeVote.pubKey)
}

// string reference = 2 [(.validator.field) = {
inline void NodeVote::clear_reference() {
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeVote::reference() const {
  // @@protoc_insertion_point(field_get:vega.NodeVote.reference)
  return reference_.GetNoArena();
}
inline void NodeVote::set_reference(const ::std::string& value) {

  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.NodeVote.reference)
}
#if LANG_CXX11
inline void NodeVote::set_reference(::std::string&& value) {

  reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.NodeVote.reference)
}
#endif
inline void NodeVote::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.NodeVote.reference)
}
inline void NodeVote::set_reference(const char* value, size_t size) {

  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.NodeVote.reference)
}
inline ::std::string* NodeVote::mutable_reference() {

  // @@protoc_insertion_point(field_mutable:vega.NodeVote.reference)
  return reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeVote::release_reference() {
  // @@protoc_insertion_point(field_release:vega.NodeVote.reference)

  return reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeVote::set_allocated_reference(::std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference);
  // @@protoc_insertion_point(field_set_allocated:vega.NodeVote.reference)
}

// -------------------------------------------------------------------

// Account

// string id = 1;
inline void Account::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::id() const {
  // @@protoc_insertion_point(field_get:vega.Account.id)
  return id_.GetNoArena();
}
inline void Account::set_id(const ::std::string& value) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Account.id)
}
#if LANG_CXX11
inline void Account::set_id(::std::string&& value) {

  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Account.id)
}
#endif
inline void Account::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Account.id)
}
inline void Account::set_id(const char* value, size_t size) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Account.id)
}
inline ::std::string* Account::mutable_id() {

  // @@protoc_insertion_point(field_mutable:vega.Account.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_id() {
  // @@protoc_insertion_point(field_release:vega.Account.id)

  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_id(::std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:vega.Account.id)
}

// string owner = 2;
inline void Account::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::owner() const {
  // @@protoc_insertion_point(field_get:vega.Account.owner)
  return owner_.GetNoArena();
}
inline void Account::set_owner(const ::std::string& value) {

  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Account.owner)
}
#if LANG_CXX11
inline void Account::set_owner(::std::string&& value) {

  owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Account.owner)
}
#endif
inline void Account::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Account.owner)
}
inline void Account::set_owner(const char* value, size_t size) {

  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Account.owner)
}
inline ::std::string* Account::mutable_owner() {

  // @@protoc_insertion_point(field_mutable:vega.Account.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_owner() {
  // @@protoc_insertion_point(field_release:vega.Account.owner)

  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_owner(::std::string* owner) {
  if (owner != nullptr) {

  } else {

  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:vega.Account.owner)
}

// uint64 balance = 3;
inline void Account::clear_balance() {
  balance_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Account::balance() const {
  // @@protoc_insertion_point(field_get:vega.Account.balance)
  return balance_;
}
inline void Account::set_balance(::google::protobuf::uint64 value) {

  balance_ = value;
  // @@protoc_insertion_point(field_set:vega.Account.balance)
}

// string asset = 4;
inline void Account::clear_asset() {
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::asset() const {
  // @@protoc_insertion_point(field_get:vega.Account.asset)
  return asset_.GetNoArena();
}
inline void Account::set_asset(const ::std::string& value) {

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Account.asset)
}
#if LANG_CXX11
inline void Account::set_asset(::std::string&& value) {

  asset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Account.asset)
}
#endif
inline void Account::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Account.asset)
}
inline void Account::set_asset(const char* value, size_t size) {

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Account.asset)
}
inline ::std::string* Account::mutable_asset() {

  // @@protoc_insertion_point(field_mutable:vega.Account.asset)
  return asset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_asset() {
  // @@protoc_insertion_point(field_release:vega.Account.asset)

  return asset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_asset(::std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset);
  // @@protoc_insertion_point(field_set_allocated:vega.Account.asset)
}

// string marketID = 5;
inline void Account::clear_marketid() {
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::marketid() const {
  // @@protoc_insertion_point(field_get:vega.Account.marketID)
  return marketid_.GetNoArena();
}
inline void Account::set_marketid(const ::std::string& value) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Account.marketID)
}
#if LANG_CXX11
inline void Account::set_marketid(::std::string&& value) {

  marketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Account.marketID)
}
#endif
inline void Account::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Account.marketID)
}
inline void Account::set_marketid(const char* value, size_t size) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Account.marketID)
}
inline ::std::string* Account::mutable_marketid() {

  // @@protoc_insertion_point(field_mutable:vega.Account.marketID)
  return marketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.Account.marketID)

  return marketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_marketid(::std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketid);
  // @@protoc_insertion_point(field_set_allocated:vega.Account.marketID)
}

// .vega.AccountType type = 6;
inline void Account::clear_type() {
  type_ = 0;
}
inline ::vega::AccountType Account::type() const {
  // @@protoc_insertion_point(field_get:vega.Account.type)
  return static_cast< ::vega::AccountType >(type_);
}
inline void Account::set_type(::vega::AccountType value) {

  type_ = value;
  // @@protoc_insertion_point(field_set:vega.Account.type)
}

// -------------------------------------------------------------------

// FinancialAmount

// int64 amount = 1;
inline void FinancialAmount::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 FinancialAmount::amount() const {
  // @@protoc_insertion_point(field_get:vega.FinancialAmount.amount)
  return amount_;
}
inline void FinancialAmount::set_amount(::google::protobuf::int64 value) {

  amount_ = value;
  // @@protoc_insertion_point(field_set:vega.FinancialAmount.amount)
}

// string asset = 2;
inline void FinancialAmount::clear_asset() {
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FinancialAmount::asset() const {
  // @@protoc_insertion_point(field_get:vega.FinancialAmount.asset)
  return asset_.GetNoArena();
}
inline void FinancialAmount::set_asset(const ::std::string& value) {

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.FinancialAmount.asset)
}
#if LANG_CXX11
inline void FinancialAmount::set_asset(::std::string&& value) {

  asset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.FinancialAmount.asset)
}
#endif
inline void FinancialAmount::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.FinancialAmount.asset)
}
inline void FinancialAmount::set_asset(const char* value, size_t size) {

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.FinancialAmount.asset)
}
inline ::std::string* FinancialAmount::mutable_asset() {

  // @@protoc_insertion_point(field_mutable:vega.FinancialAmount.asset)
  return asset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FinancialAmount::release_asset() {
  // @@protoc_insertion_point(field_release:vega.FinancialAmount.asset)

  return asset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FinancialAmount::set_allocated_asset(::std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset);
  // @@protoc_insertion_point(field_set_allocated:vega.FinancialAmount.asset)
}

// -------------------------------------------------------------------

// Transfer

// string owner = 1;
inline void Transfer::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transfer::owner() const {
  // @@protoc_insertion_point(field_get:vega.Transfer.owner)
  return owner_.GetNoArena();
}
inline void Transfer::set_owner(const ::std::string& value) {

  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Transfer.owner)
}
#if LANG_CXX11
inline void Transfer::set_owner(::std::string&& value) {

  owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Transfer.owner)
}
#endif
inline void Transfer::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Transfer.owner)
}
inline void Transfer::set_owner(const char* value, size_t size) {

  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Transfer.owner)
}
inline ::std::string* Transfer::mutable_owner() {

  // @@protoc_insertion_point(field_mutable:vega.Transfer.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transfer::release_owner() {
  // @@protoc_insertion_point(field_release:vega.Transfer.owner)

  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transfer::set_allocated_owner(::std::string* owner) {
  if (owner != nullptr) {

  } else {

  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:vega.Transfer.owner)
}

// .vega.FinancialAmount amount = 2;
inline bool Transfer::has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline void Transfer::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::vega::FinancialAmount& Transfer::amount() const {
  const ::vega::FinancialAmount* p = amount_;
  // @@protoc_insertion_point(field_get:vega.Transfer.amount)
  return p != nullptr ? *p : *reinterpret_cast<const ::vega::FinancialAmount*>(
      &::vega::_FinancialAmount_default_instance_);
}
inline ::vega::FinancialAmount* Transfer::release_amount() {
  // @@protoc_insertion_point(field_release:vega.Transfer.amount)

  ::vega::FinancialAmount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::vega::FinancialAmount* Transfer::mutable_amount() {

  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::FinancialAmount>(GetArenaNoVirtual());
    amount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vega.Transfer.amount)
  return amount_;
}
inline void Transfer::set_allocated_amount(::vega::FinancialAmount* amount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }

  } else {

  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:vega.Transfer.amount)
}

// .vega.TransferType type = 3;
inline void Transfer::clear_type() {
  type_ = 0;
}
inline ::vega::TransferType Transfer::type() const {
  // @@protoc_insertion_point(field_get:vega.Transfer.type)
  return static_cast< ::vega::TransferType >(type_);
}
inline void Transfer::set_type(::vega::TransferType value) {

  type_ = value;
  // @@protoc_insertion_point(field_set:vega.Transfer.type)
}

// int64 minAmount = 4;
inline void Transfer::clear_minamount() {
  minamount_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Transfer::minamount() const {
  // @@protoc_insertion_point(field_get:vega.Transfer.minAmount)
  return minamount_;
}
inline void Transfer::set_minamount(::google::protobuf::int64 value) {

  minamount_ = value;
  // @@protoc_insertion_point(field_set:vega.Transfer.minAmount)
}

// -------------------------------------------------------------------

// TransferRequest

// repeated .vega.Account fromAccount = 1;
inline int TransferRequest::fromaccount_size() const {
  return fromaccount_.size();
}
inline void TransferRequest::clear_fromaccount() {
  fromaccount_.Clear();
}
inline ::vega::Account* TransferRequest::mutable_fromaccount(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TransferRequest.fromAccount)
  return fromaccount_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vega::Account >*
TransferRequest::mutable_fromaccount() {
  // @@protoc_insertion_point(field_mutable_list:vega.TransferRequest.fromAccount)
  return &fromaccount_;
}
inline const ::vega::Account& TransferRequest::fromaccount(int index) const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.fromAccount)
  return fromaccount_.Get(index);
}
inline ::vega::Account* TransferRequest::add_fromaccount() {
  // @@protoc_insertion_point(field_add:vega.TransferRequest.fromAccount)
  return fromaccount_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vega::Account >&
TransferRequest::fromaccount() const {
  // @@protoc_insertion_point(field_list:vega.TransferRequest.fromAccount)
  return fromaccount_;
}

// repeated .vega.Account toAccount = 2;
inline int TransferRequest::toaccount_size() const {
  return toaccount_.size();
}
inline void TransferRequest::clear_toaccount() {
  toaccount_.Clear();
}
inline ::vega::Account* TransferRequest::mutable_toaccount(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TransferRequest.toAccount)
  return toaccount_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vega::Account >*
TransferRequest::mutable_toaccount() {
  // @@protoc_insertion_point(field_mutable_list:vega.TransferRequest.toAccount)
  return &toaccount_;
}
inline const ::vega::Account& TransferRequest::toaccount(int index) const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.toAccount)
  return toaccount_.Get(index);
}
inline ::vega::Account* TransferRequest::add_toaccount() {
  // @@protoc_insertion_point(field_add:vega.TransferRequest.toAccount)
  return toaccount_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vega::Account >&
TransferRequest::toaccount() const {
  // @@protoc_insertion_point(field_list:vega.TransferRequest.toAccount)
  return toaccount_;
}

// uint64 amount = 3;
inline void TransferRequest::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TransferRequest::amount() const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.amount)
  return amount_;
}
inline void TransferRequest::set_amount(::google::protobuf::uint64 value) {

  amount_ = value;
  // @@protoc_insertion_point(field_set:vega.TransferRequest.amount)
}

// uint64 minAmount = 4;
inline void TransferRequest::clear_minamount() {
  minamount_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TransferRequest::minamount() const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.minAmount)
  return minamount_;
}
inline void TransferRequest::set_minamount(::google::protobuf::uint64 value) {

  minamount_ = value;
  // @@protoc_insertion_point(field_set:vega.TransferRequest.minAmount)
}

// string asset = 5;
inline void TransferRequest::clear_asset() {
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferRequest::asset() const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.asset)
  return asset_.GetNoArena();
}
inline void TransferRequest::set_asset(const ::std::string& value) {

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.TransferRequest.asset)
}
#if LANG_CXX11
inline void TransferRequest::set_asset(::std::string&& value) {

  asset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.TransferRequest.asset)
}
#endif
inline void TransferRequest::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.TransferRequest.asset)
}
inline void TransferRequest::set_asset(const char* value, size_t size) {

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.TransferRequest.asset)
}
inline ::std::string* TransferRequest::mutable_asset() {

  // @@protoc_insertion_point(field_mutable:vega.TransferRequest.asset)
  return asset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferRequest::release_asset() {
  // @@protoc_insertion_point(field_release:vega.TransferRequest.asset)

  return asset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferRequest::set_allocated_asset(::std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset);
  // @@protoc_insertion_point(field_set_allocated:vega.TransferRequest.asset)
}

// string reference = 6;
inline void TransferRequest::clear_reference() {
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferRequest::reference() const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.reference)
  return reference_.GetNoArena();
}
inline void TransferRequest::set_reference(const ::std::string& value) {

  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.TransferRequest.reference)
}
#if LANG_CXX11
inline void TransferRequest::set_reference(::std::string&& value) {

  reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.TransferRequest.reference)
}
#endif
inline void TransferRequest::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.TransferRequest.reference)
}
inline void TransferRequest::set_reference(const char* value, size_t size) {

  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.TransferRequest.reference)
}
inline ::std::string* TransferRequest::mutable_reference() {

  // @@protoc_insertion_point(field_mutable:vega.TransferRequest.reference)
  return reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferRequest::release_reference() {
  // @@protoc_insertion_point(field_release:vega.TransferRequest.reference)

  return reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferRequest::set_allocated_reference(::std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference);
  // @@protoc_insertion_point(field_set_allocated:vega.TransferRequest.reference)
}

// -------------------------------------------------------------------

// LedgerEntry

// string fromAccount = 1;
inline void LedgerEntry::clear_fromaccount() {
  fromaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LedgerEntry::fromaccount() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.fromAccount)
  return fromaccount_.GetNoArena();
}
inline void LedgerEntry::set_fromaccount(const ::std::string& value) {

  fromaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.fromAccount)
}
#if LANG_CXX11
inline void LedgerEntry::set_fromaccount(::std::string&& value) {

  fromaccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.LedgerEntry.fromAccount)
}
#endif
inline void LedgerEntry::set_fromaccount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  fromaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.LedgerEntry.fromAccount)
}
inline void LedgerEntry::set_fromaccount(const char* value, size_t size) {

  fromaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.LedgerEntry.fromAccount)
}
inline ::std::string* LedgerEntry::mutable_fromaccount() {

  // @@protoc_insertion_point(field_mutable:vega.LedgerEntry.fromAccount)
  return fromaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LedgerEntry::release_fromaccount() {
  // @@protoc_insertion_point(field_release:vega.LedgerEntry.fromAccount)

  return fromaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LedgerEntry::set_allocated_fromaccount(::std::string* fromaccount) {
  if (fromaccount != nullptr) {

  } else {

  }
  fromaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromaccount);
  // @@protoc_insertion_point(field_set_allocated:vega.LedgerEntry.fromAccount)
}

// string toAccount = 2;
inline void LedgerEntry::clear_toaccount() {
  toaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LedgerEntry::toaccount() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.toAccount)
  return toaccount_.GetNoArena();
}
inline void LedgerEntry::set_toaccount(const ::std::string& value) {

  toaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.toAccount)
}
#if LANG_CXX11
inline void LedgerEntry::set_toaccount(::std::string&& value) {

  toaccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.LedgerEntry.toAccount)
}
#endif
inline void LedgerEntry::set_toaccount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  toaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.LedgerEntry.toAccount)
}
inline void LedgerEntry::set_toaccount(const char* value, size_t size) {

  toaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.LedgerEntry.toAccount)
}
inline ::std::string* LedgerEntry::mutable_toaccount() {

  // @@protoc_insertion_point(field_mutable:vega.LedgerEntry.toAccount)
  return toaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LedgerEntry::release_toaccount() {
  // @@protoc_insertion_point(field_release:vega.LedgerEntry.toAccount)

  return toaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LedgerEntry::set_allocated_toaccount(::std::string* toaccount) {
  if (toaccount != nullptr) {

  } else {

  }
  toaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), toaccount);
  // @@protoc_insertion_point(field_set_allocated:vega.LedgerEntry.toAccount)
}

// uint64 amount = 3;
inline void LedgerEntry::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LedgerEntry::amount() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.amount)
  return amount_;
}
inline void LedgerEntry::set_amount(::google::protobuf::uint64 value) {

  amount_ = value;
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.amount)
}

// string reference = 4;
inline void LedgerEntry::clear_reference() {
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LedgerEntry::reference() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.reference)
  return reference_.GetNoArena();
}
inline void LedgerEntry::set_reference(const ::std::string& value) {

  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.reference)
}
#if LANG_CXX11
inline void LedgerEntry::set_reference(::std::string&& value) {

  reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.LedgerEntry.reference)
}
#endif
inline void LedgerEntry::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.LedgerEntry.reference)
}
inline void LedgerEntry::set_reference(const char* value, size_t size) {

  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.LedgerEntry.reference)
}
inline ::std::string* LedgerEntry::mutable_reference() {

  // @@protoc_insertion_point(field_mutable:vega.LedgerEntry.reference)
  return reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LedgerEntry::release_reference() {
  // @@protoc_insertion_point(field_release:vega.LedgerEntry.reference)

  return reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LedgerEntry::set_allocated_reference(::std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference);
  // @@protoc_insertion_point(field_set_allocated:vega.LedgerEntry.reference)
}

// string type = 5;
inline void LedgerEntry::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LedgerEntry::type() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.type)
  return type_.GetNoArena();
}
inline void LedgerEntry::set_type(const ::std::string& value) {

  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.type)
}
#if LANG_CXX11
inline void LedgerEntry::set_type(::std::string&& value) {

  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.LedgerEntry.type)
}
#endif
inline void LedgerEntry::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.LedgerEntry.type)
}
inline void LedgerEntry::set_type(const char* value, size_t size) {

  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.LedgerEntry.type)
}
inline ::std::string* LedgerEntry::mutable_type() {

  // @@protoc_insertion_point(field_mutable:vega.LedgerEntry.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LedgerEntry::release_type() {
  // @@protoc_insertion_point(field_release:vega.LedgerEntry.type)

  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LedgerEntry::set_allocated_type(::std::string* type) {
  if (type != nullptr) {

  } else {

  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:vega.LedgerEntry.type)
}

// int64 timestamp = 6;
inline void LedgerEntry::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LedgerEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.timestamp)
  return timestamp_;
}
inline void LedgerEntry::set_timestamp(::google::protobuf::int64 value) {

  timestamp_ = value;
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.timestamp)
}

// -------------------------------------------------------------------

// TransferBalance

// .vega.Account account = 1;
inline bool TransferBalance::has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline void TransferBalance::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::vega::Account& TransferBalance::account() const {
  const ::vega::Account* p = account_;
  // @@protoc_insertion_point(field_get:vega.TransferBalance.account)
  return p != nullptr ? *p : *reinterpret_cast<const ::vega::Account*>(
      &::vega::_Account_default_instance_);
}
inline ::vega::Account* TransferBalance::release_account() {
  // @@protoc_insertion_point(field_release:vega.TransferBalance.account)

  ::vega::Account* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::vega::Account* TransferBalance::mutable_account() {

  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Account>(GetArenaNoVirtual());
    account_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vega.TransferBalance.account)
  return account_;
}
inline void TransferBalance::set_allocated_account(::vega::Account* account) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }

  } else {

  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:vega.TransferBalance.account)
}

// uint64 balance = 2;
inline void TransferBalance::clear_balance() {
  balance_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TransferBalance::balance() const {
  // @@protoc_insertion_point(field_get:vega.TransferBalance.balance)
  return balance_;
}
inline void TransferBalance::set_balance(::google::protobuf::uint64 value) {

  balance_ = value;
  // @@protoc_insertion_point(field_set:vega.TransferBalance.balance)
}

// -------------------------------------------------------------------

// TransferResponse

// repeated .vega.LedgerEntry transfers = 1;
inline int TransferResponse::transfers_size() const {
  return transfers_.size();
}
inline void TransferResponse::clear_transfers() {
  transfers_.Clear();
}
inline ::vega::LedgerEntry* TransferResponse::mutable_transfers(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TransferResponse.transfers)
  return transfers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vega::LedgerEntry >*
TransferResponse::mutable_transfers() {
  // @@protoc_insertion_point(field_mutable_list:vega.TransferResponse.transfers)
  return &transfers_;
}
inline const ::vega::LedgerEntry& TransferResponse::transfers(int index) const {
  // @@protoc_insertion_point(field_get:vega.TransferResponse.transfers)
  return transfers_.Get(index);
}
inline ::vega::LedgerEntry* TransferResponse::add_transfers() {
  // @@protoc_insertion_point(field_add:vega.TransferResponse.transfers)
  return transfers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vega::LedgerEntry >&
TransferResponse::transfers() const {
  // @@protoc_insertion_point(field_list:vega.TransferResponse.transfers)
  return transfers_;
}

// repeated .vega.TransferBalance balances = 2;
inline int TransferResponse::balances_size() const {
  return balances_.size();
}
inline void TransferResponse::clear_balances() {
  balances_.Clear();
}
inline ::vega::TransferBalance* TransferResponse::mutable_balances(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TransferResponse.balances)
  return balances_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vega::TransferBalance >*
TransferResponse::mutable_balances() {
  // @@protoc_insertion_point(field_mutable_list:vega.TransferResponse.balances)
  return &balances_;
}
inline const ::vega::TransferBalance& TransferResponse::balances(int index) const {
  // @@protoc_insertion_point(field_get:vega.TransferResponse.balances)
  return balances_.Get(index);
}
inline ::vega::TransferBalance* TransferResponse::add_balances() {
  // @@protoc_insertion_point(field_add:vega.TransferResponse.balances)
  return balances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vega::TransferBalance >&
TransferResponse::balances() const {
  // @@protoc_insertion_point(field_list:vega.TransferResponse.balances)
  return balances_;
}

// -------------------------------------------------------------------

// MarginLevels

// uint64 maintenanceMargin = 1;
inline void MarginLevels::clear_maintenancemargin() {
  maintenancemargin_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MarginLevels::maintenancemargin() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.maintenanceMargin)
  return maintenancemargin_;
}
inline void MarginLevels::set_maintenancemargin(::google::protobuf::uint64 value) {

  maintenancemargin_ = value;
  // @@protoc_insertion_point(field_set:vega.MarginLevels.maintenanceMargin)
}

// uint64 searchLevel = 2;
inline void MarginLevels::clear_searchlevel() {
  searchlevel_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MarginLevels::searchlevel() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.searchLevel)
  return searchlevel_;
}
inline void MarginLevels::set_searchlevel(::google::protobuf::uint64 value) {

  searchlevel_ = value;
  // @@protoc_insertion_point(field_set:vega.MarginLevels.searchLevel)
}

// uint64 initialMargin = 3;
inline void MarginLevels::clear_initialmargin() {
  initialmargin_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MarginLevels::initialmargin() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.initialMargin)
  return initialmargin_;
}
inline void MarginLevels::set_initialmargin(::google::protobuf::uint64 value) {

  initialmargin_ = value;
  // @@protoc_insertion_point(field_set:vega.MarginLevels.initialMargin)
}

// uint64 collateralReleaseLevel = 4;
inline void MarginLevels::clear_collateralreleaselevel() {
  collateralreleaselevel_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MarginLevels::collateralreleaselevel() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.collateralReleaseLevel)
  return collateralreleaselevel_;
}
inline void MarginLevels::set_collateralreleaselevel(::google::protobuf::uint64 value) {

  collateralreleaselevel_ = value;
  // @@protoc_insertion_point(field_set:vega.MarginLevels.collateralReleaseLevel)
}

// string partyID = 5;
inline void MarginLevels::clear_partyid() {
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarginLevels::partyid() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.partyID)
  return partyid_.GetNoArena();
}
inline void MarginLevels::set_partyid(const ::std::string& value) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.partyID)
}
#if LANG_CXX11
inline void MarginLevels::set_partyid(::std::string&& value) {

  partyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.MarginLevels.partyID)
}
#endif
inline void MarginLevels::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.MarginLevels.partyID)
}
inline void MarginLevels::set_partyid(const char* value, size_t size) {

  partyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.MarginLevels.partyID)
}
inline ::std::string* MarginLevels::mutable_partyid() {

  // @@protoc_insertion_point(field_mutable:vega.MarginLevels.partyID)
  return partyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarginLevels::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.MarginLevels.partyID)

  return partyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarginLevels::set_allocated_partyid(::std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partyid);
  // @@protoc_insertion_point(field_set_allocated:vega.MarginLevels.partyID)
}

// string marketID = 6;
inline void MarginLevels::clear_marketid() {
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarginLevels::marketid() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.marketID)
  return marketid_.GetNoArena();
}
inline void MarginLevels::set_marketid(const ::std::string& value) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.marketID)
}
#if LANG_CXX11
inline void MarginLevels::set_marketid(::std::string&& value) {

  marketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.MarginLevels.marketID)
}
#endif
inline void MarginLevels::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.MarginLevels.marketID)
}
inline void MarginLevels::set_marketid(const char* value, size_t size) {

  marketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.MarginLevels.marketID)
}
inline ::std::string* MarginLevels::mutable_marketid() {

  // @@protoc_insertion_point(field_mutable:vega.MarginLevels.marketID)
  return marketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarginLevels::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.MarginLevels.marketID)

  return marketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarginLevels::set_allocated_marketid(::std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketid);
  // @@protoc_insertion_point(field_set_allocated:vega.MarginLevels.marketID)
}

// string asset = 7;
inline void MarginLevels::clear_asset() {
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarginLevels::asset() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.asset)
  return asset_.GetNoArena();
}
inline void MarginLevels::set_asset(const ::std::string& value) {

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.asset)
}
#if LANG_CXX11
inline void MarginLevels::set_asset(::std::string&& value) {

  asset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.MarginLevels.asset)
}
#endif
inline void MarginLevels::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.MarginLevels.asset)
}
inline void MarginLevels::set_asset(const char* value, size_t size) {

  asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.MarginLevels.asset)
}
inline ::std::string* MarginLevels::mutable_asset() {

  // @@protoc_insertion_point(field_mutable:vega.MarginLevels.asset)
  return asset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarginLevels::release_asset() {
  // @@protoc_insertion_point(field_release:vega.MarginLevels.asset)

  return asset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarginLevels::set_allocated_asset(::std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset);
  // @@protoc_insertion_point(field_set_allocated:vega.MarginLevels.asset)
}

// int64 timestamp = 8;
inline void MarginLevels::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 MarginLevels::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.timestamp)
  return timestamp_;
}
inline void MarginLevels::set_timestamp(::google::protobuf::int64 value) {

  timestamp_ = value;
  // @@protoc_insertion_point(field_set:vega.MarginLevels.timestamp)
}

// -------------------------------------------------------------------

// MarketData

// uint64 markPrice = 1;
inline void MarketData::clear_markprice() {
  markprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MarketData::markprice() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.markPrice)
  return markprice_;
}
inline void MarketData::set_markprice(::google::protobuf::uint64 value) {

  markprice_ = value;
  // @@protoc_insertion_point(field_set:vega.MarketData.markPrice)
}

// uint64 bestBidPrice = 2;
inline void MarketData::clear_bestbidprice() {
  bestbidprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MarketData::bestbidprice() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.bestBidPrice)
  return bestbidprice_;
}
inline void MarketData::set_bestbidprice(::google::protobuf::uint64 value) {

  bestbidprice_ = value;
  // @@protoc_insertion_point(field_set:vega.MarketData.bestBidPrice)
}

// uint64 bestBidVolume = 3;
inline void MarketData::clear_bestbidvolume() {
  bestbidvolume_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MarketData::bestbidvolume() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.bestBidVolume)
  return bestbidvolume_;
}
inline void MarketData::set_bestbidvolume(::google::protobuf::uint64 value) {

  bestbidvolume_ = value;
  // @@protoc_insertion_point(field_set:vega.MarketData.bestBidVolume)
}

// uint64 bestOfferPrice = 4;
inline void MarketData::clear_bestofferprice() {
  bestofferprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MarketData::bestofferprice() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.bestOfferPrice)
  return bestofferprice_;
}
inline void MarketData::set_bestofferprice(::google::protobuf::uint64 value) {

  bestofferprice_ = value;
  // @@protoc_insertion_point(field_set:vega.MarketData.bestOfferPrice)
}

// uint64 bestOfferVolume = 5;
inline void MarketData::clear_bestoffervolume() {
  bestoffervolume_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MarketData::bestoffervolume() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.bestOfferVolume)
  return bestoffervolume_;
}
inline void MarketData::set_bestoffervolume(::google::protobuf::uint64 value) {

  bestoffervolume_ = value;
  // @@protoc_insertion_point(field_set:vega.MarketData.bestOfferVolume)
}

// uint64 midPrice = 6;
inline void MarketData::clear_midprice() {
  midprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MarketData::midprice() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.midPrice)
  return midprice_;
}
inline void MarketData::set_midprice(::google::protobuf::uint64 value) {

  midprice_ = value;
  // @@protoc_insertion_point(field_set:vega.MarketData.midPrice)
}

// string market = 7;
inline void MarketData::clear_market() {
  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketData::market() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.market)
  return market_.GetNoArena();
}
inline void MarketData::set_market(const ::std::string& value) {

  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.MarketData.market)
}
#if LANG_CXX11
inline void MarketData::set_market(::std::string&& value) {

  market_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketData.market)
}
#endif
inline void MarketData::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.MarketData.market)
}
inline void MarketData::set_market(const char* value, size_t size) {

  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.MarketData.market)
}
inline ::std::string* MarketData::mutable_market() {

  // @@protoc_insertion_point(field_mutable:vega.MarketData.market)
  return market_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData::release_market() {
  // @@protoc_insertion_point(field_release:vega.MarketData.market)

  return market_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData::set_allocated_market(::std::string* market) {
  if (market != nullptr) {

  } else {

  }
  market_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:vega.MarketData.market)
}

// int64 timestamp = 8;
inline void MarketData::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 MarketData::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.timestamp)
  return timestamp_;
}
inline void MarketData::set_timestamp(::google::protobuf::int64 value) {

  timestamp_ = value;
  // @@protoc_insertion_point(field_set:vega.MarketData.timestamp)
}

// uint64 openInterest = 9;
inline void MarketData::clear_openinterest() {
  openinterest_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MarketData::openinterest() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.openInterest)
  return openinterest_;
}
inline void MarketData::set_openinterest(::google::protobuf::uint64 value) {

  openinterest_ = value;
  // @@protoc_insertion_point(field_set:vega.MarketData.openInterest)
}

// int64 auctionEnd = 10;
inline void MarketData::clear_auctionend() {
  auctionend_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 MarketData::auctionend() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.auctionEnd)
  return auctionend_;
}
inline void MarketData::set_auctionend(::google::protobuf::int64 value) {

  auctionend_ = value;
  // @@protoc_insertion_point(field_set:vega.MarketData.auctionEnd)
}

// int64 auctionStart = 11;
inline void MarketData::clear_auctionstart() {
  auctionstart_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 MarketData::auctionstart() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.auctionStart)
  return auctionstart_;
}
inline void MarketData::set_auctionstart(::google::protobuf::int64 value) {

  auctionstart_ = value;
  // @@protoc_insertion_point(field_set:vega.MarketData.auctionStart)
}

// uint64 indicativePrice = 12;
inline void MarketData::clear_indicativeprice() {
  indicativeprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MarketData::indicativeprice() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.indicativePrice)
  return indicativeprice_;
}
inline void MarketData::set_indicativeprice(::google::protobuf::uint64 value) {

  indicativeprice_ = value;
  // @@protoc_insertion_point(field_set:vega.MarketData.indicativePrice)
}

// uint64 indicativeVolume = 13;
inline void MarketData::clear_indicativevolume() {
  indicativevolume_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MarketData::indicativevolume() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.indicativeVolume)
  return indicativevolume_;
}
inline void MarketData::set_indicativevolume(::google::protobuf::uint64 value) {

  indicativevolume_ = value;
  // @@protoc_insertion_point(field_set:vega.MarketData.indicativeVolume)
}

// .vega.MarketState marketState = 14;
inline void MarketData::clear_marketstate() {
  marketstate_ = 0;
}
inline ::vega::MarketState MarketData::marketstate() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.marketState)
  return static_cast< ::vega::MarketState >(marketstate_);
}
inline void MarketData::set_marketstate(::vega::MarketState value) {

  marketstate_ = value;
  // @@protoc_insertion_point(field_set:vega.MarketData.marketState)
}

// -------------------------------------------------------------------

// ErrorDetail

// int32 code = 1;
inline void ErrorDetail::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ErrorDetail::code() const {
  // @@protoc_insertion_point(field_get:vega.ErrorDetail.code)
  return code_;
}
inline void ErrorDetail::set_code(::google::protobuf::int32 value) {

  code_ = value;
  // @@protoc_insertion_point(field_set:vega.ErrorDetail.code)
}

// string message = 2;
inline void ErrorDetail::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorDetail::message() const {
  // @@protoc_insertion_point(field_get:vega.ErrorDetail.message)
  return message_.GetNoArena();
}
inline void ErrorDetail::set_message(const ::std::string& value) {

  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.ErrorDetail.message)
}
#if LANG_CXX11
inline void ErrorDetail::set_message(::std::string&& value) {

  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.ErrorDetail.message)
}
#endif
inline void ErrorDetail::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.ErrorDetail.message)
}
inline void ErrorDetail::set_message(const char* value, size_t size) {

  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.ErrorDetail.message)
}
inline ::std::string* ErrorDetail::mutable_message() {

  // @@protoc_insertion_point(field_mutable:vega.ErrorDetail.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorDetail::release_message() {
  // @@protoc_insertion_point(field_release:vega.ErrorDetail.message)

  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorDetail::set_allocated_message(::std::string* message) {
  if (message != nullptr) {

  } else {

  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:vega.ErrorDetail.message)
}

// string inner = 3;
inline void ErrorDetail::clear_inner() {
  inner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorDetail::inner() const {
  // @@protoc_insertion_point(field_get:vega.ErrorDetail.inner)
  return inner_.GetNoArena();
}
inline void ErrorDetail::set_inner(const ::std::string& value) {

  inner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.ErrorDetail.inner)
}
#if LANG_CXX11
inline void ErrorDetail::set_inner(::std::string&& value) {

  inner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.ErrorDetail.inner)
}
#endif
inline void ErrorDetail::set_inner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  inner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.ErrorDetail.inner)
}
inline void ErrorDetail::set_inner(const char* value, size_t size) {

  inner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.ErrorDetail.inner)
}
inline ::std::string* ErrorDetail::mutable_inner() {

  // @@protoc_insertion_point(field_mutable:vega.ErrorDetail.inner)
  return inner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorDetail::release_inner() {
  // @@protoc_insertion_point(field_release:vega.ErrorDetail.inner)

  return inner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorDetail::set_allocated_inner(::std::string* inner) {
  if (inner != nullptr) {

  } else {

  }
  inner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inner);
  // @@protoc_insertion_point(field_set_allocated:vega.ErrorDetail.inner)
}

// -------------------------------------------------------------------

// Transaction

// bytes inputData = 1;
inline void Transaction::clear_inputdata() {
  inputdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::inputdata() const {
  // @@protoc_insertion_point(field_get:vega.Transaction.inputData)
  return inputdata_.GetNoArena();
}
inline void Transaction::set_inputdata(const ::std::string& value) {

  inputdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Transaction.inputData)
}
#if LANG_CXX11
inline void Transaction::set_inputdata(::std::string&& value) {

  inputdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Transaction.inputData)
}
#endif
inline void Transaction::set_inputdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  inputdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Transaction.inputData)
}
inline void Transaction::set_inputdata(const void* value, size_t size) {

  inputdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Transaction.inputData)
}
inline ::std::string* Transaction::mutable_inputdata() {

  // @@protoc_insertion_point(field_mutable:vega.Transaction.inputData)
  return inputdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_inputdata() {
  // @@protoc_insertion_point(field_release:vega.Transaction.inputData)

  return inputdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_inputdata(::std::string* inputdata) {
  if (inputdata != nullptr) {

  } else {

  }
  inputdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inputdata);
  // @@protoc_insertion_point(field_set_allocated:vega.Transaction.inputData)
}

// uint64 nonce = 2;
inline void Transaction::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Transaction::nonce() const {
  // @@protoc_insertion_point(field_get:vega.Transaction.nonce)
  return nonce_;
}
inline void Transaction::set_nonce(::google::protobuf::uint64 value) {

  nonce_ = value;
  // @@protoc_insertion_point(field_set:vega.Transaction.nonce)
}

// bytes address = 1001;
inline bool Transaction::has_address() const {
  return from_case() == kAddress;
}
inline void Transaction::set_has_address() {
  _oneof_case_[0] = kAddress;
}
inline void Transaction::clear_address() {
  if (has_address()) {
    from_.address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_from();
  }
}
inline const ::std::string& Transaction::address() const {
  // @@protoc_insertion_point(field_get:vega.Transaction.address)
  if (has_address()) {
    return from_.address_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Transaction::set_address(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:vega.Transaction.address)
  if (!has_address()) {
    clear_from();
    set_has_address();
    from_.address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Transaction.address)
}
#if LANG_CXX11
inline void Transaction::set_address(::std::string&& value) {
  // @@protoc_insertion_point(field_set:vega.Transaction.address)
  if (!has_address()) {
    clear_from();
    set_has_address();
    from_.address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Transaction.address)
}
#endif
inline void Transaction::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_address()) {
    clear_from();
    set_has_address();
    from_.address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Transaction.address)
}
inline void Transaction::set_address(const void* value, size_t size) {
  if (!has_address()) {
    clear_from();
    set_has_address();
    from_.address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Transaction.address)
}
inline ::std::string* Transaction::mutable_address() {
  if (!has_address()) {
    clear_from();
    set_has_address();
    from_.address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:vega.Transaction.address)
  return from_.address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_address() {
  // @@protoc_insertion_point(field_release:vega.Transaction.address)
  if (has_address()) {
    clear_has_from();
    return from_.address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Transaction::set_allocated_address(::std::string* address) {
  if (has_from()) {
    clear_from();
  }
  if (address != nullptr) {
    set_has_address();
    from_.address_.UnsafeSetDefault(address);
  }
  // @@protoc_insertion_point(field_set_allocated:vega.Transaction.address)
}

// bytes pubKey = 1002;
inline bool Transaction::has_pubkey() const {
  return from_case() == kPubKey;
}
inline void Transaction::set_has_pubkey() {
  _oneof_case_[0] = kPubKey;
}
inline void Transaction::clear_pubkey() {
  if (has_pubkey()) {
    from_.pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_from();
  }
}
inline const ::std::string& Transaction::pubkey() const {
  // @@protoc_insertion_point(field_get:vega.Transaction.pubKey)
  if (has_pubkey()) {
    return from_.pubkey_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Transaction::set_pubkey(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:vega.Transaction.pubKey)
  if (!has_pubkey()) {
    clear_from();
    set_has_pubkey();
    from_.pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Transaction.pubKey)
}
#if LANG_CXX11
inline void Transaction::set_pubkey(::std::string&& value) {
  // @@protoc_insertion_point(field_set:vega.Transaction.pubKey)
  if (!has_pubkey()) {
    clear_from();
    set_has_pubkey();
    from_.pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Transaction.pubKey)
}
#endif
inline void Transaction::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_pubkey()) {
    clear_from();
    set_has_pubkey();
    from_.pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Transaction.pubKey)
}
inline void Transaction::set_pubkey(const void* value, size_t size) {
  if (!has_pubkey()) {
    clear_from();
    set_has_pubkey();
    from_.pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Transaction.pubKey)
}
inline ::std::string* Transaction::mutable_pubkey() {
  if (!has_pubkey()) {
    clear_from();
    set_has_pubkey();
    from_.pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:vega.Transaction.pubKey)
  return from_.pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_pubkey() {
  // @@protoc_insertion_point(field_release:vega.Transaction.pubKey)
  if (has_pubkey()) {
    clear_has_from();
    return from_.pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Transaction::set_allocated_pubkey(::std::string* pubkey) {
  if (has_from()) {
    clear_from();
  }
  if (pubkey != nullptr) {
    set_has_pubkey();
    from_.pubkey_.UnsafeSetDefault(pubkey);
  }
  // @@protoc_insertion_point(field_set_allocated:vega.Transaction.pubKey)
}

inline bool Transaction::has_from() const {
  return from_case() != FROM_NOT_SET;
}
inline void Transaction::clear_has_from() {
  _oneof_case_[0] = FROM_NOT_SET;
}
inline Transaction::FromCase Transaction::from_case() const {
  return Transaction::FromCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Signature

// bytes sig = 1;
inline void Signature::clear_sig() {
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Signature::sig() const {
  // @@protoc_insertion_point(field_get:vega.Signature.sig)
  return sig_.GetNoArena();
}
inline void Signature::set_sig(const ::std::string& value) {

  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Signature.sig)
}
#if LANG_CXX11
inline void Signature::set_sig(::std::string&& value) {

  sig_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Signature.sig)
}
#endif
inline void Signature::set_sig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Signature.sig)
}
inline void Signature::set_sig(const void* value, size_t size) {

  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Signature.sig)
}
inline ::std::string* Signature::mutable_sig() {

  // @@protoc_insertion_point(field_mutable:vega.Signature.sig)
  return sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Signature::release_sig() {
  // @@protoc_insertion_point(field_release:vega.Signature.sig)

  return sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Signature::set_allocated_sig(::std::string* sig) {
  if (sig != nullptr) {

  } else {

  }
  sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:vega.Signature.sig)
}

// string algo = 2;
inline void Signature::clear_algo() {
  algo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Signature::algo() const {
  // @@protoc_insertion_point(field_get:vega.Signature.algo)
  return algo_.GetNoArena();
}
inline void Signature::set_algo(const ::std::string& value) {

  algo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.Signature.algo)
}
#if LANG_CXX11
inline void Signature::set_algo(::std::string&& value) {

  algo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.Signature.algo)
}
#endif
inline void Signature::set_algo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  algo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.Signature.algo)
}
inline void Signature::set_algo(const char* value, size_t size) {

  algo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.Signature.algo)
}
inline ::std::string* Signature::mutable_algo() {

  // @@protoc_insertion_point(field_mutable:vega.Signature.algo)
  return algo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Signature::release_algo() {
  // @@protoc_insertion_point(field_release:vega.Signature.algo)

  return algo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Signature::set_allocated_algo(::std::string* algo) {
  if (algo != nullptr) {

  } else {

  }
  algo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algo);
  // @@protoc_insertion_point(field_set_allocated:vega.Signature.algo)
}

// uint64 version = 3;
inline void Signature::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Signature::version() const {
  // @@protoc_insertion_point(field_get:vega.Signature.version)
  return version_;
}
inline void Signature::set_version(::google::protobuf::uint64 value) {

  version_ = value;
  // @@protoc_insertion_point(field_set:vega.Signature.version)
}

// -------------------------------------------------------------------

// SignedBundle

// bytes tx = 1;
inline void SignedBundle::clear_tx() {
  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignedBundle::tx() const {
  // @@protoc_insertion_point(field_get:vega.SignedBundle.tx)
  return tx_.GetNoArena();
}
inline void SignedBundle::set_tx(const ::std::string& value) {

  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.SignedBundle.tx)
}
#if LANG_CXX11
inline void SignedBundle::set_tx(::std::string&& value) {

  tx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.SignedBundle.tx)
}
#endif
inline void SignedBundle::set_tx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.SignedBundle.tx)
}
inline void SignedBundle::set_tx(const void* value, size_t size) {

  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.SignedBundle.tx)
}
inline ::std::string* SignedBundle::mutable_tx() {

  // @@protoc_insertion_point(field_mutable:vega.SignedBundle.tx)
  return tx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignedBundle::release_tx() {
  // @@protoc_insertion_point(field_release:vega.SignedBundle.tx)

  return tx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedBundle::set_allocated_tx(::std::string* tx) {
  if (tx != nullptr) {

  } else {

  }
  tx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx);
  // @@protoc_insertion_point(field_set_allocated:vega.SignedBundle.tx)
}

// .vega.Signature sig = 2;
inline bool SignedBundle::has_sig() const {
  return this != internal_default_instance() && sig_ != nullptr;
}
inline void SignedBundle::clear_sig() {
  if (GetArenaNoVirtual() == nullptr && sig_ != nullptr) {
    delete sig_;
  }
  sig_ = nullptr;
}
inline const ::vega::Signature& SignedBundle::sig() const {
  const ::vega::Signature* p = sig_;
  // @@protoc_insertion_point(field_get:vega.SignedBundle.sig)
  return p != nullptr ? *p : *reinterpret_cast<const ::vega::Signature*>(
      &::vega::_Signature_default_instance_);
}
inline ::vega::Signature* SignedBundle::release_sig() {
  // @@protoc_insertion_point(field_release:vega.SignedBundle.sig)

  ::vega::Signature* temp = sig_;
  sig_ = nullptr;
  return temp;
}
inline ::vega::Signature* SignedBundle::mutable_sig() {

  if (sig_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Signature>(GetArenaNoVirtual());
    sig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vega.SignedBundle.sig)
  return sig_;
}
inline void SignedBundle::set_allocated_sig(::vega::Signature* sig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sig_;
  }
  if (sig) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sig, submessage_arena);
    }

  } else {

  }
  sig_ = sig;
  // @@protoc_insertion_point(field_set_allocated:vega.SignedBundle.sig)
}

// -------------------------------------------------------------------

// NodeSignature

// string ID = 1;
inline void NodeSignature::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeSignature::id() const {
  // @@protoc_insertion_point(field_get:vega.NodeSignature.ID)
  return id_.GetNoArena();
}
inline void NodeSignature::set_id(const ::std::string& value) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.NodeSignature.ID)
}
#if LANG_CXX11
inline void NodeSignature::set_id(::std::string&& value) {

  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.NodeSignature.ID)
}
#endif
inline void NodeSignature::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.NodeSignature.ID)
}
inline void NodeSignature::set_id(const char* value, size_t size) {

  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.NodeSignature.ID)
}
inline ::std::string* NodeSignature::mutable_id() {

  // @@protoc_insertion_point(field_mutable:vega.NodeSignature.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeSignature::release_id() {
  // @@protoc_insertion_point(field_release:vega.NodeSignature.ID)

  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeSignature::set_allocated_id(::std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:vega.NodeSignature.ID)
}

// bytes sig = 2;
inline void NodeSignature::clear_sig() {
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeSignature::sig() const {
  // @@protoc_insertion_point(field_get:vega.NodeSignature.sig)
  return sig_.GetNoArena();
}
inline void NodeSignature::set_sig(const ::std::string& value) {

  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:vega.NodeSignature.sig)
}
#if LANG_CXX11
inline void NodeSignature::set_sig(::std::string&& value) {

  sig_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vega.NodeSignature.sig)
}
#endif
inline void NodeSignature::set_sig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vega.NodeSignature.sig)
}
inline void NodeSignature::set_sig(const void* value, size_t size) {

  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vega.NodeSignature.sig)
}
inline ::std::string* NodeSignature::mutable_sig() {

  // @@protoc_insertion_point(field_mutable:vega.NodeSignature.sig)
  return sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeSignature::release_sig() {
  // @@protoc_insertion_point(field_release:vega.NodeSignature.sig)

  return sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeSignature::set_allocated_sig(::std::string* sig) {
  if (sig != nullptr) {

  } else {

  }
  sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:vega.NodeSignature.sig)
}

// .vega.NodeSignatureKind kind = 3;
inline void NodeSignature::clear_kind() {
  kind_ = 0;
}
inline ::vega::NodeSignatureKind NodeSignature::kind() const {
  // @@protoc_insertion_point(field_get:vega.NodeSignature.kind)
  return static_cast< ::vega::NodeSignatureKind >(kind_);
}
inline void NodeSignature::set_kind(::vega::NodeSignatureKind value) {

  kind_ = value;
  // @@protoc_insertion_point(field_set:vega.NodeSignature.kind)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vega

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::vega::Order_TimeInForce> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Order_TimeInForce>() {
  return ::vega::Order_TimeInForce_descriptor();
}
template <> struct is_proto_enum< ::vega::Order_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Order_Type>() {
  return ::vega::Order_Type_descriptor();
}
template <> struct is_proto_enum< ::vega::Order_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Order_Status>() {
  return ::vega::Order_Status_descriptor();
}
template <> struct is_proto_enum< ::vega::Trade_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Trade_Type>() {
  return ::vega::Trade_Type_descriptor();
}
template <> struct is_proto_enum< ::vega::Deposit_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Deposit_Status>() {
  return ::vega::Deposit_Status_descriptor();
}
template <> struct is_proto_enum< ::vega::Withdrawal_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Withdrawal_Status>() {
  return ::vega::Withdrawal_Status_descriptor();
}
template <> struct is_proto_enum< ::vega::Side> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Side>() {
  return ::vega::Side_descriptor();
}
template <> struct is_proto_enum< ::vega::Interval> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Interval>() {
  return ::vega::Interval_descriptor();
}
template <> struct is_proto_enum< ::vega::MarketState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::MarketState>() {
  return ::vega::MarketState_descriptor();
}
template <> struct is_proto_enum< ::vega::OrderError> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::OrderError>() {
  return ::vega::OrderError_descriptor();
}
template <> struct is_proto_enum< ::vega::ChainStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::ChainStatus>() {
  return ::vega::ChainStatus_descriptor();
}
template <> struct is_proto_enum< ::vega::AccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::AccountType>() {
  return ::vega::AccountType_descriptor();
}
template <> struct is_proto_enum< ::vega::TransferType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::TransferType>() {
  return ::vega::TransferType_descriptor();
}
template <> struct is_proto_enum< ::vega::NodeSignatureKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::NodeSignatureKind>() {
  return ::vega::NodeSignatureKind_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_proto_2fvega_2eproto
