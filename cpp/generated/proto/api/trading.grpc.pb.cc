// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/api/trading.proto

#include "proto/api/trading.pb.h"
#include "proto/api/trading.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace api {

static const char* trading_method_names[] = {
  "/api.trading/PrepareSubmitOrder",
  "/api.trading/PrepareCancelOrder",
  "/api.trading/PrepareAmendOrder",
  "/api.trading/PrepareWithdraw",
  "/api.trading/SubmitTransaction",
  "/api.trading/PrepareProposal",
  "/api.trading/PrepareVote",
  "/api.trading/PropagateChainEvent",
  "/api.trading/PrepareLiquidityProvision",
};

std::unique_ptr< trading::Stub> trading::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< trading::Stub> stub(new trading::Stub(channel));
  return stub;
}

trading::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PrepareSubmitOrder_(trading_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrepareCancelOrder_(trading_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrepareAmendOrder_(trading_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrepareWithdraw_(trading_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitTransaction_(trading_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrepareProposal_(trading_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrepareVote_(trading_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PropagateChainEvent_(trading_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrepareLiquidityProvision_(trading_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status trading::Stub::PrepareSubmitOrder(::grpc::ClientContext* context, const ::api::SubmitOrderRequest& request, ::api::PrepareSubmitOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::SubmitOrderRequest, ::api::PrepareSubmitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareSubmitOrder_, context, request, response);
}

void trading::Stub::experimental_async::PrepareSubmitOrder(::grpc::ClientContext* context, const ::api::SubmitOrderRequest* request, ::api::PrepareSubmitOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::SubmitOrderRequest, ::api::PrepareSubmitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareSubmitOrder_, context, request, response, std::move(f));
}

void trading::Stub::experimental_async::PrepareSubmitOrder(::grpc::ClientContext* context, const ::api::SubmitOrderRequest* request, ::api::PrepareSubmitOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareSubmitOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::PrepareSubmitOrderResponse>* trading::Stub::PrepareAsyncPrepareSubmitOrderRaw(::grpc::ClientContext* context, const ::api::SubmitOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::PrepareSubmitOrderResponse, ::api::SubmitOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareSubmitOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::PrepareSubmitOrderResponse>* trading::Stub::AsyncPrepareSubmitOrderRaw(::grpc::ClientContext* context, const ::api::SubmitOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareSubmitOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading::Stub::PrepareCancelOrder(::grpc::ClientContext* context, const ::api::CancelOrderRequest& request, ::api::PrepareCancelOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::CancelOrderRequest, ::api::PrepareCancelOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareCancelOrder_, context, request, response);
}

void trading::Stub::experimental_async::PrepareCancelOrder(::grpc::ClientContext* context, const ::api::CancelOrderRequest* request, ::api::PrepareCancelOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::CancelOrderRequest, ::api::PrepareCancelOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareCancelOrder_, context, request, response, std::move(f));
}

void trading::Stub::experimental_async::PrepareCancelOrder(::grpc::ClientContext* context, const ::api::CancelOrderRequest* request, ::api::PrepareCancelOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareCancelOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::PrepareCancelOrderResponse>* trading::Stub::PrepareAsyncPrepareCancelOrderRaw(::grpc::ClientContext* context, const ::api::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::PrepareCancelOrderResponse, ::api::CancelOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareCancelOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::PrepareCancelOrderResponse>* trading::Stub::AsyncPrepareCancelOrderRaw(::grpc::ClientContext* context, const ::api::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareCancelOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading::Stub::PrepareAmendOrder(::grpc::ClientContext* context, const ::api::AmendOrderRequest& request, ::api::PrepareAmendOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::AmendOrderRequest, ::api::PrepareAmendOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareAmendOrder_, context, request, response);
}

void trading::Stub::experimental_async::PrepareAmendOrder(::grpc::ClientContext* context, const ::api::AmendOrderRequest* request, ::api::PrepareAmendOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::AmendOrderRequest, ::api::PrepareAmendOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareAmendOrder_, context, request, response, std::move(f));
}

void trading::Stub::experimental_async::PrepareAmendOrder(::grpc::ClientContext* context, const ::api::AmendOrderRequest* request, ::api::PrepareAmendOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareAmendOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::PrepareAmendOrderResponse>* trading::Stub::PrepareAsyncPrepareAmendOrderRaw(::grpc::ClientContext* context, const ::api::AmendOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::PrepareAmendOrderResponse, ::api::AmendOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareAmendOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::PrepareAmendOrderResponse>* trading::Stub::AsyncPrepareAmendOrderRaw(::grpc::ClientContext* context, const ::api::AmendOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareAmendOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading::Stub::PrepareWithdraw(::grpc::ClientContext* context, const ::api::PrepareWithdrawRequest& request, ::api::PrepareWithdrawResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::PrepareWithdrawRequest, ::api::PrepareWithdrawResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareWithdraw_, context, request, response);
}

void trading::Stub::experimental_async::PrepareWithdraw(::grpc::ClientContext* context, const ::api::PrepareWithdrawRequest* request, ::api::PrepareWithdrawResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::PrepareWithdrawRequest, ::api::PrepareWithdrawResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareWithdraw_, context, request, response, std::move(f));
}

void trading::Stub::experimental_async::PrepareWithdraw(::grpc::ClientContext* context, const ::api::PrepareWithdrawRequest* request, ::api::PrepareWithdrawResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareWithdraw_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::PrepareWithdrawResponse>* trading::Stub::PrepareAsyncPrepareWithdrawRaw(::grpc::ClientContext* context, const ::api::PrepareWithdrawRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::PrepareWithdrawResponse, ::api::PrepareWithdrawRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareWithdraw_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::PrepareWithdrawResponse>* trading::Stub::AsyncPrepareWithdrawRaw(::grpc::ClientContext* context, const ::api::PrepareWithdrawRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareWithdrawRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading::Stub::SubmitTransaction(::grpc::ClientContext* context, const ::api::SubmitTransactionRequest& request, ::api::SubmitTransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::SubmitTransactionRequest, ::api::SubmitTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitTransaction_, context, request, response);
}

void trading::Stub::experimental_async::SubmitTransaction(::grpc::ClientContext* context, const ::api::SubmitTransactionRequest* request, ::api::SubmitTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::SubmitTransactionRequest, ::api::SubmitTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTransaction_, context, request, response, std::move(f));
}

void trading::Stub::experimental_async::SubmitTransaction(::grpc::ClientContext* context, const ::api::SubmitTransactionRequest* request, ::api::SubmitTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::SubmitTransactionResponse>* trading::Stub::PrepareAsyncSubmitTransactionRaw(::grpc::ClientContext* context, const ::api::SubmitTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::SubmitTransactionResponse, ::api::SubmitTransactionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::SubmitTransactionResponse>* trading::Stub::AsyncSubmitTransactionRaw(::grpc::ClientContext* context, const ::api::SubmitTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading::Stub::PrepareProposal(::grpc::ClientContext* context, const ::api::PrepareProposalRequest& request, ::api::PrepareProposalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::PrepareProposalRequest, ::api::PrepareProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareProposal_, context, request, response);
}

void trading::Stub::experimental_async::PrepareProposal(::grpc::ClientContext* context, const ::api::PrepareProposalRequest* request, ::api::PrepareProposalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::PrepareProposalRequest, ::api::PrepareProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareProposal_, context, request, response, std::move(f));
}

void trading::Stub::experimental_async::PrepareProposal(::grpc::ClientContext* context, const ::api::PrepareProposalRequest* request, ::api::PrepareProposalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareProposal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::PrepareProposalResponse>* trading::Stub::PrepareAsyncPrepareProposalRaw(::grpc::ClientContext* context, const ::api::PrepareProposalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::PrepareProposalResponse, ::api::PrepareProposalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareProposal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::PrepareProposalResponse>* trading::Stub::AsyncPrepareProposalRaw(::grpc::ClientContext* context, const ::api::PrepareProposalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareProposalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading::Stub::PrepareVote(::grpc::ClientContext* context, const ::api::PrepareVoteRequest& request, ::api::PrepareVoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::PrepareVoteRequest, ::api::PrepareVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareVote_, context, request, response);
}

void trading::Stub::experimental_async::PrepareVote(::grpc::ClientContext* context, const ::api::PrepareVoteRequest* request, ::api::PrepareVoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::PrepareVoteRequest, ::api::PrepareVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareVote_, context, request, response, std::move(f));
}

void trading::Stub::experimental_async::PrepareVote(::grpc::ClientContext* context, const ::api::PrepareVoteRequest* request, ::api::PrepareVoteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareVote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::PrepareVoteResponse>* trading::Stub::PrepareAsyncPrepareVoteRaw(::grpc::ClientContext* context, const ::api::PrepareVoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::PrepareVoteResponse, ::api::PrepareVoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareVote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::PrepareVoteResponse>* trading::Stub::AsyncPrepareVoteRaw(::grpc::ClientContext* context, const ::api::PrepareVoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareVoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading::Stub::PropagateChainEvent(::grpc::ClientContext* context, const ::api::PropagateChainEventRequest& request, ::api::PropagateChainEventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::PropagateChainEventRequest, ::api::PropagateChainEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PropagateChainEvent_, context, request, response);
}

void trading::Stub::experimental_async::PropagateChainEvent(::grpc::ClientContext* context, const ::api::PropagateChainEventRequest* request, ::api::PropagateChainEventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::PropagateChainEventRequest, ::api::PropagateChainEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PropagateChainEvent_, context, request, response, std::move(f));
}

void trading::Stub::experimental_async::PropagateChainEvent(::grpc::ClientContext* context, const ::api::PropagateChainEventRequest* request, ::api::PropagateChainEventResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PropagateChainEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::PropagateChainEventResponse>* trading::Stub::PrepareAsyncPropagateChainEventRaw(::grpc::ClientContext* context, const ::api::PropagateChainEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::PropagateChainEventResponse, ::api::PropagateChainEventRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PropagateChainEvent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::PropagateChainEventResponse>* trading::Stub::AsyncPropagateChainEventRaw(::grpc::ClientContext* context, const ::api::PropagateChainEventRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPropagateChainEventRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading::Stub::PrepareLiquidityProvision(::grpc::ClientContext* context, const ::api::PrepareLiquidityProvisionRequest& request, ::api::PrepareLiquidityProvisionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::PrepareLiquidityProvisionRequest, ::api::PrepareLiquidityProvisionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareLiquidityProvision_, context, request, response);
}

void trading::Stub::experimental_async::PrepareLiquidityProvision(::grpc::ClientContext* context, const ::api::PrepareLiquidityProvisionRequest* request, ::api::PrepareLiquidityProvisionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::PrepareLiquidityProvisionRequest, ::api::PrepareLiquidityProvisionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareLiquidityProvision_, context, request, response, std::move(f));
}

void trading::Stub::experimental_async::PrepareLiquidityProvision(::grpc::ClientContext* context, const ::api::PrepareLiquidityProvisionRequest* request, ::api::PrepareLiquidityProvisionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareLiquidityProvision_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::PrepareLiquidityProvisionResponse>* trading::Stub::PrepareAsyncPrepareLiquidityProvisionRaw(::grpc::ClientContext* context, const ::api::PrepareLiquidityProvisionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::PrepareLiquidityProvisionResponse, ::api::PrepareLiquidityProvisionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareLiquidityProvision_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::PrepareLiquidityProvisionResponse>* trading::Stub::AsyncPrepareLiquidityProvisionRaw(::grpc::ClientContext* context, const ::api::PrepareLiquidityProvisionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareLiquidityProvisionRaw(context, request, cq);
  result->StartCall();
  return result;
}

trading::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading::Service, ::api::SubmitOrderRequest, ::api::PrepareSubmitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::SubmitOrderRequest* req,
             ::api::PrepareSubmitOrderResponse* resp) {
               return service->PrepareSubmitOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading::Service, ::api::CancelOrderRequest, ::api::PrepareCancelOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::CancelOrderRequest* req,
             ::api::PrepareCancelOrderResponse* resp) {
               return service->PrepareCancelOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading::Service, ::api::AmendOrderRequest, ::api::PrepareAmendOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::AmendOrderRequest* req,
             ::api::PrepareAmendOrderResponse* resp) {
               return service->PrepareAmendOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading::Service, ::api::PrepareWithdrawRequest, ::api::PrepareWithdrawResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::PrepareWithdrawRequest* req,
             ::api::PrepareWithdrawResponse* resp) {
               return service->PrepareWithdraw(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading::Service, ::api::SubmitTransactionRequest, ::api::SubmitTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::SubmitTransactionRequest* req,
             ::api::SubmitTransactionResponse* resp) {
               return service->SubmitTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading::Service, ::api::PrepareProposalRequest, ::api::PrepareProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::PrepareProposalRequest* req,
             ::api::PrepareProposalResponse* resp) {
               return service->PrepareProposal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading::Service, ::api::PrepareVoteRequest, ::api::PrepareVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::PrepareVoteRequest* req,
             ::api::PrepareVoteResponse* resp) {
               return service->PrepareVote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading::Service, ::api::PropagateChainEventRequest, ::api::PropagateChainEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::PropagateChainEventRequest* req,
             ::api::PropagateChainEventResponse* resp) {
               return service->PropagateChainEvent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading::Service, ::api::PrepareLiquidityProvisionRequest, ::api::PrepareLiquidityProvisionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::PrepareLiquidityProvisionRequest* req,
             ::api::PrepareLiquidityProvisionResponse* resp) {
               return service->PrepareLiquidityProvision(ctx, req, resp);
             }, this)));
}

trading::Service::~Service() {
}

::grpc::Status trading::Service::PrepareSubmitOrder(::grpc::ServerContext* context, const ::api::SubmitOrderRequest* request, ::api::PrepareSubmitOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading::Service::PrepareCancelOrder(::grpc::ServerContext* context, const ::api::CancelOrderRequest* request, ::api::PrepareCancelOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading::Service::PrepareAmendOrder(::grpc::ServerContext* context, const ::api::AmendOrderRequest* request, ::api::PrepareAmendOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading::Service::PrepareWithdraw(::grpc::ServerContext* context, const ::api::PrepareWithdrawRequest* request, ::api::PrepareWithdrawResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading::Service::SubmitTransaction(::grpc::ServerContext* context, const ::api::SubmitTransactionRequest* request, ::api::SubmitTransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading::Service::PrepareProposal(::grpc::ServerContext* context, const ::api::PrepareProposalRequest* request, ::api::PrepareProposalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading::Service::PrepareVote(::grpc::ServerContext* context, const ::api::PrepareVoteRequest* request, ::api::PrepareVoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading::Service::PropagateChainEvent(::grpc::ServerContext* context, const ::api::PropagateChainEventRequest* request, ::api::PropagateChainEventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading::Service::PrepareLiquidityProvision(::grpc::ServerContext* context, const ::api::PrepareLiquidityProvisionRequest* request, ::api::PrepareLiquidityProvisionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* trading_data_method_names[] = {
  "/api.trading_data/MarketAccounts",
  "/api.trading_data/PartyAccounts",
  "/api.trading_data/FeeInfrastructureAccounts",
  "/api.trading_data/Candles",
  "/api.trading_data/MarketDataByID",
  "/api.trading_data/MarketsData",
  "/api.trading_data/MarketByID",
  "/api.trading_data/MarketDepth",
  "/api.trading_data/Markets",
  "/api.trading_data/OrderByMarketAndID",
  "/api.trading_data/OrderByReference",
  "/api.trading_data/OrdersByMarket",
  "/api.trading_data/OrdersByParty",
  "/api.trading_data/OrderByID",
  "/api.trading_data/OrderVersionsByID",
  "/api.trading_data/MarginLevels",
  "/api.trading_data/Parties",
  "/api.trading_data/PartyByID",
  "/api.trading_data/PositionsByParty",
  "/api.trading_data/LastTrade",
  "/api.trading_data/TradesByMarket",
  "/api.trading_data/TradesByOrder",
  "/api.trading_data/TradesByParty",
  "/api.trading_data/GetProposals",
  "/api.trading_data/GetProposalsByParty",
  "/api.trading_data/GetVotesByParty",
  "/api.trading_data/GetNewMarketProposals",
  "/api.trading_data/GetUpdateMarketProposals",
  "/api.trading_data/GetNetworkParametersProposals",
  "/api.trading_data/GetNewAssetProposals",
  "/api.trading_data/GetProposalByID",
  "/api.trading_data/GetProposalByReference",
  "/api.trading_data/ObserveGovernance",
  "/api.trading_data/ObservePartyProposals",
  "/api.trading_data/ObservePartyVotes",
  "/api.trading_data/ObserveProposalVotes",
  "/api.trading_data/ObserveEventBus",
  "/api.trading_data/Statistics",
  "/api.trading_data/GetVegaTime",
  "/api.trading_data/AccountsSubscribe",
  "/api.trading_data/CandlesSubscribe",
  "/api.trading_data/MarginLevelsSubscribe",
  "/api.trading_data/MarketDepthSubscribe",
  "/api.trading_data/MarketDepthUpdatesSubscribe",
  "/api.trading_data/MarketsDataSubscribe",
  "/api.trading_data/OrdersSubscribe",
  "/api.trading_data/PositionsSubscribe",
  "/api.trading_data/TradesSubscribe",
  "/api.trading_data/TransferResponsesSubscribe",
  "/api.trading_data/GetNodeSignaturesAggregate",
  "/api.trading_data/AssetByID",
  "/api.trading_data/Assets",
  "/api.trading_data/EstimateFee",
  "/api.trading_data/EstimateMargin",
  "/api.trading_data/ERC20WithdrawalApproval",
  "/api.trading_data/Withdrawal",
  "/api.trading_data/Withdrawals",
  "/api.trading_data/Deposit",
  "/api.trading_data/Deposits",
  "/api.trading_data/NetworkParameters",
  "/api.trading_data/LiquidityProvisions",
};

std::unique_ptr< trading_data::Stub> trading_data::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< trading_data::Stub> stub(new trading_data::Stub(channel));
  return stub;
}

trading_data::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_MarketAccounts_(trading_data_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PartyAccounts_(trading_data_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FeeInfrastructureAccounts_(trading_data_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Candles_(trading_data_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarketDataByID_(trading_data_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarketsData_(trading_data_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarketByID_(trading_data_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarketDepth_(trading_data_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Markets_(trading_data_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrderByMarketAndID_(trading_data_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrderByReference_(trading_data_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrdersByMarket_(trading_data_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrdersByParty_(trading_data_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrderByID_(trading_data_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrderVersionsByID_(trading_data_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarginLevels_(trading_data_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Parties_(trading_data_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PartyByID_(trading_data_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PositionsByParty_(trading_data_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LastTrade_(trading_data_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TradesByMarket_(trading_data_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TradesByOrder_(trading_data_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TradesByParty_(trading_data_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProposals_(trading_data_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProposalsByParty_(trading_data_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVotesByParty_(trading_data_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNewMarketProposals_(trading_data_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUpdateMarketProposals_(trading_data_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNetworkParametersProposals_(trading_data_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNewAssetProposals_(trading_data_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProposalByID_(trading_data_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProposalByReference_(trading_data_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ObserveGovernance_(trading_data_method_names[32], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ObservePartyProposals_(trading_data_method_names[33], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ObservePartyVotes_(trading_data_method_names[34], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ObserveProposalVotes_(trading_data_method_names[35], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ObserveEventBus_(trading_data_method_names[36], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Statistics_(trading_data_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVegaTime_(trading_data_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AccountsSubscribe_(trading_data_method_names[39], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CandlesSubscribe_(trading_data_method_names[40], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_MarginLevelsSubscribe_(trading_data_method_names[41], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_MarketDepthSubscribe_(trading_data_method_names[42], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_MarketDepthUpdatesSubscribe_(trading_data_method_names[43], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_MarketsDataSubscribe_(trading_data_method_names[44], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_OrdersSubscribe_(trading_data_method_names[45], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PositionsSubscribe_(trading_data_method_names[46], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_TradesSubscribe_(trading_data_method_names[47], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_TransferResponsesSubscribe_(trading_data_method_names[48], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetNodeSignaturesAggregate_(trading_data_method_names[49], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AssetByID_(trading_data_method_names[50], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Assets_(trading_data_method_names[51], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EstimateFee_(trading_data_method_names[52], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EstimateMargin_(trading_data_method_names[53], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ERC20WithdrawalApproval_(trading_data_method_names[54], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Withdrawal_(trading_data_method_names[55], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Withdrawals_(trading_data_method_names[56], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Deposit_(trading_data_method_names[57], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Deposits_(trading_data_method_names[58], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NetworkParameters_(trading_data_method_names[59], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LiquidityProvisions_(trading_data_method_names[60], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status trading_data::Stub::MarketAccounts(::grpc::ClientContext* context, const ::api::MarketAccountsRequest& request, ::api::MarketAccountsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::MarketAccountsRequest, ::api::MarketAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarketAccounts_, context, request, response);
}

void trading_data::Stub::experimental_async::MarketAccounts(::grpc::ClientContext* context, const ::api::MarketAccountsRequest* request, ::api::MarketAccountsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::MarketAccountsRequest, ::api::MarketAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketAccounts_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::MarketAccounts(::grpc::ClientContext* context, const ::api::MarketAccountsRequest* request, ::api::MarketAccountsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketAccounts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::MarketAccountsResponse>* trading_data::Stub::PrepareAsyncMarketAccountsRaw(::grpc::ClientContext* context, const ::api::MarketAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::MarketAccountsResponse, ::api::MarketAccountsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarketAccounts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::MarketAccountsResponse>* trading_data::Stub::AsyncMarketAccountsRaw(::grpc::ClientContext* context, const ::api::MarketAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketAccountsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::PartyAccounts(::grpc::ClientContext* context, const ::api::PartyAccountsRequest& request, ::api::PartyAccountsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::PartyAccountsRequest, ::api::PartyAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PartyAccounts_, context, request, response);
}

void trading_data::Stub::experimental_async::PartyAccounts(::grpc::ClientContext* context, const ::api::PartyAccountsRequest* request, ::api::PartyAccountsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::PartyAccountsRequest, ::api::PartyAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PartyAccounts_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::PartyAccounts(::grpc::ClientContext* context, const ::api::PartyAccountsRequest* request, ::api::PartyAccountsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PartyAccounts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::PartyAccountsResponse>* trading_data::Stub::PrepareAsyncPartyAccountsRaw(::grpc::ClientContext* context, const ::api::PartyAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::PartyAccountsResponse, ::api::PartyAccountsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PartyAccounts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::PartyAccountsResponse>* trading_data::Stub::AsyncPartyAccountsRaw(::grpc::ClientContext* context, const ::api::PartyAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPartyAccountsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::FeeInfrastructureAccounts(::grpc::ClientContext* context, const ::api::FeeInfrastructureAccountsRequest& request, ::api::FeeInfrastructureAccountsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::FeeInfrastructureAccountsRequest, ::api::FeeInfrastructureAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FeeInfrastructureAccounts_, context, request, response);
}

void trading_data::Stub::experimental_async::FeeInfrastructureAccounts(::grpc::ClientContext* context, const ::api::FeeInfrastructureAccountsRequest* request, ::api::FeeInfrastructureAccountsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::FeeInfrastructureAccountsRequest, ::api::FeeInfrastructureAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeeInfrastructureAccounts_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::FeeInfrastructureAccounts(::grpc::ClientContext* context, const ::api::FeeInfrastructureAccountsRequest* request, ::api::FeeInfrastructureAccountsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeeInfrastructureAccounts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::FeeInfrastructureAccountsResponse>* trading_data::Stub::PrepareAsyncFeeInfrastructureAccountsRaw(::grpc::ClientContext* context, const ::api::FeeInfrastructureAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::FeeInfrastructureAccountsResponse, ::api::FeeInfrastructureAccountsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FeeInfrastructureAccounts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::FeeInfrastructureAccountsResponse>* trading_data::Stub::AsyncFeeInfrastructureAccountsRaw(::grpc::ClientContext* context, const ::api::FeeInfrastructureAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFeeInfrastructureAccountsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::Candles(::grpc::ClientContext* context, const ::api::CandlesRequest& request, ::api::CandlesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::CandlesRequest, ::api::CandlesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Candles_, context, request, response);
}

void trading_data::Stub::experimental_async::Candles(::grpc::ClientContext* context, const ::api::CandlesRequest* request, ::api::CandlesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::CandlesRequest, ::api::CandlesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Candles_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::Candles(::grpc::ClientContext* context, const ::api::CandlesRequest* request, ::api::CandlesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Candles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::CandlesResponse>* trading_data::Stub::PrepareAsyncCandlesRaw(::grpc::ClientContext* context, const ::api::CandlesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::CandlesResponse, ::api::CandlesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Candles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::CandlesResponse>* trading_data::Stub::AsyncCandlesRaw(::grpc::ClientContext* context, const ::api::CandlesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCandlesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::MarketDataByID(::grpc::ClientContext* context, const ::api::MarketDataByIDRequest& request, ::api::MarketDataByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::MarketDataByIDRequest, ::api::MarketDataByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarketDataByID_, context, request, response);
}

void trading_data::Stub::experimental_async::MarketDataByID(::grpc::ClientContext* context, const ::api::MarketDataByIDRequest* request, ::api::MarketDataByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::MarketDataByIDRequest, ::api::MarketDataByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketDataByID_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::MarketDataByID(::grpc::ClientContext* context, const ::api::MarketDataByIDRequest* request, ::api::MarketDataByIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketDataByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::MarketDataByIDResponse>* trading_data::Stub::PrepareAsyncMarketDataByIDRaw(::grpc::ClientContext* context, const ::api::MarketDataByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::MarketDataByIDResponse, ::api::MarketDataByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarketDataByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::MarketDataByIDResponse>* trading_data::Stub::AsyncMarketDataByIDRaw(::grpc::ClientContext* context, const ::api::MarketDataByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketDataByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::MarketsData(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::api::MarketsDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::api::MarketsDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarketsData_, context, request, response);
}

void trading_data::Stub::experimental_async::MarketsData(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::api::MarketsDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::api::MarketsDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketsData_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::MarketsData(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::api::MarketsDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketsData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::MarketsDataResponse>* trading_data::Stub::PrepareAsyncMarketsDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::MarketsDataResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarketsData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::MarketsDataResponse>* trading_data::Stub::AsyncMarketsDataRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketsDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::MarketByID(::grpc::ClientContext* context, const ::api::MarketByIDRequest& request, ::api::MarketByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::MarketByIDRequest, ::api::MarketByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarketByID_, context, request, response);
}

void trading_data::Stub::experimental_async::MarketByID(::grpc::ClientContext* context, const ::api::MarketByIDRequest* request, ::api::MarketByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::MarketByIDRequest, ::api::MarketByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketByID_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::MarketByID(::grpc::ClientContext* context, const ::api::MarketByIDRequest* request, ::api::MarketByIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::MarketByIDResponse>* trading_data::Stub::PrepareAsyncMarketByIDRaw(::grpc::ClientContext* context, const ::api::MarketByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::MarketByIDResponse, ::api::MarketByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarketByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::MarketByIDResponse>* trading_data::Stub::AsyncMarketByIDRaw(::grpc::ClientContext* context, const ::api::MarketByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::MarketDepth(::grpc::ClientContext* context, const ::api::MarketDepthRequest& request, ::api::MarketDepthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::MarketDepthRequest, ::api::MarketDepthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarketDepth_, context, request, response);
}

void trading_data::Stub::experimental_async::MarketDepth(::grpc::ClientContext* context, const ::api::MarketDepthRequest* request, ::api::MarketDepthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::MarketDepthRequest, ::api::MarketDepthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketDepth_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::MarketDepth(::grpc::ClientContext* context, const ::api::MarketDepthRequest* request, ::api::MarketDepthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarketDepth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::MarketDepthResponse>* trading_data::Stub::PrepareAsyncMarketDepthRaw(::grpc::ClientContext* context, const ::api::MarketDepthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::MarketDepthResponse, ::api::MarketDepthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarketDepth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::MarketDepthResponse>* trading_data::Stub::AsyncMarketDepthRaw(::grpc::ClientContext* context, const ::api::MarketDepthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketDepthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::Markets(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::api::MarketsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::api::MarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Markets_, context, request, response);
}

void trading_data::Stub::experimental_async::Markets(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::api::MarketsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::api::MarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Markets_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::Markets(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::api::MarketsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Markets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::MarketsResponse>* trading_data::Stub::PrepareAsyncMarketsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::MarketsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Markets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::MarketsResponse>* trading_data::Stub::AsyncMarketsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::OrderByMarketAndID(::grpc::ClientContext* context, const ::api::OrderByMarketAndIdRequest& request, ::api::OrderByMarketAndIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::OrderByMarketAndIdRequest, ::api::OrderByMarketAndIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrderByMarketAndID_, context, request, response);
}

void trading_data::Stub::experimental_async::OrderByMarketAndID(::grpc::ClientContext* context, const ::api::OrderByMarketAndIdRequest* request, ::api::OrderByMarketAndIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::OrderByMarketAndIdRequest, ::api::OrderByMarketAndIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderByMarketAndID_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::OrderByMarketAndID(::grpc::ClientContext* context, const ::api::OrderByMarketAndIdRequest* request, ::api::OrderByMarketAndIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderByMarketAndID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::OrderByMarketAndIdResponse>* trading_data::Stub::PrepareAsyncOrderByMarketAndIDRaw(::grpc::ClientContext* context, const ::api::OrderByMarketAndIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::OrderByMarketAndIdResponse, ::api::OrderByMarketAndIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrderByMarketAndID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::OrderByMarketAndIdResponse>* trading_data::Stub::AsyncOrderByMarketAndIDRaw(::grpc::ClientContext* context, const ::api::OrderByMarketAndIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrderByMarketAndIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::OrderByReference(::grpc::ClientContext* context, const ::api::OrderByReferenceRequest& request, ::api::OrderByReferenceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::OrderByReferenceRequest, ::api::OrderByReferenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrderByReference_, context, request, response);
}

void trading_data::Stub::experimental_async::OrderByReference(::grpc::ClientContext* context, const ::api::OrderByReferenceRequest* request, ::api::OrderByReferenceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::OrderByReferenceRequest, ::api::OrderByReferenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderByReference_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::OrderByReference(::grpc::ClientContext* context, const ::api::OrderByReferenceRequest* request, ::api::OrderByReferenceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderByReference_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::OrderByReferenceResponse>* trading_data::Stub::PrepareAsyncOrderByReferenceRaw(::grpc::ClientContext* context, const ::api::OrderByReferenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::OrderByReferenceResponse, ::api::OrderByReferenceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrderByReference_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::OrderByReferenceResponse>* trading_data::Stub::AsyncOrderByReferenceRaw(::grpc::ClientContext* context, const ::api::OrderByReferenceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrderByReferenceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::OrdersByMarket(::grpc::ClientContext* context, const ::api::OrdersByMarketRequest& request, ::api::OrdersByMarketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::OrdersByMarketRequest, ::api::OrdersByMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrdersByMarket_, context, request, response);
}

void trading_data::Stub::experimental_async::OrdersByMarket(::grpc::ClientContext* context, const ::api::OrdersByMarketRequest* request, ::api::OrdersByMarketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::OrdersByMarketRequest, ::api::OrdersByMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrdersByMarket_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::OrdersByMarket(::grpc::ClientContext* context, const ::api::OrdersByMarketRequest* request, ::api::OrdersByMarketResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrdersByMarket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::OrdersByMarketResponse>* trading_data::Stub::PrepareAsyncOrdersByMarketRaw(::grpc::ClientContext* context, const ::api::OrdersByMarketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::OrdersByMarketResponse, ::api::OrdersByMarketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrdersByMarket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::OrdersByMarketResponse>* trading_data::Stub::AsyncOrdersByMarketRaw(::grpc::ClientContext* context, const ::api::OrdersByMarketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrdersByMarketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::OrdersByParty(::grpc::ClientContext* context, const ::api::OrdersByPartyRequest& request, ::api::OrdersByPartyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::OrdersByPartyRequest, ::api::OrdersByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrdersByParty_, context, request, response);
}

void trading_data::Stub::experimental_async::OrdersByParty(::grpc::ClientContext* context, const ::api::OrdersByPartyRequest* request, ::api::OrdersByPartyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::OrdersByPartyRequest, ::api::OrdersByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrdersByParty_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::OrdersByParty(::grpc::ClientContext* context, const ::api::OrdersByPartyRequest* request, ::api::OrdersByPartyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrdersByParty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::OrdersByPartyResponse>* trading_data::Stub::PrepareAsyncOrdersByPartyRaw(::grpc::ClientContext* context, const ::api::OrdersByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::OrdersByPartyResponse, ::api::OrdersByPartyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrdersByParty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::OrdersByPartyResponse>* trading_data::Stub::AsyncOrdersByPartyRaw(::grpc::ClientContext* context, const ::api::OrdersByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrdersByPartyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::OrderByID(::grpc::ClientContext* context, const ::api::OrderByIDRequest& request, ::vega::Order* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::OrderByIDRequest, ::vega::Order, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrderByID_, context, request, response);
}

void trading_data::Stub::experimental_async::OrderByID(::grpc::ClientContext* context, const ::api::OrderByIDRequest* request, ::vega::Order* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::OrderByIDRequest, ::vega::Order, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderByID_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::OrderByID(::grpc::ClientContext* context, const ::api::OrderByIDRequest* request, ::vega::Order* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vega::Order>* trading_data::Stub::PrepareAsyncOrderByIDRaw(::grpc::ClientContext* context, const ::api::OrderByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vega::Order, ::api::OrderByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrderByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vega::Order>* trading_data::Stub::AsyncOrderByIDRaw(::grpc::ClientContext* context, const ::api::OrderByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrderByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::OrderVersionsByID(::grpc::ClientContext* context, const ::api::OrderVersionsByIDRequest& request, ::api::OrderVersionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::OrderVersionsByIDRequest, ::api::OrderVersionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrderVersionsByID_, context, request, response);
}

void trading_data::Stub::experimental_async::OrderVersionsByID(::grpc::ClientContext* context, const ::api::OrderVersionsByIDRequest* request, ::api::OrderVersionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::OrderVersionsByIDRequest, ::api::OrderVersionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderVersionsByID_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::OrderVersionsByID(::grpc::ClientContext* context, const ::api::OrderVersionsByIDRequest* request, ::api::OrderVersionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderVersionsByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::OrderVersionsResponse>* trading_data::Stub::PrepareAsyncOrderVersionsByIDRaw(::grpc::ClientContext* context, const ::api::OrderVersionsByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::OrderVersionsResponse, ::api::OrderVersionsByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrderVersionsByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::OrderVersionsResponse>* trading_data::Stub::AsyncOrderVersionsByIDRaw(::grpc::ClientContext* context, const ::api::OrderVersionsByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrderVersionsByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::MarginLevels(::grpc::ClientContext* context, const ::api::MarginLevelsRequest& request, ::api::MarginLevelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::MarginLevelsRequest, ::api::MarginLevelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarginLevels_, context, request, response);
}

void trading_data::Stub::experimental_async::MarginLevels(::grpc::ClientContext* context, const ::api::MarginLevelsRequest* request, ::api::MarginLevelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::MarginLevelsRequest, ::api::MarginLevelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarginLevels_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::MarginLevels(::grpc::ClientContext* context, const ::api::MarginLevelsRequest* request, ::api::MarginLevelsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarginLevels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::MarginLevelsResponse>* trading_data::Stub::PrepareAsyncMarginLevelsRaw(::grpc::ClientContext* context, const ::api::MarginLevelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::MarginLevelsResponse, ::api::MarginLevelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarginLevels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::MarginLevelsResponse>* trading_data::Stub::AsyncMarginLevelsRaw(::grpc::ClientContext* context, const ::api::MarginLevelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarginLevelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::Parties(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::api::PartiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::api::PartiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Parties_, context, request, response);
}

void trading_data::Stub::experimental_async::Parties(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::api::PartiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::api::PartiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Parties_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::Parties(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::api::PartiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Parties_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::PartiesResponse>* trading_data::Stub::PrepareAsyncPartiesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::PartiesResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Parties_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::PartiesResponse>* trading_data::Stub::AsyncPartiesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPartiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::PartyByID(::grpc::ClientContext* context, const ::api::PartyByIDRequest& request, ::api::PartyByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::PartyByIDRequest, ::api::PartyByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PartyByID_, context, request, response);
}

void trading_data::Stub::experimental_async::PartyByID(::grpc::ClientContext* context, const ::api::PartyByIDRequest* request, ::api::PartyByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::PartyByIDRequest, ::api::PartyByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PartyByID_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::PartyByID(::grpc::ClientContext* context, const ::api::PartyByIDRequest* request, ::api::PartyByIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PartyByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::PartyByIDResponse>* trading_data::Stub::PrepareAsyncPartyByIDRaw(::grpc::ClientContext* context, const ::api::PartyByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::PartyByIDResponse, ::api::PartyByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PartyByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::PartyByIDResponse>* trading_data::Stub::AsyncPartyByIDRaw(::grpc::ClientContext* context, const ::api::PartyByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPartyByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::PositionsByParty(::grpc::ClientContext* context, const ::api::PositionsByPartyRequest& request, ::api::PositionsByPartyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::PositionsByPartyRequest, ::api::PositionsByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PositionsByParty_, context, request, response);
}

void trading_data::Stub::experimental_async::PositionsByParty(::grpc::ClientContext* context, const ::api::PositionsByPartyRequest* request, ::api::PositionsByPartyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::PositionsByPartyRequest, ::api::PositionsByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PositionsByParty_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::PositionsByParty(::grpc::ClientContext* context, const ::api::PositionsByPartyRequest* request, ::api::PositionsByPartyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PositionsByParty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::PositionsByPartyResponse>* trading_data::Stub::PrepareAsyncPositionsByPartyRaw(::grpc::ClientContext* context, const ::api::PositionsByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::PositionsByPartyResponse, ::api::PositionsByPartyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PositionsByParty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::PositionsByPartyResponse>* trading_data::Stub::AsyncPositionsByPartyRaw(::grpc::ClientContext* context, const ::api::PositionsByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPositionsByPartyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::LastTrade(::grpc::ClientContext* context, const ::api::LastTradeRequest& request, ::api::LastTradeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::LastTradeRequest, ::api::LastTradeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LastTrade_, context, request, response);
}

void trading_data::Stub::experimental_async::LastTrade(::grpc::ClientContext* context, const ::api::LastTradeRequest* request, ::api::LastTradeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::LastTradeRequest, ::api::LastTradeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LastTrade_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::LastTrade(::grpc::ClientContext* context, const ::api::LastTradeRequest* request, ::api::LastTradeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LastTrade_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::LastTradeResponse>* trading_data::Stub::PrepareAsyncLastTradeRaw(::grpc::ClientContext* context, const ::api::LastTradeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::LastTradeResponse, ::api::LastTradeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LastTrade_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::LastTradeResponse>* trading_data::Stub::AsyncLastTradeRaw(::grpc::ClientContext* context, const ::api::LastTradeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLastTradeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::TradesByMarket(::grpc::ClientContext* context, const ::api::TradesByMarketRequest& request, ::api::TradesByMarketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::TradesByMarketRequest, ::api::TradesByMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TradesByMarket_, context, request, response);
}

void trading_data::Stub::experimental_async::TradesByMarket(::grpc::ClientContext* context, const ::api::TradesByMarketRequest* request, ::api::TradesByMarketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::TradesByMarketRequest, ::api::TradesByMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradesByMarket_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::TradesByMarket(::grpc::ClientContext* context, const ::api::TradesByMarketRequest* request, ::api::TradesByMarketResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradesByMarket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::TradesByMarketResponse>* trading_data::Stub::PrepareAsyncTradesByMarketRaw(::grpc::ClientContext* context, const ::api::TradesByMarketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::TradesByMarketResponse, ::api::TradesByMarketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TradesByMarket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::TradesByMarketResponse>* trading_data::Stub::AsyncTradesByMarketRaw(::grpc::ClientContext* context, const ::api::TradesByMarketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTradesByMarketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::TradesByOrder(::grpc::ClientContext* context, const ::api::TradesByOrderRequest& request, ::api::TradesByOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::TradesByOrderRequest, ::api::TradesByOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TradesByOrder_, context, request, response);
}

void trading_data::Stub::experimental_async::TradesByOrder(::grpc::ClientContext* context, const ::api::TradesByOrderRequest* request, ::api::TradesByOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::TradesByOrderRequest, ::api::TradesByOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradesByOrder_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::TradesByOrder(::grpc::ClientContext* context, const ::api::TradesByOrderRequest* request, ::api::TradesByOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradesByOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::TradesByOrderResponse>* trading_data::Stub::PrepareAsyncTradesByOrderRaw(::grpc::ClientContext* context, const ::api::TradesByOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::TradesByOrderResponse, ::api::TradesByOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TradesByOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::TradesByOrderResponse>* trading_data::Stub::AsyncTradesByOrderRaw(::grpc::ClientContext* context, const ::api::TradesByOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTradesByOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::TradesByParty(::grpc::ClientContext* context, const ::api::TradesByPartyRequest& request, ::api::TradesByPartyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::TradesByPartyRequest, ::api::TradesByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TradesByParty_, context, request, response);
}

void trading_data::Stub::experimental_async::TradesByParty(::grpc::ClientContext* context, const ::api::TradesByPartyRequest* request, ::api::TradesByPartyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::TradesByPartyRequest, ::api::TradesByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradesByParty_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::TradesByParty(::grpc::ClientContext* context, const ::api::TradesByPartyRequest* request, ::api::TradesByPartyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TradesByParty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::TradesByPartyResponse>* trading_data::Stub::PrepareAsyncTradesByPartyRaw(::grpc::ClientContext* context, const ::api::TradesByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::TradesByPartyResponse, ::api::TradesByPartyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TradesByParty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::TradesByPartyResponse>* trading_data::Stub::AsyncTradesByPartyRaw(::grpc::ClientContext* context, const ::api::TradesByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTradesByPartyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::GetProposals(::grpc::ClientContext* context, const ::api::GetProposalsRequest& request, ::api::GetProposalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::GetProposalsRequest, ::api::GetProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProposals_, context, request, response);
}

void trading_data::Stub::experimental_async::GetProposals(::grpc::ClientContext* context, const ::api::GetProposalsRequest* request, ::api::GetProposalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::GetProposalsRequest, ::api::GetProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposals_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::GetProposals(::grpc::ClientContext* context, const ::api::GetProposalsRequest* request, ::api::GetProposalsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetProposalsResponse>* trading_data::Stub::PrepareAsyncGetProposalsRaw(::grpc::ClientContext* context, const ::api::GetProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::GetProposalsResponse, ::api::GetProposalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProposals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::GetProposalsResponse>* trading_data::Stub::AsyncGetProposalsRaw(::grpc::ClientContext* context, const ::api::GetProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProposalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::GetProposalsByParty(::grpc::ClientContext* context, const ::api::GetProposalsByPartyRequest& request, ::api::GetProposalsByPartyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::GetProposalsByPartyRequest, ::api::GetProposalsByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProposalsByParty_, context, request, response);
}

void trading_data::Stub::experimental_async::GetProposalsByParty(::grpc::ClientContext* context, const ::api::GetProposalsByPartyRequest* request, ::api::GetProposalsByPartyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::GetProposalsByPartyRequest, ::api::GetProposalsByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposalsByParty_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::GetProposalsByParty(::grpc::ClientContext* context, const ::api::GetProposalsByPartyRequest* request, ::api::GetProposalsByPartyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposalsByParty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetProposalsByPartyResponse>* trading_data::Stub::PrepareAsyncGetProposalsByPartyRaw(::grpc::ClientContext* context, const ::api::GetProposalsByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::GetProposalsByPartyResponse, ::api::GetProposalsByPartyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProposalsByParty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::GetProposalsByPartyResponse>* trading_data::Stub::AsyncGetProposalsByPartyRaw(::grpc::ClientContext* context, const ::api::GetProposalsByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProposalsByPartyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::GetVotesByParty(::grpc::ClientContext* context, const ::api::GetVotesByPartyRequest& request, ::api::GetVotesByPartyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::GetVotesByPartyRequest, ::api::GetVotesByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVotesByParty_, context, request, response);
}

void trading_data::Stub::experimental_async::GetVotesByParty(::grpc::ClientContext* context, const ::api::GetVotesByPartyRequest* request, ::api::GetVotesByPartyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::GetVotesByPartyRequest, ::api::GetVotesByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVotesByParty_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::GetVotesByParty(::grpc::ClientContext* context, const ::api::GetVotesByPartyRequest* request, ::api::GetVotesByPartyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVotesByParty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetVotesByPartyResponse>* trading_data::Stub::PrepareAsyncGetVotesByPartyRaw(::grpc::ClientContext* context, const ::api::GetVotesByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::GetVotesByPartyResponse, ::api::GetVotesByPartyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVotesByParty_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::GetVotesByPartyResponse>* trading_data::Stub::AsyncGetVotesByPartyRaw(::grpc::ClientContext* context, const ::api::GetVotesByPartyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVotesByPartyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::GetNewMarketProposals(::grpc::ClientContext* context, const ::api::GetNewMarketProposalsRequest& request, ::api::GetNewMarketProposalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::GetNewMarketProposalsRequest, ::api::GetNewMarketProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNewMarketProposals_, context, request, response);
}

void trading_data::Stub::experimental_async::GetNewMarketProposals(::grpc::ClientContext* context, const ::api::GetNewMarketProposalsRequest* request, ::api::GetNewMarketProposalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::GetNewMarketProposalsRequest, ::api::GetNewMarketProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNewMarketProposals_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::GetNewMarketProposals(::grpc::ClientContext* context, const ::api::GetNewMarketProposalsRequest* request, ::api::GetNewMarketProposalsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNewMarketProposals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetNewMarketProposalsResponse>* trading_data::Stub::PrepareAsyncGetNewMarketProposalsRaw(::grpc::ClientContext* context, const ::api::GetNewMarketProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::GetNewMarketProposalsResponse, ::api::GetNewMarketProposalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNewMarketProposals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::GetNewMarketProposalsResponse>* trading_data::Stub::AsyncGetNewMarketProposalsRaw(::grpc::ClientContext* context, const ::api::GetNewMarketProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNewMarketProposalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::GetUpdateMarketProposals(::grpc::ClientContext* context, const ::api::GetUpdateMarketProposalsRequest& request, ::api::GetUpdateMarketProposalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::GetUpdateMarketProposalsRequest, ::api::GetUpdateMarketProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUpdateMarketProposals_, context, request, response);
}

void trading_data::Stub::experimental_async::GetUpdateMarketProposals(::grpc::ClientContext* context, const ::api::GetUpdateMarketProposalsRequest* request, ::api::GetUpdateMarketProposalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::GetUpdateMarketProposalsRequest, ::api::GetUpdateMarketProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUpdateMarketProposals_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::GetUpdateMarketProposals(::grpc::ClientContext* context, const ::api::GetUpdateMarketProposalsRequest* request, ::api::GetUpdateMarketProposalsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUpdateMarketProposals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetUpdateMarketProposalsResponse>* trading_data::Stub::PrepareAsyncGetUpdateMarketProposalsRaw(::grpc::ClientContext* context, const ::api::GetUpdateMarketProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::GetUpdateMarketProposalsResponse, ::api::GetUpdateMarketProposalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUpdateMarketProposals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::GetUpdateMarketProposalsResponse>* trading_data::Stub::AsyncGetUpdateMarketProposalsRaw(::grpc::ClientContext* context, const ::api::GetUpdateMarketProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUpdateMarketProposalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::GetNetworkParametersProposals(::grpc::ClientContext* context, const ::api::GetNetworkParametersProposalsRequest& request, ::api::GetNetworkParametersProposalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::GetNetworkParametersProposalsRequest, ::api::GetNetworkParametersProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNetworkParametersProposals_, context, request, response);
}

void trading_data::Stub::experimental_async::GetNetworkParametersProposals(::grpc::ClientContext* context, const ::api::GetNetworkParametersProposalsRequest* request, ::api::GetNetworkParametersProposalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::GetNetworkParametersProposalsRequest, ::api::GetNetworkParametersProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNetworkParametersProposals_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::GetNetworkParametersProposals(::grpc::ClientContext* context, const ::api::GetNetworkParametersProposalsRequest* request, ::api::GetNetworkParametersProposalsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNetworkParametersProposals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetNetworkParametersProposalsResponse>* trading_data::Stub::PrepareAsyncGetNetworkParametersProposalsRaw(::grpc::ClientContext* context, const ::api::GetNetworkParametersProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::GetNetworkParametersProposalsResponse, ::api::GetNetworkParametersProposalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNetworkParametersProposals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::GetNetworkParametersProposalsResponse>* trading_data::Stub::AsyncGetNetworkParametersProposalsRaw(::grpc::ClientContext* context, const ::api::GetNetworkParametersProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNetworkParametersProposalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::GetNewAssetProposals(::grpc::ClientContext* context, const ::api::GetNewAssetProposalsRequest& request, ::api::GetNewAssetProposalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::GetNewAssetProposalsRequest, ::api::GetNewAssetProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNewAssetProposals_, context, request, response);
}

void trading_data::Stub::experimental_async::GetNewAssetProposals(::grpc::ClientContext* context, const ::api::GetNewAssetProposalsRequest* request, ::api::GetNewAssetProposalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::GetNewAssetProposalsRequest, ::api::GetNewAssetProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNewAssetProposals_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::GetNewAssetProposals(::grpc::ClientContext* context, const ::api::GetNewAssetProposalsRequest* request, ::api::GetNewAssetProposalsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNewAssetProposals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetNewAssetProposalsResponse>* trading_data::Stub::PrepareAsyncGetNewAssetProposalsRaw(::grpc::ClientContext* context, const ::api::GetNewAssetProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::GetNewAssetProposalsResponse, ::api::GetNewAssetProposalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNewAssetProposals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::GetNewAssetProposalsResponse>* trading_data::Stub::AsyncGetNewAssetProposalsRaw(::grpc::ClientContext* context, const ::api::GetNewAssetProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNewAssetProposalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::GetProposalByID(::grpc::ClientContext* context, const ::api::GetProposalByIDRequest& request, ::api::GetProposalByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::GetProposalByIDRequest, ::api::GetProposalByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProposalByID_, context, request, response);
}

void trading_data::Stub::experimental_async::GetProposalByID(::grpc::ClientContext* context, const ::api::GetProposalByIDRequest* request, ::api::GetProposalByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::GetProposalByIDRequest, ::api::GetProposalByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposalByID_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::GetProposalByID(::grpc::ClientContext* context, const ::api::GetProposalByIDRequest* request, ::api::GetProposalByIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposalByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetProposalByIDResponse>* trading_data::Stub::PrepareAsyncGetProposalByIDRaw(::grpc::ClientContext* context, const ::api::GetProposalByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::GetProposalByIDResponse, ::api::GetProposalByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProposalByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::GetProposalByIDResponse>* trading_data::Stub::AsyncGetProposalByIDRaw(::grpc::ClientContext* context, const ::api::GetProposalByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProposalByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::GetProposalByReference(::grpc::ClientContext* context, const ::api::GetProposalByReferenceRequest& request, ::api::GetProposalByReferenceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::GetProposalByReferenceRequest, ::api::GetProposalByReferenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetProposalByReference_, context, request, response);
}

void trading_data::Stub::experimental_async::GetProposalByReference(::grpc::ClientContext* context, const ::api::GetProposalByReferenceRequest* request, ::api::GetProposalByReferenceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::GetProposalByReferenceRequest, ::api::GetProposalByReferenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposalByReference_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::GetProposalByReference(::grpc::ClientContext* context, const ::api::GetProposalByReferenceRequest* request, ::api::GetProposalByReferenceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetProposalByReference_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetProposalByReferenceResponse>* trading_data::Stub::PrepareAsyncGetProposalByReferenceRaw(::grpc::ClientContext* context, const ::api::GetProposalByReferenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::GetProposalByReferenceResponse, ::api::GetProposalByReferenceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetProposalByReference_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::GetProposalByReferenceResponse>* trading_data::Stub::AsyncGetProposalByReferenceRaw(::grpc::ClientContext* context, const ::api::GetProposalByReferenceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetProposalByReferenceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::vega::GovernanceData>* trading_data::Stub::ObserveGovernanceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::vega::GovernanceData>::Create(channel_.get(), rpcmethod_ObserveGovernance_, context, request);
}

void trading_data::Stub::experimental_async::ObserveGovernance(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::vega::GovernanceData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::vega::GovernanceData>::Create(stub_->channel_.get(), stub_->rpcmethod_ObserveGovernance_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::vega::GovernanceData>* trading_data::Stub::AsyncObserveGovernanceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::GovernanceData>::Create(channel_.get(), cq, rpcmethod_ObserveGovernance_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vega::GovernanceData>* trading_data::Stub::PrepareAsyncObserveGovernanceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::GovernanceData>::Create(channel_.get(), cq, rpcmethod_ObserveGovernance_, context, request, false, nullptr);
}

::grpc::ClientReader< ::vega::GovernanceData>* trading_data::Stub::ObservePartyProposalsRaw(::grpc::ClientContext* context, const ::api::ObservePartyProposalsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vega::GovernanceData>::Create(channel_.get(), rpcmethod_ObservePartyProposals_, context, request);
}

void trading_data::Stub::experimental_async::ObservePartyProposals(::grpc::ClientContext* context, ::api::ObservePartyProposalsRequest* request, ::grpc::experimental::ClientReadReactor< ::vega::GovernanceData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::vega::GovernanceData>::Create(stub_->channel_.get(), stub_->rpcmethod_ObservePartyProposals_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::vega::GovernanceData>* trading_data::Stub::AsyncObservePartyProposalsRaw(::grpc::ClientContext* context, const ::api::ObservePartyProposalsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::GovernanceData>::Create(channel_.get(), cq, rpcmethod_ObservePartyProposals_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vega::GovernanceData>* trading_data::Stub::PrepareAsyncObservePartyProposalsRaw(::grpc::ClientContext* context, const ::api::ObservePartyProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::GovernanceData>::Create(channel_.get(), cq, rpcmethod_ObservePartyProposals_, context, request, false, nullptr);
}

::grpc::ClientReader< ::vega::Vote>* trading_data::Stub::ObservePartyVotesRaw(::grpc::ClientContext* context, const ::api::ObservePartyVotesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vega::Vote>::Create(channel_.get(), rpcmethod_ObservePartyVotes_, context, request);
}

void trading_data::Stub::experimental_async::ObservePartyVotes(::grpc::ClientContext* context, ::api::ObservePartyVotesRequest* request, ::grpc::experimental::ClientReadReactor< ::vega::Vote>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::vega::Vote>::Create(stub_->channel_.get(), stub_->rpcmethod_ObservePartyVotes_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::vega::Vote>* trading_data::Stub::AsyncObservePartyVotesRaw(::grpc::ClientContext* context, const ::api::ObservePartyVotesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::Vote>::Create(channel_.get(), cq, rpcmethod_ObservePartyVotes_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vega::Vote>* trading_data::Stub::PrepareAsyncObservePartyVotesRaw(::grpc::ClientContext* context, const ::api::ObservePartyVotesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::Vote>::Create(channel_.get(), cq, rpcmethod_ObservePartyVotes_, context, request, false, nullptr);
}

::grpc::ClientReader< ::vega::Vote>* trading_data::Stub::ObserveProposalVotesRaw(::grpc::ClientContext* context, const ::api::ObserveProposalVotesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vega::Vote>::Create(channel_.get(), rpcmethod_ObserveProposalVotes_, context, request);
}

void trading_data::Stub::experimental_async::ObserveProposalVotes(::grpc::ClientContext* context, ::api::ObserveProposalVotesRequest* request, ::grpc::experimental::ClientReadReactor< ::vega::Vote>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::vega::Vote>::Create(stub_->channel_.get(), stub_->rpcmethod_ObserveProposalVotes_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::vega::Vote>* trading_data::Stub::AsyncObserveProposalVotesRaw(::grpc::ClientContext* context, const ::api::ObserveProposalVotesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::Vote>::Create(channel_.get(), cq, rpcmethod_ObserveProposalVotes_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vega::Vote>* trading_data::Stub::PrepareAsyncObserveProposalVotesRaw(::grpc::ClientContext* context, const ::api::ObserveProposalVotesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::Vote>::Create(channel_.get(), cq, rpcmethod_ObserveProposalVotes_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::api::ObserveEventsRequest, ::api::ObserveEventsResponse>* trading_data::Stub::ObserveEventBusRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::api::ObserveEventsRequest, ::api::ObserveEventsResponse>::Create(channel_.get(), rpcmethod_ObserveEventBus_, context);
}

void trading_data::Stub::experimental_async::ObserveEventBus(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::api::ObserveEventsRequest,::api::ObserveEventsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::api::ObserveEventsRequest,::api::ObserveEventsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ObserveEventBus_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::api::ObserveEventsRequest, ::api::ObserveEventsResponse>* trading_data::Stub::AsyncObserveEventBusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::api::ObserveEventsRequest, ::api::ObserveEventsResponse>::Create(channel_.get(), cq, rpcmethod_ObserveEventBus_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::api::ObserveEventsRequest, ::api::ObserveEventsResponse>* trading_data::Stub::PrepareAsyncObserveEventBusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::api::ObserveEventsRequest, ::api::ObserveEventsResponse>::Create(channel_.get(), cq, rpcmethod_ObserveEventBus_, context, false, nullptr);
}

::grpc::Status trading_data::Stub::Statistics(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::vega::Statistics* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::vega::Statistics, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Statistics_, context, request, response);
}

void trading_data::Stub::experimental_async::Statistics(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::vega::Statistics* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::vega::Statistics, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Statistics_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::Statistics(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::vega::Statistics* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Statistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vega::Statistics>* trading_data::Stub::PrepareAsyncStatisticsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vega::Statistics, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Statistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vega::Statistics>* trading_data::Stub::AsyncStatisticsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::GetVegaTime(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::api::VegaTimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::api::VegaTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVegaTime_, context, request, response);
}

void trading_data::Stub::experimental_async::GetVegaTime(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::api::VegaTimeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::api::VegaTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVegaTime_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::GetVegaTime(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::api::VegaTimeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVegaTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::VegaTimeResponse>* trading_data::Stub::PrepareAsyncGetVegaTimeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::VegaTimeResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVegaTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::VegaTimeResponse>* trading_data::Stub::AsyncGetVegaTimeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVegaTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::vega::Account>* trading_data::Stub::AccountsSubscribeRaw(::grpc::ClientContext* context, const ::api::AccountsSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vega::Account>::Create(channel_.get(), rpcmethod_AccountsSubscribe_, context, request);
}

void trading_data::Stub::experimental_async::AccountsSubscribe(::grpc::ClientContext* context, ::api::AccountsSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::vega::Account>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::vega::Account>::Create(stub_->channel_.get(), stub_->rpcmethod_AccountsSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::vega::Account>* trading_data::Stub::AsyncAccountsSubscribeRaw(::grpc::ClientContext* context, const ::api::AccountsSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::Account>::Create(channel_.get(), cq, rpcmethod_AccountsSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vega::Account>* trading_data::Stub::PrepareAsyncAccountsSubscribeRaw(::grpc::ClientContext* context, const ::api::AccountsSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::Account>::Create(channel_.get(), cq, rpcmethod_AccountsSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::vega::Candle>* trading_data::Stub::CandlesSubscribeRaw(::grpc::ClientContext* context, const ::api::CandlesSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vega::Candle>::Create(channel_.get(), rpcmethod_CandlesSubscribe_, context, request);
}

void trading_data::Stub::experimental_async::CandlesSubscribe(::grpc::ClientContext* context, ::api::CandlesSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::vega::Candle>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::vega::Candle>::Create(stub_->channel_.get(), stub_->rpcmethod_CandlesSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::vega::Candle>* trading_data::Stub::AsyncCandlesSubscribeRaw(::grpc::ClientContext* context, const ::api::CandlesSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::Candle>::Create(channel_.get(), cq, rpcmethod_CandlesSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vega::Candle>* trading_data::Stub::PrepareAsyncCandlesSubscribeRaw(::grpc::ClientContext* context, const ::api::CandlesSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::Candle>::Create(channel_.get(), cq, rpcmethod_CandlesSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::vega::MarginLevels>* trading_data::Stub::MarginLevelsSubscribeRaw(::grpc::ClientContext* context, const ::api::MarginLevelsSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vega::MarginLevels>::Create(channel_.get(), rpcmethod_MarginLevelsSubscribe_, context, request);
}

void trading_data::Stub::experimental_async::MarginLevelsSubscribe(::grpc::ClientContext* context, ::api::MarginLevelsSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::vega::MarginLevels>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::vega::MarginLevels>::Create(stub_->channel_.get(), stub_->rpcmethod_MarginLevelsSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::vega::MarginLevels>* trading_data::Stub::AsyncMarginLevelsSubscribeRaw(::grpc::ClientContext* context, const ::api::MarginLevelsSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::MarginLevels>::Create(channel_.get(), cq, rpcmethod_MarginLevelsSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vega::MarginLevels>* trading_data::Stub::PrepareAsyncMarginLevelsSubscribeRaw(::grpc::ClientContext* context, const ::api::MarginLevelsSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::MarginLevels>::Create(channel_.get(), cq, rpcmethod_MarginLevelsSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::vega::MarketDepth>* trading_data::Stub::MarketDepthSubscribeRaw(::grpc::ClientContext* context, const ::api::MarketDepthSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vega::MarketDepth>::Create(channel_.get(), rpcmethod_MarketDepthSubscribe_, context, request);
}

void trading_data::Stub::experimental_async::MarketDepthSubscribe(::grpc::ClientContext* context, ::api::MarketDepthSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::vega::MarketDepth>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::vega::MarketDepth>::Create(stub_->channel_.get(), stub_->rpcmethod_MarketDepthSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::vega::MarketDepth>* trading_data::Stub::AsyncMarketDepthSubscribeRaw(::grpc::ClientContext* context, const ::api::MarketDepthSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::MarketDepth>::Create(channel_.get(), cq, rpcmethod_MarketDepthSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vega::MarketDepth>* trading_data::Stub::PrepareAsyncMarketDepthSubscribeRaw(::grpc::ClientContext* context, const ::api::MarketDepthSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::MarketDepth>::Create(channel_.get(), cq, rpcmethod_MarketDepthSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::vega::MarketDepthUpdate>* trading_data::Stub::MarketDepthUpdatesSubscribeRaw(::grpc::ClientContext* context, const ::api::MarketDepthUpdatesSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vega::MarketDepthUpdate>::Create(channel_.get(), rpcmethod_MarketDepthUpdatesSubscribe_, context, request);
}

void trading_data::Stub::experimental_async::MarketDepthUpdatesSubscribe(::grpc::ClientContext* context, ::api::MarketDepthUpdatesSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::vega::MarketDepthUpdate>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::vega::MarketDepthUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_MarketDepthUpdatesSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::vega::MarketDepthUpdate>* trading_data::Stub::AsyncMarketDepthUpdatesSubscribeRaw(::grpc::ClientContext* context, const ::api::MarketDepthUpdatesSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::MarketDepthUpdate>::Create(channel_.get(), cq, rpcmethod_MarketDepthUpdatesSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vega::MarketDepthUpdate>* trading_data::Stub::PrepareAsyncMarketDepthUpdatesSubscribeRaw(::grpc::ClientContext* context, const ::api::MarketDepthUpdatesSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::MarketDepthUpdate>::Create(channel_.get(), cq, rpcmethod_MarketDepthUpdatesSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::vega::MarketData>* trading_data::Stub::MarketsDataSubscribeRaw(::grpc::ClientContext* context, const ::api::MarketsDataSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vega::MarketData>::Create(channel_.get(), rpcmethod_MarketsDataSubscribe_, context, request);
}

void trading_data::Stub::experimental_async::MarketsDataSubscribe(::grpc::ClientContext* context, ::api::MarketsDataSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::vega::MarketData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::vega::MarketData>::Create(stub_->channel_.get(), stub_->rpcmethod_MarketsDataSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::vega::MarketData>* trading_data::Stub::AsyncMarketsDataSubscribeRaw(::grpc::ClientContext* context, const ::api::MarketsDataSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::MarketData>::Create(channel_.get(), cq, rpcmethod_MarketsDataSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vega::MarketData>* trading_data::Stub::PrepareAsyncMarketsDataSubscribeRaw(::grpc::ClientContext* context, const ::api::MarketsDataSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::MarketData>::Create(channel_.get(), cq, rpcmethod_MarketsDataSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::api::OrdersStream>* trading_data::Stub::OrdersSubscribeRaw(::grpc::ClientContext* context, const ::api::OrdersSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::OrdersStream>::Create(channel_.get(), rpcmethod_OrdersSubscribe_, context, request);
}

void trading_data::Stub::experimental_async::OrdersSubscribe(::grpc::ClientContext* context, ::api::OrdersSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::api::OrdersStream>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::OrdersStream>::Create(stub_->channel_.get(), stub_->rpcmethod_OrdersSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::OrdersStream>* trading_data::Stub::AsyncOrdersSubscribeRaw(::grpc::ClientContext* context, const ::api::OrdersSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::OrdersStream>::Create(channel_.get(), cq, rpcmethod_OrdersSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::OrdersStream>* trading_data::Stub::PrepareAsyncOrdersSubscribeRaw(::grpc::ClientContext* context, const ::api::OrdersSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::OrdersStream>::Create(channel_.get(), cq, rpcmethod_OrdersSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::vega::Position>* trading_data::Stub::PositionsSubscribeRaw(::grpc::ClientContext* context, const ::api::PositionsSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vega::Position>::Create(channel_.get(), rpcmethod_PositionsSubscribe_, context, request);
}

void trading_data::Stub::experimental_async::PositionsSubscribe(::grpc::ClientContext* context, ::api::PositionsSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::vega::Position>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::vega::Position>::Create(stub_->channel_.get(), stub_->rpcmethod_PositionsSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::vega::Position>* trading_data::Stub::AsyncPositionsSubscribeRaw(::grpc::ClientContext* context, const ::api::PositionsSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::Position>::Create(channel_.get(), cq, rpcmethod_PositionsSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vega::Position>* trading_data::Stub::PrepareAsyncPositionsSubscribeRaw(::grpc::ClientContext* context, const ::api::PositionsSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::Position>::Create(channel_.get(), cq, rpcmethod_PositionsSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::api::TradesStream>* trading_data::Stub::TradesSubscribeRaw(::grpc::ClientContext* context, const ::api::TradesSubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::api::TradesStream>::Create(channel_.get(), rpcmethod_TradesSubscribe_, context, request);
}

void trading_data::Stub::experimental_async::TradesSubscribe(::grpc::ClientContext* context, ::api::TradesSubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::api::TradesStream>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::api::TradesStream>::Create(stub_->channel_.get(), stub_->rpcmethod_TradesSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::api::TradesStream>* trading_data::Stub::AsyncTradesSubscribeRaw(::grpc::ClientContext* context, const ::api::TradesSubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::TradesStream>::Create(channel_.get(), cq, rpcmethod_TradesSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::api::TradesStream>* trading_data::Stub::PrepareAsyncTradesSubscribeRaw(::grpc::ClientContext* context, const ::api::TradesSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::api::TradesStream>::Create(channel_.get(), cq, rpcmethod_TradesSubscribe_, context, request, false, nullptr);
}

::grpc::ClientReader< ::vega::TransferResponse>* trading_data::Stub::TransferResponsesSubscribeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::vega::TransferResponse>::Create(channel_.get(), rpcmethod_TransferResponsesSubscribe_, context, request);
}

void trading_data::Stub::experimental_async::TransferResponsesSubscribe(::grpc::ClientContext* context, ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::vega::TransferResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::vega::TransferResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_TransferResponsesSubscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::vega::TransferResponse>* trading_data::Stub::AsyncTransferResponsesSubscribeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::TransferResponse>::Create(channel_.get(), cq, rpcmethod_TransferResponsesSubscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vega::TransferResponse>* trading_data::Stub::PrepareAsyncTransferResponsesSubscribeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vega::TransferResponse>::Create(channel_.get(), cq, rpcmethod_TransferResponsesSubscribe_, context, request, false, nullptr);
}

::grpc::Status trading_data::Stub::GetNodeSignaturesAggregate(::grpc::ClientContext* context, const ::api::GetNodeSignaturesAggregateRequest& request, ::api::GetNodeSignaturesAggregateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::GetNodeSignaturesAggregateRequest, ::api::GetNodeSignaturesAggregateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNodeSignaturesAggregate_, context, request, response);
}

void trading_data::Stub::experimental_async::GetNodeSignaturesAggregate(::grpc::ClientContext* context, const ::api::GetNodeSignaturesAggregateRequest* request, ::api::GetNodeSignaturesAggregateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::GetNodeSignaturesAggregateRequest, ::api::GetNodeSignaturesAggregateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodeSignaturesAggregate_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::GetNodeSignaturesAggregate(::grpc::ClientContext* context, const ::api::GetNodeSignaturesAggregateRequest* request, ::api::GetNodeSignaturesAggregateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodeSignaturesAggregate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::GetNodeSignaturesAggregateResponse>* trading_data::Stub::PrepareAsyncGetNodeSignaturesAggregateRaw(::grpc::ClientContext* context, const ::api::GetNodeSignaturesAggregateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::GetNodeSignaturesAggregateResponse, ::api::GetNodeSignaturesAggregateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNodeSignaturesAggregate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::GetNodeSignaturesAggregateResponse>* trading_data::Stub::AsyncGetNodeSignaturesAggregateRaw(::grpc::ClientContext* context, const ::api::GetNodeSignaturesAggregateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNodeSignaturesAggregateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::AssetByID(::grpc::ClientContext* context, const ::api::AssetByIDRequest& request, ::api::AssetByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::AssetByIDRequest, ::api::AssetByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AssetByID_, context, request, response);
}

void trading_data::Stub::experimental_async::AssetByID(::grpc::ClientContext* context, const ::api::AssetByIDRequest* request, ::api::AssetByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::AssetByIDRequest, ::api::AssetByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssetByID_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::AssetByID(::grpc::ClientContext* context, const ::api::AssetByIDRequest* request, ::api::AssetByIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssetByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::AssetByIDResponse>* trading_data::Stub::PrepareAsyncAssetByIDRaw(::grpc::ClientContext* context, const ::api::AssetByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::AssetByIDResponse, ::api::AssetByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AssetByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::AssetByIDResponse>* trading_data::Stub::AsyncAssetByIDRaw(::grpc::ClientContext* context, const ::api::AssetByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAssetByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::Assets(::grpc::ClientContext* context, const ::api::AssetsRequest& request, ::api::AssetsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::AssetsRequest, ::api::AssetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Assets_, context, request, response);
}

void trading_data::Stub::experimental_async::Assets(::grpc::ClientContext* context, const ::api::AssetsRequest* request, ::api::AssetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::AssetsRequest, ::api::AssetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Assets_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::Assets(::grpc::ClientContext* context, const ::api::AssetsRequest* request, ::api::AssetsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Assets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::AssetsResponse>* trading_data::Stub::PrepareAsyncAssetsRaw(::grpc::ClientContext* context, const ::api::AssetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::AssetsResponse, ::api::AssetsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Assets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::AssetsResponse>* trading_data::Stub::AsyncAssetsRaw(::grpc::ClientContext* context, const ::api::AssetsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAssetsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::EstimateFee(::grpc::ClientContext* context, const ::api::EstimateFeeRequest& request, ::api::EstimateFeeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::EstimateFeeRequest, ::api::EstimateFeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EstimateFee_, context, request, response);
}

void trading_data::Stub::experimental_async::EstimateFee(::grpc::ClientContext* context, const ::api::EstimateFeeRequest* request, ::api::EstimateFeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::EstimateFeeRequest, ::api::EstimateFeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstimateFee_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::EstimateFee(::grpc::ClientContext* context, const ::api::EstimateFeeRequest* request, ::api::EstimateFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstimateFee_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::EstimateFeeResponse>* trading_data::Stub::PrepareAsyncEstimateFeeRaw(::grpc::ClientContext* context, const ::api::EstimateFeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::EstimateFeeResponse, ::api::EstimateFeeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EstimateFee_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::EstimateFeeResponse>* trading_data::Stub::AsyncEstimateFeeRaw(::grpc::ClientContext* context, const ::api::EstimateFeeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEstimateFeeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::EstimateMargin(::grpc::ClientContext* context, const ::api::EstimateMarginRequest& request, ::api::EstimateMarginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::EstimateMarginRequest, ::api::EstimateMarginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EstimateMargin_, context, request, response);
}

void trading_data::Stub::experimental_async::EstimateMargin(::grpc::ClientContext* context, const ::api::EstimateMarginRequest* request, ::api::EstimateMarginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::EstimateMarginRequest, ::api::EstimateMarginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstimateMargin_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::EstimateMargin(::grpc::ClientContext* context, const ::api::EstimateMarginRequest* request, ::api::EstimateMarginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstimateMargin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::EstimateMarginResponse>* trading_data::Stub::PrepareAsyncEstimateMarginRaw(::grpc::ClientContext* context, const ::api::EstimateMarginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::EstimateMarginResponse, ::api::EstimateMarginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EstimateMargin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::EstimateMarginResponse>* trading_data::Stub::AsyncEstimateMarginRaw(::grpc::ClientContext* context, const ::api::EstimateMarginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEstimateMarginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::ERC20WithdrawalApproval(::grpc::ClientContext* context, const ::api::ERC20WithdrawalApprovalRequest& request, ::api::ERC20WithdrawalApprovalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::ERC20WithdrawalApprovalRequest, ::api::ERC20WithdrawalApprovalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ERC20WithdrawalApproval_, context, request, response);
}

void trading_data::Stub::experimental_async::ERC20WithdrawalApproval(::grpc::ClientContext* context, const ::api::ERC20WithdrawalApprovalRequest* request, ::api::ERC20WithdrawalApprovalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::ERC20WithdrawalApprovalRequest, ::api::ERC20WithdrawalApprovalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ERC20WithdrawalApproval_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::ERC20WithdrawalApproval(::grpc::ClientContext* context, const ::api::ERC20WithdrawalApprovalRequest* request, ::api::ERC20WithdrawalApprovalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ERC20WithdrawalApproval_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::ERC20WithdrawalApprovalResponse>* trading_data::Stub::PrepareAsyncERC20WithdrawalApprovalRaw(::grpc::ClientContext* context, const ::api::ERC20WithdrawalApprovalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::ERC20WithdrawalApprovalResponse, ::api::ERC20WithdrawalApprovalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ERC20WithdrawalApproval_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::ERC20WithdrawalApprovalResponse>* trading_data::Stub::AsyncERC20WithdrawalApprovalRaw(::grpc::ClientContext* context, const ::api::ERC20WithdrawalApprovalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncERC20WithdrawalApprovalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::Withdrawal(::grpc::ClientContext* context, const ::api::WithdrawalRequest& request, ::api::WithdrawalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::WithdrawalRequest, ::api::WithdrawalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Withdrawal_, context, request, response);
}

void trading_data::Stub::experimental_async::Withdrawal(::grpc::ClientContext* context, const ::api::WithdrawalRequest* request, ::api::WithdrawalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::WithdrawalRequest, ::api::WithdrawalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Withdrawal_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::Withdrawal(::grpc::ClientContext* context, const ::api::WithdrawalRequest* request, ::api::WithdrawalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Withdrawal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::WithdrawalResponse>* trading_data::Stub::PrepareAsyncWithdrawalRaw(::grpc::ClientContext* context, const ::api::WithdrawalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::WithdrawalResponse, ::api::WithdrawalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Withdrawal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::WithdrawalResponse>* trading_data::Stub::AsyncWithdrawalRaw(::grpc::ClientContext* context, const ::api::WithdrawalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWithdrawalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::Withdrawals(::grpc::ClientContext* context, const ::api::WithdrawalsRequest& request, ::api::WithdrawalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::WithdrawalsRequest, ::api::WithdrawalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Withdrawals_, context, request, response);
}

void trading_data::Stub::experimental_async::Withdrawals(::grpc::ClientContext* context, const ::api::WithdrawalsRequest* request, ::api::WithdrawalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::WithdrawalsRequest, ::api::WithdrawalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Withdrawals_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::Withdrawals(::grpc::ClientContext* context, const ::api::WithdrawalsRequest* request, ::api::WithdrawalsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Withdrawals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::WithdrawalsResponse>* trading_data::Stub::PrepareAsyncWithdrawalsRaw(::grpc::ClientContext* context, const ::api::WithdrawalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::WithdrawalsResponse, ::api::WithdrawalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Withdrawals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::WithdrawalsResponse>* trading_data::Stub::AsyncWithdrawalsRaw(::grpc::ClientContext* context, const ::api::WithdrawalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWithdrawalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::Deposit(::grpc::ClientContext* context, const ::api::DepositRequest& request, ::api::DepositResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::DepositRequest, ::api::DepositResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Deposit_, context, request, response);
}

void trading_data::Stub::experimental_async::Deposit(::grpc::ClientContext* context, const ::api::DepositRequest* request, ::api::DepositResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::DepositRequest, ::api::DepositResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deposit_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::Deposit(::grpc::ClientContext* context, const ::api::DepositRequest* request, ::api::DepositResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deposit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::DepositResponse>* trading_data::Stub::PrepareAsyncDepositRaw(::grpc::ClientContext* context, const ::api::DepositRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::DepositResponse, ::api::DepositRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Deposit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::DepositResponse>* trading_data::Stub::AsyncDepositRaw(::grpc::ClientContext* context, const ::api::DepositRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDepositRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::Deposits(::grpc::ClientContext* context, const ::api::DepositsRequest& request, ::api::DepositsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::DepositsRequest, ::api::DepositsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Deposits_, context, request, response);
}

void trading_data::Stub::experimental_async::Deposits(::grpc::ClientContext* context, const ::api::DepositsRequest* request, ::api::DepositsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::DepositsRequest, ::api::DepositsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deposits_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::Deposits(::grpc::ClientContext* context, const ::api::DepositsRequest* request, ::api::DepositsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deposits_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::DepositsResponse>* trading_data::Stub::PrepareAsyncDepositsRaw(::grpc::ClientContext* context, const ::api::DepositsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::DepositsResponse, ::api::DepositsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Deposits_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::DepositsResponse>* trading_data::Stub::AsyncDepositsRaw(::grpc::ClientContext* context, const ::api::DepositsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDepositsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::NetworkParameters(::grpc::ClientContext* context, const ::api::NetworkParametersRequest& request, ::api::NetworkParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::NetworkParametersRequest, ::api::NetworkParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NetworkParameters_, context, request, response);
}

void trading_data::Stub::experimental_async::NetworkParameters(::grpc::ClientContext* context, const ::api::NetworkParametersRequest* request, ::api::NetworkParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::NetworkParametersRequest, ::api::NetworkParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NetworkParameters_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::NetworkParameters(::grpc::ClientContext* context, const ::api::NetworkParametersRequest* request, ::api::NetworkParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NetworkParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::NetworkParametersResponse>* trading_data::Stub::PrepareAsyncNetworkParametersRaw(::grpc::ClientContext* context, const ::api::NetworkParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::NetworkParametersResponse, ::api::NetworkParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NetworkParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::NetworkParametersResponse>* trading_data::Stub::AsyncNetworkParametersRaw(::grpc::ClientContext* context, const ::api::NetworkParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNetworkParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status trading_data::Stub::LiquidityProvisions(::grpc::ClientContext* context, const ::api::LiquidityProvisionsRequest& request, ::api::LiquidityProvisionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::api::LiquidityProvisionsRequest, ::api::LiquidityProvisionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LiquidityProvisions_, context, request, response);
}

void trading_data::Stub::experimental_async::LiquidityProvisions(::grpc::ClientContext* context, const ::api::LiquidityProvisionsRequest* request, ::api::LiquidityProvisionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::api::LiquidityProvisionsRequest, ::api::LiquidityProvisionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LiquidityProvisions_, context, request, response, std::move(f));
}

void trading_data::Stub::experimental_async::LiquidityProvisions(::grpc::ClientContext* context, const ::api::LiquidityProvisionsRequest* request, ::api::LiquidityProvisionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LiquidityProvisions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::api::LiquidityProvisionsResponse>* trading_data::Stub::PrepareAsyncLiquidityProvisionsRaw(::grpc::ClientContext* context, const ::api::LiquidityProvisionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::api::LiquidityProvisionsResponse, ::api::LiquidityProvisionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LiquidityProvisions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::api::LiquidityProvisionsResponse>* trading_data::Stub::AsyncLiquidityProvisionsRaw(::grpc::ClientContext* context, const ::api::LiquidityProvisionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLiquidityProvisionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

trading_data::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::MarketAccountsRequest, ::api::MarketAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::MarketAccountsRequest* req,
             ::api::MarketAccountsResponse* resp) {
               return service->MarketAccounts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::PartyAccountsRequest, ::api::PartyAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::PartyAccountsRequest* req,
             ::api::PartyAccountsResponse* resp) {
               return service->PartyAccounts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::FeeInfrastructureAccountsRequest, ::api::FeeInfrastructureAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::FeeInfrastructureAccountsRequest* req,
             ::api::FeeInfrastructureAccountsResponse* resp) {
               return service->FeeInfrastructureAccounts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::CandlesRequest, ::api::CandlesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::CandlesRequest* req,
             ::api::CandlesResponse* resp) {
               return service->Candles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::MarketDataByIDRequest, ::api::MarketDataByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::MarketDataByIDRequest* req,
             ::api::MarketDataByIDResponse* resp) {
               return service->MarketDataByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::google::protobuf::Empty, ::api::MarketsDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::api::MarketsDataResponse* resp) {
               return service->MarketsData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::MarketByIDRequest, ::api::MarketByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::MarketByIDRequest* req,
             ::api::MarketByIDResponse* resp) {
               return service->MarketByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::MarketDepthRequest, ::api::MarketDepthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::MarketDepthRequest* req,
             ::api::MarketDepthResponse* resp) {
               return service->MarketDepth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::google::protobuf::Empty, ::api::MarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::api::MarketsResponse* resp) {
               return service->Markets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::OrderByMarketAndIdRequest, ::api::OrderByMarketAndIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::OrderByMarketAndIdRequest* req,
             ::api::OrderByMarketAndIdResponse* resp) {
               return service->OrderByMarketAndID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::OrderByReferenceRequest, ::api::OrderByReferenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::OrderByReferenceRequest* req,
             ::api::OrderByReferenceResponse* resp) {
               return service->OrderByReference(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::OrdersByMarketRequest, ::api::OrdersByMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::OrdersByMarketRequest* req,
             ::api::OrdersByMarketResponse* resp) {
               return service->OrdersByMarket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::OrdersByPartyRequest, ::api::OrdersByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::OrdersByPartyRequest* req,
             ::api::OrdersByPartyResponse* resp) {
               return service->OrdersByParty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::OrderByIDRequest, ::vega::Order, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::OrderByIDRequest* req,
             ::vega::Order* resp) {
               return service->OrderByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::OrderVersionsByIDRequest, ::api::OrderVersionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::OrderVersionsByIDRequest* req,
             ::api::OrderVersionsResponse* resp) {
               return service->OrderVersionsByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::MarginLevelsRequest, ::api::MarginLevelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::MarginLevelsRequest* req,
             ::api::MarginLevelsResponse* resp) {
               return service->MarginLevels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::google::protobuf::Empty, ::api::PartiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::api::PartiesResponse* resp) {
               return service->Parties(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::PartyByIDRequest, ::api::PartyByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::PartyByIDRequest* req,
             ::api::PartyByIDResponse* resp) {
               return service->PartyByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::PositionsByPartyRequest, ::api::PositionsByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::PositionsByPartyRequest* req,
             ::api::PositionsByPartyResponse* resp) {
               return service->PositionsByParty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::LastTradeRequest, ::api::LastTradeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::LastTradeRequest* req,
             ::api::LastTradeResponse* resp) {
               return service->LastTrade(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::TradesByMarketRequest, ::api::TradesByMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::TradesByMarketRequest* req,
             ::api::TradesByMarketResponse* resp) {
               return service->TradesByMarket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::TradesByOrderRequest, ::api::TradesByOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::TradesByOrderRequest* req,
             ::api::TradesByOrderResponse* resp) {
               return service->TradesByOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::TradesByPartyRequest, ::api::TradesByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::TradesByPartyRequest* req,
             ::api::TradesByPartyResponse* resp) {
               return service->TradesByParty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::GetProposalsRequest, ::api::GetProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::GetProposalsRequest* req,
             ::api::GetProposalsResponse* resp) {
               return service->GetProposals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::GetProposalsByPartyRequest, ::api::GetProposalsByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::GetProposalsByPartyRequest* req,
             ::api::GetProposalsByPartyResponse* resp) {
               return service->GetProposalsByParty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::GetVotesByPartyRequest, ::api::GetVotesByPartyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::GetVotesByPartyRequest* req,
             ::api::GetVotesByPartyResponse* resp) {
               return service->GetVotesByParty(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::GetNewMarketProposalsRequest, ::api::GetNewMarketProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::GetNewMarketProposalsRequest* req,
             ::api::GetNewMarketProposalsResponse* resp) {
               return service->GetNewMarketProposals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::GetUpdateMarketProposalsRequest, ::api::GetUpdateMarketProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::GetUpdateMarketProposalsRequest* req,
             ::api::GetUpdateMarketProposalsResponse* resp) {
               return service->GetUpdateMarketProposals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::GetNetworkParametersProposalsRequest, ::api::GetNetworkParametersProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::GetNetworkParametersProposalsRequest* req,
             ::api::GetNetworkParametersProposalsResponse* resp) {
               return service->GetNetworkParametersProposals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::GetNewAssetProposalsRequest, ::api::GetNewAssetProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::GetNewAssetProposalsRequest* req,
             ::api::GetNewAssetProposalsResponse* resp) {
               return service->GetNewAssetProposals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::GetProposalByIDRequest, ::api::GetProposalByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::GetProposalByIDRequest* req,
             ::api::GetProposalByIDResponse* resp) {
               return service->GetProposalByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::GetProposalByReferenceRequest, ::api::GetProposalByReferenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::GetProposalByReferenceRequest* req,
             ::api::GetProposalByReferenceResponse* resp) {
               return service->GetProposalByReference(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[32],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< trading_data::Service, ::google::protobuf::Empty, ::vega::GovernanceData>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::vega::GovernanceData>* writer) {
               return service->ObserveGovernance(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[33],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< trading_data::Service, ::api::ObservePartyProposalsRequest, ::vega::GovernanceData>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::ObservePartyProposalsRequest* req,
             ::grpc::ServerWriter<::vega::GovernanceData>* writer) {
               return service->ObservePartyProposals(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[34],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< trading_data::Service, ::api::ObservePartyVotesRequest, ::vega::Vote>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::ObservePartyVotesRequest* req,
             ::grpc::ServerWriter<::vega::Vote>* writer) {
               return service->ObservePartyVotes(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[35],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< trading_data::Service, ::api::ObserveProposalVotesRequest, ::vega::Vote>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::ObserveProposalVotesRequest* req,
             ::grpc::ServerWriter<::vega::Vote>* writer) {
               return service->ObserveProposalVotes(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[36],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< trading_data::Service, ::api::ObserveEventsRequest, ::api::ObserveEventsResponse>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::api::ObserveEventsResponse,
             ::api::ObserveEventsRequest>* stream) {
               return service->ObserveEventBus(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::google::protobuf::Empty, ::vega::Statistics, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::vega::Statistics* resp) {
               return service->Statistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::google::protobuf::Empty, ::api::VegaTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::api::VegaTimeResponse* resp) {
               return service->GetVegaTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[39],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< trading_data::Service, ::api::AccountsSubscribeRequest, ::vega::Account>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::AccountsSubscribeRequest* req,
             ::grpc::ServerWriter<::vega::Account>* writer) {
               return service->AccountsSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[40],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< trading_data::Service, ::api::CandlesSubscribeRequest, ::vega::Candle>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::CandlesSubscribeRequest* req,
             ::grpc::ServerWriter<::vega::Candle>* writer) {
               return service->CandlesSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[41],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< trading_data::Service, ::api::MarginLevelsSubscribeRequest, ::vega::MarginLevels>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::MarginLevelsSubscribeRequest* req,
             ::grpc::ServerWriter<::vega::MarginLevels>* writer) {
               return service->MarginLevelsSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[42],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< trading_data::Service, ::api::MarketDepthSubscribeRequest, ::vega::MarketDepth>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::MarketDepthSubscribeRequest* req,
             ::grpc::ServerWriter<::vega::MarketDepth>* writer) {
               return service->MarketDepthSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[43],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< trading_data::Service, ::api::MarketDepthUpdatesSubscribeRequest, ::vega::MarketDepthUpdate>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::MarketDepthUpdatesSubscribeRequest* req,
             ::grpc::ServerWriter<::vega::MarketDepthUpdate>* writer) {
               return service->MarketDepthUpdatesSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[44],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< trading_data::Service, ::api::MarketsDataSubscribeRequest, ::vega::MarketData>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::MarketsDataSubscribeRequest* req,
             ::grpc::ServerWriter<::vega::MarketData>* writer) {
               return service->MarketsDataSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[45],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< trading_data::Service, ::api::OrdersSubscribeRequest, ::api::OrdersStream>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::OrdersSubscribeRequest* req,
             ::grpc::ServerWriter<::api::OrdersStream>* writer) {
               return service->OrdersSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[46],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< trading_data::Service, ::api::PositionsSubscribeRequest, ::vega::Position>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::PositionsSubscribeRequest* req,
             ::grpc::ServerWriter<::vega::Position>* writer) {
               return service->PositionsSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[47],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< trading_data::Service, ::api::TradesSubscribeRequest, ::api::TradesStream>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::TradesSubscribeRequest* req,
             ::grpc::ServerWriter<::api::TradesStream>* writer) {
               return service->TradesSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[48],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< trading_data::Service, ::google::protobuf::Empty, ::vega::TransferResponse>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::vega::TransferResponse>* writer) {
               return service->TransferResponsesSubscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::GetNodeSignaturesAggregateRequest, ::api::GetNodeSignaturesAggregateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::GetNodeSignaturesAggregateRequest* req,
             ::api::GetNodeSignaturesAggregateResponse* resp) {
               return service->GetNodeSignaturesAggregate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::AssetByIDRequest, ::api::AssetByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::AssetByIDRequest* req,
             ::api::AssetByIDResponse* resp) {
               return service->AssetByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::AssetsRequest, ::api::AssetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::AssetsRequest* req,
             ::api::AssetsResponse* resp) {
               return service->Assets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::EstimateFeeRequest, ::api::EstimateFeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::EstimateFeeRequest* req,
             ::api::EstimateFeeResponse* resp) {
               return service->EstimateFee(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::EstimateMarginRequest, ::api::EstimateMarginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::EstimateMarginRequest* req,
             ::api::EstimateMarginResponse* resp) {
               return service->EstimateMargin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::ERC20WithdrawalApprovalRequest, ::api::ERC20WithdrawalApprovalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::ERC20WithdrawalApprovalRequest* req,
             ::api::ERC20WithdrawalApprovalResponse* resp) {
               return service->ERC20WithdrawalApproval(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::WithdrawalRequest, ::api::WithdrawalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::WithdrawalRequest* req,
             ::api::WithdrawalResponse* resp) {
               return service->Withdrawal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::WithdrawalsRequest, ::api::WithdrawalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::WithdrawalsRequest* req,
             ::api::WithdrawalsResponse* resp) {
               return service->Withdrawals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::DepositRequest, ::api::DepositResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::DepositRequest* req,
             ::api::DepositResponse* resp) {
               return service->Deposit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::DepositsRequest, ::api::DepositsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::DepositsRequest* req,
             ::api::DepositsResponse* resp) {
               return service->Deposits(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[59],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::NetworkParametersRequest, ::api::NetworkParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::NetworkParametersRequest* req,
             ::api::NetworkParametersResponse* resp) {
               return service->NetworkParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      trading_data_method_names[60],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< trading_data::Service, ::api::LiquidityProvisionsRequest, ::api::LiquidityProvisionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](trading_data::Service* service,
             ::grpc::ServerContext* ctx,
             const ::api::LiquidityProvisionsRequest* req,
             ::api::LiquidityProvisionsResponse* resp) {
               return service->LiquidityProvisions(ctx, req, resp);
             }, this)));
}

trading_data::Service::~Service() {
}

::grpc::Status trading_data::Service::MarketAccounts(::grpc::ServerContext* context, const ::api::MarketAccountsRequest* request, ::api::MarketAccountsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::PartyAccounts(::grpc::ServerContext* context, const ::api::PartyAccountsRequest* request, ::api::PartyAccountsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::FeeInfrastructureAccounts(::grpc::ServerContext* context, const ::api::FeeInfrastructureAccountsRequest* request, ::api::FeeInfrastructureAccountsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::Candles(::grpc::ServerContext* context, const ::api::CandlesRequest* request, ::api::CandlesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::MarketDataByID(::grpc::ServerContext* context, const ::api::MarketDataByIDRequest* request, ::api::MarketDataByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::MarketsData(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::api::MarketsDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::MarketByID(::grpc::ServerContext* context, const ::api::MarketByIDRequest* request, ::api::MarketByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::MarketDepth(::grpc::ServerContext* context, const ::api::MarketDepthRequest* request, ::api::MarketDepthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::Markets(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::api::MarketsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::OrderByMarketAndID(::grpc::ServerContext* context, const ::api::OrderByMarketAndIdRequest* request, ::api::OrderByMarketAndIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::OrderByReference(::grpc::ServerContext* context, const ::api::OrderByReferenceRequest* request, ::api::OrderByReferenceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::OrdersByMarket(::grpc::ServerContext* context, const ::api::OrdersByMarketRequest* request, ::api::OrdersByMarketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::OrdersByParty(::grpc::ServerContext* context, const ::api::OrdersByPartyRequest* request, ::api::OrdersByPartyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::OrderByID(::grpc::ServerContext* context, const ::api::OrderByIDRequest* request, ::vega::Order* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::OrderVersionsByID(::grpc::ServerContext* context, const ::api::OrderVersionsByIDRequest* request, ::api::OrderVersionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::MarginLevels(::grpc::ServerContext* context, const ::api::MarginLevelsRequest* request, ::api::MarginLevelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::Parties(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::api::PartiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::PartyByID(::grpc::ServerContext* context, const ::api::PartyByIDRequest* request, ::api::PartyByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::PositionsByParty(::grpc::ServerContext* context, const ::api::PositionsByPartyRequest* request, ::api::PositionsByPartyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::LastTrade(::grpc::ServerContext* context, const ::api::LastTradeRequest* request, ::api::LastTradeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::TradesByMarket(::grpc::ServerContext* context, const ::api::TradesByMarketRequest* request, ::api::TradesByMarketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::TradesByOrder(::grpc::ServerContext* context, const ::api::TradesByOrderRequest* request, ::api::TradesByOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::TradesByParty(::grpc::ServerContext* context, const ::api::TradesByPartyRequest* request, ::api::TradesByPartyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::GetProposals(::grpc::ServerContext* context, const ::api::GetProposalsRequest* request, ::api::GetProposalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::GetProposalsByParty(::grpc::ServerContext* context, const ::api::GetProposalsByPartyRequest* request, ::api::GetProposalsByPartyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::GetVotesByParty(::grpc::ServerContext* context, const ::api::GetVotesByPartyRequest* request, ::api::GetVotesByPartyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::GetNewMarketProposals(::grpc::ServerContext* context, const ::api::GetNewMarketProposalsRequest* request, ::api::GetNewMarketProposalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::GetUpdateMarketProposals(::grpc::ServerContext* context, const ::api::GetUpdateMarketProposalsRequest* request, ::api::GetUpdateMarketProposalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::GetNetworkParametersProposals(::grpc::ServerContext* context, const ::api::GetNetworkParametersProposalsRequest* request, ::api::GetNetworkParametersProposalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::GetNewAssetProposals(::grpc::ServerContext* context, const ::api::GetNewAssetProposalsRequest* request, ::api::GetNewAssetProposalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::GetProposalByID(::grpc::ServerContext* context, const ::api::GetProposalByIDRequest* request, ::api::GetProposalByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::GetProposalByReference(::grpc::ServerContext* context, const ::api::GetProposalByReferenceRequest* request, ::api::GetProposalByReferenceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::ObserveGovernance(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::vega::GovernanceData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::ObservePartyProposals(::grpc::ServerContext* context, const ::api::ObservePartyProposalsRequest* request, ::grpc::ServerWriter< ::vega::GovernanceData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::ObservePartyVotes(::grpc::ServerContext* context, const ::api::ObservePartyVotesRequest* request, ::grpc::ServerWriter< ::vega::Vote>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::ObserveProposalVotes(::grpc::ServerContext* context, const ::api::ObserveProposalVotesRequest* request, ::grpc::ServerWriter< ::vega::Vote>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::ObserveEventBus(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::api::ObserveEventsResponse, ::api::ObserveEventsRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::Statistics(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::vega::Statistics* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::GetVegaTime(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::api::VegaTimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::AccountsSubscribe(::grpc::ServerContext* context, const ::api::AccountsSubscribeRequest* request, ::grpc::ServerWriter< ::vega::Account>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::CandlesSubscribe(::grpc::ServerContext* context, const ::api::CandlesSubscribeRequest* request, ::grpc::ServerWriter< ::vega::Candle>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::MarginLevelsSubscribe(::grpc::ServerContext* context, const ::api::MarginLevelsSubscribeRequest* request, ::grpc::ServerWriter< ::vega::MarginLevels>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::MarketDepthSubscribe(::grpc::ServerContext* context, const ::api::MarketDepthSubscribeRequest* request, ::grpc::ServerWriter< ::vega::MarketDepth>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::MarketDepthUpdatesSubscribe(::grpc::ServerContext* context, const ::api::MarketDepthUpdatesSubscribeRequest* request, ::grpc::ServerWriter< ::vega::MarketDepthUpdate>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::MarketsDataSubscribe(::grpc::ServerContext* context, const ::api::MarketsDataSubscribeRequest* request, ::grpc::ServerWriter< ::vega::MarketData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::OrdersSubscribe(::grpc::ServerContext* context, const ::api::OrdersSubscribeRequest* request, ::grpc::ServerWriter< ::api::OrdersStream>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::PositionsSubscribe(::grpc::ServerContext* context, const ::api::PositionsSubscribeRequest* request, ::grpc::ServerWriter< ::vega::Position>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::TradesSubscribe(::grpc::ServerContext* context, const ::api::TradesSubscribeRequest* request, ::grpc::ServerWriter< ::api::TradesStream>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::TransferResponsesSubscribe(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::vega::TransferResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::GetNodeSignaturesAggregate(::grpc::ServerContext* context, const ::api::GetNodeSignaturesAggregateRequest* request, ::api::GetNodeSignaturesAggregateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::AssetByID(::grpc::ServerContext* context, const ::api::AssetByIDRequest* request, ::api::AssetByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::Assets(::grpc::ServerContext* context, const ::api::AssetsRequest* request, ::api::AssetsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::EstimateFee(::grpc::ServerContext* context, const ::api::EstimateFeeRequest* request, ::api::EstimateFeeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::EstimateMargin(::grpc::ServerContext* context, const ::api::EstimateMarginRequest* request, ::api::EstimateMarginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::ERC20WithdrawalApproval(::grpc::ServerContext* context, const ::api::ERC20WithdrawalApprovalRequest* request, ::api::ERC20WithdrawalApprovalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::Withdrawal(::grpc::ServerContext* context, const ::api::WithdrawalRequest* request, ::api::WithdrawalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::Withdrawals(::grpc::ServerContext* context, const ::api::WithdrawalsRequest* request, ::api::WithdrawalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::Deposit(::grpc::ServerContext* context, const ::api::DepositRequest* request, ::api::DepositResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::Deposits(::grpc::ServerContext* context, const ::api::DepositsRequest* request, ::api::DepositsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::NetworkParameters(::grpc::ServerContext* context, const ::api::NetworkParametersRequest* request, ::api::NetworkParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status trading_data::Service::LiquidityProvisions(::grpc::ServerContext* context, const ::api::LiquidityProvisionsRequest* request, ::api::LiquidityProvisionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace api

