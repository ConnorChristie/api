// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/api/trading.proto

#include "proto/api/trading.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_proto_2fapi_2ftrading_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OptionalProposalState_proto_2fapi_2ftrading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fapi_2ftrading_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Pagination_proto_2fapi_2ftrading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fassets_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Asset_proto_2fassets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fchain_5fevents_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_ChainEvent_proto_2fchain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vote_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Proposal_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_GovernanceData_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_ProposalTerms_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fmarkets_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Market_proto_2fmarkets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Account_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Candle_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MarginLevels_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MarketData_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeSignature_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NotifyTraderAccount_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OrderCancellation_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OrderSubmission_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Order_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Party_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Position_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PriceLevel_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SignedBundle_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Trade_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Withdraw_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_OrderAmendment_proto_2fvega_2eproto;
namespace api {
class PropagateChainEventRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PropagateChainEventRequest> _instance;
} _PropagateChainEventRequest_default_instance_;
class PropagateChainEventResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PropagateChainEventResponse> _instance;
} _PropagateChainEventResponse_default_instance_;
class SubmitTransactionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmitTransactionRequest> _instance;
} _SubmitTransactionRequest_default_instance_;
class SubmitTransactionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmitTransactionResponse> _instance;
} _SubmitTransactionResponse_default_instance_;
class WithdrawRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WithdrawRequest> _instance;
} _WithdrawRequest_default_instance_;
class WithdrawResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WithdrawResponse> _instance;
} _WithdrawResponse_default_instance_;
class NotifyTraderAccountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyTraderAccountRequest> _instance;
} _NotifyTraderAccountRequest_default_instance_;
class NotifyTraderAccountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotifyTraderAccountResponse> _instance;
} _NotifyTraderAccountResponse_default_instance_;
class PrepareSubmitOrderResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrepareSubmitOrderResponse> _instance;
} _PrepareSubmitOrderResponse_default_instance_;
class PrepareCancelOrderResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrepareCancelOrderResponse> _instance;
} _PrepareCancelOrderResponse_default_instance_;
class PrepareAmendOrderResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrepareAmendOrderResponse> _instance;
} _PrepareAmendOrderResponse_default_instance_;
class SubmitOrderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmitOrderRequest> _instance;
} _SubmitOrderRequest_default_instance_;
class CancelOrderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CancelOrderRequest> _instance;
} _CancelOrderRequest_default_instance_;
class AmendOrderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AmendOrderRequest> _instance;
} _AmendOrderRequest_default_instance_;
class AssetsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AssetsRequest> _instance;
} _AssetsRequest_default_instance_;
class AssetsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AssetsResponse> _instance;
} _AssetsResponse_default_instance_;
class AssetByIDRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AssetByIDRequest> _instance;
} _AssetByIDRequest_default_instance_;
class AssetByIDResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AssetByIDResponse> _instance;
} _AssetByIDResponse_default_instance_;
class GetNodeSignaturesAggregateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNodeSignaturesAggregateRequest> _instance;
} _GetNodeSignaturesAggregateRequest_default_instance_;
class GetNodeSignaturesAggregateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNodeSignaturesAggregateResponse> _instance;
} _GetNodeSignaturesAggregateResponse_default_instance_;
class OptionalProposalStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionalProposalState> _instance;
} _OptionalProposalState_default_instance_;
class GetProposalsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetProposalsRequest> _instance;
} _GetProposalsRequest_default_instance_;
class GetProposalsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetProposalsResponse> _instance;
} _GetProposalsResponse_default_instance_;
class GetProposalsByPartyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetProposalsByPartyRequest> _instance;
} _GetProposalsByPartyRequest_default_instance_;
class GetProposalsByPartyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetProposalsByPartyResponse> _instance;
} _GetProposalsByPartyResponse_default_instance_;
class GetVotesByPartyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetVotesByPartyRequest> _instance;
} _GetVotesByPartyRequest_default_instance_;
class GetVotesByPartyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetVotesByPartyResponse> _instance;
} _GetVotesByPartyResponse_default_instance_;
class GetNewMarketProposalsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNewMarketProposalsRequest> _instance;
} _GetNewMarketProposalsRequest_default_instance_;
class GetNewMarketProposalsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNewMarketProposalsResponse> _instance;
} _GetNewMarketProposalsResponse_default_instance_;
class GetUpdateMarketProposalsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetUpdateMarketProposalsRequest> _instance;
} _GetUpdateMarketProposalsRequest_default_instance_;
class GetUpdateMarketProposalsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetUpdateMarketProposalsResponse> _instance;
} _GetUpdateMarketProposalsResponse_default_instance_;
class GetNetworkParametersProposalsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNetworkParametersProposalsRequest> _instance;
} _GetNetworkParametersProposalsRequest_default_instance_;
class GetNetworkParametersProposalsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNetworkParametersProposalsResponse> _instance;
} _GetNetworkParametersProposalsResponse_default_instance_;
class GetNewAssetProposalsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNewAssetProposalsRequest> _instance;
} _GetNewAssetProposalsRequest_default_instance_;
class GetNewAssetProposalsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNewAssetProposalsResponse> _instance;
} _GetNewAssetProposalsResponse_default_instance_;
class GetProposalByIDRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetProposalByIDRequest> _instance;
} _GetProposalByIDRequest_default_instance_;
class GetProposalByIDResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetProposalByIDResponse> _instance;
} _GetProposalByIDResponse_default_instance_;
class GetProposalByReferenceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetProposalByReferenceRequest> _instance;
} _GetProposalByReferenceRequest_default_instance_;
class GetProposalByReferenceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetProposalByReferenceResponse> _instance;
} _GetProposalByReferenceResponse_default_instance_;
class ObservePartyProposalsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObservePartyProposalsRequest> _instance;
} _ObservePartyProposalsRequest_default_instance_;
class ObserveProposalVotesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObserveProposalVotesRequest> _instance;
} _ObserveProposalVotesRequest_default_instance_;
class ObservePartyVotesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObservePartyVotesRequest> _instance;
} _ObservePartyVotesRequest_default_instance_;
class MarginLevelsSubscribeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarginLevelsSubscribeRequest> _instance;
} _MarginLevelsSubscribeRequest_default_instance_;
class MarginLevelsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarginLevelsRequest> _instance;
} _MarginLevelsRequest_default_instance_;
class MarginLevelsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarginLevelsResponse> _instance;
} _MarginLevelsResponse_default_instance_;
class MarketsDataSubscribeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketsDataSubscribeRequest> _instance;
} _MarketsDataSubscribeRequest_default_instance_;
class MarketDataByIDRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataByIDRequest> _instance;
} _MarketDataByIDRequest_default_instance_;
class MarketDataByIDResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataByIDResponse> _instance;
} _MarketDataByIDResponse_default_instance_;
class MarketsDataResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketsDataResponse> _instance;
} _MarketsDataResponse_default_instance_;
class LastTradeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LastTradeRequest> _instance;
} _LastTradeRequest_default_instance_;
class LastTradeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LastTradeResponse> _instance;
} _LastTradeResponse_default_instance_;
class MarketByIDRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketByIDRequest> _instance;
} _MarketByIDRequest_default_instance_;
class MarketByIDResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketByIDResponse> _instance;
} _MarketByIDResponse_default_instance_;
class PartyByIDRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartyByIDRequest> _instance;
} _PartyByIDRequest_default_instance_;
class PartyByIDResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartyByIDResponse> _instance;
} _PartyByIDResponse_default_instance_;
class PartiesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartiesResponse> _instance;
} _PartiesResponse_default_instance_;
class TradesByPartyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradesByPartyRequest> _instance;
} _TradesByPartyRequest_default_instance_;
class TradesByPartyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradesByPartyResponse> _instance;
} _TradesByPartyResponse_default_instance_;
class TradesByOrderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradesByOrderRequest> _instance;
} _TradesByOrderRequest_default_instance_;
class TradesByOrderResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradesByOrderResponse> _instance;
} _TradesByOrderResponse_default_instance_;
class AccountsSubscribeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountsSubscribeRequest> _instance;
} _AccountsSubscribeRequest_default_instance_;
class OrdersSubscribeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrdersSubscribeRequest> _instance;
} _OrdersSubscribeRequest_default_instance_;
class TradesSubscribeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradesSubscribeRequest> _instance;
} _TradesSubscribeRequest_default_instance_;
class CandlesSubscribeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CandlesSubscribeRequest> _instance;
} _CandlesSubscribeRequest_default_instance_;
class MarketDepthSubscribeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthSubscribeRequest> _instance;
} _MarketDepthSubscribeRequest_default_instance_;
class PositionsSubscribeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionsSubscribeRequest> _instance;
} _PositionsSubscribeRequest_default_instance_;
class OrdersByMarketRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrdersByMarketRequest> _instance;
} _OrdersByMarketRequest_default_instance_;
class OrdersByMarketResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrdersByMarketResponse> _instance;
} _OrdersByMarketResponse_default_instance_;
class OrdersByPartyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrdersByPartyRequest> _instance;
} _OrdersByPartyRequest_default_instance_;
class OrdersByPartyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrdersByPartyResponse> _instance;
} _OrdersByPartyResponse_default_instance_;
class OrderByMarketAndIdRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderByMarketAndIdRequest> _instance;
} _OrderByMarketAndIdRequest_default_instance_;
class OrderByMarketAndIdResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderByMarketAndIdResponse> _instance;
} _OrderByMarketAndIdResponse_default_instance_;
class OrderByReferenceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderByReferenceRequest> _instance;
} _OrderByReferenceRequest_default_instance_;
class OrderByReferenceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderByReferenceResponse> _instance;
} _OrderByReferenceResponse_default_instance_;
class MarketsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketsResponse> _instance;
} _MarketsResponse_default_instance_;
class CandlesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CandlesRequest> _instance;
} _CandlesRequest_default_instance_;
class CandlesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CandlesResponse> _instance;
} _CandlesResponse_default_instance_;
class MarketDepthRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthRequest> _instance;
} _MarketDepthRequest_default_instance_;
class MarketDepthResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthResponse> _instance;
} _MarketDepthResponse_default_instance_;
class TradesByMarketRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradesByMarketRequest> _instance;
} _TradesByMarketRequest_default_instance_;
class TradesByMarketResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradesByMarketResponse> _instance;
} _TradesByMarketResponse_default_instance_;
class PositionsByPartyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionsByPartyRequest> _instance;
} _PositionsByPartyRequest_default_instance_;
class PositionsByPartyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionsByPartyResponse> _instance;
} _PositionsByPartyResponse_default_instance_;
class VegaTimeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VegaTimeResponse> _instance;
} _VegaTimeResponse_default_instance_;
class PaginationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pagination> _instance;
} _Pagination_default_instance_;
class OrdersStreamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrdersStream> _instance;
} _OrdersStream_default_instance_;
class TradesStreamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradesStream> _instance;
} _TradesStream_default_instance_;
class PartyAccountsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartyAccountsRequest> _instance;
} _PartyAccountsRequest_default_instance_;
class PartyAccountsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartyAccountsResponse> _instance;
} _PartyAccountsResponse_default_instance_;
class MarketAccountsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketAccountsRequest> _instance;
} _MarketAccountsRequest_default_instance_;
class MarketAccountsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketAccountsResponse> _instance;
} _MarketAccountsResponse_default_instance_;
class PrepareProposalRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrepareProposalRequest> _instance;
} _PrepareProposalRequest_default_instance_;
class PrepareProposalResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrepareProposalResponse> _instance;
} _PrepareProposalResponse_default_instance_;
class PrepareVoteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrepareVoteRequest> _instance;
} _PrepareVoteRequest_default_instance_;
class PrepareVoteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrepareVoteResponse> _instance;
} _PrepareVoteResponse_default_instance_;
class OrderByIDRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderByIDRequest> _instance;
} _OrderByIDRequest_default_instance_;
class OrderByReferenceIDRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderByReferenceIDRequest> _instance;
} _OrderByReferenceIDRequest_default_instance_;
class OrderVersionsByIDRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderVersionsByIDRequest> _instance;
} _OrderVersionsByIDRequest_default_instance_;
class OrderVersionsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderVersionsResponse> _instance;
} _OrderVersionsResponse_default_instance_;
}  // namespace api
static void InitDefaultsPropagateChainEventRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PropagateChainEventRequest_default_instance_;
    new (ptr) ::api::PropagateChainEventRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PropagateChainEventRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PropagateChainEventRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPropagateChainEventRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_ChainEvent_proto_2fchain_5fevents_2eproto.base,}};

static void InitDefaultsPropagateChainEventResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PropagateChainEventResponse_default_instance_;
    new (ptr) ::api::PropagateChainEventResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PropagateChainEventResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PropagateChainEventResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPropagateChainEventResponse_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsSubmitTransactionRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_SubmitTransactionRequest_default_instance_;
    new (ptr) ::api::SubmitTransactionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::SubmitTransactionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SubmitTransactionRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSubmitTransactionRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_SignedBundle_proto_2fvega_2eproto.base,}};

static void InitDefaultsSubmitTransactionResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_SubmitTransactionResponse_default_instance_;
    new (ptr) ::api::SubmitTransactionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::SubmitTransactionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubmitTransactionResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubmitTransactionResponse_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsWithdrawRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_WithdrawRequest_default_instance_;
    new (ptr) ::api::WithdrawRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::WithdrawRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WithdrawRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWithdrawRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Withdraw_proto_2fvega_2eproto.base,}};

static void InitDefaultsWithdrawResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_WithdrawResponse_default_instance_;
    new (ptr) ::api::WithdrawResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::WithdrawResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WithdrawResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWithdrawResponse_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsNotifyTraderAccountRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_NotifyTraderAccountRequest_default_instance_;
    new (ptr) ::api::NotifyTraderAccountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::NotifyTraderAccountRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NotifyTraderAccountRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNotifyTraderAccountRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_NotifyTraderAccount_proto_2fvega_2eproto.base,}};

static void InitDefaultsNotifyTraderAccountResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_NotifyTraderAccountResponse_default_instance_;
    new (ptr) ::api::NotifyTraderAccountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::NotifyTraderAccountResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NotifyTraderAccountResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNotifyTraderAccountResponse_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsPrepareSubmitOrderResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareSubmitOrderResponse_default_instance_;
    new (ptr) ::api::PrepareSubmitOrderResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PrepareSubmitOrderResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PrepareSubmitOrderResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPrepareSubmitOrderResponse_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsPrepareCancelOrderResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareCancelOrderResponse_default_instance_;
    new (ptr) ::api::PrepareCancelOrderResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PrepareCancelOrderResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PrepareCancelOrderResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPrepareCancelOrderResponse_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsPrepareAmendOrderResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareAmendOrderResponse_default_instance_;
    new (ptr) ::api::PrepareAmendOrderResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PrepareAmendOrderResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PrepareAmendOrderResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPrepareAmendOrderResponse_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsSubmitOrderRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_SubmitOrderRequest_default_instance_;
    new (ptr) ::api::SubmitOrderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::SubmitOrderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SubmitOrderRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSubmitOrderRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_OrderSubmission_proto_2fvega_2eproto.base,}};

static void InitDefaultsCancelOrderRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CancelOrderRequest_default_instance_;
    new (ptr) ::api::CancelOrderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::CancelOrderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CancelOrderRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCancelOrderRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_OrderCancellation_proto_2fvega_2eproto.base,}};

static void InitDefaultsAmendOrderRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_AmendOrderRequest_default_instance_;
    new (ptr) ::api::AmendOrderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::AmendOrderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AmendOrderRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAmendOrderRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_OrderAmendment_proto_2fvega_2eproto.base,}};

static void InitDefaultsAssetsRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_AssetsRequest_default_instance_;
    new (ptr) ::api::AssetsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::AssetsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AssetsRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAssetsRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsAssetsResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_AssetsResponse_default_instance_;
    new (ptr) ::api::AssetsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::AssetsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AssetsResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAssetsResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Asset_proto_2fassets_2eproto.base,}};

static void InitDefaultsAssetByIDRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_AssetByIDRequest_default_instance_;
    new (ptr) ::api::AssetByIDRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::AssetByIDRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AssetByIDRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAssetByIDRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsAssetByIDResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_AssetByIDResponse_default_instance_;
    new (ptr) ::api::AssetByIDResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::AssetByIDResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AssetByIDResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAssetByIDResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Asset_proto_2fassets_2eproto.base,}};

static void InitDefaultsGetNodeSignaturesAggregateRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNodeSignaturesAggregateRequest_default_instance_;
    new (ptr) ::api::GetNodeSignaturesAggregateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetNodeSignaturesAggregateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetNodeSignaturesAggregateRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetNodeSignaturesAggregateRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsGetNodeSignaturesAggregateResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNodeSignaturesAggregateResponse_default_instance_;
    new (ptr) ::api::GetNodeSignaturesAggregateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetNodeSignaturesAggregateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetNodeSignaturesAggregateResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetNodeSignaturesAggregateResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_NodeSignature_proto_2fvega_2eproto.base,}};

static void InitDefaultsOptionalProposalState_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OptionalProposalState_default_instance_;
    new (ptr) ::api::OptionalProposalState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::OptionalProposalState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OptionalProposalState_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptionalProposalState_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsGetProposalsRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalsRequest_default_instance_;
    new (ptr) ::api::GetProposalsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetProposalsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetProposalsRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetProposalsRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_proto_2fapi_2ftrading_2eproto.base,}};

static void InitDefaultsGetProposalsResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalsResponse_default_instance_;
    new (ptr) ::api::GetProposalsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetProposalsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetProposalsResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetProposalsResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_GovernanceData_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsGetProposalsByPartyRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalsByPartyRequest_default_instance_;
    new (ptr) ::api::GetProposalsByPartyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetProposalsByPartyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetProposalsByPartyRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetProposalsByPartyRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_proto_2fapi_2ftrading_2eproto.base,}};

static void InitDefaultsGetProposalsByPartyResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalsByPartyResponse_default_instance_;
    new (ptr) ::api::GetProposalsByPartyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetProposalsByPartyResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetProposalsByPartyResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetProposalsByPartyResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_GovernanceData_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsGetVotesByPartyRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetVotesByPartyRequest_default_instance_;
    new (ptr) ::api::GetVotesByPartyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetVotesByPartyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetVotesByPartyRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetVotesByPartyRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsGetVotesByPartyResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetVotesByPartyResponse_default_instance_;
    new (ptr) ::api::GetVotesByPartyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetVotesByPartyResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetVotesByPartyResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetVotesByPartyResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Vote_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsGetNewMarketProposalsRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNewMarketProposalsRequest_default_instance_;
    new (ptr) ::api::GetNewMarketProposalsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetNewMarketProposalsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetNewMarketProposalsRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetNewMarketProposalsRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_proto_2fapi_2ftrading_2eproto.base,}};

static void InitDefaultsGetNewMarketProposalsResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNewMarketProposalsResponse_default_instance_;
    new (ptr) ::api::GetNewMarketProposalsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetNewMarketProposalsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetNewMarketProposalsResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetNewMarketProposalsResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_GovernanceData_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsGetUpdateMarketProposalsRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetUpdateMarketProposalsRequest_default_instance_;
    new (ptr) ::api::GetUpdateMarketProposalsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetUpdateMarketProposalsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetUpdateMarketProposalsRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetUpdateMarketProposalsRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_proto_2fapi_2ftrading_2eproto.base,}};

static void InitDefaultsGetUpdateMarketProposalsResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetUpdateMarketProposalsResponse_default_instance_;
    new (ptr) ::api::GetUpdateMarketProposalsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetUpdateMarketProposalsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetUpdateMarketProposalsResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetUpdateMarketProposalsResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_GovernanceData_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsGetNetworkParametersProposalsRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNetworkParametersProposalsRequest_default_instance_;
    new (ptr) ::api::GetNetworkParametersProposalsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetNetworkParametersProposalsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetNetworkParametersProposalsRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetNetworkParametersProposalsRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_proto_2fapi_2ftrading_2eproto.base,}};

static void InitDefaultsGetNetworkParametersProposalsResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNetworkParametersProposalsResponse_default_instance_;
    new (ptr) ::api::GetNetworkParametersProposalsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetNetworkParametersProposalsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetNetworkParametersProposalsResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetNetworkParametersProposalsResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_GovernanceData_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsGetNewAssetProposalsRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNewAssetProposalsRequest_default_instance_;
    new (ptr) ::api::GetNewAssetProposalsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetNewAssetProposalsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetNewAssetProposalsRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetNewAssetProposalsRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_proto_2fapi_2ftrading_2eproto.base,}};

static void InitDefaultsGetNewAssetProposalsResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNewAssetProposalsResponse_default_instance_;
    new (ptr) ::api::GetNewAssetProposalsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetNewAssetProposalsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetNewAssetProposalsResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetNewAssetProposalsResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_GovernanceData_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsGetProposalByIDRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalByIDRequest_default_instance_;
    new (ptr) ::api::GetProposalByIDRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetProposalByIDRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetProposalByIDRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetProposalByIDRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsGetProposalByIDResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalByIDResponse_default_instance_;
    new (ptr) ::api::GetProposalByIDResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetProposalByIDResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetProposalByIDResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetProposalByIDResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_GovernanceData_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsGetProposalByReferenceRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalByReferenceRequest_default_instance_;
    new (ptr) ::api::GetProposalByReferenceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetProposalByReferenceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetProposalByReferenceRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetProposalByReferenceRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsGetProposalByReferenceResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalByReferenceResponse_default_instance_;
    new (ptr) ::api::GetProposalByReferenceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::GetProposalByReferenceResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetProposalByReferenceResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetProposalByReferenceResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_GovernanceData_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsObservePartyProposalsRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ObservePartyProposalsRequest_default_instance_;
    new (ptr) ::api::ObservePartyProposalsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::ObservePartyProposalsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ObservePartyProposalsRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObservePartyProposalsRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsObserveProposalVotesRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ObserveProposalVotesRequest_default_instance_;
    new (ptr) ::api::ObserveProposalVotesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::ObserveProposalVotesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ObserveProposalVotesRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObserveProposalVotesRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsObservePartyVotesRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ObservePartyVotesRequest_default_instance_;
    new (ptr) ::api::ObservePartyVotesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::ObservePartyVotesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ObservePartyVotesRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObservePartyVotesRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsMarginLevelsSubscribeRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarginLevelsSubscribeRequest_default_instance_;
    new (ptr) ::api::MarginLevelsSubscribeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::MarginLevelsSubscribeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarginLevelsSubscribeRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarginLevelsSubscribeRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsMarginLevelsRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarginLevelsRequest_default_instance_;
    new (ptr) ::api::MarginLevelsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::MarginLevelsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarginLevelsRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarginLevelsRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsMarginLevelsResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarginLevelsResponse_default_instance_;
    new (ptr) ::api::MarginLevelsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::MarginLevelsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarginLevelsResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarginLevelsResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_MarginLevels_proto_2fvega_2eproto.base,}};

static void InitDefaultsMarketsDataSubscribeRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketsDataSubscribeRequest_default_instance_;
    new (ptr) ::api::MarketsDataSubscribeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::MarketsDataSubscribeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketsDataSubscribeRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketsDataSubscribeRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsMarketDataByIDRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketDataByIDRequest_default_instance_;
    new (ptr) ::api::MarketDataByIDRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::MarketDataByIDRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataByIDRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataByIDRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsMarketDataByIDResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketDataByIDResponse_default_instance_;
    new (ptr) ::api::MarketDataByIDResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::MarketDataByIDResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarketDataByIDResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarketDataByIDResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_MarketData_proto_2fvega_2eproto.base,}};

static void InitDefaultsMarketsDataResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketsDataResponse_default_instance_;
    new (ptr) ::api::MarketsDataResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::MarketsDataResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarketsDataResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarketsDataResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_MarketData_proto_2fvega_2eproto.base,}};

static void InitDefaultsLastTradeRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_LastTradeRequest_default_instance_;
    new (ptr) ::api::LastTradeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::LastTradeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LastTradeRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLastTradeRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsLastTradeResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_LastTradeResponse_default_instance_;
    new (ptr) ::api::LastTradeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::LastTradeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LastTradeResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLastTradeResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Trade_proto_2fvega_2eproto.base,}};

static void InitDefaultsMarketByIDRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketByIDRequest_default_instance_;
    new (ptr) ::api::MarketByIDRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::MarketByIDRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketByIDRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketByIDRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsMarketByIDResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketByIDResponse_default_instance_;
    new (ptr) ::api::MarketByIDResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::MarketByIDResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarketByIDResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarketByIDResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Market_proto_2fmarkets_2eproto.base,}};

static void InitDefaultsPartyByIDRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PartyByIDRequest_default_instance_;
    new (ptr) ::api::PartyByIDRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PartyByIDRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PartyByIDRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPartyByIDRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsPartyByIDResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PartyByIDResponse_default_instance_;
    new (ptr) ::api::PartyByIDResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PartyByIDResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PartyByIDResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPartyByIDResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Party_proto_2fvega_2eproto.base,}};

static void InitDefaultsPartiesResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PartiesResponse_default_instance_;
    new (ptr) ::api::PartiesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PartiesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PartiesResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPartiesResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Party_proto_2fvega_2eproto.base,}};

static void InitDefaultsTradesByPartyRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesByPartyRequest_default_instance_;
    new (ptr) ::api::TradesByPartyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::TradesByPartyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TradesByPartyRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTradesByPartyRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Pagination_proto_2fapi_2ftrading_2eproto.base,}};

static void InitDefaultsTradesByPartyResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesByPartyResponse_default_instance_;
    new (ptr) ::api::TradesByPartyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::TradesByPartyResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TradesByPartyResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTradesByPartyResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Trade_proto_2fvega_2eproto.base,}};

static void InitDefaultsTradesByOrderRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesByOrderRequest_default_instance_;
    new (ptr) ::api::TradesByOrderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::TradesByOrderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TradesByOrderRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTradesByOrderRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsTradesByOrderResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesByOrderResponse_default_instance_;
    new (ptr) ::api::TradesByOrderResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::TradesByOrderResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TradesByOrderResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTradesByOrderResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Trade_proto_2fvega_2eproto.base,}};

static void InitDefaultsAccountsSubscribeRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_AccountsSubscribeRequest_default_instance_;
    new (ptr) ::api::AccountsSubscribeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::AccountsSubscribeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountsSubscribeRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountsSubscribeRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsOrdersSubscribeRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrdersSubscribeRequest_default_instance_;
    new (ptr) ::api::OrdersSubscribeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::OrdersSubscribeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OrdersSubscribeRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrdersSubscribeRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsTradesSubscribeRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesSubscribeRequest_default_instance_;
    new (ptr) ::api::TradesSubscribeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::TradesSubscribeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TradesSubscribeRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTradesSubscribeRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsCandlesSubscribeRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CandlesSubscribeRequest_default_instance_;
    new (ptr) ::api::CandlesSubscribeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::CandlesSubscribeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CandlesSubscribeRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCandlesSubscribeRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsMarketDepthSubscribeRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketDepthSubscribeRequest_default_instance_;
    new (ptr) ::api::MarketDepthSubscribeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::MarketDepthSubscribeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthSubscribeRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthSubscribeRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsPositionsSubscribeRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PositionsSubscribeRequest_default_instance_;
    new (ptr) ::api::PositionsSubscribeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PositionsSubscribeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PositionsSubscribeRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPositionsSubscribeRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsOrdersByMarketRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrdersByMarketRequest_default_instance_;
    new (ptr) ::api::OrdersByMarketRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::OrdersByMarketRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrdersByMarketRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrdersByMarketRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Pagination_proto_2fapi_2ftrading_2eproto.base,}};

static void InitDefaultsOrdersByMarketResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrdersByMarketResponse_default_instance_;
    new (ptr) ::api::OrdersByMarketResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::OrdersByMarketResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrdersByMarketResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrdersByMarketResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Order_proto_2fvega_2eproto.base,}};

static void InitDefaultsOrdersByPartyRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrdersByPartyRequest_default_instance_;
    new (ptr) ::api::OrdersByPartyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::OrdersByPartyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrdersByPartyRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrdersByPartyRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Pagination_proto_2fapi_2ftrading_2eproto.base,}};

static void InitDefaultsOrdersByPartyResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrdersByPartyResponse_default_instance_;
    new (ptr) ::api::OrdersByPartyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::OrdersByPartyResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrdersByPartyResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrdersByPartyResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Order_proto_2fvega_2eproto.base,}};

static void InitDefaultsOrderByMarketAndIdRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrderByMarketAndIdRequest_default_instance_;
    new (ptr) ::api::OrderByMarketAndIdRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::OrderByMarketAndIdRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OrderByMarketAndIdRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrderByMarketAndIdRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsOrderByMarketAndIdResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrderByMarketAndIdResponse_default_instance_;
    new (ptr) ::api::OrderByMarketAndIdResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::OrderByMarketAndIdResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrderByMarketAndIdResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrderByMarketAndIdResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Order_proto_2fvega_2eproto.base,}};

static void InitDefaultsOrderByReferenceRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrderByReferenceRequest_default_instance_;
    new (ptr) ::api::OrderByReferenceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::OrderByReferenceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OrderByReferenceRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrderByReferenceRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsOrderByReferenceResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrderByReferenceResponse_default_instance_;
    new (ptr) ::api::OrderByReferenceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::OrderByReferenceResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrderByReferenceResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrderByReferenceResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Order_proto_2fvega_2eproto.base,}};

static void InitDefaultsMarketsResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketsResponse_default_instance_;
    new (ptr) ::api::MarketsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::MarketsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarketsResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarketsResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Market_proto_2fmarkets_2eproto.base,}};

static void InitDefaultsCandlesRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CandlesRequest_default_instance_;
    new (ptr) ::api::CandlesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::CandlesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CandlesRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCandlesRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsCandlesResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CandlesResponse_default_instance_;
    new (ptr) ::api::CandlesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::CandlesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CandlesResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCandlesResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Candle_proto_2fvega_2eproto.base,}};

static void InitDefaultsMarketDepthRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketDepthRequest_default_instance_;
    new (ptr) ::api::MarketDepthRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::MarketDepthRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsMarketDepthResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketDepthResponse_default_instance_;
    new (ptr) ::api::MarketDepthResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::MarketDepthResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MarketDepthResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMarketDepthResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_PriceLevel_proto_2fvega_2eproto.base,
      &scc_info_Trade_proto_2fvega_2eproto.base,}};

static void InitDefaultsTradesByMarketRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesByMarketRequest_default_instance_;
    new (ptr) ::api::TradesByMarketRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::TradesByMarketRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TradesByMarketRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTradesByMarketRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Pagination_proto_2fapi_2ftrading_2eproto.base,}};

static void InitDefaultsTradesByMarketResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesByMarketResponse_default_instance_;
    new (ptr) ::api::TradesByMarketResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::TradesByMarketResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TradesByMarketResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTradesByMarketResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Trade_proto_2fvega_2eproto.base,}};

static void InitDefaultsPositionsByPartyRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PositionsByPartyRequest_default_instance_;
    new (ptr) ::api::PositionsByPartyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PositionsByPartyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PositionsByPartyRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPositionsByPartyRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsPositionsByPartyResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PositionsByPartyResponse_default_instance_;
    new (ptr) ::api::PositionsByPartyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PositionsByPartyResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PositionsByPartyResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPositionsByPartyResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Position_proto_2fvega_2eproto.base,}};

static void InitDefaultsVegaTimeResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_VegaTimeResponse_default_instance_;
    new (ptr) ::api::VegaTimeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::VegaTimeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VegaTimeResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVegaTimeResponse_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsPagination_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_Pagination_default_instance_;
    new (ptr) ::api::Pagination();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::Pagination::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Pagination_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPagination_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsOrdersStream_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrdersStream_default_instance_;
    new (ptr) ::api::OrdersStream();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::OrdersStream::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrdersStream_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrdersStream_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Order_proto_2fvega_2eproto.base,}};

static void InitDefaultsTradesStream_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesStream_default_instance_;
    new (ptr) ::api::TradesStream();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::TradesStream::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TradesStream_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTradesStream_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Trade_proto_2fvega_2eproto.base,}};

static void InitDefaultsPartyAccountsRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PartyAccountsRequest_default_instance_;
    new (ptr) ::api::PartyAccountsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PartyAccountsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PartyAccountsRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPartyAccountsRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsPartyAccountsResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PartyAccountsResponse_default_instance_;
    new (ptr) ::api::PartyAccountsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PartyAccountsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PartyAccountsResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPartyAccountsResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Account_proto_2fvega_2eproto.base,}};

static void InitDefaultsMarketAccountsRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketAccountsRequest_default_instance_;
    new (ptr) ::api::MarketAccountsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::MarketAccountsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketAccountsRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketAccountsRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsMarketAccountsResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketAccountsResponse_default_instance_;
    new (ptr) ::api::MarketAccountsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::MarketAccountsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarketAccountsResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarketAccountsResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Account_proto_2fvega_2eproto.base,}};

static void InitDefaultsPrepareProposalRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareProposalRequest_default_instance_;
    new (ptr) ::api::PrepareProposalRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PrepareProposalRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PrepareProposalRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPrepareProposalRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_ProposalTerms_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsPrepareProposalResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareProposalResponse_default_instance_;
    new (ptr) ::api::PrepareProposalResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PrepareProposalResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PrepareProposalResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPrepareProposalResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Proposal_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsPrepareVoteRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareVoteRequest_default_instance_;
    new (ptr) ::api::PrepareVoteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PrepareVoteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PrepareVoteRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPrepareVoteRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Vote_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsPrepareVoteResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareVoteResponse_default_instance_;
    new (ptr) ::api::PrepareVoteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::PrepareVoteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PrepareVoteResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPrepareVoteResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Vote_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsOrderByIDRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrderByIDRequest_default_instance_;
    new (ptr) ::api::OrderByIDRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::OrderByIDRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OrderByIDRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrderByIDRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsOrderByReferenceIDRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrderByReferenceIDRequest_default_instance_;
    new (ptr) ::api::OrderByReferenceIDRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::OrderByReferenceIDRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OrderByReferenceIDRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrderByReferenceIDRequest_proto_2fapi_2ftrading_2eproto}, {}};

static void InitDefaultsOrderVersionsByIDRequest_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrderVersionsByIDRequest_default_instance_;
    new (ptr) ::api::OrderVersionsByIDRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::OrderVersionsByIDRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrderVersionsByIDRequest_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrderVersionsByIDRequest_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Pagination_proto_2fapi_2ftrading_2eproto.base,}};

static void InitDefaultsOrderVersionsResponse_proto_2fapi_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrderVersionsResponse_default_instance_;
    new (ptr) ::api::OrderVersionsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::OrderVersionsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrderVersionsResponse_proto_2fapi_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrderVersionsResponse_proto_2fapi_2ftrading_2eproto}, {
      &scc_info_Order_proto_2fvega_2eproto.base,}};

void InitDefaults_proto_2fapi_2ftrading_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_PropagateChainEventRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PropagateChainEventResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubmitTransactionRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubmitTransactionResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WithdrawRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WithdrawResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyTraderAccountRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotifyTraderAccountResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrepareSubmitOrderResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrepareCancelOrderResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrepareAmendOrderResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubmitOrderRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CancelOrderRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AmendOrderRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AssetsRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AssetsResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AssetByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AssetByIDResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetNodeSignaturesAggregateRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetNodeSignaturesAggregateResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionalProposalState_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetProposalsResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetProposalsByPartyRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetProposalsByPartyResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetVotesByPartyRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetVotesByPartyResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetNewMarketProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetNewMarketProposalsResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetUpdateMarketProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetUpdateMarketProposalsResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetNetworkParametersProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetNetworkParametersProposalsResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetNewAssetProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetNewAssetProposalsResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetProposalByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetProposalByIDResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetProposalByReferenceRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetProposalByReferenceResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObservePartyProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObserveProposalVotesRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObservePartyVotesRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarginLevelsSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarginLevelsRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarginLevelsResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketsDataSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataByIDResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketsDataResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LastTradeRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LastTradeResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketByIDResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PartyByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PartyByIDResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PartiesResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradesByPartyRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradesByPartyResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradesByOrderRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradesByOrderResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountsSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrdersSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradesSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CandlesSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PositionsSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrdersByMarketRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrdersByMarketResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrdersByPartyRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrdersByPartyResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderByMarketAndIdRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderByMarketAndIdResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderByReferenceRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderByReferenceResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketsResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CandlesRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CandlesResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradesByMarketRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradesByMarketResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PositionsByPartyRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PositionsByPartyResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VegaTimeResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Pagination_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrdersStream_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradesStream_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PartyAccountsRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PartyAccountsResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketAccountsRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketAccountsResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrepareProposalRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrepareProposalResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrepareVoteRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrepareVoteResponse_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderByReferenceIDRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderVersionsByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderVersionsResponse_proto_2fapi_2ftrading_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_proto_2fapi_2ftrading_2eproto[99];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_proto_2fapi_2ftrading_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_proto_2fapi_2ftrading_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_proto_2fapi_2ftrading_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PropagateChainEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PropagateChainEventRequest, evt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PropagateChainEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PropagateChainEventResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::SubmitTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::SubmitTransactionRequest, tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::SubmitTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::SubmitTransactionResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::WithdrawRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::WithdrawRequest, withdraw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::WithdrawResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::WithdrawResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::NotifyTraderAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::NotifyTraderAccountRequest, notif_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::NotifyTraderAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::NotifyTraderAccountResponse, submitted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareSubmitOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareSubmitOrderResponse, blob_),
  PROTOBUF_FIELD_OFFSET(::api::PrepareSubmitOrderResponse, submitid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareCancelOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareCancelOrderResponse, blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareAmendOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareAmendOrderResponse, blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::SubmitOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::SubmitOrderRequest, submission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::CancelOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CancelOrderRequest, cancellation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::AmendOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::AmendOrderRequest, amendment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::AssetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::AssetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::AssetsResponse, assets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::AssetByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::AssetByIDRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::AssetByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::AssetByIDResponse, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNodeSignaturesAggregateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNodeSignaturesAggregateRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNodeSignaturesAggregateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNodeSignaturesAggregateResponse, signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OptionalProposalState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OptionalProposalState, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsRequest, selectinstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsByPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsByPartyRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsByPartyRequest, selectinstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsByPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsByPartyResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetVotesByPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetVotesByPartyRequest, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetVotesByPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetVotesByPartyResponse, votes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNewMarketProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNewMarketProposalsRequest, selectinstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNewMarketProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNewMarketProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetUpdateMarketProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetUpdateMarketProposalsRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::GetUpdateMarketProposalsRequest, selectinstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetUpdateMarketProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetUpdateMarketProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNetworkParametersProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNetworkParametersProposalsRequest, selectinstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNetworkParametersProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNetworkParametersProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNewAssetProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNewAssetProposalsRequest, selectinstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNewAssetProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNewAssetProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByIDRequest, proposalid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByIDResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByReferenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByReferenceRequest, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByReferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByReferenceResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ObservePartyProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ObservePartyProposalsRequest, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ObserveProposalVotesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ObserveProposalVotesRequest, proposalid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ObservePartyVotesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ObservePartyVotesRequest, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsSubscribeRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsSubscribeRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsResponse, marginlevels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketsDataSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketsDataSubscribeRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketDataByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketDataByIDRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketDataByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketDataByIDResponse, marketdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketsDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketsDataResponse, marketsdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::LastTradeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::LastTradeRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::LastTradeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::LastTradeResponse, trade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketByIDRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketByIDResponse, market_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PartyByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PartyByIDRequest, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PartyByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PartyByIDResponse, party_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PartiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PartiesResponse, parties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesByPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesByPartyRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::TradesByPartyRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::TradesByPartyRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesByPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesByPartyResponse, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesByOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesByOrderRequest, orderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesByOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesByOrderResponse, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::AccountsSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::AccountsSubscribeRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::AccountsSubscribeRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::AccountsSubscribeRequest, asset_),
  PROTOBUF_FIELD_OFFSET(::api::AccountsSubscribeRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrdersSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrdersSubscribeRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::OrdersSubscribeRequest, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesSubscribeRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::TradesSubscribeRequest, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::CandlesSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CandlesSubscribeRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::CandlesSubscribeRequest, interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthSubscribeRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PositionsSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PositionsSubscribeRequest, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByMarketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByMarketRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::OrdersByMarketRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByMarketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByMarketResponse, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByPartyRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::OrdersByPartyRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByPartyResponse, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrderByMarketAndIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrderByMarketAndIdRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::OrderByMarketAndIdRequest, orderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrderByMarketAndIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrderByMarketAndIdResponse, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrderByReferenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrderByReferenceRequest, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrderByReferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrderByReferenceResponse, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketsResponse, markets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::CandlesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CandlesRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::CandlesRequest, sincetimestamp_),
  PROTOBUF_FIELD_OFFSET(::api::CandlesRequest, interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::CandlesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CandlesResponse, candles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthRequest, maxdepth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthResponse, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthResponse, buy_),
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthResponse, sell_),
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthResponse, lasttrade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesByMarketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesByMarketRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::TradesByMarketRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesByMarketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesByMarketResponse, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PositionsByPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PositionsByPartyRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::PositionsByPartyRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PositionsByPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PositionsByPartyResponse, positions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::VegaTimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::VegaTimeResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::Pagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::Pagination, skip_),
  PROTOBUF_FIELD_OFFSET(::api::Pagination, limit_),
  PROTOBUF_FIELD_OFFSET(::api::Pagination, descending_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrdersStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrdersStream, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesStream, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PartyAccountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PartyAccountsRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::PartyAccountsRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::PartyAccountsRequest, type_),
  PROTOBUF_FIELD_OFFSET(::api::PartyAccountsRequest, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PartyAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PartyAccountsResponse, accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketAccountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketAccountsRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::MarketAccountsRequest, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketAccountsResponse, accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareProposalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareProposalRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::PrepareProposalRequest, reference_),
  PROTOBUF_FIELD_OFFSET(::api::PrepareProposalRequest, proposal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareProposalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareProposalResponse, blob_),
  PROTOBUF_FIELD_OFFSET(::api::PrepareProposalResponse, pendingproposal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareVoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareVoteRequest, vote_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareVoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareVoteResponse, blob_),
  PROTOBUF_FIELD_OFFSET(::api::PrepareVoteResponse, vote_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrderByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrderByIDRequest, orderid_),
  PROTOBUF_FIELD_OFFSET(::api::OrderByIDRequest, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrderByReferenceIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrderByReferenceIDRequest, referenceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrderVersionsByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrderVersionsByIDRequest, orderid_),
  PROTOBUF_FIELD_OFFSET(::api::OrderVersionsByIDRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrderVersionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrderVersionsResponse, orders_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::api::PropagateChainEventRequest)},
  { 6, -1, sizeof(::api::PropagateChainEventResponse)},
  { 12, -1, sizeof(::api::SubmitTransactionRequest)},
  { 18, -1, sizeof(::api::SubmitTransactionResponse)},
  { 24, -1, sizeof(::api::WithdrawRequest)},
  { 30, -1, sizeof(::api::WithdrawResponse)},
  { 36, -1, sizeof(::api::NotifyTraderAccountRequest)},
  { 42, -1, sizeof(::api::NotifyTraderAccountResponse)},
  { 48, -1, sizeof(::api::PrepareSubmitOrderResponse)},
  { 55, -1, sizeof(::api::PrepareCancelOrderResponse)},
  { 61, -1, sizeof(::api::PrepareAmendOrderResponse)},
  { 67, -1, sizeof(::api::SubmitOrderRequest)},
  { 73, -1, sizeof(::api::CancelOrderRequest)},
  { 79, -1, sizeof(::api::AmendOrderRequest)},
  { 85, -1, sizeof(::api::AssetsRequest)},
  { 90, -1, sizeof(::api::AssetsResponse)},
  { 96, -1, sizeof(::api::AssetByIDRequest)},
  { 102, -1, sizeof(::api::AssetByIDResponse)},
  { 108, -1, sizeof(::api::GetNodeSignaturesAggregateRequest)},
  { 114, -1, sizeof(::api::GetNodeSignaturesAggregateResponse)},
  { 120, -1, sizeof(::api::OptionalProposalState)},
  { 126, -1, sizeof(::api::GetProposalsRequest)},
  { 132, -1, sizeof(::api::GetProposalsResponse)},
  { 138, -1, sizeof(::api::GetProposalsByPartyRequest)},
  { 145, -1, sizeof(::api::GetProposalsByPartyResponse)},
  { 151, -1, sizeof(::api::GetVotesByPartyRequest)},
  { 157, -1, sizeof(::api::GetVotesByPartyResponse)},
  { 163, -1, sizeof(::api::GetNewMarketProposalsRequest)},
  { 169, -1, sizeof(::api::GetNewMarketProposalsResponse)},
  { 175, -1, sizeof(::api::GetUpdateMarketProposalsRequest)},
  { 182, -1, sizeof(::api::GetUpdateMarketProposalsResponse)},
  { 188, -1, sizeof(::api::GetNetworkParametersProposalsRequest)},
  { 194, -1, sizeof(::api::GetNetworkParametersProposalsResponse)},
  { 200, -1, sizeof(::api::GetNewAssetProposalsRequest)},
  { 206, -1, sizeof(::api::GetNewAssetProposalsResponse)},
  { 212, -1, sizeof(::api::GetProposalByIDRequest)},
  { 218, -1, sizeof(::api::GetProposalByIDResponse)},
  { 224, -1, sizeof(::api::GetProposalByReferenceRequest)},
  { 230, -1, sizeof(::api::GetProposalByReferenceResponse)},
  { 236, -1, sizeof(::api::ObservePartyProposalsRequest)},
  { 242, -1, sizeof(::api::ObserveProposalVotesRequest)},
  { 248, -1, sizeof(::api::ObservePartyVotesRequest)},
  { 254, -1, sizeof(::api::MarginLevelsSubscribeRequest)},
  { 261, -1, sizeof(::api::MarginLevelsRequest)},
  { 268, -1, sizeof(::api::MarginLevelsResponse)},
  { 274, -1, sizeof(::api::MarketsDataSubscribeRequest)},
  { 280, -1, sizeof(::api::MarketDataByIDRequest)},
  { 286, -1, sizeof(::api::MarketDataByIDResponse)},
  { 292, -1, sizeof(::api::MarketsDataResponse)},
  { 298, -1, sizeof(::api::LastTradeRequest)},
  { 304, -1, sizeof(::api::LastTradeResponse)},
  { 310, -1, sizeof(::api::MarketByIDRequest)},
  { 316, -1, sizeof(::api::MarketByIDResponse)},
  { 322, -1, sizeof(::api::PartyByIDRequest)},
  { 328, -1, sizeof(::api::PartyByIDResponse)},
  { 334, -1, sizeof(::api::PartiesResponse)},
  { 340, -1, sizeof(::api::TradesByPartyRequest)},
  { 348, -1, sizeof(::api::TradesByPartyResponse)},
  { 354, -1, sizeof(::api::TradesByOrderRequest)},
  { 360, -1, sizeof(::api::TradesByOrderResponse)},
  { 366, -1, sizeof(::api::AccountsSubscribeRequest)},
  { 375, -1, sizeof(::api::OrdersSubscribeRequest)},
  { 382, -1, sizeof(::api::TradesSubscribeRequest)},
  { 389, -1, sizeof(::api::CandlesSubscribeRequest)},
  { 396, -1, sizeof(::api::MarketDepthSubscribeRequest)},
  { 402, -1, sizeof(::api::PositionsSubscribeRequest)},
  { 408, -1, sizeof(::api::OrdersByMarketRequest)},
  { 415, -1, sizeof(::api::OrdersByMarketResponse)},
  { 421, -1, sizeof(::api::OrdersByPartyRequest)},
  { 428, -1, sizeof(::api::OrdersByPartyResponse)},
  { 434, -1, sizeof(::api::OrderByMarketAndIdRequest)},
  { 441, -1, sizeof(::api::OrderByMarketAndIdResponse)},
  { 447, -1, sizeof(::api::OrderByReferenceRequest)},
  { 453, -1, sizeof(::api::OrderByReferenceResponse)},
  { 459, -1, sizeof(::api::MarketsResponse)},
  { 465, -1, sizeof(::api::CandlesRequest)},
  { 473, -1, sizeof(::api::CandlesResponse)},
  { 479, -1, sizeof(::api::MarketDepthRequest)},
  { 486, -1, sizeof(::api::MarketDepthResponse)},
  { 495, -1, sizeof(::api::TradesByMarketRequest)},
  { 502, -1, sizeof(::api::TradesByMarketResponse)},
  { 508, -1, sizeof(::api::PositionsByPartyRequest)},
  { 515, -1, sizeof(::api::PositionsByPartyResponse)},
  { 521, -1, sizeof(::api::VegaTimeResponse)},
  { 527, -1, sizeof(::api::Pagination)},
  { 535, -1, sizeof(::api::OrdersStream)},
  { 541, -1, sizeof(::api::TradesStream)},
  { 547, -1, sizeof(::api::PartyAccountsRequest)},
  { 556, -1, sizeof(::api::PartyAccountsResponse)},
  { 562, -1, sizeof(::api::MarketAccountsRequest)},
  { 569, -1, sizeof(::api::MarketAccountsResponse)},
  { 575, -1, sizeof(::api::PrepareProposalRequest)},
  { 583, -1, sizeof(::api::PrepareProposalResponse)},
  { 590, -1, sizeof(::api::PrepareVoteRequest)},
  { 596, -1, sizeof(::api::PrepareVoteResponse)},
  { 603, -1, sizeof(::api::OrderByIDRequest)},
  { 610, -1, sizeof(::api::OrderByReferenceIDRequest)},
  { 616, -1, sizeof(::api::OrderVersionsByIDRequest)},
  { 623, -1, sizeof(::api::OrderVersionsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PropagateChainEventRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PropagateChainEventResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_SubmitTransactionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_SubmitTransactionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_WithdrawRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_WithdrawResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_NotifyTraderAccountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_NotifyTraderAccountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PrepareSubmitOrderResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PrepareCancelOrderResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PrepareAmendOrderResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_SubmitOrderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_CancelOrderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_AmendOrderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_AssetsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_AssetsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_AssetByIDRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_AssetByIDResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetNodeSignaturesAggregateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetNodeSignaturesAggregateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_OptionalProposalState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetProposalsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetProposalsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetProposalsByPartyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetProposalsByPartyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetVotesByPartyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetVotesByPartyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetNewMarketProposalsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetNewMarketProposalsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetUpdateMarketProposalsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetUpdateMarketProposalsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetNetworkParametersProposalsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetNetworkParametersProposalsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetNewAssetProposalsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetNewAssetProposalsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetProposalByIDRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetProposalByIDResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetProposalByReferenceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_GetProposalByReferenceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_ObservePartyProposalsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_ObserveProposalVotesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_ObservePartyVotesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_MarginLevelsSubscribeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_MarginLevelsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_MarginLevelsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_MarketsDataSubscribeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_MarketDataByIDRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_MarketDataByIDResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_MarketsDataResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_LastTradeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_LastTradeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_MarketByIDRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_MarketByIDResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PartyByIDRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PartyByIDResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PartiesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_TradesByPartyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_TradesByPartyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_TradesByOrderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_TradesByOrderResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_AccountsSubscribeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_OrdersSubscribeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_TradesSubscribeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_CandlesSubscribeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_MarketDepthSubscribeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PositionsSubscribeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_OrdersByMarketRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_OrdersByMarketResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_OrdersByPartyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_OrdersByPartyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_OrderByMarketAndIdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_OrderByMarketAndIdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_OrderByReferenceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_OrderByReferenceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_MarketsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_CandlesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_CandlesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_MarketDepthRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_MarketDepthResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_TradesByMarketRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_TradesByMarketResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PositionsByPartyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PositionsByPartyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_VegaTimeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_Pagination_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_OrdersStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_TradesStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PartyAccountsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PartyAccountsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_MarketAccountsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_MarketAccountsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PrepareProposalRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PrepareProposalResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PrepareVoteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_PrepareVoteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_OrderByIDRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_OrderByReferenceIDRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_OrderVersionsByIDRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::api::_OrderVersionsResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_proto_2fapi_2ftrading_2eproto = {
  {}, AddDescriptors_proto_2fapi_2ftrading_2eproto, "proto/api/trading.proto", schemas,
  file_default_instances, TableStruct_proto_2fapi_2ftrading_2eproto::offsets,
  file_level_metadata_proto_2fapi_2ftrading_2eproto, 99, file_level_enum_descriptors_proto_2fapi_2ftrading_2eproto, file_level_service_descriptors_proto_2fapi_2ftrading_2eproto,
};

const char descriptor_table_protodef_proto_2fapi_2ftrading_2eproto[] =
  "\n\027proto/api/trading.proto\022\003api\032\020proto/ve"
  "ga.proto\032\023proto/markets.proto\032\026proto/gov"
  "ernance.proto\032\030proto/chain_events.proto\032"
  "\022proto/assets.proto\032\033google/protobuf/emp"
  "ty.proto\0326github.com/mwitkow/go-proto-va"
  "lidators/validator.proto\";\n\032PropagateCha"
  "inEventRequest\022\035\n\003evt\030\001 \001(\0132\020.vega.Chain"
  "Event\".\n\033PropagateChainEventResponse\022\017\n\007"
  "success\030\001 \001(\010\":\n\030SubmitTransactionReques"
  "t\022\036\n\002tx\030\001 \001(\0132\022.vega.SignedBundle\",\n\031Sub"
  "mitTransactionResponse\022\017\n\007success\030\001 \001(\010\""
  "3\n\017WithdrawRequest\022 \n\010withdraw\030\001 \001(\0132\016.v"
  "ega.Withdraw\"#\n\020WithdrawResponse\022\017\n\007succ"
  "ess\030\001 \001(\010\"F\n\032NotifyTraderAccountRequest\022"
  "(\n\005notif\030\001 \001(\0132\031.vega.NotifyTraderAccoun"
  "t\"0\n\033NotifyTraderAccountResponse\022\021\n\tsubm"
  "itted\030\001 \001(\010\"<\n\032PrepareSubmitOrderRespons"
  "e\022\014\n\004blob\030\001 \001(\014\022\020\n\010submitID\030\002 \001(\t\"*\n\032Pre"
  "pareCancelOrderResponse\022\014\n\004blob\030\001 \001(\014\")\n"
  "\031PrepareAmendOrderResponse\022\014\n\004blob\030\001 \001(\014"
  "\"\?\n\022SubmitOrderRequest\022)\n\nsubmission\030\001 \001"
  "(\0132\025.vega.OrderSubmission\"C\n\022CancelOrder"
  "Request\022-\n\014cancellation\030\001 \001(\0132\027.vega.Ord"
  "erCancellation\"<\n\021AmendOrderRequest\022\'\n\ta"
  "mendment\030\001 \001(\0132\024.vega.OrderAmendment\"\017\n\r"
  "AssetsRequest\"-\n\016AssetsResponse\022\033\n\006asset"
  "s\030\001 \003(\0132\013.vega.Asset\"\036\n\020AssetByIDRequest"
  "\022\n\n\002ID\030\001 \001(\t\"/\n\021AssetByIDResponse\022\032\n\005ass"
  "et\030\001 \001(\0132\013.vega.Asset\"/\n!GetNodeSignatur"
  "esAggregateRequest\022\n\n\002ID\030\001 \001(\t\"M\n\"GetNod"
  "eSignaturesAggregateResponse\022\'\n\nsignatur"
  "es\030\001 \003(\0132\023.vega.NodeSignature\"<\n\025Optiona"
  "lProposalState\022#\n\005value\030\001 \001(\0162\024.vega.Pro"
  "posal.State\"H\n\023GetProposalsRequest\0221\n\rse"
  "lectInState\030\001 \001(\0132\032.api.OptionalProposal"
  "State\":\n\024GetProposalsResponse\022\"\n\004data\030\001 "
  "\003(\0132\024.vega.GovernanceData\"h\n\032GetProposal"
  "sByPartyRequest\022\027\n\007partyID\030\001 \001(\tB\006\342\337\037\002X\001"
  "\0221\n\rselectInState\030\002 \001(\0132\032.api.OptionalPr"
  "oposalState\"A\n\033GetProposalsByPartyRespon"
  "se\022\"\n\004data\030\001 \003(\0132\024.vega.GovernanceData\"1"
  "\n\026GetVotesByPartyRequest\022\027\n\007partyID\030\001 \001("
  "\tB\006\342\337\037\002X\001\"4\n\027GetVotesByPartyResponse\022\031\n\005"
  "votes\030\001 \003(\0132\n.vega.Vote\"Q\n\034GetNewMarketP"
  "roposalsRequest\0221\n\rselectInState\030\001 \001(\0132\032"
  ".api.OptionalProposalState\"C\n\035GetNewMark"
  "etProposalsResponse\022\"\n\004data\030\001 \003(\0132\024.vega"
  ".GovernanceData\"n\n\037GetUpdateMarketPropos"
  "alsRequest\022\030\n\010marketID\030\001 \001(\tB\006\342\337\037\002X\001\0221\n\r"
  "selectInState\030\002 \001(\0132\032.api.OptionalPropos"
  "alState\"F\n GetUpdateMarketProposalsRespo"
  "nse\022\"\n\004data\030\001 \003(\0132\024.vega.GovernanceData\""
  "Y\n$GetNetworkParametersProposalsRequest\022"
  "1\n\rselectInState\030\001 \001(\0132\032.api.OptionalPro"
  "posalState\"K\n%GetNetworkParametersPropos"
  "alsResponse\022\"\n\004data\030\001 \003(\0132\024.vega.Governa"
  "nceData\"P\n\033GetNewAssetProposalsRequest\0221"
  "\n\rselectInState\030\001 \001(\0132\032.api.OptionalProp"
  "osalState\"B\n\034GetNewAssetProposalsRespons"
  "e\022\"\n\004data\030\001 \003(\0132\024.vega.GovernanceData\"4\n"
  "\026GetProposalByIDRequest\022\032\n\nproposalID\030\001 "
  "\001(\tB\006\342\337\037\002X\001\"=\n\027GetProposalByIDResponse\022\""
  "\n\004data\030\001 \001(\0132\024.vega.GovernanceData\":\n\035Ge"
  "tProposalByReferenceRequest\022\031\n\tReference"
  "\030\001 \001(\tB\006\342\337\037\002X\001\"D\n\036GetProposalByReference"
  "Response\022\"\n\004data\030\001 \001(\0132\024.vega.Governance"
  "Data\"7\n\034ObservePartyProposalsRequest\022\027\n\007"
  "partyID\030\001 \001(\tB\006\342\337\037\002X\001\"9\n\033ObserveProposal"
  "VotesRequest\022\032\n\nproposalID\030\001 \001(\tB\006\342\337\037\002X\001"
  "\"3\n\030ObservePartyVotesRequest\022\027\n\007partyID\030"
  "\001 \001(\tB\006\342\337\037\002X\001\"I\n\034MarginLevelsSubscribeRe"
  "quest\022\027\n\007partyID\030\001 \001(\tB\006\342\337\037\002X\001\022\020\n\010market"
  "ID\030\002 \001(\t\"@\n\023MarginLevelsRequest\022\027\n\007party"
  "ID\030\001 \001(\tB\006\342\337\037\002X\001\022\020\n\010marketID\030\002 \001(\t\"@\n\024Ma"
  "rginLevelsResponse\022(\n\014marginLevels\030\001 \003(\013"
  "2\022.vega.MarginLevels\"/\n\033MarketsDataSubsc"
  "ribeRequest\022\020\n\010marketID\030\001 \001(\t\"1\n\025MarketD"
  "ataByIDRequest\022\030\n\010marketID\030\001 \001(\tB\006\342\337\037\002X\001"
  "\">\n\026MarketDataByIDResponse\022$\n\nmarketData"
  "\030\001 \001(\0132\020.vega.MarketData\"<\n\023MarketsDataR"
  "esponse\022%\n\013marketsData\030\001 \003(\0132\020.vega.Mark"
  "etData\",\n\020LastTradeRequest\022\030\n\010marketID\030\001"
  " \001(\tB\006\342\337\037\002X\001\"/\n\021LastTradeResponse\022\032\n\005tra"
  "de\030\001 \001(\0132\013.vega.Trade\"-\n\021MarketByIDReque"
  "st\022\030\n\010marketID\030\001 \001(\tB\006\342\337\037\002X\001\"2\n\022MarketBy"
  "IDResponse\022\034\n\006market\030\001 \001(\0132\014.vega.Market"
  "\"+\n\020PartyByIDRequest\022\027\n\007partyID\030\001 \001(\tB\006\342"
  "\337\037\002X\001\"/\n\021PartyByIDResponse\022\032\n\005party\030\001 \001("
  "\0132\013.vega.Party\"/\n\017PartiesResponse\022\034\n\007par"
  "ties\030\001 \003(\0132\013.vega.Party\"^\n\024TradesByParty"
  "Request\022\017\n\007partyID\030\001 \001(\t\022\020\n\010marketID\030\002 \001"
  "(\t\022#\n\npagination\030\003 \001(\0132\017.api.Pagination\""
  "4\n\025TradesByPartyResponse\022\033\n\006trades\030\001 \003(\013"
  "2\013.vega.Trade\"\'\n\024TradesByOrderRequest\022\017\n"
  "\007orderID\030\001 \001(\t\"4\n\025TradesByOrderResponse\022"
  "\033\n\006trades\030\001 \003(\0132\013.vega.Trade\"m\n\030Accounts"
  "SubscribeRequest\022\020\n\010marketID\030\001 \001(\t\022\017\n\007pa"
  "rtyID\030\002 \001(\t\022\r\n\005asset\030\003 \001(\t\022\037\n\004type\030\004 \001(\016"
  "2\021.vega.AccountType\";\n\026OrdersSubscribeRe"
  "quest\022\020\n\010marketID\030\001 \001(\t\022\017\n\007partyID\030\002 \001(\t"
  "\";\n\026TradesSubscribeRequest\022\020\n\010marketID\030\001"
  " \001(\t\022\017\n\007partyID\030\002 \001(\t\"U\n\027CandlesSubscrib"
  "eRequest\022\030\n\010marketID\030\001 \001(\tB\006\342\337\037\002X\001\022 \n\010in"
  "terval\030\002 \001(\0162\016.vega.Interval\"7\n\033MarketDe"
  "pthSubscribeRequest\022\030\n\010marketID\030\001 \001(\tB\006\342"
  "\337\037\002X\001\",\n\031PositionsSubscribeRequest\022\017\n\007pa"
  "rtyID\030\001 \001(\t\"V\n\025OrdersByMarketRequest\022\030\n\010"
  "marketID\030\001 \001(\tB\006\342\337\037\002X\001\022#\n\npagination\030\002 \001"
  "(\0132\017.api.Pagination\"5\n\026OrdersByMarketRes"
  "ponse\022\033\n\006orders\030\001 \003(\0132\013.vega.Order\"T\n\024Or"
  "dersByPartyRequest\022\027\n\007partyID\030\001 \001(\tB\006\342\337\037"
  "\002X\001\022#\n\npagination\030\002 \001(\0132\017.api.Pagination"
  "\"4\n\025OrdersByPartyResponse\022\033\n\006orders\030\001 \003("
  "\0132\013.vega.Order\"N\n\031OrderByMarketAndIdRequ"
  "est\022\030\n\010marketID\030\001 \001(\tB\006\342\337\037\002X\001\022\027\n\007orderID"
  "\030\002 \001(\tB\006\342\337\037\002X\001\"8\n\032OrderByMarketAndIdResp"
  "onse\022\032\n\005order\030\001 \001(\0132\013.vega.Order\"4\n\027Orde"
  "rByReferenceRequest\022\031\n\treference\030\001 \001(\tB\006"
  "\342\337\037\002X\001\"6\n\030OrderByReferenceResponse\022\032\n\005or"
  "der\030\001 \001(\0132\013.vega.Order\"0\n\017MarketsRespons"
  "e\022\035\n\007markets\030\001 \003(\0132\014.vega.Market\"l\n\016Cand"
  "lesRequest\022\030\n\010marketID\030\001 \001(\tB\006\342\337\037\002X\001\022\036\n\016"
  "sinceTimestamp\030\002 \001(\003B\006\342\337\037\002\020\000\022 \n\010interval"
  "\030\003 \001(\0162\016.vega.Interval\"0\n\017CandlesRespons"
  "e\022\035\n\007candles\030\001 \003(\0132\014.vega.Candle\"@\n\022Mark"
  "etDepthRequest\022\030\n\010marketID\030\001 \001(\tB\006\342\337\037\002X\001"
  "\022\020\n\010maxDepth\030\002 \001(\004\"\206\001\n\023MarketDepthRespon"
  "se\022\020\n\010marketID\030\001 \001(\t\022\035\n\003buy\030\002 \003(\0132\020.vega"
  ".PriceLevel\022\036\n\004sell\030\003 \003(\0132\020.vega.PriceLe"
  "vel\022\036\n\tlastTrade\030\004 \001(\0132\013.vega.Trade\"V\n\025T"
  "radesByMarketRequest\022\030\n\010marketID\030\001 \001(\tB\006"
  "\342\337\037\002X\001\022#\n\npagination\030\002 \001(\0132\017.api.Paginat"
  "ion\"5\n\026TradesByMarketResponse\022\033\n\006trades\030"
  "\001 \003(\0132\013.vega.Trade\"D\n\027PositionsByPartyRe"
  "quest\022\027\n\007partyID\030\001 \001(\tB\006\342\337\037\002X\001\022\020\n\010market"
  "ID\030\002 \001(\t\"=\n\030PositionsByPartyResponse\022!\n\t"
  "positions\030\001 \003(\0132\016.vega.Position\"%\n\020VegaT"
  "imeResponse\022\021\n\ttimestamp\030\001 \001(\003\"=\n\nPagina"
  "tion\022\014\n\004skip\030\001 \001(\004\022\r\n\005limit\030\002 \001(\004\022\022\n\ndes"
  "cending\030\003 \001(\010\"+\n\014OrdersStream\022\033\n\006orders\030"
  "\001 \003(\0132\013.vega.Order\"+\n\014TradesStream\022\033\n\006tr"
  "ades\030\001 \003(\0132\013.vega.Trade\"i\n\024PartyAccounts"
  "Request\022\017\n\007partyID\030\001 \001(\t\022\020\n\010marketID\030\002 \001"
  "(\t\022\037\n\004type\030\003 \001(\0162\021.vega.AccountType\022\r\n\005a"
  "sset\030\004 \001(\t\"8\n\025PartyAccountsResponse\022\037\n\010a"
  "ccounts\030\001 \003(\0132\r.vega.Account\"8\n\025MarketAc"
  "countsRequest\022\020\n\010marketID\030\001 \001(\t\022\r\n\005asset"
  "\030\002 \001(\t\"9\n\026MarketAccountsResponse\022\037\n\010acco"
  "unts\030\001 \003(\0132\r.vega.Account\"s\n\026PrepareProp"
  "osalRequest\022\027\n\007partyID\030\001 \001(\tB\006\342\337\037\002X\001\022\021\n\t"
  "reference\030\002 \001(\t\022-\n\010proposal\030\003 \001(\0132\023.vega"
  ".ProposalTermsB\006\342\337\037\002 \001\"P\n\027PrepareProposa"
  "lResponse\022\014\n\004blob\030\001 \001(\014\022\'\n\017pendingPropos"
  "al\030\002 \001(\0132\016.vega.Proposal\"6\n\022PrepareVoteR"
  "equest\022 \n\004vote\030\001 \001(\0132\n.vega.VoteB\006\342\337\037\002 \001"
  "\"=\n\023PrepareVoteResponse\022\014\n\004blob\030\001 \001(\014\022\030\n"
  "\004vote\030\002 \001(\0132\n.vega.Vote\"<\n\020OrderByIDRequ"
  "est\022\027\n\007orderID\030\001 \001(\tB\006\342\337\037\002 \001\022\017\n\007version\030"
  "\002 \001(\004\"8\n\031OrderByReferenceIDRequest\022\033\n\013re"
  "ferenceID\030\001 \001(\tB\006\342\337\037\002 \001\"X\n\030OrderVersions"
  "ByIDRequest\022\027\n\007orderID\030\001 \001(\tB\006\342\337\037\002 \001\022#\n\n"
  "pagination\030\002 \001(\0132\017.api.Pagination\"4\n\025Ord"
  "erVersionsResponse\022\033\n\006orders\030\001 \003(\0132\013.veg"
  "a.Order2\307\005\n\007trading\022N\n\022PrepareSubmitOrde"
  "r\022\027.api.SubmitOrderRequest\032\037.api.Prepare"
  "SubmitOrderResponse\022N\n\022PrepareCancelOrde"
  "r\022\027.api.CancelOrderRequest\032\037.api.Prepare"
  "CancelOrderResponse\022K\n\021PrepareAmendOrder"
  "\022\026.api.AmendOrderRequest\032\036.api.PrepareAm"
  "endOrderResponse\022X\n\023NotifyTraderAccount\022"
  "\037.api.NotifyTraderAccountRequest\032 .api.N"
  "otifyTraderAccountResponse\0227\n\010Withdraw\022\024"
  ".api.WithdrawRequest\032\025.api.WithdrawRespo"
  "nse\022R\n\021SubmitTransaction\022\035.api.SubmitTra"
  "nsactionRequest\032\036.api.SubmitTransactionR"
  "esponse\022L\n\017PrepareProposal\022\033.api.Prepare"
  "ProposalRequest\032\034.api.PrepareProposalRes"
  "ponse\022@\n\013PrepareVote\022\027.api.PrepareVoteRe"
  "quest\032\030.api.PrepareVoteResponse\022X\n\023Propa"
  "gateChainEvent\022\037.api.PropagateChainEvent"
  "Request\032 .api.PropagateChainEventRespons"
  "e2\211\035\n\014trading_data\022I\n\016MarketAccounts\022\032.a"
  "pi.MarketAccountsRequest\032\033.api.MarketAcc"
  "ountsResponse\022F\n\rPartyAccounts\022\031.api.Par"
  "tyAccountsRequest\032\032.api.PartyAccountsRes"
  "ponse\0224\n\007Candles\022\023.api.CandlesRequest\032\024."
  "api.CandlesResponse\022I\n\016MarketDataByID\022\032."
  "api.MarketDataByIDRequest\032\033.api.MarketDa"
  "taByIDResponse\022\?\n\013MarketsData\022\026.google.p"
  "rotobuf.Empty\032\030.api.MarketsDataResponse\022"
  "=\n\nMarketByID\022\026.api.MarketByIDRequest\032\027."
  "api.MarketByIDResponse\022@\n\013MarketDepth\022\027."
  "api.MarketDepthRequest\032\030.api.MarketDepth"
  "Response\0227\n\007Markets\022\026.google.protobuf.Em"
  "pty\032\024.api.MarketsResponse\022U\n\022OrderByMark"
  "etAndID\022\036.api.OrderByMarketAndIdRequest\032"
  "\037.api.OrderByMarketAndIdResponse\022O\n\020Orde"
  "rByReference\022\034.api.OrderByReferenceReque"
  "st\032\035.api.OrderByReferenceResponse\022I\n\016Ord"
  "ersByMarket\022\032.api.OrdersByMarketRequest\032"
  "\033.api.OrdersByMarketResponse\022F\n\rOrdersBy"
  "Party\022\031.api.OrdersByPartyRequest\032\032.api.O"
  "rdersByPartyResponse\022/\n\tOrderByID\022\025.api."
  "OrderByIDRequest\032\013.vega.Order\022A\n\022OrderBy"
  "ReferenceID\022\036.api.OrderByReferenceIDRequ"
  "est\032\013.vega.Order\022N\n\021OrderVersionsByID\022\035."
  "api.OrderVersionsByIDRequest\032\032.api.Order"
  "VersionsResponse\022C\n\014MarginLevels\022\030.api.M"
  "arginLevelsRequest\032\031.api.MarginLevelsRes"
  "ponse\0227\n\007Parties\022\026.google.protobuf.Empty"
  "\032\024.api.PartiesResponse\022:\n\tPartyByID\022\025.ap"
  "i.PartyByIDRequest\032\026.api.PartyByIDRespon"
  "se\022O\n\020PositionsByParty\022\034.api.PositionsBy"
  "PartyRequest\032\035.api.PositionsByPartyRespo"
  "nse\022:\n\tLastTrade\022\025.api.LastTradeRequest\032"
  "\026.api.LastTradeResponse\022I\n\016TradesByMarke"
  "t\022\032.api.TradesByMarketRequest\032\033.api.Trad"
  "esByMarketResponse\022F\n\rTradesByOrder\022\031.ap"
  "i.TradesByOrderRequest\032\032.api.TradesByOrd"
  "erResponse\022F\n\rTradesByParty\022\031.api.Trades"
  "ByPartyRequest\032\032.api.TradesByPartyRespon"
  "se\022C\n\014GetProposals\022\030.api.GetProposalsReq"
  "uest\032\031.api.GetProposalsResponse\022X\n\023GetPr"
  "oposalsByParty\022\037.api.GetProposalsByParty"
  "Request\032 .api.GetProposalsByPartyRespons"
  "e\022L\n\017GetVotesByParty\022\033.api.GetVotesByPar"
  "tyRequest\032\034.api.GetVotesByPartyResponse\022"
  "^\n\025GetNewMarketProposals\022!.api.GetNewMar"
  "ketProposalsRequest\032\".api.GetNewMarketPr"
  "oposalsResponse\022g\n\030GetUpdateMarketPropos"
  "als\022$.api.GetUpdateMarketProposalsReques"
  "t\032%.api.GetUpdateMarketProposalsResponse"
  "\022v\n\035GetNetworkParametersProposals\022).api."
  "GetNetworkParametersProposalsRequest\032*.a"
  "pi.GetNetworkParametersProposalsResponse"
  "\022[\n\024GetNewAssetProposals\022 .api.GetNewAss"
  "etProposalsRequest\032!.api.GetNewAssetProp"
  "osalsResponse\022L\n\017GetProposalByID\022\033.api.G"
  "etProposalByIDRequest\032\034.api.GetProposalB"
  "yIDResponse\022a\n\026GetProposalByReference\022\"."
  "api.GetProposalByReferenceRequest\032#.api."
  "GetProposalByReferenceResponse\022C\n\021Observ"
  "eGovernance\022\026.google.protobuf.Empty\032\024.ve"
  "ga.GovernanceData0\001\022R\n\025ObservePartyPropo"
  "sals\022!.api.ObservePartyProposalsRequest\032"
  "\024.vega.GovernanceData0\001\022@\n\021ObservePartyV"
  "otes\022\035.api.ObservePartyVotesRequest\032\n.ve"
  "ga.Vote0\001\022F\n\024ObserveProposalVotes\022 .api."
  "ObserveProposalVotesRequest\032\n.vega.Vote0"
  "\001\0226\n\nStatistics\022\026.google.protobuf.Empty\032"
  "\020.vega.Statistics\022<\n\013GetVegaTime\022\026.googl"
  "e.protobuf.Empty\032\025.api.VegaTimeResponse\022"
  "C\n\021AccountsSubscribe\022\035.api.AccountsSubsc"
  "ribeRequest\032\r.vega.Account0\001\022@\n\020CandlesS"
  "ubscribe\022\034.api.CandlesSubscribeRequest\032\014"
  ".vega.Candle0\001\022P\n\025MarginLevelsSubscribe\022"
  "!.api.MarginLevelsSubscribeRequest\032\022.veg"
  "a.MarginLevels0\001\022M\n\024MarketDepthSubscribe"
  "\022 .api.MarketDepthSubscribeRequest\032\021.veg"
  "a.MarketDepth0\001\022L\n\024MarketsDataSubscribe\022"
  " .api.MarketsDataSubscribeRequest\032\020.vega"
  ".MarketData0\001\022C\n\017OrdersSubscribe\022\033.api.O"
  "rdersSubscribeRequest\032\021.api.OrdersStream"
  "0\001\022F\n\022PositionsSubscribe\022\036.api.Positions"
  "SubscribeRequest\032\016.vega.Position0\001\022C\n\017Tr"
  "adesSubscribe\022\033.api.TradesSubscribeReque"
  "st\032\021.api.TradesStream0\001\022N\n\032TransferRespo"
  "nsesSubscribe\022\026.google.protobuf.Empty\032\026."
  "vega.TransferResponse0\001\022m\n\032GetNodeSignat"
  "uresAggregate\022&.api.GetNodeSignaturesAgg"
  "regateRequest\032\'.api.GetNodeSignaturesAgg"
  "regateResponse\022:\n\tAssetByID\022\025.api.AssetB"
  "yIDRequest\032\026.api.AssetByIDResponse\0221\n\006As"
  "sets\022\022.api.AssetsRequest\032\023.api.AssetsRes"
  "ponseB%Z#code.vegaprotocol.io/vega/proto"
  "/apib\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_proto_2fapi_2ftrading_2eproto = {
  false, InitDefaults_proto_2fapi_2ftrading_2eproto, 
  descriptor_table_protodef_proto_2fapi_2ftrading_2eproto,
  "proto/api/trading.proto", &assign_descriptors_table_proto_2fapi_2ftrading_2eproto, 11012,
};

void AddDescriptors_proto_2fapi_2ftrading_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[7] =
  {
    ::AddDescriptors_proto_2fvega_2eproto,
    ::AddDescriptors_proto_2fmarkets_2eproto,
    ::AddDescriptors_proto_2fgovernance_2eproto,
    ::AddDescriptors_proto_2fchain_5fevents_2eproto,
    ::AddDescriptors_proto_2fassets_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fempty_2eproto,
    ::AddDescriptors_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_proto_2fapi_2ftrading_2eproto, deps, 7);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fapi_2ftrading_2eproto = []() { AddDescriptors_proto_2fapi_2ftrading_2eproto(); return true; }();
namespace api {

// ===================================================================

void PropagateChainEventRequest::InitAsDefaultInstance() {
  ::api::_PropagateChainEventRequest_default_instance_._instance.get_mutable()->evt_ = const_cast< ::vega::ChainEvent*>(
      ::vega::ChainEvent::internal_default_instance());
}
class PropagateChainEventRequest::HasBitSetters {
 public:
  static const ::vega::ChainEvent& evt(const PropagateChainEventRequest* msg);
};

const ::vega::ChainEvent&
PropagateChainEventRequest::HasBitSetters::evt(const PropagateChainEventRequest* msg) {
  return *msg->evt_;
}
void PropagateChainEventRequest::clear_evt() {
  if (GetArenaNoVirtual() == nullptr && evt_ != nullptr) {
    delete evt_;
  }
  evt_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropagateChainEventRequest::kEvtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropagateChainEventRequest::PropagateChainEventRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PropagateChainEventRequest)
}
PropagateChainEventRequest::PropagateChainEventRequest(const PropagateChainEventRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_evt()) {
    evt_ = new ::vega::ChainEvent(*from.evt_);
  } else {
    evt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.PropagateChainEventRequest)
}

void PropagateChainEventRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PropagateChainEventRequest_proto_2fapi_2ftrading_2eproto.base);
  evt_ = nullptr;
}

PropagateChainEventRequest::~PropagateChainEventRequest() {
  // @@protoc_insertion_point(destructor:api.PropagateChainEventRequest)
  SharedDtor();
}

void PropagateChainEventRequest::SharedDtor() {
  if (this != internal_default_instance()) delete evt_;
}

void PropagateChainEventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropagateChainEventRequest& PropagateChainEventRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PropagateChainEventRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PropagateChainEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PropagateChainEventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && evt_ != nullptr) {
    delete evt_;
  }
  evt_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PropagateChainEventRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PropagateChainEventRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.ChainEvent evt = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::ChainEvent::_InternalParse;
        object = msg->mutable_evt();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PropagateChainEventRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PropagateChainEventRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.ChainEvent evt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_evt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PropagateChainEventRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PropagateChainEventRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PropagateChainEventRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PropagateChainEventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.ChainEvent evt = 1;
  if (this->has_evt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::evt(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PropagateChainEventRequest)
}

::google::protobuf::uint8* PropagateChainEventRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PropagateChainEventRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.ChainEvent evt = 1;
  if (this->has_evt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::evt(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PropagateChainEventRequest)
  return target;
}

size_t PropagateChainEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PropagateChainEventRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.ChainEvent evt = 1;
  if (this->has_evt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *evt_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropagateChainEventRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PropagateChainEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PropagateChainEventRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PropagateChainEventRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PropagateChainEventRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PropagateChainEventRequest)
    MergeFrom(*source);
  }
}

void PropagateChainEventRequest::MergeFrom(const PropagateChainEventRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PropagateChainEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_evt()) {
    mutable_evt()->::vega::ChainEvent::MergeFrom(from.evt());
  }
}

void PropagateChainEventRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PropagateChainEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropagateChainEventRequest::CopyFrom(const PropagateChainEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PropagateChainEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropagateChainEventRequest::IsInitialized() const {
  return true;
}

void PropagateChainEventRequest::Swap(PropagateChainEventRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropagateChainEventRequest::InternalSwap(PropagateChainEventRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(evt_, other->evt_);
}

::google::protobuf::Metadata PropagateChainEventRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PropagateChainEventResponse::InitAsDefaultInstance() {
}
class PropagateChainEventResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropagateChainEventResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropagateChainEventResponse::PropagateChainEventResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PropagateChainEventResponse)
}
PropagateChainEventResponse::PropagateChainEventResponse(const PropagateChainEventResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:api.PropagateChainEventResponse)
}

void PropagateChainEventResponse::SharedCtor() {
  success_ = false;
}

PropagateChainEventResponse::~PropagateChainEventResponse() {
  // @@protoc_insertion_point(destructor:api.PropagateChainEventResponse)
  SharedDtor();
}

void PropagateChainEventResponse::SharedDtor() {
}

void PropagateChainEventResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropagateChainEventResponse& PropagateChainEventResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PropagateChainEventResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PropagateChainEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PropagateChainEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PropagateChainEventResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PropagateChainEventResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PropagateChainEventResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PropagateChainEventResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PropagateChainEventResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PropagateChainEventResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PropagateChainEventResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PropagateChainEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PropagateChainEventResponse)
}

::google::protobuf::uint8* PropagateChainEventResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PropagateChainEventResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PropagateChainEventResponse)
  return target;
}

size_t PropagateChainEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PropagateChainEventResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropagateChainEventResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PropagateChainEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PropagateChainEventResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PropagateChainEventResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PropagateChainEventResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PropagateChainEventResponse)
    MergeFrom(*source);
  }
}

void PropagateChainEventResponse::MergeFrom(const PropagateChainEventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PropagateChainEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    set_success(from.success());
  }
}

void PropagateChainEventResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PropagateChainEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropagateChainEventResponse::CopyFrom(const PropagateChainEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PropagateChainEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropagateChainEventResponse::IsInitialized() const {
  return true;
}

void PropagateChainEventResponse::Swap(PropagateChainEventResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropagateChainEventResponse::InternalSwap(PropagateChainEventResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::google::protobuf::Metadata PropagateChainEventResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SubmitTransactionRequest::InitAsDefaultInstance() {
  ::api::_SubmitTransactionRequest_default_instance_._instance.get_mutable()->tx_ = const_cast< ::vega::SignedBundle*>(
      ::vega::SignedBundle::internal_default_instance());
}
class SubmitTransactionRequest::HasBitSetters {
 public:
  static const ::vega::SignedBundle& tx(const SubmitTransactionRequest* msg);
};

const ::vega::SignedBundle&
SubmitTransactionRequest::HasBitSetters::tx(const SubmitTransactionRequest* msg) {
  return *msg->tx_;
}
void SubmitTransactionRequest::clear_tx() {
  if (GetArenaNoVirtual() == nullptr && tx_ != nullptr) {
    delete tx_;
  }
  tx_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitTransactionRequest::kTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitTransactionRequest::SubmitTransactionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.SubmitTransactionRequest)
}
SubmitTransactionRequest::SubmitTransactionRequest(const SubmitTransactionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tx()) {
    tx_ = new ::vega::SignedBundle(*from.tx_);
  } else {
    tx_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.SubmitTransactionRequest)
}

void SubmitTransactionRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SubmitTransactionRequest_proto_2fapi_2ftrading_2eproto.base);
  tx_ = nullptr;
}

SubmitTransactionRequest::~SubmitTransactionRequest() {
  // @@protoc_insertion_point(destructor:api.SubmitTransactionRequest)
  SharedDtor();
}

void SubmitTransactionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete tx_;
}

void SubmitTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitTransactionRequest& SubmitTransactionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubmitTransactionRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void SubmitTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.SubmitTransactionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && tx_ != nullptr) {
    delete tx_;
  }
  tx_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubmitTransactionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubmitTransactionRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.SignedBundle tx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::SignedBundle::_InternalParse;
        object = msg->mutable_tx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubmitTransactionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.SubmitTransactionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.SignedBundle tx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.SubmitTransactionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.SubmitTransactionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubmitTransactionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.SubmitTransactionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.SignedBundle tx = 1;
  if (this->has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::tx(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.SubmitTransactionRequest)
}

::google::protobuf::uint8* SubmitTransactionRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.SubmitTransactionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.SignedBundle tx = 1;
  if (this->has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::tx(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.SubmitTransactionRequest)
  return target;
}

size_t SubmitTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.SubmitTransactionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.SignedBundle tx = 1;
  if (this->has_tx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tx_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitTransactionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.SubmitTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitTransactionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SubmitTransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.SubmitTransactionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.SubmitTransactionRequest)
    MergeFrom(*source);
  }
}

void SubmitTransactionRequest::MergeFrom(const SubmitTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.SubmitTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tx()) {
    mutable_tx()->::vega::SignedBundle::MergeFrom(from.tx());
  }
}

void SubmitTransactionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.SubmitTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitTransactionRequest::CopyFrom(const SubmitTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.SubmitTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitTransactionRequest::IsInitialized() const {
  return true;
}

void SubmitTransactionRequest::Swap(SubmitTransactionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitTransactionRequest::InternalSwap(SubmitTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tx_, other->tx_);
}

::google::protobuf::Metadata SubmitTransactionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SubmitTransactionResponse::InitAsDefaultInstance() {
}
class SubmitTransactionResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitTransactionResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitTransactionResponse::SubmitTransactionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.SubmitTransactionResponse)
}
SubmitTransactionResponse::SubmitTransactionResponse(const SubmitTransactionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:api.SubmitTransactionResponse)
}

void SubmitTransactionResponse::SharedCtor() {
  success_ = false;
}

SubmitTransactionResponse::~SubmitTransactionResponse() {
  // @@protoc_insertion_point(destructor:api.SubmitTransactionResponse)
  SharedDtor();
}

void SubmitTransactionResponse::SharedDtor() {
}

void SubmitTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitTransactionResponse& SubmitTransactionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubmitTransactionResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void SubmitTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.SubmitTransactionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubmitTransactionResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubmitTransactionResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubmitTransactionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.SubmitTransactionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.SubmitTransactionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.SubmitTransactionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubmitTransactionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.SubmitTransactionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.SubmitTransactionResponse)
}

::google::protobuf::uint8* SubmitTransactionResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.SubmitTransactionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.SubmitTransactionResponse)
  return target;
}

size_t SubmitTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.SubmitTransactionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitTransactionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.SubmitTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitTransactionResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SubmitTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.SubmitTransactionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.SubmitTransactionResponse)
    MergeFrom(*source);
  }
}

void SubmitTransactionResponse::MergeFrom(const SubmitTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.SubmitTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    set_success(from.success());
  }
}

void SubmitTransactionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.SubmitTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitTransactionResponse::CopyFrom(const SubmitTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.SubmitTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitTransactionResponse::IsInitialized() const {
  return true;
}

void SubmitTransactionResponse::Swap(SubmitTransactionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitTransactionResponse::InternalSwap(SubmitTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::google::protobuf::Metadata SubmitTransactionResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WithdrawRequest::InitAsDefaultInstance() {
  ::api::_WithdrawRequest_default_instance_._instance.get_mutable()->withdraw_ = const_cast< ::vega::Withdraw*>(
      ::vega::Withdraw::internal_default_instance());
}
class WithdrawRequest::HasBitSetters {
 public:
  static const ::vega::Withdraw& withdraw(const WithdrawRequest* msg);
};

const ::vega::Withdraw&
WithdrawRequest::HasBitSetters::withdraw(const WithdrawRequest* msg) {
  return *msg->withdraw_;
}
void WithdrawRequest::clear_withdraw() {
  if (GetArenaNoVirtual() == nullptr && withdraw_ != nullptr) {
    delete withdraw_;
  }
  withdraw_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WithdrawRequest::kWithdrawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WithdrawRequest::WithdrawRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.WithdrawRequest)
}
WithdrawRequest::WithdrawRequest(const WithdrawRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_withdraw()) {
    withdraw_ = new ::vega::Withdraw(*from.withdraw_);
  } else {
    withdraw_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.WithdrawRequest)
}

void WithdrawRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WithdrawRequest_proto_2fapi_2ftrading_2eproto.base);
  withdraw_ = nullptr;
}

WithdrawRequest::~WithdrawRequest() {
  // @@protoc_insertion_point(destructor:api.WithdrawRequest)
  SharedDtor();
}

void WithdrawRequest::SharedDtor() {
  if (this != internal_default_instance()) delete withdraw_;
}

void WithdrawRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawRequest& WithdrawRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WithdrawRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void WithdrawRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.WithdrawRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && withdraw_ != nullptr) {
    delete withdraw_;
  }
  withdraw_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WithdrawRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WithdrawRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Withdraw withdraw = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Withdraw::_InternalParse;
        object = msg->mutable_withdraw();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WithdrawRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.WithdrawRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Withdraw withdraw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_withdraw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.WithdrawRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.WithdrawRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WithdrawRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.WithdrawRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Withdraw withdraw = 1;
  if (this->has_withdraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::withdraw(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.WithdrawRequest)
}

::google::protobuf::uint8* WithdrawRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.WithdrawRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Withdraw withdraw = 1;
  if (this->has_withdraw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::withdraw(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.WithdrawRequest)
  return target;
}

size_t WithdrawRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.WithdrawRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Withdraw withdraw = 1;
  if (this->has_withdraw()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *withdraw_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.WithdrawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawRequest* source =
      ::google::protobuf::DynamicCastToGenerated<WithdrawRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.WithdrawRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.WithdrawRequest)
    MergeFrom(*source);
  }
}

void WithdrawRequest::MergeFrom(const WithdrawRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.WithdrawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_withdraw()) {
    mutable_withdraw()->::vega::Withdraw::MergeFrom(from.withdraw());
  }
}

void WithdrawRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.WithdrawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawRequest::CopyFrom(const WithdrawRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.WithdrawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawRequest::IsInitialized() const {
  return true;
}

void WithdrawRequest::Swap(WithdrawRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WithdrawRequest::InternalSwap(WithdrawRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(withdraw_, other->withdraw_);
}

::google::protobuf::Metadata WithdrawRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WithdrawResponse::InitAsDefaultInstance() {
}
class WithdrawResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WithdrawResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WithdrawResponse::WithdrawResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.WithdrawResponse)
}
WithdrawResponse::WithdrawResponse(const WithdrawResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:api.WithdrawResponse)
}

void WithdrawResponse::SharedCtor() {
  success_ = false;
}

WithdrawResponse::~WithdrawResponse() {
  // @@protoc_insertion_point(destructor:api.WithdrawResponse)
  SharedDtor();
}

void WithdrawResponse::SharedDtor() {
}

void WithdrawResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawResponse& WithdrawResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WithdrawResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void WithdrawResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.WithdrawResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WithdrawResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WithdrawResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WithdrawResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.WithdrawResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.WithdrawResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.WithdrawResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WithdrawResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.WithdrawResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.WithdrawResponse)
}

::google::protobuf::uint8* WithdrawResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.WithdrawResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.WithdrawResponse)
  return target;
}

size_t WithdrawResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.WithdrawResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.WithdrawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawResponse* source =
      ::google::protobuf::DynamicCastToGenerated<WithdrawResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.WithdrawResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.WithdrawResponse)
    MergeFrom(*source);
  }
}

void WithdrawResponse::MergeFrom(const WithdrawResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.WithdrawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    set_success(from.success());
  }
}

void WithdrawResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.WithdrawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawResponse::CopyFrom(const WithdrawResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.WithdrawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawResponse::IsInitialized() const {
  return true;
}

void WithdrawResponse::Swap(WithdrawResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WithdrawResponse::InternalSwap(WithdrawResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::google::protobuf::Metadata WithdrawResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NotifyTraderAccountRequest::InitAsDefaultInstance() {
  ::api::_NotifyTraderAccountRequest_default_instance_._instance.get_mutable()->notif_ = const_cast< ::vega::NotifyTraderAccount*>(
      ::vega::NotifyTraderAccount::internal_default_instance());
}
class NotifyTraderAccountRequest::HasBitSetters {
 public:
  static const ::vega::NotifyTraderAccount& notif(const NotifyTraderAccountRequest* msg);
};

const ::vega::NotifyTraderAccount&
NotifyTraderAccountRequest::HasBitSetters::notif(const NotifyTraderAccountRequest* msg) {
  return *msg->notif_;
}
void NotifyTraderAccountRequest::clear_notif() {
  if (GetArenaNoVirtual() == nullptr && notif_ != nullptr) {
    delete notif_;
  }
  notif_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyTraderAccountRequest::kNotifFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyTraderAccountRequest::NotifyTraderAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.NotifyTraderAccountRequest)
}
NotifyTraderAccountRequest::NotifyTraderAccountRequest(const NotifyTraderAccountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_notif()) {
    notif_ = new ::vega::NotifyTraderAccount(*from.notif_);
  } else {
    notif_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.NotifyTraderAccountRequest)
}

void NotifyTraderAccountRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NotifyTraderAccountRequest_proto_2fapi_2ftrading_2eproto.base);
  notif_ = nullptr;
}

NotifyTraderAccountRequest::~NotifyTraderAccountRequest() {
  // @@protoc_insertion_point(destructor:api.NotifyTraderAccountRequest)
  SharedDtor();
}

void NotifyTraderAccountRequest::SharedDtor() {
  if (this != internal_default_instance()) delete notif_;
}

void NotifyTraderAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotifyTraderAccountRequest& NotifyTraderAccountRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NotifyTraderAccountRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void NotifyTraderAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.NotifyTraderAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && notif_ != nullptr) {
    delete notif_;
  }
  notif_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NotifyTraderAccountRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NotifyTraderAccountRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.NotifyTraderAccount notif = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::NotifyTraderAccount::_InternalParse;
        object = msg->mutable_notif();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NotifyTraderAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.NotifyTraderAccountRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.NotifyTraderAccount notif = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_notif()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.NotifyTraderAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.NotifyTraderAccountRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NotifyTraderAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.NotifyTraderAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.NotifyTraderAccount notif = 1;
  if (this->has_notif()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::notif(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.NotifyTraderAccountRequest)
}

::google::protobuf::uint8* NotifyTraderAccountRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.NotifyTraderAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.NotifyTraderAccount notif = 1;
  if (this->has_notif()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::notif(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.NotifyTraderAccountRequest)
  return target;
}

size_t NotifyTraderAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.NotifyTraderAccountRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.NotifyTraderAccount notif = 1;
  if (this->has_notif()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *notif_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyTraderAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.NotifyTraderAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyTraderAccountRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NotifyTraderAccountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.NotifyTraderAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.NotifyTraderAccountRequest)
    MergeFrom(*source);
  }
}

void NotifyTraderAccountRequest::MergeFrom(const NotifyTraderAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.NotifyTraderAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_notif()) {
    mutable_notif()->::vega::NotifyTraderAccount::MergeFrom(from.notif());
  }
}

void NotifyTraderAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.NotifyTraderAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyTraderAccountRequest::CopyFrom(const NotifyTraderAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.NotifyTraderAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyTraderAccountRequest::IsInitialized() const {
  return true;
}

void NotifyTraderAccountRequest::Swap(NotifyTraderAccountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyTraderAccountRequest::InternalSwap(NotifyTraderAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(notif_, other->notif_);
}

::google::protobuf::Metadata NotifyTraderAccountRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NotifyTraderAccountResponse::InitAsDefaultInstance() {
}
class NotifyTraderAccountResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyTraderAccountResponse::kSubmittedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyTraderAccountResponse::NotifyTraderAccountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.NotifyTraderAccountResponse)
}
NotifyTraderAccountResponse::NotifyTraderAccountResponse(const NotifyTraderAccountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  submitted_ = from.submitted_;
  // @@protoc_insertion_point(copy_constructor:api.NotifyTraderAccountResponse)
}

void NotifyTraderAccountResponse::SharedCtor() {
  submitted_ = false;
}

NotifyTraderAccountResponse::~NotifyTraderAccountResponse() {
  // @@protoc_insertion_point(destructor:api.NotifyTraderAccountResponse)
  SharedDtor();
}

void NotifyTraderAccountResponse::SharedDtor() {
}

void NotifyTraderAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotifyTraderAccountResponse& NotifyTraderAccountResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NotifyTraderAccountResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void NotifyTraderAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.NotifyTraderAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  submitted_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NotifyTraderAccountResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NotifyTraderAccountResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool submitted = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_submitted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NotifyTraderAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.NotifyTraderAccountResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool submitted = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &submitted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.NotifyTraderAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.NotifyTraderAccountResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NotifyTraderAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.NotifyTraderAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool submitted = 1;
  if (this->submitted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->submitted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.NotifyTraderAccountResponse)
}

::google::protobuf::uint8* NotifyTraderAccountResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.NotifyTraderAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool submitted = 1;
  if (this->submitted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->submitted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.NotifyTraderAccountResponse)
  return target;
}

size_t NotifyTraderAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.NotifyTraderAccountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool submitted = 1;
  if (this->submitted() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyTraderAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.NotifyTraderAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyTraderAccountResponse* source =
      ::google::protobuf::DynamicCastToGenerated<NotifyTraderAccountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.NotifyTraderAccountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.NotifyTraderAccountResponse)
    MergeFrom(*source);
  }
}

void NotifyTraderAccountResponse::MergeFrom(const NotifyTraderAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.NotifyTraderAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.submitted() != 0) {
    set_submitted(from.submitted());
  }
}

void NotifyTraderAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.NotifyTraderAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyTraderAccountResponse::CopyFrom(const NotifyTraderAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.NotifyTraderAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyTraderAccountResponse::IsInitialized() const {
  return true;
}

void NotifyTraderAccountResponse::Swap(NotifyTraderAccountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyTraderAccountResponse::InternalSwap(NotifyTraderAccountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(submitted_, other->submitted_);
}

::google::protobuf::Metadata NotifyTraderAccountResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrepareSubmitOrderResponse::InitAsDefaultInstance() {
}
class PrepareSubmitOrderResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareSubmitOrderResponse::kBlobFieldNumber;
const int PrepareSubmitOrderResponse::kSubmitIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareSubmitOrderResponse::PrepareSubmitOrderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PrepareSubmitOrderResponse)
}
PrepareSubmitOrderResponse::PrepareSubmitOrderResponse(const PrepareSubmitOrderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blob().size() > 0) {
    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  submitid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.submitid().size() > 0) {
    submitid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.submitid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareSubmitOrderResponse)
}

void PrepareSubmitOrderResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrepareSubmitOrderResponse_proto_2fapi_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  submitid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PrepareSubmitOrderResponse::~PrepareSubmitOrderResponse() {
  // @@protoc_insertion_point(destructor:api.PrepareSubmitOrderResponse)
  SharedDtor();
}

void PrepareSubmitOrderResponse::SharedDtor() {
  blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  submitid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrepareSubmitOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareSubmitOrderResponse& PrepareSubmitOrderResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrepareSubmitOrderResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareSubmitOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareSubmitOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  submitid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrepareSubmitOrderResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrepareSubmitOrderResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes blob = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_blob();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string submitID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.PrepareSubmitOrderResponse.submitID");
        object = msg->mutable_submitid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrepareSubmitOrderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PrepareSubmitOrderResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes blob = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string submitID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_submitid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->submitid().data(), static_cast<int>(this->submitid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.PrepareSubmitOrderResponse.submitID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PrepareSubmitOrderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PrepareSubmitOrderResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrepareSubmitOrderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PrepareSubmitOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1;
  if (this->blob().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->blob(), output);
  }

  // string submitID = 2;
  if (this->submitid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->submitid().data(), static_cast<int>(this->submitid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PrepareSubmitOrderResponse.submitID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->submitid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PrepareSubmitOrderResponse)
}

::google::protobuf::uint8* PrepareSubmitOrderResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareSubmitOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1;
  if (this->blob().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->blob(), target);
  }

  // string submitID = 2;
  if (this->submitid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->submitid().data(), static_cast<int>(this->submitid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PrepareSubmitOrderResponse.submitID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->submitid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareSubmitOrderResponse)
  return target;
}

size_t PrepareSubmitOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareSubmitOrderResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1;
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->blob());
  }

  // string submitID = 2;
  if (this->submitid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->submitid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareSubmitOrderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareSubmitOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareSubmitOrderResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PrepareSubmitOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareSubmitOrderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareSubmitOrderResponse)
    MergeFrom(*source);
  }
}

void PrepareSubmitOrderResponse::MergeFrom(const PrepareSubmitOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareSubmitOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {

    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  if (from.submitid().size() > 0) {

    submitid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.submitid_);
  }
}

void PrepareSubmitOrderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareSubmitOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareSubmitOrderResponse::CopyFrom(const PrepareSubmitOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareSubmitOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareSubmitOrderResponse::IsInitialized() const {
  return true;
}

void PrepareSubmitOrderResponse::Swap(PrepareSubmitOrderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareSubmitOrderResponse::InternalSwap(PrepareSubmitOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  submitid_.Swap(&other->submitid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PrepareSubmitOrderResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrepareCancelOrderResponse::InitAsDefaultInstance() {
}
class PrepareCancelOrderResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareCancelOrderResponse::kBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareCancelOrderResponse::PrepareCancelOrderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PrepareCancelOrderResponse)
}
PrepareCancelOrderResponse::PrepareCancelOrderResponse(const PrepareCancelOrderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blob().size() > 0) {
    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareCancelOrderResponse)
}

void PrepareCancelOrderResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrepareCancelOrderResponse_proto_2fapi_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PrepareCancelOrderResponse::~PrepareCancelOrderResponse() {
  // @@protoc_insertion_point(destructor:api.PrepareCancelOrderResponse)
  SharedDtor();
}

void PrepareCancelOrderResponse::SharedDtor() {
  blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrepareCancelOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareCancelOrderResponse& PrepareCancelOrderResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrepareCancelOrderResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareCancelOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareCancelOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrepareCancelOrderResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrepareCancelOrderResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes blob = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_blob();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrepareCancelOrderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PrepareCancelOrderResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes blob = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PrepareCancelOrderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PrepareCancelOrderResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrepareCancelOrderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PrepareCancelOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1;
  if (this->blob().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->blob(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PrepareCancelOrderResponse)
}

::google::protobuf::uint8* PrepareCancelOrderResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareCancelOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1;
  if (this->blob().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->blob(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareCancelOrderResponse)
  return target;
}

size_t PrepareCancelOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareCancelOrderResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1;
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->blob());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareCancelOrderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareCancelOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareCancelOrderResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PrepareCancelOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareCancelOrderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareCancelOrderResponse)
    MergeFrom(*source);
  }
}

void PrepareCancelOrderResponse::MergeFrom(const PrepareCancelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareCancelOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {

    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
}

void PrepareCancelOrderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareCancelOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareCancelOrderResponse::CopyFrom(const PrepareCancelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareCancelOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareCancelOrderResponse::IsInitialized() const {
  return true;
}

void PrepareCancelOrderResponse::Swap(PrepareCancelOrderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareCancelOrderResponse::InternalSwap(PrepareCancelOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PrepareCancelOrderResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrepareAmendOrderResponse::InitAsDefaultInstance() {
}
class PrepareAmendOrderResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareAmendOrderResponse::kBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareAmendOrderResponse::PrepareAmendOrderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PrepareAmendOrderResponse)
}
PrepareAmendOrderResponse::PrepareAmendOrderResponse(const PrepareAmendOrderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blob().size() > 0) {
    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareAmendOrderResponse)
}

void PrepareAmendOrderResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrepareAmendOrderResponse_proto_2fapi_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PrepareAmendOrderResponse::~PrepareAmendOrderResponse() {
  // @@protoc_insertion_point(destructor:api.PrepareAmendOrderResponse)
  SharedDtor();
}

void PrepareAmendOrderResponse::SharedDtor() {
  blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrepareAmendOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareAmendOrderResponse& PrepareAmendOrderResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrepareAmendOrderResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareAmendOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareAmendOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrepareAmendOrderResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrepareAmendOrderResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes blob = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_blob();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrepareAmendOrderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PrepareAmendOrderResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes blob = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PrepareAmendOrderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PrepareAmendOrderResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrepareAmendOrderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PrepareAmendOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1;
  if (this->blob().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->blob(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PrepareAmendOrderResponse)
}

::google::protobuf::uint8* PrepareAmendOrderResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareAmendOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1;
  if (this->blob().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->blob(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareAmendOrderResponse)
  return target;
}

size_t PrepareAmendOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareAmendOrderResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1;
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->blob());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareAmendOrderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareAmendOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareAmendOrderResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PrepareAmendOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareAmendOrderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareAmendOrderResponse)
    MergeFrom(*source);
  }
}

void PrepareAmendOrderResponse::MergeFrom(const PrepareAmendOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareAmendOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {

    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
}

void PrepareAmendOrderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareAmendOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareAmendOrderResponse::CopyFrom(const PrepareAmendOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareAmendOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareAmendOrderResponse::IsInitialized() const {
  return true;
}

void PrepareAmendOrderResponse::Swap(PrepareAmendOrderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareAmendOrderResponse::InternalSwap(PrepareAmendOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PrepareAmendOrderResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SubmitOrderRequest::InitAsDefaultInstance() {
  ::api::_SubmitOrderRequest_default_instance_._instance.get_mutable()->submission_ = const_cast< ::vega::OrderSubmission*>(
      ::vega::OrderSubmission::internal_default_instance());
}
class SubmitOrderRequest::HasBitSetters {
 public:
  static const ::vega::OrderSubmission& submission(const SubmitOrderRequest* msg);
};

const ::vega::OrderSubmission&
SubmitOrderRequest::HasBitSetters::submission(const SubmitOrderRequest* msg) {
  return *msg->submission_;
}
void SubmitOrderRequest::clear_submission() {
  if (GetArenaNoVirtual() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitOrderRequest::kSubmissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitOrderRequest::SubmitOrderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.SubmitOrderRequest)
}
SubmitOrderRequest::SubmitOrderRequest(const SubmitOrderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_submission()) {
    submission_ = new ::vega::OrderSubmission(*from.submission_);
  } else {
    submission_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.SubmitOrderRequest)
}

void SubmitOrderRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SubmitOrderRequest_proto_2fapi_2ftrading_2eproto.base);
  submission_ = nullptr;
}

SubmitOrderRequest::~SubmitOrderRequest() {
  // @@protoc_insertion_point(destructor:api.SubmitOrderRequest)
  SharedDtor();
}

void SubmitOrderRequest::SharedDtor() {
  if (this != internal_default_instance()) delete submission_;
}

void SubmitOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitOrderRequest& SubmitOrderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubmitOrderRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void SubmitOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.SubmitOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubmitOrderRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubmitOrderRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.OrderSubmission submission = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::OrderSubmission::_InternalParse;
        object = msg->mutable_submission();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubmitOrderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.SubmitOrderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.OrderSubmission submission = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_submission()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.SubmitOrderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.SubmitOrderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubmitOrderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.SubmitOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.OrderSubmission submission = 1;
  if (this->has_submission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::submission(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.SubmitOrderRequest)
}

::google::protobuf::uint8* SubmitOrderRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.SubmitOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.OrderSubmission submission = 1;
  if (this->has_submission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::submission(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.SubmitOrderRequest)
  return target;
}

size_t SubmitOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.SubmitOrderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.OrderSubmission submission = 1;
  if (this->has_submission()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *submission_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitOrderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.SubmitOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitOrderRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SubmitOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.SubmitOrderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.SubmitOrderRequest)
    MergeFrom(*source);
  }
}

void SubmitOrderRequest::MergeFrom(const SubmitOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.SubmitOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submission()) {
    mutable_submission()->::vega::OrderSubmission::MergeFrom(from.submission());
  }
}

void SubmitOrderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.SubmitOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitOrderRequest::CopyFrom(const SubmitOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.SubmitOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitOrderRequest::IsInitialized() const {
  return true;
}

void SubmitOrderRequest::Swap(SubmitOrderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitOrderRequest::InternalSwap(SubmitOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(submission_, other->submission_);
}

::google::protobuf::Metadata SubmitOrderRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CancelOrderRequest::InitAsDefaultInstance() {
  ::api::_CancelOrderRequest_default_instance_._instance.get_mutable()->cancellation_ = const_cast< ::vega::OrderCancellation*>(
      ::vega::OrderCancellation::internal_default_instance());
}
class CancelOrderRequest::HasBitSetters {
 public:
  static const ::vega::OrderCancellation& cancellation(const CancelOrderRequest* msg);
};

const ::vega::OrderCancellation&
CancelOrderRequest::HasBitSetters::cancellation(const CancelOrderRequest* msg) {
  return *msg->cancellation_;
}
void CancelOrderRequest::clear_cancellation() {
  if (GetArenaNoVirtual() == nullptr && cancellation_ != nullptr) {
    delete cancellation_;
  }
  cancellation_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelOrderRequest::kCancellationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelOrderRequest::CancelOrderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.CancelOrderRequest)
}
CancelOrderRequest::CancelOrderRequest(const CancelOrderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cancellation()) {
    cancellation_ = new ::vega::OrderCancellation(*from.cancellation_);
  } else {
    cancellation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.CancelOrderRequest)
}

void CancelOrderRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CancelOrderRequest_proto_2fapi_2ftrading_2eproto.base);
  cancellation_ = nullptr;
}

CancelOrderRequest::~CancelOrderRequest() {
  // @@protoc_insertion_point(destructor:api.CancelOrderRequest)
  SharedDtor();
}

void CancelOrderRequest::SharedDtor() {
  if (this != internal_default_instance()) delete cancellation_;
}

void CancelOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelOrderRequest& CancelOrderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CancelOrderRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void CancelOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.CancelOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && cancellation_ != nullptr) {
    delete cancellation_;
  }
  cancellation_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CancelOrderRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CancelOrderRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.OrderCancellation cancellation = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::OrderCancellation::_InternalParse;
        object = msg->mutable_cancellation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CancelOrderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.CancelOrderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.OrderCancellation cancellation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cancellation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.CancelOrderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.CancelOrderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CancelOrderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.CancelOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.OrderCancellation cancellation = 1;
  if (this->has_cancellation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::cancellation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.CancelOrderRequest)
}

::google::protobuf::uint8* CancelOrderRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.CancelOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.OrderCancellation cancellation = 1;
  if (this->has_cancellation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::cancellation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.CancelOrderRequest)
  return target;
}

size_t CancelOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.CancelOrderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.OrderCancellation cancellation = 1;
  if (this->has_cancellation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cancellation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelOrderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.CancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOrderRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CancelOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.CancelOrderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.CancelOrderRequest)
    MergeFrom(*source);
  }
}

void CancelOrderRequest::MergeFrom(const CancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.CancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cancellation()) {
    mutable_cancellation()->::vega::OrderCancellation::MergeFrom(from.cancellation());
  }
}

void CancelOrderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.CancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrderRequest::CopyFrom(const CancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.CancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrderRequest::IsInitialized() const {
  return true;
}

void CancelOrderRequest::Swap(CancelOrderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelOrderRequest::InternalSwap(CancelOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cancellation_, other->cancellation_);
}

::google::protobuf::Metadata CancelOrderRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AmendOrderRequest::InitAsDefaultInstance() {
  ::api::_AmendOrderRequest_default_instance_._instance.get_mutable()->amendment_ = const_cast< ::vega::OrderAmendment*>(
      ::vega::OrderAmendment::internal_default_instance());
}
class AmendOrderRequest::HasBitSetters {
 public:
  static const ::vega::OrderAmendment& amendment(const AmendOrderRequest* msg);
};

const ::vega::OrderAmendment&
AmendOrderRequest::HasBitSetters::amendment(const AmendOrderRequest* msg) {
  return *msg->amendment_;
}
void AmendOrderRequest::clear_amendment() {
  if (GetArenaNoVirtual() == nullptr && amendment_ != nullptr) {
    delete amendment_;
  }
  amendment_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AmendOrderRequest::kAmendmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AmendOrderRequest::AmendOrderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.AmendOrderRequest)
}
AmendOrderRequest::AmendOrderRequest(const AmendOrderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_amendment()) {
    amendment_ = new ::vega::OrderAmendment(*from.amendment_);
  } else {
    amendment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.AmendOrderRequest)
}

void AmendOrderRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AmendOrderRequest_proto_2fapi_2ftrading_2eproto.base);
  amendment_ = nullptr;
}

AmendOrderRequest::~AmendOrderRequest() {
  // @@protoc_insertion_point(destructor:api.AmendOrderRequest)
  SharedDtor();
}

void AmendOrderRequest::SharedDtor() {
  if (this != internal_default_instance()) delete amendment_;
}

void AmendOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmendOrderRequest& AmendOrderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AmendOrderRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AmendOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.AmendOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && amendment_ != nullptr) {
    delete amendment_;
  }
  amendment_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AmendOrderRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AmendOrderRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.OrderAmendment amendment = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::OrderAmendment::_InternalParse;
        object = msg->mutable_amendment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AmendOrderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.AmendOrderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.OrderAmendment amendment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_amendment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.AmendOrderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.AmendOrderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AmendOrderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.AmendOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.OrderAmendment amendment = 1;
  if (this->has_amendment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::amendment(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.AmendOrderRequest)
}

::google::protobuf::uint8* AmendOrderRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.AmendOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.OrderAmendment amendment = 1;
  if (this->has_amendment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::amendment(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.AmendOrderRequest)
  return target;
}

size_t AmendOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.AmendOrderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.OrderAmendment amendment = 1;
  if (this->has_amendment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *amendment_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmendOrderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.AmendOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AmendOrderRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AmendOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.AmendOrderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.AmendOrderRequest)
    MergeFrom(*source);
  }
}

void AmendOrderRequest::MergeFrom(const AmendOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.AmendOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_amendment()) {
    mutable_amendment()->::vega::OrderAmendment::MergeFrom(from.amendment());
  }
}

void AmendOrderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.AmendOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmendOrderRequest::CopyFrom(const AmendOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.AmendOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmendOrderRequest::IsInitialized() const {
  return true;
}

void AmendOrderRequest::Swap(AmendOrderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AmendOrderRequest::InternalSwap(AmendOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amendment_, other->amendment_);
}

::google::protobuf::Metadata AmendOrderRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AssetsRequest::InitAsDefaultInstance() {
}
class AssetsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AssetsRequest::AssetsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.AssetsRequest)
}
AssetsRequest::AssetsRequest(const AssetsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.AssetsRequest)
}

void AssetsRequest::SharedCtor() {
}

AssetsRequest::~AssetsRequest() {
  // @@protoc_insertion_point(destructor:api.AssetsRequest)
  SharedDtor();
}

void AssetsRequest::SharedDtor() {
}

void AssetsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetsRequest& AssetsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AssetsRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AssetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.AssetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AssetsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AssetsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AssetsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.AssetsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:api.AssetsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.AssetsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AssetsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.AssetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.AssetsRequest)
}

::google::protobuf::uint8* AssetsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.AssetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.AssetsRequest)
  return target;
}

size_t AssetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.AssetsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.AssetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AssetsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.AssetsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.AssetsRequest)
    MergeFrom(*source);
  }
}

void AssetsRequest::MergeFrom(const AssetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.AssetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AssetsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.AssetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetsRequest::CopyFrom(const AssetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.AssetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetsRequest::IsInitialized() const {
  return true;
}

void AssetsRequest::Swap(AssetsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AssetsRequest::InternalSwap(AssetsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AssetsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AssetsResponse::InitAsDefaultInstance() {
}
class AssetsResponse::HasBitSetters {
 public:
};

void AssetsResponse::clear_assets() {
  assets_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AssetsResponse::kAssetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AssetsResponse::AssetsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.AssetsResponse)
}
AssetsResponse::AssetsResponse(const AssetsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      assets_(from.assets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.AssetsResponse)
}

void AssetsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AssetsResponse_proto_2fapi_2ftrading_2eproto.base);
}

AssetsResponse::~AssetsResponse() {
  // @@protoc_insertion_point(destructor:api.AssetsResponse)
  SharedDtor();
}

void AssetsResponse::SharedDtor() {
}

void AssetsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetsResponse& AssetsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AssetsResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AssetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.AssetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assets_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AssetsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AssetsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Asset assets = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Asset::_InternalParse;
          object = msg->add_assets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AssetsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.AssetsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Asset assets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_assets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.AssetsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.AssetsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AssetsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.AssetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Asset assets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->assets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.AssetsResponse)
}

::google::protobuf::uint8* AssetsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.AssetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Asset assets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->assets(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.AssetsResponse)
  return target;
}

size_t AssetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.AssetsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Asset assets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->assets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->assets(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.AssetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AssetsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.AssetsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.AssetsResponse)
    MergeFrom(*source);
  }
}

void AssetsResponse::MergeFrom(const AssetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.AssetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assets_.MergeFrom(from.assets_);
}

void AssetsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.AssetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetsResponse::CopyFrom(const AssetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.AssetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetsResponse::IsInitialized() const {
  return true;
}

void AssetsResponse::Swap(AssetsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AssetsResponse::InternalSwap(AssetsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&assets_)->InternalSwap(CastToBase(&other->assets_));
}

::google::protobuf::Metadata AssetsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AssetByIDRequest::InitAsDefaultInstance() {
}
class AssetByIDRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AssetByIDRequest::kIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AssetByIDRequest::AssetByIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.AssetByIDRequest)
}
AssetByIDRequest::AssetByIDRequest(const AssetByIDRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:api.AssetByIDRequest)
}

void AssetByIDRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AssetByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AssetByIDRequest::~AssetByIDRequest() {
  // @@protoc_insertion_point(destructor:api.AssetByIDRequest)
  SharedDtor();
}

void AssetByIDRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AssetByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetByIDRequest& AssetByIDRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AssetByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AssetByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.AssetByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AssetByIDRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AssetByIDRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.AssetByIDRequest.ID");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AssetByIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.AssetByIDRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.AssetByIDRequest.ID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.AssetByIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.AssetByIDRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AssetByIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.AssetByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AssetByIDRequest.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.AssetByIDRequest)
}

::google::protobuf::uint8* AssetByIDRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.AssetByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AssetByIDRequest.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.AssetByIDRequest)
  return target;
}

size_t AssetByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.AssetByIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetByIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.AssetByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetByIDRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AssetByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.AssetByIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.AssetByIDRequest)
    MergeFrom(*source);
  }
}

void AssetByIDRequest::MergeFrom(const AssetByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.AssetByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void AssetByIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.AssetByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetByIDRequest::CopyFrom(const AssetByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.AssetByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetByIDRequest::IsInitialized() const {
  return true;
}

void AssetByIDRequest::Swap(AssetByIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AssetByIDRequest::InternalSwap(AssetByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata AssetByIDRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AssetByIDResponse::InitAsDefaultInstance() {
  ::api::_AssetByIDResponse_default_instance_._instance.get_mutable()->asset_ = const_cast< ::vega::Asset*>(
      ::vega::Asset::internal_default_instance());
}
class AssetByIDResponse::HasBitSetters {
 public:
  static const ::vega::Asset& asset(const AssetByIDResponse* msg);
};

const ::vega::Asset&
AssetByIDResponse::HasBitSetters::asset(const AssetByIDResponse* msg) {
  return *msg->asset_;
}
void AssetByIDResponse::clear_asset() {
  if (GetArenaNoVirtual() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AssetByIDResponse::kAssetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AssetByIDResponse::AssetByIDResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.AssetByIDResponse)
}
AssetByIDResponse::AssetByIDResponse(const AssetByIDResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_asset()) {
    asset_ = new ::vega::Asset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.AssetByIDResponse)
}

void AssetByIDResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AssetByIDResponse_proto_2fapi_2ftrading_2eproto.base);
  asset_ = nullptr;
}

AssetByIDResponse::~AssetByIDResponse() {
  // @@protoc_insertion_point(destructor:api.AssetByIDResponse)
  SharedDtor();
}

void AssetByIDResponse::SharedDtor() {
  if (this != internal_default_instance()) delete asset_;
}

void AssetByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetByIDResponse& AssetByIDResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AssetByIDResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AssetByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.AssetByIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AssetByIDResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AssetByIDResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Asset asset = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Asset::_InternalParse;
        object = msg->mutable_asset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AssetByIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.AssetByIDResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Asset asset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_asset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.AssetByIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.AssetByIDResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AssetByIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.AssetByIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Asset asset = 1;
  if (this->has_asset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::asset(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.AssetByIDResponse)
}

::google::protobuf::uint8* AssetByIDResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.AssetByIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Asset asset = 1;
  if (this->has_asset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::asset(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.AssetByIDResponse)
  return target;
}

size_t AssetByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.AssetByIDResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Asset asset = 1;
  if (this->has_asset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetByIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.AssetByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetByIDResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AssetByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.AssetByIDResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.AssetByIDResponse)
    MergeFrom(*source);
  }
}

void AssetByIDResponse::MergeFrom(const AssetByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.AssetByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_asset()) {
    mutable_asset()->::vega::Asset::MergeFrom(from.asset());
  }
}

void AssetByIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.AssetByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetByIDResponse::CopyFrom(const AssetByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.AssetByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetByIDResponse::IsInitialized() const {
  return true;
}

void AssetByIDResponse::Swap(AssetByIDResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AssetByIDResponse::InternalSwap(AssetByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(asset_, other->asset_);
}

::google::protobuf::Metadata AssetByIDResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetNodeSignaturesAggregateRequest::InitAsDefaultInstance() {
}
class GetNodeSignaturesAggregateRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeSignaturesAggregateRequest::kIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeSignaturesAggregateRequest::GetNodeSignaturesAggregateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetNodeSignaturesAggregateRequest)
}
GetNodeSignaturesAggregateRequest::GetNodeSignaturesAggregateRequest(const GetNodeSignaturesAggregateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:api.GetNodeSignaturesAggregateRequest)
}

void GetNodeSignaturesAggregateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetNodeSignaturesAggregateRequest_proto_2fapi_2ftrading_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetNodeSignaturesAggregateRequest::~GetNodeSignaturesAggregateRequest() {
  // @@protoc_insertion_point(destructor:api.GetNodeSignaturesAggregateRequest)
  SharedDtor();
}

void GetNodeSignaturesAggregateRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetNodeSignaturesAggregateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNodeSignaturesAggregateRequest& GetNodeSignaturesAggregateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetNodeSignaturesAggregateRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNodeSignaturesAggregateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNodeSignaturesAggregateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetNodeSignaturesAggregateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetNodeSignaturesAggregateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.GetNodeSignaturesAggregateRequest.ID");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetNodeSignaturesAggregateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetNodeSignaturesAggregateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.GetNodeSignaturesAggregateRequest.ID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetNodeSignaturesAggregateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetNodeSignaturesAggregateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetNodeSignaturesAggregateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetNodeSignaturesAggregateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.GetNodeSignaturesAggregateRequest.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetNodeSignaturesAggregateRequest)
}

::google::protobuf::uint8* GetNodeSignaturesAggregateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNodeSignaturesAggregateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.GetNodeSignaturesAggregateRequest.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNodeSignaturesAggregateRequest)
  return target;
}

size_t GetNodeSignaturesAggregateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNodeSignaturesAggregateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNodeSignaturesAggregateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNodeSignaturesAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeSignaturesAggregateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetNodeSignaturesAggregateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNodeSignaturesAggregateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNodeSignaturesAggregateRequest)
    MergeFrom(*source);
  }
}

void GetNodeSignaturesAggregateRequest::MergeFrom(const GetNodeSignaturesAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNodeSignaturesAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void GetNodeSignaturesAggregateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNodeSignaturesAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeSignaturesAggregateRequest::CopyFrom(const GetNodeSignaturesAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNodeSignaturesAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeSignaturesAggregateRequest::IsInitialized() const {
  return true;
}

void GetNodeSignaturesAggregateRequest::Swap(GetNodeSignaturesAggregateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeSignaturesAggregateRequest::InternalSwap(GetNodeSignaturesAggregateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetNodeSignaturesAggregateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetNodeSignaturesAggregateResponse::InitAsDefaultInstance() {
}
class GetNodeSignaturesAggregateResponse::HasBitSetters {
 public:
};

void GetNodeSignaturesAggregateResponse::clear_signatures() {
  signatures_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodeSignaturesAggregateResponse::kSignaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodeSignaturesAggregateResponse::GetNodeSignaturesAggregateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetNodeSignaturesAggregateResponse)
}
GetNodeSignaturesAggregateResponse::GetNodeSignaturesAggregateResponse(const GetNodeSignaturesAggregateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetNodeSignaturesAggregateResponse)
}

void GetNodeSignaturesAggregateResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetNodeSignaturesAggregateResponse_proto_2fapi_2ftrading_2eproto.base);
}

GetNodeSignaturesAggregateResponse::~GetNodeSignaturesAggregateResponse() {
  // @@protoc_insertion_point(destructor:api.GetNodeSignaturesAggregateResponse)
  SharedDtor();
}

void GetNodeSignaturesAggregateResponse::SharedDtor() {
}

void GetNodeSignaturesAggregateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNodeSignaturesAggregateResponse& GetNodeSignaturesAggregateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetNodeSignaturesAggregateResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNodeSignaturesAggregateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNodeSignaturesAggregateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetNodeSignaturesAggregateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetNodeSignaturesAggregateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.NodeSignature signatures = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::NodeSignature::_InternalParse;
          object = msg->add_signatures();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetNodeSignaturesAggregateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetNodeSignaturesAggregateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.NodeSignature signatures = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_signatures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetNodeSignaturesAggregateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetNodeSignaturesAggregateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetNodeSignaturesAggregateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetNodeSignaturesAggregateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.NodeSignature signatures = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signatures_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->signatures(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetNodeSignaturesAggregateResponse)
}

::google::protobuf::uint8* GetNodeSignaturesAggregateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNodeSignaturesAggregateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.NodeSignature signatures = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signatures_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->signatures(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNodeSignaturesAggregateResponse)
  return target;
}

size_t GetNodeSignaturesAggregateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNodeSignaturesAggregateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.NodeSignature signatures = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->signatures_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signatures(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNodeSignaturesAggregateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNodeSignaturesAggregateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeSignaturesAggregateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetNodeSignaturesAggregateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNodeSignaturesAggregateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNodeSignaturesAggregateResponse)
    MergeFrom(*source);
  }
}

void GetNodeSignaturesAggregateResponse::MergeFrom(const GetNodeSignaturesAggregateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNodeSignaturesAggregateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
}

void GetNodeSignaturesAggregateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNodeSignaturesAggregateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeSignaturesAggregateResponse::CopyFrom(const GetNodeSignaturesAggregateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNodeSignaturesAggregateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeSignaturesAggregateResponse::IsInitialized() const {
  return true;
}

void GetNodeSignaturesAggregateResponse::Swap(GetNodeSignaturesAggregateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodeSignaturesAggregateResponse::InternalSwap(GetNodeSignaturesAggregateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&signatures_)->InternalSwap(CastToBase(&other->signatures_));
}

::google::protobuf::Metadata GetNodeSignaturesAggregateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OptionalProposalState::InitAsDefaultInstance() {
}
class OptionalProposalState::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionalProposalState::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionalProposalState::OptionalProposalState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.OptionalProposalState)
}
OptionalProposalState::OptionalProposalState(const OptionalProposalState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:api.OptionalProposalState)
}

void OptionalProposalState::SharedCtor() {
  value_ = 0;
}

OptionalProposalState::~OptionalProposalState() {
  // @@protoc_insertion_point(destructor:api.OptionalProposalState)
  SharedDtor();
}

void OptionalProposalState::SharedDtor() {
}

void OptionalProposalState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionalProposalState& OptionalProposalState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OptionalProposalState_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OptionalProposalState::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OptionalProposalState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OptionalProposalState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OptionalProposalState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Proposal.State value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_value(static_cast<::vega::Proposal_State>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OptionalProposalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.OptionalProposalState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Proposal.State value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value(static_cast< ::vega::Proposal_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.OptionalProposalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.OptionalProposalState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OptionalProposalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.OptionalProposalState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Proposal.State value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.OptionalProposalState)
}

::google::protobuf::uint8* OptionalProposalState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OptionalProposalState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Proposal.State value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OptionalProposalState)
  return target;
}

size_t OptionalProposalState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OptionalProposalState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Proposal.State value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionalProposalState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OptionalProposalState)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionalProposalState* source =
      ::google::protobuf::DynamicCastToGenerated<OptionalProposalState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OptionalProposalState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OptionalProposalState)
    MergeFrom(*source);
  }
}

void OptionalProposalState::MergeFrom(const OptionalProposalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OptionalProposalState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void OptionalProposalState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OptionalProposalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionalProposalState::CopyFrom(const OptionalProposalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OptionalProposalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalProposalState::IsInitialized() const {
  return true;
}

void OptionalProposalState::Swap(OptionalProposalState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionalProposalState::InternalSwap(OptionalProposalState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata OptionalProposalState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetProposalsRequest::InitAsDefaultInstance() {
  ::api::_GetProposalsRequest_default_instance_._instance.get_mutable()->selectinstate_ = const_cast< ::api::OptionalProposalState*>(
      ::api::OptionalProposalState::internal_default_instance());
}
class GetProposalsRequest::HasBitSetters {
 public:
  static const ::api::OptionalProposalState& selectinstate(const GetProposalsRequest* msg);
};

const ::api::OptionalProposalState&
GetProposalsRequest::HasBitSetters::selectinstate(const GetProposalsRequest* msg) {
  return *msg->selectinstate_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetProposalsRequest::kSelectInStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetProposalsRequest::GetProposalsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetProposalsRequest)
}
GetProposalsRequest::GetProposalsRequest(const GetProposalsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selectinstate()) {
    selectinstate_ = new ::api::OptionalProposalState(*from.selectinstate_);
  } else {
    selectinstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetProposalsRequest)
}

void GetProposalsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  selectinstate_ = nullptr;
}

GetProposalsRequest::~GetProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.GetProposalsRequest)
  SharedDtor();
}

void GetProposalsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete selectinstate_;
}

void GetProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalsRequest& GetProposalsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetProposalsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetProposalsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .api.OptionalProposalState selectInState = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::OptionalProposalState::_InternalParse;
        object = msg->mutable_selectinstate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetProposalsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetProposalsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .api.OptionalProposalState selectInState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selectinstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetProposalsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetProposalsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetProposalsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1;
  if (this->has_selectinstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::selectinstate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetProposalsRequest)
}

::google::protobuf::uint8* GetProposalsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1;
  if (this->has_selectinstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::selectinstate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalsRequest)
  return target;
}

size_t GetProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1;
  if (this->has_selectinstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selectinstate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalsRequest)
    MergeFrom(*source);
  }
}

void GetProposalsRequest::MergeFrom(const GetProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selectinstate()) {
    mutable_selectinstate()->::api::OptionalProposalState::MergeFrom(from.selectinstate());
  }
}

void GetProposalsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalsRequest::CopyFrom(const GetProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalsRequest::IsInitialized() const {
  return true;
}

void GetProposalsRequest::Swap(GetProposalsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetProposalsRequest::InternalSwap(GetProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(selectinstate_, other->selectinstate_);
}

::google::protobuf::Metadata GetProposalsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetProposalsResponse::InitAsDefaultInstance() {
}
class GetProposalsResponse::HasBitSetters {
 public:
};

void GetProposalsResponse::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetProposalsResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetProposalsResponse::GetProposalsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetProposalsResponse)
}
GetProposalsResponse::GetProposalsResponse(const GetProposalsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetProposalsResponse)
}

void GetProposalsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetProposalsResponse_proto_2fapi_2ftrading_2eproto.base);
}

GetProposalsResponse::~GetProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.GetProposalsResponse)
  SharedDtor();
}

void GetProposalsResponse::SharedDtor() {
}

void GetProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalsResponse& GetProposalsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetProposalsResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetProposalsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetProposalsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::GovernanceData::_InternalParse;
          object = msg->add_data();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetProposalsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetProposalsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetProposalsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetProposalsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetProposalsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetProposalsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetProposalsResponse)
}

::google::protobuf::uint8* GetProposalsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalsResponse)
  return target;
}

size_t GetProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalsResponse)
    MergeFrom(*source);
  }
}

void GetProposalsResponse::MergeFrom(const GetProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetProposalsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalsResponse::CopyFrom(const GetProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalsResponse::IsInitialized() const {
  return true;
}

void GetProposalsResponse::Swap(GetProposalsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetProposalsResponse::InternalSwap(GetProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
}

::google::protobuf::Metadata GetProposalsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetProposalsByPartyRequest::InitAsDefaultInstance() {
  ::api::_GetProposalsByPartyRequest_default_instance_._instance.get_mutable()->selectinstate_ = const_cast< ::api::OptionalProposalState*>(
      ::api::OptionalProposalState::internal_default_instance());
}
class GetProposalsByPartyRequest::HasBitSetters {
 public:
  static const ::api::OptionalProposalState& selectinstate(const GetProposalsByPartyRequest* msg);
};

const ::api::OptionalProposalState&
GetProposalsByPartyRequest::HasBitSetters::selectinstate(const GetProposalsByPartyRequest* msg) {
  return *msg->selectinstate_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetProposalsByPartyRequest::kPartyIDFieldNumber;
const int GetProposalsByPartyRequest::kSelectInStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetProposalsByPartyRequest::GetProposalsByPartyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetProposalsByPartyRequest)
}
GetProposalsByPartyRequest::GetProposalsByPartyRequest(const GetProposalsByPartyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.has_selectinstate()) {
    selectinstate_ = new ::api::OptionalProposalState(*from.selectinstate_);
  } else {
    selectinstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetProposalsByPartyRequest)
}

void GetProposalsByPartyRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetProposalsByPartyRequest_proto_2fapi_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  selectinstate_ = nullptr;
}

GetProposalsByPartyRequest::~GetProposalsByPartyRequest() {
  // @@protoc_insertion_point(destructor:api.GetProposalsByPartyRequest)
  SharedDtor();
}

void GetProposalsByPartyRequest::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete selectinstate_;
}

void GetProposalsByPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalsByPartyRequest& GetProposalsByPartyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetProposalsByPartyRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalsByPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalsByPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetProposalsByPartyRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetProposalsByPartyRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.GetProposalsByPartyRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .api.OptionalProposalState selectInState = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::OptionalProposalState::_InternalParse;
        object = msg->mutable_selectinstate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetProposalsByPartyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetProposalsByPartyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.GetProposalsByPartyRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.OptionalProposalState selectInState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selectinstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetProposalsByPartyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetProposalsByPartyRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetProposalsByPartyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetProposalsByPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.GetProposalsByPartyRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  // .api.OptionalProposalState selectInState = 2;
  if (this->has_selectinstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::selectinstate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetProposalsByPartyRequest)
}

::google::protobuf::uint8* GetProposalsByPartyRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalsByPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.GetProposalsByPartyRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  // .api.OptionalProposalState selectInState = 2;
  if (this->has_selectinstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::selectinstate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalsByPartyRequest)
  return target;
}

size_t GetProposalsByPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalsByPartyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // .api.OptionalProposalState selectInState = 2;
  if (this->has_selectinstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selectinstate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalsByPartyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalsByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalsByPartyRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetProposalsByPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalsByPartyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalsByPartyRequest)
    MergeFrom(*source);
  }
}

void GetProposalsByPartyRequest::MergeFrom(const GetProposalsByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalsByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.has_selectinstate()) {
    mutable_selectinstate()->::api::OptionalProposalState::MergeFrom(from.selectinstate());
  }
}

void GetProposalsByPartyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalsByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalsByPartyRequest::CopyFrom(const GetProposalsByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalsByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalsByPartyRequest::IsInitialized() const {
  return true;
}

void GetProposalsByPartyRequest::Swap(GetProposalsByPartyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetProposalsByPartyRequest::InternalSwap(GetProposalsByPartyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(selectinstate_, other->selectinstate_);
}

::google::protobuf::Metadata GetProposalsByPartyRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetProposalsByPartyResponse::InitAsDefaultInstance() {
}
class GetProposalsByPartyResponse::HasBitSetters {
 public:
};

void GetProposalsByPartyResponse::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetProposalsByPartyResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetProposalsByPartyResponse::GetProposalsByPartyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetProposalsByPartyResponse)
}
GetProposalsByPartyResponse::GetProposalsByPartyResponse(const GetProposalsByPartyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetProposalsByPartyResponse)
}

void GetProposalsByPartyResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetProposalsByPartyResponse_proto_2fapi_2ftrading_2eproto.base);
}

GetProposalsByPartyResponse::~GetProposalsByPartyResponse() {
  // @@protoc_insertion_point(destructor:api.GetProposalsByPartyResponse)
  SharedDtor();
}

void GetProposalsByPartyResponse::SharedDtor() {
}

void GetProposalsByPartyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalsByPartyResponse& GetProposalsByPartyResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetProposalsByPartyResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalsByPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalsByPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetProposalsByPartyResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetProposalsByPartyResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::GovernanceData::_InternalParse;
          object = msg->add_data();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetProposalsByPartyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetProposalsByPartyResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetProposalsByPartyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetProposalsByPartyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetProposalsByPartyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetProposalsByPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetProposalsByPartyResponse)
}

::google::protobuf::uint8* GetProposalsByPartyResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalsByPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalsByPartyResponse)
  return target;
}

size_t GetProposalsByPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalsByPartyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalsByPartyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalsByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalsByPartyResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetProposalsByPartyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalsByPartyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalsByPartyResponse)
    MergeFrom(*source);
  }
}

void GetProposalsByPartyResponse::MergeFrom(const GetProposalsByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalsByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetProposalsByPartyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalsByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalsByPartyResponse::CopyFrom(const GetProposalsByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalsByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalsByPartyResponse::IsInitialized() const {
  return true;
}

void GetProposalsByPartyResponse::Swap(GetProposalsByPartyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetProposalsByPartyResponse::InternalSwap(GetProposalsByPartyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
}

::google::protobuf::Metadata GetProposalsByPartyResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetVotesByPartyRequest::InitAsDefaultInstance() {
}
class GetVotesByPartyRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVotesByPartyRequest::kPartyIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVotesByPartyRequest::GetVotesByPartyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetVotesByPartyRequest)
}
GetVotesByPartyRequest::GetVotesByPartyRequest(const GetVotesByPartyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.GetVotesByPartyRequest)
}

void GetVotesByPartyRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetVotesByPartyRequest_proto_2fapi_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetVotesByPartyRequest::~GetVotesByPartyRequest() {
  // @@protoc_insertion_point(destructor:api.GetVotesByPartyRequest)
  SharedDtor();
}

void GetVotesByPartyRequest::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetVotesByPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVotesByPartyRequest& GetVotesByPartyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetVotesByPartyRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetVotesByPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetVotesByPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetVotesByPartyRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetVotesByPartyRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.GetVotesByPartyRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetVotesByPartyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetVotesByPartyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.GetVotesByPartyRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetVotesByPartyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetVotesByPartyRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetVotesByPartyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetVotesByPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.GetVotesByPartyRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetVotesByPartyRequest)
}

::google::protobuf::uint8* GetVotesByPartyRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetVotesByPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.GetVotesByPartyRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetVotesByPartyRequest)
  return target;
}

size_t GetVotesByPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetVotesByPartyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVotesByPartyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetVotesByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVotesByPartyRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetVotesByPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetVotesByPartyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetVotesByPartyRequest)
    MergeFrom(*source);
  }
}

void GetVotesByPartyRequest::MergeFrom(const GetVotesByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetVotesByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
}

void GetVotesByPartyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetVotesByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVotesByPartyRequest::CopyFrom(const GetVotesByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetVotesByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVotesByPartyRequest::IsInitialized() const {
  return true;
}

void GetVotesByPartyRequest::Swap(GetVotesByPartyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVotesByPartyRequest::InternalSwap(GetVotesByPartyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetVotesByPartyRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetVotesByPartyResponse::InitAsDefaultInstance() {
}
class GetVotesByPartyResponse::HasBitSetters {
 public:
};

void GetVotesByPartyResponse::clear_votes() {
  votes_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVotesByPartyResponse::kVotesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVotesByPartyResponse::GetVotesByPartyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetVotesByPartyResponse)
}
GetVotesByPartyResponse::GetVotesByPartyResponse(const GetVotesByPartyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetVotesByPartyResponse)
}

void GetVotesByPartyResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetVotesByPartyResponse_proto_2fapi_2ftrading_2eproto.base);
}

GetVotesByPartyResponse::~GetVotesByPartyResponse() {
  // @@protoc_insertion_point(destructor:api.GetVotesByPartyResponse)
  SharedDtor();
}

void GetVotesByPartyResponse::SharedDtor() {
}

void GetVotesByPartyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVotesByPartyResponse& GetVotesByPartyResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetVotesByPartyResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetVotesByPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetVotesByPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetVotesByPartyResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetVotesByPartyResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Vote votes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Vote::_InternalParse;
          object = msg->add_votes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetVotesByPartyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetVotesByPartyResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Vote votes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_votes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetVotesByPartyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetVotesByPartyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetVotesByPartyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetVotesByPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Vote votes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->votes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->votes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetVotesByPartyResponse)
}

::google::protobuf::uint8* GetVotesByPartyResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetVotesByPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Vote votes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->votes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->votes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetVotesByPartyResponse)
  return target;
}

size_t GetVotesByPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetVotesByPartyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Vote votes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->votes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->votes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVotesByPartyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetVotesByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVotesByPartyResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetVotesByPartyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetVotesByPartyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetVotesByPartyResponse)
    MergeFrom(*source);
  }
}

void GetVotesByPartyResponse::MergeFrom(const GetVotesByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetVotesByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
}

void GetVotesByPartyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetVotesByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVotesByPartyResponse::CopyFrom(const GetVotesByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetVotesByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVotesByPartyResponse::IsInitialized() const {
  return true;
}

void GetVotesByPartyResponse::Swap(GetVotesByPartyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVotesByPartyResponse::InternalSwap(GetVotesByPartyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&votes_)->InternalSwap(CastToBase(&other->votes_));
}

::google::protobuf::Metadata GetVotesByPartyResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetNewMarketProposalsRequest::InitAsDefaultInstance() {
  ::api::_GetNewMarketProposalsRequest_default_instance_._instance.get_mutable()->selectinstate_ = const_cast< ::api::OptionalProposalState*>(
      ::api::OptionalProposalState::internal_default_instance());
}
class GetNewMarketProposalsRequest::HasBitSetters {
 public:
  static const ::api::OptionalProposalState& selectinstate(const GetNewMarketProposalsRequest* msg);
};

const ::api::OptionalProposalState&
GetNewMarketProposalsRequest::HasBitSetters::selectinstate(const GetNewMarketProposalsRequest* msg) {
  return *msg->selectinstate_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNewMarketProposalsRequest::kSelectInStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNewMarketProposalsRequest::GetNewMarketProposalsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetNewMarketProposalsRequest)
}
GetNewMarketProposalsRequest::GetNewMarketProposalsRequest(const GetNewMarketProposalsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selectinstate()) {
    selectinstate_ = new ::api::OptionalProposalState(*from.selectinstate_);
  } else {
    selectinstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetNewMarketProposalsRequest)
}

void GetNewMarketProposalsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetNewMarketProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  selectinstate_ = nullptr;
}

GetNewMarketProposalsRequest::~GetNewMarketProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.GetNewMarketProposalsRequest)
  SharedDtor();
}

void GetNewMarketProposalsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete selectinstate_;
}

void GetNewMarketProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNewMarketProposalsRequest& GetNewMarketProposalsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetNewMarketProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNewMarketProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNewMarketProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetNewMarketProposalsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetNewMarketProposalsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .api.OptionalProposalState selectInState = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::OptionalProposalState::_InternalParse;
        object = msg->mutable_selectinstate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetNewMarketProposalsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetNewMarketProposalsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .api.OptionalProposalState selectInState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selectinstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetNewMarketProposalsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetNewMarketProposalsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetNewMarketProposalsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetNewMarketProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1;
  if (this->has_selectinstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::selectinstate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetNewMarketProposalsRequest)
}

::google::protobuf::uint8* GetNewMarketProposalsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNewMarketProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1;
  if (this->has_selectinstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::selectinstate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNewMarketProposalsRequest)
  return target;
}

size_t GetNewMarketProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNewMarketProposalsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1;
  if (this->has_selectinstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selectinstate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNewMarketProposalsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNewMarketProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNewMarketProposalsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetNewMarketProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNewMarketProposalsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNewMarketProposalsRequest)
    MergeFrom(*source);
  }
}

void GetNewMarketProposalsRequest::MergeFrom(const GetNewMarketProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNewMarketProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selectinstate()) {
    mutable_selectinstate()->::api::OptionalProposalState::MergeFrom(from.selectinstate());
  }
}

void GetNewMarketProposalsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNewMarketProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNewMarketProposalsRequest::CopyFrom(const GetNewMarketProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNewMarketProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNewMarketProposalsRequest::IsInitialized() const {
  return true;
}

void GetNewMarketProposalsRequest::Swap(GetNewMarketProposalsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNewMarketProposalsRequest::InternalSwap(GetNewMarketProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(selectinstate_, other->selectinstate_);
}

::google::protobuf::Metadata GetNewMarketProposalsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetNewMarketProposalsResponse::InitAsDefaultInstance() {
}
class GetNewMarketProposalsResponse::HasBitSetters {
 public:
};

void GetNewMarketProposalsResponse::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNewMarketProposalsResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNewMarketProposalsResponse::GetNewMarketProposalsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetNewMarketProposalsResponse)
}
GetNewMarketProposalsResponse::GetNewMarketProposalsResponse(const GetNewMarketProposalsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetNewMarketProposalsResponse)
}

void GetNewMarketProposalsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetNewMarketProposalsResponse_proto_2fapi_2ftrading_2eproto.base);
}

GetNewMarketProposalsResponse::~GetNewMarketProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.GetNewMarketProposalsResponse)
  SharedDtor();
}

void GetNewMarketProposalsResponse::SharedDtor() {
}

void GetNewMarketProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNewMarketProposalsResponse& GetNewMarketProposalsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetNewMarketProposalsResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNewMarketProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNewMarketProposalsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetNewMarketProposalsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetNewMarketProposalsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::GovernanceData::_InternalParse;
          object = msg->add_data();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetNewMarketProposalsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetNewMarketProposalsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetNewMarketProposalsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetNewMarketProposalsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetNewMarketProposalsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetNewMarketProposalsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetNewMarketProposalsResponse)
}

::google::protobuf::uint8* GetNewMarketProposalsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNewMarketProposalsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNewMarketProposalsResponse)
  return target;
}

size_t GetNewMarketProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNewMarketProposalsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNewMarketProposalsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNewMarketProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNewMarketProposalsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetNewMarketProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNewMarketProposalsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNewMarketProposalsResponse)
    MergeFrom(*source);
  }
}

void GetNewMarketProposalsResponse::MergeFrom(const GetNewMarketProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNewMarketProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetNewMarketProposalsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNewMarketProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNewMarketProposalsResponse::CopyFrom(const GetNewMarketProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNewMarketProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNewMarketProposalsResponse::IsInitialized() const {
  return true;
}

void GetNewMarketProposalsResponse::Swap(GetNewMarketProposalsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNewMarketProposalsResponse::InternalSwap(GetNewMarketProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
}

::google::protobuf::Metadata GetNewMarketProposalsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetUpdateMarketProposalsRequest::InitAsDefaultInstance() {
  ::api::_GetUpdateMarketProposalsRequest_default_instance_._instance.get_mutable()->selectinstate_ = const_cast< ::api::OptionalProposalState*>(
      ::api::OptionalProposalState::internal_default_instance());
}
class GetUpdateMarketProposalsRequest::HasBitSetters {
 public:
  static const ::api::OptionalProposalState& selectinstate(const GetUpdateMarketProposalsRequest* msg);
};

const ::api::OptionalProposalState&
GetUpdateMarketProposalsRequest::HasBitSetters::selectinstate(const GetUpdateMarketProposalsRequest* msg) {
  return *msg->selectinstate_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUpdateMarketProposalsRequest::kMarketIDFieldNumber;
const int GetUpdateMarketProposalsRequest::kSelectInStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUpdateMarketProposalsRequest::GetUpdateMarketProposalsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetUpdateMarketProposalsRequest)
}
GetUpdateMarketProposalsRequest::GetUpdateMarketProposalsRequest(const GetUpdateMarketProposalsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.has_selectinstate()) {
    selectinstate_ = new ::api::OptionalProposalState(*from.selectinstate_);
  } else {
    selectinstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetUpdateMarketProposalsRequest)
}

void GetUpdateMarketProposalsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetUpdateMarketProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  selectinstate_ = nullptr;
}

GetUpdateMarketProposalsRequest::~GetUpdateMarketProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.GetUpdateMarketProposalsRequest)
  SharedDtor();
}

void GetUpdateMarketProposalsRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete selectinstate_;
}

void GetUpdateMarketProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUpdateMarketProposalsRequest& GetUpdateMarketProposalsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetUpdateMarketProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetUpdateMarketProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetUpdateMarketProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetUpdateMarketProposalsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetUpdateMarketProposalsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.GetUpdateMarketProposalsRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .api.OptionalProposalState selectInState = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::OptionalProposalState::_InternalParse;
        object = msg->mutable_selectinstate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetUpdateMarketProposalsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetUpdateMarketProposalsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.GetUpdateMarketProposalsRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.OptionalProposalState selectInState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selectinstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetUpdateMarketProposalsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetUpdateMarketProposalsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetUpdateMarketProposalsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetUpdateMarketProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.GetUpdateMarketProposalsRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // .api.OptionalProposalState selectInState = 2;
  if (this->has_selectinstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::selectinstate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetUpdateMarketProposalsRequest)
}

::google::protobuf::uint8* GetUpdateMarketProposalsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetUpdateMarketProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.GetUpdateMarketProposalsRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // .api.OptionalProposalState selectInState = 2;
  if (this->has_selectinstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::selectinstate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetUpdateMarketProposalsRequest)
  return target;
}

size_t GetUpdateMarketProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetUpdateMarketProposalsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // .api.OptionalProposalState selectInState = 2;
  if (this->has_selectinstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selectinstate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUpdateMarketProposalsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetUpdateMarketProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUpdateMarketProposalsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetUpdateMarketProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetUpdateMarketProposalsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetUpdateMarketProposalsRequest)
    MergeFrom(*source);
  }
}

void GetUpdateMarketProposalsRequest::MergeFrom(const GetUpdateMarketProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetUpdateMarketProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.has_selectinstate()) {
    mutable_selectinstate()->::api::OptionalProposalState::MergeFrom(from.selectinstate());
  }
}

void GetUpdateMarketProposalsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetUpdateMarketProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUpdateMarketProposalsRequest::CopyFrom(const GetUpdateMarketProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetUpdateMarketProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdateMarketProposalsRequest::IsInitialized() const {
  return true;
}

void GetUpdateMarketProposalsRequest::Swap(GetUpdateMarketProposalsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUpdateMarketProposalsRequest::InternalSwap(GetUpdateMarketProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(selectinstate_, other->selectinstate_);
}

::google::protobuf::Metadata GetUpdateMarketProposalsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetUpdateMarketProposalsResponse::InitAsDefaultInstance() {
}
class GetUpdateMarketProposalsResponse::HasBitSetters {
 public:
};

void GetUpdateMarketProposalsResponse::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUpdateMarketProposalsResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUpdateMarketProposalsResponse::GetUpdateMarketProposalsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetUpdateMarketProposalsResponse)
}
GetUpdateMarketProposalsResponse::GetUpdateMarketProposalsResponse(const GetUpdateMarketProposalsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetUpdateMarketProposalsResponse)
}

void GetUpdateMarketProposalsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetUpdateMarketProposalsResponse_proto_2fapi_2ftrading_2eproto.base);
}

GetUpdateMarketProposalsResponse::~GetUpdateMarketProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.GetUpdateMarketProposalsResponse)
  SharedDtor();
}

void GetUpdateMarketProposalsResponse::SharedDtor() {
}

void GetUpdateMarketProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUpdateMarketProposalsResponse& GetUpdateMarketProposalsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetUpdateMarketProposalsResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetUpdateMarketProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetUpdateMarketProposalsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetUpdateMarketProposalsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetUpdateMarketProposalsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::GovernanceData::_InternalParse;
          object = msg->add_data();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetUpdateMarketProposalsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetUpdateMarketProposalsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetUpdateMarketProposalsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetUpdateMarketProposalsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetUpdateMarketProposalsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetUpdateMarketProposalsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetUpdateMarketProposalsResponse)
}

::google::protobuf::uint8* GetUpdateMarketProposalsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetUpdateMarketProposalsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetUpdateMarketProposalsResponse)
  return target;
}

size_t GetUpdateMarketProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetUpdateMarketProposalsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUpdateMarketProposalsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetUpdateMarketProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUpdateMarketProposalsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetUpdateMarketProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetUpdateMarketProposalsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetUpdateMarketProposalsResponse)
    MergeFrom(*source);
  }
}

void GetUpdateMarketProposalsResponse::MergeFrom(const GetUpdateMarketProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetUpdateMarketProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetUpdateMarketProposalsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetUpdateMarketProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUpdateMarketProposalsResponse::CopyFrom(const GetUpdateMarketProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetUpdateMarketProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdateMarketProposalsResponse::IsInitialized() const {
  return true;
}

void GetUpdateMarketProposalsResponse::Swap(GetUpdateMarketProposalsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUpdateMarketProposalsResponse::InternalSwap(GetUpdateMarketProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
}

::google::protobuf::Metadata GetUpdateMarketProposalsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetNetworkParametersProposalsRequest::InitAsDefaultInstance() {
  ::api::_GetNetworkParametersProposalsRequest_default_instance_._instance.get_mutable()->selectinstate_ = const_cast< ::api::OptionalProposalState*>(
      ::api::OptionalProposalState::internal_default_instance());
}
class GetNetworkParametersProposalsRequest::HasBitSetters {
 public:
  static const ::api::OptionalProposalState& selectinstate(const GetNetworkParametersProposalsRequest* msg);
};

const ::api::OptionalProposalState&
GetNetworkParametersProposalsRequest::HasBitSetters::selectinstate(const GetNetworkParametersProposalsRequest* msg) {
  return *msg->selectinstate_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNetworkParametersProposalsRequest::kSelectInStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNetworkParametersProposalsRequest::GetNetworkParametersProposalsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetNetworkParametersProposalsRequest)
}
GetNetworkParametersProposalsRequest::GetNetworkParametersProposalsRequest(const GetNetworkParametersProposalsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selectinstate()) {
    selectinstate_ = new ::api::OptionalProposalState(*from.selectinstate_);
  } else {
    selectinstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetNetworkParametersProposalsRequest)
}

void GetNetworkParametersProposalsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetNetworkParametersProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  selectinstate_ = nullptr;
}

GetNetworkParametersProposalsRequest::~GetNetworkParametersProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.GetNetworkParametersProposalsRequest)
  SharedDtor();
}

void GetNetworkParametersProposalsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete selectinstate_;
}

void GetNetworkParametersProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNetworkParametersProposalsRequest& GetNetworkParametersProposalsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetNetworkParametersProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNetworkParametersProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNetworkParametersProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetNetworkParametersProposalsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetNetworkParametersProposalsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .api.OptionalProposalState selectInState = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::OptionalProposalState::_InternalParse;
        object = msg->mutable_selectinstate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetNetworkParametersProposalsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetNetworkParametersProposalsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .api.OptionalProposalState selectInState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selectinstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetNetworkParametersProposalsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetNetworkParametersProposalsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetNetworkParametersProposalsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetNetworkParametersProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1;
  if (this->has_selectinstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::selectinstate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetNetworkParametersProposalsRequest)
}

::google::protobuf::uint8* GetNetworkParametersProposalsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNetworkParametersProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1;
  if (this->has_selectinstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::selectinstate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNetworkParametersProposalsRequest)
  return target;
}

size_t GetNetworkParametersProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNetworkParametersProposalsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1;
  if (this->has_selectinstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selectinstate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkParametersProposalsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNetworkParametersProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkParametersProposalsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetNetworkParametersProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNetworkParametersProposalsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNetworkParametersProposalsRequest)
    MergeFrom(*source);
  }
}

void GetNetworkParametersProposalsRequest::MergeFrom(const GetNetworkParametersProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNetworkParametersProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selectinstate()) {
    mutable_selectinstate()->::api::OptionalProposalState::MergeFrom(from.selectinstate());
  }
}

void GetNetworkParametersProposalsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNetworkParametersProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkParametersProposalsRequest::CopyFrom(const GetNetworkParametersProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNetworkParametersProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkParametersProposalsRequest::IsInitialized() const {
  return true;
}

void GetNetworkParametersProposalsRequest::Swap(GetNetworkParametersProposalsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNetworkParametersProposalsRequest::InternalSwap(GetNetworkParametersProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(selectinstate_, other->selectinstate_);
}

::google::protobuf::Metadata GetNetworkParametersProposalsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetNetworkParametersProposalsResponse::InitAsDefaultInstance() {
}
class GetNetworkParametersProposalsResponse::HasBitSetters {
 public:
};

void GetNetworkParametersProposalsResponse::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNetworkParametersProposalsResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNetworkParametersProposalsResponse::GetNetworkParametersProposalsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetNetworkParametersProposalsResponse)
}
GetNetworkParametersProposalsResponse::GetNetworkParametersProposalsResponse(const GetNetworkParametersProposalsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetNetworkParametersProposalsResponse)
}

void GetNetworkParametersProposalsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetNetworkParametersProposalsResponse_proto_2fapi_2ftrading_2eproto.base);
}

GetNetworkParametersProposalsResponse::~GetNetworkParametersProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.GetNetworkParametersProposalsResponse)
  SharedDtor();
}

void GetNetworkParametersProposalsResponse::SharedDtor() {
}

void GetNetworkParametersProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNetworkParametersProposalsResponse& GetNetworkParametersProposalsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetNetworkParametersProposalsResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNetworkParametersProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNetworkParametersProposalsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetNetworkParametersProposalsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetNetworkParametersProposalsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::GovernanceData::_InternalParse;
          object = msg->add_data();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetNetworkParametersProposalsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetNetworkParametersProposalsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetNetworkParametersProposalsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetNetworkParametersProposalsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetNetworkParametersProposalsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetNetworkParametersProposalsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetNetworkParametersProposalsResponse)
}

::google::protobuf::uint8* GetNetworkParametersProposalsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNetworkParametersProposalsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNetworkParametersProposalsResponse)
  return target;
}

size_t GetNetworkParametersProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNetworkParametersProposalsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkParametersProposalsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNetworkParametersProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkParametersProposalsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetNetworkParametersProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNetworkParametersProposalsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNetworkParametersProposalsResponse)
    MergeFrom(*source);
  }
}

void GetNetworkParametersProposalsResponse::MergeFrom(const GetNetworkParametersProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNetworkParametersProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetNetworkParametersProposalsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNetworkParametersProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkParametersProposalsResponse::CopyFrom(const GetNetworkParametersProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNetworkParametersProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkParametersProposalsResponse::IsInitialized() const {
  return true;
}

void GetNetworkParametersProposalsResponse::Swap(GetNetworkParametersProposalsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNetworkParametersProposalsResponse::InternalSwap(GetNetworkParametersProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
}

::google::protobuf::Metadata GetNetworkParametersProposalsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetNewAssetProposalsRequest::InitAsDefaultInstance() {
  ::api::_GetNewAssetProposalsRequest_default_instance_._instance.get_mutable()->selectinstate_ = const_cast< ::api::OptionalProposalState*>(
      ::api::OptionalProposalState::internal_default_instance());
}
class GetNewAssetProposalsRequest::HasBitSetters {
 public:
  static const ::api::OptionalProposalState& selectinstate(const GetNewAssetProposalsRequest* msg);
};

const ::api::OptionalProposalState&
GetNewAssetProposalsRequest::HasBitSetters::selectinstate(const GetNewAssetProposalsRequest* msg) {
  return *msg->selectinstate_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNewAssetProposalsRequest::kSelectInStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNewAssetProposalsRequest::GetNewAssetProposalsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetNewAssetProposalsRequest)
}
GetNewAssetProposalsRequest::GetNewAssetProposalsRequest(const GetNewAssetProposalsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selectinstate()) {
    selectinstate_ = new ::api::OptionalProposalState(*from.selectinstate_);
  } else {
    selectinstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetNewAssetProposalsRequest)
}

void GetNewAssetProposalsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetNewAssetProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  selectinstate_ = nullptr;
}

GetNewAssetProposalsRequest::~GetNewAssetProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.GetNewAssetProposalsRequest)
  SharedDtor();
}

void GetNewAssetProposalsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete selectinstate_;
}

void GetNewAssetProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNewAssetProposalsRequest& GetNewAssetProposalsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetNewAssetProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNewAssetProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNewAssetProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetNewAssetProposalsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetNewAssetProposalsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .api.OptionalProposalState selectInState = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::OptionalProposalState::_InternalParse;
        object = msg->mutable_selectinstate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetNewAssetProposalsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetNewAssetProposalsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .api.OptionalProposalState selectInState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selectinstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetNewAssetProposalsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetNewAssetProposalsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetNewAssetProposalsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetNewAssetProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1;
  if (this->has_selectinstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::selectinstate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetNewAssetProposalsRequest)
}

::google::protobuf::uint8* GetNewAssetProposalsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNewAssetProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1;
  if (this->has_selectinstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::selectinstate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNewAssetProposalsRequest)
  return target;
}

size_t GetNewAssetProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNewAssetProposalsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1;
  if (this->has_selectinstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selectinstate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNewAssetProposalsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNewAssetProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNewAssetProposalsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetNewAssetProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNewAssetProposalsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNewAssetProposalsRequest)
    MergeFrom(*source);
  }
}

void GetNewAssetProposalsRequest::MergeFrom(const GetNewAssetProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNewAssetProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selectinstate()) {
    mutable_selectinstate()->::api::OptionalProposalState::MergeFrom(from.selectinstate());
  }
}

void GetNewAssetProposalsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNewAssetProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNewAssetProposalsRequest::CopyFrom(const GetNewAssetProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNewAssetProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNewAssetProposalsRequest::IsInitialized() const {
  return true;
}

void GetNewAssetProposalsRequest::Swap(GetNewAssetProposalsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNewAssetProposalsRequest::InternalSwap(GetNewAssetProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(selectinstate_, other->selectinstate_);
}

::google::protobuf::Metadata GetNewAssetProposalsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetNewAssetProposalsResponse::InitAsDefaultInstance() {
}
class GetNewAssetProposalsResponse::HasBitSetters {
 public:
};

void GetNewAssetProposalsResponse::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNewAssetProposalsResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNewAssetProposalsResponse::GetNewAssetProposalsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetNewAssetProposalsResponse)
}
GetNewAssetProposalsResponse::GetNewAssetProposalsResponse(const GetNewAssetProposalsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetNewAssetProposalsResponse)
}

void GetNewAssetProposalsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetNewAssetProposalsResponse_proto_2fapi_2ftrading_2eproto.base);
}

GetNewAssetProposalsResponse::~GetNewAssetProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.GetNewAssetProposalsResponse)
  SharedDtor();
}

void GetNewAssetProposalsResponse::SharedDtor() {
}

void GetNewAssetProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNewAssetProposalsResponse& GetNewAssetProposalsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetNewAssetProposalsResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNewAssetProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNewAssetProposalsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetNewAssetProposalsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetNewAssetProposalsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::GovernanceData::_InternalParse;
          object = msg->add_data();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetNewAssetProposalsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetNewAssetProposalsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetNewAssetProposalsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetNewAssetProposalsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetNewAssetProposalsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetNewAssetProposalsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetNewAssetProposalsResponse)
}

::google::protobuf::uint8* GetNewAssetProposalsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNewAssetProposalsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNewAssetProposalsResponse)
  return target;
}

size_t GetNewAssetProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNewAssetProposalsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNewAssetProposalsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNewAssetProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNewAssetProposalsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetNewAssetProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNewAssetProposalsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNewAssetProposalsResponse)
    MergeFrom(*source);
  }
}

void GetNewAssetProposalsResponse::MergeFrom(const GetNewAssetProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNewAssetProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetNewAssetProposalsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNewAssetProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNewAssetProposalsResponse::CopyFrom(const GetNewAssetProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNewAssetProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNewAssetProposalsResponse::IsInitialized() const {
  return true;
}

void GetNewAssetProposalsResponse::Swap(GetNewAssetProposalsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNewAssetProposalsResponse::InternalSwap(GetNewAssetProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
}

::google::protobuf::Metadata GetNewAssetProposalsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetProposalByIDRequest::InitAsDefaultInstance() {
}
class GetProposalByIDRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetProposalByIDRequest::kProposalIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetProposalByIDRequest::GetProposalByIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetProposalByIDRequest)
}
GetProposalByIDRequest::GetProposalByIDRequest(const GetProposalByIDRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proposalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proposalid().size() > 0) {
    proposalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposalid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.GetProposalByIDRequest)
}

void GetProposalByIDRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetProposalByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  proposalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetProposalByIDRequest::~GetProposalByIDRequest() {
  // @@protoc_insertion_point(destructor:api.GetProposalByIDRequest)
  SharedDtor();
}

void GetProposalByIDRequest::SharedDtor() {
  proposalid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetProposalByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalByIDRequest& GetProposalByIDRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetProposalByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetProposalByIDRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetProposalByIDRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string proposalID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.GetProposalByIDRequest.proposalID");
        object = msg->mutable_proposalid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetProposalByIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetProposalByIDRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string proposalID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proposalid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proposalid().data(), static_cast<int>(this->proposalid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.GetProposalByIDRequest.proposalID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetProposalByIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetProposalByIDRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetProposalByIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetProposalByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proposalID = 1 [(.validator.field) = {
  if (this->proposalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proposalid().data(), static_cast<int>(this->proposalid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.GetProposalByIDRequest.proposalID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->proposalid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetProposalByIDRequest)
}

::google::protobuf::uint8* GetProposalByIDRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proposalID = 1 [(.validator.field) = {
  if (this->proposalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proposalid().data(), static_cast<int>(this->proposalid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.GetProposalByIDRequest.proposalID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->proposalid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalByIDRequest)
  return target;
}

size_t GetProposalByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalByIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proposalID = 1 [(.validator.field) = {
  if (this->proposalid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proposalid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalByIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalByIDRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetProposalByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalByIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalByIDRequest)
    MergeFrom(*source);
  }
}

void GetProposalByIDRequest::MergeFrom(const GetProposalByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proposalid().size() > 0) {

    proposalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposalid_);
  }
}

void GetProposalByIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalByIDRequest::CopyFrom(const GetProposalByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalByIDRequest::IsInitialized() const {
  return true;
}

void GetProposalByIDRequest::Swap(GetProposalByIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetProposalByIDRequest::InternalSwap(GetProposalByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  proposalid_.Swap(&other->proposalid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetProposalByIDRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetProposalByIDResponse::InitAsDefaultInstance() {
  ::api::_GetProposalByIDResponse_default_instance_._instance.get_mutable()->data_ = const_cast< ::vega::GovernanceData*>(
      ::vega::GovernanceData::internal_default_instance());
}
class GetProposalByIDResponse::HasBitSetters {
 public:
  static const ::vega::GovernanceData& data(const GetProposalByIDResponse* msg);
};

const ::vega::GovernanceData&
GetProposalByIDResponse::HasBitSetters::data(const GetProposalByIDResponse* msg) {
  return *msg->data_;
}
void GetProposalByIDResponse::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetProposalByIDResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetProposalByIDResponse::GetProposalByIDResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetProposalByIDResponse)
}
GetProposalByIDResponse::GetProposalByIDResponse(const GetProposalByIDResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::vega::GovernanceData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetProposalByIDResponse)
}

void GetProposalByIDResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetProposalByIDResponse_proto_2fapi_2ftrading_2eproto.base);
  data_ = nullptr;
}

GetProposalByIDResponse::~GetProposalByIDResponse() {
  // @@protoc_insertion_point(destructor:api.GetProposalByIDResponse)
  SharedDtor();
}

void GetProposalByIDResponse::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void GetProposalByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalByIDResponse& GetProposalByIDResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetProposalByIDResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalByIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetProposalByIDResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetProposalByIDResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::GovernanceData::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetProposalByIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetProposalByIDResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetProposalByIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetProposalByIDResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetProposalByIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetProposalByIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetProposalByIDResponse)
}

::google::protobuf::uint8* GetProposalByIDResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalByIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalByIDResponse)
  return target;
}

size_t GetProposalByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalByIDResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalByIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalByIDResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetProposalByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalByIDResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalByIDResponse)
    MergeFrom(*source);
  }
}

void GetProposalByIDResponse::MergeFrom(const GetProposalByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::vega::GovernanceData::MergeFrom(from.data());
  }
}

void GetProposalByIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalByIDResponse::CopyFrom(const GetProposalByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalByIDResponse::IsInitialized() const {
  return true;
}

void GetProposalByIDResponse::Swap(GetProposalByIDResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetProposalByIDResponse::InternalSwap(GetProposalByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::google::protobuf::Metadata GetProposalByIDResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetProposalByReferenceRequest::InitAsDefaultInstance() {
}
class GetProposalByReferenceRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetProposalByReferenceRequest::kReferenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetProposalByReferenceRequest::GetProposalByReferenceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetProposalByReferenceRequest)
}
GetProposalByReferenceRequest::GetProposalByReferenceRequest(const GetProposalByReferenceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference().size() > 0) {
    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  // @@protoc_insertion_point(copy_constructor:api.GetProposalByReferenceRequest)
}

void GetProposalByReferenceRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetProposalByReferenceRequest_proto_2fapi_2ftrading_2eproto.base);
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetProposalByReferenceRequest::~GetProposalByReferenceRequest() {
  // @@protoc_insertion_point(destructor:api.GetProposalByReferenceRequest)
  SharedDtor();
}

void GetProposalByReferenceRequest::SharedDtor() {
  reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetProposalByReferenceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalByReferenceRequest& GetProposalByReferenceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetProposalByReferenceRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalByReferenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalByReferenceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetProposalByReferenceRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetProposalByReferenceRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string Reference = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.GetProposalByReferenceRequest.Reference");
        object = msg->mutable_reference();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetProposalByReferenceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetProposalByReferenceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Reference = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference().data(), static_cast<int>(this->reference().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.GetProposalByReferenceRequest.Reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetProposalByReferenceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetProposalByReferenceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetProposalByReferenceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetProposalByReferenceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Reference = 1 [(.validator.field) = {
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.GetProposalByReferenceRequest.Reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reference(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetProposalByReferenceRequest)
}

::google::protobuf::uint8* GetProposalByReferenceRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalByReferenceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Reference = 1 [(.validator.field) = {
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.GetProposalByReferenceRequest.Reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reference(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalByReferenceRequest)
  return target;
}

size_t GetProposalByReferenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalByReferenceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Reference = 1 [(.validator.field) = {
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalByReferenceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalByReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalByReferenceRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetProposalByReferenceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalByReferenceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalByReferenceRequest)
    MergeFrom(*source);
  }
}

void GetProposalByReferenceRequest::MergeFrom(const GetProposalByReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalByReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
}

void GetProposalByReferenceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalByReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalByReferenceRequest::CopyFrom(const GetProposalByReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalByReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalByReferenceRequest::IsInitialized() const {
  return true;
}

void GetProposalByReferenceRequest::Swap(GetProposalByReferenceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetProposalByReferenceRequest::InternalSwap(GetProposalByReferenceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reference_.Swap(&other->reference_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetProposalByReferenceRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetProposalByReferenceResponse::InitAsDefaultInstance() {
  ::api::_GetProposalByReferenceResponse_default_instance_._instance.get_mutable()->data_ = const_cast< ::vega::GovernanceData*>(
      ::vega::GovernanceData::internal_default_instance());
}
class GetProposalByReferenceResponse::HasBitSetters {
 public:
  static const ::vega::GovernanceData& data(const GetProposalByReferenceResponse* msg);
};

const ::vega::GovernanceData&
GetProposalByReferenceResponse::HasBitSetters::data(const GetProposalByReferenceResponse* msg) {
  return *msg->data_;
}
void GetProposalByReferenceResponse::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetProposalByReferenceResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetProposalByReferenceResponse::GetProposalByReferenceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GetProposalByReferenceResponse)
}
GetProposalByReferenceResponse::GetProposalByReferenceResponse(const GetProposalByReferenceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::vega::GovernanceData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetProposalByReferenceResponse)
}

void GetProposalByReferenceResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetProposalByReferenceResponse_proto_2fapi_2ftrading_2eproto.base);
  data_ = nullptr;
}

GetProposalByReferenceResponse::~GetProposalByReferenceResponse() {
  // @@protoc_insertion_point(destructor:api.GetProposalByReferenceResponse)
  SharedDtor();
}

void GetProposalByReferenceResponse::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void GetProposalByReferenceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalByReferenceResponse& GetProposalByReferenceResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetProposalByReferenceResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalByReferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalByReferenceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetProposalByReferenceResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetProposalByReferenceResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::GovernanceData::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetProposalByReferenceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GetProposalByReferenceResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.GovernanceData data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GetProposalByReferenceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GetProposalByReferenceResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetProposalByReferenceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GetProposalByReferenceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.GetProposalByReferenceResponse)
}

::google::protobuf::uint8* GetProposalByReferenceResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalByReferenceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalByReferenceResponse)
  return target;
}

size_t GetProposalByReferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalByReferenceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalByReferenceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalByReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalByReferenceResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetProposalByReferenceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalByReferenceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalByReferenceResponse)
    MergeFrom(*source);
  }
}

void GetProposalByReferenceResponse::MergeFrom(const GetProposalByReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalByReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::vega::GovernanceData::MergeFrom(from.data());
  }
}

void GetProposalByReferenceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalByReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalByReferenceResponse::CopyFrom(const GetProposalByReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalByReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalByReferenceResponse::IsInitialized() const {
  return true;
}

void GetProposalByReferenceResponse::Swap(GetProposalByReferenceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetProposalByReferenceResponse::InternalSwap(GetProposalByReferenceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::google::protobuf::Metadata GetProposalByReferenceResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ObservePartyProposalsRequest::InitAsDefaultInstance() {
}
class ObservePartyProposalsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObservePartyProposalsRequest::kPartyIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObservePartyProposalsRequest::ObservePartyProposalsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.ObservePartyProposalsRequest)
}
ObservePartyProposalsRequest::ObservePartyProposalsRequest(const ObservePartyProposalsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.ObservePartyProposalsRequest)
}

void ObservePartyProposalsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ObservePartyProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ObservePartyProposalsRequest::~ObservePartyProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.ObservePartyProposalsRequest)
  SharedDtor();
}

void ObservePartyProposalsRequest::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ObservePartyProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObservePartyProposalsRequest& ObservePartyProposalsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ObservePartyProposalsRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObservePartyProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ObservePartyProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObservePartyProposalsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ObservePartyProposalsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.ObservePartyProposalsRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObservePartyProposalsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.ObservePartyProposalsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ObservePartyProposalsRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.ObservePartyProposalsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.ObservePartyProposalsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObservePartyProposalsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.ObservePartyProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ObservePartyProposalsRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.ObservePartyProposalsRequest)
}

::google::protobuf::uint8* ObservePartyProposalsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ObservePartyProposalsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ObservePartyProposalsRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ObservePartyProposalsRequest)
  return target;
}

size_t ObservePartyProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ObservePartyProposalsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservePartyProposalsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ObservePartyProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ObservePartyProposalsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ObservePartyProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ObservePartyProposalsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ObservePartyProposalsRequest)
    MergeFrom(*source);
  }
}

void ObservePartyProposalsRequest::MergeFrom(const ObservePartyProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ObservePartyProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
}

void ObservePartyProposalsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ObservePartyProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservePartyProposalsRequest::CopyFrom(const ObservePartyProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ObservePartyProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservePartyProposalsRequest::IsInitialized() const {
  return true;
}

void ObservePartyProposalsRequest::Swap(ObservePartyProposalsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObservePartyProposalsRequest::InternalSwap(ObservePartyProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ObservePartyProposalsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ObserveProposalVotesRequest::InitAsDefaultInstance() {
}
class ObserveProposalVotesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObserveProposalVotesRequest::kProposalIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObserveProposalVotesRequest::ObserveProposalVotesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.ObserveProposalVotesRequest)
}
ObserveProposalVotesRequest::ObserveProposalVotesRequest(const ObserveProposalVotesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proposalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proposalid().size() > 0) {
    proposalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposalid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.ObserveProposalVotesRequest)
}

void ObserveProposalVotesRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ObserveProposalVotesRequest_proto_2fapi_2ftrading_2eproto.base);
  proposalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ObserveProposalVotesRequest::~ObserveProposalVotesRequest() {
  // @@protoc_insertion_point(destructor:api.ObserveProposalVotesRequest)
  SharedDtor();
}

void ObserveProposalVotesRequest::SharedDtor() {
  proposalid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ObserveProposalVotesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObserveProposalVotesRequest& ObserveProposalVotesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ObserveProposalVotesRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObserveProposalVotesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ObserveProposalVotesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObserveProposalVotesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ObserveProposalVotesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string proposalID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.ObserveProposalVotesRequest.proposalID");
        object = msg->mutable_proposalid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObserveProposalVotesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.ObserveProposalVotesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string proposalID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proposalid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proposalid().data(), static_cast<int>(this->proposalid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ObserveProposalVotesRequest.proposalID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.ObserveProposalVotesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.ObserveProposalVotesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObserveProposalVotesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.ObserveProposalVotesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proposalID = 1 [(.validator.field) = {
  if (this->proposalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proposalid().data(), static_cast<int>(this->proposalid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ObserveProposalVotesRequest.proposalID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->proposalid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.ObserveProposalVotesRequest)
}

::google::protobuf::uint8* ObserveProposalVotesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ObserveProposalVotesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proposalID = 1 [(.validator.field) = {
  if (this->proposalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proposalid().data(), static_cast<int>(this->proposalid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ObserveProposalVotesRequest.proposalID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->proposalid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ObserveProposalVotesRequest)
  return target;
}

size_t ObserveProposalVotesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ObserveProposalVotesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proposalID = 1 [(.validator.field) = {
  if (this->proposalid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proposalid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObserveProposalVotesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ObserveProposalVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ObserveProposalVotesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ObserveProposalVotesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ObserveProposalVotesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ObserveProposalVotesRequest)
    MergeFrom(*source);
  }
}

void ObserveProposalVotesRequest::MergeFrom(const ObserveProposalVotesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ObserveProposalVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proposalid().size() > 0) {

    proposalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposalid_);
  }
}

void ObserveProposalVotesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ObserveProposalVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObserveProposalVotesRequest::CopyFrom(const ObserveProposalVotesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ObserveProposalVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObserveProposalVotesRequest::IsInitialized() const {
  return true;
}

void ObserveProposalVotesRequest::Swap(ObserveProposalVotesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObserveProposalVotesRequest::InternalSwap(ObserveProposalVotesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  proposalid_.Swap(&other->proposalid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ObserveProposalVotesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ObservePartyVotesRequest::InitAsDefaultInstance() {
}
class ObservePartyVotesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObservePartyVotesRequest::kPartyIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObservePartyVotesRequest::ObservePartyVotesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.ObservePartyVotesRequest)
}
ObservePartyVotesRequest::ObservePartyVotesRequest(const ObservePartyVotesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.ObservePartyVotesRequest)
}

void ObservePartyVotesRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ObservePartyVotesRequest_proto_2fapi_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ObservePartyVotesRequest::~ObservePartyVotesRequest() {
  // @@protoc_insertion_point(destructor:api.ObservePartyVotesRequest)
  SharedDtor();
}

void ObservePartyVotesRequest::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ObservePartyVotesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObservePartyVotesRequest& ObservePartyVotesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ObservePartyVotesRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObservePartyVotesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ObservePartyVotesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObservePartyVotesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ObservePartyVotesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.ObservePartyVotesRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObservePartyVotesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.ObservePartyVotesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.ObservePartyVotesRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.ObservePartyVotesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.ObservePartyVotesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObservePartyVotesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.ObservePartyVotesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ObservePartyVotesRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.ObservePartyVotesRequest)
}

::google::protobuf::uint8* ObservePartyVotesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ObservePartyVotesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.ObservePartyVotesRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ObservePartyVotesRequest)
  return target;
}

size_t ObservePartyVotesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ObservePartyVotesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservePartyVotesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ObservePartyVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ObservePartyVotesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ObservePartyVotesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ObservePartyVotesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ObservePartyVotesRequest)
    MergeFrom(*source);
  }
}

void ObservePartyVotesRequest::MergeFrom(const ObservePartyVotesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ObservePartyVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
}

void ObservePartyVotesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ObservePartyVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservePartyVotesRequest::CopyFrom(const ObservePartyVotesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ObservePartyVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservePartyVotesRequest::IsInitialized() const {
  return true;
}

void ObservePartyVotesRequest::Swap(ObservePartyVotesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObservePartyVotesRequest::InternalSwap(ObservePartyVotesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ObservePartyVotesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarginLevelsSubscribeRequest::InitAsDefaultInstance() {
}
class MarginLevelsSubscribeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarginLevelsSubscribeRequest::kPartyIDFieldNumber;
const int MarginLevelsSubscribeRequest::kMarketIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarginLevelsSubscribeRequest::MarginLevelsSubscribeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.MarginLevelsSubscribeRequest)
}
MarginLevelsSubscribeRequest::MarginLevelsSubscribeRequest(const MarginLevelsSubscribeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.MarginLevelsSubscribeRequest)
}

void MarginLevelsSubscribeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarginLevelsSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MarginLevelsSubscribeRequest::~MarginLevelsSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.MarginLevelsSubscribeRequest)
  SharedDtor();
}

void MarginLevelsSubscribeRequest::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarginLevelsSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginLevelsSubscribeRequest& MarginLevelsSubscribeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarginLevelsSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarginLevelsSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarginLevelsSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarginLevelsSubscribeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarginLevelsSubscribeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.MarginLevelsSubscribeRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string marketID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.MarginLevelsSubscribeRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarginLevelsSubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.MarginLevelsSubscribeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.MarginLevelsSubscribeRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string marketID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.MarginLevelsSubscribeRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.MarginLevelsSubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.MarginLevelsSubscribeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarginLevelsSubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.MarginLevelsSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarginLevelsSubscribeRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarginLevelsSubscribeRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->marketid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.MarginLevelsSubscribeRequest)
}

::google::protobuf::uint8* MarginLevelsSubscribeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarginLevelsSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarginLevelsSubscribeRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarginLevelsSubscribeRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->marketid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarginLevelsSubscribeRequest)
  return target;
}

size_t MarginLevelsSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarginLevelsSubscribeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginLevelsSubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarginLevelsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginLevelsSubscribeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<MarginLevelsSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarginLevelsSubscribeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarginLevelsSubscribeRequest)
    MergeFrom(*source);
  }
}

void MarginLevelsSubscribeRequest::MergeFrom(const MarginLevelsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarginLevelsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
}

void MarginLevelsSubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarginLevelsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginLevelsSubscribeRequest::CopyFrom(const MarginLevelsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarginLevelsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginLevelsSubscribeRequest::IsInitialized() const {
  return true;
}

void MarginLevelsSubscribeRequest::Swap(MarginLevelsSubscribeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarginLevelsSubscribeRequest::InternalSwap(MarginLevelsSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata MarginLevelsSubscribeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarginLevelsRequest::InitAsDefaultInstance() {
}
class MarginLevelsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarginLevelsRequest::kPartyIDFieldNumber;
const int MarginLevelsRequest::kMarketIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarginLevelsRequest::MarginLevelsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.MarginLevelsRequest)
}
MarginLevelsRequest::MarginLevelsRequest(const MarginLevelsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.MarginLevelsRequest)
}

void MarginLevelsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarginLevelsRequest_proto_2fapi_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MarginLevelsRequest::~MarginLevelsRequest() {
  // @@protoc_insertion_point(destructor:api.MarginLevelsRequest)
  SharedDtor();
}

void MarginLevelsRequest::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarginLevelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginLevelsRequest& MarginLevelsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarginLevelsRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarginLevelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarginLevelsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarginLevelsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarginLevelsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.MarginLevelsRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string marketID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.MarginLevelsRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarginLevelsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.MarginLevelsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.MarginLevelsRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string marketID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.MarginLevelsRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.MarginLevelsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.MarginLevelsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarginLevelsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.MarginLevelsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarginLevelsRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarginLevelsRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->marketid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.MarginLevelsRequest)
}

::google::protobuf::uint8* MarginLevelsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarginLevelsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarginLevelsRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarginLevelsRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->marketid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarginLevelsRequest)
  return target;
}

size_t MarginLevelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarginLevelsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginLevelsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarginLevelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginLevelsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<MarginLevelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarginLevelsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarginLevelsRequest)
    MergeFrom(*source);
  }
}

void MarginLevelsRequest::MergeFrom(const MarginLevelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarginLevelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
}

void MarginLevelsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarginLevelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginLevelsRequest::CopyFrom(const MarginLevelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarginLevelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginLevelsRequest::IsInitialized() const {
  return true;
}

void MarginLevelsRequest::Swap(MarginLevelsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarginLevelsRequest::InternalSwap(MarginLevelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata MarginLevelsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarginLevelsResponse::InitAsDefaultInstance() {
}
class MarginLevelsResponse::HasBitSetters {
 public:
};

void MarginLevelsResponse::clear_marginlevels() {
  marginlevels_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarginLevelsResponse::kMarginLevelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarginLevelsResponse::MarginLevelsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.MarginLevelsResponse)
}
MarginLevelsResponse::MarginLevelsResponse(const MarginLevelsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      marginlevels_(from.marginlevels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.MarginLevelsResponse)
}

void MarginLevelsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarginLevelsResponse_proto_2fapi_2ftrading_2eproto.base);
}

MarginLevelsResponse::~MarginLevelsResponse() {
  // @@protoc_insertion_point(destructor:api.MarginLevelsResponse)
  SharedDtor();
}

void MarginLevelsResponse::SharedDtor() {
}

void MarginLevelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginLevelsResponse& MarginLevelsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarginLevelsResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarginLevelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarginLevelsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marginlevels_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarginLevelsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarginLevelsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.MarginLevels marginLevels = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::MarginLevels::_InternalParse;
          object = msg->add_marginlevels();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarginLevelsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.MarginLevelsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.MarginLevels marginLevels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_marginlevels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.MarginLevelsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.MarginLevelsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarginLevelsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.MarginLevelsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.MarginLevels marginLevels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->marginlevels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->marginlevels(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.MarginLevelsResponse)
}

::google::protobuf::uint8* MarginLevelsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarginLevelsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.MarginLevels marginLevels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->marginlevels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->marginlevels(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarginLevelsResponse)
  return target;
}

size_t MarginLevelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarginLevelsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.MarginLevels marginLevels = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->marginlevels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->marginlevels(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginLevelsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarginLevelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginLevelsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<MarginLevelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarginLevelsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarginLevelsResponse)
    MergeFrom(*source);
  }
}

void MarginLevelsResponse::MergeFrom(const MarginLevelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarginLevelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  marginlevels_.MergeFrom(from.marginlevels_);
}

void MarginLevelsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarginLevelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginLevelsResponse::CopyFrom(const MarginLevelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarginLevelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginLevelsResponse::IsInitialized() const {
  return true;
}

void MarginLevelsResponse::Swap(MarginLevelsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarginLevelsResponse::InternalSwap(MarginLevelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&marginlevels_)->InternalSwap(CastToBase(&other->marginlevels_));
}

::google::protobuf::Metadata MarginLevelsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketsDataSubscribeRequest::InitAsDefaultInstance() {
}
class MarketsDataSubscribeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketsDataSubscribeRequest::kMarketIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketsDataSubscribeRequest::MarketsDataSubscribeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.MarketsDataSubscribeRequest)
}
MarketsDataSubscribeRequest::MarketsDataSubscribeRequest(const MarketsDataSubscribeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketsDataSubscribeRequest)
}

void MarketsDataSubscribeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketsDataSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MarketsDataSubscribeRequest::~MarketsDataSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.MarketsDataSubscribeRequest)
  SharedDtor();
}

void MarketsDataSubscribeRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketsDataSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketsDataSubscribeRequest& MarketsDataSubscribeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketsDataSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketsDataSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketsDataSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketsDataSubscribeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketsDataSubscribeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.MarketsDataSubscribeRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketsDataSubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.MarketsDataSubscribeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.MarketsDataSubscribeRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.MarketsDataSubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.MarketsDataSubscribeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketsDataSubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.MarketsDataSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketsDataSubscribeRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.MarketsDataSubscribeRequest)
}

::google::protobuf::uint8* MarketsDataSubscribeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketsDataSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketsDataSubscribeRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketsDataSubscribeRequest)
  return target;
}

size_t MarketsDataSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketsDataSubscribeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketsDataSubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketsDataSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketsDataSubscribeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<MarketsDataSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketsDataSubscribeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketsDataSubscribeRequest)
    MergeFrom(*source);
  }
}

void MarketsDataSubscribeRequest::MergeFrom(const MarketsDataSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketsDataSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
}

void MarketsDataSubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketsDataSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketsDataSubscribeRequest::CopyFrom(const MarketsDataSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketsDataSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketsDataSubscribeRequest::IsInitialized() const {
  return true;
}

void MarketsDataSubscribeRequest::Swap(MarketsDataSubscribeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketsDataSubscribeRequest::InternalSwap(MarketsDataSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata MarketsDataSubscribeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketDataByIDRequest::InitAsDefaultInstance() {
}
class MarketDataByIDRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataByIDRequest::kMarketIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataByIDRequest::MarketDataByIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.MarketDataByIDRequest)
}
MarketDataByIDRequest::MarketDataByIDRequest(const MarketDataByIDRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketDataByIDRequest)
}

void MarketDataByIDRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketDataByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MarketDataByIDRequest::~MarketDataByIDRequest() {
  // @@protoc_insertion_point(destructor:api.MarketDataByIDRequest)
  SharedDtor();
}

void MarketDataByIDRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketDataByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDataByIDRequest& MarketDataByIDRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketDataByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDataByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketDataByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketDataByIDRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketDataByIDRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.MarketDataByIDRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketDataByIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.MarketDataByIDRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.MarketDataByIDRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.MarketDataByIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.MarketDataByIDRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketDataByIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.MarketDataByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketDataByIDRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.MarketDataByIDRequest)
}

::google::protobuf::uint8* MarketDataByIDRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketDataByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketDataByIDRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketDataByIDRequest)
  return target;
}

size_t MarketDataByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketDataByIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataByIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketDataByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataByIDRequest* source =
      ::google::protobuf::DynamicCastToGenerated<MarketDataByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketDataByIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketDataByIDRequest)
    MergeFrom(*source);
  }
}

void MarketDataByIDRequest::MergeFrom(const MarketDataByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketDataByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
}

void MarketDataByIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketDataByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataByIDRequest::CopyFrom(const MarketDataByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketDataByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataByIDRequest::IsInitialized() const {
  return true;
}

void MarketDataByIDRequest::Swap(MarketDataByIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataByIDRequest::InternalSwap(MarketDataByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata MarketDataByIDRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketDataByIDResponse::InitAsDefaultInstance() {
  ::api::_MarketDataByIDResponse_default_instance_._instance.get_mutable()->marketdata_ = const_cast< ::vega::MarketData*>(
      ::vega::MarketData::internal_default_instance());
}
class MarketDataByIDResponse::HasBitSetters {
 public:
  static const ::vega::MarketData& marketdata(const MarketDataByIDResponse* msg);
};

const ::vega::MarketData&
MarketDataByIDResponse::HasBitSetters::marketdata(const MarketDataByIDResponse* msg) {
  return *msg->marketdata_;
}
void MarketDataByIDResponse::clear_marketdata() {
  if (GetArenaNoVirtual() == nullptr && marketdata_ != nullptr) {
    delete marketdata_;
  }
  marketdata_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataByIDResponse::kMarketDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataByIDResponse::MarketDataByIDResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.MarketDataByIDResponse)
}
MarketDataByIDResponse::MarketDataByIDResponse(const MarketDataByIDResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_marketdata()) {
    marketdata_ = new ::vega::MarketData(*from.marketdata_);
  } else {
    marketdata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketDataByIDResponse)
}

void MarketDataByIDResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketDataByIDResponse_proto_2fapi_2ftrading_2eproto.base);
  marketdata_ = nullptr;
}

MarketDataByIDResponse::~MarketDataByIDResponse() {
  // @@protoc_insertion_point(destructor:api.MarketDataByIDResponse)
  SharedDtor();
}

void MarketDataByIDResponse::SharedDtor() {
  if (this != internal_default_instance()) delete marketdata_;
}

void MarketDataByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDataByIDResponse& MarketDataByIDResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketDataByIDResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDataByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketDataByIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && marketdata_ != nullptr) {
    delete marketdata_;
  }
  marketdata_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketDataByIDResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketDataByIDResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.MarketData marketData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::MarketData::_InternalParse;
        object = msg->mutable_marketdata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketDataByIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.MarketDataByIDResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.MarketData marketData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_marketdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.MarketDataByIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.MarketDataByIDResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketDataByIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.MarketDataByIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.MarketData marketData = 1;
  if (this->has_marketdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::marketdata(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.MarketDataByIDResponse)
}

::google::protobuf::uint8* MarketDataByIDResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketDataByIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.MarketData marketData = 1;
  if (this->has_marketdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::marketdata(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketDataByIDResponse)
  return target;
}

size_t MarketDataByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketDataByIDResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.MarketData marketData = 1;
  if (this->has_marketdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *marketdata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataByIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketDataByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataByIDResponse* source =
      ::google::protobuf::DynamicCastToGenerated<MarketDataByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketDataByIDResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketDataByIDResponse)
    MergeFrom(*source);
  }
}

void MarketDataByIDResponse::MergeFrom(const MarketDataByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketDataByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_marketdata()) {
    mutable_marketdata()->::vega::MarketData::MergeFrom(from.marketdata());
  }
}

void MarketDataByIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketDataByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataByIDResponse::CopyFrom(const MarketDataByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketDataByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataByIDResponse::IsInitialized() const {
  return true;
}

void MarketDataByIDResponse::Swap(MarketDataByIDResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataByIDResponse::InternalSwap(MarketDataByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(marketdata_, other->marketdata_);
}

::google::protobuf::Metadata MarketDataByIDResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketsDataResponse::InitAsDefaultInstance() {
}
class MarketsDataResponse::HasBitSetters {
 public:
};

void MarketsDataResponse::clear_marketsdata() {
  marketsdata_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketsDataResponse::kMarketsDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketsDataResponse::MarketsDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.MarketsDataResponse)
}
MarketsDataResponse::MarketsDataResponse(const MarketsDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      marketsdata_(from.marketsdata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.MarketsDataResponse)
}

void MarketsDataResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketsDataResponse_proto_2fapi_2ftrading_2eproto.base);
}

MarketsDataResponse::~MarketsDataResponse() {
  // @@protoc_insertion_point(destructor:api.MarketsDataResponse)
  SharedDtor();
}

void MarketsDataResponse::SharedDtor() {
}

void MarketsDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketsDataResponse& MarketsDataResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketsDataResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketsDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketsDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketsdata_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketsDataResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketsDataResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.MarketData marketsData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::MarketData::_InternalParse;
          object = msg->add_marketsdata();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketsDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.MarketsDataResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.MarketData marketsData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_marketsdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.MarketsDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.MarketsDataResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketsDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.MarketsDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.MarketData marketsData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->marketsdata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->marketsdata(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.MarketsDataResponse)
}

::google::protobuf::uint8* MarketsDataResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketsDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.MarketData marketsData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->marketsdata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->marketsdata(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketsDataResponse)
  return target;
}

size_t MarketsDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketsDataResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.MarketData marketsData = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->marketsdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->marketsdata(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketsDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketsDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketsDataResponse* source =
      ::google::protobuf::DynamicCastToGenerated<MarketsDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketsDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketsDataResponse)
    MergeFrom(*source);
  }
}

void MarketsDataResponse::MergeFrom(const MarketsDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketsDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  marketsdata_.MergeFrom(from.marketsdata_);
}

void MarketsDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketsDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketsDataResponse::CopyFrom(const MarketsDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketsDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketsDataResponse::IsInitialized() const {
  return true;
}

void MarketsDataResponse::Swap(MarketsDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketsDataResponse::InternalSwap(MarketsDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&marketsdata_)->InternalSwap(CastToBase(&other->marketsdata_));
}

::google::protobuf::Metadata MarketsDataResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LastTradeRequest::InitAsDefaultInstance() {
}
class LastTradeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LastTradeRequest::kMarketIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LastTradeRequest::LastTradeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.LastTradeRequest)
}
LastTradeRequest::LastTradeRequest(const LastTradeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.LastTradeRequest)
}

void LastTradeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LastTradeRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LastTradeRequest::~LastTradeRequest() {
  // @@protoc_insertion_point(destructor:api.LastTradeRequest)
  SharedDtor();
}

void LastTradeRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LastTradeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LastTradeRequest& LastTradeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LastTradeRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void LastTradeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.LastTradeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LastTradeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LastTradeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.LastTradeRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LastTradeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.LastTradeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.LastTradeRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.LastTradeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.LastTradeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LastTradeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.LastTradeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.LastTradeRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.LastTradeRequest)
}

::google::protobuf::uint8* LastTradeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.LastTradeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.LastTradeRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.LastTradeRequest)
  return target;
}

size_t LastTradeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.LastTradeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LastTradeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.LastTradeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LastTradeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<LastTradeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.LastTradeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.LastTradeRequest)
    MergeFrom(*source);
  }
}

void LastTradeRequest::MergeFrom(const LastTradeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.LastTradeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
}

void LastTradeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.LastTradeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastTradeRequest::CopyFrom(const LastTradeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.LastTradeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastTradeRequest::IsInitialized() const {
  return true;
}

void LastTradeRequest::Swap(LastTradeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LastTradeRequest::InternalSwap(LastTradeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LastTradeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LastTradeResponse::InitAsDefaultInstance() {
  ::api::_LastTradeResponse_default_instance_._instance.get_mutable()->trade_ = const_cast< ::vega::Trade*>(
      ::vega::Trade::internal_default_instance());
}
class LastTradeResponse::HasBitSetters {
 public:
  static const ::vega::Trade& trade(const LastTradeResponse* msg);
};

const ::vega::Trade&
LastTradeResponse::HasBitSetters::trade(const LastTradeResponse* msg) {
  return *msg->trade_;
}
void LastTradeResponse::clear_trade() {
  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LastTradeResponse::kTradeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LastTradeResponse::LastTradeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.LastTradeResponse)
}
LastTradeResponse::LastTradeResponse(const LastTradeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trade()) {
    trade_ = new ::vega::Trade(*from.trade_);
  } else {
    trade_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.LastTradeResponse)
}

void LastTradeResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LastTradeResponse_proto_2fapi_2ftrading_2eproto.base);
  trade_ = nullptr;
}

LastTradeResponse::~LastTradeResponse() {
  // @@protoc_insertion_point(destructor:api.LastTradeResponse)
  SharedDtor();
}

void LastTradeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete trade_;
}

void LastTradeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LastTradeResponse& LastTradeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LastTradeResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void LastTradeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.LastTradeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LastTradeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LastTradeResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Trade trade = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Trade::_InternalParse;
        object = msg->mutable_trade();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LastTradeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.LastTradeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Trade trade = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trade()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.LastTradeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.LastTradeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LastTradeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.LastTradeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Trade trade = 1;
  if (this->has_trade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::trade(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.LastTradeResponse)
}

::google::protobuf::uint8* LastTradeResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.LastTradeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Trade trade = 1;
  if (this->has_trade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::trade(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.LastTradeResponse)
  return target;
}

size_t LastTradeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.LastTradeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Trade trade = 1;
  if (this->has_trade()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trade_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LastTradeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.LastTradeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LastTradeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<LastTradeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.LastTradeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.LastTradeResponse)
    MergeFrom(*source);
  }
}

void LastTradeResponse::MergeFrom(const LastTradeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.LastTradeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trade()) {
    mutable_trade()->::vega::Trade::MergeFrom(from.trade());
  }
}

void LastTradeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.LastTradeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastTradeResponse::CopyFrom(const LastTradeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.LastTradeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastTradeResponse::IsInitialized() const {
  return true;
}

void LastTradeResponse::Swap(LastTradeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LastTradeResponse::InternalSwap(LastTradeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trade_, other->trade_);
}

::google::protobuf::Metadata LastTradeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketByIDRequest::InitAsDefaultInstance() {
}
class MarketByIDRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketByIDRequest::kMarketIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketByIDRequest::MarketByIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.MarketByIDRequest)
}
MarketByIDRequest::MarketByIDRequest(const MarketByIDRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketByIDRequest)
}

void MarketByIDRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MarketByIDRequest::~MarketByIDRequest() {
  // @@protoc_insertion_point(destructor:api.MarketByIDRequest)
  SharedDtor();
}

void MarketByIDRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketByIDRequest& MarketByIDRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketByIDRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketByIDRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.MarketByIDRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketByIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.MarketByIDRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.MarketByIDRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.MarketByIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.MarketByIDRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketByIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.MarketByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketByIDRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.MarketByIDRequest)
}

::google::protobuf::uint8* MarketByIDRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketByIDRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketByIDRequest)
  return target;
}

size_t MarketByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketByIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByIDRequest* source =
      ::google::protobuf::DynamicCastToGenerated<MarketByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketByIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketByIDRequest)
    MergeFrom(*source);
  }
}

void MarketByIDRequest::MergeFrom(const MarketByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
}

void MarketByIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByIDRequest::CopyFrom(const MarketByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByIDRequest::IsInitialized() const {
  return true;
}

void MarketByIDRequest::Swap(MarketByIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketByIDRequest::InternalSwap(MarketByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata MarketByIDRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketByIDResponse::InitAsDefaultInstance() {
  ::api::_MarketByIDResponse_default_instance_._instance.get_mutable()->market_ = const_cast< ::vega::Market*>(
      ::vega::Market::internal_default_instance());
}
class MarketByIDResponse::HasBitSetters {
 public:
  static const ::vega::Market& market(const MarketByIDResponse* msg);
};

const ::vega::Market&
MarketByIDResponse::HasBitSetters::market(const MarketByIDResponse* msg) {
  return *msg->market_;
}
void MarketByIDResponse::clear_market() {
  if (GetArenaNoVirtual() == nullptr && market_ != nullptr) {
    delete market_;
  }
  market_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketByIDResponse::kMarketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketByIDResponse::MarketByIDResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.MarketByIDResponse)
}
MarketByIDResponse::MarketByIDResponse(const MarketByIDResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_market()) {
    market_ = new ::vega::Market(*from.market_);
  } else {
    market_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketByIDResponse)
}

void MarketByIDResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketByIDResponse_proto_2fapi_2ftrading_2eproto.base);
  market_ = nullptr;
}

MarketByIDResponse::~MarketByIDResponse() {
  // @@protoc_insertion_point(destructor:api.MarketByIDResponse)
  SharedDtor();
}

void MarketByIDResponse::SharedDtor() {
  if (this != internal_default_instance()) delete market_;
}

void MarketByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketByIDResponse& MarketByIDResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketByIDResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketByIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && market_ != nullptr) {
    delete market_;
  }
  market_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketByIDResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketByIDResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Market market = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Market::_InternalParse;
        object = msg->mutable_market();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketByIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.MarketByIDResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Market market = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_market()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.MarketByIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.MarketByIDResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketByIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.MarketByIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Market market = 1;
  if (this->has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::market(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.MarketByIDResponse)
}

::google::protobuf::uint8* MarketByIDResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketByIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Market market = 1;
  if (this->has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::market(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketByIDResponse)
  return target;
}

size_t MarketByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketByIDResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Market market = 1;
  if (this->has_market()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *market_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByIDResponse* source =
      ::google::protobuf::DynamicCastToGenerated<MarketByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketByIDResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketByIDResponse)
    MergeFrom(*source);
  }
}

void MarketByIDResponse::MergeFrom(const MarketByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_market()) {
    mutable_market()->::vega::Market::MergeFrom(from.market());
  }
}

void MarketByIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByIDResponse::CopyFrom(const MarketByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByIDResponse::IsInitialized() const {
  return true;
}

void MarketByIDResponse::Swap(MarketByIDResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketByIDResponse::InternalSwap(MarketByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(market_, other->market_);
}

::google::protobuf::Metadata MarketByIDResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PartyByIDRequest::InitAsDefaultInstance() {
}
class PartyByIDRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartyByIDRequest::kPartyIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartyByIDRequest::PartyByIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PartyByIDRequest)
}
PartyByIDRequest::PartyByIDRequest(const PartyByIDRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.PartyByIDRequest)
}

void PartyByIDRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PartyByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PartyByIDRequest::~PartyByIDRequest() {
  // @@protoc_insertion_point(destructor:api.PartyByIDRequest)
  SharedDtor();
}

void PartyByIDRequest::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PartyByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyByIDRequest& PartyByIDRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PartyByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartyByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PartyByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PartyByIDRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PartyByIDRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.PartyByIDRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PartyByIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PartyByIDRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.PartyByIDRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PartyByIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PartyByIDRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PartyByIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PartyByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PartyByIDRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PartyByIDRequest)
}

::google::protobuf::uint8* PartyByIDRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PartyByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PartyByIDRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PartyByIDRequest)
  return target;
}

size_t PartyByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PartyByIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyByIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PartyByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyByIDRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PartyByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PartyByIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PartyByIDRequest)
    MergeFrom(*source);
  }
}

void PartyByIDRequest::MergeFrom(const PartyByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PartyByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
}

void PartyByIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PartyByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyByIDRequest::CopyFrom(const PartyByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PartyByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyByIDRequest::IsInitialized() const {
  return true;
}

void PartyByIDRequest::Swap(PartyByIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartyByIDRequest::InternalSwap(PartyByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PartyByIDRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PartyByIDResponse::InitAsDefaultInstance() {
  ::api::_PartyByIDResponse_default_instance_._instance.get_mutable()->party_ = const_cast< ::vega::Party*>(
      ::vega::Party::internal_default_instance());
}
class PartyByIDResponse::HasBitSetters {
 public:
  static const ::vega::Party& party(const PartyByIDResponse* msg);
};

const ::vega::Party&
PartyByIDResponse::HasBitSetters::party(const PartyByIDResponse* msg) {
  return *msg->party_;
}
void PartyByIDResponse::clear_party() {
  if (GetArenaNoVirtual() == nullptr && party_ != nullptr) {
    delete party_;
  }
  party_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartyByIDResponse::kPartyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartyByIDResponse::PartyByIDResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PartyByIDResponse)
}
PartyByIDResponse::PartyByIDResponse(const PartyByIDResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_party()) {
    party_ = new ::vega::Party(*from.party_);
  } else {
    party_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.PartyByIDResponse)
}

void PartyByIDResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PartyByIDResponse_proto_2fapi_2ftrading_2eproto.base);
  party_ = nullptr;
}

PartyByIDResponse::~PartyByIDResponse() {
  // @@protoc_insertion_point(destructor:api.PartyByIDResponse)
  SharedDtor();
}

void PartyByIDResponse::SharedDtor() {
  if (this != internal_default_instance()) delete party_;
}

void PartyByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyByIDResponse& PartyByIDResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PartyByIDResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartyByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PartyByIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && party_ != nullptr) {
    delete party_;
  }
  party_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PartyByIDResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PartyByIDResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Party party = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Party::_InternalParse;
        object = msg->mutable_party();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PartyByIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PartyByIDResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Party party = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_party()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PartyByIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PartyByIDResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PartyByIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PartyByIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Party party = 1;
  if (this->has_party()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::party(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PartyByIDResponse)
}

::google::protobuf::uint8* PartyByIDResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PartyByIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Party party = 1;
  if (this->has_party()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::party(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PartyByIDResponse)
  return target;
}

size_t PartyByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PartyByIDResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Party party = 1;
  if (this->has_party()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *party_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyByIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PartyByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyByIDResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PartyByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PartyByIDResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PartyByIDResponse)
    MergeFrom(*source);
  }
}

void PartyByIDResponse::MergeFrom(const PartyByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PartyByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_party()) {
    mutable_party()->::vega::Party::MergeFrom(from.party());
  }
}

void PartyByIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PartyByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyByIDResponse::CopyFrom(const PartyByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PartyByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyByIDResponse::IsInitialized() const {
  return true;
}

void PartyByIDResponse::Swap(PartyByIDResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartyByIDResponse::InternalSwap(PartyByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(party_, other->party_);
}

::google::protobuf::Metadata PartyByIDResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PartiesResponse::InitAsDefaultInstance() {
}
class PartiesResponse::HasBitSetters {
 public:
};

void PartiesResponse::clear_parties() {
  parties_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartiesResponse::kPartiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartiesResponse::PartiesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PartiesResponse)
}
PartiesResponse::PartiesResponse(const PartiesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      parties_(from.parties_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.PartiesResponse)
}

void PartiesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PartiesResponse_proto_2fapi_2ftrading_2eproto.base);
}

PartiesResponse::~PartiesResponse() {
  // @@protoc_insertion_point(destructor:api.PartiesResponse)
  SharedDtor();
}

void PartiesResponse::SharedDtor() {
}

void PartiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartiesResponse& PartiesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PartiesResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PartiesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parties_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PartiesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PartiesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Party parties = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Party::_InternalParse;
          object = msg->add_parties();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PartiesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PartiesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Party parties = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_parties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PartiesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PartiesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PartiesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PartiesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Party parties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parties_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->parties(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PartiesResponse)
}

::google::protobuf::uint8* PartiesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PartiesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Party parties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parties_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->parties(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PartiesResponse)
  return target;
}

size_t PartiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PartiesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Party parties = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->parties_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->parties(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartiesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PartiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PartiesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PartiesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PartiesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PartiesResponse)
    MergeFrom(*source);
  }
}

void PartiesResponse::MergeFrom(const PartiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PartiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parties_.MergeFrom(from.parties_);
}

void PartiesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PartiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartiesResponse::CopyFrom(const PartiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PartiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartiesResponse::IsInitialized() const {
  return true;
}

void PartiesResponse::Swap(PartiesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartiesResponse::InternalSwap(PartiesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&parties_)->InternalSwap(CastToBase(&other->parties_));
}

::google::protobuf::Metadata PartiesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TradesByPartyRequest::InitAsDefaultInstance() {
  ::api::_TradesByPartyRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::api::Pagination*>(
      ::api::Pagination::internal_default_instance());
}
class TradesByPartyRequest::HasBitSetters {
 public:
  static const ::api::Pagination& pagination(const TradesByPartyRequest* msg);
};

const ::api::Pagination&
TradesByPartyRequest::HasBitSetters::pagination(const TradesByPartyRequest* msg) {
  return *msg->pagination_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradesByPartyRequest::kPartyIDFieldNumber;
const int TradesByPartyRequest::kMarketIDFieldNumber;
const int TradesByPartyRequest::kPaginationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradesByPartyRequest::TradesByPartyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.TradesByPartyRequest)
}
TradesByPartyRequest::TradesByPartyRequest(const TradesByPartyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.has_pagination()) {
    pagination_ = new ::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.TradesByPartyRequest)
}

void TradesByPartyRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TradesByPartyRequest_proto_2fapi_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagination_ = nullptr;
}

TradesByPartyRequest::~TradesByPartyRequest() {
  // @@protoc_insertion_point(destructor:api.TradesByPartyRequest)
  SharedDtor();
}

void TradesByPartyRequest::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void TradesByPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByPartyRequest& TradesByPartyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TradesByPartyRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesByPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradesByPartyRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TradesByPartyRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.TradesByPartyRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string marketID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.TradesByPartyRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .api.Pagination pagination = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::Pagination::_InternalParse;
        object = msg->mutable_pagination();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradesByPartyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.TradesByPartyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.TradesByPartyRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string marketID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.TradesByPartyRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.Pagination pagination = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pagination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.TradesByPartyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.TradesByPartyRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradesByPartyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.TradesByPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.TradesByPartyRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.TradesByPartyRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->marketid(), output);
  }

  // .api.Pagination pagination = 3;
  if (this->has_pagination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pagination(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.TradesByPartyRequest)
}

::google::protobuf::uint8* TradesByPartyRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesByPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.TradesByPartyRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.TradesByPartyRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->marketid(), target);
  }

  // .api.Pagination pagination = 3;
  if (this->has_pagination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pagination(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesByPartyRequest)
  return target;
}

size_t TradesByPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesByPartyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // .api.Pagination pagination = 3;
  if (this->has_pagination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByPartyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByPartyRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TradesByPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesByPartyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesByPartyRequest)
    MergeFrom(*source);
  }
}

void TradesByPartyRequest::MergeFrom(const TradesByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.has_pagination()) {
    mutable_pagination()->::api::Pagination::MergeFrom(from.pagination());
  }
}

void TradesByPartyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByPartyRequest::CopyFrom(const TradesByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByPartyRequest::IsInitialized() const {
  return true;
}

void TradesByPartyRequest::Swap(TradesByPartyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradesByPartyRequest::InternalSwap(TradesByPartyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pagination_, other->pagination_);
}

::google::protobuf::Metadata TradesByPartyRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TradesByPartyResponse::InitAsDefaultInstance() {
}
class TradesByPartyResponse::HasBitSetters {
 public:
};

void TradesByPartyResponse::clear_trades() {
  trades_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradesByPartyResponse::kTradesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradesByPartyResponse::TradesByPartyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.TradesByPartyResponse)
}
TradesByPartyResponse::TradesByPartyResponse(const TradesByPartyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.TradesByPartyResponse)
}

void TradesByPartyResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TradesByPartyResponse_proto_2fapi_2ftrading_2eproto.base);
}

TradesByPartyResponse::~TradesByPartyResponse() {
  // @@protoc_insertion_point(destructor:api.TradesByPartyResponse)
  SharedDtor();
}

void TradesByPartyResponse::SharedDtor() {
}

void TradesByPartyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByPartyResponse& TradesByPartyResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TradesByPartyResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesByPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradesByPartyResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TradesByPartyResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Trade trades = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Trade::_InternalParse;
          object = msg->add_trades();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradesByPartyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.TradesByPartyResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Trade trades = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.TradesByPartyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.TradesByPartyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradesByPartyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.TradesByPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->trades(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.TradesByPartyResponse)
}

::google::protobuf::uint8* TradesByPartyResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesByPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->trades(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesByPartyResponse)
  return target;
}

size_t TradesByPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesByPartyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trades_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trades(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByPartyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByPartyResponse* source =
      ::google::protobuf::DynamicCastToGenerated<TradesByPartyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesByPartyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesByPartyResponse)
    MergeFrom(*source);
  }
}

void TradesByPartyResponse::MergeFrom(const TradesByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradesByPartyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByPartyResponse::CopyFrom(const TradesByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByPartyResponse::IsInitialized() const {
  return true;
}

void TradesByPartyResponse::Swap(TradesByPartyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradesByPartyResponse::InternalSwap(TradesByPartyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&trades_)->InternalSwap(CastToBase(&other->trades_));
}

::google::protobuf::Metadata TradesByPartyResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TradesByOrderRequest::InitAsDefaultInstance() {
}
class TradesByOrderRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradesByOrderRequest::kOrderIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradesByOrderRequest::TradesByOrderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.TradesByOrderRequest)
}
TradesByOrderRequest::TradesByOrderRequest(const TradesByOrderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orderid().size() > 0) {
    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.TradesByOrderRequest)
}

void TradesByOrderRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TradesByOrderRequest_proto_2fapi_2ftrading_2eproto.base);
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TradesByOrderRequest::~TradesByOrderRequest() {
  // @@protoc_insertion_point(destructor:api.TradesByOrderRequest)
  SharedDtor();
}

void TradesByOrderRequest::SharedDtor() {
  orderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradesByOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByOrderRequest& TradesByOrderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TradesByOrderRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesByOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradesByOrderRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TradesByOrderRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string orderID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.TradesByOrderRequest.orderID");
        object = msg->mutable_orderid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradesByOrderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.TradesByOrderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string orderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderid().data(), static_cast<int>(this->orderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.TradesByOrderRequest.orderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.TradesByOrderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.TradesByOrderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradesByOrderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.TradesByOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.TradesByOrderRequest.orderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->orderid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.TradesByOrderRequest)
}

::google::protobuf::uint8* TradesByOrderRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesByOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.TradesByOrderRequest.orderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesByOrderRequest)
  return target;
}

size_t TradesByOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesByOrderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderID = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByOrderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesByOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByOrderRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TradesByOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesByOrderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesByOrderRequest)
    MergeFrom(*source);
  }
}

void TradesByOrderRequest::MergeFrom(const TradesByOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesByOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
}

void TradesByOrderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesByOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByOrderRequest::CopyFrom(const TradesByOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesByOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByOrderRequest::IsInitialized() const {
  return true;
}

void TradesByOrderRequest::Swap(TradesByOrderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradesByOrderRequest::InternalSwap(TradesByOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TradesByOrderRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TradesByOrderResponse::InitAsDefaultInstance() {
}
class TradesByOrderResponse::HasBitSetters {
 public:
};

void TradesByOrderResponse::clear_trades() {
  trades_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradesByOrderResponse::kTradesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradesByOrderResponse::TradesByOrderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.TradesByOrderResponse)
}
TradesByOrderResponse::TradesByOrderResponse(const TradesByOrderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.TradesByOrderResponse)
}

void TradesByOrderResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TradesByOrderResponse_proto_2fapi_2ftrading_2eproto.base);
}

TradesByOrderResponse::~TradesByOrderResponse() {
  // @@protoc_insertion_point(destructor:api.TradesByOrderResponse)
  SharedDtor();
}

void TradesByOrderResponse::SharedDtor() {
}

void TradesByOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByOrderResponse& TradesByOrderResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TradesByOrderResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesByOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradesByOrderResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TradesByOrderResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Trade trades = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Trade::_InternalParse;
          object = msg->add_trades();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradesByOrderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.TradesByOrderResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Trade trades = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.TradesByOrderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.TradesByOrderResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradesByOrderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.TradesByOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->trades(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.TradesByOrderResponse)
}

::google::protobuf::uint8* TradesByOrderResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesByOrderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->trades(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesByOrderResponse)
  return target;
}

size_t TradesByOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesByOrderResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trades_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trades(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByOrderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesByOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByOrderResponse* source =
      ::google::protobuf::DynamicCastToGenerated<TradesByOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesByOrderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesByOrderResponse)
    MergeFrom(*source);
  }
}

void TradesByOrderResponse::MergeFrom(const TradesByOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesByOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradesByOrderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesByOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByOrderResponse::CopyFrom(const TradesByOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesByOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByOrderResponse::IsInitialized() const {
  return true;
}

void TradesByOrderResponse::Swap(TradesByOrderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradesByOrderResponse::InternalSwap(TradesByOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&trades_)->InternalSwap(CastToBase(&other->trades_));
}

::google::protobuf::Metadata TradesByOrderResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AccountsSubscribeRequest::InitAsDefaultInstance() {
}
class AccountsSubscribeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountsSubscribeRequest::kMarketIDFieldNumber;
const int AccountsSubscribeRequest::kPartyIDFieldNumber;
const int AccountsSubscribeRequest::kAssetFieldNumber;
const int AccountsSubscribeRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountsSubscribeRequest::AccountsSubscribeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.AccountsSubscribeRequest)
}
AccountsSubscribeRequest::AccountsSubscribeRequest(const AccountsSubscribeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset().size() > 0) {
    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:api.AccountsSubscribeRequest)
}

void AccountsSubscribeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AccountsSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

AccountsSubscribeRequest::~AccountsSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.AccountsSubscribeRequest)
  SharedDtor();
}

void AccountsSubscribeRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountsSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountsSubscribeRequest& AccountsSubscribeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AccountsSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AccountsSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.AccountsSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccountsSubscribeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AccountsSubscribeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.AccountsSubscribeRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string partyID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.AccountsSubscribeRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string asset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.AccountsSubscribeRequest.asset");
        object = msg->mutable_asset();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.AccountType type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::vega::AccountType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccountsSubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.AccountsSubscribeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.AccountsSubscribeRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.AccountsSubscribeRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset().data(), static_cast<int>(this->asset().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.AccountsSubscribeRequest.asset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.AccountType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::vega::AccountType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.AccountsSubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.AccountsSubscribeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccountsSubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.AccountsSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AccountsSubscribeRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AccountsSubscribeRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partyid(), output);
  }

  // string asset = 3;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AccountsSubscribeRequest.asset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->asset(), output);
  }

  // .vega.AccountType type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.AccountsSubscribeRequest)
}

::google::protobuf::uint8* AccountsSubscribeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.AccountsSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AccountsSubscribeRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AccountsSubscribeRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partyid(), target);
  }

  // string asset = 3;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.AccountsSubscribeRequest.asset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->asset(), target);
  }

  // .vega.AccountType type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.AccountsSubscribeRequest)
  return target;
}

size_t AccountsSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.AccountsSubscribeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string asset = 3;
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset());
  }

  // .vega.AccountType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountsSubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.AccountsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountsSubscribeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AccountsSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.AccountsSubscribeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.AccountsSubscribeRequest)
    MergeFrom(*source);
  }
}

void AccountsSubscribeRequest::MergeFrom(const AccountsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.AccountsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.asset().size() > 0) {

    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void AccountsSubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.AccountsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountsSubscribeRequest::CopyFrom(const AccountsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.AccountsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountsSubscribeRequest::IsInitialized() const {
  return true;
}

void AccountsSubscribeRequest::Swap(AccountsSubscribeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountsSubscribeRequest::InternalSwap(AccountsSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_.Swap(&other->asset_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::google::protobuf::Metadata AccountsSubscribeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrdersSubscribeRequest::InitAsDefaultInstance() {
}
class OrdersSubscribeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrdersSubscribeRequest::kMarketIDFieldNumber;
const int OrdersSubscribeRequest::kPartyIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrdersSubscribeRequest::OrdersSubscribeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.OrdersSubscribeRequest)
}
OrdersSubscribeRequest::OrdersSubscribeRequest(const OrdersSubscribeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.OrdersSubscribeRequest)
}

void OrdersSubscribeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrdersSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OrdersSubscribeRequest::~OrdersSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.OrdersSubscribeRequest)
  SharedDtor();
}

void OrdersSubscribeRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrdersSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersSubscribeRequest& OrdersSubscribeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrdersSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrdersSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrdersSubscribeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrdersSubscribeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.OrdersSubscribeRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string partyID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.OrdersSubscribeRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrdersSubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.OrdersSubscribeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.OrdersSubscribeRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.OrdersSubscribeRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.OrdersSubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.OrdersSubscribeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrdersSubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.OrdersSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrdersSubscribeRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrdersSubscribeRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partyid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.OrdersSubscribeRequest)
}

::google::protobuf::uint8* OrdersSubscribeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrdersSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrdersSubscribeRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrdersSubscribeRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partyid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrdersSubscribeRequest)
  return target;
}

size_t OrdersSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrdersSubscribeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersSubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrdersSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersSubscribeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<OrdersSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrdersSubscribeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrdersSubscribeRequest)
    MergeFrom(*source);
  }
}

void OrdersSubscribeRequest::MergeFrom(const OrdersSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrdersSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
}

void OrdersSubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrdersSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersSubscribeRequest::CopyFrom(const OrdersSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrdersSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersSubscribeRequest::IsInitialized() const {
  return true;
}

void OrdersSubscribeRequest::Swap(OrdersSubscribeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrdersSubscribeRequest::InternalSwap(OrdersSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata OrdersSubscribeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TradesSubscribeRequest::InitAsDefaultInstance() {
}
class TradesSubscribeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradesSubscribeRequest::kMarketIDFieldNumber;
const int TradesSubscribeRequest::kPartyIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradesSubscribeRequest::TradesSubscribeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.TradesSubscribeRequest)
}
TradesSubscribeRequest::TradesSubscribeRequest(const TradesSubscribeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.TradesSubscribeRequest)
}

void TradesSubscribeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TradesSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TradesSubscribeRequest::~TradesSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.TradesSubscribeRequest)
  SharedDtor();
}

void TradesSubscribeRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradesSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesSubscribeRequest& TradesSubscribeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TradesSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradesSubscribeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TradesSubscribeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.TradesSubscribeRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string partyID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.TradesSubscribeRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradesSubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.TradesSubscribeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.TradesSubscribeRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.TradesSubscribeRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.TradesSubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.TradesSubscribeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradesSubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.TradesSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.TradesSubscribeRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.TradesSubscribeRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partyid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.TradesSubscribeRequest)
}

::google::protobuf::uint8* TradesSubscribeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.TradesSubscribeRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.TradesSubscribeRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partyid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesSubscribeRequest)
  return target;
}

size_t TradesSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesSubscribeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesSubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesSubscribeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TradesSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesSubscribeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesSubscribeRequest)
    MergeFrom(*source);
  }
}

void TradesSubscribeRequest::MergeFrom(const TradesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
}

void TradesSubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesSubscribeRequest::CopyFrom(const TradesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesSubscribeRequest::IsInitialized() const {
  return true;
}

void TradesSubscribeRequest::Swap(TradesSubscribeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradesSubscribeRequest::InternalSwap(TradesSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TradesSubscribeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CandlesSubscribeRequest::InitAsDefaultInstance() {
}
class CandlesSubscribeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CandlesSubscribeRequest::kMarketIDFieldNumber;
const int CandlesSubscribeRequest::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CandlesSubscribeRequest::CandlesSubscribeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.CandlesSubscribeRequest)
}
CandlesSubscribeRequest::CandlesSubscribeRequest(const CandlesSubscribeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  interval_ = from.interval_;
  // @@protoc_insertion_point(copy_constructor:api.CandlesSubscribeRequest)
}

void CandlesSubscribeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CandlesSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interval_ = 0;
}

CandlesSubscribeRequest::~CandlesSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.CandlesSubscribeRequest)
  SharedDtor();
}

void CandlesSubscribeRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CandlesSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CandlesSubscribeRequest& CandlesSubscribeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CandlesSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void CandlesSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.CandlesSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interval_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CandlesSubscribeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CandlesSubscribeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.CandlesSubscribeRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.Interval interval = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_interval(static_cast<::vega::Interval>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CandlesSubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.CandlesSubscribeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.CandlesSubscribeRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Interval interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_interval(static_cast< ::vega::Interval >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.CandlesSubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.CandlesSubscribeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CandlesSubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.CandlesSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.CandlesSubscribeRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // .vega.Interval interval = 2;
  if (this->interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.CandlesSubscribeRequest)
}

::google::protobuf::uint8* CandlesSubscribeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.CandlesSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.CandlesSubscribeRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // .vega.Interval interval = 2;
  if (this->interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.CandlesSubscribeRequest)
  return target;
}

size_t CandlesSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.CandlesSubscribeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // .vega.Interval interval = 2;
  if (this->interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->interval());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandlesSubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.CandlesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CandlesSubscribeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CandlesSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.CandlesSubscribeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.CandlesSubscribeRequest)
    MergeFrom(*source);
  }
}

void CandlesSubscribeRequest::MergeFrom(const CandlesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.CandlesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.interval() != 0) {
    set_interval(from.interval());
  }
}

void CandlesSubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.CandlesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandlesSubscribeRequest::CopyFrom(const CandlesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.CandlesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandlesSubscribeRequest::IsInitialized() const {
  return true;
}

void CandlesSubscribeRequest::Swap(CandlesSubscribeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CandlesSubscribeRequest::InternalSwap(CandlesSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(interval_, other->interval_);
}

::google::protobuf::Metadata CandlesSubscribeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthSubscribeRequest::InitAsDefaultInstance() {
}
class MarketDepthSubscribeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthSubscribeRequest::kMarketIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthSubscribeRequest::MarketDepthSubscribeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.MarketDepthSubscribeRequest)
}
MarketDepthSubscribeRequest::MarketDepthSubscribeRequest(const MarketDepthSubscribeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketDepthSubscribeRequest)
}

void MarketDepthSubscribeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketDepthSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MarketDepthSubscribeRequest::~MarketDepthSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.MarketDepthSubscribeRequest)
  SharedDtor();
}

void MarketDepthSubscribeRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthSubscribeRequest& MarketDepthSubscribeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketDepthSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketDepthSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketDepthSubscribeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketDepthSubscribeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.MarketDepthSubscribeRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketDepthSubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.MarketDepthSubscribeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.MarketDepthSubscribeRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.MarketDepthSubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.MarketDepthSubscribeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketDepthSubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.MarketDepthSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketDepthSubscribeRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.MarketDepthSubscribeRequest)
}

::google::protobuf::uint8* MarketDepthSubscribeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketDepthSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketDepthSubscribeRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketDepthSubscribeRequest)
  return target;
}

size_t MarketDepthSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketDepthSubscribeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthSubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketDepthSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthSubscribeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<MarketDepthSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketDepthSubscribeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketDepthSubscribeRequest)
    MergeFrom(*source);
  }
}

void MarketDepthSubscribeRequest::MergeFrom(const MarketDepthSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketDepthSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
}

void MarketDepthSubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketDepthSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthSubscribeRequest::CopyFrom(const MarketDepthSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketDepthSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthSubscribeRequest::IsInitialized() const {
  return true;
}

void MarketDepthSubscribeRequest::Swap(MarketDepthSubscribeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthSubscribeRequest::InternalSwap(MarketDepthSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata MarketDepthSubscribeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PositionsSubscribeRequest::InitAsDefaultInstance() {
}
class PositionsSubscribeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionsSubscribeRequest::kPartyIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionsSubscribeRequest::PositionsSubscribeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PositionsSubscribeRequest)
}
PositionsSubscribeRequest::PositionsSubscribeRequest(const PositionsSubscribeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.PositionsSubscribeRequest)
}

void PositionsSubscribeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PositionsSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PositionsSubscribeRequest::~PositionsSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.PositionsSubscribeRequest)
  SharedDtor();
}

void PositionsSubscribeRequest::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PositionsSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionsSubscribeRequest& PositionsSubscribeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PositionsSubscribeRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PositionsSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PositionsSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionsSubscribeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PositionsSubscribeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.PositionsSubscribeRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionsSubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PositionsSubscribeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.PositionsSubscribeRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PositionsSubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PositionsSubscribeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionsSubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PositionsSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PositionsSubscribeRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PositionsSubscribeRequest)
}

::google::protobuf::uint8* PositionsSubscribeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PositionsSubscribeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PositionsSubscribeRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PositionsSubscribeRequest)
  return target;
}

size_t PositionsSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PositionsSubscribeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionsSubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PositionsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionsSubscribeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PositionsSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PositionsSubscribeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PositionsSubscribeRequest)
    MergeFrom(*source);
  }
}

void PositionsSubscribeRequest::MergeFrom(const PositionsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PositionsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
}

void PositionsSubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PositionsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionsSubscribeRequest::CopyFrom(const PositionsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PositionsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsSubscribeRequest::IsInitialized() const {
  return true;
}

void PositionsSubscribeRequest::Swap(PositionsSubscribeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionsSubscribeRequest::InternalSwap(PositionsSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PositionsSubscribeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrdersByMarketRequest::InitAsDefaultInstance() {
  ::api::_OrdersByMarketRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::api::Pagination*>(
      ::api::Pagination::internal_default_instance());
}
class OrdersByMarketRequest::HasBitSetters {
 public:
  static const ::api::Pagination& pagination(const OrdersByMarketRequest* msg);
};

const ::api::Pagination&
OrdersByMarketRequest::HasBitSetters::pagination(const OrdersByMarketRequest* msg) {
  return *msg->pagination_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrdersByMarketRequest::kMarketIDFieldNumber;
const int OrdersByMarketRequest::kPaginationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrdersByMarketRequest::OrdersByMarketRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.OrdersByMarketRequest)
}
OrdersByMarketRequest::OrdersByMarketRequest(const OrdersByMarketRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.has_pagination()) {
    pagination_ = new ::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.OrdersByMarketRequest)
}

void OrdersByMarketRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrdersByMarketRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagination_ = nullptr;
}

OrdersByMarketRequest::~OrdersByMarketRequest() {
  // @@protoc_insertion_point(destructor:api.OrdersByMarketRequest)
  SharedDtor();
}

void OrdersByMarketRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void OrdersByMarketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersByMarketRequest& OrdersByMarketRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrdersByMarketRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersByMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrdersByMarketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrdersByMarketRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrdersByMarketRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.OrdersByMarketRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .api.Pagination pagination = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::Pagination::_InternalParse;
        object = msg->mutable_pagination();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrdersByMarketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.OrdersByMarketRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.OrdersByMarketRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.Pagination pagination = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pagination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.OrdersByMarketRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.OrdersByMarketRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrdersByMarketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.OrdersByMarketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrdersByMarketRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // .api.Pagination pagination = 2;
  if (this->has_pagination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pagination(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.OrdersByMarketRequest)
}

::google::protobuf::uint8* OrdersByMarketRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrdersByMarketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrdersByMarketRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // .api.Pagination pagination = 2;
  if (this->has_pagination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pagination(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrdersByMarketRequest)
  return target;
}

size_t OrdersByMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrdersByMarketRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // .api.Pagination pagination = 2;
  if (this->has_pagination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersByMarketRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrdersByMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersByMarketRequest* source =
      ::google::protobuf::DynamicCastToGenerated<OrdersByMarketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrdersByMarketRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrdersByMarketRequest)
    MergeFrom(*source);
  }
}

void OrdersByMarketRequest::MergeFrom(const OrdersByMarketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrdersByMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.has_pagination()) {
    mutable_pagination()->::api::Pagination::MergeFrom(from.pagination());
  }
}

void OrdersByMarketRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrdersByMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersByMarketRequest::CopyFrom(const OrdersByMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrdersByMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersByMarketRequest::IsInitialized() const {
  return true;
}

void OrdersByMarketRequest::Swap(OrdersByMarketRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrdersByMarketRequest::InternalSwap(OrdersByMarketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pagination_, other->pagination_);
}

::google::protobuf::Metadata OrdersByMarketRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrdersByMarketResponse::InitAsDefaultInstance() {
}
class OrdersByMarketResponse::HasBitSetters {
 public:
};

void OrdersByMarketResponse::clear_orders() {
  orders_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrdersByMarketResponse::kOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrdersByMarketResponse::OrdersByMarketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.OrdersByMarketResponse)
}
OrdersByMarketResponse::OrdersByMarketResponse(const OrdersByMarketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.OrdersByMarketResponse)
}

void OrdersByMarketResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrdersByMarketResponse_proto_2fapi_2ftrading_2eproto.base);
}

OrdersByMarketResponse::~OrdersByMarketResponse() {
  // @@protoc_insertion_point(destructor:api.OrdersByMarketResponse)
  SharedDtor();
}

void OrdersByMarketResponse::SharedDtor() {
}

void OrdersByMarketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersByMarketResponse& OrdersByMarketResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrdersByMarketResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersByMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrdersByMarketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrdersByMarketResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrdersByMarketResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Order orders = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Order::_InternalParse;
          object = msg->add_orders();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrdersByMarketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.OrdersByMarketResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Order orders = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_orders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.OrdersByMarketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.OrdersByMarketResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrdersByMarketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.OrdersByMarketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orders_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->orders(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.OrdersByMarketResponse)
}

::google::protobuf::uint8* OrdersByMarketResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrdersByMarketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orders_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->orders(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrdersByMarketResponse)
  return target;
}

size_t OrdersByMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrdersByMarketResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->orders_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->orders(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersByMarketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrdersByMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersByMarketResponse* source =
      ::google::protobuf::DynamicCastToGenerated<OrdersByMarketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrdersByMarketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrdersByMarketResponse)
    MergeFrom(*source);
  }
}

void OrdersByMarketResponse::MergeFrom(const OrdersByMarketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrdersByMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void OrdersByMarketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrdersByMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersByMarketResponse::CopyFrom(const OrdersByMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrdersByMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersByMarketResponse::IsInitialized() const {
  return true;
}

void OrdersByMarketResponse::Swap(OrdersByMarketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrdersByMarketResponse::InternalSwap(OrdersByMarketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&orders_)->InternalSwap(CastToBase(&other->orders_));
}

::google::protobuf::Metadata OrdersByMarketResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrdersByPartyRequest::InitAsDefaultInstance() {
  ::api::_OrdersByPartyRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::api::Pagination*>(
      ::api::Pagination::internal_default_instance());
}
class OrdersByPartyRequest::HasBitSetters {
 public:
  static const ::api::Pagination& pagination(const OrdersByPartyRequest* msg);
};

const ::api::Pagination&
OrdersByPartyRequest::HasBitSetters::pagination(const OrdersByPartyRequest* msg) {
  return *msg->pagination_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrdersByPartyRequest::kPartyIDFieldNumber;
const int OrdersByPartyRequest::kPaginationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrdersByPartyRequest::OrdersByPartyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.OrdersByPartyRequest)
}
OrdersByPartyRequest::OrdersByPartyRequest(const OrdersByPartyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.has_pagination()) {
    pagination_ = new ::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.OrdersByPartyRequest)
}

void OrdersByPartyRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrdersByPartyRequest_proto_2fapi_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagination_ = nullptr;
}

OrdersByPartyRequest::~OrdersByPartyRequest() {
  // @@protoc_insertion_point(destructor:api.OrdersByPartyRequest)
  SharedDtor();
}

void OrdersByPartyRequest::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void OrdersByPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersByPartyRequest& OrdersByPartyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrdersByPartyRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersByPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrdersByPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrdersByPartyRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrdersByPartyRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.OrdersByPartyRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .api.Pagination pagination = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::Pagination::_InternalParse;
        object = msg->mutable_pagination();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrdersByPartyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.OrdersByPartyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.OrdersByPartyRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.Pagination pagination = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pagination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.OrdersByPartyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.OrdersByPartyRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrdersByPartyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.OrdersByPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrdersByPartyRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  // .api.Pagination pagination = 2;
  if (this->has_pagination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pagination(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.OrdersByPartyRequest)
}

::google::protobuf::uint8* OrdersByPartyRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrdersByPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrdersByPartyRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  // .api.Pagination pagination = 2;
  if (this->has_pagination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pagination(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrdersByPartyRequest)
  return target;
}

size_t OrdersByPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrdersByPartyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // .api.Pagination pagination = 2;
  if (this->has_pagination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersByPartyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrdersByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersByPartyRequest* source =
      ::google::protobuf::DynamicCastToGenerated<OrdersByPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrdersByPartyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrdersByPartyRequest)
    MergeFrom(*source);
  }
}

void OrdersByPartyRequest::MergeFrom(const OrdersByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrdersByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.has_pagination()) {
    mutable_pagination()->::api::Pagination::MergeFrom(from.pagination());
  }
}

void OrdersByPartyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrdersByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersByPartyRequest::CopyFrom(const OrdersByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrdersByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersByPartyRequest::IsInitialized() const {
  return true;
}

void OrdersByPartyRequest::Swap(OrdersByPartyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrdersByPartyRequest::InternalSwap(OrdersByPartyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pagination_, other->pagination_);
}

::google::protobuf::Metadata OrdersByPartyRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrdersByPartyResponse::InitAsDefaultInstance() {
}
class OrdersByPartyResponse::HasBitSetters {
 public:
};

void OrdersByPartyResponse::clear_orders() {
  orders_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrdersByPartyResponse::kOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrdersByPartyResponse::OrdersByPartyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.OrdersByPartyResponse)
}
OrdersByPartyResponse::OrdersByPartyResponse(const OrdersByPartyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.OrdersByPartyResponse)
}

void OrdersByPartyResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrdersByPartyResponse_proto_2fapi_2ftrading_2eproto.base);
}

OrdersByPartyResponse::~OrdersByPartyResponse() {
  // @@protoc_insertion_point(destructor:api.OrdersByPartyResponse)
  SharedDtor();
}

void OrdersByPartyResponse::SharedDtor() {
}

void OrdersByPartyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersByPartyResponse& OrdersByPartyResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrdersByPartyResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersByPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrdersByPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrdersByPartyResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrdersByPartyResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Order orders = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Order::_InternalParse;
          object = msg->add_orders();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrdersByPartyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.OrdersByPartyResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Order orders = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_orders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.OrdersByPartyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.OrdersByPartyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrdersByPartyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.OrdersByPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orders_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->orders(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.OrdersByPartyResponse)
}

::google::protobuf::uint8* OrdersByPartyResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrdersByPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orders_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->orders(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrdersByPartyResponse)
  return target;
}

size_t OrdersByPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrdersByPartyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->orders_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->orders(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersByPartyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrdersByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersByPartyResponse* source =
      ::google::protobuf::DynamicCastToGenerated<OrdersByPartyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrdersByPartyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrdersByPartyResponse)
    MergeFrom(*source);
  }
}

void OrdersByPartyResponse::MergeFrom(const OrdersByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrdersByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void OrdersByPartyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrdersByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersByPartyResponse::CopyFrom(const OrdersByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrdersByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersByPartyResponse::IsInitialized() const {
  return true;
}

void OrdersByPartyResponse::Swap(OrdersByPartyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrdersByPartyResponse::InternalSwap(OrdersByPartyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&orders_)->InternalSwap(CastToBase(&other->orders_));
}

::google::protobuf::Metadata OrdersByPartyResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderByMarketAndIdRequest::InitAsDefaultInstance() {
}
class OrderByMarketAndIdRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderByMarketAndIdRequest::kMarketIDFieldNumber;
const int OrderByMarketAndIdRequest::kOrderIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderByMarketAndIdRequest::OrderByMarketAndIdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.OrderByMarketAndIdRequest)
}
OrderByMarketAndIdRequest::OrderByMarketAndIdRequest(const OrderByMarketAndIdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orderid().size() > 0) {
    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.OrderByMarketAndIdRequest)
}

void OrderByMarketAndIdRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderByMarketAndIdRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OrderByMarketAndIdRequest::~OrderByMarketAndIdRequest() {
  // @@protoc_insertion_point(destructor:api.OrderByMarketAndIdRequest)
  SharedDtor();
}

void OrderByMarketAndIdRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderByMarketAndIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByMarketAndIdRequest& OrderByMarketAndIdRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderByMarketAndIdRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByMarketAndIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrderByMarketAndIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderByMarketAndIdRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderByMarketAndIdRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.OrderByMarketAndIdRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string orderID = 2 [(.validator.field) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.OrderByMarketAndIdRequest.orderID");
        object = msg->mutable_orderid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderByMarketAndIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.OrderByMarketAndIdRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.OrderByMarketAndIdRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string orderID = 2 [(.validator.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderid().data(), static_cast<int>(this->orderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.OrderByMarketAndIdRequest.orderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.OrderByMarketAndIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.OrderByMarketAndIdRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderByMarketAndIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.OrderByMarketAndIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrderByMarketAndIdRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // string orderID = 2 [(.validator.field) = {
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrderByMarketAndIdRequest.orderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->orderid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.OrderByMarketAndIdRequest)
}

::google::protobuf::uint8* OrderByMarketAndIdRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrderByMarketAndIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrderByMarketAndIdRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // string orderID = 2 [(.validator.field) = {
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrderByMarketAndIdRequest.orderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrderByMarketAndIdRequest)
  return target;
}

size_t OrderByMarketAndIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrderByMarketAndIdRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string orderID = 2 [(.validator.field) = {
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByMarketAndIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrderByMarketAndIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByMarketAndIdRequest* source =
      ::google::protobuf::DynamicCastToGenerated<OrderByMarketAndIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrderByMarketAndIdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrderByMarketAndIdRequest)
    MergeFrom(*source);
  }
}

void OrderByMarketAndIdRequest::MergeFrom(const OrderByMarketAndIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrderByMarketAndIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
}

void OrderByMarketAndIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrderByMarketAndIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByMarketAndIdRequest::CopyFrom(const OrderByMarketAndIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrderByMarketAndIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByMarketAndIdRequest::IsInitialized() const {
  return true;
}

void OrderByMarketAndIdRequest::Swap(OrderByMarketAndIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderByMarketAndIdRequest::InternalSwap(OrderByMarketAndIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderid_.Swap(&other->orderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata OrderByMarketAndIdRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderByMarketAndIdResponse::InitAsDefaultInstance() {
  ::api::_OrderByMarketAndIdResponse_default_instance_._instance.get_mutable()->order_ = const_cast< ::vega::Order*>(
      ::vega::Order::internal_default_instance());
}
class OrderByMarketAndIdResponse::HasBitSetters {
 public:
  static const ::vega::Order& order(const OrderByMarketAndIdResponse* msg);
};

const ::vega::Order&
OrderByMarketAndIdResponse::HasBitSetters::order(const OrderByMarketAndIdResponse* msg) {
  return *msg->order_;
}
void OrderByMarketAndIdResponse::clear_order() {
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderByMarketAndIdResponse::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderByMarketAndIdResponse::OrderByMarketAndIdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.OrderByMarketAndIdResponse)
}
OrderByMarketAndIdResponse::OrderByMarketAndIdResponse(const OrderByMarketAndIdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.OrderByMarketAndIdResponse)
}

void OrderByMarketAndIdResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderByMarketAndIdResponse_proto_2fapi_2ftrading_2eproto.base);
  order_ = nullptr;
}

OrderByMarketAndIdResponse::~OrderByMarketAndIdResponse() {
  // @@protoc_insertion_point(destructor:api.OrderByMarketAndIdResponse)
  SharedDtor();
}

void OrderByMarketAndIdResponse::SharedDtor() {
  if (this != internal_default_instance()) delete order_;
}

void OrderByMarketAndIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByMarketAndIdResponse& OrderByMarketAndIdResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderByMarketAndIdResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByMarketAndIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrderByMarketAndIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderByMarketAndIdResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderByMarketAndIdResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Order::_InternalParse;
        object = msg->mutable_order();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderByMarketAndIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.OrderByMarketAndIdResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Order order = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.OrderByMarketAndIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.OrderByMarketAndIdResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderByMarketAndIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.OrderByMarketAndIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::order(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.OrderByMarketAndIdResponse)
}

::google::protobuf::uint8* OrderByMarketAndIdResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrderByMarketAndIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::order(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrderByMarketAndIdResponse)
  return target;
}

size_t OrderByMarketAndIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrderByMarketAndIdResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Order order = 1;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *order_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByMarketAndIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrderByMarketAndIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByMarketAndIdResponse* source =
      ::google::protobuf::DynamicCastToGenerated<OrderByMarketAndIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrderByMarketAndIdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrderByMarketAndIdResponse)
    MergeFrom(*source);
  }
}

void OrderByMarketAndIdResponse::MergeFrom(const OrderByMarketAndIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrderByMarketAndIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    mutable_order()->::vega::Order::MergeFrom(from.order());
  }
}

void OrderByMarketAndIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrderByMarketAndIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByMarketAndIdResponse::CopyFrom(const OrderByMarketAndIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrderByMarketAndIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByMarketAndIdResponse::IsInitialized() const {
  return true;
}

void OrderByMarketAndIdResponse::Swap(OrderByMarketAndIdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderByMarketAndIdResponse::InternalSwap(OrderByMarketAndIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::google::protobuf::Metadata OrderByMarketAndIdResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderByReferenceRequest::InitAsDefaultInstance() {
}
class OrderByReferenceRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderByReferenceRequest::kReferenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderByReferenceRequest::OrderByReferenceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.OrderByReferenceRequest)
}
OrderByReferenceRequest::OrderByReferenceRequest(const OrderByReferenceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference().size() > 0) {
    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  // @@protoc_insertion_point(copy_constructor:api.OrderByReferenceRequest)
}

void OrderByReferenceRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderByReferenceRequest_proto_2fapi_2ftrading_2eproto.base);
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OrderByReferenceRequest::~OrderByReferenceRequest() {
  // @@protoc_insertion_point(destructor:api.OrderByReferenceRequest)
  SharedDtor();
}

void OrderByReferenceRequest::SharedDtor() {
  reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderByReferenceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByReferenceRequest& OrderByReferenceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderByReferenceRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByReferenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrderByReferenceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderByReferenceRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderByReferenceRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string reference = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.OrderByReferenceRequest.reference");
        object = msg->mutable_reference();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderByReferenceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.OrderByReferenceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string reference = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference().data(), static_cast<int>(this->reference().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.OrderByReferenceRequest.reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.OrderByReferenceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.OrderByReferenceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderByReferenceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.OrderByReferenceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference = 1 [(.validator.field) = {
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrderByReferenceRequest.reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reference(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.OrderByReferenceRequest)
}

::google::protobuf::uint8* OrderByReferenceRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrderByReferenceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference = 1 [(.validator.field) = {
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrderByReferenceRequest.reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reference(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrderByReferenceRequest)
  return target;
}

size_t OrderByReferenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrderByReferenceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference = 1 [(.validator.field) = {
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByReferenceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrderByReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByReferenceRequest* source =
      ::google::protobuf::DynamicCastToGenerated<OrderByReferenceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrderByReferenceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrderByReferenceRequest)
    MergeFrom(*source);
  }
}

void OrderByReferenceRequest::MergeFrom(const OrderByReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrderByReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
}

void OrderByReferenceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrderByReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByReferenceRequest::CopyFrom(const OrderByReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrderByReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByReferenceRequest::IsInitialized() const {
  return true;
}

void OrderByReferenceRequest::Swap(OrderByReferenceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderByReferenceRequest::InternalSwap(OrderByReferenceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reference_.Swap(&other->reference_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata OrderByReferenceRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderByReferenceResponse::InitAsDefaultInstance() {
  ::api::_OrderByReferenceResponse_default_instance_._instance.get_mutable()->order_ = const_cast< ::vega::Order*>(
      ::vega::Order::internal_default_instance());
}
class OrderByReferenceResponse::HasBitSetters {
 public:
  static const ::vega::Order& order(const OrderByReferenceResponse* msg);
};

const ::vega::Order&
OrderByReferenceResponse::HasBitSetters::order(const OrderByReferenceResponse* msg) {
  return *msg->order_;
}
void OrderByReferenceResponse::clear_order() {
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderByReferenceResponse::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderByReferenceResponse::OrderByReferenceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.OrderByReferenceResponse)
}
OrderByReferenceResponse::OrderByReferenceResponse(const OrderByReferenceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.OrderByReferenceResponse)
}

void OrderByReferenceResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderByReferenceResponse_proto_2fapi_2ftrading_2eproto.base);
  order_ = nullptr;
}

OrderByReferenceResponse::~OrderByReferenceResponse() {
  // @@protoc_insertion_point(destructor:api.OrderByReferenceResponse)
  SharedDtor();
}

void OrderByReferenceResponse::SharedDtor() {
  if (this != internal_default_instance()) delete order_;
}

void OrderByReferenceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByReferenceResponse& OrderByReferenceResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderByReferenceResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByReferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrderByReferenceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderByReferenceResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderByReferenceResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Order::_InternalParse;
        object = msg->mutable_order();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderByReferenceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.OrderByReferenceResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Order order = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.OrderByReferenceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.OrderByReferenceResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderByReferenceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.OrderByReferenceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::order(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.OrderByReferenceResponse)
}

::google::protobuf::uint8* OrderByReferenceResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrderByReferenceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::order(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrderByReferenceResponse)
  return target;
}

size_t OrderByReferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrderByReferenceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Order order = 1;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *order_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByReferenceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrderByReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByReferenceResponse* source =
      ::google::protobuf::DynamicCastToGenerated<OrderByReferenceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrderByReferenceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrderByReferenceResponse)
    MergeFrom(*source);
  }
}

void OrderByReferenceResponse::MergeFrom(const OrderByReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrderByReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    mutable_order()->::vega::Order::MergeFrom(from.order());
  }
}

void OrderByReferenceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrderByReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByReferenceResponse::CopyFrom(const OrderByReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrderByReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByReferenceResponse::IsInitialized() const {
  return true;
}

void OrderByReferenceResponse::Swap(OrderByReferenceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderByReferenceResponse::InternalSwap(OrderByReferenceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::google::protobuf::Metadata OrderByReferenceResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketsResponse::InitAsDefaultInstance() {
}
class MarketsResponse::HasBitSetters {
 public:
};

void MarketsResponse::clear_markets() {
  markets_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketsResponse::kMarketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketsResponse::MarketsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.MarketsResponse)
}
MarketsResponse::MarketsResponse(const MarketsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      markets_(from.markets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.MarketsResponse)
}

void MarketsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketsResponse_proto_2fapi_2ftrading_2eproto.base);
}

MarketsResponse::~MarketsResponse() {
  // @@protoc_insertion_point(destructor:api.MarketsResponse)
  SharedDtor();
}

void MarketsResponse::SharedDtor() {
}

void MarketsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketsResponse& MarketsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketsResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markets_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Market markets = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Market::_InternalParse;
          object = msg->add_markets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.MarketsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Market markets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_markets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.MarketsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.MarketsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.MarketsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Market markets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->markets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->markets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.MarketsResponse)
}

::google::protobuf::uint8* MarketsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Market markets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->markets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->markets(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketsResponse)
  return target;
}

size_t MarketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Market markets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->markets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->markets(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<MarketsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketsResponse)
    MergeFrom(*source);
  }
}

void MarketsResponse::MergeFrom(const MarketsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markets_.MergeFrom(from.markets_);
}

void MarketsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketsResponse::CopyFrom(const MarketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketsResponse::IsInitialized() const {
  return true;
}

void MarketsResponse::Swap(MarketsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketsResponse::InternalSwap(MarketsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&markets_)->InternalSwap(CastToBase(&other->markets_));
}

::google::protobuf::Metadata MarketsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CandlesRequest::InitAsDefaultInstance() {
}
class CandlesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CandlesRequest::kMarketIDFieldNumber;
const int CandlesRequest::kSinceTimestampFieldNumber;
const int CandlesRequest::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CandlesRequest::CandlesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.CandlesRequest)
}
CandlesRequest::CandlesRequest(const CandlesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  ::memcpy(&sincetimestamp_, &from.sincetimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&sincetimestamp_)) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:api.CandlesRequest)
}

void CandlesRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CandlesRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sincetimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&sincetimestamp_)) + sizeof(interval_));
}

CandlesRequest::~CandlesRequest() {
  // @@protoc_insertion_point(destructor:api.CandlesRequest)
  SharedDtor();
}

void CandlesRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CandlesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CandlesRequest& CandlesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CandlesRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void CandlesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.CandlesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sincetimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&sincetimestamp_)) + sizeof(interval_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CandlesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CandlesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.CandlesRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 sinceTimestamp = 2 [(.validator.field) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_sincetimestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.Interval interval = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_interval(static_cast<::vega::Interval>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CandlesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.CandlesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.CandlesRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 sinceTimestamp = 2 [(.validator.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sincetimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Interval interval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_interval(static_cast< ::vega::Interval >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.CandlesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.CandlesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CandlesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.CandlesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.CandlesRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // int64 sinceTimestamp = 2 [(.validator.field) = {
  if (this->sincetimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sincetimestamp(), output);
  }

  // .vega.Interval interval = 3;
  if (this->interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.CandlesRequest)
}

::google::protobuf::uint8* CandlesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.CandlesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.CandlesRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // int64 sinceTimestamp = 2 [(.validator.field) = {
  if (this->sincetimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sincetimestamp(), target);
  }

  // .vega.Interval interval = 3;
  if (this->interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.CandlesRequest)
  return target;
}

size_t CandlesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.CandlesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // int64 sinceTimestamp = 2 [(.validator.field) = {
  if (this->sincetimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sincetimestamp());
  }

  // .vega.Interval interval = 3;
  if (this->interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->interval());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandlesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.CandlesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CandlesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CandlesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.CandlesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.CandlesRequest)
    MergeFrom(*source);
  }
}

void CandlesRequest::MergeFrom(const CandlesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.CandlesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.sincetimestamp() != 0) {
    set_sincetimestamp(from.sincetimestamp());
  }
  if (from.interval() != 0) {
    set_interval(from.interval());
  }
}

void CandlesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.CandlesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandlesRequest::CopyFrom(const CandlesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.CandlesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandlesRequest::IsInitialized() const {
  return true;
}

void CandlesRequest::Swap(CandlesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CandlesRequest::InternalSwap(CandlesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sincetimestamp_, other->sincetimestamp_);
  swap(interval_, other->interval_);
}

::google::protobuf::Metadata CandlesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CandlesResponse::InitAsDefaultInstance() {
}
class CandlesResponse::HasBitSetters {
 public:
};

void CandlesResponse::clear_candles() {
  candles_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CandlesResponse::kCandlesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CandlesResponse::CandlesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.CandlesResponse)
}
CandlesResponse::CandlesResponse(const CandlesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      candles_(from.candles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.CandlesResponse)
}

void CandlesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CandlesResponse_proto_2fapi_2ftrading_2eproto.base);
}

CandlesResponse::~CandlesResponse() {
  // @@protoc_insertion_point(destructor:api.CandlesResponse)
  SharedDtor();
}

void CandlesResponse::SharedDtor() {
}

void CandlesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CandlesResponse& CandlesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CandlesResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void CandlesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.CandlesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candles_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CandlesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CandlesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Candle candles = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Candle::_InternalParse;
          object = msg->add_candles();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CandlesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.CandlesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Candle candles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_candles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.CandlesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.CandlesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CandlesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.CandlesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Candle candles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->candles(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.CandlesResponse)
}

::google::protobuf::uint8* CandlesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.CandlesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Candle candles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->candles(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.CandlesResponse)
  return target;
}

size_t CandlesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.CandlesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Candle candles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->candles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->candles(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandlesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.CandlesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CandlesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CandlesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.CandlesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.CandlesResponse)
    MergeFrom(*source);
  }
}

void CandlesResponse::MergeFrom(const CandlesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.CandlesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candles_.MergeFrom(from.candles_);
}

void CandlesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.CandlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandlesResponse::CopyFrom(const CandlesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.CandlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandlesResponse::IsInitialized() const {
  return true;
}

void CandlesResponse::Swap(CandlesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CandlesResponse::InternalSwap(CandlesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&candles_)->InternalSwap(CastToBase(&other->candles_));
}

::google::protobuf::Metadata CandlesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthRequest::InitAsDefaultInstance() {
}
class MarketDepthRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthRequest::kMarketIDFieldNumber;
const int MarketDepthRequest::kMaxDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthRequest::MarketDepthRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.MarketDepthRequest)
}
MarketDepthRequest::MarketDepthRequest(const MarketDepthRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  maxdepth_ = from.maxdepth_;
  // @@protoc_insertion_point(copy_constructor:api.MarketDepthRequest)
}

void MarketDepthRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketDepthRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxdepth_ = PROTOBUF_ULONGLONG(0);
}

MarketDepthRequest::~MarketDepthRequest() {
  // @@protoc_insertion_point(destructor:api.MarketDepthRequest)
  SharedDtor();
}

void MarketDepthRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthRequest& MarketDepthRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketDepthRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketDepthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxdepth_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketDepthRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketDepthRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.MarketDepthRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 maxDepth = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_maxdepth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketDepthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.MarketDepthRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.MarketDepthRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 maxDepth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxdepth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.MarketDepthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.MarketDepthRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketDepthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.MarketDepthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketDepthRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // uint64 maxDepth = 2;
  if (this->maxdepth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->maxdepth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.MarketDepthRequest)
}

::google::protobuf::uint8* MarketDepthRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketDepthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketDepthRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // uint64 maxDepth = 2;
  if (this->maxdepth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->maxdepth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketDepthRequest)
  return target;
}

size_t MarketDepthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketDepthRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // uint64 maxDepth = 2;
  if (this->maxdepth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maxdepth());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketDepthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthRequest* source =
      ::google::protobuf::DynamicCastToGenerated<MarketDepthRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketDepthRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketDepthRequest)
    MergeFrom(*source);
  }
}

void MarketDepthRequest::MergeFrom(const MarketDepthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketDepthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.maxdepth() != 0) {
    set_maxdepth(from.maxdepth());
  }
}

void MarketDepthRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketDepthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthRequest::CopyFrom(const MarketDepthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketDepthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthRequest::IsInitialized() const {
  return true;
}

void MarketDepthRequest::Swap(MarketDepthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthRequest::InternalSwap(MarketDepthRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(maxdepth_, other->maxdepth_);
}

::google::protobuf::Metadata MarketDepthRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthResponse::InitAsDefaultInstance() {
  ::api::_MarketDepthResponse_default_instance_._instance.get_mutable()->lasttrade_ = const_cast< ::vega::Trade*>(
      ::vega::Trade::internal_default_instance());
}
class MarketDepthResponse::HasBitSetters {
 public:
  static const ::vega::Trade& lasttrade(const MarketDepthResponse* msg);
};

const ::vega::Trade&
MarketDepthResponse::HasBitSetters::lasttrade(const MarketDepthResponse* msg) {
  return *msg->lasttrade_;
}
void MarketDepthResponse::clear_buy() {
  buy_.Clear();
}
void MarketDepthResponse::clear_sell() {
  sell_.Clear();
}
void MarketDepthResponse::clear_lasttrade() {
  if (GetArenaNoVirtual() == nullptr && lasttrade_ != nullptr) {
    delete lasttrade_;
  }
  lasttrade_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthResponse::kMarketIDFieldNumber;
const int MarketDepthResponse::kBuyFieldNumber;
const int MarketDepthResponse::kSellFieldNumber;
const int MarketDepthResponse::kLastTradeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthResponse::MarketDepthResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.MarketDepthResponse)
}
MarketDepthResponse::MarketDepthResponse(const MarketDepthResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      buy_(from.buy_),
      sell_(from.sell_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.has_lasttrade()) {
    lasttrade_ = new ::vega::Trade(*from.lasttrade_);
  } else {
    lasttrade_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketDepthResponse)
}

void MarketDepthResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketDepthResponse_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lasttrade_ = nullptr;
}

MarketDepthResponse::~MarketDepthResponse() {
  // @@protoc_insertion_point(destructor:api.MarketDepthResponse)
  SharedDtor();
}

void MarketDepthResponse::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lasttrade_;
}

void MarketDepthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthResponse& MarketDepthResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketDepthResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketDepthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_.Clear();
  sell_.Clear();
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && lasttrade_ != nullptr) {
    delete lasttrade_;
  }
  lasttrade_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketDepthResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketDepthResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.MarketDepthResponse.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .vega.PriceLevel buy = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::PriceLevel::_InternalParse;
          object = msg->add_buy();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .vega.PriceLevel sell = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::PriceLevel::_InternalParse;
          object = msg->add_sell();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // .vega.Trade lastTrade = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Trade::_InternalParse;
        object = msg->mutable_lasttrade();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketDepthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.MarketDepthResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.MarketDepthResponse.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.PriceLevel buy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.PriceLevel sell = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sell()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Trade lastTrade = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lasttrade()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.MarketDepthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.MarketDepthResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketDepthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.MarketDepthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketDepthResponse.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // repeated .vega.PriceLevel buy = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buy_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->buy(static_cast<int>(i)),
      output);
  }

  // repeated .vega.PriceLevel sell = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sell_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->sell(static_cast<int>(i)),
      output);
  }

  // .vega.Trade lastTrade = 4;
  if (this->has_lasttrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::lasttrade(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.MarketDepthResponse)
}

::google::protobuf::uint8* MarketDepthResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketDepthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketDepthResponse.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // repeated .vega.PriceLevel buy = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buy_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->buy(static_cast<int>(i)), target);
  }

  // repeated .vega.PriceLevel sell = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sell_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->sell(static_cast<int>(i)), target);
  }

  // .vega.Trade lastTrade = 4;
  if (this->has_lasttrade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::lasttrade(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketDepthResponse)
  return target;
}

size_t MarketDepthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketDepthResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.PriceLevel buy = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->buy_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buy(static_cast<int>(i)));
    }
  }

  // repeated .vega.PriceLevel sell = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->sell_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sell(static_cast<int>(i)));
    }
  }

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // .vega.Trade lastTrade = 4;
  if (this->has_lasttrade()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lasttrade_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketDepthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthResponse* source =
      ::google::protobuf::DynamicCastToGenerated<MarketDepthResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketDepthResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketDepthResponse)
    MergeFrom(*source);
  }
}

void MarketDepthResponse::MergeFrom(const MarketDepthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketDepthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_.MergeFrom(from.buy_);
  sell_.MergeFrom(from.sell_);
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.has_lasttrade()) {
    mutable_lasttrade()->::vega::Trade::MergeFrom(from.lasttrade());
  }
}

void MarketDepthResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketDepthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthResponse::CopyFrom(const MarketDepthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketDepthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthResponse::IsInitialized() const {
  return true;
}

void MarketDepthResponse::Swap(MarketDepthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthResponse::InternalSwap(MarketDepthResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&buy_)->InternalSwap(CastToBase(&other->buy_));
  CastToBase(&sell_)->InternalSwap(CastToBase(&other->sell_));
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lasttrade_, other->lasttrade_);
}

::google::protobuf::Metadata MarketDepthResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TradesByMarketRequest::InitAsDefaultInstance() {
  ::api::_TradesByMarketRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::api::Pagination*>(
      ::api::Pagination::internal_default_instance());
}
class TradesByMarketRequest::HasBitSetters {
 public:
  static const ::api::Pagination& pagination(const TradesByMarketRequest* msg);
};

const ::api::Pagination&
TradesByMarketRequest::HasBitSetters::pagination(const TradesByMarketRequest* msg) {
  return *msg->pagination_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradesByMarketRequest::kMarketIDFieldNumber;
const int TradesByMarketRequest::kPaginationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradesByMarketRequest::TradesByMarketRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.TradesByMarketRequest)
}
TradesByMarketRequest::TradesByMarketRequest(const TradesByMarketRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.has_pagination()) {
    pagination_ = new ::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.TradesByMarketRequest)
}

void TradesByMarketRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TradesByMarketRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagination_ = nullptr;
}

TradesByMarketRequest::~TradesByMarketRequest() {
  // @@protoc_insertion_point(destructor:api.TradesByMarketRequest)
  SharedDtor();
}

void TradesByMarketRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void TradesByMarketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByMarketRequest& TradesByMarketRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TradesByMarketRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesByMarketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradesByMarketRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TradesByMarketRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.TradesByMarketRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .api.Pagination pagination = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::Pagination::_InternalParse;
        object = msg->mutable_pagination();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradesByMarketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.TradesByMarketRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.TradesByMarketRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.Pagination pagination = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pagination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.TradesByMarketRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.TradesByMarketRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradesByMarketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.TradesByMarketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.TradesByMarketRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // .api.Pagination pagination = 2;
  if (this->has_pagination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pagination(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.TradesByMarketRequest)
}

::google::protobuf::uint8* TradesByMarketRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesByMarketRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.TradesByMarketRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // .api.Pagination pagination = 2;
  if (this->has_pagination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pagination(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesByMarketRequest)
  return target;
}

size_t TradesByMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesByMarketRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // .api.Pagination pagination = 2;
  if (this->has_pagination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByMarketRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesByMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByMarketRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TradesByMarketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesByMarketRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesByMarketRequest)
    MergeFrom(*source);
  }
}

void TradesByMarketRequest::MergeFrom(const TradesByMarketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesByMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.has_pagination()) {
    mutable_pagination()->::api::Pagination::MergeFrom(from.pagination());
  }
}

void TradesByMarketRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesByMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByMarketRequest::CopyFrom(const TradesByMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesByMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByMarketRequest::IsInitialized() const {
  return true;
}

void TradesByMarketRequest::Swap(TradesByMarketRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradesByMarketRequest::InternalSwap(TradesByMarketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pagination_, other->pagination_);
}

::google::protobuf::Metadata TradesByMarketRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TradesByMarketResponse::InitAsDefaultInstance() {
}
class TradesByMarketResponse::HasBitSetters {
 public:
};

void TradesByMarketResponse::clear_trades() {
  trades_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradesByMarketResponse::kTradesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradesByMarketResponse::TradesByMarketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.TradesByMarketResponse)
}
TradesByMarketResponse::TradesByMarketResponse(const TradesByMarketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.TradesByMarketResponse)
}

void TradesByMarketResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TradesByMarketResponse_proto_2fapi_2ftrading_2eproto.base);
}

TradesByMarketResponse::~TradesByMarketResponse() {
  // @@protoc_insertion_point(destructor:api.TradesByMarketResponse)
  SharedDtor();
}

void TradesByMarketResponse::SharedDtor() {
}

void TradesByMarketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByMarketResponse& TradesByMarketResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TradesByMarketResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesByMarketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradesByMarketResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TradesByMarketResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Trade trades = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Trade::_InternalParse;
          object = msg->add_trades();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradesByMarketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.TradesByMarketResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Trade trades = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.TradesByMarketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.TradesByMarketResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradesByMarketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.TradesByMarketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->trades(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.TradesByMarketResponse)
}

::google::protobuf::uint8* TradesByMarketResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesByMarketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->trades(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesByMarketResponse)
  return target;
}

size_t TradesByMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesByMarketResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trades_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trades(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByMarketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesByMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByMarketResponse* source =
      ::google::protobuf::DynamicCastToGenerated<TradesByMarketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesByMarketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesByMarketResponse)
    MergeFrom(*source);
  }
}

void TradesByMarketResponse::MergeFrom(const TradesByMarketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesByMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradesByMarketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesByMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByMarketResponse::CopyFrom(const TradesByMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesByMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByMarketResponse::IsInitialized() const {
  return true;
}

void TradesByMarketResponse::Swap(TradesByMarketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradesByMarketResponse::InternalSwap(TradesByMarketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&trades_)->InternalSwap(CastToBase(&other->trades_));
}

::google::protobuf::Metadata TradesByMarketResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PositionsByPartyRequest::InitAsDefaultInstance() {
}
class PositionsByPartyRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionsByPartyRequest::kPartyIDFieldNumber;
const int PositionsByPartyRequest::kMarketIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionsByPartyRequest::PositionsByPartyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PositionsByPartyRequest)
}
PositionsByPartyRequest::PositionsByPartyRequest(const PositionsByPartyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.PositionsByPartyRequest)
}

void PositionsByPartyRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PositionsByPartyRequest_proto_2fapi_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PositionsByPartyRequest::~PositionsByPartyRequest() {
  // @@protoc_insertion_point(destructor:api.PositionsByPartyRequest)
  SharedDtor();
}

void PositionsByPartyRequest::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PositionsByPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionsByPartyRequest& PositionsByPartyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PositionsByPartyRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PositionsByPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PositionsByPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionsByPartyRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PositionsByPartyRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.PositionsByPartyRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string marketID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.PositionsByPartyRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionsByPartyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PositionsByPartyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.PositionsByPartyRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string marketID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.PositionsByPartyRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PositionsByPartyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PositionsByPartyRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionsByPartyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PositionsByPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PositionsByPartyRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PositionsByPartyRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->marketid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PositionsByPartyRequest)
}

::google::protobuf::uint8* PositionsByPartyRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PositionsByPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PositionsByPartyRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PositionsByPartyRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->marketid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PositionsByPartyRequest)
  return target;
}

size_t PositionsByPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PositionsByPartyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionsByPartyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PositionsByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionsByPartyRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PositionsByPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PositionsByPartyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PositionsByPartyRequest)
    MergeFrom(*source);
  }
}

void PositionsByPartyRequest::MergeFrom(const PositionsByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PositionsByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
}

void PositionsByPartyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PositionsByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionsByPartyRequest::CopyFrom(const PositionsByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PositionsByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsByPartyRequest::IsInitialized() const {
  return true;
}

void PositionsByPartyRequest::Swap(PositionsByPartyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionsByPartyRequest::InternalSwap(PositionsByPartyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PositionsByPartyRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PositionsByPartyResponse::InitAsDefaultInstance() {
}
class PositionsByPartyResponse::HasBitSetters {
 public:
};

void PositionsByPartyResponse::clear_positions() {
  positions_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionsByPartyResponse::kPositionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionsByPartyResponse::PositionsByPartyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PositionsByPartyResponse)
}
PositionsByPartyResponse::PositionsByPartyResponse(const PositionsByPartyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.PositionsByPartyResponse)
}

void PositionsByPartyResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PositionsByPartyResponse_proto_2fapi_2ftrading_2eproto.base);
}

PositionsByPartyResponse::~PositionsByPartyResponse() {
  // @@protoc_insertion_point(destructor:api.PositionsByPartyResponse)
  SharedDtor();
}

void PositionsByPartyResponse::SharedDtor() {
}

void PositionsByPartyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionsByPartyResponse& PositionsByPartyResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PositionsByPartyResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PositionsByPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PositionsByPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionsByPartyResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PositionsByPartyResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Position positions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Position::_InternalParse;
          object = msg->add_positions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionsByPartyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PositionsByPartyResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Position positions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PositionsByPartyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PositionsByPartyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionsByPartyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PositionsByPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Position positions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->positions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PositionsByPartyResponse)
}

::google::protobuf::uint8* PositionsByPartyResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PositionsByPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Position positions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->positions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->positions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PositionsByPartyResponse)
  return target;
}

size_t PositionsByPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PositionsByPartyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Position positions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->positions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->positions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionsByPartyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PositionsByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionsByPartyResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PositionsByPartyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PositionsByPartyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PositionsByPartyResponse)
    MergeFrom(*source);
  }
}

void PositionsByPartyResponse::MergeFrom(const PositionsByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PositionsByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
}

void PositionsByPartyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PositionsByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionsByPartyResponse::CopyFrom(const PositionsByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PositionsByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsByPartyResponse::IsInitialized() const {
  return true;
}

void PositionsByPartyResponse::Swap(PositionsByPartyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionsByPartyResponse::InternalSwap(PositionsByPartyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&positions_)->InternalSwap(CastToBase(&other->positions_));
}

::google::protobuf::Metadata PositionsByPartyResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VegaTimeResponse::InitAsDefaultInstance() {
}
class VegaTimeResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VegaTimeResponse::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VegaTimeResponse::VegaTimeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.VegaTimeResponse)
}
VegaTimeResponse::VegaTimeResponse(const VegaTimeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:api.VegaTimeResponse)
}

void VegaTimeResponse::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

VegaTimeResponse::~VegaTimeResponse() {
  // @@protoc_insertion_point(destructor:api.VegaTimeResponse)
  SharedDtor();
}

void VegaTimeResponse::SharedDtor() {
}

void VegaTimeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VegaTimeResponse& VegaTimeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VegaTimeResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void VegaTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.VegaTimeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VegaTimeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VegaTimeResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VegaTimeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.VegaTimeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.VegaTimeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.VegaTimeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VegaTimeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.VegaTimeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.VegaTimeResponse)
}

::google::protobuf::uint8* VegaTimeResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.VegaTimeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.VegaTimeResponse)
  return target;
}

size_t VegaTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.VegaTimeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VegaTimeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.VegaTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VegaTimeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<VegaTimeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.VegaTimeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.VegaTimeResponse)
    MergeFrom(*source);
  }
}

void VegaTimeResponse::MergeFrom(const VegaTimeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.VegaTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void VegaTimeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.VegaTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VegaTimeResponse::CopyFrom(const VegaTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.VegaTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VegaTimeResponse::IsInitialized() const {
  return true;
}

void VegaTimeResponse::Swap(VegaTimeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VegaTimeResponse::InternalSwap(VegaTimeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata VegaTimeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Pagination::InitAsDefaultInstance() {
}
class Pagination::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pagination::kSkipFieldNumber;
const int Pagination::kLimitFieldNumber;
const int Pagination::kDescendingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pagination::Pagination()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.Pagination)
}
Pagination::Pagination(const Pagination& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&skip_, &from.skip_,
    static_cast<size_t>(reinterpret_cast<char*>(&descending_) -
    reinterpret_cast<char*>(&skip_)) + sizeof(descending_));
  // @@protoc_insertion_point(copy_constructor:api.Pagination)
}

void Pagination::SharedCtor() {
  ::memset(&skip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&descending_) -
      reinterpret_cast<char*>(&skip_)) + sizeof(descending_));
}

Pagination::~Pagination() {
  // @@protoc_insertion_point(destructor:api.Pagination)
  SharedDtor();
}

void Pagination::SharedDtor() {
}

void Pagination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pagination& Pagination::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Pagination_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void Pagination::Clear() {
// @@protoc_insertion_point(message_clear_start:api.Pagination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&skip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&descending_) -
      reinterpret_cast<char*>(&skip_)) + sizeof(descending_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Pagination::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Pagination*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 skip = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_skip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 limit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool descending = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_descending(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Pagination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.Pagination)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 skip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool descending = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &descending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.Pagination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.Pagination)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Pagination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.Pagination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 skip = 1;
  if (this->skip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skip(), output);
  }

  // uint64 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->limit(), output);
  }

  // bool descending = 3;
  if (this->descending() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->descending(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.Pagination)
}

::google::protobuf::uint8* Pagination::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.Pagination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 skip = 1;
  if (this->skip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skip(), target);
  }

  // uint64 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->limit(), target);
  }

  // bool descending = 3;
  if (this->descending() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->descending(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.Pagination)
  return target;
}

size_t Pagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.Pagination)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 skip = 1;
  if (this->skip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->skip());
  }

  // uint64 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->limit());
  }

  // bool descending = 3;
  if (this->descending() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pagination::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.Pagination)
  GOOGLE_DCHECK_NE(&from, this);
  const Pagination* source =
      ::google::protobuf::DynamicCastToGenerated<Pagination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.Pagination)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.Pagination)
    MergeFrom(*source);
  }
}

void Pagination::MergeFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.Pagination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skip() != 0) {
    set_skip(from.skip());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.descending() != 0) {
    set_descending(from.descending());
  }
}

void Pagination::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pagination::CopyFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pagination::IsInitialized() const {
  return true;
}

void Pagination::Swap(Pagination* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pagination::InternalSwap(Pagination* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(skip_, other->skip_);
  swap(limit_, other->limit_);
  swap(descending_, other->descending_);
}

::google::protobuf::Metadata Pagination::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrdersStream::InitAsDefaultInstance() {
}
class OrdersStream::HasBitSetters {
 public:
};

void OrdersStream::clear_orders() {
  orders_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrdersStream::kOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrdersStream::OrdersStream()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.OrdersStream)
}
OrdersStream::OrdersStream(const OrdersStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.OrdersStream)
}

void OrdersStream::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrdersStream_proto_2fapi_2ftrading_2eproto.base);
}

OrdersStream::~OrdersStream() {
  // @@protoc_insertion_point(destructor:api.OrdersStream)
  SharedDtor();
}

void OrdersStream::SharedDtor() {
}

void OrdersStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersStream& OrdersStream::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrdersStream_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersStream::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrdersStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrdersStream::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrdersStream*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Order orders = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Order::_InternalParse;
          object = msg->add_orders();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrdersStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.OrdersStream)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Order orders = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_orders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.OrdersStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.OrdersStream)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrdersStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.OrdersStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orders_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->orders(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.OrdersStream)
}

::google::protobuf::uint8* OrdersStream::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrdersStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orders_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->orders(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrdersStream)
  return target;
}

size_t OrdersStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrdersStream)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->orders_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->orders(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrdersStream)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersStream* source =
      ::google::protobuf::DynamicCastToGenerated<OrdersStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrdersStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrdersStream)
    MergeFrom(*source);
  }
}

void OrdersStream::MergeFrom(const OrdersStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrdersStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void OrdersStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrdersStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersStream::CopyFrom(const OrdersStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrdersStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersStream::IsInitialized() const {
  return true;
}

void OrdersStream::Swap(OrdersStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrdersStream::InternalSwap(OrdersStream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&orders_)->InternalSwap(CastToBase(&other->orders_));
}

::google::protobuf::Metadata OrdersStream::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TradesStream::InitAsDefaultInstance() {
}
class TradesStream::HasBitSetters {
 public:
};

void TradesStream::clear_trades() {
  trades_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradesStream::kTradesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradesStream::TradesStream()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.TradesStream)
}
TradesStream::TradesStream(const TradesStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.TradesStream)
}

void TradesStream::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TradesStream_proto_2fapi_2ftrading_2eproto.base);
}

TradesStream::~TradesStream() {
  // @@protoc_insertion_point(destructor:api.TradesStream)
  SharedDtor();
}

void TradesStream::SharedDtor() {
}

void TradesStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesStream& TradesStream::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TradesStream_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesStream::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradesStream::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TradesStream*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Trade trades = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Trade::_InternalParse;
          object = msg->add_trades();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradesStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.TradesStream)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Trade trades = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.TradesStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.TradesStream)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradesStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.TradesStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->trades(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.TradesStream)
}

::google::protobuf::uint8* TradesStream::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->trades(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesStream)
  return target;
}

size_t TradesStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesStream)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trades_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trades(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesStream)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesStream* source =
      ::google::protobuf::DynamicCastToGenerated<TradesStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesStream)
    MergeFrom(*source);
  }
}

void TradesStream::MergeFrom(const TradesStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradesStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesStream::CopyFrom(const TradesStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesStream::IsInitialized() const {
  return true;
}

void TradesStream::Swap(TradesStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradesStream::InternalSwap(TradesStream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&trades_)->InternalSwap(CastToBase(&other->trades_));
}

::google::protobuf::Metadata TradesStream::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PartyAccountsRequest::InitAsDefaultInstance() {
}
class PartyAccountsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartyAccountsRequest::kPartyIDFieldNumber;
const int PartyAccountsRequest::kMarketIDFieldNumber;
const int PartyAccountsRequest::kTypeFieldNumber;
const int PartyAccountsRequest::kAssetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartyAccountsRequest::PartyAccountsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PartyAccountsRequest)
}
PartyAccountsRequest::PartyAccountsRequest(const PartyAccountsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset().size() > 0) {
    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:api.PartyAccountsRequest)
}

void PartyAccountsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PartyAccountsRequest_proto_2fapi_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

PartyAccountsRequest::~PartyAccountsRequest() {
  // @@protoc_insertion_point(destructor:api.PartyAccountsRequest)
  SharedDtor();
}

void PartyAccountsRequest::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PartyAccountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyAccountsRequest& PartyAccountsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PartyAccountsRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartyAccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PartyAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PartyAccountsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PartyAccountsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.PartyAccountsRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string marketID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.PartyAccountsRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.AccountType type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::vega::AccountType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string asset = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.PartyAccountsRequest.asset");
        object = msg->mutable_asset();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PartyAccountsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PartyAccountsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.PartyAccountsRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string marketID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.PartyAccountsRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.AccountType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::vega::AccountType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset().data(), static_cast<int>(this->asset().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.PartyAccountsRequest.asset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PartyAccountsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PartyAccountsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PartyAccountsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PartyAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PartyAccountsRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PartyAccountsRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->marketid(), output);
  }

  // .vega.AccountType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // string asset = 4;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PartyAccountsRequest.asset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->asset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PartyAccountsRequest)
}

::google::protobuf::uint8* PartyAccountsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PartyAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PartyAccountsRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PartyAccountsRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->marketid(), target);
  }

  // .vega.AccountType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // string asset = 4;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PartyAccountsRequest.asset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->asset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PartyAccountsRequest)
  return target;
}

size_t PartyAccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PartyAccountsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string asset = 4;
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset());
  }

  // .vega.AccountType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyAccountsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PartyAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyAccountsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PartyAccountsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PartyAccountsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PartyAccountsRequest)
    MergeFrom(*source);
  }
}

void PartyAccountsRequest::MergeFrom(const PartyAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PartyAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.asset().size() > 0) {

    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PartyAccountsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PartyAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyAccountsRequest::CopyFrom(const PartyAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PartyAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyAccountsRequest::IsInitialized() const {
  return true;
}

void PartyAccountsRequest::Swap(PartyAccountsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartyAccountsRequest::InternalSwap(PartyAccountsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_.Swap(&other->asset_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::google::protobuf::Metadata PartyAccountsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PartyAccountsResponse::InitAsDefaultInstance() {
}
class PartyAccountsResponse::HasBitSetters {
 public:
};

void PartyAccountsResponse::clear_accounts() {
  accounts_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartyAccountsResponse::kAccountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartyAccountsResponse::PartyAccountsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PartyAccountsResponse)
}
PartyAccountsResponse::PartyAccountsResponse(const PartyAccountsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.PartyAccountsResponse)
}

void PartyAccountsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PartyAccountsResponse_proto_2fapi_2ftrading_2eproto.base);
}

PartyAccountsResponse::~PartyAccountsResponse() {
  // @@protoc_insertion_point(destructor:api.PartyAccountsResponse)
  SharedDtor();
}

void PartyAccountsResponse::SharedDtor() {
}

void PartyAccountsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyAccountsResponse& PartyAccountsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PartyAccountsResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartyAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PartyAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PartyAccountsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PartyAccountsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Account accounts = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Account::_InternalParse;
          object = msg->add_accounts();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PartyAccountsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PartyAccountsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Account accounts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_accounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PartyAccountsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PartyAccountsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PartyAccountsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PartyAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accounts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->accounts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PartyAccountsResponse)
}

::google::protobuf::uint8* PartyAccountsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PartyAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accounts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->accounts(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PartyAccountsResponse)
  return target;
}

size_t PartyAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PartyAccountsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->accounts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->accounts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyAccountsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PartyAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyAccountsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PartyAccountsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PartyAccountsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PartyAccountsResponse)
    MergeFrom(*source);
  }
}

void PartyAccountsResponse::MergeFrom(const PartyAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PartyAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void PartyAccountsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PartyAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyAccountsResponse::CopyFrom(const PartyAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PartyAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyAccountsResponse::IsInitialized() const {
  return true;
}

void PartyAccountsResponse::Swap(PartyAccountsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartyAccountsResponse::InternalSwap(PartyAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&accounts_)->InternalSwap(CastToBase(&other->accounts_));
}

::google::protobuf::Metadata PartyAccountsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketAccountsRequest::InitAsDefaultInstance() {
}
class MarketAccountsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketAccountsRequest::kMarketIDFieldNumber;
const int MarketAccountsRequest::kAssetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketAccountsRequest::MarketAccountsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.MarketAccountsRequest)
}
MarketAccountsRequest::MarketAccountsRequest(const MarketAccountsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset().size() > 0) {
    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketAccountsRequest)
}

void MarketAccountsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketAccountsRequest_proto_2fapi_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MarketAccountsRequest::~MarketAccountsRequest() {
  // @@protoc_insertion_point(destructor:api.MarketAccountsRequest)
  SharedDtor();
}

void MarketAccountsRequest::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketAccountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketAccountsRequest& MarketAccountsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketAccountsRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketAccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketAccountsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketAccountsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.MarketAccountsRequest.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string asset = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.MarketAccountsRequest.asset");
        object = msg->mutable_asset();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketAccountsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.MarketAccountsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.MarketAccountsRequest.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset().data(), static_cast<int>(this->asset().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.MarketAccountsRequest.asset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.MarketAccountsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.MarketAccountsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketAccountsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.MarketAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketAccountsRequest.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // string asset = 2;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketAccountsRequest.asset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->asset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.MarketAccountsRequest)
}

::google::protobuf::uint8* MarketAccountsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketAccountsRequest.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // string asset = 2;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.MarketAccountsRequest.asset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->asset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketAccountsRequest)
  return target;
}

size_t MarketAccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketAccountsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string asset = 2;
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketAccountsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketAccountsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<MarketAccountsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketAccountsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketAccountsRequest)
    MergeFrom(*source);
  }
}

void MarketAccountsRequest::MergeFrom(const MarketAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.asset().size() > 0) {

    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
}

void MarketAccountsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketAccountsRequest::CopyFrom(const MarketAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketAccountsRequest::IsInitialized() const {
  return true;
}

void MarketAccountsRequest::Swap(MarketAccountsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketAccountsRequest::InternalSwap(MarketAccountsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_.Swap(&other->asset_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata MarketAccountsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketAccountsResponse::InitAsDefaultInstance() {
}
class MarketAccountsResponse::HasBitSetters {
 public:
};

void MarketAccountsResponse::clear_accounts() {
  accounts_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketAccountsResponse::kAccountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketAccountsResponse::MarketAccountsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.MarketAccountsResponse)
}
MarketAccountsResponse::MarketAccountsResponse(const MarketAccountsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.MarketAccountsResponse)
}

void MarketAccountsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketAccountsResponse_proto_2fapi_2ftrading_2eproto.base);
}

MarketAccountsResponse::~MarketAccountsResponse() {
  // @@protoc_insertion_point(destructor:api.MarketAccountsResponse)
  SharedDtor();
}

void MarketAccountsResponse::SharedDtor() {
}

void MarketAccountsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketAccountsResponse& MarketAccountsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketAccountsResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketAccountsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketAccountsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Account accounts = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Account::_InternalParse;
          object = msg->add_accounts();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketAccountsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.MarketAccountsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Account accounts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_accounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.MarketAccountsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.MarketAccountsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketAccountsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.MarketAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accounts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->accounts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.MarketAccountsResponse)
}

::google::protobuf::uint8* MarketAccountsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accounts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->accounts(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketAccountsResponse)
  return target;
}

size_t MarketAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketAccountsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->accounts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->accounts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketAccountsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketAccountsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<MarketAccountsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketAccountsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketAccountsResponse)
    MergeFrom(*source);
  }
}

void MarketAccountsResponse::MergeFrom(const MarketAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void MarketAccountsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketAccountsResponse::CopyFrom(const MarketAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketAccountsResponse::IsInitialized() const {
  return true;
}

void MarketAccountsResponse::Swap(MarketAccountsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketAccountsResponse::InternalSwap(MarketAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&accounts_)->InternalSwap(CastToBase(&other->accounts_));
}

::google::protobuf::Metadata MarketAccountsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrepareProposalRequest::InitAsDefaultInstance() {
  ::api::_PrepareProposalRequest_default_instance_._instance.get_mutable()->proposal_ = const_cast< ::vega::ProposalTerms*>(
      ::vega::ProposalTerms::internal_default_instance());
}
class PrepareProposalRequest::HasBitSetters {
 public:
  static const ::vega::ProposalTerms& proposal(const PrepareProposalRequest* msg);
};

const ::vega::ProposalTerms&
PrepareProposalRequest::HasBitSetters::proposal(const PrepareProposalRequest* msg) {
  return *msg->proposal_;
}
void PrepareProposalRequest::clear_proposal() {
  if (GetArenaNoVirtual() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareProposalRequest::kPartyIDFieldNumber;
const int PrepareProposalRequest::kReferenceFieldNumber;
const int PrepareProposalRequest::kProposalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareProposalRequest::PrepareProposalRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PrepareProposalRequest)
}
PrepareProposalRequest::PrepareProposalRequest(const PrepareProposalRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference().size() > 0) {
    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.has_proposal()) {
    proposal_ = new ::vega::ProposalTerms(*from.proposal_);
  } else {
    proposal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareProposalRequest)
}

void PrepareProposalRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrepareProposalRequest_proto_2fapi_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposal_ = nullptr;
}

PrepareProposalRequest::~PrepareProposalRequest() {
  // @@protoc_insertion_point(destructor:api.PrepareProposalRequest)
  SharedDtor();
}

void PrepareProposalRequest::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proposal_;
}

void PrepareProposalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareProposalRequest& PrepareProposalRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrepareProposalRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareProposalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareProposalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrepareProposalRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrepareProposalRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.PrepareProposalRequest.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string reference = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.PrepareProposalRequest.reference");
        object = msg->mutable_reference();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.ProposalTerms proposal = 3 [(.validator.field) = {
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::ProposalTerms::_InternalParse;
        object = msg->mutable_proposal();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrepareProposalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PrepareProposalRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.PrepareProposalRequest.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference().data(), static_cast<int>(this->reference().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.PrepareProposalRequest.reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.ProposalTerms proposal = 3 [(.validator.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proposal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PrepareProposalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PrepareProposalRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrepareProposalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PrepareProposalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PrepareProposalRequest.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  // string reference = 2;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PrepareProposalRequest.reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reference(), output);
  }

  // .vega.ProposalTerms proposal = 3 [(.validator.field) = {
  if (this->has_proposal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::proposal(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PrepareProposalRequest)
}

::google::protobuf::uint8* PrepareProposalRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareProposalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PrepareProposalRequest.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  // string reference = 2;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.PrepareProposalRequest.reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reference(), target);
  }

  // .vega.ProposalTerms proposal = 3 [(.validator.field) = {
  if (this->has_proposal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::proposal(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareProposalRequest)
  return target;
}

size_t PrepareProposalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareProposalRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string reference = 2;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference());
  }

  // .vega.ProposalTerms proposal = 3 [(.validator.field) = {
  if (this->has_proposal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *proposal_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareProposalRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareProposalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareProposalRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PrepareProposalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareProposalRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareProposalRequest)
    MergeFrom(*source);
  }
}

void PrepareProposalRequest::MergeFrom(const PrepareProposalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareProposalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.has_proposal()) {
    mutable_proposal()->::vega::ProposalTerms::MergeFrom(from.proposal());
  }
}

void PrepareProposalRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareProposalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareProposalRequest::CopyFrom(const PrepareProposalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareProposalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareProposalRequest::IsInitialized() const {
  return true;
}

void PrepareProposalRequest::Swap(PrepareProposalRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareProposalRequest::InternalSwap(PrepareProposalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_.Swap(&other->reference_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(proposal_, other->proposal_);
}

::google::protobuf::Metadata PrepareProposalRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrepareProposalResponse::InitAsDefaultInstance() {
  ::api::_PrepareProposalResponse_default_instance_._instance.get_mutable()->pendingproposal_ = const_cast< ::vega::Proposal*>(
      ::vega::Proposal::internal_default_instance());
}
class PrepareProposalResponse::HasBitSetters {
 public:
  static const ::vega::Proposal& pendingproposal(const PrepareProposalResponse* msg);
};

const ::vega::Proposal&
PrepareProposalResponse::HasBitSetters::pendingproposal(const PrepareProposalResponse* msg) {
  return *msg->pendingproposal_;
}
void PrepareProposalResponse::clear_pendingproposal() {
  if (GetArenaNoVirtual() == nullptr && pendingproposal_ != nullptr) {
    delete pendingproposal_;
  }
  pendingproposal_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareProposalResponse::kBlobFieldNumber;
const int PrepareProposalResponse::kPendingProposalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareProposalResponse::PrepareProposalResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PrepareProposalResponse)
}
PrepareProposalResponse::PrepareProposalResponse(const PrepareProposalResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blob().size() > 0) {
    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  if (from.has_pendingproposal()) {
    pendingproposal_ = new ::vega::Proposal(*from.pendingproposal_);
  } else {
    pendingproposal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareProposalResponse)
}

void PrepareProposalResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrepareProposalResponse_proto_2fapi_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pendingproposal_ = nullptr;
}

PrepareProposalResponse::~PrepareProposalResponse() {
  // @@protoc_insertion_point(destructor:api.PrepareProposalResponse)
  SharedDtor();
}

void PrepareProposalResponse::SharedDtor() {
  blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pendingproposal_;
}

void PrepareProposalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareProposalResponse& PrepareProposalResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrepareProposalResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareProposalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareProposalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pendingproposal_ != nullptr) {
    delete pendingproposal_;
  }
  pendingproposal_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrepareProposalResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrepareProposalResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes blob = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_blob();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.Proposal pendingProposal = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Proposal::_InternalParse;
        object = msg->mutable_pendingproposal();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrepareProposalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PrepareProposalResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes blob = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Proposal pendingProposal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pendingproposal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PrepareProposalResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PrepareProposalResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrepareProposalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PrepareProposalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1;
  if (this->blob().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->blob(), output);
  }

  // .vega.Proposal pendingProposal = 2;
  if (this->has_pendingproposal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pendingproposal(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PrepareProposalResponse)
}

::google::protobuf::uint8* PrepareProposalResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareProposalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1;
  if (this->blob().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->blob(), target);
  }

  // .vega.Proposal pendingProposal = 2;
  if (this->has_pendingproposal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pendingproposal(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareProposalResponse)
  return target;
}

size_t PrepareProposalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareProposalResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1;
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->blob());
  }

  // .vega.Proposal pendingProposal = 2;
  if (this->has_pendingproposal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pendingproposal_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareProposalResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareProposalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareProposalResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PrepareProposalResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareProposalResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareProposalResponse)
    MergeFrom(*source);
  }
}

void PrepareProposalResponse::MergeFrom(const PrepareProposalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareProposalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {

    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  if (from.has_pendingproposal()) {
    mutable_pendingproposal()->::vega::Proposal::MergeFrom(from.pendingproposal());
  }
}

void PrepareProposalResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareProposalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareProposalResponse::CopyFrom(const PrepareProposalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareProposalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareProposalResponse::IsInitialized() const {
  return true;
}

void PrepareProposalResponse::Swap(PrepareProposalResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareProposalResponse::InternalSwap(PrepareProposalResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pendingproposal_, other->pendingproposal_);
}

::google::protobuf::Metadata PrepareProposalResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrepareVoteRequest::InitAsDefaultInstance() {
  ::api::_PrepareVoteRequest_default_instance_._instance.get_mutable()->vote_ = const_cast< ::vega::Vote*>(
      ::vega::Vote::internal_default_instance());
}
class PrepareVoteRequest::HasBitSetters {
 public:
  static const ::vega::Vote& vote(const PrepareVoteRequest* msg);
};

const ::vega::Vote&
PrepareVoteRequest::HasBitSetters::vote(const PrepareVoteRequest* msg) {
  return *msg->vote_;
}
void PrepareVoteRequest::clear_vote() {
  if (GetArenaNoVirtual() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareVoteRequest::kVoteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareVoteRequest::PrepareVoteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PrepareVoteRequest)
}
PrepareVoteRequest::PrepareVoteRequest(const PrepareVoteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vote()) {
    vote_ = new ::vega::Vote(*from.vote_);
  } else {
    vote_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareVoteRequest)
}

void PrepareVoteRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrepareVoteRequest_proto_2fapi_2ftrading_2eproto.base);
  vote_ = nullptr;
}

PrepareVoteRequest::~PrepareVoteRequest() {
  // @@protoc_insertion_point(destructor:api.PrepareVoteRequest)
  SharedDtor();
}

void PrepareVoteRequest::SharedDtor() {
  if (this != internal_default_instance()) delete vote_;
}

void PrepareVoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareVoteRequest& PrepareVoteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrepareVoteRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareVoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareVoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrepareVoteRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrepareVoteRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Vote vote = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Vote::_InternalParse;
        object = msg->mutable_vote();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrepareVoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PrepareVoteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Vote vote = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PrepareVoteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PrepareVoteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrepareVoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PrepareVoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Vote vote = 1 [(.validator.field) = {
  if (this->has_vote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::vote(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PrepareVoteRequest)
}

::google::protobuf::uint8* PrepareVoteRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareVoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Vote vote = 1 [(.validator.field) = {
  if (this->has_vote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::vote(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareVoteRequest)
  return target;
}

size_t PrepareVoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareVoteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Vote vote = 1 [(.validator.field) = {
  if (this->has_vote()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vote_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareVoteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareVoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareVoteRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PrepareVoteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareVoteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareVoteRequest)
    MergeFrom(*source);
  }
}

void PrepareVoteRequest::MergeFrom(const PrepareVoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareVoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vote()) {
    mutable_vote()->::vega::Vote::MergeFrom(from.vote());
  }
}

void PrepareVoteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareVoteRequest::CopyFrom(const PrepareVoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareVoteRequest::IsInitialized() const {
  return true;
}

void PrepareVoteRequest::Swap(PrepareVoteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareVoteRequest::InternalSwap(PrepareVoteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vote_, other->vote_);
}

::google::protobuf::Metadata PrepareVoteRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrepareVoteResponse::InitAsDefaultInstance() {
  ::api::_PrepareVoteResponse_default_instance_._instance.get_mutable()->vote_ = const_cast< ::vega::Vote*>(
      ::vega::Vote::internal_default_instance());
}
class PrepareVoteResponse::HasBitSetters {
 public:
  static const ::vega::Vote& vote(const PrepareVoteResponse* msg);
};

const ::vega::Vote&
PrepareVoteResponse::HasBitSetters::vote(const PrepareVoteResponse* msg) {
  return *msg->vote_;
}
void PrepareVoteResponse::clear_vote() {
  if (GetArenaNoVirtual() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareVoteResponse::kBlobFieldNumber;
const int PrepareVoteResponse::kVoteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareVoteResponse::PrepareVoteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.PrepareVoteResponse)
}
PrepareVoteResponse::PrepareVoteResponse(const PrepareVoteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blob().size() > 0) {
    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  if (from.has_vote()) {
    vote_ = new ::vega::Vote(*from.vote_);
  } else {
    vote_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareVoteResponse)
}

void PrepareVoteResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrepareVoteResponse_proto_2fapi_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vote_ = nullptr;
}

PrepareVoteResponse::~PrepareVoteResponse() {
  // @@protoc_insertion_point(destructor:api.PrepareVoteResponse)
  SharedDtor();
}

void PrepareVoteResponse::SharedDtor() {
  blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vote_;
}

void PrepareVoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareVoteResponse& PrepareVoteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrepareVoteResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareVoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareVoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrepareVoteResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrepareVoteResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes blob = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_blob();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.Vote vote = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Vote::_InternalParse;
        object = msg->mutable_vote();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrepareVoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.PrepareVoteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes blob = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Vote vote = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.PrepareVoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.PrepareVoteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrepareVoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.PrepareVoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1;
  if (this->blob().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->blob(), output);
  }

  // .vega.Vote vote = 2;
  if (this->has_vote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::vote(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.PrepareVoteResponse)
}

::google::protobuf::uint8* PrepareVoteResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareVoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1;
  if (this->blob().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->blob(), target);
  }

  // .vega.Vote vote = 2;
  if (this->has_vote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::vote(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareVoteResponse)
  return target;
}

size_t PrepareVoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareVoteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1;
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->blob());
  }

  // .vega.Vote vote = 2;
  if (this->has_vote()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vote_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareVoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareVoteResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PrepareVoteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareVoteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareVoteResponse)
    MergeFrom(*source);
  }
}

void PrepareVoteResponse::MergeFrom(const PrepareVoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {

    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  if (from.has_vote()) {
    mutable_vote()->::vega::Vote::MergeFrom(from.vote());
  }
}

void PrepareVoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareVoteResponse::CopyFrom(const PrepareVoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareVoteResponse::IsInitialized() const {
  return true;
}

void PrepareVoteResponse::Swap(PrepareVoteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareVoteResponse::InternalSwap(PrepareVoteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vote_, other->vote_);
}

::google::protobuf::Metadata PrepareVoteResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderByIDRequest::InitAsDefaultInstance() {
}
class OrderByIDRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderByIDRequest::kOrderIDFieldNumber;
const int OrderByIDRequest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderByIDRequest::OrderByIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.OrderByIDRequest)
}
OrderByIDRequest::OrderByIDRequest(const OrderByIDRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orderid().size() > 0) {
    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:api.OrderByIDRequest)
}

void OrderByIDRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = PROTOBUF_ULONGLONG(0);
}

OrderByIDRequest::~OrderByIDRequest() {
  // @@protoc_insertion_point(destructor:api.OrderByIDRequest)
  SharedDtor();
}

void OrderByIDRequest::SharedDtor() {
  orderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByIDRequest& OrderByIDRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrderByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderByIDRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderByIDRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string orderID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.OrderByIDRequest.orderID");
        object = msg->mutable_orderid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderByIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.OrderByIDRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string orderID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderid().data(), static_cast<int>(this->orderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.OrderByIDRequest.orderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.OrderByIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.OrderByIDRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderByIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.OrderByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1 [(.validator.field) = {
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrderByIDRequest.orderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->orderid(), output);
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.OrderByIDRequest)
}

::google::protobuf::uint8* OrderByIDRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrderByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1 [(.validator.field) = {
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrderByIDRequest.orderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrderByIDRequest)
  return target;
}

size_t OrderByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrderByIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderID = 1 [(.validator.field) = {
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderid());
  }

  // uint64 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrderByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByIDRequest* source =
      ::google::protobuf::DynamicCastToGenerated<OrderByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrderByIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrderByIDRequest)
    MergeFrom(*source);
  }
}

void OrderByIDRequest::MergeFrom(const OrderByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrderByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void OrderByIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrderByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByIDRequest::CopyFrom(const OrderByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrderByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByIDRequest::IsInitialized() const {
  return true;
}

void OrderByIDRequest::Swap(OrderByIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderByIDRequest::InternalSwap(OrderByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
}

::google::protobuf::Metadata OrderByIDRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderByReferenceIDRequest::InitAsDefaultInstance() {
}
class OrderByReferenceIDRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderByReferenceIDRequest::kReferenceIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderByReferenceIDRequest::OrderByReferenceIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.OrderByReferenceIDRequest)
}
OrderByReferenceIDRequest::OrderByReferenceIDRequest(const OrderByReferenceIDRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  referenceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.referenceid().size() > 0) {
    referenceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referenceid_);
  }
  // @@protoc_insertion_point(copy_constructor:api.OrderByReferenceIDRequest)
}

void OrderByReferenceIDRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderByReferenceIDRequest_proto_2fapi_2ftrading_2eproto.base);
  referenceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OrderByReferenceIDRequest::~OrderByReferenceIDRequest() {
  // @@protoc_insertion_point(destructor:api.OrderByReferenceIDRequest)
  SharedDtor();
}

void OrderByReferenceIDRequest::SharedDtor() {
  referenceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderByReferenceIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByReferenceIDRequest& OrderByReferenceIDRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderByReferenceIDRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByReferenceIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrderByReferenceIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderByReferenceIDRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderByReferenceIDRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string referenceID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.OrderByReferenceIDRequest.referenceID");
        object = msg->mutable_referenceid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderByReferenceIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.OrderByReferenceIDRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string referenceID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referenceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->referenceid().data(), static_cast<int>(this->referenceid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.OrderByReferenceIDRequest.referenceID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.OrderByReferenceIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.OrderByReferenceIDRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderByReferenceIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.OrderByReferenceIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string referenceID = 1 [(.validator.field) = {
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), static_cast<int>(this->referenceid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrderByReferenceIDRequest.referenceID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->referenceid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.OrderByReferenceIDRequest)
}

::google::protobuf::uint8* OrderByReferenceIDRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrderByReferenceIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string referenceID = 1 [(.validator.field) = {
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), static_cast<int>(this->referenceid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrderByReferenceIDRequest.referenceID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->referenceid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrderByReferenceIDRequest)
  return target;
}

size_t OrderByReferenceIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrderByReferenceIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string referenceID = 1 [(.validator.field) = {
  if (this->referenceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->referenceid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByReferenceIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrderByReferenceIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByReferenceIDRequest* source =
      ::google::protobuf::DynamicCastToGenerated<OrderByReferenceIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrderByReferenceIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrderByReferenceIDRequest)
    MergeFrom(*source);
  }
}

void OrderByReferenceIDRequest::MergeFrom(const OrderByReferenceIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrderByReferenceIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.referenceid().size() > 0) {

    referenceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referenceid_);
  }
}

void OrderByReferenceIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrderByReferenceIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByReferenceIDRequest::CopyFrom(const OrderByReferenceIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrderByReferenceIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByReferenceIDRequest::IsInitialized() const {
  return true;
}

void OrderByReferenceIDRequest::Swap(OrderByReferenceIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderByReferenceIDRequest::InternalSwap(OrderByReferenceIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  referenceid_.Swap(&other->referenceid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata OrderByReferenceIDRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderVersionsByIDRequest::InitAsDefaultInstance() {
  ::api::_OrderVersionsByIDRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::api::Pagination*>(
      ::api::Pagination::internal_default_instance());
}
class OrderVersionsByIDRequest::HasBitSetters {
 public:
  static const ::api::Pagination& pagination(const OrderVersionsByIDRequest* msg);
};

const ::api::Pagination&
OrderVersionsByIDRequest::HasBitSetters::pagination(const OrderVersionsByIDRequest* msg) {
  return *msg->pagination_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderVersionsByIDRequest::kOrderIDFieldNumber;
const int OrderVersionsByIDRequest::kPaginationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderVersionsByIDRequest::OrderVersionsByIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.OrderVersionsByIDRequest)
}
OrderVersionsByIDRequest::OrderVersionsByIDRequest(const OrderVersionsByIDRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orderid().size() > 0) {
    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.has_pagination()) {
    pagination_ = new ::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.OrderVersionsByIDRequest)
}

void OrderVersionsByIDRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderVersionsByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagination_ = nullptr;
}

OrderVersionsByIDRequest::~OrderVersionsByIDRequest() {
  // @@protoc_insertion_point(destructor:api.OrderVersionsByIDRequest)
  SharedDtor();
}

void OrderVersionsByIDRequest::SharedDtor() {
  orderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void OrderVersionsByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderVersionsByIDRequest& OrderVersionsByIDRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderVersionsByIDRequest_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderVersionsByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrderVersionsByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderVersionsByIDRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderVersionsByIDRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string orderID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("api.OrderVersionsByIDRequest.orderID");
        object = msg->mutable_orderid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .api.Pagination pagination = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::api::Pagination::_InternalParse;
        object = msg->mutable_pagination();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderVersionsByIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.OrderVersionsByIDRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string orderID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderid().data(), static_cast<int>(this->orderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "api.OrderVersionsByIDRequest.orderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .api.Pagination pagination = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pagination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.OrderVersionsByIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.OrderVersionsByIDRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderVersionsByIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.OrderVersionsByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1 [(.validator.field) = {
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrderVersionsByIDRequest.orderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->orderid(), output);
  }

  // .api.Pagination pagination = 2;
  if (this->has_pagination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pagination(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.OrderVersionsByIDRequest)
}

::google::protobuf::uint8* OrderVersionsByIDRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrderVersionsByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1 [(.validator.field) = {
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "api.OrderVersionsByIDRequest.orderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // .api.Pagination pagination = 2;
  if (this->has_pagination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pagination(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrderVersionsByIDRequest)
  return target;
}

size_t OrderVersionsByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrderVersionsByIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderID = 1 [(.validator.field) = {
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderid());
  }

  // .api.Pagination pagination = 2;
  if (this->has_pagination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderVersionsByIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrderVersionsByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderVersionsByIDRequest* source =
      ::google::protobuf::DynamicCastToGenerated<OrderVersionsByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrderVersionsByIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrderVersionsByIDRequest)
    MergeFrom(*source);
  }
}

void OrderVersionsByIDRequest::MergeFrom(const OrderVersionsByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrderVersionsByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.has_pagination()) {
    mutable_pagination()->::api::Pagination::MergeFrom(from.pagination());
  }
}

void OrderVersionsByIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrderVersionsByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderVersionsByIDRequest::CopyFrom(const OrderVersionsByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrderVersionsByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderVersionsByIDRequest::IsInitialized() const {
  return true;
}

void OrderVersionsByIDRequest::Swap(OrderVersionsByIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderVersionsByIDRequest::InternalSwap(OrderVersionsByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pagination_, other->pagination_);
}

::google::protobuf::Metadata OrderVersionsByIDRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderVersionsResponse::InitAsDefaultInstance() {
}
class OrderVersionsResponse::HasBitSetters {
 public:
};

void OrderVersionsResponse::clear_orders() {
  orders_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderVersionsResponse::kOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderVersionsResponse::OrderVersionsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.OrderVersionsResponse)
}
OrderVersionsResponse::OrderVersionsResponse(const OrderVersionsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.OrderVersionsResponse)
}

void OrderVersionsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderVersionsResponse_proto_2fapi_2ftrading_2eproto.base);
}

OrderVersionsResponse::~OrderVersionsResponse() {
  // @@protoc_insertion_point(destructor:api.OrderVersionsResponse)
  SharedDtor();
}

void OrderVersionsResponse::SharedDtor() {
}

void OrderVersionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderVersionsResponse& OrderVersionsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderVersionsResponse_proto_2fapi_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderVersionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrderVersionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderVersionsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderVersionsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Order orders = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Order::_InternalParse;
          object = msg->add_orders();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderVersionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.OrderVersionsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Order orders = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_orders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.OrderVersionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.OrderVersionsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderVersionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.OrderVersionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orders_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->orders(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:api.OrderVersionsResponse)
}

::google::protobuf::uint8* OrderVersionsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrderVersionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orders_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->orders(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrderVersionsResponse)
  return target;
}

size_t OrderVersionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrderVersionsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->orders_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->orders(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderVersionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrderVersionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderVersionsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<OrderVersionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrderVersionsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrderVersionsResponse)
    MergeFrom(*source);
  }
}

void OrderVersionsResponse::MergeFrom(const OrderVersionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrderVersionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void OrderVersionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrderVersionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderVersionsResponse::CopyFrom(const OrderVersionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrderVersionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderVersionsResponse::IsInitialized() const {
  return true;
}

void OrderVersionsResponse::Swap(OrderVersionsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderVersionsResponse::InternalSwap(OrderVersionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&orders_)->InternalSwap(CastToBase(&other->orders_));
}

::google::protobuf::Metadata OrderVersionsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fapi_2ftrading_2eproto);
  return ::file_level_metadata_proto_2fapi_2ftrading_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::api::PropagateChainEventRequest* Arena::CreateMaybeMessage< ::api::PropagateChainEventRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::PropagateChainEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PropagateChainEventResponse* Arena::CreateMaybeMessage< ::api::PropagateChainEventResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::PropagateChainEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::SubmitTransactionRequest* Arena::CreateMaybeMessage< ::api::SubmitTransactionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::SubmitTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::SubmitTransactionResponse* Arena::CreateMaybeMessage< ::api::SubmitTransactionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::SubmitTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::WithdrawRequest* Arena::CreateMaybeMessage< ::api::WithdrawRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::WithdrawRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::WithdrawResponse* Arena::CreateMaybeMessage< ::api::WithdrawResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::WithdrawResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::NotifyTraderAccountRequest* Arena::CreateMaybeMessage< ::api::NotifyTraderAccountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::NotifyTraderAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::NotifyTraderAccountResponse* Arena::CreateMaybeMessage< ::api::NotifyTraderAccountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::NotifyTraderAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareSubmitOrderResponse* Arena::CreateMaybeMessage< ::api::PrepareSubmitOrderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::PrepareSubmitOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareCancelOrderResponse* Arena::CreateMaybeMessage< ::api::PrepareCancelOrderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::PrepareCancelOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareAmendOrderResponse* Arena::CreateMaybeMessage< ::api::PrepareAmendOrderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::PrepareAmendOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::SubmitOrderRequest* Arena::CreateMaybeMessage< ::api::SubmitOrderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::SubmitOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CancelOrderRequest* Arena::CreateMaybeMessage< ::api::CancelOrderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::CancelOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::AmendOrderRequest* Arena::CreateMaybeMessage< ::api::AmendOrderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::AmendOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::AssetsRequest* Arena::CreateMaybeMessage< ::api::AssetsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::AssetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::AssetsResponse* Arena::CreateMaybeMessage< ::api::AssetsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::AssetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::AssetByIDRequest* Arena::CreateMaybeMessage< ::api::AssetByIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::AssetByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::AssetByIDResponse* Arena::CreateMaybeMessage< ::api::AssetByIDResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::AssetByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNodeSignaturesAggregateRequest* Arena::CreateMaybeMessage< ::api::GetNodeSignaturesAggregateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetNodeSignaturesAggregateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNodeSignaturesAggregateResponse* Arena::CreateMaybeMessage< ::api::GetNodeSignaturesAggregateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetNodeSignaturesAggregateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OptionalProposalState* Arena::CreateMaybeMessage< ::api::OptionalProposalState >(Arena* arena) {
  return Arena::CreateInternal< ::api::OptionalProposalState >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalsRequest* Arena::CreateMaybeMessage< ::api::GetProposalsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalsResponse* Arena::CreateMaybeMessage< ::api::GetProposalsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalsByPartyRequest* Arena::CreateMaybeMessage< ::api::GetProposalsByPartyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetProposalsByPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalsByPartyResponse* Arena::CreateMaybeMessage< ::api::GetProposalsByPartyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetProposalsByPartyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetVotesByPartyRequest* Arena::CreateMaybeMessage< ::api::GetVotesByPartyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetVotesByPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetVotesByPartyResponse* Arena::CreateMaybeMessage< ::api::GetVotesByPartyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetVotesByPartyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNewMarketProposalsRequest* Arena::CreateMaybeMessage< ::api::GetNewMarketProposalsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetNewMarketProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNewMarketProposalsResponse* Arena::CreateMaybeMessage< ::api::GetNewMarketProposalsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetNewMarketProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetUpdateMarketProposalsRequest* Arena::CreateMaybeMessage< ::api::GetUpdateMarketProposalsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetUpdateMarketProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetUpdateMarketProposalsResponse* Arena::CreateMaybeMessage< ::api::GetUpdateMarketProposalsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetUpdateMarketProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNetworkParametersProposalsRequest* Arena::CreateMaybeMessage< ::api::GetNetworkParametersProposalsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetNetworkParametersProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNetworkParametersProposalsResponse* Arena::CreateMaybeMessage< ::api::GetNetworkParametersProposalsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetNetworkParametersProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNewAssetProposalsRequest* Arena::CreateMaybeMessage< ::api::GetNewAssetProposalsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetNewAssetProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNewAssetProposalsResponse* Arena::CreateMaybeMessage< ::api::GetNewAssetProposalsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetNewAssetProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalByIDRequest* Arena::CreateMaybeMessage< ::api::GetProposalByIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetProposalByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalByIDResponse* Arena::CreateMaybeMessage< ::api::GetProposalByIDResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetProposalByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalByReferenceRequest* Arena::CreateMaybeMessage< ::api::GetProposalByReferenceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetProposalByReferenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalByReferenceResponse* Arena::CreateMaybeMessage< ::api::GetProposalByReferenceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::GetProposalByReferenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ObservePartyProposalsRequest* Arena::CreateMaybeMessage< ::api::ObservePartyProposalsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::ObservePartyProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ObserveProposalVotesRequest* Arena::CreateMaybeMessage< ::api::ObserveProposalVotesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::ObserveProposalVotesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ObservePartyVotesRequest* Arena::CreateMaybeMessage< ::api::ObservePartyVotesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::ObservePartyVotesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarginLevelsSubscribeRequest* Arena::CreateMaybeMessage< ::api::MarginLevelsSubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::MarginLevelsSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarginLevelsRequest* Arena::CreateMaybeMessage< ::api::MarginLevelsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::MarginLevelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarginLevelsResponse* Arena::CreateMaybeMessage< ::api::MarginLevelsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::MarginLevelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketsDataSubscribeRequest* Arena::CreateMaybeMessage< ::api::MarketsDataSubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::MarketsDataSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketDataByIDRequest* Arena::CreateMaybeMessage< ::api::MarketDataByIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::MarketDataByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketDataByIDResponse* Arena::CreateMaybeMessage< ::api::MarketDataByIDResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::MarketDataByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketsDataResponse* Arena::CreateMaybeMessage< ::api::MarketsDataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::MarketsDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::LastTradeRequest* Arena::CreateMaybeMessage< ::api::LastTradeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::LastTradeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::LastTradeResponse* Arena::CreateMaybeMessage< ::api::LastTradeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::LastTradeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketByIDRequest* Arena::CreateMaybeMessage< ::api::MarketByIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::MarketByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketByIDResponse* Arena::CreateMaybeMessage< ::api::MarketByIDResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::MarketByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PartyByIDRequest* Arena::CreateMaybeMessage< ::api::PartyByIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::PartyByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PartyByIDResponse* Arena::CreateMaybeMessage< ::api::PartyByIDResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::PartyByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PartiesResponse* Arena::CreateMaybeMessage< ::api::PartiesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::PartiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesByPartyRequest* Arena::CreateMaybeMessage< ::api::TradesByPartyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::TradesByPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesByPartyResponse* Arena::CreateMaybeMessage< ::api::TradesByPartyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::TradesByPartyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesByOrderRequest* Arena::CreateMaybeMessage< ::api::TradesByOrderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::TradesByOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesByOrderResponse* Arena::CreateMaybeMessage< ::api::TradesByOrderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::TradesByOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::AccountsSubscribeRequest* Arena::CreateMaybeMessage< ::api::AccountsSubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::AccountsSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrdersSubscribeRequest* Arena::CreateMaybeMessage< ::api::OrdersSubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::OrdersSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesSubscribeRequest* Arena::CreateMaybeMessage< ::api::TradesSubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::TradesSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CandlesSubscribeRequest* Arena::CreateMaybeMessage< ::api::CandlesSubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::CandlesSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketDepthSubscribeRequest* Arena::CreateMaybeMessage< ::api::MarketDepthSubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::MarketDepthSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PositionsSubscribeRequest* Arena::CreateMaybeMessage< ::api::PositionsSubscribeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::PositionsSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrdersByMarketRequest* Arena::CreateMaybeMessage< ::api::OrdersByMarketRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::OrdersByMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrdersByMarketResponse* Arena::CreateMaybeMessage< ::api::OrdersByMarketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::OrdersByMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrdersByPartyRequest* Arena::CreateMaybeMessage< ::api::OrdersByPartyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::OrdersByPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrdersByPartyResponse* Arena::CreateMaybeMessage< ::api::OrdersByPartyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::OrdersByPartyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrderByMarketAndIdRequest* Arena::CreateMaybeMessage< ::api::OrderByMarketAndIdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::OrderByMarketAndIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrderByMarketAndIdResponse* Arena::CreateMaybeMessage< ::api::OrderByMarketAndIdResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::OrderByMarketAndIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrderByReferenceRequest* Arena::CreateMaybeMessage< ::api::OrderByReferenceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::OrderByReferenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrderByReferenceResponse* Arena::CreateMaybeMessage< ::api::OrderByReferenceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::OrderByReferenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketsResponse* Arena::CreateMaybeMessage< ::api::MarketsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::MarketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CandlesRequest* Arena::CreateMaybeMessage< ::api::CandlesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::CandlesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CandlesResponse* Arena::CreateMaybeMessage< ::api::CandlesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::CandlesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketDepthRequest* Arena::CreateMaybeMessage< ::api::MarketDepthRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::MarketDepthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketDepthResponse* Arena::CreateMaybeMessage< ::api::MarketDepthResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::MarketDepthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesByMarketRequest* Arena::CreateMaybeMessage< ::api::TradesByMarketRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::TradesByMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesByMarketResponse* Arena::CreateMaybeMessage< ::api::TradesByMarketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::TradesByMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PositionsByPartyRequest* Arena::CreateMaybeMessage< ::api::PositionsByPartyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::PositionsByPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PositionsByPartyResponse* Arena::CreateMaybeMessage< ::api::PositionsByPartyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::PositionsByPartyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::VegaTimeResponse* Arena::CreateMaybeMessage< ::api::VegaTimeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::VegaTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::Pagination* Arena::CreateMaybeMessage< ::api::Pagination >(Arena* arena) {
  return Arena::CreateInternal< ::api::Pagination >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrdersStream* Arena::CreateMaybeMessage< ::api::OrdersStream >(Arena* arena) {
  return Arena::CreateInternal< ::api::OrdersStream >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesStream* Arena::CreateMaybeMessage< ::api::TradesStream >(Arena* arena) {
  return Arena::CreateInternal< ::api::TradesStream >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PartyAccountsRequest* Arena::CreateMaybeMessage< ::api::PartyAccountsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::PartyAccountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PartyAccountsResponse* Arena::CreateMaybeMessage< ::api::PartyAccountsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::PartyAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketAccountsRequest* Arena::CreateMaybeMessage< ::api::MarketAccountsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::MarketAccountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketAccountsResponse* Arena::CreateMaybeMessage< ::api::MarketAccountsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::MarketAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareProposalRequest* Arena::CreateMaybeMessage< ::api::PrepareProposalRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::PrepareProposalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareProposalResponse* Arena::CreateMaybeMessage< ::api::PrepareProposalResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::PrepareProposalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareVoteRequest* Arena::CreateMaybeMessage< ::api::PrepareVoteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::PrepareVoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareVoteResponse* Arena::CreateMaybeMessage< ::api::PrepareVoteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::PrepareVoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrderByIDRequest* Arena::CreateMaybeMessage< ::api::OrderByIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::OrderByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrderByReferenceIDRequest* Arena::CreateMaybeMessage< ::api::OrderByReferenceIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::OrderByReferenceIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrderVersionsByIDRequest* Arena::CreateMaybeMessage< ::api::OrderVersionsByIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::api::OrderVersionsByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrderVersionsResponse* Arena::CreateMaybeMessage< ::api::OrderVersionsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::api::OrderVersionsResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
