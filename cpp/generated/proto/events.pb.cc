// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/events.proto

#include "proto/events.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_proto_2fassets_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Asset_proto_2fassets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fevents_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuctionEvent_proto_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fevents_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LossSocialization_proto_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fevents_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MarketEvent_proto_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fevents_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MarketTick_proto_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fevents_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PositionResolution_proto_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fevents_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SettleDistressed_proto_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fevents_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TimeUpdate_proto_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fevents_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TradeSettlement_proto_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fevents_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SettlePosition_proto_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fevents_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TransferResponses_proto_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fevents_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_TxErrorEvent_proto_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vote_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Proposal_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fmarkets_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_Market_proto_2fmarkets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Account_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Deposit_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MarginLevels_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MarketData_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NetworkParameter_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeSignature_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OrderCancellation_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Party_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RiskFactor_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LiquidityProvision_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OrderSubmission_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Order_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Trade_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Withdrawal_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TransferResponse_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_OrderAmendment_proto_2fvega_2eproto;
namespace vega {
class MarketEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketEvent> _instance;
} _MarketEvent_default_instance_;
class TxErrorEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxErrorEvent> _instance;
  const ::vega::OrderSubmission* ordersubmission_;
  const ::vega::OrderAmendment* orderamendment_;
  const ::vega::OrderCancellation* ordercancellation_;
  const ::vega::Proposal* proposal_;
  const ::vega::Vote* vote_;
} _TxErrorEvent_default_instance_;
class TimeUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeUpdate> _instance;
} _TimeUpdate_default_instance_;
class TransferResponsesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferResponses> _instance;
} _TransferResponses_default_instance_;
class PositionResolutionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionResolution> _instance;
} _PositionResolution_default_instance_;
class LossSocializationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LossSocialization> _instance;
} _LossSocialization_default_instance_;
class TradeSettlementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeSettlement> _instance;
} _TradeSettlement_default_instance_;
class SettlePositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SettlePosition> _instance;
} _SettlePosition_default_instance_;
class SettleDistressedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SettleDistressed> _instance;
} _SettleDistressed_default_instance_;
class MarketTickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketTick> _instance;
} _MarketTick_default_instance_;
class AuctionEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuctionEvent> _instance;
} _AuctionEvent_default_instance_;
class BusEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BusEvent> _instance;
  const ::vega::TimeUpdate* timeupdate_;
  const ::vega::TransferResponses* transferresponses_;
  const ::vega::PositionResolution* positionresolution_;
  const ::vega::Order* order_;
  const ::vega::Account* account_;
  const ::vega::Party* party_;
  const ::vega::Trade* trade_;
  const ::vega::MarginLevels* marginlevels_;
  const ::vega::Proposal* proposal_;
  const ::vega::Vote* vote_;
  const ::vega::MarketData* marketdata_;
  const ::vega::NodeSignature* nodesignature_;
  const ::vega::LossSocialization* losssocialization_;
  const ::vega::SettlePosition* settleposition_;
  const ::vega::SettleDistressed* settledistressed_;
  const ::vega::Market* marketcreated_;
  const ::vega::Asset* asset_;
  const ::vega::MarketTick* markettick_;
  const ::vega::Withdrawal* withdrawal_;
  const ::vega::Deposit* deposit_;
  const ::vega::AuctionEvent* auction_;
  const ::vega::RiskFactor* riskfactor_;
  const ::vega::NetworkParameter* networkparameter_;
  const ::vega::LiquidityProvision* liquidityprovision_;
  const ::vega::MarketEvent* market_;
  const ::vega::TxErrorEvent* txerrevent_;
} _BusEvent_default_instance_;
}  // namespace vega
static void InitDefaultsMarketEvent_proto_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarketEvent_default_instance_;
    new (ptr) ::vega::MarketEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::MarketEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketEvent_proto_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketEvent_proto_2fevents_2eproto}, {}};

static void InitDefaultsTxErrorEvent_proto_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TxErrorEvent_default_instance_;
    new (ptr) ::vega::TxErrorEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::TxErrorEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_TxErrorEvent_proto_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsTxErrorEvent_proto_2fevents_2eproto}, {
      &scc_info_OrderSubmission_proto_2fvega_2eproto.base,
      &scc_info_OrderAmendment_proto_2fvega_2eproto.base,
      &scc_info_OrderCancellation_proto_2fvega_2eproto.base,
      &scc_info_Proposal_proto_2fgovernance_2eproto.base,
      &scc_info_Vote_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsTimeUpdate_proto_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TimeUpdate_default_instance_;
    new (ptr) ::vega::TimeUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::TimeUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TimeUpdate_proto_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimeUpdate_proto_2fevents_2eproto}, {}};

static void InitDefaultsTransferResponses_proto_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TransferResponses_default_instance_;
    new (ptr) ::vega::TransferResponses();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::TransferResponses::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransferResponses_proto_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransferResponses_proto_2fevents_2eproto}, {
      &scc_info_TransferResponse_proto_2fvega_2eproto.base,}};

static void InitDefaultsPositionResolution_proto_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PositionResolution_default_instance_;
    new (ptr) ::vega::PositionResolution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::PositionResolution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PositionResolution_proto_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPositionResolution_proto_2fevents_2eproto}, {}};

static void InitDefaultsLossSocialization_proto_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LossSocialization_default_instance_;
    new (ptr) ::vega::LossSocialization();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::LossSocialization::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LossSocialization_proto_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLossSocialization_proto_2fevents_2eproto}, {}};

static void InitDefaultsTradeSettlement_proto_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TradeSettlement_default_instance_;
    new (ptr) ::vega::TradeSettlement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::TradeSettlement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TradeSettlement_proto_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTradeSettlement_proto_2fevents_2eproto}, {}};

static void InitDefaultsSettlePosition_proto_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_SettlePosition_default_instance_;
    new (ptr) ::vega::SettlePosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::SettlePosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SettlePosition_proto_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSettlePosition_proto_2fevents_2eproto}, {
      &scc_info_TradeSettlement_proto_2fevents_2eproto.base,}};

static void InitDefaultsSettleDistressed_proto_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_SettleDistressed_default_instance_;
    new (ptr) ::vega::SettleDistressed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::SettleDistressed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SettleDistressed_proto_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSettleDistressed_proto_2fevents_2eproto}, {}};

static void InitDefaultsMarketTick_proto_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarketTick_default_instance_;
    new (ptr) ::vega::MarketTick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::MarketTick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketTick_proto_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketTick_proto_2fevents_2eproto}, {}};

static void InitDefaultsAuctionEvent_proto_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_AuctionEvent_default_instance_;
    new (ptr) ::vega::AuctionEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::AuctionEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuctionEvent_proto_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuctionEvent_proto_2fevents_2eproto}, {}};

static void InitDefaultsBusEvent_proto_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_BusEvent_default_instance_;
    new (ptr) ::vega::BusEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::BusEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<26> scc_info_BusEvent_proto_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 26, InitDefaultsBusEvent_proto_2fevents_2eproto}, {
      &scc_info_TimeUpdate_proto_2fevents_2eproto.base,
      &scc_info_TransferResponses_proto_2fevents_2eproto.base,
      &scc_info_PositionResolution_proto_2fevents_2eproto.base,
      &scc_info_Order_proto_2fvega_2eproto.base,
      &scc_info_Account_proto_2fvega_2eproto.base,
      &scc_info_Party_proto_2fvega_2eproto.base,
      &scc_info_Trade_proto_2fvega_2eproto.base,
      &scc_info_MarginLevels_proto_2fvega_2eproto.base,
      &scc_info_Proposal_proto_2fgovernance_2eproto.base,
      &scc_info_Vote_proto_2fgovernance_2eproto.base,
      &scc_info_MarketData_proto_2fvega_2eproto.base,
      &scc_info_NodeSignature_proto_2fvega_2eproto.base,
      &scc_info_LossSocialization_proto_2fevents_2eproto.base,
      &scc_info_SettlePosition_proto_2fevents_2eproto.base,
      &scc_info_SettleDistressed_proto_2fevents_2eproto.base,
      &scc_info_Market_proto_2fmarkets_2eproto.base,
      &scc_info_Asset_proto_2fassets_2eproto.base,
      &scc_info_MarketTick_proto_2fevents_2eproto.base,
      &scc_info_Withdrawal_proto_2fvega_2eproto.base,
      &scc_info_Deposit_proto_2fvega_2eproto.base,
      &scc_info_AuctionEvent_proto_2fevents_2eproto.base,
      &scc_info_RiskFactor_proto_2fvega_2eproto.base,
      &scc_info_NetworkParameter_proto_2fvega_2eproto.base,
      &scc_info_LiquidityProvision_proto_2fvega_2eproto.base,
      &scc_info_MarketEvent_proto_2fevents_2eproto.base,
      &scc_info_TxErrorEvent_proto_2fevents_2eproto.base,}};

void InitDefaults_proto_2fevents_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_MarketEvent_proto_2fevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxErrorEvent_proto_2fevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimeUpdate_proto_2fevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransferResponses_proto_2fevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PositionResolution_proto_2fevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LossSocialization_proto_2fevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradeSettlement_proto_2fevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SettlePosition_proto_2fevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SettleDistressed_proto_2fevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketTick_proto_2fevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuctionEvent_proto_2fevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BusEvent_proto_2fevents_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_proto_2fevents_2eproto[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_proto_2fevents_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_proto_2fevents_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_proto_2fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarketEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarketEvent, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketEvent, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TxErrorEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::TxErrorEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TxErrorEvent, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::TxErrorEvent, errmsg_),
  offsetof(::vega::TxErrorEventDefaultTypeInternal, ordersubmission_),
  offsetof(::vega::TxErrorEventDefaultTypeInternal, orderamendment_),
  offsetof(::vega::TxErrorEventDefaultTypeInternal, ordercancellation_),
  offsetof(::vega::TxErrorEventDefaultTypeInternal, proposal_),
  offsetof(::vega::TxErrorEventDefaultTypeInternal, vote_),
  PROTOBUF_FIELD_OFFSET(::vega::TxErrorEvent, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TimeUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TimeUpdate, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TransferResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TransferResponses, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PositionResolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PositionResolution, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::PositionResolution, distressed_),
  PROTOBUF_FIELD_OFFSET(::vega::PositionResolution, closed_),
  PROTOBUF_FIELD_OFFSET(::vega::PositionResolution, markprice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LossSocialization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LossSocialization, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::LossSocialization, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::LossSocialization, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TradeSettlement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TradeSettlement, size_),
  PROTOBUF_FIELD_OFFSET(::vega::TradeSettlement, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::SettlePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::SettlePosition, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::SettlePosition, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::SettlePosition, price_),
  PROTOBUF_FIELD_OFFSET(::vega::SettlePosition, tradesettlements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::SettleDistressed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::SettleDistressed, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::SettleDistressed, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::SettleDistressed, margin_),
  PROTOBUF_FIELD_OFFSET(::vega::SettleDistressed, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarketTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarketTick, id_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketTick, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::AuctionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::AuctionEvent, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionEvent, openingauction_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionEvent, leave_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionEvent, start_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionEvent, end_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionEvent, trigger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::BusEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::BusEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::BusEvent, id_),
  PROTOBUF_FIELD_OFFSET(::vega::BusEvent, block_),
  PROTOBUF_FIELD_OFFSET(::vega::BusEvent, type_),
  offsetof(::vega::BusEventDefaultTypeInternal, timeupdate_),
  offsetof(::vega::BusEventDefaultTypeInternal, transferresponses_),
  offsetof(::vega::BusEventDefaultTypeInternal, positionresolution_),
  offsetof(::vega::BusEventDefaultTypeInternal, order_),
  offsetof(::vega::BusEventDefaultTypeInternal, account_),
  offsetof(::vega::BusEventDefaultTypeInternal, party_),
  offsetof(::vega::BusEventDefaultTypeInternal, trade_),
  offsetof(::vega::BusEventDefaultTypeInternal, marginlevels_),
  offsetof(::vega::BusEventDefaultTypeInternal, proposal_),
  offsetof(::vega::BusEventDefaultTypeInternal, vote_),
  offsetof(::vega::BusEventDefaultTypeInternal, marketdata_),
  offsetof(::vega::BusEventDefaultTypeInternal, nodesignature_),
  offsetof(::vega::BusEventDefaultTypeInternal, losssocialization_),
  offsetof(::vega::BusEventDefaultTypeInternal, settleposition_),
  offsetof(::vega::BusEventDefaultTypeInternal, settledistressed_),
  offsetof(::vega::BusEventDefaultTypeInternal, marketcreated_),
  offsetof(::vega::BusEventDefaultTypeInternal, asset_),
  offsetof(::vega::BusEventDefaultTypeInternal, markettick_),
  offsetof(::vega::BusEventDefaultTypeInternal, withdrawal_),
  offsetof(::vega::BusEventDefaultTypeInternal, deposit_),
  offsetof(::vega::BusEventDefaultTypeInternal, auction_),
  offsetof(::vega::BusEventDefaultTypeInternal, riskfactor_),
  offsetof(::vega::BusEventDefaultTypeInternal, networkparameter_),
  offsetof(::vega::BusEventDefaultTypeInternal, liquidityprovision_),
  offsetof(::vega::BusEventDefaultTypeInternal, market_),
  offsetof(::vega::BusEventDefaultTypeInternal, txerrevent_),
  PROTOBUF_FIELD_OFFSET(::vega::BusEvent, event_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::MarketEvent)},
  { 7, -1, sizeof(::vega::TxErrorEvent)},
  { 20, -1, sizeof(::vega::TimeUpdate)},
  { 26, -1, sizeof(::vega::TransferResponses)},
  { 32, -1, sizeof(::vega::PositionResolution)},
  { 41, -1, sizeof(::vega::LossSocialization)},
  { 49, -1, sizeof(::vega::TradeSettlement)},
  { 56, -1, sizeof(::vega::SettlePosition)},
  { 65, -1, sizeof(::vega::SettleDistressed)},
  { 74, -1, sizeof(::vega::MarketTick)},
  { 81, -1, sizeof(::vega::AuctionEvent)},
  { 92, -1, sizeof(::vega::BusEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_MarketEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_TxErrorEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_TimeUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_TransferResponses_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_PositionResolution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_LossSocialization_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_TradeSettlement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_SettlePosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_SettleDistressed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_MarketTick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_AuctionEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_BusEvent_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_proto_2fevents_2eproto = {
  {}, AddDescriptors_proto_2fevents_2eproto, "proto/events.proto", schemas,
  file_default_instances, TableStruct_proto_2fevents_2eproto::offsets,
  file_level_metadata_proto_2fevents_2eproto, 12, file_level_enum_descriptors_proto_2fevents_2eproto, file_level_service_descriptors_proto_2fevents_2eproto,
};

const char descriptor_table_protodef_proto_2fevents_2eproto[] =
  "\n\022proto/events.proto\022\004vega\032\023proto/market"
  "s.proto\032\022proto/assets.proto\032\026proto/gover"
  "nance.proto\032\020proto/vega.proto\"0\n\013MarketE"
  "vent\022\020\n\010marketID\030\001 \001(\t\022\017\n\007payload\030\002 \001(\t\""
  "\226\002\n\014TxErrorEvent\022\017\n\007PartyID\030\001 \001(\t\022\016\n\006err"
  "Msg\030\002 \001(\t\0220\n\017orderSubmission\030e \001(\0132\025.veg"
  "a.OrderSubmissionH\000\022.\n\016orderAmendment\030f "
  "\001(\0132\024.vega.OrderAmendmentH\000\0224\n\021orderCanc"
  "ellation\030g \001(\0132\027.vega.OrderCancellationH"
  "\000\022\"\n\010proposal\030h \001(\0132\016.vega.ProposalH\000\022\032\n"
  "\004vote\030i \001(\0132\n.vega.VoteH\000B\r\n\013transaction"
  "\"\037\n\nTimeUpdate\022\021\n\ttimestamp\030\001 \001(\003\">\n\021Tra"
  "nsferResponses\022)\n\tresponses\030\001 \003(\0132\026.vega"
  ".TransferResponse\"]\n\022PositionResolution\022"
  "\020\n\010marketID\030\001 \001(\t\022\022\n\ndistressed\030\002 \001(\003\022\016\n"
  "\006closed\030\003 \001(\003\022\021\n\tmarkPrice\030\004 \001(\004\"F\n\021Loss"
  "Socialization\022\020\n\010marketID\030\001 \001(\t\022\017\n\007party"
  "ID\030\002 \001(\t\022\016\n\006amount\030\003 \001(\003\".\n\017TradeSettlem"
  "ent\022\014\n\004size\030\001 \001(\003\022\r\n\005price\030\002 \001(\004\"s\n\016Sett"
  "lePosition\022\020\n\010marketID\030\001 \001(\t\022\017\n\007partyID\030"
  "\002 \001(\t\022\r\n\005price\030\003 \001(\004\022/\n\020tradeSettlements"
  "\030\004 \003(\0132\025.vega.TradeSettlement\"T\n\020SettleD"
  "istressed\022\020\n\010marketID\030\001 \001(\t\022\017\n\007partyID\030\002"
  " \001(\t\022\016\n\006margin\030\003 \001(\004\022\r\n\005price\030\004 \001(\004\"&\n\nM"
  "arketTick\022\n\n\002ID\030\001 \001(\t\022\014\n\004time\030\002 \001(\003\"\212\001\n\014"
  "AuctionEvent\022\020\n\010marketID\030\001 \001(\t\022\026\n\016openin"
  "gAuction\030\002 \001(\010\022\r\n\005leave\030\003 \001(\010\022\r\n\005start\030\004"
  " \001(\003\022\013\n\003end\030\005 \001(\003\022%\n\007trigger\030\006 \001(\0162\024.veg"
  "a.AuctionTrigger\"\201\t\n\010BusEvent\022\n\n\002ID\030\001 \001("
  "\t\022\r\n\005block\030\002 \001(\t\022 \n\004type\030\003 \001(\0162\022.vega.Bu"
  "sEventType\022&\n\ntimeUpdate\030e \001(\0132\020.vega.Ti"
  "meUpdateH\000\0224\n\021transferResponses\030f \001(\0132\027."
  "vega.TransferResponsesH\000\0226\n\022positionReso"
  "lution\030g \001(\0132\030.vega.PositionResolutionH\000"
  "\022\034\n\005order\030h \001(\0132\013.vega.OrderH\000\022 \n\007accoun"
  "t\030i \001(\0132\r.vega.AccountH\000\022\034\n\005party\030j \001(\0132"
  "\013.vega.PartyH\000\022\034\n\005trade\030k \001(\0132\013.vega.Tra"
  "deH\000\022*\n\014marginLevels\030l \001(\0132\022.vega.Margin"
  "LevelsH\000\022\"\n\010proposal\030m \001(\0132\016.vega.Propos"
  "alH\000\022\032\n\004vote\030n \001(\0132\n.vega.VoteH\000\022&\n\nmark"
  "etData\030o \001(\0132\020.vega.MarketDataH\000\022,\n\rnode"
  "Signature\030p \001(\0132\023.vega.NodeSignatureH\000\0224"
  "\n\021lossSocialization\030q \001(\0132\027.vega.LossSoc"
  "ializationH\000\022.\n\016settlePosition\030r \001(\0132\024.v"
  "ega.SettlePositionH\000\0222\n\020settleDistressed"
  "\030s \001(\0132\026.vega.SettleDistressedH\000\022%\n\rmark"
  "etCreated\030t \001(\0132\014.vega.MarketH\000\022\034\n\005asset"
  "\030u \001(\0132\013.vega.AssetH\000\022&\n\nmarketTick\030v \001("
  "\0132\020.vega.MarketTickH\000\022&\n\nwithdrawal\030w \001("
  "\0132\020.vega.WithdrawalH\000\022 \n\007deposit\030x \001(\0132\r"
  ".vega.DepositH\000\022%\n\007auction\030y \001(\0132\022.vega."
  "AuctionEventH\000\022&\n\nriskFactor\030z \001(\0132\020.veg"
  "a.RiskFactorH\000\0222\n\020networkParameter\030{ \001(\013"
  "2\026.vega.NetworkParameterH\000\0226\n\022liquidityP"
  "rovision\030| \001(\0132\030.vega.LiquidityProvision"
  "H\000\022$\n\006market\030\351\007 \001(\0132\021.vega.MarketEventH\000"
  "\022)\n\ntxErrEvent\030\321\017 \001(\0132\022.vega.TxErrorEven"
  "tH\000B\007\n\005event*\206\007\n\014BusEventType\022\036\n\032BUS_EVE"
  "NT_TYPE_UNSPECIFIED\020\000\022\026\n\022BUS_EVENT_TYPE_"
  "ALL\020\001\022\036\n\032BUS_EVENT_TYPE_TIME_UPDATE\020\002\022%\n"
  "!BUS_EVENT_TYPE_TRANSFER_RESPONSES\020\003\022&\n\""
  "BUS_EVENT_TYPE_POSITION_RESOLUTION\020\004\022\030\n\024"
  "BUS_EVENT_TYPE_ORDER\020\005\022\032\n\026BUS_EVENT_TYPE"
  "_ACCOUNT\020\006\022\030\n\024BUS_EVENT_TYPE_PARTY\020\007\022\030\n\024"
  "BUS_EVENT_TYPE_TRADE\020\010\022 \n\034BUS_EVENT_TYPE"
  "_MARGIN_LEVELS\020\t\022\033\n\027BUS_EVENT_TYPE_PROPO"
  "SAL\020\n\022\027\n\023BUS_EVENT_TYPE_VOTE\020\013\022\036\n\032BUS_EV"
  "ENT_TYPE_MARKET_DATA\020\014\022!\n\035BUS_EVENT_TYPE"
  "_NODE_SIGNATURE\020\r\022%\n!BUS_EVENT_TYPE_LOSS"
  "_SOCIALIZATION\020\016\022\"\n\036BUS_EVENT_TYPE_SETTL"
  "E_POSITION\020\017\022$\n BUS_EVENT_TYPE_SETTLE_DI"
  "STRESSED\020\020\022!\n\035BUS_EVENT_TYPE_MARKET_CREA"
  "TED\020\021\022\030\n\024BUS_EVENT_TYPE_ASSET\020\022\022\036\n\032BUS_E"
  "VENT_TYPE_MARKET_TICK\020\023\022\035\n\031BUS_EVENT_TYP"
  "E_WITHDRAWAL\020\024\022\032\n\026BUS_EVENT_TYPE_DEPOSIT"
  "\020\025\022\032\n\026BUS_EVENT_TYPE_AUCTION\020\026\022\036\n\032BUS_EV"
  "ENT_TYPE_RISK_FACTOR\020\027\022$\n BUS_EVENT_TYPE"
  "_NETWORK_PARAMETER\020\030\022&\n\"BUS_EVENT_TYPE_L"
  "IQUIDITY_PROVISION\020\031\022\031\n\025BUS_EVENT_TYPE_M"
  "ARKET\020e\022\034\n\027BUS_EVENT_TYPE_TX_ERROR\020\311\001B7\n"
  "\024io.vegaprotocol.vegaZ\037code.vegaprotocol"
  ".io/vega/protob\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_proto_2fevents_2eproto = {
  false, InitDefaults_proto_2fevents_2eproto, 
  descriptor_table_protodef_proto_2fevents_2eproto,
  "proto/events.proto", &assign_descriptors_table_proto_2fevents_2eproto, 3262,
};

void AddDescriptors_proto_2fevents_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[4] =
  {
    ::AddDescriptors_proto_2fmarkets_2eproto,
    ::AddDescriptors_proto_2fassets_2eproto,
    ::AddDescriptors_proto_2fgovernance_2eproto,
    ::AddDescriptors_proto_2fvega_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_proto_2fevents_2eproto, deps, 4);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fevents_2eproto = []() { AddDescriptors_proto_2fevents_2eproto(); return true; }();
namespace vega {
const ::google::protobuf::EnumDescriptor* BusEventType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fevents_2eproto);
  return file_level_enum_descriptors_proto_2fevents_2eproto[0];
}
bool BusEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 101:
    case 201:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MarketEvent::InitAsDefaultInstance() {
}
class MarketEvent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketEvent::kMarketIDFieldNumber;
const int MarketEvent::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketEvent::MarketEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.MarketEvent)
}
MarketEvent::MarketEvent(const MarketEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  // @@protoc_insertion_point(copy_constructor:vega.MarketEvent)
}

void MarketEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketEvent_proto_2fevents_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MarketEvent::~MarketEvent() {
  // @@protoc_insertion_point(destructor:vega.MarketEvent)
  SharedDtor();
}

void MarketEvent::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketEvent& MarketEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketEvent_proto_2fevents_2eproto.base);
  return *internal_default_instance();
}


void MarketEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarketEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.MarketEvent.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string payload = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.MarketEvent.payload");
        object = msg->mutable_payload();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.MarketEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.MarketEvent.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->payload().data(), static_cast<int>(this->payload().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.MarketEvent.payload"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.MarketEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.MarketEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.MarketEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketEvent.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), static_cast<int>(this->payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketEvent.payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.MarketEvent)
}

::google::protobuf::uint8* MarketEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarketEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketEvent.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), static_cast<int>(this->payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketEvent.payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarketEvent)
  return target;
}

size_t MarketEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarketEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->payload());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarketEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketEvent* source =
      ::google::protobuf::DynamicCastToGenerated<MarketEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarketEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarketEvent)
    MergeFrom(*source);
  }
}

void MarketEvent::MergeFrom(const MarketEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarketEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void MarketEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarketEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketEvent::CopyFrom(const MarketEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarketEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketEvent::IsInitialized() const {
  return true;
}

void MarketEvent::Swap(MarketEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketEvent::InternalSwap(MarketEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata MarketEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fevents_2eproto);
  return ::file_level_metadata_proto_2fevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TxErrorEvent::InitAsDefaultInstance() {
  ::vega::_TxErrorEvent_default_instance_.ordersubmission_ = const_cast< ::vega::OrderSubmission*>(
      ::vega::OrderSubmission::internal_default_instance());
  ::vega::_TxErrorEvent_default_instance_.orderamendment_ = const_cast< ::vega::OrderAmendment*>(
      ::vega::OrderAmendment::internal_default_instance());
  ::vega::_TxErrorEvent_default_instance_.ordercancellation_ = const_cast< ::vega::OrderCancellation*>(
      ::vega::OrderCancellation::internal_default_instance());
  ::vega::_TxErrorEvent_default_instance_.proposal_ = const_cast< ::vega::Proposal*>(
      ::vega::Proposal::internal_default_instance());
  ::vega::_TxErrorEvent_default_instance_.vote_ = const_cast< ::vega::Vote*>(
      ::vega::Vote::internal_default_instance());
}
class TxErrorEvent::HasBitSetters {
 public:
  static const ::vega::OrderSubmission& ordersubmission(const TxErrorEvent* msg);
  static const ::vega::OrderAmendment& orderamendment(const TxErrorEvent* msg);
  static const ::vega::OrderCancellation& ordercancellation(const TxErrorEvent* msg);
  static const ::vega::Proposal& proposal(const TxErrorEvent* msg);
  static const ::vega::Vote& vote(const TxErrorEvent* msg);
};

const ::vega::OrderSubmission&
TxErrorEvent::HasBitSetters::ordersubmission(const TxErrorEvent* msg) {
  return *msg->transaction_.ordersubmission_;
}
const ::vega::OrderAmendment&
TxErrorEvent::HasBitSetters::orderamendment(const TxErrorEvent* msg) {
  return *msg->transaction_.orderamendment_;
}
const ::vega::OrderCancellation&
TxErrorEvent::HasBitSetters::ordercancellation(const TxErrorEvent* msg) {
  return *msg->transaction_.ordercancellation_;
}
const ::vega::Proposal&
TxErrorEvent::HasBitSetters::proposal(const TxErrorEvent* msg) {
  return *msg->transaction_.proposal_;
}
const ::vega::Vote&
TxErrorEvent::HasBitSetters::vote(const TxErrorEvent* msg) {
  return *msg->transaction_.vote_;
}
void TxErrorEvent::set_allocated_ordersubmission(::vega::OrderSubmission* ordersubmission) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction();
  if (ordersubmission) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ordersubmission = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ordersubmission, submessage_arena);
    }
    set_has_ordersubmission();
    transaction_.ordersubmission_ = ordersubmission;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.TxErrorEvent.orderSubmission)
}
void TxErrorEvent::clear_ordersubmission() {
  if (has_ordersubmission()) {
    delete transaction_.ordersubmission_;
    clear_has_transaction();
  }
}
void TxErrorEvent::set_allocated_orderamendment(::vega::OrderAmendment* orderamendment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction();
  if (orderamendment) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orderamendment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orderamendment, submessage_arena);
    }
    set_has_orderamendment();
    transaction_.orderamendment_ = orderamendment;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.TxErrorEvent.orderAmendment)
}
void TxErrorEvent::clear_orderamendment() {
  if (has_orderamendment()) {
    delete transaction_.orderamendment_;
    clear_has_transaction();
  }
}
void TxErrorEvent::set_allocated_ordercancellation(::vega::OrderCancellation* ordercancellation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction();
  if (ordercancellation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ordercancellation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ordercancellation, submessage_arena);
    }
    set_has_ordercancellation();
    transaction_.ordercancellation_ = ordercancellation;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.TxErrorEvent.orderCancellation)
}
void TxErrorEvent::clear_ordercancellation() {
  if (has_ordercancellation()) {
    delete transaction_.ordercancellation_;
    clear_has_transaction();
  }
}
void TxErrorEvent::set_allocated_proposal(::vega::Proposal* proposal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction();
  if (proposal) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      proposal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    set_has_proposal();
    transaction_.proposal_ = proposal;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.TxErrorEvent.proposal)
}
void TxErrorEvent::clear_proposal() {
  if (has_proposal()) {
    delete transaction_.proposal_;
    clear_has_transaction();
  }
}
void TxErrorEvent::set_allocated_vote(::vega::Vote* vote) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction();
  if (vote) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vote = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vote, submessage_arena);
    }
    set_has_vote();
    transaction_.vote_ = vote;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.TxErrorEvent.vote)
}
void TxErrorEvent::clear_vote() {
  if (has_vote()) {
    delete transaction_.vote_;
    clear_has_transaction();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxErrorEvent::kPartyIDFieldNumber;
const int TxErrorEvent::kErrMsgFieldNumber;
const int TxErrorEvent::kOrderSubmissionFieldNumber;
const int TxErrorEvent::kOrderAmendmentFieldNumber;
const int TxErrorEvent::kOrderCancellationFieldNumber;
const int TxErrorEvent::kProposalFieldNumber;
const int TxErrorEvent::kVoteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxErrorEvent::TxErrorEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.TxErrorEvent)
}
TxErrorEvent::TxErrorEvent(const TxErrorEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  clear_has_transaction();
  switch (from.transaction_case()) {
    case kOrderSubmission: {
      mutable_ordersubmission()->::vega::OrderSubmission::MergeFrom(from.ordersubmission());
      break;
    }
    case kOrderAmendment: {
      mutable_orderamendment()->::vega::OrderAmendment::MergeFrom(from.orderamendment());
      break;
    }
    case kOrderCancellation: {
      mutable_ordercancellation()->::vega::OrderCancellation::MergeFrom(from.ordercancellation());
      break;
    }
    case kProposal: {
      mutable_proposal()->::vega::Proposal::MergeFrom(from.proposal());
      break;
    }
    case kVote: {
      mutable_vote()->::vega::Vote::MergeFrom(from.vote());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.TxErrorEvent)
}

void TxErrorEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TxErrorEvent_proto_2fevents_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transaction();
}

TxErrorEvent::~TxErrorEvent() {
  // @@protoc_insertion_point(destructor:vega.TxErrorEvent)
  SharedDtor();
}

void TxErrorEvent::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_transaction()) {
    clear_transaction();
  }
}

void TxErrorEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxErrorEvent& TxErrorEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TxErrorEvent_proto_2fevents_2eproto.base);
  return *internal_default_instance();
}


void TxErrorEvent::clear_transaction() {
// @@protoc_insertion_point(one_of_clear_start:vega.TxErrorEvent)
  switch (transaction_case()) {
    case kOrderSubmission: {
      delete transaction_.ordersubmission_;
      break;
    }
    case kOrderAmendment: {
      delete transaction_.orderamendment_;
      break;
    }
    case kOrderCancellation: {
      delete transaction_.ordercancellation_;
      break;
    }
    case kProposal: {
      delete transaction_.proposal_;
      break;
    }
    case kVote: {
      delete transaction_.vote_;
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTION_NOT_SET;
}


void TxErrorEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TxErrorEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_transaction();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TxErrorEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TxErrorEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string PartyID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.TxErrorEvent.PartyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string errMsg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.TxErrorEvent.errMsg");
        object = msg->mutable_errmsg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.OrderSubmission orderSubmission = 101;
      case 101: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::OrderSubmission::_InternalParse;
        object = msg->mutable_ordersubmission();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.OrderAmendment orderAmendment = 102;
      case 102: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::OrderAmendment::_InternalParse;
        object = msg->mutable_orderamendment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.OrderCancellation orderCancellation = 103;
      case 103: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::OrderCancellation::_InternalParse;
        object = msg->mutable_ordercancellation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.Proposal proposal = 104;
      case 104: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Proposal::_InternalParse;
        object = msg->mutable_proposal();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.Vote vote = 105;
      case 105: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Vote::_InternalParse;
        object = msg->mutable_vote();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TxErrorEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.TxErrorEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string PartyID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.TxErrorEvent.PartyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errMsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.TxErrorEvent.errMsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.OrderSubmission orderSubmission = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (810 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ordersubmission()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.OrderAmendment orderAmendment = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (818 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orderamendment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.OrderCancellation orderCancellation = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (826 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ordercancellation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Proposal proposal = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (834 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proposal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Vote vote = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (842 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.TxErrorEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.TxErrorEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TxErrorEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.TxErrorEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string PartyID = 1;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.TxErrorEvent.PartyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  // string errMsg = 2;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.TxErrorEvent.errMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // .vega.OrderSubmission orderSubmission = 101;
  if (has_ordersubmission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, HasBitSetters::ordersubmission(this), output);
  }

  // .vega.OrderAmendment orderAmendment = 102;
  if (has_orderamendment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, HasBitSetters::orderamendment(this), output);
  }

  // .vega.OrderCancellation orderCancellation = 103;
  if (has_ordercancellation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, HasBitSetters::ordercancellation(this), output);
  }

  // .vega.Proposal proposal = 104;
  if (has_proposal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, HasBitSetters::proposal(this), output);
  }

  // .vega.Vote vote = 105;
  if (has_vote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, HasBitSetters::vote(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.TxErrorEvent)
}

::google::protobuf::uint8* TxErrorEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TxErrorEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string PartyID = 1;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.TxErrorEvent.PartyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  // string errMsg = 2;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.TxErrorEvent.errMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // .vega.OrderSubmission orderSubmission = 101;
  if (has_ordersubmission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, HasBitSetters::ordersubmission(this), target);
  }

  // .vega.OrderAmendment orderAmendment = 102;
  if (has_orderamendment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        102, HasBitSetters::orderamendment(this), target);
  }

  // .vega.OrderCancellation orderCancellation = 103;
  if (has_ordercancellation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        103, HasBitSetters::ordercancellation(this), target);
  }

  // .vega.Proposal proposal = 104;
  if (has_proposal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        104, HasBitSetters::proposal(this), target);
  }

  // .vega.Vote vote = 105;
  if (has_vote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        105, HasBitSetters::vote(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TxErrorEvent)
  return target;
}

size_t TxErrorEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TxErrorEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string PartyID = 1;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string errMsg = 2;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  switch (transaction_case()) {
    // .vega.OrderSubmission orderSubmission = 101;
    case kOrderSubmission: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transaction_.ordersubmission_);
      break;
    }
    // .vega.OrderAmendment orderAmendment = 102;
    case kOrderAmendment: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transaction_.orderamendment_);
      break;
    }
    // .vega.OrderCancellation orderCancellation = 103;
    case kOrderCancellation: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transaction_.ordercancellation_);
      break;
    }
    // .vega.Proposal proposal = 104;
    case kProposal: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transaction_.proposal_);
      break;
    }
    // .vega.Vote vote = 105;
    case kVote: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transaction_.vote_);
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxErrorEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TxErrorEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TxErrorEvent* source =
      ::google::protobuf::DynamicCastToGenerated<TxErrorEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TxErrorEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TxErrorEvent)
    MergeFrom(*source);
  }
}

void TxErrorEvent::MergeFrom(const TxErrorEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TxErrorEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  switch (from.transaction_case()) {
    case kOrderSubmission: {
      mutable_ordersubmission()->::vega::OrderSubmission::MergeFrom(from.ordersubmission());
      break;
    }
    case kOrderAmendment: {
      mutable_orderamendment()->::vega::OrderAmendment::MergeFrom(from.orderamendment());
      break;
    }
    case kOrderCancellation: {
      mutable_ordercancellation()->::vega::OrderCancellation::MergeFrom(from.ordercancellation());
      break;
    }
    case kProposal: {
      mutable_proposal()->::vega::Proposal::MergeFrom(from.proposal());
      break;
    }
    case kVote: {
      mutable_vote()->::vega::Vote::MergeFrom(from.vote());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
}

void TxErrorEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TxErrorEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxErrorEvent::CopyFrom(const TxErrorEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TxErrorEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxErrorEvent::IsInitialized() const {
  return true;
}

void TxErrorEvent::Swap(TxErrorEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxErrorEvent::InternalSwap(TxErrorEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transaction_, other->transaction_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TxErrorEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fevents_2eproto);
  return ::file_level_metadata_proto_2fevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TimeUpdate::InitAsDefaultInstance() {
}
class TimeUpdate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeUpdate::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeUpdate::TimeUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.TimeUpdate)
}
TimeUpdate::TimeUpdate(const TimeUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:vega.TimeUpdate)
}

void TimeUpdate::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

TimeUpdate::~TimeUpdate() {
  // @@protoc_insertion_point(destructor:vega.TimeUpdate)
  SharedDtor();
}

void TimeUpdate::SharedDtor() {
}

void TimeUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeUpdate& TimeUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TimeUpdate_proto_2fevents_2eproto.base);
  return *internal_default_instance();
}


void TimeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TimeUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimeUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TimeUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.TimeUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.TimeUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.TimeUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.TimeUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.TimeUpdate)
}

::google::protobuf::uint8* TimeUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TimeUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TimeUpdate)
  return target;
}

size_t TimeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TimeUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TimeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<TimeUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TimeUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TimeUpdate)
    MergeFrom(*source);
  }
}

void TimeUpdate::MergeFrom(const TimeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TimeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void TimeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeUpdate::CopyFrom(const TimeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeUpdate::IsInitialized() const {
  return true;
}

void TimeUpdate::Swap(TimeUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeUpdate::InternalSwap(TimeUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata TimeUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fevents_2eproto);
  return ::file_level_metadata_proto_2fevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransferResponses::InitAsDefaultInstance() {
}
class TransferResponses::HasBitSetters {
 public:
};

void TransferResponses::clear_responses() {
  responses_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferResponses::kResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferResponses::TransferResponses()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.TransferResponses)
}
TransferResponses::TransferResponses(const TransferResponses& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.TransferResponses)
}

void TransferResponses::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransferResponses_proto_2fevents_2eproto.base);
}

TransferResponses::~TransferResponses() {
  // @@protoc_insertion_point(destructor:vega.TransferResponses)
  SharedDtor();
}

void TransferResponses::SharedDtor() {
}

void TransferResponses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferResponses& TransferResponses::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransferResponses_proto_2fevents_2eproto.base);
  return *internal_default_instance();
}


void TransferResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TransferResponses)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransferResponses::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransferResponses*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.TransferResponse responses = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::TransferResponse::_InternalParse;
          object = msg->add_responses();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransferResponses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.TransferResponses)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.TransferResponse responses = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.TransferResponses)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.TransferResponses)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransferResponses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.TransferResponses)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.TransferResponse responses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->responses(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.TransferResponses)
}

::google::protobuf::uint8* TransferResponses::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TransferResponses)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.TransferResponse responses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->responses(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TransferResponses)
  return target;
}

size_t TransferResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TransferResponses)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.TransferResponse responses = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->responses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->responses(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferResponses::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TransferResponses)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferResponses* source =
      ::google::protobuf::DynamicCastToGenerated<TransferResponses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TransferResponses)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TransferResponses)
    MergeFrom(*source);
  }
}

void TransferResponses::MergeFrom(const TransferResponses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TransferResponses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
}

void TransferResponses::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TransferResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferResponses::CopyFrom(const TransferResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TransferResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferResponses::IsInitialized() const {
  return true;
}

void TransferResponses::Swap(TransferResponses* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferResponses::InternalSwap(TransferResponses* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&responses_)->InternalSwap(CastToBase(&other->responses_));
}

::google::protobuf::Metadata TransferResponses::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fevents_2eproto);
  return ::file_level_metadata_proto_2fevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PositionResolution::InitAsDefaultInstance() {
}
class PositionResolution::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionResolution::kMarketIDFieldNumber;
const int PositionResolution::kDistressedFieldNumber;
const int PositionResolution::kClosedFieldNumber;
const int PositionResolution::kMarkPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionResolution::PositionResolution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.PositionResolution)
}
PositionResolution::PositionResolution(const PositionResolution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  ::memcpy(&distressed_, &from.distressed_,
    static_cast<size_t>(reinterpret_cast<char*>(&markprice_) -
    reinterpret_cast<char*>(&distressed_)) + sizeof(markprice_));
  // @@protoc_insertion_point(copy_constructor:vega.PositionResolution)
}

void PositionResolution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PositionResolution_proto_2fevents_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&distressed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&markprice_) -
      reinterpret_cast<char*>(&distressed_)) + sizeof(markprice_));
}

PositionResolution::~PositionResolution() {
  // @@protoc_insertion_point(destructor:vega.PositionResolution)
  SharedDtor();
}

void PositionResolution::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PositionResolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionResolution& PositionResolution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PositionResolution_proto_2fevents_2eproto.base);
  return *internal_default_instance();
}


void PositionResolution::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PositionResolution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&distressed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&markprice_) -
      reinterpret_cast<char*>(&distressed_)) + sizeof(markprice_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionResolution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PositionResolution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.PositionResolution.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 distressed = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_distressed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 closed = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_closed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 markPrice = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_markprice(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionResolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.PositionResolution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.PositionResolution.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 distressed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &distressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 closed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &closed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 markPrice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &markprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.PositionResolution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.PositionResolution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionResolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.PositionResolution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.PositionResolution.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // int64 distressed = 2;
  if (this->distressed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->distressed(), output);
  }

  // int64 closed = 3;
  if (this->closed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->closed(), output);
  }

  // uint64 markPrice = 4;
  if (this->markprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->markprice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.PositionResolution)
}

::google::protobuf::uint8* PositionResolution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PositionResolution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.PositionResolution.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // int64 distressed = 2;
  if (this->distressed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->distressed(), target);
  }

  // int64 closed = 3;
  if (this->closed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->closed(), target);
  }

  // uint64 markPrice = 4;
  if (this->markprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->markprice(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PositionResolution)
  return target;
}

size_t PositionResolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PositionResolution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // int64 distressed = 2;
  if (this->distressed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->distressed());
  }

  // int64 closed = 3;
  if (this->closed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->closed());
  }

  // uint64 markPrice = 4;
  if (this->markprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->markprice());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionResolution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PositionResolution)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionResolution* source =
      ::google::protobuf::DynamicCastToGenerated<PositionResolution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PositionResolution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PositionResolution)
    MergeFrom(*source);
  }
}

void PositionResolution::MergeFrom(const PositionResolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PositionResolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.distressed() != 0) {
    set_distressed(from.distressed());
  }
  if (from.closed() != 0) {
    set_closed(from.closed());
  }
  if (from.markprice() != 0) {
    set_markprice(from.markprice());
  }
}

void PositionResolution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PositionResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionResolution::CopyFrom(const PositionResolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PositionResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionResolution::IsInitialized() const {
  return true;
}

void PositionResolution::Swap(PositionResolution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionResolution::InternalSwap(PositionResolution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(distressed_, other->distressed_);
  swap(closed_, other->closed_);
  swap(markprice_, other->markprice_);
}

::google::protobuf::Metadata PositionResolution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fevents_2eproto);
  return ::file_level_metadata_proto_2fevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LossSocialization::InitAsDefaultInstance() {
}
class LossSocialization::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LossSocialization::kMarketIDFieldNumber;
const int LossSocialization::kPartyIDFieldNumber;
const int LossSocialization::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LossSocialization::LossSocialization()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.LossSocialization)
}
LossSocialization::LossSocialization(const LossSocialization& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:vega.LossSocialization)
}

void LossSocialization::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LossSocialization_proto_2fevents_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

LossSocialization::~LossSocialization() {
  // @@protoc_insertion_point(destructor:vega.LossSocialization)
  SharedDtor();
}

void LossSocialization::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LossSocialization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LossSocialization& LossSocialization::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LossSocialization_proto_2fevents_2eproto.base);
  return *internal_default_instance();
}


void LossSocialization::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LossSocialization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LossSocialization::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LossSocialization*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.LossSocialization.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string partyID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.LossSocialization.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 amount = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LossSocialization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.LossSocialization)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.LossSocialization.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.LossSocialization.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.LossSocialization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.LossSocialization)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LossSocialization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.LossSocialization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LossSocialization.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LossSocialization.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partyid(), output);
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.LossSocialization)
}

::google::protobuf::uint8* LossSocialization::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LossSocialization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LossSocialization.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LossSocialization.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partyid(), target);
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LossSocialization)
  return target;
}

size_t LossSocialization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LossSocialization)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // int64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LossSocialization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LossSocialization)
  GOOGLE_DCHECK_NE(&from, this);
  const LossSocialization* source =
      ::google::protobuf::DynamicCastToGenerated<LossSocialization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LossSocialization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LossSocialization)
    MergeFrom(*source);
  }
}

void LossSocialization::MergeFrom(const LossSocialization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LossSocialization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void LossSocialization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LossSocialization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossSocialization::CopyFrom(const LossSocialization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LossSocialization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossSocialization::IsInitialized() const {
  return true;
}

void LossSocialization::Swap(LossSocialization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LossSocialization::InternalSwap(LossSocialization* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
}

::google::protobuf::Metadata LossSocialization::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fevents_2eproto);
  return ::file_level_metadata_proto_2fevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TradeSettlement::InitAsDefaultInstance() {
}
class TradeSettlement::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeSettlement::kSizeFieldNumber;
const int TradeSettlement::kPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeSettlement::TradeSettlement()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.TradeSettlement)
}
TradeSettlement::TradeSettlement(const TradeSettlement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&size_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:vega.TradeSettlement)
}

void TradeSettlement::SharedCtor() {
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&size_)) + sizeof(price_));
}

TradeSettlement::~TradeSettlement() {
  // @@protoc_insertion_point(destructor:vega.TradeSettlement)
  SharedDtor();
}

void TradeSettlement::SharedDtor() {
}

void TradeSettlement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeSettlement& TradeSettlement::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TradeSettlement_proto_2fevents_2eproto.base);
  return *internal_default_instance();
}


void TradeSettlement::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TradeSettlement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&size_)) + sizeof(price_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradeSettlement::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TradeSettlement*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 size = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 price = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_price(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradeSettlement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.TradeSettlement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.TradeSettlement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.TradeSettlement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradeSettlement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.TradeSettlement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->size(), output);
  }

  // uint64 price = 2;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.TradeSettlement)
}

::google::protobuf::uint8* TradeSettlement::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TradeSettlement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 size = 1;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->size(), target);
  }

  // uint64 price = 2;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TradeSettlement)
  return target;
}

size_t TradeSettlement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TradeSettlement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  // uint64 price = 2;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->price());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeSettlement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TradeSettlement)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeSettlement* source =
      ::google::protobuf::DynamicCastToGenerated<TradeSettlement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TradeSettlement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TradeSettlement)
    MergeFrom(*source);
  }
}

void TradeSettlement::MergeFrom(const TradeSettlement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TradeSettlement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
}

void TradeSettlement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TradeSettlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeSettlement::CopyFrom(const TradeSettlement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TradeSettlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeSettlement::IsInitialized() const {
  return true;
}

void TradeSettlement::Swap(TradeSettlement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeSettlement::InternalSwap(TradeSettlement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(size_, other->size_);
  swap(price_, other->price_);
}

::google::protobuf::Metadata TradeSettlement::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fevents_2eproto);
  return ::file_level_metadata_proto_2fevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SettlePosition::InitAsDefaultInstance() {
}
class SettlePosition::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettlePosition::kMarketIDFieldNumber;
const int SettlePosition::kPartyIDFieldNumber;
const int SettlePosition::kPriceFieldNumber;
const int SettlePosition::kTradeSettlementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettlePosition::SettlePosition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.SettlePosition)
}
SettlePosition::SettlePosition(const SettlePosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      tradesettlements_(from.tradesettlements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  price_ = from.price_;
  // @@protoc_insertion_point(copy_constructor:vega.SettlePosition)
}

void SettlePosition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SettlePosition_proto_2fevents_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = PROTOBUF_ULONGLONG(0);
}

SettlePosition::~SettlePosition() {
  // @@protoc_insertion_point(destructor:vega.SettlePosition)
  SharedDtor();
}

void SettlePosition::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SettlePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettlePosition& SettlePosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SettlePosition_proto_2fevents_2eproto.base);
  return *internal_default_instance();
}


void SettlePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.SettlePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradesettlements_.Clear();
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SettlePosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SettlePosition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.SettlePosition.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string partyID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.SettlePosition.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 price = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_price(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .vega.TradeSettlement tradeSettlements = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::TradeSettlement::_InternalParse;
          object = msg->add_tradesettlements();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SettlePosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.SettlePosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.SettlePosition.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.SettlePosition.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.TradeSettlement tradeSettlements = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tradesettlements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.SettlePosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.SettlePosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SettlePosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.SettlePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.SettlePosition.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.SettlePosition.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partyid(), output);
  }

  // uint64 price = 3;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->price(), output);
  }

  // repeated .vega.TradeSettlement tradeSettlements = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tradesettlements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->tradesettlements(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.SettlePosition)
}

::google::protobuf::uint8* SettlePosition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.SettlePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.SettlePosition.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.SettlePosition.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partyid(), target);
  }

  // uint64 price = 3;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->price(), target);
  }

  // repeated .vega.TradeSettlement tradeSettlements = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tradesettlements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->tradesettlements(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.SettlePosition)
  return target;
}

size_t SettlePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.SettlePosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.TradeSettlement tradeSettlements = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tradesettlements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tradesettlements(static_cast<int>(i)));
    }
  }

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // uint64 price = 3;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->price());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettlePosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.SettlePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const SettlePosition* source =
      ::google::protobuf::DynamicCastToGenerated<SettlePosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.SettlePosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.SettlePosition)
    MergeFrom(*source);
  }
}

void SettlePosition::MergeFrom(const SettlePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.SettlePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tradesettlements_.MergeFrom(from.tradesettlements_);
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
}

void SettlePosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.SettlePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettlePosition::CopyFrom(const SettlePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.SettlePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettlePosition::IsInitialized() const {
  return true;
}

void SettlePosition::Swap(SettlePosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettlePosition::InternalSwap(SettlePosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tradesettlements_)->InternalSwap(CastToBase(&other->tradesettlements_));
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
}

::google::protobuf::Metadata SettlePosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fevents_2eproto);
  return ::file_level_metadata_proto_2fevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SettleDistressed::InitAsDefaultInstance() {
}
class SettleDistressed::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettleDistressed::kMarketIDFieldNumber;
const int SettleDistressed::kPartyIDFieldNumber;
const int SettleDistressed::kMarginFieldNumber;
const int SettleDistressed::kPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettleDistressed::SettleDistressed()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.SettleDistressed)
}
SettleDistressed::SettleDistressed(const SettleDistressed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  ::memcpy(&margin_, &from.margin_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&margin_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:vega.SettleDistressed)
}

void SettleDistressed::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SettleDistressed_proto_2fevents_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&margin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&margin_)) + sizeof(price_));
}

SettleDistressed::~SettleDistressed() {
  // @@protoc_insertion_point(destructor:vega.SettleDistressed)
  SharedDtor();
}

void SettleDistressed::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SettleDistressed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettleDistressed& SettleDistressed::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SettleDistressed_proto_2fevents_2eproto.base);
  return *internal_default_instance();
}


void SettleDistressed::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.SettleDistressed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&margin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&margin_)) + sizeof(price_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SettleDistressed::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SettleDistressed*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.SettleDistressed.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string partyID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.SettleDistressed.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 margin = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_margin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 price = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_price(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SettleDistressed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.SettleDistressed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.SettleDistressed.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.SettleDistressed.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 margin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.SettleDistressed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.SettleDistressed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SettleDistressed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.SettleDistressed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.SettleDistressed.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.SettleDistressed.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partyid(), output);
  }

  // uint64 margin = 3;
  if (this->margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->margin(), output);
  }

  // uint64 price = 4;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.SettleDistressed)
}

::google::protobuf::uint8* SettleDistressed::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.SettleDistressed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.SettleDistressed.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.SettleDistressed.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partyid(), target);
  }

  // uint64 margin = 3;
  if (this->margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->margin(), target);
  }

  // uint64 price = 4;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.SettleDistressed)
  return target;
}

size_t SettleDistressed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.SettleDistressed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // uint64 margin = 3;
  if (this->margin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->margin());
  }

  // uint64 price = 4;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->price());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettleDistressed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.SettleDistressed)
  GOOGLE_DCHECK_NE(&from, this);
  const SettleDistressed* source =
      ::google::protobuf::DynamicCastToGenerated<SettleDistressed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.SettleDistressed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.SettleDistressed)
    MergeFrom(*source);
  }
}

void SettleDistressed::MergeFrom(const SettleDistressed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.SettleDistressed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.margin() != 0) {
    set_margin(from.margin());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
}

void SettleDistressed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.SettleDistressed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettleDistressed::CopyFrom(const SettleDistressed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.SettleDistressed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettleDistressed::IsInitialized() const {
  return true;
}

void SettleDistressed::Swap(SettleDistressed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettleDistressed::InternalSwap(SettleDistressed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(margin_, other->margin_);
  swap(price_, other->price_);
}

::google::protobuf::Metadata SettleDistressed::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fevents_2eproto);
  return ::file_level_metadata_proto_2fevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketTick::InitAsDefaultInstance() {
}
class MarketTick::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketTick::kIDFieldNumber;
const int MarketTick::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketTick::MarketTick()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.MarketTick)
}
MarketTick::MarketTick(const MarketTick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:vega.MarketTick)
}

void MarketTick::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketTick_proto_2fevents_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = PROTOBUF_LONGLONG(0);
}

MarketTick::~MarketTick() {
  // @@protoc_insertion_point(destructor:vega.MarketTick)
  SharedDtor();
}

void MarketTick::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketTick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketTick& MarketTick::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketTick_proto_2fevents_2eproto.base);
  return *internal_default_instance();
}


void MarketTick::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarketTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketTick::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketTick*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.MarketTick.ID");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.MarketTick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.MarketTick.ID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.MarketTick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.MarketTick)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.MarketTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketTick.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.MarketTick)
}

::google::protobuf::uint8* MarketTick::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarketTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketTick.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarketTick)
  return target;
}

size_t MarketTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarketTick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketTick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarketTick)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketTick* source =
      ::google::protobuf::DynamicCastToGenerated<MarketTick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarketTick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarketTick)
    MergeFrom(*source);
  }
}

void MarketTick::MergeFrom(const MarketTick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarketTick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void MarketTick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarketTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketTick::CopyFrom(const MarketTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarketTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketTick::IsInitialized() const {
  return true;
}

void MarketTick::Swap(MarketTick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketTick::InternalSwap(MarketTick* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
}

::google::protobuf::Metadata MarketTick::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fevents_2eproto);
  return ::file_level_metadata_proto_2fevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AuctionEvent::InitAsDefaultInstance() {
}
class AuctionEvent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuctionEvent::kMarketIDFieldNumber;
const int AuctionEvent::kOpeningAuctionFieldNumber;
const int AuctionEvent::kLeaveFieldNumber;
const int AuctionEvent::kStartFieldNumber;
const int AuctionEvent::kEndFieldNumber;
const int AuctionEvent::kTriggerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuctionEvent::AuctionEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.AuctionEvent)
}
AuctionEvent::AuctionEvent(const AuctionEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  ::memcpy(&openingauction_, &from.openingauction_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&openingauction_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:vega.AuctionEvent)
}

void AuctionEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AuctionEvent_proto_2fevents_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&openingauction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&openingauction_)) + sizeof(end_));
}

AuctionEvent::~AuctionEvent() {
  // @@protoc_insertion_point(destructor:vega.AuctionEvent)
  SharedDtor();
}

void AuctionEvent::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuctionEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuctionEvent& AuctionEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AuctionEvent_proto_2fevents_2eproto.base);
  return *internal_default_instance();
}


void AuctionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.AuctionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&openingauction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&openingauction_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AuctionEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AuctionEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.AuctionEvent.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool openingAuction = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_openingauction(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool leave = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_leave(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 start = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 end = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_end(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.AuctionTrigger trigger = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_trigger(static_cast<::vega::AuctionTrigger>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AuctionEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.AuctionEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.AuctionEvent.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool openingAuction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &openingauction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool leave = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.AuctionTrigger trigger = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trigger(static_cast< ::vega::AuctionTrigger >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.AuctionEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.AuctionEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AuctionEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.AuctionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.AuctionEvent.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // bool openingAuction = 2;
  if (this->openingauction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->openingauction(), output);
  }

  // bool leave = 3;
  if (this->leave() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->leave(), output);
  }

  // int64 start = 4;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start(), output);
  }

  // int64 end = 5;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end(), output);
  }

  // .vega.AuctionTrigger trigger = 6;
  if (this->trigger() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->trigger(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.AuctionEvent)
}

::google::protobuf::uint8* AuctionEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.AuctionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.AuctionEvent.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // bool openingAuction = 2;
  if (this->openingauction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->openingauction(), target);
  }

  // bool leave = 3;
  if (this->leave() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->leave(), target);
  }

  // int64 start = 4;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->start(), target);
  }

  // int64 end = 5;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end(), target);
  }

  // .vega.AuctionTrigger trigger = 6;
  if (this->trigger() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->trigger(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.AuctionEvent)
  return target;
}

size_t AuctionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.AuctionEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // bool openingAuction = 2;
  if (this->openingauction() != 0) {
    total_size += 1 + 1;
  }

  // bool leave = 3;
  if (this->leave() != 0) {
    total_size += 1 + 1;
  }

  // .vega.AuctionTrigger trigger = 6;
  if (this->trigger() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger());
  }

  // int64 start = 4;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 5;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuctionEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.AuctionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const AuctionEvent* source =
      ::google::protobuf::DynamicCastToGenerated<AuctionEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.AuctionEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.AuctionEvent)
    MergeFrom(*source);
  }
}

void AuctionEvent::MergeFrom(const AuctionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.AuctionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.openingauction() != 0) {
    set_openingauction(from.openingauction());
  }
  if (from.leave() != 0) {
    set_leave(from.leave());
  }
  if (from.trigger() != 0) {
    set_trigger(from.trigger());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void AuctionEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.AuctionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionEvent::CopyFrom(const AuctionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.AuctionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionEvent::IsInitialized() const {
  return true;
}

void AuctionEvent::Swap(AuctionEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuctionEvent::InternalSwap(AuctionEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(openingauction_, other->openingauction_);
  swap(leave_, other->leave_);
  swap(trigger_, other->trigger_);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::google::protobuf::Metadata AuctionEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fevents_2eproto);
  return ::file_level_metadata_proto_2fevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BusEvent::InitAsDefaultInstance() {
  ::vega::_BusEvent_default_instance_.timeupdate_ = const_cast< ::vega::TimeUpdate*>(
      ::vega::TimeUpdate::internal_default_instance());
  ::vega::_BusEvent_default_instance_.transferresponses_ = const_cast< ::vega::TransferResponses*>(
      ::vega::TransferResponses::internal_default_instance());
  ::vega::_BusEvent_default_instance_.positionresolution_ = const_cast< ::vega::PositionResolution*>(
      ::vega::PositionResolution::internal_default_instance());
  ::vega::_BusEvent_default_instance_.order_ = const_cast< ::vega::Order*>(
      ::vega::Order::internal_default_instance());
  ::vega::_BusEvent_default_instance_.account_ = const_cast< ::vega::Account*>(
      ::vega::Account::internal_default_instance());
  ::vega::_BusEvent_default_instance_.party_ = const_cast< ::vega::Party*>(
      ::vega::Party::internal_default_instance());
  ::vega::_BusEvent_default_instance_.trade_ = const_cast< ::vega::Trade*>(
      ::vega::Trade::internal_default_instance());
  ::vega::_BusEvent_default_instance_.marginlevels_ = const_cast< ::vega::MarginLevels*>(
      ::vega::MarginLevels::internal_default_instance());
  ::vega::_BusEvent_default_instance_.proposal_ = const_cast< ::vega::Proposal*>(
      ::vega::Proposal::internal_default_instance());
  ::vega::_BusEvent_default_instance_.vote_ = const_cast< ::vega::Vote*>(
      ::vega::Vote::internal_default_instance());
  ::vega::_BusEvent_default_instance_.marketdata_ = const_cast< ::vega::MarketData*>(
      ::vega::MarketData::internal_default_instance());
  ::vega::_BusEvent_default_instance_.nodesignature_ = const_cast< ::vega::NodeSignature*>(
      ::vega::NodeSignature::internal_default_instance());
  ::vega::_BusEvent_default_instance_.losssocialization_ = const_cast< ::vega::LossSocialization*>(
      ::vega::LossSocialization::internal_default_instance());
  ::vega::_BusEvent_default_instance_.settleposition_ = const_cast< ::vega::SettlePosition*>(
      ::vega::SettlePosition::internal_default_instance());
  ::vega::_BusEvent_default_instance_.settledistressed_ = const_cast< ::vega::SettleDistressed*>(
      ::vega::SettleDistressed::internal_default_instance());
  ::vega::_BusEvent_default_instance_.marketcreated_ = const_cast< ::vega::Market*>(
      ::vega::Market::internal_default_instance());
  ::vega::_BusEvent_default_instance_.asset_ = const_cast< ::vega::Asset*>(
      ::vega::Asset::internal_default_instance());
  ::vega::_BusEvent_default_instance_.markettick_ = const_cast< ::vega::MarketTick*>(
      ::vega::MarketTick::internal_default_instance());
  ::vega::_BusEvent_default_instance_.withdrawal_ = const_cast< ::vega::Withdrawal*>(
      ::vega::Withdrawal::internal_default_instance());
  ::vega::_BusEvent_default_instance_.deposit_ = const_cast< ::vega::Deposit*>(
      ::vega::Deposit::internal_default_instance());
  ::vega::_BusEvent_default_instance_.auction_ = const_cast< ::vega::AuctionEvent*>(
      ::vega::AuctionEvent::internal_default_instance());
  ::vega::_BusEvent_default_instance_.riskfactor_ = const_cast< ::vega::RiskFactor*>(
      ::vega::RiskFactor::internal_default_instance());
  ::vega::_BusEvent_default_instance_.networkparameter_ = const_cast< ::vega::NetworkParameter*>(
      ::vega::NetworkParameter::internal_default_instance());
  ::vega::_BusEvent_default_instance_.liquidityprovision_ = const_cast< ::vega::LiquidityProvision*>(
      ::vega::LiquidityProvision::internal_default_instance());
  ::vega::_BusEvent_default_instance_.market_ = const_cast< ::vega::MarketEvent*>(
      ::vega::MarketEvent::internal_default_instance());
  ::vega::_BusEvent_default_instance_.txerrevent_ = const_cast< ::vega::TxErrorEvent*>(
      ::vega::TxErrorEvent::internal_default_instance());
}
class BusEvent::HasBitSetters {
 public:
  static const ::vega::TimeUpdate& timeupdate(const BusEvent* msg);
  static const ::vega::TransferResponses& transferresponses(const BusEvent* msg);
  static const ::vega::PositionResolution& positionresolution(const BusEvent* msg);
  static const ::vega::Order& order(const BusEvent* msg);
  static const ::vega::Account& account(const BusEvent* msg);
  static const ::vega::Party& party(const BusEvent* msg);
  static const ::vega::Trade& trade(const BusEvent* msg);
  static const ::vega::MarginLevels& marginlevels(const BusEvent* msg);
  static const ::vega::Proposal& proposal(const BusEvent* msg);
  static const ::vega::Vote& vote(const BusEvent* msg);
  static const ::vega::MarketData& marketdata(const BusEvent* msg);
  static const ::vega::NodeSignature& nodesignature(const BusEvent* msg);
  static const ::vega::LossSocialization& losssocialization(const BusEvent* msg);
  static const ::vega::SettlePosition& settleposition(const BusEvent* msg);
  static const ::vega::SettleDistressed& settledistressed(const BusEvent* msg);
  static const ::vega::Market& marketcreated(const BusEvent* msg);
  static const ::vega::Asset& asset(const BusEvent* msg);
  static const ::vega::MarketTick& markettick(const BusEvent* msg);
  static const ::vega::Withdrawal& withdrawal(const BusEvent* msg);
  static const ::vega::Deposit& deposit(const BusEvent* msg);
  static const ::vega::AuctionEvent& auction(const BusEvent* msg);
  static const ::vega::RiskFactor& riskfactor(const BusEvent* msg);
  static const ::vega::NetworkParameter& networkparameter(const BusEvent* msg);
  static const ::vega::LiquidityProvision& liquidityprovision(const BusEvent* msg);
  static const ::vega::MarketEvent& market(const BusEvent* msg);
  static const ::vega::TxErrorEvent& txerrevent(const BusEvent* msg);
};

const ::vega::TimeUpdate&
BusEvent::HasBitSetters::timeupdate(const BusEvent* msg) {
  return *msg->event_.timeupdate_;
}
const ::vega::TransferResponses&
BusEvent::HasBitSetters::transferresponses(const BusEvent* msg) {
  return *msg->event_.transferresponses_;
}
const ::vega::PositionResolution&
BusEvent::HasBitSetters::positionresolution(const BusEvent* msg) {
  return *msg->event_.positionresolution_;
}
const ::vega::Order&
BusEvent::HasBitSetters::order(const BusEvent* msg) {
  return *msg->event_.order_;
}
const ::vega::Account&
BusEvent::HasBitSetters::account(const BusEvent* msg) {
  return *msg->event_.account_;
}
const ::vega::Party&
BusEvent::HasBitSetters::party(const BusEvent* msg) {
  return *msg->event_.party_;
}
const ::vega::Trade&
BusEvent::HasBitSetters::trade(const BusEvent* msg) {
  return *msg->event_.trade_;
}
const ::vega::MarginLevels&
BusEvent::HasBitSetters::marginlevels(const BusEvent* msg) {
  return *msg->event_.marginlevels_;
}
const ::vega::Proposal&
BusEvent::HasBitSetters::proposal(const BusEvent* msg) {
  return *msg->event_.proposal_;
}
const ::vega::Vote&
BusEvent::HasBitSetters::vote(const BusEvent* msg) {
  return *msg->event_.vote_;
}
const ::vega::MarketData&
BusEvent::HasBitSetters::marketdata(const BusEvent* msg) {
  return *msg->event_.marketdata_;
}
const ::vega::NodeSignature&
BusEvent::HasBitSetters::nodesignature(const BusEvent* msg) {
  return *msg->event_.nodesignature_;
}
const ::vega::LossSocialization&
BusEvent::HasBitSetters::losssocialization(const BusEvent* msg) {
  return *msg->event_.losssocialization_;
}
const ::vega::SettlePosition&
BusEvent::HasBitSetters::settleposition(const BusEvent* msg) {
  return *msg->event_.settleposition_;
}
const ::vega::SettleDistressed&
BusEvent::HasBitSetters::settledistressed(const BusEvent* msg) {
  return *msg->event_.settledistressed_;
}
const ::vega::Market&
BusEvent::HasBitSetters::marketcreated(const BusEvent* msg) {
  return *msg->event_.marketcreated_;
}
const ::vega::Asset&
BusEvent::HasBitSetters::asset(const BusEvent* msg) {
  return *msg->event_.asset_;
}
const ::vega::MarketTick&
BusEvent::HasBitSetters::markettick(const BusEvent* msg) {
  return *msg->event_.markettick_;
}
const ::vega::Withdrawal&
BusEvent::HasBitSetters::withdrawal(const BusEvent* msg) {
  return *msg->event_.withdrawal_;
}
const ::vega::Deposit&
BusEvent::HasBitSetters::deposit(const BusEvent* msg) {
  return *msg->event_.deposit_;
}
const ::vega::AuctionEvent&
BusEvent::HasBitSetters::auction(const BusEvent* msg) {
  return *msg->event_.auction_;
}
const ::vega::RiskFactor&
BusEvent::HasBitSetters::riskfactor(const BusEvent* msg) {
  return *msg->event_.riskfactor_;
}
const ::vega::NetworkParameter&
BusEvent::HasBitSetters::networkparameter(const BusEvent* msg) {
  return *msg->event_.networkparameter_;
}
const ::vega::LiquidityProvision&
BusEvent::HasBitSetters::liquidityprovision(const BusEvent* msg) {
  return *msg->event_.liquidityprovision_;
}
const ::vega::MarketEvent&
BusEvent::HasBitSetters::market(const BusEvent* msg) {
  return *msg->event_.market_;
}
const ::vega::TxErrorEvent&
BusEvent::HasBitSetters::txerrevent(const BusEvent* msg) {
  return *msg->event_.txerrevent_;
}
void BusEvent::set_allocated_timeupdate(::vega::TimeUpdate* timeupdate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (timeupdate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timeupdate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeupdate, submessage_arena);
    }
    set_has_timeupdate();
    event_.timeupdate_ = timeupdate;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.timeUpdate)
}
void BusEvent::set_allocated_transferresponses(::vega::TransferResponses* transferresponses) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (transferresponses) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transferresponses = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transferresponses, submessage_arena);
    }
    set_has_transferresponses();
    event_.transferresponses_ = transferresponses;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.transferResponses)
}
void BusEvent::set_allocated_positionresolution(::vega::PositionResolution* positionresolution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (positionresolution) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      positionresolution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, positionresolution, submessage_arena);
    }
    set_has_positionresolution();
    event_.positionresolution_ = positionresolution;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.positionResolution)
}
void BusEvent::set_allocated_order(::vega::Order* order) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (order) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    set_has_order();
    event_.order_ = order;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.order)
}
void BusEvent::clear_order() {
  if (has_order()) {
    delete event_.order_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_account(::vega::Account* account) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (account) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    set_has_account();
    event_.account_ = account;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.account)
}
void BusEvent::clear_account() {
  if (has_account()) {
    delete event_.account_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_party(::vega::Party* party) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (party) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      party = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, party, submessage_arena);
    }
    set_has_party();
    event_.party_ = party;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.party)
}
void BusEvent::clear_party() {
  if (has_party()) {
    delete event_.party_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_trade(::vega::Trade* trade) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (trade) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trade = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trade, submessage_arena);
    }
    set_has_trade();
    event_.trade_ = trade;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.trade)
}
void BusEvent::clear_trade() {
  if (has_trade()) {
    delete event_.trade_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_marginlevels(::vega::MarginLevels* marginlevels) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (marginlevels) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      marginlevels = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, marginlevels, submessage_arena);
    }
    set_has_marginlevels();
    event_.marginlevels_ = marginlevels;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.marginLevels)
}
void BusEvent::clear_marginlevels() {
  if (has_marginlevels()) {
    delete event_.marginlevels_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_proposal(::vega::Proposal* proposal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (proposal) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      proposal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    set_has_proposal();
    event_.proposal_ = proposal;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.proposal)
}
void BusEvent::clear_proposal() {
  if (has_proposal()) {
    delete event_.proposal_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_vote(::vega::Vote* vote) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (vote) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vote = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vote, submessage_arena);
    }
    set_has_vote();
    event_.vote_ = vote;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.vote)
}
void BusEvent::clear_vote() {
  if (has_vote()) {
    delete event_.vote_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_marketdata(::vega::MarketData* marketdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (marketdata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      marketdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, marketdata, submessage_arena);
    }
    set_has_marketdata();
    event_.marketdata_ = marketdata;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.marketData)
}
void BusEvent::clear_marketdata() {
  if (has_marketdata()) {
    delete event_.marketdata_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_nodesignature(::vega::NodeSignature* nodesignature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (nodesignature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nodesignature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nodesignature, submessage_arena);
    }
    set_has_nodesignature();
    event_.nodesignature_ = nodesignature;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.nodeSignature)
}
void BusEvent::clear_nodesignature() {
  if (has_nodesignature()) {
    delete event_.nodesignature_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_losssocialization(::vega::LossSocialization* losssocialization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (losssocialization) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      losssocialization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, losssocialization, submessage_arena);
    }
    set_has_losssocialization();
    event_.losssocialization_ = losssocialization;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.lossSocialization)
}
void BusEvent::set_allocated_settleposition(::vega::SettlePosition* settleposition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (settleposition) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settleposition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settleposition, submessage_arena);
    }
    set_has_settleposition();
    event_.settleposition_ = settleposition;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.settlePosition)
}
void BusEvent::set_allocated_settledistressed(::vega::SettleDistressed* settledistressed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (settledistressed) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settledistressed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settledistressed, submessage_arena);
    }
    set_has_settledistressed();
    event_.settledistressed_ = settledistressed;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.settleDistressed)
}
void BusEvent::set_allocated_marketcreated(::vega::Market* marketcreated) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (marketcreated) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      marketcreated = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, marketcreated, submessage_arena);
    }
    set_has_marketcreated();
    event_.marketcreated_ = marketcreated;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.marketCreated)
}
void BusEvent::clear_marketcreated() {
  if (has_marketcreated()) {
    delete event_.marketcreated_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_asset(::vega::Asset* asset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (asset) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      asset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }
    set_has_asset();
    event_.asset_ = asset;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.asset)
}
void BusEvent::clear_asset() {
  if (has_asset()) {
    delete event_.asset_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_markettick(::vega::MarketTick* markettick) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (markettick) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      markettick = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, markettick, submessage_arena);
    }
    set_has_markettick();
    event_.markettick_ = markettick;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.marketTick)
}
void BusEvent::set_allocated_withdrawal(::vega::Withdrawal* withdrawal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (withdrawal) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      withdrawal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, withdrawal, submessage_arena);
    }
    set_has_withdrawal();
    event_.withdrawal_ = withdrawal;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.withdrawal)
}
void BusEvent::clear_withdrawal() {
  if (has_withdrawal()) {
    delete event_.withdrawal_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_deposit(::vega::Deposit* deposit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (deposit) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deposit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deposit, submessage_arena);
    }
    set_has_deposit();
    event_.deposit_ = deposit;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.deposit)
}
void BusEvent::clear_deposit() {
  if (has_deposit()) {
    delete event_.deposit_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_auction(::vega::AuctionEvent* auction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (auction) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auction, submessage_arena);
    }
    set_has_auction();
    event_.auction_ = auction;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.auction)
}
void BusEvent::set_allocated_riskfactor(::vega::RiskFactor* riskfactor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (riskfactor) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      riskfactor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, riskfactor, submessage_arena);
    }
    set_has_riskfactor();
    event_.riskfactor_ = riskfactor;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.riskFactor)
}
void BusEvent::clear_riskfactor() {
  if (has_riskfactor()) {
    delete event_.riskfactor_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_networkparameter(::vega::NetworkParameter* networkparameter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (networkparameter) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      networkparameter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, networkparameter, submessage_arena);
    }
    set_has_networkparameter();
    event_.networkparameter_ = networkparameter;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.networkParameter)
}
void BusEvent::clear_networkparameter() {
  if (has_networkparameter()) {
    delete event_.networkparameter_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_liquidityprovision(::vega::LiquidityProvision* liquidityprovision) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (liquidityprovision) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      liquidityprovision = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, liquidityprovision, submessage_arena);
    }
    set_has_liquidityprovision();
    event_.liquidityprovision_ = liquidityprovision;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.liquidityProvision)
}
void BusEvent::clear_liquidityprovision() {
  if (has_liquidityprovision()) {
    delete event_.liquidityprovision_;
    clear_has_event();
  }
}
void BusEvent::set_allocated_market(::vega::MarketEvent* market) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (market) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      market = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, market, submessage_arena);
    }
    set_has_market();
    event_.market_ = market;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.market)
}
void BusEvent::set_allocated_txerrevent(::vega::TxErrorEvent* txerrevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (txerrevent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      txerrevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txerrevent, submessage_arena);
    }
    set_has_txerrevent();
    event_.txerrevent_ = txerrevent;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.txErrEvent)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BusEvent::kIDFieldNumber;
const int BusEvent::kBlockFieldNumber;
const int BusEvent::kTypeFieldNumber;
const int BusEvent::kTimeUpdateFieldNumber;
const int BusEvent::kTransferResponsesFieldNumber;
const int BusEvent::kPositionResolutionFieldNumber;
const int BusEvent::kOrderFieldNumber;
const int BusEvent::kAccountFieldNumber;
const int BusEvent::kPartyFieldNumber;
const int BusEvent::kTradeFieldNumber;
const int BusEvent::kMarginLevelsFieldNumber;
const int BusEvent::kProposalFieldNumber;
const int BusEvent::kVoteFieldNumber;
const int BusEvent::kMarketDataFieldNumber;
const int BusEvent::kNodeSignatureFieldNumber;
const int BusEvent::kLossSocializationFieldNumber;
const int BusEvent::kSettlePositionFieldNumber;
const int BusEvent::kSettleDistressedFieldNumber;
const int BusEvent::kMarketCreatedFieldNumber;
const int BusEvent::kAssetFieldNumber;
const int BusEvent::kMarketTickFieldNumber;
const int BusEvent::kWithdrawalFieldNumber;
const int BusEvent::kDepositFieldNumber;
const int BusEvent::kAuctionFieldNumber;
const int BusEvent::kRiskFactorFieldNumber;
const int BusEvent::kNetworkParameterFieldNumber;
const int BusEvent::kLiquidityProvisionFieldNumber;
const int BusEvent::kMarketFieldNumber;
const int BusEvent::kTxErrEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BusEvent::BusEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.BusEvent)
}
BusEvent::BusEvent(const BusEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.block().size() > 0) {
    block_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_);
  }
  type_ = from.type_;
  clear_has_event();
  switch (from.event_case()) {
    case kTimeUpdate: {
      mutable_timeupdate()->::vega::TimeUpdate::MergeFrom(from.timeupdate());
      break;
    }
    case kTransferResponses: {
      mutable_transferresponses()->::vega::TransferResponses::MergeFrom(from.transferresponses());
      break;
    }
    case kPositionResolution: {
      mutable_positionresolution()->::vega::PositionResolution::MergeFrom(from.positionresolution());
      break;
    }
    case kOrder: {
      mutable_order()->::vega::Order::MergeFrom(from.order());
      break;
    }
    case kAccount: {
      mutable_account()->::vega::Account::MergeFrom(from.account());
      break;
    }
    case kParty: {
      mutable_party()->::vega::Party::MergeFrom(from.party());
      break;
    }
    case kTrade: {
      mutable_trade()->::vega::Trade::MergeFrom(from.trade());
      break;
    }
    case kMarginLevels: {
      mutable_marginlevels()->::vega::MarginLevels::MergeFrom(from.marginlevels());
      break;
    }
    case kProposal: {
      mutable_proposal()->::vega::Proposal::MergeFrom(from.proposal());
      break;
    }
    case kVote: {
      mutable_vote()->::vega::Vote::MergeFrom(from.vote());
      break;
    }
    case kMarketData: {
      mutable_marketdata()->::vega::MarketData::MergeFrom(from.marketdata());
      break;
    }
    case kNodeSignature: {
      mutable_nodesignature()->::vega::NodeSignature::MergeFrom(from.nodesignature());
      break;
    }
    case kLossSocialization: {
      mutable_losssocialization()->::vega::LossSocialization::MergeFrom(from.losssocialization());
      break;
    }
    case kSettlePosition: {
      mutable_settleposition()->::vega::SettlePosition::MergeFrom(from.settleposition());
      break;
    }
    case kSettleDistressed: {
      mutable_settledistressed()->::vega::SettleDistressed::MergeFrom(from.settledistressed());
      break;
    }
    case kMarketCreated: {
      mutable_marketcreated()->::vega::Market::MergeFrom(from.marketcreated());
      break;
    }
    case kAsset: {
      mutable_asset()->::vega::Asset::MergeFrom(from.asset());
      break;
    }
    case kMarketTick: {
      mutable_markettick()->::vega::MarketTick::MergeFrom(from.markettick());
      break;
    }
    case kWithdrawal: {
      mutable_withdrawal()->::vega::Withdrawal::MergeFrom(from.withdrawal());
      break;
    }
    case kDeposit: {
      mutable_deposit()->::vega::Deposit::MergeFrom(from.deposit());
      break;
    }
    case kAuction: {
      mutable_auction()->::vega::AuctionEvent::MergeFrom(from.auction());
      break;
    }
    case kRiskFactor: {
      mutable_riskfactor()->::vega::RiskFactor::MergeFrom(from.riskfactor());
      break;
    }
    case kNetworkParameter: {
      mutable_networkparameter()->::vega::NetworkParameter::MergeFrom(from.networkparameter());
      break;
    }
    case kLiquidityProvision: {
      mutable_liquidityprovision()->::vega::LiquidityProvision::MergeFrom(from.liquidityprovision());
      break;
    }
    case kMarket: {
      mutable_market()->::vega::MarketEvent::MergeFrom(from.market());
      break;
    }
    case kTxErrEvent: {
      mutable_txerrevent()->::vega::TxErrorEvent::MergeFrom(from.txerrevent());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.BusEvent)
}

void BusEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BusEvent_proto_2fevents_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  clear_has_event();
}

BusEvent::~BusEvent() {
  // @@protoc_insertion_point(destructor:vega.BusEvent)
  SharedDtor();
}

void BusEvent::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_event()) {
    clear_event();
  }
}

void BusEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BusEvent& BusEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BusEvent_proto_2fevents_2eproto.base);
  return *internal_default_instance();
}


void BusEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:vega.BusEvent)
  switch (event_case()) {
    case kTimeUpdate: {
      delete event_.timeupdate_;
      break;
    }
    case kTransferResponses: {
      delete event_.transferresponses_;
      break;
    }
    case kPositionResolution: {
      delete event_.positionresolution_;
      break;
    }
    case kOrder: {
      delete event_.order_;
      break;
    }
    case kAccount: {
      delete event_.account_;
      break;
    }
    case kParty: {
      delete event_.party_;
      break;
    }
    case kTrade: {
      delete event_.trade_;
      break;
    }
    case kMarginLevels: {
      delete event_.marginlevels_;
      break;
    }
    case kProposal: {
      delete event_.proposal_;
      break;
    }
    case kVote: {
      delete event_.vote_;
      break;
    }
    case kMarketData: {
      delete event_.marketdata_;
      break;
    }
    case kNodeSignature: {
      delete event_.nodesignature_;
      break;
    }
    case kLossSocialization: {
      delete event_.losssocialization_;
      break;
    }
    case kSettlePosition: {
      delete event_.settleposition_;
      break;
    }
    case kSettleDistressed: {
      delete event_.settledistressed_;
      break;
    }
    case kMarketCreated: {
      delete event_.marketcreated_;
      break;
    }
    case kAsset: {
      delete event_.asset_;
      break;
    }
    case kMarketTick: {
      delete event_.markettick_;
      break;
    }
    case kWithdrawal: {
      delete event_.withdrawal_;
      break;
    }
    case kDeposit: {
      delete event_.deposit_;
      break;
    }
    case kAuction: {
      delete event_.auction_;
      break;
    }
    case kRiskFactor: {
      delete event_.riskfactor_;
      break;
    }
    case kNetworkParameter: {
      delete event_.networkparameter_;
      break;
    }
    case kLiquidityProvision: {
      delete event_.liquidityprovision_;
      break;
    }
    case kMarket: {
      delete event_.market_;
      break;
    }
    case kTxErrEvent: {
      delete event_.txerrevent_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void BusEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.BusEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  clear_event();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BusEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BusEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.BusEvent.ID");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string block = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.BusEvent.block");
        object = msg->mutable_block();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.BusEventType type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::vega::BusEventType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.TimeUpdate timeUpdate = 101;
      case 101: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::TimeUpdate::_InternalParse;
        object = msg->mutable_timeupdate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.TransferResponses transferResponses = 102;
      case 102: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::TransferResponses::_InternalParse;
        object = msg->mutable_transferresponses();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.PositionResolution positionResolution = 103;
      case 103: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::PositionResolution::_InternalParse;
        object = msg->mutable_positionresolution();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.Order order = 104;
      case 104: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Order::_InternalParse;
        object = msg->mutable_order();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.Account account = 105;
      case 105: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Account::_InternalParse;
        object = msg->mutable_account();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.Party party = 106;
      case 106: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Party::_InternalParse;
        object = msg->mutable_party();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.Trade trade = 107;
      case 107: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Trade::_InternalParse;
        object = msg->mutable_trade();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.MarginLevels marginLevels = 108;
      case 108: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::MarginLevels::_InternalParse;
        object = msg->mutable_marginlevels();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.Proposal proposal = 109;
      case 109: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Proposal::_InternalParse;
        object = msg->mutable_proposal();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.Vote vote = 110;
      case 110: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Vote::_InternalParse;
        object = msg->mutable_vote();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.MarketData marketData = 111;
      case 111: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::MarketData::_InternalParse;
        object = msg->mutable_marketdata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.NodeSignature nodeSignature = 112;
      case 112: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::NodeSignature::_InternalParse;
        object = msg->mutable_nodesignature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.LossSocialization lossSocialization = 113;
      case 113: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::LossSocialization::_InternalParse;
        object = msg->mutable_losssocialization();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.SettlePosition settlePosition = 114;
      case 114: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::SettlePosition::_InternalParse;
        object = msg->mutable_settleposition();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.SettleDistressed settleDistressed = 115;
      case 115: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::SettleDistressed::_InternalParse;
        object = msg->mutable_settledistressed();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.Market marketCreated = 116;
      case 116: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Market::_InternalParse;
        object = msg->mutable_marketcreated();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.Asset asset = 117;
      case 117: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Asset::_InternalParse;
        object = msg->mutable_asset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.MarketTick marketTick = 118;
      case 118: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::MarketTick::_InternalParse;
        object = msg->mutable_markettick();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.Withdrawal withdrawal = 119;
      case 119: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Withdrawal::_InternalParse;
        object = msg->mutable_withdrawal();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.Deposit deposit = 120;
      case 120: {
        if (static_cast<::google::protobuf::uint8>(tag) != 194) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Deposit::_InternalParse;
        object = msg->mutable_deposit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.AuctionEvent auction = 121;
      case 121: {
        if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::AuctionEvent::_InternalParse;
        object = msg->mutable_auction();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.RiskFactor riskFactor = 122;
      case 122: {
        if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::RiskFactor::_InternalParse;
        object = msg->mutable_riskfactor();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.NetworkParameter networkParameter = 123;
      case 123: {
        if (static_cast<::google::protobuf::uint8>(tag) != 218) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::NetworkParameter::_InternalParse;
        object = msg->mutable_networkparameter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.LiquidityProvision liquidityProvision = 124;
      case 124: {
        if (static_cast<::google::protobuf::uint8>(tag) != 226) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::LiquidityProvision::_InternalParse;
        object = msg->mutable_liquidityprovision();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.MarketEvent market = 1001;
      case 1001: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::MarketEvent::_InternalParse;
        object = msg->mutable_market();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.TxErrorEvent txErrEvent = 2001;
      case 2001: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::TxErrorEvent::_InternalParse;
        object = msg->mutable_txerrevent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BusEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.BusEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.BusEvent.ID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string block = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->block().data(), static_cast<int>(this->block().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.BusEvent.block"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.BusEventType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::vega::BusEventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.TimeUpdate timeUpdate = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (810 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timeupdate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.TransferResponses transferResponses = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (818 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transferresponses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.PositionResolution positionResolution = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (826 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_positionresolution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Order order = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (834 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Account account = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (842 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Party party = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (850 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_party()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Trade trade = 107;
      case 107: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (858 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trade()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.MarginLevels marginLevels = 108;
      case 108: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (866 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_marginlevels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Proposal proposal = 109;
      case 109: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (874 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proposal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Vote vote = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (882 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.MarketData marketData = 111;
      case 111: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (890 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_marketdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.NodeSignature nodeSignature = 112;
      case 112: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (898 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nodesignature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.LossSocialization lossSocialization = 113;
      case 113: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (906 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_losssocialization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.SettlePosition settlePosition = 114;
      case 114: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (914 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settleposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.SettleDistressed settleDistressed = 115;
      case 115: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (922 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settledistressed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Market marketCreated = 116;
      case 116: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (930 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_marketcreated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Asset asset = 117;
      case 117: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (938 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_asset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.MarketTick marketTick = 118;
      case 118: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (946 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_markettick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Withdrawal withdrawal = 119;
      case 119: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (954 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_withdrawal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Deposit deposit = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (962 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deposit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.AuctionEvent auction = 121;
      case 121: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (970 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.RiskFactor riskFactor = 122;
      case 122: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (978 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_riskfactor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.NetworkParameter networkParameter = 123;
      case 123: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (986 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_networkparameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.LiquidityProvision liquidityProvision = 124;
      case 124: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (994 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_liquidityprovision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.MarketEvent market = 1001;
      case 1001: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8010 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_market()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.TxErrorEvent txErrEvent = 2001;
      case 2001: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16010 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txerrevent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.BusEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.BusEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BusEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.BusEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.BusEvent.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string block = 2;
  if (this->block().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->block().data(), static_cast<int>(this->block().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.BusEvent.block");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->block(), output);
  }

  // .vega.BusEventType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // .vega.TimeUpdate timeUpdate = 101;
  if (has_timeupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, HasBitSetters::timeupdate(this), output);
  }

  // .vega.TransferResponses transferResponses = 102;
  if (has_transferresponses()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, HasBitSetters::transferresponses(this), output);
  }

  // .vega.PositionResolution positionResolution = 103;
  if (has_positionresolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, HasBitSetters::positionresolution(this), output);
  }

  // .vega.Order order = 104;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, HasBitSetters::order(this), output);
  }

  // .vega.Account account = 105;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, HasBitSetters::account(this), output);
  }

  // .vega.Party party = 106;
  if (has_party()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, HasBitSetters::party(this), output);
  }

  // .vega.Trade trade = 107;
  if (has_trade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, HasBitSetters::trade(this), output);
  }

  // .vega.MarginLevels marginLevels = 108;
  if (has_marginlevels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, HasBitSetters::marginlevels(this), output);
  }

  // .vega.Proposal proposal = 109;
  if (has_proposal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, HasBitSetters::proposal(this), output);
  }

  // .vega.Vote vote = 110;
  if (has_vote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, HasBitSetters::vote(this), output);
  }

  // .vega.MarketData marketData = 111;
  if (has_marketdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, HasBitSetters::marketdata(this), output);
  }

  // .vega.NodeSignature nodeSignature = 112;
  if (has_nodesignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, HasBitSetters::nodesignature(this), output);
  }

  // .vega.LossSocialization lossSocialization = 113;
  if (has_losssocialization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      113, HasBitSetters::losssocialization(this), output);
  }

  // .vega.SettlePosition settlePosition = 114;
  if (has_settleposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      114, HasBitSetters::settleposition(this), output);
  }

  // .vega.SettleDistressed settleDistressed = 115;
  if (has_settledistressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      115, HasBitSetters::settledistressed(this), output);
  }

  // .vega.Market marketCreated = 116;
  if (has_marketcreated()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      116, HasBitSetters::marketcreated(this), output);
  }

  // .vega.Asset asset = 117;
  if (has_asset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, HasBitSetters::asset(this), output);
  }

  // .vega.MarketTick marketTick = 118;
  if (has_markettick()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118, HasBitSetters::markettick(this), output);
  }

  // .vega.Withdrawal withdrawal = 119;
  if (has_withdrawal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      119, HasBitSetters::withdrawal(this), output);
  }

  // .vega.Deposit deposit = 120;
  if (has_deposit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120, HasBitSetters::deposit(this), output);
  }

  // .vega.AuctionEvent auction = 121;
  if (has_auction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, HasBitSetters::auction(this), output);
  }

  // .vega.RiskFactor riskFactor = 122;
  if (has_riskfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      122, HasBitSetters::riskfactor(this), output);
  }

  // .vega.NetworkParameter networkParameter = 123;
  if (has_networkparameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      123, HasBitSetters::networkparameter(this), output);
  }

  // .vega.LiquidityProvision liquidityProvision = 124;
  if (has_liquidityprovision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      124, HasBitSetters::liquidityprovision(this), output);
  }

  // .vega.MarketEvent market = 1001;
  if (has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, HasBitSetters::market(this), output);
  }

  // .vega.TxErrorEvent txErrEvent = 2001;
  if (has_txerrevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2001, HasBitSetters::txerrevent(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.BusEvent)
}

::google::protobuf::uint8* BusEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.BusEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.BusEvent.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string block = 2;
  if (this->block().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->block().data(), static_cast<int>(this->block().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.BusEvent.block");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->block(), target);
  }

  // .vega.BusEventType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // .vega.TimeUpdate timeUpdate = 101;
  if (has_timeupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, HasBitSetters::timeupdate(this), target);
  }

  // .vega.TransferResponses transferResponses = 102;
  if (has_transferresponses()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        102, HasBitSetters::transferresponses(this), target);
  }

  // .vega.PositionResolution positionResolution = 103;
  if (has_positionresolution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        103, HasBitSetters::positionresolution(this), target);
  }

  // .vega.Order order = 104;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        104, HasBitSetters::order(this), target);
  }

  // .vega.Account account = 105;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        105, HasBitSetters::account(this), target);
  }

  // .vega.Party party = 106;
  if (has_party()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        106, HasBitSetters::party(this), target);
  }

  // .vega.Trade trade = 107;
  if (has_trade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        107, HasBitSetters::trade(this), target);
  }

  // .vega.MarginLevels marginLevels = 108;
  if (has_marginlevels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        108, HasBitSetters::marginlevels(this), target);
  }

  // .vega.Proposal proposal = 109;
  if (has_proposal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        109, HasBitSetters::proposal(this), target);
  }

  // .vega.Vote vote = 110;
  if (has_vote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        110, HasBitSetters::vote(this), target);
  }

  // .vega.MarketData marketData = 111;
  if (has_marketdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        111, HasBitSetters::marketdata(this), target);
  }

  // .vega.NodeSignature nodeSignature = 112;
  if (has_nodesignature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        112, HasBitSetters::nodesignature(this), target);
  }

  // .vega.LossSocialization lossSocialization = 113;
  if (has_losssocialization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        113, HasBitSetters::losssocialization(this), target);
  }

  // .vega.SettlePosition settlePosition = 114;
  if (has_settleposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        114, HasBitSetters::settleposition(this), target);
  }

  // .vega.SettleDistressed settleDistressed = 115;
  if (has_settledistressed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        115, HasBitSetters::settledistressed(this), target);
  }

  // .vega.Market marketCreated = 116;
  if (has_marketcreated()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        116, HasBitSetters::marketcreated(this), target);
  }

  // .vega.Asset asset = 117;
  if (has_asset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        117, HasBitSetters::asset(this), target);
  }

  // .vega.MarketTick marketTick = 118;
  if (has_markettick()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        118, HasBitSetters::markettick(this), target);
  }

  // .vega.Withdrawal withdrawal = 119;
  if (has_withdrawal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        119, HasBitSetters::withdrawal(this), target);
  }

  // .vega.Deposit deposit = 120;
  if (has_deposit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        120, HasBitSetters::deposit(this), target);
  }

  // .vega.AuctionEvent auction = 121;
  if (has_auction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        121, HasBitSetters::auction(this), target);
  }

  // .vega.RiskFactor riskFactor = 122;
  if (has_riskfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        122, HasBitSetters::riskfactor(this), target);
  }

  // .vega.NetworkParameter networkParameter = 123;
  if (has_networkparameter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        123, HasBitSetters::networkparameter(this), target);
  }

  // .vega.LiquidityProvision liquidityProvision = 124;
  if (has_liquidityprovision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        124, HasBitSetters::liquidityprovision(this), target);
  }

  // .vega.MarketEvent market = 1001;
  if (has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1001, HasBitSetters::market(this), target);
  }

  // .vega.TxErrorEvent txErrEvent = 2001;
  if (has_txerrevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2001, HasBitSetters::txerrevent(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.BusEvent)
  return target;
}

size_t BusEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.BusEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string block = 2;
  if (this->block().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->block());
  }

  // .vega.BusEventType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (event_case()) {
    // .vega.TimeUpdate timeUpdate = 101;
    case kTimeUpdate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.timeupdate_);
      break;
    }
    // .vega.TransferResponses transferResponses = 102;
    case kTransferResponses: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.transferresponses_);
      break;
    }
    // .vega.PositionResolution positionResolution = 103;
    case kPositionResolution: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.positionresolution_);
      break;
    }
    // .vega.Order order = 104;
    case kOrder: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.order_);
      break;
    }
    // .vega.Account account = 105;
    case kAccount: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.account_);
      break;
    }
    // .vega.Party party = 106;
    case kParty: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.party_);
      break;
    }
    // .vega.Trade trade = 107;
    case kTrade: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.trade_);
      break;
    }
    // .vega.MarginLevels marginLevels = 108;
    case kMarginLevels: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.marginlevels_);
      break;
    }
    // .vega.Proposal proposal = 109;
    case kProposal: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.proposal_);
      break;
    }
    // .vega.Vote vote = 110;
    case kVote: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.vote_);
      break;
    }
    // .vega.MarketData marketData = 111;
    case kMarketData: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.marketdata_);
      break;
    }
    // .vega.NodeSignature nodeSignature = 112;
    case kNodeSignature: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.nodesignature_);
      break;
    }
    // .vega.LossSocialization lossSocialization = 113;
    case kLossSocialization: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.losssocialization_);
      break;
    }
    // .vega.SettlePosition settlePosition = 114;
    case kSettlePosition: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.settleposition_);
      break;
    }
    // .vega.SettleDistressed settleDistressed = 115;
    case kSettleDistressed: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.settledistressed_);
      break;
    }
    // .vega.Market marketCreated = 116;
    case kMarketCreated: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.marketcreated_);
      break;
    }
    // .vega.Asset asset = 117;
    case kAsset: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.asset_);
      break;
    }
    // .vega.MarketTick marketTick = 118;
    case kMarketTick: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.markettick_);
      break;
    }
    // .vega.Withdrawal withdrawal = 119;
    case kWithdrawal: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.withdrawal_);
      break;
    }
    // .vega.Deposit deposit = 120;
    case kDeposit: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.deposit_);
      break;
    }
    // .vega.AuctionEvent auction = 121;
    case kAuction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.auction_);
      break;
    }
    // .vega.RiskFactor riskFactor = 122;
    case kRiskFactor: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.riskfactor_);
      break;
    }
    // .vega.NetworkParameter networkParameter = 123;
    case kNetworkParameter: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.networkparameter_);
      break;
    }
    // .vega.LiquidityProvision liquidityProvision = 124;
    case kLiquidityProvision: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.liquidityprovision_);
      break;
    }
    // .vega.MarketEvent market = 1001;
    case kMarket: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.market_);
      break;
    }
    // .vega.TxErrorEvent txErrEvent = 2001;
    case kTxErrEvent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.txerrevent_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BusEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.BusEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const BusEvent* source =
      ::google::protobuf::DynamicCastToGenerated<BusEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.BusEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.BusEvent)
    MergeFrom(*source);
  }
}

void BusEvent::MergeFrom(const BusEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.BusEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.block().size() > 0) {

    block_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.event_case()) {
    case kTimeUpdate: {
      mutable_timeupdate()->::vega::TimeUpdate::MergeFrom(from.timeupdate());
      break;
    }
    case kTransferResponses: {
      mutable_transferresponses()->::vega::TransferResponses::MergeFrom(from.transferresponses());
      break;
    }
    case kPositionResolution: {
      mutable_positionresolution()->::vega::PositionResolution::MergeFrom(from.positionresolution());
      break;
    }
    case kOrder: {
      mutable_order()->::vega::Order::MergeFrom(from.order());
      break;
    }
    case kAccount: {
      mutable_account()->::vega::Account::MergeFrom(from.account());
      break;
    }
    case kParty: {
      mutable_party()->::vega::Party::MergeFrom(from.party());
      break;
    }
    case kTrade: {
      mutable_trade()->::vega::Trade::MergeFrom(from.trade());
      break;
    }
    case kMarginLevels: {
      mutable_marginlevels()->::vega::MarginLevels::MergeFrom(from.marginlevels());
      break;
    }
    case kProposal: {
      mutable_proposal()->::vega::Proposal::MergeFrom(from.proposal());
      break;
    }
    case kVote: {
      mutable_vote()->::vega::Vote::MergeFrom(from.vote());
      break;
    }
    case kMarketData: {
      mutable_marketdata()->::vega::MarketData::MergeFrom(from.marketdata());
      break;
    }
    case kNodeSignature: {
      mutable_nodesignature()->::vega::NodeSignature::MergeFrom(from.nodesignature());
      break;
    }
    case kLossSocialization: {
      mutable_losssocialization()->::vega::LossSocialization::MergeFrom(from.losssocialization());
      break;
    }
    case kSettlePosition: {
      mutable_settleposition()->::vega::SettlePosition::MergeFrom(from.settleposition());
      break;
    }
    case kSettleDistressed: {
      mutable_settledistressed()->::vega::SettleDistressed::MergeFrom(from.settledistressed());
      break;
    }
    case kMarketCreated: {
      mutable_marketcreated()->::vega::Market::MergeFrom(from.marketcreated());
      break;
    }
    case kAsset: {
      mutable_asset()->::vega::Asset::MergeFrom(from.asset());
      break;
    }
    case kMarketTick: {
      mutable_markettick()->::vega::MarketTick::MergeFrom(from.markettick());
      break;
    }
    case kWithdrawal: {
      mutable_withdrawal()->::vega::Withdrawal::MergeFrom(from.withdrawal());
      break;
    }
    case kDeposit: {
      mutable_deposit()->::vega::Deposit::MergeFrom(from.deposit());
      break;
    }
    case kAuction: {
      mutable_auction()->::vega::AuctionEvent::MergeFrom(from.auction());
      break;
    }
    case kRiskFactor: {
      mutable_riskfactor()->::vega::RiskFactor::MergeFrom(from.riskfactor());
      break;
    }
    case kNetworkParameter: {
      mutable_networkparameter()->::vega::NetworkParameter::MergeFrom(from.networkparameter());
      break;
    }
    case kLiquidityProvision: {
      mutable_liquidityprovision()->::vega::LiquidityProvision::MergeFrom(from.liquidityprovision());
      break;
    }
    case kMarket: {
      mutable_market()->::vega::MarketEvent::MergeFrom(from.market());
      break;
    }
    case kTxErrEvent: {
      mutable_txerrevent()->::vega::TxErrorEvent::MergeFrom(from.txerrevent());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void BusEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.BusEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusEvent::CopyFrom(const BusEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.BusEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusEvent::IsInitialized() const {
  return true;
}

void BusEvent::Swap(BusEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BusEvent::InternalSwap(BusEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  block_.Swap(&other->block_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata BusEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fevents_2eproto);
  return ::file_level_metadata_proto_2fevents_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vega
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::vega::MarketEvent* Arena::CreateMaybeMessage< ::vega::MarketEvent >(Arena* arena) {
  return Arena::CreateInternal< ::vega::MarketEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TxErrorEvent* Arena::CreateMaybeMessage< ::vega::TxErrorEvent >(Arena* arena) {
  return Arena::CreateInternal< ::vega::TxErrorEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TimeUpdate* Arena::CreateMaybeMessage< ::vega::TimeUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::vega::TimeUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TransferResponses* Arena::CreateMaybeMessage< ::vega::TransferResponses >(Arena* arena) {
  return Arena::CreateInternal< ::vega::TransferResponses >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PositionResolution* Arena::CreateMaybeMessage< ::vega::PositionResolution >(Arena* arena) {
  return Arena::CreateInternal< ::vega::PositionResolution >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LossSocialization* Arena::CreateMaybeMessage< ::vega::LossSocialization >(Arena* arena) {
  return Arena::CreateInternal< ::vega::LossSocialization >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TradeSettlement* Arena::CreateMaybeMessage< ::vega::TradeSettlement >(Arena* arena) {
  return Arena::CreateInternal< ::vega::TradeSettlement >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::SettlePosition* Arena::CreateMaybeMessage< ::vega::SettlePosition >(Arena* arena) {
  return Arena::CreateInternal< ::vega::SettlePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::SettleDistressed* Arena::CreateMaybeMessage< ::vega::SettleDistressed >(Arena* arena) {
  return Arena::CreateInternal< ::vega::SettleDistressed >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::MarketTick* Arena::CreateMaybeMessage< ::vega::MarketTick >(Arena* arena) {
  return Arena::CreateInternal< ::vega::MarketTick >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::AuctionEvent* Arena::CreateMaybeMessage< ::vega::AuctionEvent >(Arena* arena) {
  return Arena::CreateInternal< ::vega::AuctionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::BusEvent* Arena::CreateMaybeMessage< ::vega::BusEvent >(Arena* arena) {
  return Arena::CreateInternal< ::vega::BusEvent >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
