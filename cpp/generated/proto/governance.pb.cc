// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/governance.proto

#include "proto/governance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_proto_2fassets_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AssetSource_proto_2fassets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NetworkConfiguration_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UpdateMarket_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vote_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NewAsset_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NewMarket_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Proposal_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UpdateNetwork_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_ProposalTerms_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fmarkets_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Market_proto_2fmarkets_2eproto;
namespace vega {
class NetworkConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkConfiguration> _instance;
} _NetworkConfiguration_default_instance_;
class UpdateMarketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateMarket> _instance;
} _UpdateMarket_default_instance_;
class NewMarketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewMarket> _instance;
} _NewMarket_default_instance_;
class UpdateNetworkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateNetwork> _instance;
} _UpdateNetwork_default_instance_;
class NewAssetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewAsset> _instance;
} _NewAsset_default_instance_;
class ProposalTermsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProposalTerms> _instance;
  const ::vega::UpdateMarket* updatemarket_;
  const ::vega::NewMarket* newmarket_;
  const ::vega::UpdateNetwork* updatenetwork_;
  const ::vega::NewAsset* newasset_;
} _ProposalTerms_default_instance_;
class GovernanceDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GovernanceData> _instance;
} _GovernanceData_default_instance_;
class ProposalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Proposal> _instance;
} _Proposal_default_instance_;
class VoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vote> _instance;
} _Vote_default_instance_;
}  // namespace vega
static void InitDefaultsNetworkConfiguration_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NetworkConfiguration_default_instance_;
    new (ptr) ::vega::NetworkConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::NetworkConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NetworkConfiguration_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetworkConfiguration_proto_2fgovernance_2eproto}, {}};

static void InitDefaultsUpdateMarket_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_UpdateMarket_default_instance_;
    new (ptr) ::vega::UpdateMarket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::UpdateMarket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateMarket_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateMarket_proto_2fgovernance_2eproto}, {}};

static void InitDefaultsNewMarket_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NewMarket_default_instance_;
    new (ptr) ::vega::NewMarket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::NewMarket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NewMarket_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNewMarket_proto_2fgovernance_2eproto}, {
      &scc_info_Market_proto_2fmarkets_2eproto.base,}};

static void InitDefaultsUpdateNetwork_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_UpdateNetwork_default_instance_;
    new (ptr) ::vega::UpdateNetwork();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::UpdateNetwork::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateNetwork_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateNetwork_proto_2fgovernance_2eproto}, {
      &scc_info_NetworkConfiguration_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsNewAsset_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NewAsset_default_instance_;
    new (ptr) ::vega::NewAsset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::NewAsset::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NewAsset_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNewAsset_proto_2fgovernance_2eproto}, {
      &scc_info_AssetSource_proto_2fassets_2eproto.base,}};

static void InitDefaultsProposalTerms_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ProposalTerms_default_instance_;
    new (ptr) ::vega::ProposalTerms();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::ProposalTerms::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ProposalTerms_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsProposalTerms_proto_2fgovernance_2eproto}, {
      &scc_info_UpdateMarket_proto_2fgovernance_2eproto.base,
      &scc_info_NewMarket_proto_2fgovernance_2eproto.base,
      &scc_info_UpdateNetwork_proto_2fgovernance_2eproto.base,
      &scc_info_NewAsset_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsGovernanceData_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_GovernanceData_default_instance_;
    new (ptr) ::vega::GovernanceData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::GovernanceData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GovernanceData_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGovernanceData_proto_2fgovernance_2eproto}, {
      &scc_info_Proposal_proto_2fgovernance_2eproto.base,
      &scc_info_Vote_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsProposal_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Proposal_default_instance_;
    new (ptr) ::vega::Proposal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Proposal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Proposal_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProposal_proto_2fgovernance_2eproto}, {
      &scc_info_ProposalTerms_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsVote_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Vote_default_instance_;
    new (ptr) ::vega::Vote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Vote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vote_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVote_proto_2fgovernance_2eproto}, {}};

void InitDefaults_proto_2fgovernance_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkConfiguration_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateMarket_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewMarket_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateNetwork_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewAsset_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProposalTerms_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GovernanceData_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Proposal_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Vote_proto_2fgovernance_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_proto_2fgovernance_2eproto[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_proto_2fgovernance_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_proto_2fgovernance_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_proto_2fgovernance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, mincloseinseconds_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, maxcloseinseconds_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, minenactinseconds_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, maxenactinseconds_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, requiredparticipation_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, requiredmajority_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, minproposerbalance_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, minvoterbalance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::UpdateMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NewMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NewMarket, changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::UpdateNetwork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::UpdateNetwork, changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NewAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NewAsset, changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, closingtimestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, enactmenttimestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, validationtimestamp_),
  offsetof(::vega::ProposalTermsDefaultTypeInternal, updatemarket_),
  offsetof(::vega::ProposalTermsDefaultTypeInternal, newmarket_),
  offsetof(::vega::ProposalTermsDefaultTypeInternal, updatenetwork_),
  offsetof(::vega::ProposalTermsDefaultTypeInternal, newasset_),
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, change_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, proposal_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, yes_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, state_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, terms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Vote, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::Vote, value_),
  PROTOBUF_FIELD_OFFSET(::vega::Vote, proposalid_),
  PROTOBUF_FIELD_OFFSET(::vega::Vote, timestamp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::NetworkConfiguration)},
  { 13, -1, sizeof(::vega::UpdateMarket)},
  { 18, -1, sizeof(::vega::NewMarket)},
  { 24, -1, sizeof(::vega::UpdateNetwork)},
  { 30, -1, sizeof(::vega::NewAsset)},
  { 36, -1, sizeof(::vega::ProposalTerms)},
  { 49, -1, sizeof(::vega::GovernanceData)},
  { 57, -1, sizeof(::vega::Proposal)},
  { 68, -1, sizeof(::vega::Vote)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_NetworkConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_UpdateMarket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_NewMarket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_UpdateNetwork_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_NewAsset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_ProposalTerms_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_GovernanceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Proposal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Vote_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_proto_2fgovernance_2eproto = {
  {}, AddDescriptors_proto_2fgovernance_2eproto, "proto/governance.proto", schemas,
  file_default_instances, TableStruct_proto_2fgovernance_2eproto::offsets,
  file_level_metadata_proto_2fgovernance_2eproto, 9, file_level_enum_descriptors_proto_2fgovernance_2eproto, file_level_service_descriptors_proto_2fgovernance_2eproto,
};

const char descriptor_table_protodef_proto_2fgovernance_2eproto[] =
  "\n\026proto/governance.proto\022\004vega\0326github.c"
  "om/mwitkow/go-proto-validators/validator"
  ".proto\032\023proto/markets.proto\032\022proto/asset"
  "s.proto\"\360\001\n\024NetworkConfiguration\022\031\n\021minC"
  "loseInSeconds\030\001 \001(\003\022\031\n\021maxCloseInSeconds"
  "\030\002 \001(\003\022\031\n\021minEnactInSeconds\030\003 \001(\003\022\031\n\021max"
  "EnactInSeconds\030\004 \001(\003\022\035\n\025requiredParticip"
  "ation\030\005 \001(\002\022\030\n\020requiredMajority\030\006 \001(\002\022\032\n"
  "\022minProposerBalance\030\007 \001(\002\022\027\n\017minVoterBal"
  "ance\030\010 \001(\002\"\016\n\014UpdateMarket\"2\n\tNewMarket\022"
  "%\n\007changes\030\001 \001(\0132\014.vega.MarketB\006\342\337\037\002 \001\"D"
  "\n\rUpdateNetwork\0223\n\007changes\030\001 \001(\0132\032.vega."
  "NetworkConfigurationB\006\342\337\037\002 \001\"6\n\010NewAsset"
  "\022*\n\007changes\030\001 \001(\0132\021.vega.AssetSourceB\006\342\337"
  "\037\002 \001\"\240\002\n\rProposalTerms\022 \n\020closingTimesta"
  "mp\030\001 \001(\003B\006\342\337\037\002\020\000\022\"\n\022enactmentTimestamp\030\002"
  " \001(\003B\006\342\337\037\002\020\000\022\033\n\023validationTimestamp\030\005 \001("
  "\003\022*\n\014updateMarket\030e \001(\0132\022.vega.UpdateMar"
  "ketH\000\022$\n\tnewMarket\030f \001(\0132\017.vega.NewMarke"
  "tH\000\022,\n\rupdateNetwork\030g \001(\0132\023.vega.Update"
  "NetworkH\000\022\"\n\010newAsset\030h \001(\0132\016.vega.NewAs"
  "setH\000B\010\n\006change\"c\n\016GovernanceData\022 \n\010pro"
  "posal\030\001 \001(\0132\016.vega.Proposal\022\027\n\003yes\030\002 \003(\013"
  "2\n.vega.Vote\022\026\n\002no\030\003 \003(\0132\n.vega.Vote\"\277\002\n"
  "\010Proposal\022\n\n\002ID\030\001 \001(\t\022\021\n\treference\030\002 \001(\t"
  "\022\027\n\007partyID\030\003 \001(\tB\006\342\337\037\002X\001\022,\n\005state\030\004 \001(\016"
  "2\024.vega.Proposal.StateB\007\342\337\037\003\210\001\001\022\021\n\ttimes"
  "tamp\030\005 \001(\003\022*\n\005terms\030\006 \001(\0132\023.vega.Proposa"
  "lTermsB\006\342\337\037\002 \001\"\215\001\n\005State\022\025\n\021STATE_UNSPEC"
  "IFIED\020\000\022\020\n\014STATE_FAILED\020\001\022\016\n\nSTATE_OPEN\020"
  "\002\022\020\n\014STATE_PASSED\020\003\022\022\n\016STATE_REJECTED\020\004\022"
  "\022\n\016STATE_DECLINED\020\005\022\021\n\rSTATE_ENACTED\020\006\"\265"
  "\001\n\004Vote\022\027\n\007partyID\030\001 \001(\tB\006\342\337\037\002X\001\022(\n\005valu"
  "e\030\002 \001(\0162\020.vega.Vote.ValueB\007\342\337\037\003\210\001\001\022\032\n\npr"
  "oposalID\030\003 \001(\tB\006\342\337\037\002X\001\022\021\n\ttimestamp\030\004 \001("
  "\003\";\n\005Value\022\025\n\021VALUE_UNSPECIFIED\020\000\022\014\n\010VAL"
  "UE_NO\020\001\022\r\n\tVALUE_YES\020\002B!Z\037code.vegaproto"
  "col.io/vega/protob\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_proto_2fgovernance_2eproto = {
  false, InitDefaults_proto_2fgovernance_2eproto, 
  descriptor_table_protodef_proto_2fgovernance_2eproto,
  "proto/governance.proto", &assign_descriptors_table_proto_2fgovernance_2eproto, 1505,
};

void AddDescriptors_proto_2fgovernance_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto,
    ::AddDescriptors_proto_2fmarkets_2eproto,
    ::AddDescriptors_proto_2fassets_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_proto_2fgovernance_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fgovernance_2eproto = []() { AddDescriptors_proto_2fgovernance_2eproto(); return true; }();
namespace vega {
const ::google::protobuf::EnumDescriptor* Proposal_State_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fgovernance_2eproto);
  return file_level_enum_descriptors_proto_2fgovernance_2eproto[0];
}
bool Proposal_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Proposal_State Proposal::STATE_UNSPECIFIED;
const Proposal_State Proposal::STATE_FAILED;
const Proposal_State Proposal::STATE_OPEN;
const Proposal_State Proposal::STATE_PASSED;
const Proposal_State Proposal::STATE_REJECTED;
const Proposal_State Proposal::STATE_DECLINED;
const Proposal_State Proposal::STATE_ENACTED;
const Proposal_State Proposal::State_MIN;
const Proposal_State Proposal::State_MAX;
const int Proposal::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vote_Value_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fgovernance_2eproto);
  return file_level_enum_descriptors_proto_2fgovernance_2eproto[1];
}
bool Vote_Value_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vote_Value Vote::VALUE_UNSPECIFIED;
const Vote_Value Vote::VALUE_NO;
const Vote_Value Vote::VALUE_YES;
const Vote_Value Vote::Value_MIN;
const Vote_Value Vote::Value_MAX;
const int Vote::Value_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void NetworkConfiguration::InitAsDefaultInstance() {
}
class NetworkConfiguration::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkConfiguration::kMinCloseInSecondsFieldNumber;
const int NetworkConfiguration::kMaxCloseInSecondsFieldNumber;
const int NetworkConfiguration::kMinEnactInSecondsFieldNumber;
const int NetworkConfiguration::kMaxEnactInSecondsFieldNumber;
const int NetworkConfiguration::kRequiredParticipationFieldNumber;
const int NetworkConfiguration::kRequiredMajorityFieldNumber;
const int NetworkConfiguration::kMinProposerBalanceFieldNumber;
const int NetworkConfiguration::kMinVoterBalanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkConfiguration::NetworkConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.NetworkConfiguration)
}
NetworkConfiguration::NetworkConfiguration(const NetworkConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mincloseinseconds_, &from.mincloseinseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&minvoterbalance_) -
    reinterpret_cast<char*>(&mincloseinseconds_)) + sizeof(minvoterbalance_));
  // @@protoc_insertion_point(copy_constructor:vega.NetworkConfiguration)
}

void NetworkConfiguration::SharedCtor() {
  ::memset(&mincloseinseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minvoterbalance_) -
      reinterpret_cast<char*>(&mincloseinseconds_)) + sizeof(minvoterbalance_));
}

NetworkConfiguration::~NetworkConfiguration() {
  // @@protoc_insertion_point(destructor:vega.NetworkConfiguration)
  SharedDtor();
}

void NetworkConfiguration::SharedDtor() {
}

void NetworkConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkConfiguration& NetworkConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NetworkConfiguration_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void NetworkConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NetworkConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mincloseinseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minvoterbalance_) -
      reinterpret_cast<char*>(&mincloseinseconds_)) + sizeof(minvoterbalance_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkConfiguration::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NetworkConfiguration*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 minCloseInSeconds = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_mincloseinseconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 maxCloseInSeconds = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_maxcloseinseconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 minEnactInSeconds = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_minenactinseconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 maxEnactInSeconds = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_maxenactinseconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float requiredParticipation = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_requiredparticipation(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float requiredMajority = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_requiredmajority(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float minProposerBalance = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_minproposerbalance(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float minVoterBalance = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_minvoterbalance(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.NetworkConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 minCloseInSeconds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mincloseinseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 maxCloseInSeconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxcloseinseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 minEnactInSeconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minenactinseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 maxEnactInSeconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxenactinseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float requiredParticipation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &requiredparticipation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float requiredMajority = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &requiredmajority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float minProposerBalance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minproposerbalance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float minVoterBalance = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minvoterbalance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.NetworkConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.NetworkConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.NetworkConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 minCloseInSeconds = 1;
  if (this->mincloseinseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mincloseinseconds(), output);
  }

  // int64 maxCloseInSeconds = 2;
  if (this->maxcloseinseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->maxcloseinseconds(), output);
  }

  // int64 minEnactInSeconds = 3;
  if (this->minenactinseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->minenactinseconds(), output);
  }

  // int64 maxEnactInSeconds = 4;
  if (this->maxenactinseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->maxenactinseconds(), output);
  }

  // float requiredParticipation = 5;
  if (this->requiredparticipation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->requiredparticipation(), output);
  }

  // float requiredMajority = 6;
  if (this->requiredmajority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->requiredmajority(), output);
  }

  // float minProposerBalance = 7;
  if (this->minproposerbalance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->minproposerbalance(), output);
  }

  // float minVoterBalance = 8;
  if (this->minvoterbalance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->minvoterbalance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.NetworkConfiguration)
}

::google::protobuf::uint8* NetworkConfiguration::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NetworkConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 minCloseInSeconds = 1;
  if (this->mincloseinseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mincloseinseconds(), target);
  }

  // int64 maxCloseInSeconds = 2;
  if (this->maxcloseinseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->maxcloseinseconds(), target);
  }

  // int64 minEnactInSeconds = 3;
  if (this->minenactinseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->minenactinseconds(), target);
  }

  // int64 maxEnactInSeconds = 4;
  if (this->maxenactinseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->maxenactinseconds(), target);
  }

  // float requiredParticipation = 5;
  if (this->requiredparticipation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->requiredparticipation(), target);
  }

  // float requiredMajority = 6;
  if (this->requiredmajority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->requiredmajority(), target);
  }

  // float minProposerBalance = 7;
  if (this->minproposerbalance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->minproposerbalance(), target);
  }

  // float minVoterBalance = 8;
  if (this->minvoterbalance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->minvoterbalance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NetworkConfiguration)
  return target;
}

size_t NetworkConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NetworkConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 minCloseInSeconds = 1;
  if (this->mincloseinseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mincloseinseconds());
  }

  // int64 maxCloseInSeconds = 2;
  if (this->maxcloseinseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->maxcloseinseconds());
  }

  // int64 minEnactInSeconds = 3;
  if (this->minenactinseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->minenactinseconds());
  }

  // int64 maxEnactInSeconds = 4;
  if (this->maxenactinseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->maxenactinseconds());
  }

  // float requiredParticipation = 5;
  if (this->requiredparticipation() != 0) {
    total_size += 1 + 4;
  }

  // float requiredMajority = 6;
  if (this->requiredmajority() != 0) {
    total_size += 1 + 4;
  }

  // float minProposerBalance = 7;
  if (this->minproposerbalance() != 0) {
    total_size += 1 + 4;
  }

  // float minVoterBalance = 8;
  if (this->minvoterbalance() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NetworkConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkConfiguration* source =
      ::google::protobuf::DynamicCastToGenerated<NetworkConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NetworkConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NetworkConfiguration)
    MergeFrom(*source);
  }
}

void NetworkConfiguration::MergeFrom(const NetworkConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NetworkConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mincloseinseconds() != 0) {
    set_mincloseinseconds(from.mincloseinseconds());
  }
  if (from.maxcloseinseconds() != 0) {
    set_maxcloseinseconds(from.maxcloseinseconds());
  }
  if (from.minenactinseconds() != 0) {
    set_minenactinseconds(from.minenactinseconds());
  }
  if (from.maxenactinseconds() != 0) {
    set_maxenactinseconds(from.maxenactinseconds());
  }
  if (from.requiredparticipation() != 0) {
    set_requiredparticipation(from.requiredparticipation());
  }
  if (from.requiredmajority() != 0) {
    set_requiredmajority(from.requiredmajority());
  }
  if (from.minproposerbalance() != 0) {
    set_minproposerbalance(from.minproposerbalance());
  }
  if (from.minvoterbalance() != 0) {
    set_minvoterbalance(from.minvoterbalance());
  }
}

void NetworkConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NetworkConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkConfiguration::CopyFrom(const NetworkConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NetworkConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkConfiguration::IsInitialized() const {
  return true;
}

void NetworkConfiguration::Swap(NetworkConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkConfiguration::InternalSwap(NetworkConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mincloseinseconds_, other->mincloseinseconds_);
  swap(maxcloseinseconds_, other->maxcloseinseconds_);
  swap(minenactinseconds_, other->minenactinseconds_);
  swap(maxenactinseconds_, other->maxenactinseconds_);
  swap(requiredparticipation_, other->requiredparticipation_);
  swap(requiredmajority_, other->requiredmajority_);
  swap(minproposerbalance_, other->minproposerbalance_);
  swap(minvoterbalance_, other->minvoterbalance_);
}

::google::protobuf::Metadata NetworkConfiguration::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateMarket::InitAsDefaultInstance() {
}
class UpdateMarket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateMarket::UpdateMarket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.UpdateMarket)
}
UpdateMarket::UpdateMarket(const UpdateMarket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.UpdateMarket)
}

void UpdateMarket::SharedCtor() {
}

UpdateMarket::~UpdateMarket() {
  // @@protoc_insertion_point(destructor:vega.UpdateMarket)
  SharedDtor();
}

void UpdateMarket::SharedDtor() {
}

void UpdateMarket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMarket& UpdateMarket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateMarket_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void UpdateMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.UpdateMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateMarket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateMarket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateMarket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.UpdateMarket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:vega.UpdateMarket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.UpdateMarket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateMarket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.UpdateMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.UpdateMarket)
}

::google::protobuf::uint8* UpdateMarket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.UpdateMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.UpdateMarket)
  return target;
}

size_t UpdateMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.UpdateMarket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMarket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.UpdateMarket)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMarket* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateMarket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.UpdateMarket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.UpdateMarket)
    MergeFrom(*source);
  }
}

void UpdateMarket::MergeFrom(const UpdateMarket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.UpdateMarket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateMarket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.UpdateMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMarket::CopyFrom(const UpdateMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.UpdateMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMarket::IsInitialized() const {
  return true;
}

void UpdateMarket::Swap(UpdateMarket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateMarket::InternalSwap(UpdateMarket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateMarket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NewMarket::InitAsDefaultInstance() {
  ::vega::_NewMarket_default_instance_._instance.get_mutable()->changes_ = const_cast< ::vega::Market*>(
      ::vega::Market::internal_default_instance());
}
class NewMarket::HasBitSetters {
 public:
  static const ::vega::Market& changes(const NewMarket* msg);
};

const ::vega::Market&
NewMarket::HasBitSetters::changes(const NewMarket* msg) {
  return *msg->changes_;
}
void NewMarket::clear_changes() {
  if (GetArenaNoVirtual() == nullptr && changes_ != nullptr) {
    delete changes_;
  }
  changes_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewMarket::kChangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewMarket::NewMarket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.NewMarket)
}
NewMarket::NewMarket(const NewMarket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_changes()) {
    changes_ = new ::vega::Market(*from.changes_);
  } else {
    changes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.NewMarket)
}

void NewMarket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NewMarket_proto_2fgovernance_2eproto.base);
  changes_ = nullptr;
}

NewMarket::~NewMarket() {
  // @@protoc_insertion_point(destructor:vega.NewMarket)
  SharedDtor();
}

void NewMarket::SharedDtor() {
  if (this != internal_default_instance()) delete changes_;
}

void NewMarket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewMarket& NewMarket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NewMarket_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void NewMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NewMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && changes_ != nullptr) {
    delete changes_;
  }
  changes_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewMarket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NewMarket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Market changes = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Market::_InternalParse;
        object = msg->mutable_changes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewMarket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.NewMarket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Market changes = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.NewMarket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.NewMarket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewMarket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.NewMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Market changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::changes(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.NewMarket)
}

::google::protobuf::uint8* NewMarket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NewMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Market changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::changes(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NewMarket)
  return target;
}

size_t NewMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NewMarket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Market changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *changes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewMarket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NewMarket)
  GOOGLE_DCHECK_NE(&from, this);
  const NewMarket* source =
      ::google::protobuf::DynamicCastToGenerated<NewMarket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NewMarket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NewMarket)
    MergeFrom(*source);
  }
}

void NewMarket::MergeFrom(const NewMarket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NewMarket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_changes()) {
    mutable_changes()->::vega::Market::MergeFrom(from.changes());
  }
}

void NewMarket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NewMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMarket::CopyFrom(const NewMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NewMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMarket::IsInitialized() const {
  return true;
}

void NewMarket::Swap(NewMarket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewMarket::InternalSwap(NewMarket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(changes_, other->changes_);
}

::google::protobuf::Metadata NewMarket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateNetwork::InitAsDefaultInstance() {
  ::vega::_UpdateNetwork_default_instance_._instance.get_mutable()->changes_ = const_cast< ::vega::NetworkConfiguration*>(
      ::vega::NetworkConfiguration::internal_default_instance());
}
class UpdateNetwork::HasBitSetters {
 public:
  static const ::vega::NetworkConfiguration& changes(const UpdateNetwork* msg);
};

const ::vega::NetworkConfiguration&
UpdateNetwork::HasBitSetters::changes(const UpdateNetwork* msg) {
  return *msg->changes_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateNetwork::kChangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateNetwork::UpdateNetwork()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.UpdateNetwork)
}
UpdateNetwork::UpdateNetwork(const UpdateNetwork& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_changes()) {
    changes_ = new ::vega::NetworkConfiguration(*from.changes_);
  } else {
    changes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.UpdateNetwork)
}

void UpdateNetwork::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateNetwork_proto_2fgovernance_2eproto.base);
  changes_ = nullptr;
}

UpdateNetwork::~UpdateNetwork() {
  // @@protoc_insertion_point(destructor:vega.UpdateNetwork)
  SharedDtor();
}

void UpdateNetwork::SharedDtor() {
  if (this != internal_default_instance()) delete changes_;
}

void UpdateNetwork::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateNetwork& UpdateNetwork::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateNetwork_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void UpdateNetwork::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.UpdateNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && changes_ != nullptr) {
    delete changes_;
  }
  changes_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateNetwork::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateNetwork*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.NetworkConfiguration changes = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::NetworkConfiguration::_InternalParse;
        object = msg->mutable_changes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateNetwork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.UpdateNetwork)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.NetworkConfiguration changes = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.UpdateNetwork)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.UpdateNetwork)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateNetwork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.UpdateNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.NetworkConfiguration changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::changes(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.UpdateNetwork)
}

::google::protobuf::uint8* UpdateNetwork::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.UpdateNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.NetworkConfiguration changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::changes(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.UpdateNetwork)
  return target;
}

size_t UpdateNetwork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.UpdateNetwork)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.NetworkConfiguration changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *changes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateNetwork::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.UpdateNetwork)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateNetwork* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateNetwork>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.UpdateNetwork)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.UpdateNetwork)
    MergeFrom(*source);
  }
}

void UpdateNetwork::MergeFrom(const UpdateNetwork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.UpdateNetwork)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_changes()) {
    mutable_changes()->::vega::NetworkConfiguration::MergeFrom(from.changes());
  }
}

void UpdateNetwork::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.UpdateNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateNetwork::CopyFrom(const UpdateNetwork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.UpdateNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNetwork::IsInitialized() const {
  return true;
}

void UpdateNetwork::Swap(UpdateNetwork* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateNetwork::InternalSwap(UpdateNetwork* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(changes_, other->changes_);
}

::google::protobuf::Metadata UpdateNetwork::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NewAsset::InitAsDefaultInstance() {
  ::vega::_NewAsset_default_instance_._instance.get_mutable()->changes_ = const_cast< ::vega::AssetSource*>(
      ::vega::AssetSource::internal_default_instance());
}
class NewAsset::HasBitSetters {
 public:
  static const ::vega::AssetSource& changes(const NewAsset* msg);
};

const ::vega::AssetSource&
NewAsset::HasBitSetters::changes(const NewAsset* msg) {
  return *msg->changes_;
}
void NewAsset::clear_changes() {
  if (GetArenaNoVirtual() == nullptr && changes_ != nullptr) {
    delete changes_;
  }
  changes_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewAsset::kChangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewAsset::NewAsset()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.NewAsset)
}
NewAsset::NewAsset(const NewAsset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_changes()) {
    changes_ = new ::vega::AssetSource(*from.changes_);
  } else {
    changes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.NewAsset)
}

void NewAsset::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NewAsset_proto_2fgovernance_2eproto.base);
  changes_ = nullptr;
}

NewAsset::~NewAsset() {
  // @@protoc_insertion_point(destructor:vega.NewAsset)
  SharedDtor();
}

void NewAsset::SharedDtor() {
  if (this != internal_default_instance()) delete changes_;
}

void NewAsset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewAsset& NewAsset::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NewAsset_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void NewAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NewAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && changes_ != nullptr) {
    delete changes_;
  }
  changes_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewAsset::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NewAsset*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.AssetSource changes = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::AssetSource::_InternalParse;
        object = msg->mutable_changes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.NewAsset)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.AssetSource changes = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.NewAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.NewAsset)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.NewAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.AssetSource changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::changes(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.NewAsset)
}

::google::protobuf::uint8* NewAsset::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NewAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.AssetSource changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::changes(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NewAsset)
  return target;
}

size_t NewAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NewAsset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.AssetSource changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *changes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewAsset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NewAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const NewAsset* source =
      ::google::protobuf::DynamicCastToGenerated<NewAsset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NewAsset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NewAsset)
    MergeFrom(*source);
  }
}

void NewAsset::MergeFrom(const NewAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NewAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_changes()) {
    mutable_changes()->::vega::AssetSource::MergeFrom(from.changes());
  }
}

void NewAsset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NewAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewAsset::CopyFrom(const NewAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NewAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewAsset::IsInitialized() const {
  return true;
}

void NewAsset::Swap(NewAsset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewAsset::InternalSwap(NewAsset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(changes_, other->changes_);
}

::google::protobuf::Metadata NewAsset::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProposalTerms::InitAsDefaultInstance() {
  ::vega::_ProposalTerms_default_instance_.updatemarket_ = const_cast< ::vega::UpdateMarket*>(
      ::vega::UpdateMarket::internal_default_instance());
  ::vega::_ProposalTerms_default_instance_.newmarket_ = const_cast< ::vega::NewMarket*>(
      ::vega::NewMarket::internal_default_instance());
  ::vega::_ProposalTerms_default_instance_.updatenetwork_ = const_cast< ::vega::UpdateNetwork*>(
      ::vega::UpdateNetwork::internal_default_instance());
  ::vega::_ProposalTerms_default_instance_.newasset_ = const_cast< ::vega::NewAsset*>(
      ::vega::NewAsset::internal_default_instance());
}
class ProposalTerms::HasBitSetters {
 public:
  static const ::vega::UpdateMarket& updatemarket(const ProposalTerms* msg);
  static const ::vega::NewMarket& newmarket(const ProposalTerms* msg);
  static const ::vega::UpdateNetwork& updatenetwork(const ProposalTerms* msg);
  static const ::vega::NewAsset& newasset(const ProposalTerms* msg);
};

const ::vega::UpdateMarket&
ProposalTerms::HasBitSetters::updatemarket(const ProposalTerms* msg) {
  return *msg->change_.updatemarket_;
}
const ::vega::NewMarket&
ProposalTerms::HasBitSetters::newmarket(const ProposalTerms* msg) {
  return *msg->change_.newmarket_;
}
const ::vega::UpdateNetwork&
ProposalTerms::HasBitSetters::updatenetwork(const ProposalTerms* msg) {
  return *msg->change_.updatenetwork_;
}
const ::vega::NewAsset&
ProposalTerms::HasBitSetters::newasset(const ProposalTerms* msg) {
  return *msg->change_.newasset_;
}
void ProposalTerms::set_allocated_updatemarket(::vega::UpdateMarket* updatemarket) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (updatemarket) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      updatemarket = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updatemarket, submessage_arena);
    }
    set_has_updatemarket();
    change_.updatemarket_ = updatemarket;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ProposalTerms.updateMarket)
}
void ProposalTerms::set_allocated_newmarket(::vega::NewMarket* newmarket) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (newmarket) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      newmarket = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, newmarket, submessage_arena);
    }
    set_has_newmarket();
    change_.newmarket_ = newmarket;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ProposalTerms.newMarket)
}
void ProposalTerms::set_allocated_updatenetwork(::vega::UpdateNetwork* updatenetwork) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (updatenetwork) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      updatenetwork = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updatenetwork, submessage_arena);
    }
    set_has_updatenetwork();
    change_.updatenetwork_ = updatenetwork;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ProposalTerms.updateNetwork)
}
void ProposalTerms::set_allocated_newasset(::vega::NewAsset* newasset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (newasset) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      newasset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, newasset, submessage_arena);
    }
    set_has_newasset();
    change_.newasset_ = newasset;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ProposalTerms.newAsset)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProposalTerms::kClosingTimestampFieldNumber;
const int ProposalTerms::kEnactmentTimestampFieldNumber;
const int ProposalTerms::kValidationTimestampFieldNumber;
const int ProposalTerms::kUpdateMarketFieldNumber;
const int ProposalTerms::kNewMarketFieldNumber;
const int ProposalTerms::kUpdateNetworkFieldNumber;
const int ProposalTerms::kNewAssetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProposalTerms::ProposalTerms()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.ProposalTerms)
}
ProposalTerms::ProposalTerms(const ProposalTerms& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&closingtimestamp_, &from.closingtimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&validationtimestamp_) -
    reinterpret_cast<char*>(&closingtimestamp_)) + sizeof(validationtimestamp_));
  clear_has_change();
  switch (from.change_case()) {
    case kUpdateMarket: {
      mutable_updatemarket()->::vega::UpdateMarket::MergeFrom(from.updatemarket());
      break;
    }
    case kNewMarket: {
      mutable_newmarket()->::vega::NewMarket::MergeFrom(from.newmarket());
      break;
    }
    case kUpdateNetwork: {
      mutable_updatenetwork()->::vega::UpdateNetwork::MergeFrom(from.updatenetwork());
      break;
    }
    case kNewAsset: {
      mutable_newasset()->::vega::NewAsset::MergeFrom(from.newasset());
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.ProposalTerms)
}

void ProposalTerms::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProposalTerms_proto_2fgovernance_2eproto.base);
  ::memset(&closingtimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validationtimestamp_) -
      reinterpret_cast<char*>(&closingtimestamp_)) + sizeof(validationtimestamp_));
  clear_has_change();
}

ProposalTerms::~ProposalTerms() {
  // @@protoc_insertion_point(destructor:vega.ProposalTerms)
  SharedDtor();
}

void ProposalTerms::SharedDtor() {
  if (has_change()) {
    clear_change();
  }
}

void ProposalTerms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProposalTerms& ProposalTerms::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProposalTerms_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void ProposalTerms::clear_change() {
// @@protoc_insertion_point(one_of_clear_start:vega.ProposalTerms)
  switch (change_case()) {
    case kUpdateMarket: {
      delete change_.updatemarket_;
      break;
    }
    case kNewMarket: {
      delete change_.newmarket_;
      break;
    }
    case kUpdateNetwork: {
      delete change_.updatenetwork_;
      break;
    }
    case kNewAsset: {
      delete change_.newasset_;
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHANGE_NOT_SET;
}


void ProposalTerms::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ProposalTerms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&closingtimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validationtimestamp_) -
      reinterpret_cast<char*>(&closingtimestamp_)) + sizeof(validationtimestamp_));
  clear_change();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProposalTerms::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProposalTerms*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 closingTimestamp = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_closingtimestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 enactmentTimestamp = 2 [(.validator.field) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_enactmenttimestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 validationTimestamp = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_validationtimestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.UpdateMarket updateMarket = 101;
      case 101: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::UpdateMarket::_InternalParse;
        object = msg->mutable_updatemarket();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.NewMarket newMarket = 102;
      case 102: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::NewMarket::_InternalParse;
        object = msg->mutable_newmarket();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.UpdateNetwork updateNetwork = 103;
      case 103: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::UpdateNetwork::_InternalParse;
        object = msg->mutable_updatenetwork();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.NewAsset newAsset = 104;
      case 104: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::NewAsset::_InternalParse;
        object = msg->mutable_newasset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProposalTerms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.ProposalTerms)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 closingTimestamp = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &closingtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 enactmentTimestamp = 2 [(.validator.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enactmenttimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 validationTimestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &validationtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.UpdateMarket updateMarket = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (810 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updatemarket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.NewMarket newMarket = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (818 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_newmarket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.UpdateNetwork updateNetwork = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (826 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updatenetwork()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.NewAsset newAsset = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (834 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_newasset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.ProposalTerms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.ProposalTerms)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProposalTerms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.ProposalTerms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 closingTimestamp = 1 [(.validator.field) = {
  if (this->closingtimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->closingtimestamp(), output);
  }

  // int64 enactmentTimestamp = 2 [(.validator.field) = {
  if (this->enactmenttimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->enactmenttimestamp(), output);
  }

  // int64 validationTimestamp = 5;
  if (this->validationtimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->validationtimestamp(), output);
  }

  // .vega.UpdateMarket updateMarket = 101;
  if (has_updatemarket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, HasBitSetters::updatemarket(this), output);
  }

  // .vega.NewMarket newMarket = 102;
  if (has_newmarket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, HasBitSetters::newmarket(this), output);
  }

  // .vega.UpdateNetwork updateNetwork = 103;
  if (has_updatenetwork()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, HasBitSetters::updatenetwork(this), output);
  }

  // .vega.NewAsset newAsset = 104;
  if (has_newasset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, HasBitSetters::newasset(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.ProposalTerms)
}

::google::protobuf::uint8* ProposalTerms::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ProposalTerms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 closingTimestamp = 1 [(.validator.field) = {
  if (this->closingtimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->closingtimestamp(), target);
  }

  // int64 enactmentTimestamp = 2 [(.validator.field) = {
  if (this->enactmenttimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->enactmenttimestamp(), target);
  }

  // int64 validationTimestamp = 5;
  if (this->validationtimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->validationtimestamp(), target);
  }

  // .vega.UpdateMarket updateMarket = 101;
  if (has_updatemarket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, HasBitSetters::updatemarket(this), target);
  }

  // .vega.NewMarket newMarket = 102;
  if (has_newmarket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        102, HasBitSetters::newmarket(this), target);
  }

  // .vega.UpdateNetwork updateNetwork = 103;
  if (has_updatenetwork()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        103, HasBitSetters::updatenetwork(this), target);
  }

  // .vega.NewAsset newAsset = 104;
  if (has_newasset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        104, HasBitSetters::newasset(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ProposalTerms)
  return target;
}

size_t ProposalTerms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ProposalTerms)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 closingTimestamp = 1 [(.validator.field) = {
  if (this->closingtimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->closingtimestamp());
  }

  // int64 enactmentTimestamp = 2 [(.validator.field) = {
  if (this->enactmenttimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->enactmenttimestamp());
  }

  // int64 validationTimestamp = 5;
  if (this->validationtimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->validationtimestamp());
  }

  switch (change_case()) {
    // .vega.UpdateMarket updateMarket = 101;
    case kUpdateMarket: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.updatemarket_);
      break;
    }
    // .vega.NewMarket newMarket = 102;
    case kNewMarket: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.newmarket_);
      break;
    }
    // .vega.UpdateNetwork updateNetwork = 103;
    case kUpdateNetwork: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.updatenetwork_);
      break;
    }
    // .vega.NewAsset newAsset = 104;
    case kNewAsset: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.newasset_);
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposalTerms::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ProposalTerms)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposalTerms* source =
      ::google::protobuf::DynamicCastToGenerated<ProposalTerms>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ProposalTerms)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ProposalTerms)
    MergeFrom(*source);
  }
}

void ProposalTerms::MergeFrom(const ProposalTerms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ProposalTerms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.closingtimestamp() != 0) {
    set_closingtimestamp(from.closingtimestamp());
  }
  if (from.enactmenttimestamp() != 0) {
    set_enactmenttimestamp(from.enactmenttimestamp());
  }
  if (from.validationtimestamp() != 0) {
    set_validationtimestamp(from.validationtimestamp());
  }
  switch (from.change_case()) {
    case kUpdateMarket: {
      mutable_updatemarket()->::vega::UpdateMarket::MergeFrom(from.updatemarket());
      break;
    }
    case kNewMarket: {
      mutable_newmarket()->::vega::NewMarket::MergeFrom(from.newmarket());
      break;
    }
    case kUpdateNetwork: {
      mutable_updatenetwork()->::vega::UpdateNetwork::MergeFrom(from.updatenetwork());
      break;
    }
    case kNewAsset: {
      mutable_newasset()->::vega::NewAsset::MergeFrom(from.newasset());
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
}

void ProposalTerms::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ProposalTerms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposalTerms::CopyFrom(const ProposalTerms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ProposalTerms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalTerms::IsInitialized() const {
  return true;
}

void ProposalTerms::Swap(ProposalTerms* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProposalTerms::InternalSwap(ProposalTerms* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(closingtimestamp_, other->closingtimestamp_);
  swap(enactmenttimestamp_, other->enactmenttimestamp_);
  swap(validationtimestamp_, other->validationtimestamp_);
  swap(change_, other->change_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ProposalTerms::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GovernanceData::InitAsDefaultInstance() {
  ::vega::_GovernanceData_default_instance_._instance.get_mutable()->proposal_ = const_cast< ::vega::Proposal*>(
      ::vega::Proposal::internal_default_instance());
}
class GovernanceData::HasBitSetters {
 public:
  static const ::vega::Proposal& proposal(const GovernanceData* msg);
};

const ::vega::Proposal&
GovernanceData::HasBitSetters::proposal(const GovernanceData* msg) {
  return *msg->proposal_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GovernanceData::kProposalFieldNumber;
const int GovernanceData::kYesFieldNumber;
const int GovernanceData::kNoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GovernanceData::GovernanceData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.GovernanceData)
}
GovernanceData::GovernanceData(const GovernanceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      yes_(from.yes_),
      no_(from.no_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_proposal()) {
    proposal_ = new ::vega::Proposal(*from.proposal_);
  } else {
    proposal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.GovernanceData)
}

void GovernanceData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GovernanceData_proto_2fgovernance_2eproto.base);
  proposal_ = nullptr;
}

GovernanceData::~GovernanceData() {
  // @@protoc_insertion_point(destructor:vega.GovernanceData)
  SharedDtor();
}

void GovernanceData::SharedDtor() {
  if (this != internal_default_instance()) delete proposal_;
}

void GovernanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GovernanceData& GovernanceData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GovernanceData_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void GovernanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.GovernanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yes_.Clear();
  no_.Clear();
  if (GetArenaNoVirtual() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GovernanceData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GovernanceData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Proposal proposal = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Proposal::_InternalParse;
        object = msg->mutable_proposal();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .vega.Vote yes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Vote::_InternalParse;
          object = msg->add_yes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .vega.Vote no = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Vote::_InternalParse;
          object = msg->add_no();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GovernanceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.GovernanceData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Proposal proposal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proposal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.Vote yes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_yes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.Vote no = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_no()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.GovernanceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.GovernanceData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GovernanceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.GovernanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Proposal proposal = 1;
  if (this->has_proposal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::proposal(this), output);
  }

  // repeated .vega.Vote yes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->yes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->yes(static_cast<int>(i)),
      output);
  }

  // repeated .vega.Vote no = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->no_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->no(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.GovernanceData)
}

::google::protobuf::uint8* GovernanceData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.GovernanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Proposal proposal = 1;
  if (this->has_proposal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::proposal(this), target);
  }

  // repeated .vega.Vote yes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->yes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->yes(static_cast<int>(i)), target);
  }

  // repeated .vega.Vote no = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->no_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->no(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.GovernanceData)
  return target;
}

size_t GovernanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.GovernanceData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Vote yes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->yes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->yes(static_cast<int>(i)));
    }
  }

  // repeated .vega.Vote no = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->no_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->no(static_cast<int>(i)));
    }
  }

  // .vega.Proposal proposal = 1;
  if (this->has_proposal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *proposal_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GovernanceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.GovernanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const GovernanceData* source =
      ::google::protobuf::DynamicCastToGenerated<GovernanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.GovernanceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.GovernanceData)
    MergeFrom(*source);
  }
}

void GovernanceData::MergeFrom(const GovernanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.GovernanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  yes_.MergeFrom(from.yes_);
  no_.MergeFrom(from.no_);
  if (from.has_proposal()) {
    mutable_proposal()->::vega::Proposal::MergeFrom(from.proposal());
  }
}

void GovernanceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.GovernanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GovernanceData::CopyFrom(const GovernanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.GovernanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GovernanceData::IsInitialized() const {
  return true;
}

void GovernanceData::Swap(GovernanceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GovernanceData::InternalSwap(GovernanceData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&yes_)->InternalSwap(CastToBase(&other->yes_));
  CastToBase(&no_)->InternalSwap(CastToBase(&other->no_));
  swap(proposal_, other->proposal_);
}

::google::protobuf::Metadata GovernanceData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Proposal::InitAsDefaultInstance() {
  ::vega::_Proposal_default_instance_._instance.get_mutable()->terms_ = const_cast< ::vega::ProposalTerms*>(
      ::vega::ProposalTerms::internal_default_instance());
}
class Proposal::HasBitSetters {
 public:
  static const ::vega::ProposalTerms& terms(const Proposal* msg);
};

const ::vega::ProposalTerms&
Proposal::HasBitSetters::terms(const Proposal* msg) {
  return *msg->terms_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Proposal::kIDFieldNumber;
const int Proposal::kReferenceFieldNumber;
const int Proposal::kPartyIDFieldNumber;
const int Proposal::kStateFieldNumber;
const int Proposal::kTimestampFieldNumber;
const int Proposal::kTermsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Proposal::Proposal()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Proposal)
}
Proposal::Proposal(const Proposal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference().size() > 0) {
    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.has_terms()) {
    terms_ = new ::vega::ProposalTerms(*from.terms_);
  } else {
    terms_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:vega.Proposal)
}

void Proposal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Proposal_proto_2fgovernance_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&terms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&terms_)) + sizeof(state_));
}

Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:vega.Proposal)
  SharedDtor();
}

void Proposal::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete terms_;
}

void Proposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proposal& Proposal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Proposal_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Proposal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && terms_ != nullptr) {
    delete terms_;
  }
  terms_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Proposal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Proposal*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Proposal.ID");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string reference = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Proposal.reference");
        object = msg->mutable_reference();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string partyID = 3 [(.validator.field) = {
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Proposal.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.Proposal.State state = 4 [(.validator.field) = {
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_state(static_cast<::vega::Proposal_State>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 timestamp = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.ProposalTerms terms = 6 [(.validator.field) = {
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::ProposalTerms::_InternalParse;
        object = msg->mutable_terms();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Proposal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Proposal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Proposal.ID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference().data(), static_cast<int>(this->reference().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Proposal.reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 3 [(.validator.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Proposal.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Proposal.State state = 4 [(.validator.field) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::vega::Proposal_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.ProposalTerms terms = 6 [(.validator.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_terms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Proposal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Proposal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Proposal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Proposal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string reference = 2;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reference(), output);
  }

  // string partyID = 3 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->partyid(), output);
  }

  // .vega.Proposal.State state = 4 [(.validator.field) = {
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timestamp(), output);
  }

  // .vega.ProposalTerms terms = 6 [(.validator.field) = {
  if (this->has_terms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::terms(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Proposal)
}

::google::protobuf::uint8* Proposal::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Proposal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string reference = 2;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reference(), target);
  }

  // string partyID = 3 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->partyid(), target);
  }

  // .vega.Proposal.State state = 4 [(.validator.field) = {
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->timestamp(), target);
  }

  // .vega.ProposalTerms terms = 6 [(.validator.field) = {
  if (this->has_terms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::terms(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Proposal)
  return target;
}

size_t Proposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Proposal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string reference = 2;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference());
  }

  // string partyID = 3 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // .vega.ProposalTerms terms = 6 [(.validator.field) = {
  if (this->has_terms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *terms_);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // .vega.Proposal.State state = 4 [(.validator.field) = {
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proposal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  const Proposal* source =
      ::google::protobuf::DynamicCastToGenerated<Proposal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Proposal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Proposal)
    MergeFrom(*source);
  }
}

void Proposal::MergeFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.has_terms()) {
    mutable_terms()->::vega::ProposalTerms::MergeFrom(from.terms());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Proposal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proposal::CopyFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  return true;
}

void Proposal::Swap(Proposal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Proposal::InternalSwap(Proposal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_.Swap(&other->reference_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(terms_, other->terms_);
  swap(timestamp_, other->timestamp_);
  swap(state_, other->state_);
}

::google::protobuf::Metadata Proposal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Vote::InitAsDefaultInstance() {
}
class Vote::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vote::kPartyIDFieldNumber;
const int Vote::kValueFieldNumber;
const int Vote::kProposalIDFieldNumber;
const int Vote::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vote::Vote()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Vote)
}
Vote::Vote(const Vote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  proposalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proposalid().size() > 0) {
    proposalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposalid_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:vega.Vote)
}

void Vote::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Vote_proto_2fgovernance_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:vega.Vote)
  SharedDtor();
}

void Vote::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposalid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vote& Vote::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Vote_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Vote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Vote::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Vote*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Vote.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.Vote.Value value = 2 [(.validator.field) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_value(static_cast<::vega::Vote_Value>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string proposalID = 3 [(.validator.field) = {
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Vote.proposalID");
        object = msg->mutable_proposalid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Vote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Vote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Vote.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Vote.Value value = 2 [(.validator.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value(static_cast< ::vega::Vote_Value >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proposalID = 3 [(.validator.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proposalid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proposalid().data(), static_cast<int>(this->proposalid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Vote.proposalID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Vote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Vote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Vote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Vote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Vote.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  // .vega.Vote.Value value = 2 [(.validator.field) = {
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->value(), output);
  }

  // string proposalID = 3 [(.validator.field) = {
  if (this->proposalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proposalid().data(), static_cast<int>(this->proposalid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Vote.proposalID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->proposalid(), output);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Vote)
}

::google::protobuf::uint8* Vote::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Vote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Vote.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  // .vega.Vote.Value value = 2 [(.validator.field) = {
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->value(), target);
  }

  // string proposalID = 3 [(.validator.field) = {
  if (this->proposalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proposalid().data(), static_cast<int>(this->proposalid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Vote.proposalID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proposalid(), target);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Vote)
  return target;
}

size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Vote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string proposalID = 3 [(.validator.field) = {
  if (this->proposalid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proposalid());
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // .vega.Vote.Value value = 2 [(.validator.field) = {
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  const Vote* source =
      ::google::protobuf::DynamicCastToGenerated<Vote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Vote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Vote)
    MergeFrom(*source);
  }
}

void Vote::MergeFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.proposalid().size() > 0) {

    proposalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposalid_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Vote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  return true;
}

void Vote::Swap(Vote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vote::InternalSwap(Vote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proposalid_.Swap(&other->proposalid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata Vote::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vega
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::vega::NetworkConfiguration* Arena::CreateMaybeMessage< ::vega::NetworkConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::vega::NetworkConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::UpdateMarket* Arena::CreateMaybeMessage< ::vega::UpdateMarket >(Arena* arena) {
  return Arena::CreateInternal< ::vega::UpdateMarket >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NewMarket* Arena::CreateMaybeMessage< ::vega::NewMarket >(Arena* arena) {
  return Arena::CreateInternal< ::vega::NewMarket >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::UpdateNetwork* Arena::CreateMaybeMessage< ::vega::UpdateNetwork >(Arena* arena) {
  return Arena::CreateInternal< ::vega::UpdateNetwork >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NewAsset* Arena::CreateMaybeMessage< ::vega::NewAsset >(Arena* arena) {
  return Arena::CreateInternal< ::vega::NewAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ProposalTerms* Arena::CreateMaybeMessage< ::vega::ProposalTerms >(Arena* arena) {
  return Arena::CreateInternal< ::vega::ProposalTerms >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::GovernanceData* Arena::CreateMaybeMessage< ::vega::GovernanceData >(Arena* arena) {
  return Arena::CreateInternal< ::vega::GovernanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Proposal* Arena::CreateMaybeMessage< ::vega::Proposal >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Proposal >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Vote* Arena::CreateMaybeMessage< ::vega::Vote >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Vote >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
