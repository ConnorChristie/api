// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/governance.proto

#include "proto/governance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_proto_2fassets_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AssetSource_proto_2fassets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FeeFactorsConfiguration_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FutureProduct_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UpdateMarket_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vote_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GovernanceData_NoPartyEntry_DoNotUse_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GovernanceData_YesPartyEntry_DoNotUse_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_InstrumentConfiguration_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NewAsset_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NewMarket_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Proposal_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UpdateNetwork_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_NetworkConfiguration_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_ProposalTerms_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgovernance_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_NewMarketConfiguration_proto_2fgovernance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fmarkets_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ContinuousTrading_proto_2fmarkets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fmarkets_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DiscreteTrading_proto_2fmarkets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fmarkets_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScalingFactors_proto_2fmarkets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fmarkets_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SimpleModelParams_proto_2fmarkets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fmarkets_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LogNormalRiskModel_proto_2fmarkets_2eproto;
namespace vega {
class NetworkConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkConfiguration> _instance;
} _NetworkConfiguration_default_instance_;
class FeeFactorsConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FeeFactorsConfiguration> _instance;
} _FeeFactorsConfiguration_default_instance_;
class FutureProductDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FutureProduct> _instance;
} _FutureProduct_default_instance_;
class InstrumentConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InstrumentConfiguration> _instance;
  const ::vega::FutureProduct* future_;
} _InstrumentConfiguration_default_instance_;
class NewMarketConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewMarketConfiguration> _instance;
  const ::vega::SimpleModelParams* simple_;
  const ::vega::LogNormalRiskModel* lognormal_;
  const ::vega::ContinuousTrading* continuous_;
  const ::vega::DiscreteTrading* discrete_;
} _NewMarketConfiguration_default_instance_;
class NewMarketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewMarket> _instance;
} _NewMarket_default_instance_;
class UpdateMarketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateMarket> _instance;
} _UpdateMarket_default_instance_;
class UpdateNetworkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateNetwork> _instance;
} _UpdateNetwork_default_instance_;
class NewAssetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewAsset> _instance;
} _NewAsset_default_instance_;
class ProposalTermsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProposalTerms> _instance;
  const ::vega::UpdateMarket* updatemarket_;
  const ::vega::NewMarket* newmarket_;
  const ::vega::UpdateNetwork* updatenetwork_;
  const ::vega::NewAsset* newasset_;
} _ProposalTerms_default_instance_;
class GovernanceData_YesPartyEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GovernanceData_YesPartyEntry_DoNotUse> _instance;
} _GovernanceData_YesPartyEntry_DoNotUse_default_instance_;
class GovernanceData_NoPartyEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GovernanceData_NoPartyEntry_DoNotUse> _instance;
} _GovernanceData_NoPartyEntry_DoNotUse_default_instance_;
class GovernanceDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GovernanceData> _instance;
} _GovernanceData_default_instance_;
class ProposalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Proposal> _instance;
} _Proposal_default_instance_;
class VoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vote> _instance;
} _Vote_default_instance_;
}  // namespace vega
static void InitDefaultsNetworkConfiguration_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NetworkConfiguration_default_instance_;
    new (ptr) ::vega::NetworkConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::NetworkConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NetworkConfiguration_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNetworkConfiguration_proto_2fgovernance_2eproto}, {
      &scc_info_ScalingFactors_proto_2fmarkets_2eproto.base,
      &scc_info_FeeFactorsConfiguration_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsFeeFactorsConfiguration_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_FeeFactorsConfiguration_default_instance_;
    new (ptr) ::vega::FeeFactorsConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::FeeFactorsConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FeeFactorsConfiguration_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFeeFactorsConfiguration_proto_2fgovernance_2eproto}, {}};

static void InitDefaultsFutureProduct_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_FutureProduct_default_instance_;
    new (ptr) ::vega::FutureProduct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::FutureProduct::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FutureProduct_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFutureProduct_proto_2fgovernance_2eproto}, {}};

static void InitDefaultsInstrumentConfiguration_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_InstrumentConfiguration_default_instance_;
    new (ptr) ::vega::InstrumentConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::InstrumentConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InstrumentConfiguration_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInstrumentConfiguration_proto_2fgovernance_2eproto}, {
      &scc_info_FutureProduct_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsNewMarketConfiguration_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NewMarketConfiguration_default_instance_;
    new (ptr) ::vega::NewMarketConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::NewMarketConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_NewMarketConfiguration_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsNewMarketConfiguration_proto_2fgovernance_2eproto}, {
      &scc_info_InstrumentConfiguration_proto_2fgovernance_2eproto.base,
      &scc_info_SimpleModelParams_proto_2fmarkets_2eproto.base,
      &scc_info_LogNormalRiskModel_proto_2fmarkets_2eproto.base,
      &scc_info_ContinuousTrading_proto_2fmarkets_2eproto.base,
      &scc_info_DiscreteTrading_proto_2fmarkets_2eproto.base,}};

static void InitDefaultsNewMarket_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NewMarket_default_instance_;
    new (ptr) ::vega::NewMarket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::NewMarket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NewMarket_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNewMarket_proto_2fgovernance_2eproto}, {
      &scc_info_NewMarketConfiguration_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsUpdateMarket_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_UpdateMarket_default_instance_;
    new (ptr) ::vega::UpdateMarket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::UpdateMarket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateMarket_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateMarket_proto_2fgovernance_2eproto}, {}};

static void InitDefaultsUpdateNetwork_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_UpdateNetwork_default_instance_;
    new (ptr) ::vega::UpdateNetwork();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::UpdateNetwork::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateNetwork_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateNetwork_proto_2fgovernance_2eproto}, {
      &scc_info_NetworkConfiguration_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsNewAsset_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NewAsset_default_instance_;
    new (ptr) ::vega::NewAsset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::NewAsset::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NewAsset_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNewAsset_proto_2fgovernance_2eproto}, {
      &scc_info_AssetSource_proto_2fassets_2eproto.base,}};

static void InitDefaultsProposalTerms_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ProposalTerms_default_instance_;
    new (ptr) ::vega::ProposalTerms();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::ProposalTerms::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ProposalTerms_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsProposalTerms_proto_2fgovernance_2eproto}, {
      &scc_info_UpdateMarket_proto_2fgovernance_2eproto.base,
      &scc_info_NewMarket_proto_2fgovernance_2eproto.base,
      &scc_info_UpdateNetwork_proto_2fgovernance_2eproto.base,
      &scc_info_NewAsset_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsGovernanceData_YesPartyEntry_DoNotUse_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_GovernanceData_YesPartyEntry_DoNotUse_default_instance_;
    new (ptr) ::vega::GovernanceData_YesPartyEntry_DoNotUse();
  }
  ::vega::GovernanceData_YesPartyEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GovernanceData_YesPartyEntry_DoNotUse_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGovernanceData_YesPartyEntry_DoNotUse_proto_2fgovernance_2eproto}, {
      &scc_info_Vote_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsGovernanceData_NoPartyEntry_DoNotUse_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_GovernanceData_NoPartyEntry_DoNotUse_default_instance_;
    new (ptr) ::vega::GovernanceData_NoPartyEntry_DoNotUse();
  }
  ::vega::GovernanceData_NoPartyEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GovernanceData_NoPartyEntry_DoNotUse_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGovernanceData_NoPartyEntry_DoNotUse_proto_2fgovernance_2eproto}, {
      &scc_info_Vote_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsGovernanceData_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_GovernanceData_default_instance_;
    new (ptr) ::vega::GovernanceData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::GovernanceData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_GovernanceData_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsGovernanceData_proto_2fgovernance_2eproto}, {
      &scc_info_Proposal_proto_2fgovernance_2eproto.base,
      &scc_info_Vote_proto_2fgovernance_2eproto.base,
      &scc_info_GovernanceData_YesPartyEntry_DoNotUse_proto_2fgovernance_2eproto.base,
      &scc_info_GovernanceData_NoPartyEntry_DoNotUse_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsProposal_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Proposal_default_instance_;
    new (ptr) ::vega::Proposal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Proposal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Proposal_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProposal_proto_2fgovernance_2eproto}, {
      &scc_info_ProposalTerms_proto_2fgovernance_2eproto.base,}};

static void InitDefaultsVote_proto_2fgovernance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Vote_default_instance_;
    new (ptr) ::vega::Vote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Vote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vote_proto_2fgovernance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVote_proto_2fgovernance_2eproto}, {}};

void InitDefaults_proto_2fgovernance_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkConfiguration_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FeeFactorsConfiguration_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FutureProduct_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InstrumentConfiguration_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewMarketConfiguration_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewMarket_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateMarket_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateNetwork_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewAsset_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProposalTerms_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GovernanceData_YesPartyEntry_DoNotUse_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GovernanceData_NoPartyEntry_DoNotUse_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GovernanceData_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Proposal_proto_2fgovernance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Vote_proto_2fgovernance_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_proto_2fgovernance_2eproto[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_proto_2fgovernance_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_proto_2fgovernance_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_proto_2fgovernance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, mincloseinseconds_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, maxcloseinseconds_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, minenactinseconds_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, maxenactinseconds_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, requiredparticipation_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, requiredmajority_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, minproposerbalance_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, minvoterbalance_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, marginconfiguration_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkConfiguration, feefactorsconfiguration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::FeeFactorsConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::FeeFactorsConfiguration, infrastructurefee_),
  PROTOBUF_FIELD_OFFSET(::vega::FeeFactorsConfiguration, makerfee_),
  PROTOBUF_FIELD_OFFSET(::vega::FeeFactorsConfiguration, liquidityfee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::FutureProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::FutureProduct, maturity_),
  PROTOBUF_FIELD_OFFSET(::vega::FutureProduct, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::InstrumentConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::InstrumentConfiguration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::InstrumentConfiguration, name_),
  PROTOBUF_FIELD_OFFSET(::vega::InstrumentConfiguration, code_),
  PROTOBUF_FIELD_OFFSET(::vega::InstrumentConfiguration, basename_),
  PROTOBUF_FIELD_OFFSET(::vega::InstrumentConfiguration, quotename_),
  offsetof(::vega::InstrumentConfigurationDefaultTypeInternal, future_),
  PROTOBUF_FIELD_OFFSET(::vega::InstrumentConfiguration, product_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, instrument_),
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, decimalplaces_),
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, metadata_),
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, openingauctionduration_),
  offsetof(::vega::NewMarketConfigurationDefaultTypeInternal, simple_),
  offsetof(::vega::NewMarketConfigurationDefaultTypeInternal, lognormal_),
  offsetof(::vega::NewMarketConfigurationDefaultTypeInternal, continuous_),
  offsetof(::vega::NewMarketConfigurationDefaultTypeInternal, discrete_),
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, riskParameters_),
  PROTOBUF_FIELD_OFFSET(::vega::NewMarketConfiguration, tradingMode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NewMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NewMarket, changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::UpdateMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::UpdateNetwork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::UpdateNetwork, changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NewAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NewAsset, changes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, closingtimestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, enactmenttimestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, validationtimestamp_),
  offsetof(::vega::ProposalTermsDefaultTypeInternal, updatemarket_),
  offsetof(::vega::ProposalTermsDefaultTypeInternal, newmarket_),
  offsetof(::vega::ProposalTermsDefaultTypeInternal, updatenetwork_),
  offsetof(::vega::ProposalTermsDefaultTypeInternal, newasset_),
  PROTOBUF_FIELD_OFFSET(::vega::ProposalTerms, change_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_YesPartyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_YesPartyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_YesPartyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_YesPartyEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_NoPartyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_NoPartyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_NoPartyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData_NoPartyEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, proposal_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, yes_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, no_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, yesparty_),
  PROTOBUF_FIELD_OFFSET(::vega::GovernanceData, noparty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, state_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, terms_),
  PROTOBUF_FIELD_OFFSET(::vega::Proposal, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Vote, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::Vote, value_),
  PROTOBUF_FIELD_OFFSET(::vega::Vote, proposalid_),
  PROTOBUF_FIELD_OFFSET(::vega::Vote, timestamp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::NetworkConfiguration)},
  { 15, -1, sizeof(::vega::FeeFactorsConfiguration)},
  { 23, -1, sizeof(::vega::FutureProduct)},
  { 30, -1, sizeof(::vega::InstrumentConfiguration)},
  { 41, -1, sizeof(::vega::NewMarketConfiguration)},
  { 56, -1, sizeof(::vega::NewMarket)},
  { 62, -1, sizeof(::vega::UpdateMarket)},
  { 67, -1, sizeof(::vega::UpdateNetwork)},
  { 73, -1, sizeof(::vega::NewAsset)},
  { 79, -1, sizeof(::vega::ProposalTerms)},
  { 92, 99, sizeof(::vega::GovernanceData_YesPartyEntry_DoNotUse)},
  { 101, 108, sizeof(::vega::GovernanceData_NoPartyEntry_DoNotUse)},
  { 110, -1, sizeof(::vega::GovernanceData)},
  { 120, -1, sizeof(::vega::Proposal)},
  { 132, -1, sizeof(::vega::Vote)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_NetworkConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_FeeFactorsConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_FutureProduct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_InstrumentConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_NewMarketConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_NewMarket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_UpdateMarket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_UpdateNetwork_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_NewAsset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_ProposalTerms_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_GovernanceData_YesPartyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_GovernanceData_NoPartyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_GovernanceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Proposal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Vote_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_proto_2fgovernance_2eproto = {
  {}, AddDescriptors_proto_2fgovernance_2eproto, "proto/governance.proto", schemas,
  file_default_instances, TableStruct_proto_2fgovernance_2eproto::offsets,
  file_level_metadata_proto_2fgovernance_2eproto, 15, file_level_enum_descriptors_proto_2fgovernance_2eproto, file_level_service_descriptors_proto_2fgovernance_2eproto,
};

const char descriptor_table_protodef_proto_2fgovernance_2eproto[] =
  "\n\026proto/governance.proto\022\004vega\0326github.c"
  "om/mwitkow/go-proto-validators/validator"
  ".proto\032\023proto/markets.proto\032\022proto/asset"
  "s.proto\"\343\002\n\024NetworkConfiguration\022\031\n\021minC"
  "loseInSeconds\030\001 \001(\003\022\031\n\021maxCloseInSeconds"
  "\030\002 \001(\003\022\031\n\021minEnactInSeconds\030\003 \001(\003\022\031\n\021max"
  "EnactInSeconds\030\004 \001(\003\022\035\n\025requiredParticip"
  "ation\030\005 \001(\002\022\030\n\020requiredMajority\030\006 \001(\002\022\032\n"
  "\022minProposerBalance\030\007 \001(\002\022\027\n\017minVoterBal"
  "ance\030\010 \001(\002\0221\n\023marginConfiguration\030\t \001(\0132"
  "\024.vega.ScalingFactors\022>\n\027feeFactorsConfi"
  "guration\030\n \001(\0132\035.vega.FeeFactorsConfigur"
  "ation\"\\\n\027FeeFactorsConfiguration\022\031\n\021infr"
  "astructureFee\030\001 \001(\t\022\020\n\010makerFee\030\002 \001(\t\022\024\n"
  "\014liquidityFee\030\003 \001(\t\"@\n\rFutureProduct\022\030\n\010"
  "maturity\030\001 \001(\tB\006\342\337\037\002X\001\022\025\n\005asset\030\002 \001(\tB\006\342"
  "\337\037\002X\001\"\254\001\n\027InstrumentConfiguration\022\024\n\004nam"
  "e\030\001 \001(\tB\006\342\337\037\002X\001\022\024\n\004code\030\002 \001(\tB\006\342\337\037\002X\001\022\030\n"
  "\010baseName\030\003 \001(\tB\006\342\337\037\002X\001\022\031\n\tquoteName\030\004 \001"
  "(\tB\006\342\337\037\002X\001\022%\n\006future\030d \001(\0132\023.vega.Future"
  "ProductH\000B\t\n\007product\"\374\002\n\026NewMarketConfig"
  "uration\0229\n\ninstrument\030\001 \001(\0132\035.vega.Instr"
  "umentConfigurationB\006\342\337\037\002 \001\022\036\n\rdecimalPla"
  "ces\030\002 \001(\004B\007\342\337\037\003\030\226\001\022\020\n\010metadata\030\003 \003(\t\022\036\n\026"
  "openingAuctionDuration\030\004 \001(\003\022)\n\006simple\030d"
  " \001(\0132\027.vega.SimpleModelParamsH\000\022-\n\tlogNo"
  "rmal\030e \001(\0132\030.vega.LogNormalRiskModelH\000\022."
  "\n\ncontinuous\030\310\001 \001(\0132\027.vega.ContinuousTra"
  "dingH\001\022*\n\010discrete\030\311\001 \001(\0132\025.vega.Discret"
  "eTradingH\001B\020\n\016riskParametersB\r\n\013tradingM"
  "ode\"B\n\tNewMarket\0225\n\007changes\030\001 \001(\0132\034.vega"
  ".NewMarketConfigurationB\006\342\337\037\002 \001\"\016\n\014Updat"
  "eMarket\"D\n\rUpdateNetwork\0223\n\007changes\030\001 \001("
  "\0132\032.vega.NetworkConfigurationB\006\342\337\037\002 \001\"6\n"
  "\010NewAsset\022*\n\007changes\030\001 \001(\0132\021.vega.AssetS"
  "ourceB\006\342\337\037\002 \001\"\240\002\n\rProposalTerms\022 \n\020closi"
  "ngTimestamp\030\001 \001(\003B\006\342\337\037\002\020\000\022\"\n\022enactmentTi"
  "mestamp\030\002 \001(\003B\006\342\337\037\002\020\000\022\033\n\023validationTimes"
  "tamp\030\003 \001(\003\022*\n\014updateMarket\030e \001(\0132\022.vega."
  "UpdateMarketH\000\022$\n\tnewMarket\030f \001(\0132\017.vega"
  ".NewMarketH\000\022,\n\rupdateNetwork\030g \001(\0132\023.ve"
  "ga.UpdateNetworkH\000\022\"\n\010newAsset\030h \001(\0132\016.v"
  "ega.NewAssetH\000B\010\n\006change\"\306\002\n\016GovernanceD"
  "ata\022 \n\010proposal\030\001 \001(\0132\016.vega.Proposal\022\027\n"
  "\003yes\030\002 \003(\0132\n.vega.Vote\022\026\n\002no\030\003 \003(\0132\n.veg"
  "a.Vote\0224\n\010yesParty\030\004 \003(\0132\".vega.Governan"
  "ceData.YesPartyEntry\0222\n\007noParty\030\005 \003(\0132!."
  "vega.GovernanceData.NoPartyEntry\032;\n\rYesP"
  "artyEntry\022\013\n\003key\030\001 \001(\t\022\031\n\005value\030\002 \001(\0132\n."
  "vega.Vote:\0028\001\032:\n\014NoPartyEntry\022\013\n\003key\030\001 \001"
  "(\t\022\031\n\005value\030\002 \001(\0132\n.vega.Vote:\0028\001\"\205\003\n\010Pr"
  "oposal\022\n\n\002ID\030\001 \001(\t\022\021\n\treference\030\002 \001(\t\022\027\n"
  "\007partyID\030\003 \001(\tB\006\342\337\037\002X\001\022,\n\005state\030\004 \001(\0162\024."
  "vega.Proposal.StateB\007\342\337\037\003\210\001\001\022\021\n\ttimestam"
  "p\030\005 \001(\003\022*\n\005terms\030\006 \001(\0132\023.vega.ProposalTe"
  "rmsB\006\342\337\037\002 \001\022#\n\006reason\030\007 \001(\0162\023.vega.Propo"
  "salError\"\256\001\n\005State\022\025\n\021STATE_UNSPECIFIED\020"
  "\000\022\020\n\014STATE_FAILED\020\001\022\016\n\nSTATE_OPEN\020\002\022\020\n\014S"
  "TATE_PASSED\020\003\022\022\n\016STATE_REJECTED\020\004\022\022\n\016STA"
  "TE_DECLINED\020\005\022\021\n\rSTATE_ENACTED\020\006\022\037\n\033STAT"
  "E_WAITING_FOR_NODE_VOTE\020\007\"\265\001\n\004Vote\022\027\n\007pa"
  "rtyID\030\001 \001(\tB\006\342\337\037\002X\001\022(\n\005value\030\002 \001(\0162\020.veg"
  "a.Vote.ValueB\007\342\337\037\003\210\001\001\022\032\n\nproposalID\030\003 \001("
  "\tB\006\342\337\037\002X\001\022\021\n\ttimestamp\030\004 \001(\003\";\n\005Value\022\025\n"
  "\021VALUE_UNSPECIFIED\020\000\022\014\n\010VALUE_NO\020\001\022\r\n\tVA"
  "LUE_YES\020\002*\377\005\n\rProposalError\022\036\n\032PROPOSAL_"
  "ERROR_UNSPECIFIED\020\000\022&\n\"PROPOSAL_ERROR_CL"
  "OSE_TIME_TOO_SOON\020\001\022&\n\"PROPOSAL_ERROR_CL"
  "OSE_TIME_TOO_LATE\020\002\022&\n\"PROPOSAL_ERROR_EN"
  "ACT_TIME_TOO_SOON\020\003\022&\n\"PROPOSAL_ERROR_EN"
  "ACT_TIME_TOO_LATE\020\004\022&\n\"PROPOSAL_ERROR_IN"
  "SUFFICIENT_TOKENS\020\005\022.\n*PROPOSAL_ERROR_IN"
  "VALID_INSTRUMENT_SECURITY\020\006\022\035\n\031PROPOSAL_"
  "ERROR_NO_PRODUCT\020\007\022&\n\"PROPOSAL_ERROR_UNS"
  "UPPORTED_PRODUCT\020\010\0223\n/PROPOSAL_ERROR_INV"
  "ALID_FUTURE_PRODUCT_TIMESTAMP\020\t\022-\n)PROPO"
  "SAL_ERROR_PRODUCT_MATURITY_IS_PASSED\020\n\022\""
  "\n\036PROPOSAL_ERROR_NO_TRADING_MODE\020\013\022+\n\'PR"
  "OPOSAL_ERROR_UNSUPPORTED_TRADING_MODE\020\014\022"
  ")\n%PROPOSAL_ERROR_NODE_VALIDATION_FAILED"
  "\020\r\022.\n*PROPOSAL_ERROR_MISSING_BUILTIN_ASS"
  "ET_FIELD\020\016\0221\n-PROPOSAL_ERROR_MISSING_ERC"
  "20_CONTRACT_ADDRESS\020\017\022 \n\034PROPOSAL_ERROR_"
  "INVALID_ASSET\020\020\022*\n&PROPOSAL_ERROR_INCOMP"
  "ATIBLE_TIMESTAMPS\020\021B!Z\037code.vegaprotocol"
  ".io/vega/protob\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_proto_2fgovernance_2eproto = {
  false, InitDefaults_proto_2fgovernance_2eproto, 
  descriptor_table_protodef_proto_2fgovernance_2eproto,
  "proto/governance.proto", &assign_descriptors_table_proto_2fgovernance_2eproto, 3422,
};

void AddDescriptors_proto_2fgovernance_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto,
    ::AddDescriptors_proto_2fmarkets_2eproto,
    ::AddDescriptors_proto_2fassets_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_proto_2fgovernance_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fgovernance_2eproto = []() { AddDescriptors_proto_2fgovernance_2eproto(); return true; }();
namespace vega {
const ::google::protobuf::EnumDescriptor* Proposal_State_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fgovernance_2eproto);
  return file_level_enum_descriptors_proto_2fgovernance_2eproto[0];
}
bool Proposal_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Proposal_State Proposal::STATE_UNSPECIFIED;
const Proposal_State Proposal::STATE_FAILED;
const Proposal_State Proposal::STATE_OPEN;
const Proposal_State Proposal::STATE_PASSED;
const Proposal_State Proposal::STATE_REJECTED;
const Proposal_State Proposal::STATE_DECLINED;
const Proposal_State Proposal::STATE_ENACTED;
const Proposal_State Proposal::STATE_WAITING_FOR_NODE_VOTE;
const Proposal_State Proposal::State_MIN;
const Proposal_State Proposal::State_MAX;
const int Proposal::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vote_Value_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fgovernance_2eproto);
  return file_level_enum_descriptors_proto_2fgovernance_2eproto[1];
}
bool Vote_Value_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vote_Value Vote::VALUE_UNSPECIFIED;
const Vote_Value Vote::VALUE_NO;
const Vote_Value Vote::VALUE_YES;
const Vote_Value Vote::Value_MIN;
const Vote_Value Vote::Value_MAX;
const int Vote::Value_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ProposalError_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fgovernance_2eproto);
  return file_level_enum_descriptors_proto_2fgovernance_2eproto[2];
}
bool ProposalError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NetworkConfiguration::InitAsDefaultInstance() {
  ::vega::_NetworkConfiguration_default_instance_._instance.get_mutable()->marginconfiguration_ = const_cast< ::vega::ScalingFactors*>(
      ::vega::ScalingFactors::internal_default_instance());
  ::vega::_NetworkConfiguration_default_instance_._instance.get_mutable()->feefactorsconfiguration_ = const_cast< ::vega::FeeFactorsConfiguration*>(
      ::vega::FeeFactorsConfiguration::internal_default_instance());
}
class NetworkConfiguration::HasBitSetters {
 public:
  static const ::vega::ScalingFactors& marginconfiguration(const NetworkConfiguration* msg);
  static const ::vega::FeeFactorsConfiguration& feefactorsconfiguration(const NetworkConfiguration* msg);
};

const ::vega::ScalingFactors&
NetworkConfiguration::HasBitSetters::marginconfiguration(const NetworkConfiguration* msg) {
  return *msg->marginconfiguration_;
}
const ::vega::FeeFactorsConfiguration&
NetworkConfiguration::HasBitSetters::feefactorsconfiguration(const NetworkConfiguration* msg) {
  return *msg->feefactorsconfiguration_;
}
void NetworkConfiguration::clear_marginconfiguration() {
  if (GetArenaNoVirtual() == nullptr && marginconfiguration_ != nullptr) {
    delete marginconfiguration_;
  }
  marginconfiguration_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkConfiguration::kMinCloseInSecondsFieldNumber;
const int NetworkConfiguration::kMaxCloseInSecondsFieldNumber;
const int NetworkConfiguration::kMinEnactInSecondsFieldNumber;
const int NetworkConfiguration::kMaxEnactInSecondsFieldNumber;
const int NetworkConfiguration::kRequiredParticipationFieldNumber;
const int NetworkConfiguration::kRequiredMajorityFieldNumber;
const int NetworkConfiguration::kMinProposerBalanceFieldNumber;
const int NetworkConfiguration::kMinVoterBalanceFieldNumber;
const int NetworkConfiguration::kMarginConfigurationFieldNumber;
const int NetworkConfiguration::kFeeFactorsConfigurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkConfiguration::NetworkConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.NetworkConfiguration)
}
NetworkConfiguration::NetworkConfiguration(const NetworkConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_marginconfiguration()) {
    marginconfiguration_ = new ::vega::ScalingFactors(*from.marginconfiguration_);
  } else {
    marginconfiguration_ = nullptr;
  }
  if (from.has_feefactorsconfiguration()) {
    feefactorsconfiguration_ = new ::vega::FeeFactorsConfiguration(*from.feefactorsconfiguration_);
  } else {
    feefactorsconfiguration_ = nullptr;
  }
  ::memcpy(&mincloseinseconds_, &from.mincloseinseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&minvoterbalance_) -
    reinterpret_cast<char*>(&mincloseinseconds_)) + sizeof(minvoterbalance_));
  // @@protoc_insertion_point(copy_constructor:vega.NetworkConfiguration)
}

void NetworkConfiguration::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NetworkConfiguration_proto_2fgovernance_2eproto.base);
  ::memset(&marginconfiguration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minvoterbalance_) -
      reinterpret_cast<char*>(&marginconfiguration_)) + sizeof(minvoterbalance_));
}

NetworkConfiguration::~NetworkConfiguration() {
  // @@protoc_insertion_point(destructor:vega.NetworkConfiguration)
  SharedDtor();
}

void NetworkConfiguration::SharedDtor() {
  if (this != internal_default_instance()) delete marginconfiguration_;
  if (this != internal_default_instance()) delete feefactorsconfiguration_;
}

void NetworkConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkConfiguration& NetworkConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NetworkConfiguration_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void NetworkConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NetworkConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && marginconfiguration_ != nullptr) {
    delete marginconfiguration_;
  }
  marginconfiguration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && feefactorsconfiguration_ != nullptr) {
    delete feefactorsconfiguration_;
  }
  feefactorsconfiguration_ = nullptr;
  ::memset(&mincloseinseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minvoterbalance_) -
      reinterpret_cast<char*>(&mincloseinseconds_)) + sizeof(minvoterbalance_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkConfiguration::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NetworkConfiguration*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 minCloseInSeconds = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_mincloseinseconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 maxCloseInSeconds = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_maxcloseinseconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 minEnactInSeconds = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_minenactinseconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 maxEnactInSeconds = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_maxenactinseconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float requiredParticipation = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_requiredparticipation(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float requiredMajority = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_requiredmajority(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float minProposerBalance = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_minproposerbalance(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float minVoterBalance = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_minvoterbalance(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // .vega.ScalingFactors marginConfiguration = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::ScalingFactors::_InternalParse;
        object = msg->mutable_marginconfiguration();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.FeeFactorsConfiguration feeFactorsConfiguration = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::FeeFactorsConfiguration::_InternalParse;
        object = msg->mutable_feefactorsconfiguration();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.NetworkConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 minCloseInSeconds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mincloseinseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 maxCloseInSeconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxcloseinseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 minEnactInSeconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minenactinseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 maxEnactInSeconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxenactinseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float requiredParticipation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &requiredparticipation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float requiredMajority = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &requiredmajority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float minProposerBalance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minproposerbalance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float minVoterBalance = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minvoterbalance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.ScalingFactors marginConfiguration = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_marginconfiguration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.FeeFactorsConfiguration feeFactorsConfiguration = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feefactorsconfiguration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.NetworkConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.NetworkConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.NetworkConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 minCloseInSeconds = 1;
  if (this->mincloseinseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mincloseinseconds(), output);
  }

  // int64 maxCloseInSeconds = 2;
  if (this->maxcloseinseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->maxcloseinseconds(), output);
  }

  // int64 minEnactInSeconds = 3;
  if (this->minenactinseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->minenactinseconds(), output);
  }

  // int64 maxEnactInSeconds = 4;
  if (this->maxenactinseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->maxenactinseconds(), output);
  }

  // float requiredParticipation = 5;
  if (this->requiredparticipation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->requiredparticipation(), output);
  }

  // float requiredMajority = 6;
  if (this->requiredmajority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->requiredmajority(), output);
  }

  // float minProposerBalance = 7;
  if (this->minproposerbalance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->minproposerbalance(), output);
  }

  // float minVoterBalance = 8;
  if (this->minvoterbalance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->minvoterbalance(), output);
  }

  // .vega.ScalingFactors marginConfiguration = 9;
  if (this->has_marginconfiguration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::marginconfiguration(this), output);
  }

  // .vega.FeeFactorsConfiguration feeFactorsConfiguration = 10;
  if (this->has_feefactorsconfiguration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::feefactorsconfiguration(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.NetworkConfiguration)
}

::google::protobuf::uint8* NetworkConfiguration::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NetworkConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 minCloseInSeconds = 1;
  if (this->mincloseinseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mincloseinseconds(), target);
  }

  // int64 maxCloseInSeconds = 2;
  if (this->maxcloseinseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->maxcloseinseconds(), target);
  }

  // int64 minEnactInSeconds = 3;
  if (this->minenactinseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->minenactinseconds(), target);
  }

  // int64 maxEnactInSeconds = 4;
  if (this->maxenactinseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->maxenactinseconds(), target);
  }

  // float requiredParticipation = 5;
  if (this->requiredparticipation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->requiredparticipation(), target);
  }

  // float requiredMajority = 6;
  if (this->requiredmajority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->requiredmajority(), target);
  }

  // float minProposerBalance = 7;
  if (this->minproposerbalance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->minproposerbalance(), target);
  }

  // float minVoterBalance = 8;
  if (this->minvoterbalance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->minvoterbalance(), target);
  }

  // .vega.ScalingFactors marginConfiguration = 9;
  if (this->has_marginconfiguration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::marginconfiguration(this), target);
  }

  // .vega.FeeFactorsConfiguration feeFactorsConfiguration = 10;
  if (this->has_feefactorsconfiguration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::feefactorsconfiguration(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NetworkConfiguration)
  return target;
}

size_t NetworkConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NetworkConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.ScalingFactors marginConfiguration = 9;
  if (this->has_marginconfiguration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *marginconfiguration_);
  }

  // .vega.FeeFactorsConfiguration feeFactorsConfiguration = 10;
  if (this->has_feefactorsconfiguration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *feefactorsconfiguration_);
  }

  // int64 minCloseInSeconds = 1;
  if (this->mincloseinseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mincloseinseconds());
  }

  // int64 maxCloseInSeconds = 2;
  if (this->maxcloseinseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->maxcloseinseconds());
  }

  // int64 minEnactInSeconds = 3;
  if (this->minenactinseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->minenactinseconds());
  }

  // int64 maxEnactInSeconds = 4;
  if (this->maxenactinseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->maxenactinseconds());
  }

  // float requiredParticipation = 5;
  if (this->requiredparticipation() != 0) {
    total_size += 1 + 4;
  }

  // float requiredMajority = 6;
  if (this->requiredmajority() != 0) {
    total_size += 1 + 4;
  }

  // float minProposerBalance = 7;
  if (this->minproposerbalance() != 0) {
    total_size += 1 + 4;
  }

  // float minVoterBalance = 8;
  if (this->minvoterbalance() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NetworkConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkConfiguration* source =
      ::google::protobuf::DynamicCastToGenerated<NetworkConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NetworkConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NetworkConfiguration)
    MergeFrom(*source);
  }
}

void NetworkConfiguration::MergeFrom(const NetworkConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NetworkConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_marginconfiguration()) {
    mutable_marginconfiguration()->::vega::ScalingFactors::MergeFrom(from.marginconfiguration());
  }
  if (from.has_feefactorsconfiguration()) {
    mutable_feefactorsconfiguration()->::vega::FeeFactorsConfiguration::MergeFrom(from.feefactorsconfiguration());
  }
  if (from.mincloseinseconds() != 0) {
    set_mincloseinseconds(from.mincloseinseconds());
  }
  if (from.maxcloseinseconds() != 0) {
    set_maxcloseinseconds(from.maxcloseinseconds());
  }
  if (from.minenactinseconds() != 0) {
    set_minenactinseconds(from.minenactinseconds());
  }
  if (from.maxenactinseconds() != 0) {
    set_maxenactinseconds(from.maxenactinseconds());
  }
  if (from.requiredparticipation() != 0) {
    set_requiredparticipation(from.requiredparticipation());
  }
  if (from.requiredmajority() != 0) {
    set_requiredmajority(from.requiredmajority());
  }
  if (from.minproposerbalance() != 0) {
    set_minproposerbalance(from.minproposerbalance());
  }
  if (from.minvoterbalance() != 0) {
    set_minvoterbalance(from.minvoterbalance());
  }
}

void NetworkConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NetworkConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkConfiguration::CopyFrom(const NetworkConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NetworkConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkConfiguration::IsInitialized() const {
  return true;
}

void NetworkConfiguration::Swap(NetworkConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkConfiguration::InternalSwap(NetworkConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(marginconfiguration_, other->marginconfiguration_);
  swap(feefactorsconfiguration_, other->feefactorsconfiguration_);
  swap(mincloseinseconds_, other->mincloseinseconds_);
  swap(maxcloseinseconds_, other->maxcloseinseconds_);
  swap(minenactinseconds_, other->minenactinseconds_);
  swap(maxenactinseconds_, other->maxenactinseconds_);
  swap(requiredparticipation_, other->requiredparticipation_);
  swap(requiredmajority_, other->requiredmajority_);
  swap(minproposerbalance_, other->minproposerbalance_);
  swap(minvoterbalance_, other->minvoterbalance_);
}

::google::protobuf::Metadata NetworkConfiguration::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FeeFactorsConfiguration::InitAsDefaultInstance() {
}
class FeeFactorsConfiguration::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeeFactorsConfiguration::kInfrastructureFeeFieldNumber;
const int FeeFactorsConfiguration::kMakerFeeFieldNumber;
const int FeeFactorsConfiguration::kLiquidityFeeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeeFactorsConfiguration::FeeFactorsConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.FeeFactorsConfiguration)
}
FeeFactorsConfiguration::FeeFactorsConfiguration(const FeeFactorsConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  infrastructurefee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.infrastructurefee().size() > 0) {
    infrastructurefee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infrastructurefee_);
  }
  makerfee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.makerfee().size() > 0) {
    makerfee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.makerfee_);
  }
  liquidityfee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.liquidityfee().size() > 0) {
    liquidityfee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.liquidityfee_);
  }
  // @@protoc_insertion_point(copy_constructor:vega.FeeFactorsConfiguration)
}

void FeeFactorsConfiguration::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FeeFactorsConfiguration_proto_2fgovernance_2eproto.base);
  infrastructurefee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  makerfee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  liquidityfee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FeeFactorsConfiguration::~FeeFactorsConfiguration() {
  // @@protoc_insertion_point(destructor:vega.FeeFactorsConfiguration)
  SharedDtor();
}

void FeeFactorsConfiguration::SharedDtor() {
  infrastructurefee_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  makerfee_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  liquidityfee_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FeeFactorsConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeeFactorsConfiguration& FeeFactorsConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FeeFactorsConfiguration_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void FeeFactorsConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.FeeFactorsConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infrastructurefee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  makerfee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  liquidityfee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FeeFactorsConfiguration::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FeeFactorsConfiguration*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string infrastructureFee = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.FeeFactorsConfiguration.infrastructureFee");
        object = msg->mutable_infrastructurefee();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string makerFee = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.FeeFactorsConfiguration.makerFee");
        object = msg->mutable_makerfee();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string liquidityFee = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.FeeFactorsConfiguration.liquidityFee");
        object = msg->mutable_liquidityfee();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FeeFactorsConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.FeeFactorsConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string infrastructureFee = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infrastructurefee()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->infrastructurefee().data(), static_cast<int>(this->infrastructurefee().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.FeeFactorsConfiguration.infrastructureFee"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string makerFee = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_makerfee()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->makerfee().data(), static_cast<int>(this->makerfee().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.FeeFactorsConfiguration.makerFee"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string liquidityFee = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_liquidityfee()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->liquidityfee().data(), static_cast<int>(this->liquidityfee().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.FeeFactorsConfiguration.liquidityFee"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.FeeFactorsConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.FeeFactorsConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FeeFactorsConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.FeeFactorsConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string infrastructureFee = 1;
  if (this->infrastructurefee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->infrastructurefee().data(), static_cast<int>(this->infrastructurefee().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.FeeFactorsConfiguration.infrastructureFee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->infrastructurefee(), output);
  }

  // string makerFee = 2;
  if (this->makerfee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->makerfee().data(), static_cast<int>(this->makerfee().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.FeeFactorsConfiguration.makerFee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->makerfee(), output);
  }

  // string liquidityFee = 3;
  if (this->liquidityfee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->liquidityfee().data(), static_cast<int>(this->liquidityfee().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.FeeFactorsConfiguration.liquidityFee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->liquidityfee(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.FeeFactorsConfiguration)
}

::google::protobuf::uint8* FeeFactorsConfiguration::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.FeeFactorsConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string infrastructureFee = 1;
  if (this->infrastructurefee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->infrastructurefee().data(), static_cast<int>(this->infrastructurefee().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.FeeFactorsConfiguration.infrastructureFee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->infrastructurefee(), target);
  }

  // string makerFee = 2;
  if (this->makerfee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->makerfee().data(), static_cast<int>(this->makerfee().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.FeeFactorsConfiguration.makerFee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->makerfee(), target);
  }

  // string liquidityFee = 3;
  if (this->liquidityfee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->liquidityfee().data(), static_cast<int>(this->liquidityfee().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.FeeFactorsConfiguration.liquidityFee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->liquidityfee(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.FeeFactorsConfiguration)
  return target;
}

size_t FeeFactorsConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.FeeFactorsConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string infrastructureFee = 1;
  if (this->infrastructurefee().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->infrastructurefee());
  }

  // string makerFee = 2;
  if (this->makerfee().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->makerfee());
  }

  // string liquidityFee = 3;
  if (this->liquidityfee().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->liquidityfee());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeeFactorsConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.FeeFactorsConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const FeeFactorsConfiguration* source =
      ::google::protobuf::DynamicCastToGenerated<FeeFactorsConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.FeeFactorsConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.FeeFactorsConfiguration)
    MergeFrom(*source);
  }
}

void FeeFactorsConfiguration::MergeFrom(const FeeFactorsConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.FeeFactorsConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.infrastructurefee().size() > 0) {

    infrastructurefee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infrastructurefee_);
  }
  if (from.makerfee().size() > 0) {

    makerfee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.makerfee_);
  }
  if (from.liquidityfee().size() > 0) {

    liquidityfee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.liquidityfee_);
  }
}

void FeeFactorsConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.FeeFactorsConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeeFactorsConfiguration::CopyFrom(const FeeFactorsConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.FeeFactorsConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeFactorsConfiguration::IsInitialized() const {
  return true;
}

void FeeFactorsConfiguration::Swap(FeeFactorsConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeeFactorsConfiguration::InternalSwap(FeeFactorsConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infrastructurefee_.Swap(&other->infrastructurefee_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  makerfee_.Swap(&other->makerfee_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  liquidityfee_.Swap(&other->liquidityfee_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata FeeFactorsConfiguration::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FutureProduct::InitAsDefaultInstance() {
}
class FutureProduct::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureProduct::kMaturityFieldNumber;
const int FutureProduct::kAssetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureProduct::FutureProduct()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.FutureProduct)
}
FutureProduct::FutureProduct(const FutureProduct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maturity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.maturity().size() > 0) {
    maturity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maturity_);
  }
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset().size() > 0) {
    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  // @@protoc_insertion_point(copy_constructor:vega.FutureProduct)
}

void FutureProduct::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FutureProduct_proto_2fgovernance_2eproto.base);
  maturity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FutureProduct::~FutureProduct() {
  // @@protoc_insertion_point(destructor:vega.FutureProduct)
  SharedDtor();
}

void FutureProduct::SharedDtor() {
  maturity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureProduct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FutureProduct& FutureProduct::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FutureProduct_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void FutureProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.FutureProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maturity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FutureProduct::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FutureProduct*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string maturity = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.FutureProduct.maturity");
        object = msg->mutable_maturity();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string asset = 2 [(.validator.field) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.FutureProduct.asset");
        object = msg->mutable_asset();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FutureProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.FutureProduct)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string maturity = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maturity()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->maturity().data(), static_cast<int>(this->maturity().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.FutureProduct.maturity"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset = 2 [(.validator.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset().data(), static_cast<int>(this->asset().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.FutureProduct.asset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.FutureProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.FutureProduct)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FutureProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.FutureProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string maturity = 1 [(.validator.field) = {
  if (this->maturity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->maturity().data(), static_cast<int>(this->maturity().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.FutureProduct.maturity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->maturity(), output);
  }

  // string asset = 2 [(.validator.field) = {
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.FutureProduct.asset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->asset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.FutureProduct)
}

::google::protobuf::uint8* FutureProduct::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.FutureProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string maturity = 1 [(.validator.field) = {
  if (this->maturity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->maturity().data(), static_cast<int>(this->maturity().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.FutureProduct.maturity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->maturity(), target);
  }

  // string asset = 2 [(.validator.field) = {
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.FutureProduct.asset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->asset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.FutureProduct)
  return target;
}

size_t FutureProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.FutureProduct)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string maturity = 1 [(.validator.field) = {
  if (this->maturity().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->maturity());
  }

  // string asset = 2 [(.validator.field) = {
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FutureProduct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.FutureProduct)
  GOOGLE_DCHECK_NE(&from, this);
  const FutureProduct* source =
      ::google::protobuf::DynamicCastToGenerated<FutureProduct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.FutureProduct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.FutureProduct)
    MergeFrom(*source);
  }
}

void FutureProduct::MergeFrom(const FutureProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.FutureProduct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maturity().size() > 0) {

    maturity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maturity_);
  }
  if (from.asset().size() > 0) {

    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
}

void FutureProduct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.FutureProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureProduct::CopyFrom(const FutureProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.FutureProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureProduct::IsInitialized() const {
  return true;
}

void FutureProduct::Swap(FutureProduct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureProduct::InternalSwap(FutureProduct* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  maturity_.Swap(&other->maturity_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_.Swap(&other->asset_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata FutureProduct::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InstrumentConfiguration::InitAsDefaultInstance() {
  ::vega::_InstrumentConfiguration_default_instance_.future_ = const_cast< ::vega::FutureProduct*>(
      ::vega::FutureProduct::internal_default_instance());
}
class InstrumentConfiguration::HasBitSetters {
 public:
  static const ::vega::FutureProduct& future(const InstrumentConfiguration* msg);
};

const ::vega::FutureProduct&
InstrumentConfiguration::HasBitSetters::future(const InstrumentConfiguration* msg) {
  return *msg->product_.future_;
}
void InstrumentConfiguration::set_allocated_future(::vega::FutureProduct* future) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_product();
  if (future) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      future = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, future, submessage_arena);
    }
    set_has_future();
    product_.future_ = future;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.InstrumentConfiguration.future)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstrumentConfiguration::kNameFieldNumber;
const int InstrumentConfiguration::kCodeFieldNumber;
const int InstrumentConfiguration::kBaseNameFieldNumber;
const int InstrumentConfiguration::kQuoteNameFieldNumber;
const int InstrumentConfiguration::kFutureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstrumentConfiguration::InstrumentConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.InstrumentConfiguration)
}
InstrumentConfiguration::InstrumentConfiguration(const InstrumentConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.code().size() > 0) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  basename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.basename().size() > 0) {
    basename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basename_);
  }
  quotename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.quotename().size() > 0) {
    quotename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quotename_);
  }
  clear_has_product();
  switch (from.product_case()) {
    case kFuture: {
      mutable_future()->::vega::FutureProduct::MergeFrom(from.future());
      break;
    }
    case PRODUCT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.InstrumentConfiguration)
}

void InstrumentConfiguration::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InstrumentConfiguration_proto_2fgovernance_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quotename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product();
}

InstrumentConfiguration::~InstrumentConfiguration() {
  // @@protoc_insertion_point(destructor:vega.InstrumentConfiguration)
  SharedDtor();
}

void InstrumentConfiguration::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quotename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_product()) {
    clear_product();
  }
}

void InstrumentConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentConfiguration& InstrumentConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InstrumentConfiguration_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void InstrumentConfiguration::clear_product() {
// @@protoc_insertion_point(one_of_clear_start:vega.InstrumentConfiguration)
  switch (product_case()) {
    case kFuture: {
      delete product_.future_;
      break;
    }
    case PRODUCT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PRODUCT_NOT_SET;
}


void InstrumentConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.InstrumentConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quotename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_product();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InstrumentConfiguration::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InstrumentConfiguration*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.InstrumentConfiguration.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string code = 2 [(.validator.field) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.InstrumentConfiguration.code");
        object = msg->mutable_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string baseName = 3 [(.validator.field) = {
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.InstrumentConfiguration.baseName");
        object = msg->mutable_basename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string quoteName = 4 [(.validator.field) = {
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.InstrumentConfiguration.quoteName");
        object = msg->mutable_quotename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.FutureProduct future = 100;
      case 100: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::FutureProduct::_InternalParse;
        object = msg->mutable_future();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InstrumentConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.InstrumentConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.InstrumentConfiguration.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string code = 2 [(.validator.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.InstrumentConfiguration.code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string baseName = 3 [(.validator.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->basename().data(), static_cast<int>(this->basename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.InstrumentConfiguration.baseName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string quoteName = 4 [(.validator.field) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quotename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->quotename().data(), static_cast<int>(this->quotename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.InstrumentConfiguration.quoteName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.FutureProduct future = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (802 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_future()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.InstrumentConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.InstrumentConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InstrumentConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.InstrumentConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.validator.field) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.InstrumentConfiguration.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string code = 2 [(.validator.field) = {
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.InstrumentConfiguration.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // string baseName = 3 [(.validator.field) = {
  if (this->basename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basename().data(), static_cast<int>(this->basename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.InstrumentConfiguration.baseName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->basename(), output);
  }

  // string quoteName = 4 [(.validator.field) = {
  if (this->quotename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quotename().data(), static_cast<int>(this->quotename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.InstrumentConfiguration.quoteName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->quotename(), output);
  }

  // .vega.FutureProduct future = 100;
  if (has_future()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::future(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.InstrumentConfiguration)
}

::google::protobuf::uint8* InstrumentConfiguration::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.InstrumentConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.validator.field) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.InstrumentConfiguration.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string code = 2 [(.validator.field) = {
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.InstrumentConfiguration.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // string baseName = 3 [(.validator.field) = {
  if (this->basename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basename().data(), static_cast<int>(this->basename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.InstrumentConfiguration.baseName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->basename(), target);
  }

  // string quoteName = 4 [(.validator.field) = {
  if (this->quotename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quotename().data(), static_cast<int>(this->quotename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.InstrumentConfiguration.quoteName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->quotename(), target);
  }

  // .vega.FutureProduct future = 100;
  if (has_future()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::future(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.InstrumentConfiguration)
  return target;
}

size_t InstrumentConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.InstrumentConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.validator.field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string code = 2 [(.validator.field) = {
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  // string baseName = 3 [(.validator.field) = {
  if (this->basename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->basename());
  }

  // string quoteName = 4 [(.validator.field) = {
  if (this->quotename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->quotename());
  }

  switch (product_case()) {
    // .vega.FutureProduct future = 100;
    case kFuture: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *product_.future_);
      break;
    }
    case PRODUCT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.InstrumentConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentConfiguration* source =
      ::google::protobuf::DynamicCastToGenerated<InstrumentConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.InstrumentConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.InstrumentConfiguration)
    MergeFrom(*source);
  }
}

void InstrumentConfiguration::MergeFrom(const InstrumentConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.InstrumentConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.basename().size() > 0) {

    basename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basename_);
  }
  if (from.quotename().size() > 0) {

    quotename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quotename_);
  }
  switch (from.product_case()) {
    case kFuture: {
      mutable_future()->::vega::FutureProduct::MergeFrom(from.future());
      break;
    }
    case PRODUCT_NOT_SET: {
      break;
    }
  }
}

void InstrumentConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.InstrumentConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentConfiguration::CopyFrom(const InstrumentConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.InstrumentConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentConfiguration::IsInitialized() const {
  return true;
}

void InstrumentConfiguration::Swap(InstrumentConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstrumentConfiguration::InternalSwap(InstrumentConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  basename_.Swap(&other->basename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  quotename_.Swap(&other->quotename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(product_, other->product_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata InstrumentConfiguration::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NewMarketConfiguration::InitAsDefaultInstance() {
  ::vega::_NewMarketConfiguration_default_instance_._instance.get_mutable()->instrument_ = const_cast< ::vega::InstrumentConfiguration*>(
      ::vega::InstrumentConfiguration::internal_default_instance());
  ::vega::_NewMarketConfiguration_default_instance_.simple_ = const_cast< ::vega::SimpleModelParams*>(
      ::vega::SimpleModelParams::internal_default_instance());
  ::vega::_NewMarketConfiguration_default_instance_.lognormal_ = const_cast< ::vega::LogNormalRiskModel*>(
      ::vega::LogNormalRiskModel::internal_default_instance());
  ::vega::_NewMarketConfiguration_default_instance_.continuous_ = const_cast< ::vega::ContinuousTrading*>(
      ::vega::ContinuousTrading::internal_default_instance());
  ::vega::_NewMarketConfiguration_default_instance_.discrete_ = const_cast< ::vega::DiscreteTrading*>(
      ::vega::DiscreteTrading::internal_default_instance());
}
class NewMarketConfiguration::HasBitSetters {
 public:
  static const ::vega::InstrumentConfiguration& instrument(const NewMarketConfiguration* msg);
  static const ::vega::SimpleModelParams& simple(const NewMarketConfiguration* msg);
  static const ::vega::LogNormalRiskModel& lognormal(const NewMarketConfiguration* msg);
  static const ::vega::ContinuousTrading& continuous(const NewMarketConfiguration* msg);
  static const ::vega::DiscreteTrading& discrete(const NewMarketConfiguration* msg);
};

const ::vega::InstrumentConfiguration&
NewMarketConfiguration::HasBitSetters::instrument(const NewMarketConfiguration* msg) {
  return *msg->instrument_;
}
const ::vega::SimpleModelParams&
NewMarketConfiguration::HasBitSetters::simple(const NewMarketConfiguration* msg) {
  return *msg->riskParameters_.simple_;
}
const ::vega::LogNormalRiskModel&
NewMarketConfiguration::HasBitSetters::lognormal(const NewMarketConfiguration* msg) {
  return *msg->riskParameters_.lognormal_;
}
const ::vega::ContinuousTrading&
NewMarketConfiguration::HasBitSetters::continuous(const NewMarketConfiguration* msg) {
  return *msg->tradingMode_.continuous_;
}
const ::vega::DiscreteTrading&
NewMarketConfiguration::HasBitSetters::discrete(const NewMarketConfiguration* msg) {
  return *msg->tradingMode_.discrete_;
}
void NewMarketConfiguration::set_allocated_simple(::vega::SimpleModelParams* simple) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_riskParameters();
  if (simple) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simple = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, simple, submessage_arena);
    }
    set_has_simple();
    riskParameters_.simple_ = simple;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.NewMarketConfiguration.simple)
}
void NewMarketConfiguration::clear_simple() {
  if (has_simple()) {
    delete riskParameters_.simple_;
    clear_has_riskParameters();
  }
}
void NewMarketConfiguration::set_allocated_lognormal(::vega::LogNormalRiskModel* lognormal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_riskParameters();
  if (lognormal) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lognormal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lognormal, submessage_arena);
    }
    set_has_lognormal();
    riskParameters_.lognormal_ = lognormal;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.NewMarketConfiguration.logNormal)
}
void NewMarketConfiguration::clear_lognormal() {
  if (has_lognormal()) {
    delete riskParameters_.lognormal_;
    clear_has_riskParameters();
  }
}
void NewMarketConfiguration::set_allocated_continuous(::vega::ContinuousTrading* continuous) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_tradingMode();
  if (continuous) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      continuous = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, continuous, submessage_arena);
    }
    set_has_continuous();
    tradingMode_.continuous_ = continuous;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.NewMarketConfiguration.continuous)
}
void NewMarketConfiguration::clear_continuous() {
  if (has_continuous()) {
    delete tradingMode_.continuous_;
    clear_has_tradingMode();
  }
}
void NewMarketConfiguration::set_allocated_discrete(::vega::DiscreteTrading* discrete) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_tradingMode();
  if (discrete) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      discrete = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, discrete, submessage_arena);
    }
    set_has_discrete();
    tradingMode_.discrete_ = discrete;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.NewMarketConfiguration.discrete)
}
void NewMarketConfiguration::clear_discrete() {
  if (has_discrete()) {
    delete tradingMode_.discrete_;
    clear_has_tradingMode();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewMarketConfiguration::kInstrumentFieldNumber;
const int NewMarketConfiguration::kDecimalPlacesFieldNumber;
const int NewMarketConfiguration::kMetadataFieldNumber;
const int NewMarketConfiguration::kOpeningAuctionDurationFieldNumber;
const int NewMarketConfiguration::kSimpleFieldNumber;
const int NewMarketConfiguration::kLogNormalFieldNumber;
const int NewMarketConfiguration::kContinuousFieldNumber;
const int NewMarketConfiguration::kDiscreteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewMarketConfiguration::NewMarketConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.NewMarketConfiguration)
}
NewMarketConfiguration::NewMarketConfiguration(const NewMarketConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      metadata_(from.metadata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_instrument()) {
    instrument_ = new ::vega::InstrumentConfiguration(*from.instrument_);
  } else {
    instrument_ = nullptr;
  }
  ::memcpy(&decimalplaces_, &from.decimalplaces_,
    static_cast<size_t>(reinterpret_cast<char*>(&openingauctionduration_) -
    reinterpret_cast<char*>(&decimalplaces_)) + sizeof(openingauctionduration_));
  clear_has_riskParameters();
  switch (from.riskParameters_case()) {
    case kSimple: {
      mutable_simple()->::vega::SimpleModelParams::MergeFrom(from.simple());
      break;
    }
    case kLogNormal: {
      mutable_lognormal()->::vega::LogNormalRiskModel::MergeFrom(from.lognormal());
      break;
    }
    case RISKPARAMETERS_NOT_SET: {
      break;
    }
  }
  clear_has_tradingMode();
  switch (from.tradingMode_case()) {
    case kContinuous: {
      mutable_continuous()->::vega::ContinuousTrading::MergeFrom(from.continuous());
      break;
    }
    case kDiscrete: {
      mutable_discrete()->::vega::DiscreteTrading::MergeFrom(from.discrete());
      break;
    }
    case TRADINGMODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.NewMarketConfiguration)
}

void NewMarketConfiguration::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NewMarketConfiguration_proto_2fgovernance_2eproto.base);
  ::memset(&instrument_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&openingauctionduration_) -
      reinterpret_cast<char*>(&instrument_)) + sizeof(openingauctionduration_));
  clear_has_riskParameters();
  clear_has_tradingMode();
}

NewMarketConfiguration::~NewMarketConfiguration() {
  // @@protoc_insertion_point(destructor:vega.NewMarketConfiguration)
  SharedDtor();
}

void NewMarketConfiguration::SharedDtor() {
  if (this != internal_default_instance()) delete instrument_;
  if (has_riskParameters()) {
    clear_riskParameters();
  }
  if (has_tradingMode()) {
    clear_tradingMode();
  }
}

void NewMarketConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewMarketConfiguration& NewMarketConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NewMarketConfiguration_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void NewMarketConfiguration::clear_riskParameters() {
// @@protoc_insertion_point(one_of_clear_start:vega.NewMarketConfiguration)
  switch (riskParameters_case()) {
    case kSimple: {
      delete riskParameters_.simple_;
      break;
    }
    case kLogNormal: {
      delete riskParameters_.lognormal_;
      break;
    }
    case RISKPARAMETERS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RISKPARAMETERS_NOT_SET;
}

void NewMarketConfiguration::clear_tradingMode() {
// @@protoc_insertion_point(one_of_clear_start:vega.NewMarketConfiguration)
  switch (tradingMode_case()) {
    case kContinuous: {
      delete tradingMode_.continuous_;
      break;
    }
    case kDiscrete: {
      delete tradingMode_.discrete_;
      break;
    }
    case TRADINGMODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = TRADINGMODE_NOT_SET;
}


void NewMarketConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NewMarketConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  if (GetArenaNoVirtual() == nullptr && instrument_ != nullptr) {
    delete instrument_;
  }
  instrument_ = nullptr;
  ::memset(&decimalplaces_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&openingauctionduration_) -
      reinterpret_cast<char*>(&decimalplaces_)) + sizeof(openingauctionduration_));
  clear_riskParameters();
  clear_tradingMode();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewMarketConfiguration::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NewMarketConfiguration*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.InstrumentConfiguration instrument = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::InstrumentConfiguration::_InternalParse;
        object = msg->mutable_instrument();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint64 decimalPlaces = 2 [(.validator.field) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_decimalplaces(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string metadata = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("vega.NewMarketConfiguration.metadata");
          object = msg->add_metadata();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // int64 openingAuctionDuration = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_openingauctionduration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.SimpleModelParams simple = 100;
      case 100: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::SimpleModelParams::_InternalParse;
        object = msg->mutable_simple();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.LogNormalRiskModel logNormal = 101;
      case 101: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::LogNormalRiskModel::_InternalParse;
        object = msg->mutable_lognormal();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.ContinuousTrading continuous = 200;
      case 200: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::ContinuousTrading::_InternalParse;
        object = msg->mutable_continuous();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.DiscreteTrading discrete = 201;
      case 201: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::DiscreteTrading::_InternalParse;
        object = msg->mutable_discrete();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewMarketConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.NewMarketConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.InstrumentConfiguration instrument = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_instrument()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 decimalPlaces = 2 [(.validator.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &decimalplaces_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata(this->metadata_size() - 1).data(),
            static_cast<int>(this->metadata(this->metadata_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.NewMarketConfiguration.metadata"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 openingAuctionDuration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &openingauctionduration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.SimpleModelParams simple = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (802 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_simple()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.LogNormalRiskModel logNormal = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (810 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lognormal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.ContinuousTrading continuous = 200;
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (1602 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_continuous()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.DiscreteTrading discrete = 201;
      case 201: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (1610 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_discrete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.NewMarketConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.NewMarketConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewMarketConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.NewMarketConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.InstrumentConfiguration instrument = 1 [(.validator.field) = {
  if (this->has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::instrument(this), output);
  }

  // uint64 decimalPlaces = 2 [(.validator.field) = {
  if (this->decimalplaces() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->decimalplaces(), output);
  }

  // repeated string metadata = 3;
  for (int i = 0, n = this->metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata(i).data(), static_cast<int>(this->metadata(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.NewMarketConfiguration.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->metadata(i), output);
  }

  // int64 openingAuctionDuration = 4;
  if (this->openingauctionduration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->openingauctionduration(), output);
  }

  // .vega.SimpleModelParams simple = 100;
  if (has_simple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, HasBitSetters::simple(this), output);
  }

  // .vega.LogNormalRiskModel logNormal = 101;
  if (has_lognormal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, HasBitSetters::lognormal(this), output);
  }

  // .vega.ContinuousTrading continuous = 200;
  if (has_continuous()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, HasBitSetters::continuous(this), output);
  }

  // .vega.DiscreteTrading discrete = 201;
  if (has_discrete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      201, HasBitSetters::discrete(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.NewMarketConfiguration)
}

::google::protobuf::uint8* NewMarketConfiguration::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NewMarketConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.InstrumentConfiguration instrument = 1 [(.validator.field) = {
  if (this->has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::instrument(this), target);
  }

  // uint64 decimalPlaces = 2 [(.validator.field) = {
  if (this->decimalplaces() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->decimalplaces(), target);
  }

  // repeated string metadata = 3;
  for (int i = 0, n = this->metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata(i).data(), static_cast<int>(this->metadata(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.NewMarketConfiguration.metadata");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->metadata(i), target);
  }

  // int64 openingAuctionDuration = 4;
  if (this->openingauctionduration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->openingauctionduration(), target);
  }

  // .vega.SimpleModelParams simple = 100;
  if (has_simple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, HasBitSetters::simple(this), target);
  }

  // .vega.LogNormalRiskModel logNormal = 101;
  if (has_lognormal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, HasBitSetters::lognormal(this), target);
  }

  // .vega.ContinuousTrading continuous = 200;
  if (has_continuous()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        200, HasBitSetters::continuous(this), target);
  }

  // .vega.DiscreteTrading discrete = 201;
  if (has_discrete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        201, HasBitSetters::discrete(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NewMarketConfiguration)
  return target;
}

size_t NewMarketConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NewMarketConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadata = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metadata_size());
  for (int i = 0, n = this->metadata_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->metadata(i));
  }

  // .vega.InstrumentConfiguration instrument = 1 [(.validator.field) = {
  if (this->has_instrument()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *instrument_);
  }

  // uint64 decimalPlaces = 2 [(.validator.field) = {
  if (this->decimalplaces() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->decimalplaces());
  }

  // int64 openingAuctionDuration = 4;
  if (this->openingauctionduration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->openingauctionduration());
  }

  switch (riskParameters_case()) {
    // .vega.SimpleModelParams simple = 100;
    case kSimple: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *riskParameters_.simple_);
      break;
    }
    // .vega.LogNormalRiskModel logNormal = 101;
    case kLogNormal: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *riskParameters_.lognormal_);
      break;
    }
    case RISKPARAMETERS_NOT_SET: {
      break;
    }
  }
  switch (tradingMode_case()) {
    // .vega.ContinuousTrading continuous = 200;
    case kContinuous: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tradingMode_.continuous_);
      break;
    }
    // .vega.DiscreteTrading discrete = 201;
    case kDiscrete: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tradingMode_.discrete_);
      break;
    }
    case TRADINGMODE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewMarketConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NewMarketConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const NewMarketConfiguration* source =
      ::google::protobuf::DynamicCastToGenerated<NewMarketConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NewMarketConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NewMarketConfiguration)
    MergeFrom(*source);
  }
}

void NewMarketConfiguration::MergeFrom(const NewMarketConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NewMarketConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from.has_instrument()) {
    mutable_instrument()->::vega::InstrumentConfiguration::MergeFrom(from.instrument());
  }
  if (from.decimalplaces() != 0) {
    set_decimalplaces(from.decimalplaces());
  }
  if (from.openingauctionduration() != 0) {
    set_openingauctionduration(from.openingauctionduration());
  }
  switch (from.riskParameters_case()) {
    case kSimple: {
      mutable_simple()->::vega::SimpleModelParams::MergeFrom(from.simple());
      break;
    }
    case kLogNormal: {
      mutable_lognormal()->::vega::LogNormalRiskModel::MergeFrom(from.lognormal());
      break;
    }
    case RISKPARAMETERS_NOT_SET: {
      break;
    }
  }
  switch (from.tradingMode_case()) {
    case kContinuous: {
      mutable_continuous()->::vega::ContinuousTrading::MergeFrom(from.continuous());
      break;
    }
    case kDiscrete: {
      mutable_discrete()->::vega::DiscreteTrading::MergeFrom(from.discrete());
      break;
    }
    case TRADINGMODE_NOT_SET: {
      break;
    }
  }
}

void NewMarketConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NewMarketConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMarketConfiguration::CopyFrom(const NewMarketConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NewMarketConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMarketConfiguration::IsInitialized() const {
  return true;
}

void NewMarketConfiguration::Swap(NewMarketConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewMarketConfiguration::InternalSwap(NewMarketConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  metadata_.InternalSwap(CastToBase(&other->metadata_));
  swap(instrument_, other->instrument_);
  swap(decimalplaces_, other->decimalplaces_);
  swap(openingauctionduration_, other->openingauctionduration_);
  swap(riskParameters_, other->riskParameters_);
  swap(tradingMode_, other->tradingMode_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::google::protobuf::Metadata NewMarketConfiguration::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NewMarket::InitAsDefaultInstance() {
  ::vega::_NewMarket_default_instance_._instance.get_mutable()->changes_ = const_cast< ::vega::NewMarketConfiguration*>(
      ::vega::NewMarketConfiguration::internal_default_instance());
}
class NewMarket::HasBitSetters {
 public:
  static const ::vega::NewMarketConfiguration& changes(const NewMarket* msg);
};

const ::vega::NewMarketConfiguration&
NewMarket::HasBitSetters::changes(const NewMarket* msg) {
  return *msg->changes_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewMarket::kChangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewMarket::NewMarket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.NewMarket)
}
NewMarket::NewMarket(const NewMarket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_changes()) {
    changes_ = new ::vega::NewMarketConfiguration(*from.changes_);
  } else {
    changes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.NewMarket)
}

void NewMarket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NewMarket_proto_2fgovernance_2eproto.base);
  changes_ = nullptr;
}

NewMarket::~NewMarket() {
  // @@protoc_insertion_point(destructor:vega.NewMarket)
  SharedDtor();
}

void NewMarket::SharedDtor() {
  if (this != internal_default_instance()) delete changes_;
}

void NewMarket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewMarket& NewMarket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NewMarket_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void NewMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NewMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && changes_ != nullptr) {
    delete changes_;
  }
  changes_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewMarket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NewMarket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.NewMarketConfiguration changes = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::NewMarketConfiguration::_InternalParse;
        object = msg->mutable_changes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewMarket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.NewMarket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.NewMarketConfiguration changes = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.NewMarket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.NewMarket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewMarket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.NewMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.NewMarketConfiguration changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::changes(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.NewMarket)
}

::google::protobuf::uint8* NewMarket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NewMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.NewMarketConfiguration changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::changes(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NewMarket)
  return target;
}

size_t NewMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NewMarket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.NewMarketConfiguration changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *changes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewMarket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NewMarket)
  GOOGLE_DCHECK_NE(&from, this);
  const NewMarket* source =
      ::google::protobuf::DynamicCastToGenerated<NewMarket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NewMarket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NewMarket)
    MergeFrom(*source);
  }
}

void NewMarket::MergeFrom(const NewMarket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NewMarket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_changes()) {
    mutable_changes()->::vega::NewMarketConfiguration::MergeFrom(from.changes());
  }
}

void NewMarket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NewMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMarket::CopyFrom(const NewMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NewMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMarket::IsInitialized() const {
  return true;
}

void NewMarket::Swap(NewMarket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewMarket::InternalSwap(NewMarket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(changes_, other->changes_);
}

::google::protobuf::Metadata NewMarket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateMarket::InitAsDefaultInstance() {
}
class UpdateMarket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateMarket::UpdateMarket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.UpdateMarket)
}
UpdateMarket::UpdateMarket(const UpdateMarket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.UpdateMarket)
}

void UpdateMarket::SharedCtor() {
}

UpdateMarket::~UpdateMarket() {
  // @@protoc_insertion_point(destructor:vega.UpdateMarket)
  SharedDtor();
}

void UpdateMarket::SharedDtor() {
}

void UpdateMarket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMarket& UpdateMarket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateMarket_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void UpdateMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.UpdateMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateMarket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateMarket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateMarket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.UpdateMarket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:vega.UpdateMarket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.UpdateMarket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateMarket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.UpdateMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.UpdateMarket)
}

::google::protobuf::uint8* UpdateMarket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.UpdateMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.UpdateMarket)
  return target;
}

size_t UpdateMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.UpdateMarket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMarket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.UpdateMarket)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMarket* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateMarket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.UpdateMarket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.UpdateMarket)
    MergeFrom(*source);
  }
}

void UpdateMarket::MergeFrom(const UpdateMarket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.UpdateMarket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateMarket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.UpdateMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMarket::CopyFrom(const UpdateMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.UpdateMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMarket::IsInitialized() const {
  return true;
}

void UpdateMarket::Swap(UpdateMarket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateMarket::InternalSwap(UpdateMarket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateMarket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateNetwork::InitAsDefaultInstance() {
  ::vega::_UpdateNetwork_default_instance_._instance.get_mutable()->changes_ = const_cast< ::vega::NetworkConfiguration*>(
      ::vega::NetworkConfiguration::internal_default_instance());
}
class UpdateNetwork::HasBitSetters {
 public:
  static const ::vega::NetworkConfiguration& changes(const UpdateNetwork* msg);
};

const ::vega::NetworkConfiguration&
UpdateNetwork::HasBitSetters::changes(const UpdateNetwork* msg) {
  return *msg->changes_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateNetwork::kChangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateNetwork::UpdateNetwork()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.UpdateNetwork)
}
UpdateNetwork::UpdateNetwork(const UpdateNetwork& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_changes()) {
    changes_ = new ::vega::NetworkConfiguration(*from.changes_);
  } else {
    changes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.UpdateNetwork)
}

void UpdateNetwork::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateNetwork_proto_2fgovernance_2eproto.base);
  changes_ = nullptr;
}

UpdateNetwork::~UpdateNetwork() {
  // @@protoc_insertion_point(destructor:vega.UpdateNetwork)
  SharedDtor();
}

void UpdateNetwork::SharedDtor() {
  if (this != internal_default_instance()) delete changes_;
}

void UpdateNetwork::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateNetwork& UpdateNetwork::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateNetwork_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void UpdateNetwork::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.UpdateNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && changes_ != nullptr) {
    delete changes_;
  }
  changes_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateNetwork::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateNetwork*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.NetworkConfiguration changes = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::NetworkConfiguration::_InternalParse;
        object = msg->mutable_changes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateNetwork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.UpdateNetwork)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.NetworkConfiguration changes = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.UpdateNetwork)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.UpdateNetwork)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateNetwork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.UpdateNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.NetworkConfiguration changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::changes(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.UpdateNetwork)
}

::google::protobuf::uint8* UpdateNetwork::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.UpdateNetwork)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.NetworkConfiguration changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::changes(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.UpdateNetwork)
  return target;
}

size_t UpdateNetwork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.UpdateNetwork)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.NetworkConfiguration changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *changes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateNetwork::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.UpdateNetwork)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateNetwork* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateNetwork>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.UpdateNetwork)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.UpdateNetwork)
    MergeFrom(*source);
  }
}

void UpdateNetwork::MergeFrom(const UpdateNetwork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.UpdateNetwork)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_changes()) {
    mutable_changes()->::vega::NetworkConfiguration::MergeFrom(from.changes());
  }
}

void UpdateNetwork::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.UpdateNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateNetwork::CopyFrom(const UpdateNetwork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.UpdateNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNetwork::IsInitialized() const {
  return true;
}

void UpdateNetwork::Swap(UpdateNetwork* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateNetwork::InternalSwap(UpdateNetwork* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(changes_, other->changes_);
}

::google::protobuf::Metadata UpdateNetwork::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NewAsset::InitAsDefaultInstance() {
  ::vega::_NewAsset_default_instance_._instance.get_mutable()->changes_ = const_cast< ::vega::AssetSource*>(
      ::vega::AssetSource::internal_default_instance());
}
class NewAsset::HasBitSetters {
 public:
  static const ::vega::AssetSource& changes(const NewAsset* msg);
};

const ::vega::AssetSource&
NewAsset::HasBitSetters::changes(const NewAsset* msg) {
  return *msg->changes_;
}
void NewAsset::clear_changes() {
  if (GetArenaNoVirtual() == nullptr && changes_ != nullptr) {
    delete changes_;
  }
  changes_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewAsset::kChangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewAsset::NewAsset()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.NewAsset)
}
NewAsset::NewAsset(const NewAsset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_changes()) {
    changes_ = new ::vega::AssetSource(*from.changes_);
  } else {
    changes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.NewAsset)
}

void NewAsset::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NewAsset_proto_2fgovernance_2eproto.base);
  changes_ = nullptr;
}

NewAsset::~NewAsset() {
  // @@protoc_insertion_point(destructor:vega.NewAsset)
  SharedDtor();
}

void NewAsset::SharedDtor() {
  if (this != internal_default_instance()) delete changes_;
}

void NewAsset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewAsset& NewAsset::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NewAsset_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void NewAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NewAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && changes_ != nullptr) {
    delete changes_;
  }
  changes_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewAsset::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NewAsset*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.AssetSource changes = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::AssetSource::_InternalParse;
        object = msg->mutable_changes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.NewAsset)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.AssetSource changes = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.NewAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.NewAsset)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.NewAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.AssetSource changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::changes(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.NewAsset)
}

::google::protobuf::uint8* NewAsset::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NewAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.AssetSource changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::changes(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NewAsset)
  return target;
}

size_t NewAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NewAsset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.AssetSource changes = 1 [(.validator.field) = {
  if (this->has_changes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *changes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewAsset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NewAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const NewAsset* source =
      ::google::protobuf::DynamicCastToGenerated<NewAsset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NewAsset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NewAsset)
    MergeFrom(*source);
  }
}

void NewAsset::MergeFrom(const NewAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NewAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_changes()) {
    mutable_changes()->::vega::AssetSource::MergeFrom(from.changes());
  }
}

void NewAsset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NewAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewAsset::CopyFrom(const NewAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NewAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewAsset::IsInitialized() const {
  return true;
}

void NewAsset::Swap(NewAsset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewAsset::InternalSwap(NewAsset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(changes_, other->changes_);
}

::google::protobuf::Metadata NewAsset::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProposalTerms::InitAsDefaultInstance() {
  ::vega::_ProposalTerms_default_instance_.updatemarket_ = const_cast< ::vega::UpdateMarket*>(
      ::vega::UpdateMarket::internal_default_instance());
  ::vega::_ProposalTerms_default_instance_.newmarket_ = const_cast< ::vega::NewMarket*>(
      ::vega::NewMarket::internal_default_instance());
  ::vega::_ProposalTerms_default_instance_.updatenetwork_ = const_cast< ::vega::UpdateNetwork*>(
      ::vega::UpdateNetwork::internal_default_instance());
  ::vega::_ProposalTerms_default_instance_.newasset_ = const_cast< ::vega::NewAsset*>(
      ::vega::NewAsset::internal_default_instance());
}
class ProposalTerms::HasBitSetters {
 public:
  static const ::vega::UpdateMarket& updatemarket(const ProposalTerms* msg);
  static const ::vega::NewMarket& newmarket(const ProposalTerms* msg);
  static const ::vega::UpdateNetwork& updatenetwork(const ProposalTerms* msg);
  static const ::vega::NewAsset& newasset(const ProposalTerms* msg);
};

const ::vega::UpdateMarket&
ProposalTerms::HasBitSetters::updatemarket(const ProposalTerms* msg) {
  return *msg->change_.updatemarket_;
}
const ::vega::NewMarket&
ProposalTerms::HasBitSetters::newmarket(const ProposalTerms* msg) {
  return *msg->change_.newmarket_;
}
const ::vega::UpdateNetwork&
ProposalTerms::HasBitSetters::updatenetwork(const ProposalTerms* msg) {
  return *msg->change_.updatenetwork_;
}
const ::vega::NewAsset&
ProposalTerms::HasBitSetters::newasset(const ProposalTerms* msg) {
  return *msg->change_.newasset_;
}
void ProposalTerms::set_allocated_updatemarket(::vega::UpdateMarket* updatemarket) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (updatemarket) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      updatemarket = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updatemarket, submessage_arena);
    }
    set_has_updatemarket();
    change_.updatemarket_ = updatemarket;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ProposalTerms.updateMarket)
}
void ProposalTerms::set_allocated_newmarket(::vega::NewMarket* newmarket) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (newmarket) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      newmarket = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, newmarket, submessage_arena);
    }
    set_has_newmarket();
    change_.newmarket_ = newmarket;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ProposalTerms.newMarket)
}
void ProposalTerms::set_allocated_updatenetwork(::vega::UpdateNetwork* updatenetwork) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (updatenetwork) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      updatenetwork = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updatenetwork, submessage_arena);
    }
    set_has_updatenetwork();
    change_.updatenetwork_ = updatenetwork;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ProposalTerms.updateNetwork)
}
void ProposalTerms::set_allocated_newasset(::vega::NewAsset* newasset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (newasset) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      newasset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, newasset, submessage_arena);
    }
    set_has_newasset();
    change_.newasset_ = newasset;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.ProposalTerms.newAsset)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProposalTerms::kClosingTimestampFieldNumber;
const int ProposalTerms::kEnactmentTimestampFieldNumber;
const int ProposalTerms::kValidationTimestampFieldNumber;
const int ProposalTerms::kUpdateMarketFieldNumber;
const int ProposalTerms::kNewMarketFieldNumber;
const int ProposalTerms::kUpdateNetworkFieldNumber;
const int ProposalTerms::kNewAssetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProposalTerms::ProposalTerms()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.ProposalTerms)
}
ProposalTerms::ProposalTerms(const ProposalTerms& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&closingtimestamp_, &from.closingtimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&validationtimestamp_) -
    reinterpret_cast<char*>(&closingtimestamp_)) + sizeof(validationtimestamp_));
  clear_has_change();
  switch (from.change_case()) {
    case kUpdateMarket: {
      mutable_updatemarket()->::vega::UpdateMarket::MergeFrom(from.updatemarket());
      break;
    }
    case kNewMarket: {
      mutable_newmarket()->::vega::NewMarket::MergeFrom(from.newmarket());
      break;
    }
    case kUpdateNetwork: {
      mutable_updatenetwork()->::vega::UpdateNetwork::MergeFrom(from.updatenetwork());
      break;
    }
    case kNewAsset: {
      mutable_newasset()->::vega::NewAsset::MergeFrom(from.newasset());
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.ProposalTerms)
}

void ProposalTerms::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProposalTerms_proto_2fgovernance_2eproto.base);
  ::memset(&closingtimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validationtimestamp_) -
      reinterpret_cast<char*>(&closingtimestamp_)) + sizeof(validationtimestamp_));
  clear_has_change();
}

ProposalTerms::~ProposalTerms() {
  // @@protoc_insertion_point(destructor:vega.ProposalTerms)
  SharedDtor();
}

void ProposalTerms::SharedDtor() {
  if (has_change()) {
    clear_change();
  }
}

void ProposalTerms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProposalTerms& ProposalTerms::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProposalTerms_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void ProposalTerms::clear_change() {
// @@protoc_insertion_point(one_of_clear_start:vega.ProposalTerms)
  switch (change_case()) {
    case kUpdateMarket: {
      delete change_.updatemarket_;
      break;
    }
    case kNewMarket: {
      delete change_.newmarket_;
      break;
    }
    case kUpdateNetwork: {
      delete change_.updatenetwork_;
      break;
    }
    case kNewAsset: {
      delete change_.newasset_;
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHANGE_NOT_SET;
}


void ProposalTerms::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ProposalTerms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&closingtimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validationtimestamp_) -
      reinterpret_cast<char*>(&closingtimestamp_)) + sizeof(validationtimestamp_));
  clear_change();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProposalTerms::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProposalTerms*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 closingTimestamp = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_closingtimestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 enactmentTimestamp = 2 [(.validator.field) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_enactmenttimestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 validationTimestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_validationtimestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.UpdateMarket updateMarket = 101;
      case 101: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::UpdateMarket::_InternalParse;
        object = msg->mutable_updatemarket();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.NewMarket newMarket = 102;
      case 102: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::NewMarket::_InternalParse;
        object = msg->mutable_newmarket();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.UpdateNetwork updateNetwork = 103;
      case 103: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::UpdateNetwork::_InternalParse;
        object = msg->mutable_updatenetwork();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.NewAsset newAsset = 104;
      case 104: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::NewAsset::_InternalParse;
        object = msg->mutable_newasset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProposalTerms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.ProposalTerms)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 closingTimestamp = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &closingtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 enactmentTimestamp = 2 [(.validator.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enactmenttimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 validationTimestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &validationtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.UpdateMarket updateMarket = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (810 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updatemarket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.NewMarket newMarket = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (818 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_newmarket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.UpdateNetwork updateNetwork = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (826 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updatenetwork()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.NewAsset newAsset = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (834 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_newasset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.ProposalTerms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.ProposalTerms)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProposalTerms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.ProposalTerms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 closingTimestamp = 1 [(.validator.field) = {
  if (this->closingtimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->closingtimestamp(), output);
  }

  // int64 enactmentTimestamp = 2 [(.validator.field) = {
  if (this->enactmenttimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->enactmenttimestamp(), output);
  }

  // int64 validationTimestamp = 3;
  if (this->validationtimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->validationtimestamp(), output);
  }

  // .vega.UpdateMarket updateMarket = 101;
  if (has_updatemarket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, HasBitSetters::updatemarket(this), output);
  }

  // .vega.NewMarket newMarket = 102;
  if (has_newmarket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, HasBitSetters::newmarket(this), output);
  }

  // .vega.UpdateNetwork updateNetwork = 103;
  if (has_updatenetwork()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, HasBitSetters::updatenetwork(this), output);
  }

  // .vega.NewAsset newAsset = 104;
  if (has_newasset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, HasBitSetters::newasset(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.ProposalTerms)
}

::google::protobuf::uint8* ProposalTerms::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ProposalTerms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 closingTimestamp = 1 [(.validator.field) = {
  if (this->closingtimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->closingtimestamp(), target);
  }

  // int64 enactmentTimestamp = 2 [(.validator.field) = {
  if (this->enactmenttimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->enactmenttimestamp(), target);
  }

  // int64 validationTimestamp = 3;
  if (this->validationtimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->validationtimestamp(), target);
  }

  // .vega.UpdateMarket updateMarket = 101;
  if (has_updatemarket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, HasBitSetters::updatemarket(this), target);
  }

  // .vega.NewMarket newMarket = 102;
  if (has_newmarket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        102, HasBitSetters::newmarket(this), target);
  }

  // .vega.UpdateNetwork updateNetwork = 103;
  if (has_updatenetwork()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        103, HasBitSetters::updatenetwork(this), target);
  }

  // .vega.NewAsset newAsset = 104;
  if (has_newasset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        104, HasBitSetters::newasset(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ProposalTerms)
  return target;
}

size_t ProposalTerms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ProposalTerms)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 closingTimestamp = 1 [(.validator.field) = {
  if (this->closingtimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->closingtimestamp());
  }

  // int64 enactmentTimestamp = 2 [(.validator.field) = {
  if (this->enactmenttimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->enactmenttimestamp());
  }

  // int64 validationTimestamp = 3;
  if (this->validationtimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->validationtimestamp());
  }

  switch (change_case()) {
    // .vega.UpdateMarket updateMarket = 101;
    case kUpdateMarket: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.updatemarket_);
      break;
    }
    // .vega.NewMarket newMarket = 102;
    case kNewMarket: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.newmarket_);
      break;
    }
    // .vega.UpdateNetwork updateNetwork = 103;
    case kUpdateNetwork: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.updatenetwork_);
      break;
    }
    // .vega.NewAsset newAsset = 104;
    case kNewAsset: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.newasset_);
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposalTerms::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ProposalTerms)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposalTerms* source =
      ::google::protobuf::DynamicCastToGenerated<ProposalTerms>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ProposalTerms)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ProposalTerms)
    MergeFrom(*source);
  }
}

void ProposalTerms::MergeFrom(const ProposalTerms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ProposalTerms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.closingtimestamp() != 0) {
    set_closingtimestamp(from.closingtimestamp());
  }
  if (from.enactmenttimestamp() != 0) {
    set_enactmenttimestamp(from.enactmenttimestamp());
  }
  if (from.validationtimestamp() != 0) {
    set_validationtimestamp(from.validationtimestamp());
  }
  switch (from.change_case()) {
    case kUpdateMarket: {
      mutable_updatemarket()->::vega::UpdateMarket::MergeFrom(from.updatemarket());
      break;
    }
    case kNewMarket: {
      mutable_newmarket()->::vega::NewMarket::MergeFrom(from.newmarket());
      break;
    }
    case kUpdateNetwork: {
      mutable_updatenetwork()->::vega::UpdateNetwork::MergeFrom(from.updatenetwork());
      break;
    }
    case kNewAsset: {
      mutable_newasset()->::vega::NewAsset::MergeFrom(from.newasset());
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
}

void ProposalTerms::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ProposalTerms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposalTerms::CopyFrom(const ProposalTerms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ProposalTerms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalTerms::IsInitialized() const {
  return true;
}

void ProposalTerms::Swap(ProposalTerms* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProposalTerms::InternalSwap(ProposalTerms* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(closingtimestamp_, other->closingtimestamp_);
  swap(enactmenttimestamp_, other->enactmenttimestamp_);
  swap(validationtimestamp_, other->validationtimestamp_);
  swap(change_, other->change_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ProposalTerms::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

GovernanceData_YesPartyEntry_DoNotUse::GovernanceData_YesPartyEntry_DoNotUse() {}
GovernanceData_YesPartyEntry_DoNotUse::GovernanceData_YesPartyEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void GovernanceData_YesPartyEntry_DoNotUse::MergeFrom(const GovernanceData_YesPartyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GovernanceData_YesPartyEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[10];
}
void GovernanceData_YesPartyEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GovernanceData_YesPartyEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      GovernanceData_YesPartyEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "vega.GovernanceData.YesPartyEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

GovernanceData_NoPartyEntry_DoNotUse::GovernanceData_NoPartyEntry_DoNotUse() {}
GovernanceData_NoPartyEntry_DoNotUse::GovernanceData_NoPartyEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void GovernanceData_NoPartyEntry_DoNotUse::MergeFrom(const GovernanceData_NoPartyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GovernanceData_NoPartyEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[11];
}
void GovernanceData_NoPartyEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GovernanceData_NoPartyEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      GovernanceData_NoPartyEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "vega.GovernanceData.NoPartyEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void GovernanceData::InitAsDefaultInstance() {
  ::vega::_GovernanceData_default_instance_._instance.get_mutable()->proposal_ = const_cast< ::vega::Proposal*>(
      ::vega::Proposal::internal_default_instance());
}
class GovernanceData::HasBitSetters {
 public:
  static const ::vega::Proposal& proposal(const GovernanceData* msg);
};

const ::vega::Proposal&
GovernanceData::HasBitSetters::proposal(const GovernanceData* msg) {
  return *msg->proposal_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GovernanceData::kProposalFieldNumber;
const int GovernanceData::kYesFieldNumber;
const int GovernanceData::kNoFieldNumber;
const int GovernanceData::kYesPartyFieldNumber;
const int GovernanceData::kNoPartyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GovernanceData::GovernanceData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.GovernanceData)
}
GovernanceData::GovernanceData(const GovernanceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      yes_(from.yes_),
      no_(from.no_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  yesparty_.MergeFrom(from.yesparty_);
  noparty_.MergeFrom(from.noparty_);
  if (from.has_proposal()) {
    proposal_ = new ::vega::Proposal(*from.proposal_);
  } else {
    proposal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.GovernanceData)
}

void GovernanceData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GovernanceData_proto_2fgovernance_2eproto.base);
  proposal_ = nullptr;
}

GovernanceData::~GovernanceData() {
  // @@protoc_insertion_point(destructor:vega.GovernanceData)
  SharedDtor();
}

void GovernanceData::SharedDtor() {
  if (this != internal_default_instance()) delete proposal_;
}

void GovernanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GovernanceData& GovernanceData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GovernanceData_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void GovernanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.GovernanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yes_.Clear();
  no_.Clear();
  yesparty_.Clear();
  noparty_.Clear();
  if (GetArenaNoVirtual() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GovernanceData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GovernanceData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Proposal proposal = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Proposal::_InternalParse;
        object = msg->mutable_proposal();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .vega.Vote yes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Vote::_InternalParse;
          object = msg->add_yes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .vega.Vote no = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Vote::_InternalParse;
          object = msg->add_no();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // map<string, .vega.Vote> yesParty = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::vega::GovernanceData_YesPartyEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->yesparty_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // map<string, .vega.Vote> noParty = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::vega::GovernanceData_NoPartyEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->noparty_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GovernanceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.GovernanceData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Proposal proposal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proposal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.Vote yes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_yes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.Vote no = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_no()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .vega.Vote> yesParty = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          GovernanceData_YesPartyEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GovernanceData_YesPartyEntry_DoNotUse,
              ::std::string, ::vega::Vote,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::vega::Vote > > parser(&yesparty_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.GovernanceData.YesPartyEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .vega.Vote> noParty = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          GovernanceData_NoPartyEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GovernanceData_NoPartyEntry_DoNotUse,
              ::std::string, ::vega::Vote,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::vega::Vote > > parser(&noparty_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.GovernanceData.NoPartyEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.GovernanceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.GovernanceData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GovernanceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.GovernanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Proposal proposal = 1;
  if (this->has_proposal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::proposal(this), output);
  }

  // repeated .vega.Vote yes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->yes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->yes(static_cast<int>(i)),
      output);
  }

  // repeated .vega.Vote no = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->no_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->no(static_cast<int>(i)),
      output);
  }

  // map<string, .vega.Vote> yesParty = 4;
  if (!this->yesparty().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::vega::Vote >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vega.GovernanceData.YesPartyEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->yesparty().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->yesparty().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::vega::Vote >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::vega::Vote >::const_iterator
          it = this->yesparty().begin();
          it != this->yesparty().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GovernanceData_YesPartyEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(yesparty_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<GovernanceData_YesPartyEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::vega::Vote >::const_iterator
          it = this->yesparty().begin();
          it != this->yesparty().end(); ++it) {
        entry.reset(yesparty_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .vega.Vote> noParty = 5;
  if (!this->noparty().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::vega::Vote >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vega.GovernanceData.NoPartyEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->noparty().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->noparty().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::vega::Vote >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::vega::Vote >::const_iterator
          it = this->noparty().begin();
          it != this->noparty().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GovernanceData_NoPartyEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(noparty_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<GovernanceData_NoPartyEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::vega::Vote >::const_iterator
          it = this->noparty().begin();
          it != this->noparty().end(); ++it) {
        entry.reset(noparty_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.GovernanceData)
}

::google::protobuf::uint8* GovernanceData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.GovernanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Proposal proposal = 1;
  if (this->has_proposal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::proposal(this), target);
  }

  // repeated .vega.Vote yes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->yes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->yes(static_cast<int>(i)), target);
  }

  // repeated .vega.Vote no = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->no_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->no(static_cast<int>(i)), target);
  }

  // map<string, .vega.Vote> yesParty = 4;
  if (!this->yesparty().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::vega::Vote >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vega.GovernanceData.YesPartyEntry.key");
      }
    };

    if (false &&
        this->yesparty().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->yesparty().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::vega::Vote >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::vega::Vote >::const_iterator
          it = this->yesparty().begin();
          it != this->yesparty().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GovernanceData_YesPartyEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(yesparty_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<GovernanceData_YesPartyEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::vega::Vote >::const_iterator
          it = this->yesparty().begin();
          it != this->yesparty().end(); ++it) {
        entry.reset(yesparty_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .vega.Vote> noParty = 5;
  if (!this->noparty().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::vega::Vote >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vega.GovernanceData.NoPartyEntry.key");
      }
    };

    if (false &&
        this->noparty().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->noparty().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::vega::Vote >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::vega::Vote >::const_iterator
          it = this->noparty().begin();
          it != this->noparty().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GovernanceData_NoPartyEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(noparty_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<GovernanceData_NoPartyEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::vega::Vote >::const_iterator
          it = this->noparty().begin();
          it != this->noparty().end(); ++it) {
        entry.reset(noparty_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.GovernanceData)
  return target;
}

size_t GovernanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.GovernanceData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Vote yes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->yes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->yes(static_cast<int>(i)));
    }
  }

  // repeated .vega.Vote no = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->no_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->no(static_cast<int>(i)));
    }
  }

  // map<string, .vega.Vote> yesParty = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->yesparty_size());
  {
    ::std::unique_ptr<GovernanceData_YesPartyEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::vega::Vote >::const_iterator
        it = this->yesparty().begin();
        it != this->yesparty().end(); ++it) {
      entry.reset(yesparty_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .vega.Vote> noParty = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->noparty_size());
  {
    ::std::unique_ptr<GovernanceData_NoPartyEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::vega::Vote >::const_iterator
        it = this->noparty().begin();
        it != this->noparty().end(); ++it) {
      entry.reset(noparty_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .vega.Proposal proposal = 1;
  if (this->has_proposal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *proposal_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GovernanceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.GovernanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const GovernanceData* source =
      ::google::protobuf::DynamicCastToGenerated<GovernanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.GovernanceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.GovernanceData)
    MergeFrom(*source);
  }
}

void GovernanceData::MergeFrom(const GovernanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.GovernanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  yes_.MergeFrom(from.yes_);
  no_.MergeFrom(from.no_);
  yesparty_.MergeFrom(from.yesparty_);
  noparty_.MergeFrom(from.noparty_);
  if (from.has_proposal()) {
    mutable_proposal()->::vega::Proposal::MergeFrom(from.proposal());
  }
}

void GovernanceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.GovernanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GovernanceData::CopyFrom(const GovernanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.GovernanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GovernanceData::IsInitialized() const {
  return true;
}

void GovernanceData::Swap(GovernanceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GovernanceData::InternalSwap(GovernanceData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&yes_)->InternalSwap(CastToBase(&other->yes_));
  CastToBase(&no_)->InternalSwap(CastToBase(&other->no_));
  yesparty_.Swap(&other->yesparty_);
  noparty_.Swap(&other->noparty_);
  swap(proposal_, other->proposal_);
}

::google::protobuf::Metadata GovernanceData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Proposal::InitAsDefaultInstance() {
  ::vega::_Proposal_default_instance_._instance.get_mutable()->terms_ = const_cast< ::vega::ProposalTerms*>(
      ::vega::ProposalTerms::internal_default_instance());
}
class Proposal::HasBitSetters {
 public:
  static const ::vega::ProposalTerms& terms(const Proposal* msg);
};

const ::vega::ProposalTerms&
Proposal::HasBitSetters::terms(const Proposal* msg) {
  return *msg->terms_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Proposal::kIDFieldNumber;
const int Proposal::kReferenceFieldNumber;
const int Proposal::kPartyIDFieldNumber;
const int Proposal::kStateFieldNumber;
const int Proposal::kTimestampFieldNumber;
const int Proposal::kTermsFieldNumber;
const int Proposal::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Proposal::Proposal()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Proposal)
}
Proposal::Proposal(const Proposal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference().size() > 0) {
    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.has_terms()) {
    terms_ = new ::vega::ProposalTerms(*from.terms_);
  } else {
    terms_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:vega.Proposal)
}

void Proposal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Proposal_proto_2fgovernance_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&terms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&terms_)) + sizeof(reason_));
}

Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:vega.Proposal)
  SharedDtor();
}

void Proposal::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete terms_;
}

void Proposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proposal& Proposal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Proposal_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Proposal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && terms_ != nullptr) {
    delete terms_;
  }
  terms_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Proposal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Proposal*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Proposal.ID");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string reference = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Proposal.reference");
        object = msg->mutable_reference();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string partyID = 3 [(.validator.field) = {
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Proposal.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.Proposal.State state = 4 [(.validator.field) = {
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_state(static_cast<::vega::Proposal_State>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 timestamp = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.ProposalTerms terms = 6 [(.validator.field) = {
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::ProposalTerms::_InternalParse;
        object = msg->mutable_terms();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.ProposalError reason = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_reason(static_cast<::vega::ProposalError>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Proposal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Proposal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Proposal.ID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference().data(), static_cast<int>(this->reference().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Proposal.reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 3 [(.validator.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Proposal.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Proposal.State state = 4 [(.validator.field) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::vega::Proposal_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.ProposalTerms terms = 6 [(.validator.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_terms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.ProposalError reason = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::vega::ProposalError >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Proposal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Proposal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Proposal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Proposal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string reference = 2;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reference(), output);
  }

  // string partyID = 3 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->partyid(), output);
  }

  // .vega.Proposal.State state = 4 [(.validator.field) = {
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timestamp(), output);
  }

  // .vega.ProposalTerms terms = 6 [(.validator.field) = {
  if (this->has_terms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::terms(this), output);
  }

  // .vega.ProposalError reason = 7;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Proposal)
}

::google::protobuf::uint8* Proposal::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Proposal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string reference = 2;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reference(), target);
  }

  // string partyID = 3 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Proposal.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->partyid(), target);
  }

  // .vega.Proposal.State state = 4 [(.validator.field) = {
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->timestamp(), target);
  }

  // .vega.ProposalTerms terms = 6 [(.validator.field) = {
  if (this->has_terms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::terms(this), target);
  }

  // .vega.ProposalError reason = 7;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Proposal)
  return target;
}

size_t Proposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Proposal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string reference = 2;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference());
  }

  // string partyID = 3 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // .vega.ProposalTerms terms = 6 [(.validator.field) = {
  if (this->has_terms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *terms_);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // .vega.Proposal.State state = 4 [(.validator.field) = {
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // .vega.ProposalError reason = 7;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proposal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  const Proposal* source =
      ::google::protobuf::DynamicCastToGenerated<Proposal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Proposal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Proposal)
    MergeFrom(*source);
  }
}

void Proposal::MergeFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.has_terms()) {
    mutable_terms()->::vega::ProposalTerms::MergeFrom(from.terms());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void Proposal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proposal::CopyFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  return true;
}

void Proposal::Swap(Proposal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Proposal::InternalSwap(Proposal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_.Swap(&other->reference_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(terms_, other->terms_);
  swap(timestamp_, other->timestamp_);
  swap(state_, other->state_);
  swap(reason_, other->reason_);
}

::google::protobuf::Metadata Proposal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Vote::InitAsDefaultInstance() {
}
class Vote::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vote::kPartyIDFieldNumber;
const int Vote::kValueFieldNumber;
const int Vote::kProposalIDFieldNumber;
const int Vote::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vote::Vote()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Vote)
}
Vote::Vote(const Vote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  proposalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proposalid().size() > 0) {
    proposalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposalid_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:vega.Vote)
}

void Vote::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Vote_proto_2fgovernance_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:vega.Vote)
  SharedDtor();
}

void Vote::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposalid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vote& Vote::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Vote_proto_2fgovernance_2eproto.base);
  return *internal_default_instance();
}


void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Vote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Vote::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Vote*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Vote.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.Vote.Value value = 2 [(.validator.field) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_value(static_cast<::vega::Vote_Value>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string proposalID = 3 [(.validator.field) = {
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Vote.proposalID");
        object = msg->mutable_proposalid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Vote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Vote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Vote.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Vote.Value value = 2 [(.validator.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value(static_cast< ::vega::Vote_Value >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proposalID = 3 [(.validator.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proposalid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proposalid().data(), static_cast<int>(this->proposalid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Vote.proposalID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Vote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Vote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Vote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Vote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Vote.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  // .vega.Vote.Value value = 2 [(.validator.field) = {
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->value(), output);
  }

  // string proposalID = 3 [(.validator.field) = {
  if (this->proposalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proposalid().data(), static_cast<int>(this->proposalid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Vote.proposalID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->proposalid(), output);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Vote)
}

::google::protobuf::uint8* Vote::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Vote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Vote.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  // .vega.Vote.Value value = 2 [(.validator.field) = {
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->value(), target);
  }

  // string proposalID = 3 [(.validator.field) = {
  if (this->proposalid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proposalid().data(), static_cast<int>(this->proposalid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Vote.proposalID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proposalid(), target);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Vote)
  return target;
}

size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Vote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string proposalID = 3 [(.validator.field) = {
  if (this->proposalid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proposalid());
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // .vega.Vote.Value value = 2 [(.validator.field) = {
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  const Vote* source =
      ::google::protobuf::DynamicCastToGenerated<Vote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Vote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Vote)
    MergeFrom(*source);
  }
}

void Vote::MergeFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.proposalid().size() > 0) {

    proposalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposalid_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Vote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  return true;
}

void Vote::Swap(Vote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vote::InternalSwap(Vote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proposalid_.Swap(&other->proposalid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata Vote::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fgovernance_2eproto);
  return ::file_level_metadata_proto_2fgovernance_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vega
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::vega::NetworkConfiguration* Arena::CreateMaybeMessage< ::vega::NetworkConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::vega::NetworkConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::FeeFactorsConfiguration* Arena::CreateMaybeMessage< ::vega::FeeFactorsConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::vega::FeeFactorsConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::FutureProduct* Arena::CreateMaybeMessage< ::vega::FutureProduct >(Arena* arena) {
  return Arena::CreateInternal< ::vega::FutureProduct >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::InstrumentConfiguration* Arena::CreateMaybeMessage< ::vega::InstrumentConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::vega::InstrumentConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NewMarketConfiguration* Arena::CreateMaybeMessage< ::vega::NewMarketConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::vega::NewMarketConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NewMarket* Arena::CreateMaybeMessage< ::vega::NewMarket >(Arena* arena) {
  return Arena::CreateInternal< ::vega::NewMarket >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::UpdateMarket* Arena::CreateMaybeMessage< ::vega::UpdateMarket >(Arena* arena) {
  return Arena::CreateInternal< ::vega::UpdateMarket >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::UpdateNetwork* Arena::CreateMaybeMessage< ::vega::UpdateNetwork >(Arena* arena) {
  return Arena::CreateInternal< ::vega::UpdateNetwork >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NewAsset* Arena::CreateMaybeMessage< ::vega::NewAsset >(Arena* arena) {
  return Arena::CreateInternal< ::vega::NewAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ProposalTerms* Arena::CreateMaybeMessage< ::vega::ProposalTerms >(Arena* arena) {
  return Arena::CreateInternal< ::vega::ProposalTerms >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::GovernanceData_YesPartyEntry_DoNotUse* Arena::CreateMaybeMessage< ::vega::GovernanceData_YesPartyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::vega::GovernanceData_YesPartyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::GovernanceData_NoPartyEntry_DoNotUse* Arena::CreateMaybeMessage< ::vega::GovernanceData_NoPartyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::vega::GovernanceData_NoPartyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::GovernanceData* Arena::CreateMaybeMessage< ::vega::GovernanceData >(Arena* arena) {
  return Arena::CreateInternal< ::vega::GovernanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Proposal* Arena::CreateMaybeMessage< ::vega::Proposal >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Proposal >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Vote* Arena::CreateMaybeMessage< ::vega::Vote >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Vote >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
