// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/vega.proto

#include "proto/vega.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fmarkets_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PriceMonitoringTrigger_proto_2fmarkets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Account_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Erc20WithdrawExt_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Fee_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FinancialAmount_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LedgerEntry_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LiquidityOrder_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PeggedOrder_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PriceLevel_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Price_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RiskFactor_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Signature_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LiquidityOrderReference_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Order_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PriceMonitoringBounds_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RiskResult_RiskFactorsEntry_DoNotUse_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Trade_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TransferBalance_proto_2fvega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fvega_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WithdrawExt_proto_2fvega_2eproto;
namespace vega {
class PriceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Price> _instance;
} _Price_default_instance_;
class TimestampDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Timestamp> _instance;
} _Timestamp_default_instance_;
class PartyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Party> _instance;
} _Party_default_instance_;
class RiskFactorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskFactor> _instance;
} _RiskFactor_default_instance_;
class RiskResult_RiskFactorsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskResult_RiskFactorsEntry_DoNotUse> _instance;
} _RiskResult_RiskFactorsEntry_DoNotUse_default_instance_;
class RiskResult_PredictedNextRiskFactorsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskResult_PredictedNextRiskFactorsEntry_DoNotUse> _instance;
} _RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_default_instance_;
class RiskResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskResult> _instance;
} _RiskResult_default_instance_;
class PeggedOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeggedOrder> _instance;
} _PeggedOrder_default_instance_;
class OrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Order> _instance;
} _Order_default_instance_;
class OrderCancellationConfirmationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderCancellationConfirmation> _instance;
} _OrderCancellationConfirmation_default_instance_;
class OrderConfirmationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderConfirmation> _instance;
} _OrderConfirmation_default_instance_;
class AuctionIndicativeStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuctionIndicativeState> _instance;
} _AuctionIndicativeState_default_instance_;
class TradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Trade> _instance;
} _Trade_default_instance_;
class FeeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Fee> _instance;
} _Fee_default_instance_;
class TradeSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeSet> _instance;
} _TradeSet_default_instance_;
class CandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Candle> _instance;
} _Candle_default_instance_;
class PriceLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PriceLevel> _instance;
} _PriceLevel_default_instance_;
class MarketDepthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepth> _instance;
} _MarketDepth_default_instance_;
class MarketDepthUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthUpdate> _instance;
} _MarketDepthUpdate_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class PositionTradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionTrade> _instance;
} _PositionTrade_default_instance_;
class StatisticsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Statistics> _instance;
} _Statistics_default_instance_;
class DepositDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Deposit> _instance;
} _Deposit_default_instance_;
class WithdrawalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Withdrawal> _instance;
} _Withdrawal_default_instance_;
class WithdrawSubmissionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WithdrawSubmission> _instance;
} _WithdrawSubmission_default_instance_;
class WithdrawExtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WithdrawExt> _instance;
  const ::vega::Erc20WithdrawExt* erc20_;
} _WithdrawExt_default_instance_;
class Erc20WithdrawExtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Erc20WithdrawExt> _instance;
} _Erc20WithdrawExt_default_instance_;
class OrderAmendmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderAmendment> _instance;
} _OrderAmendment_default_instance_;
class OrderSubmissionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderSubmission> _instance;
} _OrderSubmission_default_instance_;
class OrderCancellationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderCancellation> _instance;
} _OrderCancellation_default_instance_;
class NodeRegistrationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeRegistration> _instance;
} _NodeRegistration_default_instance_;
class NodeVoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeVote> _instance;
} _NodeVote_default_instance_;
class AccountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Account> _instance;
} _Account_default_instance_;
class FinancialAmountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FinancialAmount> _instance;
} _FinancialAmount_default_instance_;
class TransferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Transfer> _instance;
} _Transfer_default_instance_;
class TransferRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferRequest> _instance;
} _TransferRequest_default_instance_;
class LedgerEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LedgerEntry> _instance;
} _LedgerEntry_default_instance_;
class TransferBalanceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferBalance> _instance;
} _TransferBalance_default_instance_;
class TransferResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferResponse> _instance;
} _TransferResponse_default_instance_;
class MarginLevelsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarginLevels> _instance;
} _MarginLevels_default_instance_;
class MarketDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketData> _instance;
} _MarketData_default_instance_;
class PriceMonitoringBoundsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PriceMonitoringBounds> _instance;
} _PriceMonitoringBounds_default_instance_;
class ErrorDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ErrorDetail> _instance;
} _ErrorDetail_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Transaction> _instance;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
} _Transaction_default_instance_;
class SignatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signature> _instance;
} _Signature_default_instance_;
class SignedBundleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignedBundle> _instance;
} _SignedBundle_default_instance_;
class NodeSignatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeSignature> _instance;
} _NodeSignature_default_instance_;
class NetworkParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkParameter> _instance;
} _NetworkParameter_default_instance_;
class LiquidityOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiquidityOrder> _instance;
} _LiquidityOrder_default_instance_;
class LiquidityProvisionSubmissionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiquidityProvisionSubmission> _instance;
} _LiquidityProvisionSubmission_default_instance_;
class LiquidityOrderReferenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiquidityOrderReference> _instance;
} _LiquidityOrderReference_default_instance_;
class LiquidityProvisionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiquidityProvision> _instance;
} _LiquidityProvision_default_instance_;
}  // namespace vega
static void InitDefaultsPrice_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Price_default_instance_;
    new (ptr) ::vega::Price();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Price::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Price_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPrice_proto_2fvega_2eproto}, {}};

static void InitDefaultsTimestamp_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Timestamp_default_instance_;
    new (ptr) ::vega::Timestamp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Timestamp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimestamp_proto_2fvega_2eproto}, {}};

static void InitDefaultsParty_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Party_default_instance_;
    new (ptr) ::vega::Party();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Party::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Party_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsParty_proto_2fvega_2eproto}, {}};

static void InitDefaultsRiskFactor_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RiskFactor_default_instance_;
    new (ptr) ::vega::RiskFactor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::RiskFactor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RiskFactor_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRiskFactor_proto_2fvega_2eproto}, {}};

static void InitDefaultsRiskResult_RiskFactorsEntry_DoNotUse_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RiskResult_RiskFactorsEntry_DoNotUse_default_instance_;
    new (ptr) ::vega::RiskResult_RiskFactorsEntry_DoNotUse();
  }
  ::vega::RiskResult_RiskFactorsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RiskResult_RiskFactorsEntry_DoNotUse_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRiskResult_RiskFactorsEntry_DoNotUse_proto_2fvega_2eproto}, {
      &scc_info_RiskFactor_proto_2fvega_2eproto.base,}};

static void InitDefaultsRiskResult_PredictedNextRiskFactorsEntry_DoNotUse_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_default_instance_;
    new (ptr) ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse();
  }
  ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRiskResult_PredictedNextRiskFactorsEntry_DoNotUse_proto_2fvega_2eproto}, {
      &scc_info_RiskFactor_proto_2fvega_2eproto.base,}};

static void InitDefaultsRiskResult_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RiskResult_default_instance_;
    new (ptr) ::vega::RiskResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::RiskResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RiskResult_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRiskResult_proto_2fvega_2eproto}, {
      &scc_info_RiskResult_RiskFactorsEntry_DoNotUse_proto_2fvega_2eproto.base,
      &scc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_proto_2fvega_2eproto.base,}};

static void InitDefaultsPeggedOrder_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PeggedOrder_default_instance_;
    new (ptr) ::vega::PeggedOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::PeggedOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeggedOrder_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeggedOrder_proto_2fvega_2eproto}, {}};

static void InitDefaultsOrder_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Order_default_instance_;
    new (ptr) ::vega::Order();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Order::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Order_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrder_proto_2fvega_2eproto}, {
      &scc_info_PeggedOrder_proto_2fvega_2eproto.base,}};

static void InitDefaultsOrderCancellationConfirmation_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_OrderCancellationConfirmation_default_instance_;
    new (ptr) ::vega::OrderCancellationConfirmation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::OrderCancellationConfirmation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrderCancellationConfirmation_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrderCancellationConfirmation_proto_2fvega_2eproto}, {
      &scc_info_Order_proto_2fvega_2eproto.base,}};

static void InitDefaultsOrderConfirmation_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_OrderConfirmation_default_instance_;
    new (ptr) ::vega::OrderConfirmation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::OrderConfirmation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_OrderConfirmation_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsOrderConfirmation_proto_2fvega_2eproto}, {
      &scc_info_Order_proto_2fvega_2eproto.base,
      &scc_info_Trade_proto_2fvega_2eproto.base,}};

static void InitDefaultsAuctionIndicativeState_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_AuctionIndicativeState_default_instance_;
    new (ptr) ::vega::AuctionIndicativeState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::AuctionIndicativeState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuctionIndicativeState_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuctionIndicativeState_proto_2fvega_2eproto}, {}};

static void InitDefaultsTrade_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Trade_default_instance_;
    new (ptr) ::vega::Trade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Trade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Trade_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrade_proto_2fvega_2eproto}, {
      &scc_info_Fee_proto_2fvega_2eproto.base,}};

static void InitDefaultsFee_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Fee_default_instance_;
    new (ptr) ::vega::Fee();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Fee::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Fee_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFee_proto_2fvega_2eproto}, {}};

static void InitDefaultsTradeSet_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TradeSet_default_instance_;
    new (ptr) ::vega::TradeSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::TradeSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TradeSet_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTradeSet_proto_2fvega_2eproto}, {
      &scc_info_Trade_proto_2fvega_2eproto.base,}};

static void InitDefaultsCandle_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Candle_default_instance_;
    new (ptr) ::vega::Candle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Candle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Candle_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCandle_proto_2fvega_2eproto}, {}};

static void InitDefaultsPriceLevel_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PriceLevel_default_instance_;
    new (ptr) ::vega::PriceLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::PriceLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PriceLevel_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPriceLevel_proto_2fvega_2eproto}, {}};

static void InitDefaultsMarketDepth_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarketDepth_default_instance_;
    new (ptr) ::vega::MarketDepth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::MarketDepth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarketDepth_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarketDepth_proto_2fvega_2eproto}, {
      &scc_info_PriceLevel_proto_2fvega_2eproto.base,}};

static void InitDefaultsMarketDepthUpdate_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarketDepthUpdate_default_instance_;
    new (ptr) ::vega::MarketDepthUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::MarketDepthUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarketDepthUpdate_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarketDepthUpdate_proto_2fvega_2eproto}, {
      &scc_info_PriceLevel_proto_2fvega_2eproto.base,}};

static void InitDefaultsPosition_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Position_default_instance_;
    new (ptr) ::vega::Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Position_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPosition_proto_2fvega_2eproto}, {}};

static void InitDefaultsPositionTrade_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PositionTrade_default_instance_;
    new (ptr) ::vega::PositionTrade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::PositionTrade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PositionTrade_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPositionTrade_proto_2fvega_2eproto}, {}};

static void InitDefaultsStatistics_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Statistics_default_instance_;
    new (ptr) ::vega::Statistics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Statistics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Statistics_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStatistics_proto_2fvega_2eproto}, {}};

static void InitDefaultsDeposit_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Deposit_default_instance_;
    new (ptr) ::vega::Deposit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Deposit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Deposit_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeposit_proto_2fvega_2eproto}, {}};

static void InitDefaultsWithdrawal_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Withdrawal_default_instance_;
    new (ptr) ::vega::Withdrawal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Withdrawal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Withdrawal_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWithdrawal_proto_2fvega_2eproto}, {
      &scc_info_WithdrawExt_proto_2fvega_2eproto.base,}};

static void InitDefaultsWithdrawSubmission_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_WithdrawSubmission_default_instance_;
    new (ptr) ::vega::WithdrawSubmission();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::WithdrawSubmission::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WithdrawSubmission_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWithdrawSubmission_proto_2fvega_2eproto}, {
      &scc_info_WithdrawExt_proto_2fvega_2eproto.base,}};

static void InitDefaultsWithdrawExt_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_WithdrawExt_default_instance_;
    new (ptr) ::vega::WithdrawExt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::WithdrawExt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WithdrawExt_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWithdrawExt_proto_2fvega_2eproto}, {
      &scc_info_Erc20WithdrawExt_proto_2fvega_2eproto.base,}};

static void InitDefaultsErc20WithdrawExt_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Erc20WithdrawExt_default_instance_;
    new (ptr) ::vega::Erc20WithdrawExt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Erc20WithdrawExt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Erc20WithdrawExt_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsErc20WithdrawExt_proto_2fvega_2eproto}, {}};

static void InitDefaultsOrderAmendment_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_OrderAmendment_default_instance_;
    new (ptr) ::vega::OrderAmendment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::OrderAmendment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_OrderAmendment_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsOrderAmendment_proto_2fvega_2eproto}, {
      &scc_info_Price_proto_2fvega_2eproto.base,
      &scc_info_Timestamp_proto_2fvega_2eproto.base,
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsOrderSubmission_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_OrderSubmission_default_instance_;
    new (ptr) ::vega::OrderSubmission();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::OrderSubmission::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrderSubmission_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrderSubmission_proto_2fvega_2eproto}, {
      &scc_info_PeggedOrder_proto_2fvega_2eproto.base,}};

static void InitDefaultsOrderCancellation_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_OrderCancellation_default_instance_;
    new (ptr) ::vega::OrderCancellation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::OrderCancellation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OrderCancellation_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrderCancellation_proto_2fvega_2eproto}, {}};

static void InitDefaultsNodeRegistration_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NodeRegistration_default_instance_;
    new (ptr) ::vega::NodeRegistration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::NodeRegistration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeRegistration_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeRegistration_proto_2fvega_2eproto}, {}};

static void InitDefaultsNodeVote_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NodeVote_default_instance_;
    new (ptr) ::vega::NodeVote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::NodeVote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeVote_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeVote_proto_2fvega_2eproto}, {}};

static void InitDefaultsAccount_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Account_default_instance_;
    new (ptr) ::vega::Account();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Account::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Account_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccount_proto_2fvega_2eproto}, {}};

static void InitDefaultsFinancialAmount_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_FinancialAmount_default_instance_;
    new (ptr) ::vega::FinancialAmount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::FinancialAmount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FinancialAmount_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFinancialAmount_proto_2fvega_2eproto}, {}};

static void InitDefaultsTransfer_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Transfer_default_instance_;
    new (ptr) ::vega::Transfer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Transfer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Transfer_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransfer_proto_2fvega_2eproto}, {
      &scc_info_FinancialAmount_proto_2fvega_2eproto.base,}};

static void InitDefaultsTransferRequest_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TransferRequest_default_instance_;
    new (ptr) ::vega::TransferRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::TransferRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransferRequest_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransferRequest_proto_2fvega_2eproto}, {
      &scc_info_Account_proto_2fvega_2eproto.base,}};

static void InitDefaultsLedgerEntry_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LedgerEntry_default_instance_;
    new (ptr) ::vega::LedgerEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::LedgerEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LedgerEntry_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLedgerEntry_proto_2fvega_2eproto}, {}};

static void InitDefaultsTransferBalance_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TransferBalance_default_instance_;
    new (ptr) ::vega::TransferBalance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::TransferBalance::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransferBalance_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransferBalance_proto_2fvega_2eproto}, {
      &scc_info_Account_proto_2fvega_2eproto.base,}};

static void InitDefaultsTransferResponse_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TransferResponse_default_instance_;
    new (ptr) ::vega::TransferResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::TransferResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TransferResponse_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTransferResponse_proto_2fvega_2eproto}, {
      &scc_info_LedgerEntry_proto_2fvega_2eproto.base,
      &scc_info_TransferBalance_proto_2fvega_2eproto.base,}};

static void InitDefaultsMarginLevels_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarginLevels_default_instance_;
    new (ptr) ::vega::MarginLevels();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::MarginLevels::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarginLevels_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarginLevels_proto_2fvega_2eproto}, {}};

static void InitDefaultsMarketData_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarketData_default_instance_;
    new (ptr) ::vega::MarketData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::MarketData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarketData_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarketData_proto_2fvega_2eproto}, {
      &scc_info_PriceMonitoringBounds_proto_2fvega_2eproto.base,}};

static void InitDefaultsPriceMonitoringBounds_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PriceMonitoringBounds_default_instance_;
    new (ptr) ::vega::PriceMonitoringBounds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::PriceMonitoringBounds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PriceMonitoringBounds_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPriceMonitoringBounds_proto_2fvega_2eproto}, {
      &scc_info_PriceMonitoringTrigger_proto_2fmarkets_2eproto.base,}};

static void InitDefaultsErrorDetail_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ErrorDetail_default_instance_;
    new (ptr) ::vega::ErrorDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::ErrorDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ErrorDetail_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsErrorDetail_proto_2fvega_2eproto}, {}};

static void InitDefaultsTransaction_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Transaction_default_instance_;
    new (ptr) ::vega::Transaction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Transaction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Transaction_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransaction_proto_2fvega_2eproto}, {}};

static void InitDefaultsSignature_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Signature_default_instance_;
    new (ptr) ::vega::Signature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::Signature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Signature_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignature_proto_2fvega_2eproto}, {}};

static void InitDefaultsSignedBundle_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_SignedBundle_default_instance_;
    new (ptr) ::vega::SignedBundle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::SignedBundle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SignedBundle_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSignedBundle_proto_2fvega_2eproto}, {
      &scc_info_Signature_proto_2fvega_2eproto.base,}};

static void InitDefaultsNodeSignature_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NodeSignature_default_instance_;
    new (ptr) ::vega::NodeSignature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::NodeSignature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeSignature_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeSignature_proto_2fvega_2eproto}, {}};

static void InitDefaultsNetworkParameter_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NetworkParameter_default_instance_;
    new (ptr) ::vega::NetworkParameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::NetworkParameter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NetworkParameter_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetworkParameter_proto_2fvega_2eproto}, {}};

static void InitDefaultsLiquidityOrder_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LiquidityOrder_default_instance_;
    new (ptr) ::vega::LiquidityOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::LiquidityOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LiquidityOrder_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLiquidityOrder_proto_2fvega_2eproto}, {}};

static void InitDefaultsLiquidityProvisionSubmission_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LiquidityProvisionSubmission_default_instance_;
    new (ptr) ::vega::LiquidityProvisionSubmission();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::LiquidityProvisionSubmission::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LiquidityProvisionSubmission_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLiquidityProvisionSubmission_proto_2fvega_2eproto}, {
      &scc_info_LiquidityOrder_proto_2fvega_2eproto.base,}};

static void InitDefaultsLiquidityOrderReference_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LiquidityOrderReference_default_instance_;
    new (ptr) ::vega::LiquidityOrderReference();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::LiquidityOrderReference::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LiquidityOrderReference_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLiquidityOrderReference_proto_2fvega_2eproto}, {
      &scc_info_LiquidityOrder_proto_2fvega_2eproto.base,}};

static void InitDefaultsLiquidityProvision_proto_2fvega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LiquidityProvision_default_instance_;
    new (ptr) ::vega::LiquidityProvision();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vega::LiquidityProvision::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LiquidityProvision_proto_2fvega_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLiquidityProvision_proto_2fvega_2eproto}, {
      &scc_info_LiquidityOrderReference_proto_2fvega_2eproto.base,}};

void InitDefaults_proto_2fvega_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Price_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Timestamp_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Party_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RiskFactor_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RiskResult_RiskFactorsEntry_DoNotUse_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RiskResult_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeggedOrder_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Order_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderCancellationConfirmation_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderConfirmation_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuctionIndicativeState_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Trade_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Fee_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradeSet_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Candle_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PriceLevel_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepth_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthUpdate_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Position_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PositionTrade_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Statistics_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Deposit_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Withdrawal_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WithdrawSubmission_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WithdrawExt_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Erc20WithdrawExt_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderAmendment_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderSubmission_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderCancellation_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeRegistration_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeVote_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Account_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FinancialAmount_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Transfer_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransferRequest_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LedgerEntry_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransferBalance_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransferResponse_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarginLevels_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketData_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PriceMonitoringBounds_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ErrorDetail_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Transaction_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Signature_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignedBundle_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeSignature_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkParameter_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiquidityOrder_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiquidityProvisionSubmission_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiquidityOrderReference_proto_2fvega_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiquidityProvision_proto_2fvega_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_proto_2fvega_2eproto[52];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_proto_2fvega_2eproto[17];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_proto_2fvega_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_proto_2fvega_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Price, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Price, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Timestamp, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Party, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Party, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::RiskFactor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RiskFactor, market_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskFactor, short__),
  PROTOBUF_FIELD_OFFSET(::vega::RiskFactor, long__),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_RiskFactorsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_RiskFactorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_RiskFactorsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_RiskFactorsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult, updatedtimestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult, riskfactors_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult, nextupdatetimestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult, predictednextriskfactors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PeggedOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PeggedOrder, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::PeggedOrder, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Order, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, side_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, price_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, size_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, remaining_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, timeinforce_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, type_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, createdat_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, status_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, expiresat_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, reason_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, updatedat_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, version_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, batchid_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, peggedorder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::OrderCancellationConfirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::OrderCancellationConfirmation, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::OrderConfirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::OrderConfirmation, order_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderConfirmation, trades_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderConfirmation, passiveordersaffected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, indicativeprice_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, indicativevolume_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, auctionstart_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, auctionend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Trade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Trade, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, price_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, size_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, buyer_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, seller_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, aggressor_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, buyorder_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, sellorder_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, type_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, buyerfee_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, sellerfee_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, buyerauctionbatch_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, sellerauctionbatch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Fee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Fee, makerfee_),
  PROTOBUF_FIELD_OFFSET(::vega::Fee, infrastructurefee_),
  PROTOBUF_FIELD_OFFSET(::vega::Fee, liquidityfee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TradeSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TradeSet, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Candle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Candle, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, datetime_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, high_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, low_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, open_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, close_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, volume_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PriceLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PriceLevel, price_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceLevel, numberoforders_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceLevel, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepth, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepth, buy_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepth, sell_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepth, sequencenumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepthUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepthUpdate, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepthUpdate, buy_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepthUpdate, sell_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepthUpdate, sequencenumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Position, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, openvolume_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, realisedpnl_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, unrealisedpnl_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, averageentryprice_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, updatedat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PositionTrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PositionTrade, volume_),
  PROTOBUF_FIELD_OFFSET(::vega::PositionTrade, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, blockheight_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, backloglength_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, totalpeers_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, genesistime_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, currenttime_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, vegatime_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, status_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, txperblock_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, averagetxbytes_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, averageordersperblock_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, tradespersecond_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, orderspersecond_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, totalmarkets_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, totalamendorder_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, totalcancelorder_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, totalcreateorder_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, totalorders_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, totaltrades_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, ordersubscriptions_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, tradesubscriptions_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, candlesubscriptions_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, marketdepthsubscriptions_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, positionssubscriptions_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, accountsubscriptions_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, marketdatasubscriptions_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, appversionhash_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, appversion_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, chainversion_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, blockduration_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, uptime_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, chainid_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, marketdepthupdatessubscriptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, status_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, txhash_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, creditedtimestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, createdtimestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, status_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, ref_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, expiry_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, txhash_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, createdtimestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, withdrawntimestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawSubmission, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawSubmission, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawSubmission, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawSubmission, ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawExt, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawExt, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::vega::WithdrawExtDefaultTypeInternal, erc20_),
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawExt, ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Erc20WithdrawExt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Erc20WithdrawExt, receiveraddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, orderid_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, price_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, sizedelta_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, expiresat_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, timeinforce_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, peggedoffset_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, peggedreference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, id_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, price_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, size_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, side_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, timeinforce_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, expiresat_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, type_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, peggedorder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::OrderCancellation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::OrderCancellation, orderid_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderCancellation, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderCancellation, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NodeRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NodeRegistration, pubkey_),
  PROTOBUF_FIELD_OFFSET(::vega::NodeRegistration, chainpubkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NodeVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NodeVote, pubkey_),
  PROTOBUF_FIELD_OFFSET(::vega::NodeVote, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Account, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Account, owner_),
  PROTOBUF_FIELD_OFFSET(::vega::Account, balance_),
  PROTOBUF_FIELD_OFFSET(::vega::Account, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::Account, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::Account, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::FinancialAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::FinancialAmount, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::FinancialAmount, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Transfer, owner_),
  PROTOBUF_FIELD_OFFSET(::vega::Transfer, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::Transfer, type_),
  PROTOBUF_FIELD_OFFSET(::vega::Transfer, minamount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, fromaccount_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, toaccount_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, minamount_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, fromaccount_),
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, toaccount_),
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, type_),
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TransferBalance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TransferBalance, account_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferBalance, balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TransferResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TransferResponse, transfers_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferResponse, balances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, maintenancemargin_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, searchlevel_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, initialmargin_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, collateralreleaselevel_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, markprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, bestbidprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, bestbidvolume_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, bestofferprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, bestoffervolume_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, beststaticbidprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, beststaticbidvolume_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, beststaticofferprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, beststaticoffervolume_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, midprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, staticmidprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, market_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, openinterest_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, auctionend_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, auctionstart_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, indicativeprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, indicativevolume_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, marketstate_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, trigger_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, targetstake_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, suppliedstake_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, pricemonitoringbounds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringBounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringBounds, minvalidprice_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringBounds, maxvalidprice_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringBounds, trigger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ErrorDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ErrorDetail, code_),
  PROTOBUF_FIELD_OFFSET(::vega::ErrorDetail, message_),
  PROTOBUF_FIELD_OFFSET(::vega::ErrorDetail, inner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::Transaction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Transaction, inputdata_),
  PROTOBUF_FIELD_OFFSET(::vega::Transaction, nonce_),
  PROTOBUF_FIELD_OFFSET(::vega::Transaction, blockheight_),
  offsetof(::vega::TransactionDefaultTypeInternal, address_),
  offsetof(::vega::TransactionDefaultTypeInternal, pubkey_),
  PROTOBUF_FIELD_OFFSET(::vega::Transaction, from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Signature, sig_),
  PROTOBUF_FIELD_OFFSET(::vega::Signature, algo_),
  PROTOBUF_FIELD_OFFSET(::vega::Signature, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::SignedBundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::SignedBundle, tx_),
  PROTOBUF_FIELD_OFFSET(::vega::SignedBundle, sig_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NodeSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NodeSignature, id_),
  PROTOBUF_FIELD_OFFSET(::vega::NodeSignature, sig_),
  PROTOBUF_FIELD_OFFSET(::vega::NodeSignature, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NetworkParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NetworkParameter, key_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkParameter, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrder, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrder, proportion_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrder, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvisionSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvisionSubmission, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvisionSubmission, commitmentamount_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvisionSubmission, fee_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvisionSubmission, sells_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvisionSubmission, buys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrderReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrderReference, orderid_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrderReference, liquidityorder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, id_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, createdat_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, updatedat_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, commitmentamount_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, fee_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, sells_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, buys_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, version_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, status_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::Price)},
  { 6, -1, sizeof(::vega::Timestamp)},
  { 12, -1, sizeof(::vega::Party)},
  { 18, -1, sizeof(::vega::RiskFactor)},
  { 26, 33, sizeof(::vega::RiskResult_RiskFactorsEntry_DoNotUse)},
  { 35, 42, sizeof(::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse)},
  { 44, -1, sizeof(::vega::RiskResult)},
  { 53, -1, sizeof(::vega::PeggedOrder)},
  { 60, -1, sizeof(::vega::Order)},
  { 83, -1, sizeof(::vega::OrderCancellationConfirmation)},
  { 89, -1, sizeof(::vega::OrderConfirmation)},
  { 97, -1, sizeof(::vega::AuctionIndicativeState)},
  { 107, -1, sizeof(::vega::Trade)},
  { 127, -1, sizeof(::vega::Fee)},
  { 135, -1, sizeof(::vega::TradeSet)},
  { 141, -1, sizeof(::vega::Candle)},
  { 154, -1, sizeof(::vega::PriceLevel)},
  { 162, -1, sizeof(::vega::MarketDepth)},
  { 171, -1, sizeof(::vega::MarketDepthUpdate)},
  { 180, -1, sizeof(::vega::Position)},
  { 192, -1, sizeof(::vega::PositionTrade)},
  { 199, -1, sizeof(::vega::Statistics)},
  { 236, -1, sizeof(::vega::Deposit)},
  { 249, -1, sizeof(::vega::Withdrawal)},
  { 265, -1, sizeof(::vega::WithdrawSubmission)},
  { 274, -1, sizeof(::vega::WithdrawExt)},
  { 281, -1, sizeof(::vega::Erc20WithdrawExt)},
  { 287, -1, sizeof(::vega::OrderAmendment)},
  { 301, -1, sizeof(::vega::OrderSubmission)},
  { 317, -1, sizeof(::vega::OrderCancellation)},
  { 325, -1, sizeof(::vega::NodeRegistration)},
  { 332, -1, sizeof(::vega::NodeVote)},
  { 339, -1, sizeof(::vega::Account)},
  { 350, -1, sizeof(::vega::FinancialAmount)},
  { 357, -1, sizeof(::vega::Transfer)},
  { 366, -1, sizeof(::vega::TransferRequest)},
  { 377, -1, sizeof(::vega::LedgerEntry)},
  { 388, -1, sizeof(::vega::TransferBalance)},
  { 395, -1, sizeof(::vega::TransferResponse)},
  { 402, -1, sizeof(::vega::MarginLevels)},
  { 415, -1, sizeof(::vega::MarketData)},
  { 443, -1, sizeof(::vega::PriceMonitoringBounds)},
  { 451, -1, sizeof(::vega::ErrorDetail)},
  { 459, -1, sizeof(::vega::Transaction)},
  { 470, -1, sizeof(::vega::Signature)},
  { 478, -1, sizeof(::vega::SignedBundle)},
  { 485, -1, sizeof(::vega::NodeSignature)},
  { 493, -1, sizeof(::vega::NetworkParameter)},
  { 500, -1, sizeof(::vega::LiquidityOrder)},
  { 508, -1, sizeof(::vega::LiquidityProvisionSubmission)},
  { 518, -1, sizeof(::vega::LiquidityOrderReference)},
  { 525, -1, sizeof(::vega::LiquidityProvision)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Price_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Timestamp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Party_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_RiskFactor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_RiskResult_RiskFactorsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_RiskResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_PeggedOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Order_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_OrderCancellationConfirmation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_OrderConfirmation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_AuctionIndicativeState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Trade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Fee_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_TradeSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Candle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_PriceLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_MarketDepth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_MarketDepthUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_PositionTrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Statistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Deposit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Withdrawal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_WithdrawSubmission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_WithdrawExt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Erc20WithdrawExt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_OrderAmendment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_OrderSubmission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_OrderCancellation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_NodeRegistration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_NodeVote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Account_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_FinancialAmount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Transfer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_TransferRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_LedgerEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_TransferBalance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_TransferResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_MarginLevels_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_MarketData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_PriceMonitoringBounds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_ErrorDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Transaction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_Signature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_SignedBundle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_NodeSignature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_NetworkParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_LiquidityOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_LiquidityProvisionSubmission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_LiquidityOrderReference_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vega::_LiquidityProvision_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_proto_2fvega_2eproto = {
  {}, AddDescriptors_proto_2fvega_2eproto, "proto/vega.proto", schemas,
  file_default_instances, TableStruct_proto_2fvega_2eproto::offsets,
  file_level_metadata_proto_2fvega_2eproto, 52, file_level_enum_descriptors_proto_2fvega_2eproto, file_level_service_descriptors_proto_2fvega_2eproto,
};

const char descriptor_table_protodef_proto_2fvega_2eproto[] =
  "\n\020proto/vega.proto\022\004vega\0326github.com/mwi"
  "tkow/go-proto-validators/validator.proto"
  "\032\036google/protobuf/wrappers.proto\032\023proto/"
  "markets.proto\"\026\n\005Price\022\r\n\005value\030\001 \001(\004\"\032\n"
  "\tTimestamp\022\r\n\005value\030\001 \001(\003\"\033\n\005Party\022\022\n\002id"
  "\030\001 \001(\tB\006\342\337\037\002 \001\"9\n\nRiskFactor\022\016\n\006market\030\001"
  " \001(\t\022\r\n\005short\030\002 \001(\001\022\014\n\004long\030\003 \001(\001\"\346\002\n\nRi"
  "skResult\022\030\n\020updatedTimestamp\030\001 \001(\003\0226\n\013ri"
  "skFactors\030\002 \003(\0132!.vega.RiskResult.RiskFa"
  "ctorsEntry\022\033\n\023nextUpdateTimestamp\030\003 \001(\003\022"
  "P\n\030predictedNextRiskFactors\030\004 \003(\0132..vega"
  ".RiskResult.PredictedNextRiskFactorsEntr"
  "y\032D\n\020RiskFactorsEntry\022\013\n\003key\030\001 \001(\t\022\037\n\005va"
  "lue\030\002 \001(\0132\020.vega.RiskFactor:\0028\001\032Q\n\035Predi"
  "ctedNextRiskFactorsEntry\022\013\n\003key\030\001 \001(\t\022\037\n"
  "\005value\030\002 \001(\0132\020.vega.RiskFactor:\0028\001\"G\n\013Pe"
  "ggedOrder\022(\n\treference\030\001 \001(\0162\025.vega.Pegg"
  "edReference\022\016\n\006offset\030\002 \001(\003\"\265\006\n\005Order\022\n\n"
  "\002id\030\001 \001(\t\022\020\n\010marketID\030\002 \001(\t\022\017\n\007partyID\030\003"
  " \001(\t\022\030\n\004side\030\004 \001(\0162\n.vega.Side\022\r\n\005price\030"
  "\005 \001(\004\022\014\n\004size\030\006 \001(\004\022\021\n\tremaining\030\007 \001(\004\022,"
  "\n\013timeInForce\030\010 \001(\0162\027.vega.Order.TimeInF"
  "orce\022\036\n\004type\030\t \001(\0162\020.vega.Order.Type\022\021\n\t"
  "createdAt\030\n \001(\003\022\"\n\006status\030\013 \001(\0162\022.vega.O"
  "rder.Status\022\021\n\texpiresAt\030\014 \001(\003\022\021\n\trefere"
  "nce\030\r \001(\t\022 \n\006reason\030\016 \001(\0162\020.vega.OrderEr"
  "ror\022\021\n\tupdatedAt\030\017 \001(\003\022\017\n\007version\030\020 \001(\004\022"
  "\017\n\007batchID\030\021 \001(\004\022&\n\013peggedOrder\030\022 \001(\0132\021."
  "vega.PeggedOrder\"p\n\013TimeInForce\022\023\n\017TIF_U"
  "NSPECIFIED\020\000\022\013\n\007TIF_GTC\020\001\022\013\n\007TIF_GTT\020\002\022\013"
  "\n\007TIF_IOC\020\003\022\013\n\007TIF_FOK\020\004\022\013\n\007TIF_GFA\020\005\022\013\n"
  "\007TIF_GFN\020\006\"O\n\004Type\022\024\n\020TYPE_UNSPECIFIED\020\000"
  "\022\016\n\nTYPE_LIMIT\020\001\022\017\n\013TYPE_MARKET\020\002\022\020\n\014TYP"
  "E_NETWORK\020\003\"\305\001\n\006Status\022\022\n\016STATUS_INVALID"
  "\020\000\022\021\n\rSTATUS_ACTIVE\020\001\022\022\n\016STATUS_EXPIRED\020"
  "\002\022\024\n\020STATUS_CANCELLED\020\003\022\022\n\016STATUS_STOPPE"
  "D\020\004\022\021\n\rSTATUS_FILLED\020\005\022\023\n\017STATUS_REJECTE"
  "D\020\006\022\033\n\027STATUS_PARTIALLY_FILLED\020\007\022\021\n\rSTAT"
  "US_PARKED\020\010\";\n\035OrderCancellationConfirma"
  "tion\022\032\n\005order\030\001 \001(\0132\013.vega.Order\"x\n\021Orde"
  "rConfirmation\022\032\n\005order\030\001 \001(\0132\013.vega.Orde"
  "r\022\033\n\006trades\030\002 \003(\0132\013.vega.Trade\022*\n\025passiv"
  "eOrdersAffected\030\003 \003(\0132\013.vega.Order\"\207\001\n\026A"
  "uctionIndicativeState\022\020\n\010marketID\030\001 \001(\t\022"
  "\027\n\017indicativePrice\030\002 \001(\004\022\030\n\020indicativeVo"
  "lume\030\003 \001(\004\022\024\n\014auctionStart\030\004 \001(\003\022\022\n\nauct"
  "ionEnd\030\005 \001(\003\"\273\003\n\005Trade\022\n\n\002id\030\001 \001(\t\022\020\n\010ma"
  "rketID\030\002 \001(\t\022\r\n\005price\030\003 \001(\004\022\014\n\004size\030\004 \001("
  "\004\022\r\n\005buyer\030\005 \001(\t\022\016\n\006seller\030\006 \001(\t\022\035\n\taggr"
  "essor\030\007 \001(\0162\n.vega.Side\022\020\n\010buyOrder\030\010 \001("
  "\t\022\021\n\tsellOrder\030\t \001(\t\022\021\n\ttimestamp\030\n \001(\003\022"
  "\036\n\004type\030\013 \001(\0162\020.vega.Trade.Type\022\033\n\010buyer"
  "Fee\030\014 \001(\0132\t.vega.Fee\022\034\n\tsellerFee\030\r \001(\0132"
  "\t.vega.Fee\022\031\n\021buyerAuctionBatch\030\016 \001(\004\022\032\n"
  "\022sellerAuctionBatch\030\017 \001(\004\"o\n\004Type\022\024\n\020TYP"
  "E_UNSPECIFIED\020\000\022\020\n\014TYPE_DEFAULT\020\001\022\037\n\033TYP"
  "E_NETWORK_CLOSE_OUT_GOOD\020\002\022\036\n\032TYPE_NETWO"
  "RK_CLOSE_OUT_BAD\020\003\"H\n\003Fee\022\020\n\010makerFee\030\001 "
  "\001(\004\022\031\n\021infrastructureFee\030\002 \001(\004\022\024\n\014liquid"
  "ityFee\030\003 \001(\004\"\'\n\010TradeSet\022\033\n\006trades\030\001 \003(\013"
  "2\013.vega.Trade\"\227\001\n\006Candle\022\021\n\ttimestamp\030\001 "
  "\001(\003\022\020\n\010datetime\030\002 \001(\t\022\014\n\004high\030\003 \001(\004\022\013\n\003l"
  "ow\030\004 \001(\004\022\014\n\004open\030\005 \001(\004\022\r\n\005close\030\006 \001(\004\022\016\n"
  "\006volume\030\007 \001(\004\022 \n\010interval\030\010 \001(\0162\016.vega.I"
  "nterval\"C\n\nPriceLevel\022\r\n\005price\030\001 \001(\004\022\026\n\016"
  "numberOfOrders\030\002 \001(\004\022\016\n\006volume\030\003 \001(\004\"v\n\013"
  "MarketDepth\022\020\n\010marketID\030\001 \001(\t\022\035\n\003buy\030\002 \003"
  "(\0132\020.vega.PriceLevel\022\036\n\004sell\030\003 \003(\0132\020.veg"
  "a.PriceLevel\022\026\n\016sequenceNumber\030\004 \001(\004\"|\n\021"
  "MarketDepthUpdate\022\020\n\010marketID\030\001 \001(\t\022\035\n\003b"
  "uy\030\002 \003(\0132\020.vega.PriceLevel\022\036\n\004sell\030\003 \003(\013"
  "2\020.vega.PriceLevel\022\026\n\016sequenceNumber\030\004 \001"
  "(\004\"\233\001\n\010Position\022\020\n\010marketID\030\001 \001(\t\022\017\n\007par"
  "tyID\030\002 \001(\t\022\022\n\nopenVolume\030\003 \001(\003\022\023\n\013realis"
  "edPNL\030\004 \001(\003\022\025\n\runrealisedPNL\030\005 \001(\003\022\031\n\021av"
  "erageEntryPrice\030\006 \001(\004\022\021\n\tupdatedAt\030\007 \001(\003"
  "\".\n\rPositionTrade\022\016\n\006volume\030\001 \001(\003\022\r\n\005pri"
  "ce\030\002 \001(\004\"\256\006\n\nStatistics\022\023\n\013blockHeight\030\001"
  " \001(\004\022\025\n\rbacklogLength\030\002 \001(\004\022\022\n\ntotalPeer"
  "s\030\003 \001(\004\022\023\n\013genesisTime\030\004 \001(\t\022\023\n\013currentT"
  "ime\030\005 \001(\t\022\020\n\010vegaTime\030\006 \001(\t\022!\n\006status\030\007 "
  "\001(\0162\021.vega.ChainStatus\022\022\n\ntxPerBlock\030\010 \001"
  "(\004\022\026\n\016averageTxBytes\030\t \001(\004\022\035\n\025averageOrd"
  "ersPerBlock\030\n \001(\004\022\027\n\017tradesPerSecond\030\013 \001"
  "(\004\022\027\n\017ordersPerSecond\030\014 \001(\004\022\024\n\014totalMark"
  "ets\030\r \001(\004\022\027\n\017totalAmendOrder\030\020 \001(\004\022\030\n\020to"
  "talCancelOrder\030\021 \001(\004\022\030\n\020totalCreateOrder"
  "\030\022 \001(\004\022\023\n\013totalOrders\030\023 \001(\004\022\023\n\013totalTrad"
  "es\030\024 \001(\004\022\032\n\022orderSubscriptions\030\025 \001(\r\022\032\n\022"
  "tradeSubscriptions\030\026 \001(\r\022\033\n\023candleSubscr"
  "iptions\030\027 \001(\r\022 \n\030marketDepthSubscription"
  "s\030\030 \001(\r\022\036\n\026positionsSubscriptions\030\031 \001(\r\022"
  "\034\n\024accountSubscriptions\030\032 \001(\r\022\037\n\027marketD"
  "ataSubscriptions\030\033 \001(\r\022\026\n\016appVersionHash"
  "\030\034 \001(\t\022\022\n\nappVersion\030\035 \001(\t\022\024\n\014chainVersi"
  "on\030\036 \001(\t\022\025\n\rblockDuration\030\037 \001(\004\022\016\n\006uptim"
  "e\030  \001(\t\022\017\n\007chainID\030! \001(\t\022\'\n\037marketDepthU"
  "pdatesSubscriptions\030\" \001(\r\"\257\002\n\007Deposit\022\n\n"
  "\002id\030\001 \001(\t\022$\n\006status\030\002 \001(\0162\024.vega.Deposit"
  ".Status\022\017\n\007partyID\030\003 \001(\t\022\r\n\005asset\030\004 \001(\t\022"
  "\016\n\006amount\030\005 \001(\t\022\016\n\006txHash\030\006 \001(\t\022\031\n\021credi"
  "tedTimestamp\030\007 \001(\003\022\030\n\020createdTimestamp\030\010"
  " \001(\003\"}\n\006Status\022\036\n\032DEPOSIT_STATUS_UNSPECI"
  "FIED\020\000\022\027\n\023DEPOSIT_STATUS_OPEN\020\001\022\034\n\030DEPOS"
  "IT_STATUS_CANCELLED\020\002\022\034\n\030DEPOSIT_STATUS_"
  "FINALIZED\020\003\"\200\003\n\nWithdrawal\022\n\n\002id\030\001 \001(\t\022\017"
  "\n\007partyID\030\002 \001(\t\022\016\n\006amount\030\003 \001(\004\022\r\n\005asset"
  "\030\004 \001(\t\022\'\n\006status\030\005 \001(\0162\027.vega.Withdrawal"
  ".Status\022\013\n\003ref\030\006 \001(\t\022\016\n\006expiry\030\007 \001(\003\022\016\n\006"
  "txHash\030\010 \001(\t\022\030\n\020createdTimestamp\030\t \001(\003\022\032"
  "\n\022withdrawnTimestamp\030\n \001(\003\022\036\n\003ext\030\013 \001(\0132"
  "\021.vega.WithdrawExt\"\211\001\n\006Status\022!\n\035WITHDRA"
  "WAL_STATUS_UNSPECIFIED\020\000\022\032\n\026WITHDRAWAL_S"
  "TATUS_OPEN\020\001\022\037\n\033WITHDRAWAL_STATUS_CANCEL"
  "LED\020\002\022\037\n\033WITHDRAWAL_STATUS_FINALIZED\020\003\"d"
  "\n\022WithdrawSubmission\022\017\n\007partyID\030\001 \001(\t\022\016\n"
  "\006amount\030\002 \001(\004\022\r\n\005asset\030\003 \001(\t\022\036\n\003ext\030\004 \001("
  "\0132\021.vega.WithdrawExt\"=\n\013WithdrawExt\022\'\n\005e"
  "rc20\030\001 \001(\0132\026.vega.Erc20WithdrawExtH\000B\005\n\003"
  "ext\"+\n\020Erc20WithdrawExt\022\027\n\017receiverAddre"
  "ss\030\001 \001(\t\"\270\002\n\016OrderAmendment\022\027\n\007orderID\030\001"
  " \001(\tB\006\342\337\037\002X\001\022\027\n\007partyID\030\002 \001(\tB\006\342\337\037\002X\001\022\020\n"
  "\010marketID\030\003 \001(\t\022\032\n\005price\030\004 \001(\0132\013.vega.Pr"
  "ice\022\021\n\tsizeDelta\030\005 \001(\003\022\"\n\texpiresAt\030\006 \001("
  "\0132\017.vega.Timestamp\022,\n\013timeInForce\030\007 \001(\0162"
  "\027.vega.Order.TimeInForce\0221\n\014peggedOffset"
  "\030\010 \001(\0132\033.google.protobuf.Int64Value\022.\n\017p"
  "eggedReference\030\t \001(\0162\025.vega.PeggedRefere"
  "nce\"\316\002\n\017OrderSubmission\022\022\n\002id\030\001 \001(\tB\006\342\337\037"
  "\002X\000\022\030\n\010marketID\030\002 \001(\tB\006\342\337\037\002X\001\022\027\n\007partyID"
  "\030\003 \001(\tB\006\342\337\037\002X\001\022\r\n\005price\030\004 \001(\004\022\024\n\004size\030\005 "
  "\001(\004B\006\342\337\037\002\020\000\022!\n\004side\030\006 \001(\0162\n.vega.SideB\007\342"
  "\337\037\003\210\001\001\0225\n\013timeInForce\030\007 \001(\0162\027.vega.Order"
  ".TimeInForceB\007\342\337\037\003\210\001\001\022\021\n\texpiresAt\030\010 \001(\003"
  "\022\'\n\004type\030\t \001(\0162\020.vega.Order.TypeB\007\342\337\037\003\210\001"
  "\001\022\021\n\treference\030\n \001(\t\022&\n\013peggedOrder\030\013 \001("
  "\0132\021.vega.PeggedOrder\"O\n\021OrderCancellatio"
  "n\022\017\n\007orderID\030\001 \001(\t\022\020\n\010marketID\030\002 \001(\t\022\027\n\007"
  "partyID\030\003 \001(\tB\006\342\337\037\002X\001\"G\n\020NodeRegistratio"
  "n\022\026\n\006pubKey\030\001 \001(\014B\006\342\337\037\002X\001\022\033\n\013chainPubKey"
  "\030\002 \001(\014B\006\342\337\037\002X\001\"=\n\010NodeVote\022\026\n\006pubKey\030\001 \001"
  "(\014B\006\342\337\037\002X\001\022\031\n\treference\030\002 \001(\tB\006\342\337\037\002X\001\"w\n"
  "\007Account\022\n\n\002id\030\001 \001(\t\022\r\n\005owner\030\002 \001(\t\022\017\n\007b"
  "alance\030\003 \001(\004\022\r\n\005asset\030\004 \001(\t\022\020\n\010marketID\030"
  "\005 \001(\t\022\037\n\004type\030\006 \001(\0162\021.vega.AccountType\"0"
  "\n\017FinancialAmount\022\016\n\006amount\030\001 \001(\003\022\r\n\005ass"
  "et\030\002 \001(\t\"u\n\010Transfer\022\r\n\005owner\030\001 \001(\t\022%\n\006a"
  "mount\030\002 \001(\0132\025.vega.FinancialAmount\022 \n\004ty"
  "pe\030\003 \001(\0162\022.vega.TransferType\022\021\n\tminAmoun"
  "t\030\004 \001(\003\"\234\001\n\017TransferRequest\022\"\n\013fromAccou"
  "nt\030\001 \003(\0132\r.vega.Account\022 \n\ttoAccount\030\002 \003"
  "(\0132\r.vega.Account\022\016\n\006amount\030\003 \001(\004\022\021\n\tmin"
  "Amount\030\004 \001(\004\022\r\n\005asset\030\005 \001(\t\022\021\n\treference"
  "\030\006 \001(\t\"y\n\013LedgerEntry\022\023\n\013fromAccount\030\001 \001"
  "(\t\022\021\n\ttoAccount\030\002 \001(\t\022\016\n\006amount\030\003 \001(\004\022\021\n"
  "\treference\030\004 \001(\t\022\014\n\004type\030\005 \001(\t\022\021\n\ttimest"
  "amp\030\006 \001(\003\"B\n\017TransferBalance\022\036\n\007account\030"
  "\001 \001(\0132\r.vega.Account\022\017\n\007balance\030\002 \001(\004\"a\n"
  "\020TransferResponse\022$\n\ttransfers\030\001 \003(\0132\021.v"
  "ega.LedgerEntry\022\'\n\010balances\030\002 \003(\0132\025.vega"
  ".TransferBalance\"\272\001\n\014MarginLevels\022\031\n\021mai"
  "ntenanceMargin\030\001 \001(\004\022\023\n\013searchLevel\030\002 \001("
  "\004\022\025\n\rinitialMargin\030\003 \001(\004\022\036\n\026collateralRe"
  "leaseLevel\030\004 \001(\004\022\017\n\007partyID\030\005 \001(\t\022\020\n\010mar"
  "ketID\030\006 \001(\t\022\r\n\005asset\030\007 \001(\t\022\021\n\ttimestamp\030"
  "\010 \001(\003\"\352\004\n\nMarketData\022\021\n\tmarkPrice\030\001 \001(\004\022"
  "\024\n\014bestBidPrice\030\002 \001(\004\022\025\n\rbestBidVolume\030\003"
  " \001(\004\022\026\n\016bestOfferPrice\030\004 \001(\004\022\027\n\017bestOffe"
  "rVolume\030\005 \001(\004\022\032\n\022bestStaticBidPrice\030\006 \001("
  "\004\022\033\n\023bestStaticBidVolume\030\007 \001(\004\022\034\n\024bestSt"
  "aticOfferPrice\030\010 \001(\004\022\035\n\025bestStaticOfferV"
  "olume\030\t \001(\004\022\020\n\010midPrice\030\n \001(\004\022\026\n\016staticM"
  "idPrice\030\013 \001(\004\022\016\n\006market\030\014 \001(\t\022\021\n\ttimesta"
  "mp\030\r \001(\003\022\024\n\014openInterest\030\016 \001(\004\022\022\n\nauctio"
  "nEnd\030\017 \001(\003\022\024\n\014auctionStart\030\020 \001(\003\022\027\n\017indi"
  "cativePrice\030\021 \001(\004\022\030\n\020indicativeVolume\030\022 "
  "\001(\004\022&\n\013marketState\030\023 \001(\0162\021.vega.MarketSt"
  "ate\022%\n\007trigger\030\024 \001(\0162\024.vega.AuctionTrigg"
  "er\022\023\n\013targetStake\030\025 \001(\t\022\025\n\rsuppliedStake"
  "\030\026 \001(\t\022:\n\025priceMonitoringBounds\030\027 \003(\0132\033."
  "vega.PriceMonitoringBounds\"t\n\025PriceMonit"
  "oringBounds\022\025\n\rminValidPrice\030\001 \001(\004\022\025\n\rma"
  "xValidPrice\030\002 \001(\004\022-\n\007trigger\030\003 \001(\0132\034.veg"
  "a.PriceMonitoringTrigger\";\n\013ErrorDetail\022"
  "\014\n\004code\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\022\r\n\005inner\030"
  "\003 \001(\t\"s\n\013Transaction\022\021\n\tinputData\030\001 \001(\014\022"
  "\r\n\005nonce\030\002 \001(\004\022\023\n\013blockHeight\030\003 \001(\004\022\022\n\007a"
  "ddress\030\351\007 \001(\014H\000\022\021\n\006pubKey\030\352\007 \001(\014H\000B\006\n\004fr"
  "om\"7\n\tSignature\022\013\n\003sig\030\001 \001(\014\022\014\n\004algo\030\002 \001"
  "(\t\022\017\n\007version\030\003 \001(\004\"8\n\014SignedBundle\022\n\n\002t"
  "x\030\001 \001(\014\022\034\n\003sig\030\002 \001(\0132\017.vega.Signature\"O\n"
  "\rNodeSignature\022\n\n\002ID\030\001 \001(\t\022\013\n\003sig\030\002 \001(\014\022"
  "%\n\004kind\030\003 \001(\0162\027.vega.NodeSignatureKind\"."
  "\n\020NetworkParameter\022\013\n\003Key\030\001 \001(\t\022\r\n\005Value"
  "\030\002 \001(\t\"^\n\016LiquidityOrder\022(\n\treference\030\001 "
  "\001(\0162\025.vega.PeggedReference\022\022\n\nproportion"
  "\030\002 \001(\r\022\016\n\006offset\030\003 \001(\003\"\250\001\n\034LiquidityProv"
  "isionSubmission\022\030\n\010marketID\030\001 \001(\tB\006\342\337\037\002X"
  "\001\022\030\n\020commitmentAmount\030\002 \001(\004\022\013\n\003fee\030\003 \001(\t"
  "\022#\n\005Sells\030\004 \003(\0132\024.vega.LiquidityOrder\022\"\n"
  "\004Buys\030\005 \003(\0132\024.vega.LiquidityOrder\"X\n\027Liq"
  "uidityOrderReference\022\017\n\007orderID\030\001 \001(\t\022,\n"
  "\016liquidityOrder\030\002 \001(\0132\024.vega.LiquidityOr"
  "der\"\216\004\n\022LiquidityProvision\022\n\n\002id\030\001 \001(\t\022\017"
  "\n\007partyID\030\002 \001(\t\022\021\n\tcreatedAt\030\003 \001(\003\022\021\n\tup"
  "datedAt\030\004 \001(\003\022\030\n\010marketID\030\005 \001(\tB\006\342\337\037\002X\001\022"
  "\030\n\020commitmentAmount\030\006 \001(\004\022\013\n\003fee\030\007 \001(\t\022,"
  "\n\005sells\030\010 \003(\0132\035.vega.LiquidityOrderRefer"
  "ence\022+\n\004buys\030\t \003(\0132\035.vega.LiquidityOrder"
  "Reference\022\017\n\007version\030\n \001(\t\022/\n\006status\030\013 \001"
  "(\0162\037.vega.LiquidityProvision.Status\"\326\001\n\006"
  "Status\022*\n&LIQUIDITY_PROVISION_STATUS_UNS"
  "PECIFIED\020\000\022%\n!LIQUIDITY_PROVISION_STATUS"
  "_ACTIVE\020\001\022&\n\"LIQUIDITY_PROVISION_STATUS_"
  "STOPPED\020\002\022(\n$LIQUIDITY_PROVISION_STATUS_"
  "CANCELLED\020\003\022\'\n#LIQUIDITY_PROVISION_STATU"
  "S_REJECTED\020\004*9\n\004Side\022\024\n\020SIDE_UNSPECIFIED"
  "\020\000\022\014\n\010SIDE_BUY\020\001\022\r\n\tSIDE_SELL\020\002*\230\001\n\010Inte"
  "rval\022\030\n\024INTERVAL_UNSPECIFIED\020\000\022\020\n\014INTERV"
  "AL_I1M\020<\022\021\n\014INTERVAL_I5M\020\254\002\022\022\n\rINTERVAL_"
  "I15M\020\204\007\022\021\n\014INTERVAL_I1H\020\220\034\022\022\n\014INTERVAL_I"
  "6H\020\340\250\001\022\022\n\014INTERVAL_I1D\020\200\243\005*\257\001\n\013MarketSta"
  "te\022\034\n\030MARKET_STATE_UNSPECIFIED\020\000\022\033\n\027MARK"
  "ET_STATE_CONTINUOUS\020\001\022\036\n\032MARKET_STATE_BA"
  "TCH_AUCTION\020\002\022 \n\034MARKET_STATE_OPENING_AU"
  "CTION\020\003\022#\n\037MARKET_STATE_MONITORING_AUCTI"
  "ON\020\004*\243\001\n\016AuctionTrigger\022\037\n\033AUCTION_TRIGG"
  "ER_UNSPECIFIED\020\000\022\031\n\025AUCTION_TRIGGER_BATC"
  "H\020\001\022\033\n\027AUCTION_TRIGGER_OPENING\020\002\022\031\n\025AUCT"
  "ION_TRIGGER_PRICE\020\003\022\035\n\031AUCTION_TRIGGER_L"
  "IQUIDITY\020\004*\213\001\n\017PeggedReference\022 \n\034PEGGED"
  "_REFERENCE_UNSPECIFIED\020\000\022\030\n\024PEGGED_REFER"
  "ENCE_MID\020\001\022\035\n\031PEGGED_REFERENCE_BEST_BID\020"
  "\002\022\035\n\031PEGGED_REFERENCE_BEST_ASK\020\003*\200\017\n\nOrd"
  "erError\022\024\n\020ORDER_ERROR_NONE\020\000\022!\n\035ORDER_E"
  "RROR_INVALID_MARKET_ID\020\001\022 \n\034ORDER_ERROR_"
  "INVALID_ORDER_ID\020\002\022\037\n\033ORDER_ERROR_OUT_OF"
  "_SEQUENCE\020\003\022&\n\"ORDER_ERROR_INVALID_REMAI"
  "NING_SIZE\020\004\022\034\n\030ORDER_ERROR_TIME_FAILURE\020"
  "\005\022\037\n\033ORDER_ERROR_REMOVAL_FAILURE\020\006\022+\n\'OR"
  "DER_ERROR_INVALID_EXPIRATION_DATETIME\020\007\022"
  "\'\n#ORDER_ERROR_INVALID_ORDER_REFERENCE\020\010"
  "\022 \n\034ORDER_ERROR_EDIT_NOT_ALLOWED\020\t\022\035\n\031OR"
  "DER_ERROR_AMEND_FAILURE\020\n\022\031\n\025ORDER_ERROR"
  "_NOT_FOUND\020\013\022 \n\034ORDER_ERROR_INVALID_PART"
  "Y_ID\020\014\022\035\n\031ORDER_ERROR_MARKET_CLOSED\020\r\022#\n"
  "\037ORDER_ERROR_MARGIN_CHECK_FAILED\020\016\022\'\n#OR"
  "DER_ERROR_MISSING_GENERAL_ACCOUNT\020\017\022\036\n\032O"
  "RDER_ERROR_INTERNAL_ERROR\020\020\022\034\n\030ORDER_ERR"
  "OR_INVALID_SIZE\020\021\022#\n\037ORDER_ERROR_INVALID"
  "_PERSISTENCE\020\022\022\034\n\030ORDER_ERROR_INVALID_TY"
  "PE\020\023\022\034\n\030ORDER_ERROR_SELF_TRADING\020\024\022.\n*OR"
  "DER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES"
  "\020\025\022%\n!ORDER_ERROR_INCORRECT_MARKET_TYPE\020"
  "\026\022%\n!ORDER_ERROR_INVALID_TIME_IN_FORCE\020\027"
  "\022+\n\'ORDER_ERROR_GFN_ORDER_DURING_AN_AUCT"
  "ION\020\030\0223\n/ORDER_ERROR_GFA_ORDER_DURING_CO"
  "NTINUOUS_TRADING\020\031\0224\n0ORDER_ERROR_CANNOT"
  "_AMEND_TO_GTT_WITHOUT_EXPIRYAT\020\032\022)\n%ORDE"
  "R_ERROR_EXPIRYAT_BEFORE_CREATEDAT\020\033\022,\n(O"
  "RDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT\020"
  "\034\022*\n&ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_"
  "IOC\020\035\022*\n&ORDER_ERROR_CANNOT_AMEND_TO_GFA"
  "_OR_GFN\020\036\022,\n(ORDER_ERROR_CANNOT_AMEND_FR"
  "OM_GFA_OR_GFN\020\037\0224\n0ORDER_ERROR_CANNOT_SE"
  "ND_IOC_ORDER_DURING_AUCTION\020 \0224\n0ORDER_E"
  "RROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTIO"
  "N\020!\022#\n\037ORDER_ERROR_MUST_BE_LIMIT_ORDER\020\""
  "\022\"\n\036ORDER_ERROR_MUST_BE_GTT_OR_GTC\020#\022\'\n#"
  "ORDER_ERROR_WITHOUT_REFERENCE_PRICE\020$\0223\n"
  "/ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_A"
  "SK_PRICE\020%\0224\n0ORDER_ERROR_OFFSET_MUST_BE"
  "_LESS_OR_EQUAL_TO_ZERO\020&\022-\n)ORDER_ERROR_"
  "OFFSET_MUST_BE_LESS_THAN_ZERO\020\'\0227\n3ORDER"
  "_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_T"
  "O_ZERO\020(\0224\n0ORDER_ERROR_SELL_CANNOT_REFE"
  "RENCE_BEST_BID_PRICE\020)\0220\n,ORDER_ERROR_OF"
  "FSET_MUST_BE_GREATER_THAN_ZERO\020*\022*\n&ORDE"
  "R_ERROR_INSUFFICIENT_ASSET_BALANCE\020+\022E\nA"
  "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DE"
  "TAILS_ON_NON_PEGGED_ORDER\020,\022.\n*ORDER_ERR"
  "OR_UNABLE_TO_REPRICE_PEGGED_ORDER\020-*\202\001\n\013"
  "ChainStatus\022\034\n\030CHAIN_STATUS_UNSPECIFIED\020"
  "\000\022\035\n\031CHAIN_STATUS_DISCONNECTED\020\001\022\032\n\026CHAI"
  "N_STATUS_REPLAYING\020\002\022\032\n\026CHAIN_STATUS_CON"
  "NECTED\020\003*\262\002\n\013AccountType\022\034\n\030ACCOUNT_TYPE"
  "_UNSPECIFIED\020\000\022\032\n\026ACCOUNT_TYPE_INSURANCE"
  "\020\001\022\033\n\027ACCOUNT_TYPE_SETTLEMENT\020\002\022\027\n\023ACCOU"
  "NT_TYPE_MARGIN\020\003\022\030\n\024ACCOUNT_TYPE_GENERAL"
  "\020\004\022$\n ACCOUNT_TYPE_FEES_INFRASTRUCTURE\020\005"
  "\022\037\n\033ACCOUNT_TYPE_FEES_LIQUIDITY\020\006\022\033\n\027ACC"
  "OUNT_TYPE_FEES_MAKER\020\007\022\036\n\032ACCOUNT_TYPE_L"
  "OCK_WITHDRAW\020\010\022\025\n\021ACCOUNT_TYPE_BOND\020\t*\335\003"
  "\n\014TransferType\022\035\n\031TRANSFER_TYPE_UNSPECIF"
  "IED\020\000\022\026\n\022TRANSFER_TYPE_LOSS\020\001\022\025\n\021TRANSFE"
  "R_TYPE_WIN\020\002\022\027\n\023TRANSFER_TYPE_CLOSE\020\003\022\032\n"
  "\026TRANSFER_TYPE_MTM_LOSS\020\004\022\031\n\025TRANSFER_TY"
  "PE_MTM_WIN\020\005\022\034\n\030TRANSFER_TYPE_MARGIN_LOW"
  "\020\006\022\035\n\031TRANSFER_TYPE_MARGIN_HIGH\020\007\022$\n TRA"
  "NSFER_TYPE_MARGIN_CONFISCATED\020\010\022\037\n\033TRANS"
  "FER_TYPE_MAKER_FEE_PAY\020\t\022#\n\037TRANSFER_TYP"
  "E_MAKER_FEE_RECEIVE\020\n\022(\n$TRANSFER_TYPE_I"
  "NFRASTRUCTURE_FEE_PAY\020\013\022#\n\037TRANSFER_TYPE"
  "_LIQUIDITY_FEE_PAY\020\014\022\032\n\026TRANSFER_TYPE_BO"
  "ND_LOW\020\r\022\033\n\027TRANSFER_TYPE_BOND_HIGH\020\016*\205\001"
  "\n\021NodeSignatureKind\022#\n\037NODE_SIGNATURE_KI"
  "ND_UNSPECIFIED\020\000\022!\n\035NODE_SIGNATURE_KIND_"
  "ASSET_NEW\020\001\022(\n$NODE_SIGNATURE_KIND_ASSET"
  "_WITHDRAWAL\020\002B7\n\024io.vegaprotocol.vegaZ\037c"
  "ode.vegaprotocol.io/vega/protob\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_proto_2fvega_2eproto = {
  false, InitDefaults_proto_2fvega_2eproto, 
  descriptor_table_protodef_proto_2fvega_2eproto,
  "proto/vega.proto", &assign_descriptors_table_proto_2fvega_2eproto, 12398,
};

void AddDescriptors_proto_2fvega_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fwrappers_2eproto,
    ::AddDescriptors_proto_2fmarkets_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_proto_2fvega_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fvega_2eproto = []() { AddDescriptors_proto_2fvega_2eproto(); return true; }();
namespace vega {
const ::google::protobuf::EnumDescriptor* Order_TimeInForce_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[0];
}
bool Order_TimeInForce_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Order_TimeInForce Order::TIF_UNSPECIFIED;
const Order_TimeInForce Order::TIF_GTC;
const Order_TimeInForce Order::TIF_GTT;
const Order_TimeInForce Order::TIF_IOC;
const Order_TimeInForce Order::TIF_FOK;
const Order_TimeInForce Order::TIF_GFA;
const Order_TimeInForce Order::TIF_GFN;
const Order_TimeInForce Order::TimeInForce_MIN;
const Order_TimeInForce Order::TimeInForce_MAX;
const int Order::TimeInForce_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Order_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[1];
}
bool Order_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Order_Type Order::TYPE_UNSPECIFIED;
const Order_Type Order::TYPE_LIMIT;
const Order_Type Order::TYPE_MARKET;
const Order_Type Order::TYPE_NETWORK;
const Order_Type Order::Type_MIN;
const Order_Type Order::Type_MAX;
const int Order::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Order_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[2];
}
bool Order_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Order_Status Order::STATUS_INVALID;
const Order_Status Order::STATUS_ACTIVE;
const Order_Status Order::STATUS_EXPIRED;
const Order_Status Order::STATUS_CANCELLED;
const Order_Status Order::STATUS_STOPPED;
const Order_Status Order::STATUS_FILLED;
const Order_Status Order::STATUS_REJECTED;
const Order_Status Order::STATUS_PARTIALLY_FILLED;
const Order_Status Order::STATUS_PARKED;
const Order_Status Order::Status_MIN;
const Order_Status Order::Status_MAX;
const int Order::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Trade_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[3];
}
bool Trade_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Trade_Type Trade::TYPE_UNSPECIFIED;
const Trade_Type Trade::TYPE_DEFAULT;
const Trade_Type Trade::TYPE_NETWORK_CLOSE_OUT_GOOD;
const Trade_Type Trade::TYPE_NETWORK_CLOSE_OUT_BAD;
const Trade_Type Trade::Type_MIN;
const Trade_Type Trade::Type_MAX;
const int Trade::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Deposit_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[4];
}
bool Deposit_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Deposit_Status Deposit::DEPOSIT_STATUS_UNSPECIFIED;
const Deposit_Status Deposit::DEPOSIT_STATUS_OPEN;
const Deposit_Status Deposit::DEPOSIT_STATUS_CANCELLED;
const Deposit_Status Deposit::DEPOSIT_STATUS_FINALIZED;
const Deposit_Status Deposit::Status_MIN;
const Deposit_Status Deposit::Status_MAX;
const int Deposit::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Withdrawal_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[5];
}
bool Withdrawal_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Withdrawal_Status Withdrawal::WITHDRAWAL_STATUS_UNSPECIFIED;
const Withdrawal_Status Withdrawal::WITHDRAWAL_STATUS_OPEN;
const Withdrawal_Status Withdrawal::WITHDRAWAL_STATUS_CANCELLED;
const Withdrawal_Status Withdrawal::WITHDRAWAL_STATUS_FINALIZED;
const Withdrawal_Status Withdrawal::Status_MIN;
const Withdrawal_Status Withdrawal::Status_MAX;
const int Withdrawal::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LiquidityProvision_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[6];
}
bool LiquidityProvision_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LiquidityProvision_Status LiquidityProvision::LIQUIDITY_PROVISION_STATUS_UNSPECIFIED;
const LiquidityProvision_Status LiquidityProvision::LIQUIDITY_PROVISION_STATUS_ACTIVE;
const LiquidityProvision_Status LiquidityProvision::LIQUIDITY_PROVISION_STATUS_STOPPED;
const LiquidityProvision_Status LiquidityProvision::LIQUIDITY_PROVISION_STATUS_CANCELLED;
const LiquidityProvision_Status LiquidityProvision::LIQUIDITY_PROVISION_STATUS_REJECTED;
const LiquidityProvision_Status LiquidityProvision::Status_MIN;
const LiquidityProvision_Status LiquidityProvision::Status_MAX;
const int LiquidityProvision::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Side_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[7];
}
bool Side_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Interval_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[8];
}
bool Interval_IsValid(int value) {
  switch (value) {
    case 0:
    case 60:
    case 300:
    case 900:
    case 3600:
    case 21600:
    case 86400:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MarketState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[9];
}
bool MarketState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AuctionTrigger_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[10];
}
bool AuctionTrigger_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PeggedReference_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[11];
}
bool PeggedReference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderError_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[12];
}
bool OrderError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChainStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[13];
}
bool ChainStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AccountType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[14];
}
bool AccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TransferType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[15];
}
bool TransferType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NodeSignatureKind_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2fvega_2eproto);
  return file_level_enum_descriptors_proto_2fvega_2eproto[16];
}
bool NodeSignatureKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Price::InitAsDefaultInstance() {
}
class Price::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Price::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Price::Price()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Price)
}
Price::Price(const Price& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:vega.Price)
}

void Price::SharedCtor() {
  value_ = PROTOBUF_ULONGLONG(0);
}

Price::~Price() {
  // @@protoc_insertion_point(destructor:vega.Price)
  SharedDtor();
}

void Price::SharedDtor() {
}

void Price::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Price& Price::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Price_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Price::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Price)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Price::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Price*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Price::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Price)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Price)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Price)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Price::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Price)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Price)
}

::google::protobuf::uint8* Price::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Price)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Price)
  return target;
}

size_t Price::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Price)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Price::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Price)
  GOOGLE_DCHECK_NE(&from, this);
  const Price* source =
      ::google::protobuf::DynamicCastToGenerated<Price>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Price)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Price)
    MergeFrom(*source);
  }
}

void Price::MergeFrom(const Price& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Price)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Price::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Price)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Price::CopyFrom(const Price& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Price)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Price::IsInitialized() const {
  return true;
}

void Price::Swap(Price* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Price::InternalSwap(Price* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata Price::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Timestamp::InitAsDefaultInstance() {
}
class Timestamp::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timestamp::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timestamp::Timestamp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:vega.Timestamp)
}

void Timestamp::SharedCtor() {
  value_ = PROTOBUF_LONGLONG(0);
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:vega.Timestamp)
  SharedDtor();
}

void Timestamp::SharedDtor() {
}

void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Timestamp& Timestamp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Timestamp_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Timestamp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Timestamp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Timestamp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Timestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Timestamp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Timestamp)
}

::google::protobuf::uint8* Timestamp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Timestamp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timestamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Timestamp* source =
      ::google::protobuf::DynamicCastToGenerated<Timestamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Timestamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Timestamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Party::InitAsDefaultInstance() {
}
class Party::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Party::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Party::Party()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Party)
}
Party::Party(const Party& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:vega.Party)
}

void Party::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Party_proto_2fvega_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Party::~Party() {
  // @@protoc_insertion_point(destructor:vega.Party)
  SharedDtor();
}

void Party::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Party::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Party& Party::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Party_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Party::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Party)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Party::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Party*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Party.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Party::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Party)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Party.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Party)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Party)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Party::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Party)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.validator.field) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Party.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Party)
}

::google::protobuf::uint8* Party::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Party)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.validator.field) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Party.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Party)
  return target;
}

size_t Party::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Party)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.validator.field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Party::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Party)
  GOOGLE_DCHECK_NE(&from, this);
  const Party* source =
      ::google::protobuf::DynamicCastToGenerated<Party>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Party)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Party)
    MergeFrom(*source);
  }
}

void Party::MergeFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Party)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void Party::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Party::CopyFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Party::IsInitialized() const {
  return true;
}

void Party::Swap(Party* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Party::InternalSwap(Party* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Party::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RiskFactor::InitAsDefaultInstance() {
}
class RiskFactor::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RiskFactor::kMarketFieldNumber;
const int RiskFactor::kShortFieldNumber;
const int RiskFactor::kLongFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RiskFactor::RiskFactor()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.RiskFactor)
}
RiskFactor::RiskFactor(const RiskFactor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  market_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.market().size() > 0) {
    market_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  ::memcpy(&short__, &from.short__,
    static_cast<size_t>(reinterpret_cast<char*>(&long__) -
    reinterpret_cast<char*>(&short__)) + sizeof(long__));
  // @@protoc_insertion_point(copy_constructor:vega.RiskFactor)
}

void RiskFactor::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RiskFactor_proto_2fvega_2eproto.base);
  market_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&short__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&long__) -
      reinterpret_cast<char*>(&short__)) + sizeof(long__));
}

RiskFactor::~RiskFactor() {
  // @@protoc_insertion_point(destructor:vega.RiskFactor)
  SharedDtor();
}

void RiskFactor::SharedDtor() {
  market_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RiskFactor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RiskFactor& RiskFactor::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RiskFactor_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void RiskFactor::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.RiskFactor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&short__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&long__) -
      reinterpret_cast<char*>(&short__)) + sizeof(long__));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RiskFactor::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RiskFactor*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string market = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.RiskFactor.market");
        object = msg->mutable_market();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double short = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_short_(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double long = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_long_(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RiskFactor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.RiskFactor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string market = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->market().data(), static_cast<int>(this->market().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.RiskFactor.market"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double short = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &short__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double long = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.RiskFactor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.RiskFactor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RiskFactor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.RiskFactor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market = 1;
  if (this->market().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->market().data(), static_cast<int>(this->market().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.RiskFactor.market");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->market(), output);
  }

  // double short = 2;
  if (this->short_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->short_(), output);
  }

  // double long = 3;
  if (this->long_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->long_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.RiskFactor)
}

::google::protobuf::uint8* RiskFactor::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.RiskFactor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market = 1;
  if (this->market().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->market().data(), static_cast<int>(this->market().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.RiskFactor.market");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->market(), target);
  }

  // double short = 2;
  if (this->short_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->short_(), target);
  }

  // double long = 3;
  if (this->long_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->long_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.RiskFactor)
  return target;
}

size_t RiskFactor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.RiskFactor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market = 1;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->market());
  }

  // double short = 2;
  if (this->short_() != 0) {
    total_size += 1 + 8;
  }

  // double long = 3;
  if (this->long_() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RiskFactor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.RiskFactor)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskFactor* source =
      ::google::protobuf::DynamicCastToGenerated<RiskFactor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.RiskFactor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.RiskFactor)
    MergeFrom(*source);
  }
}

void RiskFactor::MergeFrom(const RiskFactor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.RiskFactor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market().size() > 0) {

    market_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  if (from.short_() != 0) {
    set_short_(from.short_());
  }
  if (from.long_() != 0) {
    set_long_(from.long_());
  }
}

void RiskFactor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.RiskFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskFactor::CopyFrom(const RiskFactor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.RiskFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskFactor::IsInitialized() const {
  return true;
}

void RiskFactor::Swap(RiskFactor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RiskFactor::InternalSwap(RiskFactor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  market_.Swap(&other->market_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(short__, other->short__);
  swap(long__, other->long__);
}

::google::protobuf::Metadata RiskFactor::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

RiskResult_RiskFactorsEntry_DoNotUse::RiskResult_RiskFactorsEntry_DoNotUse() {}
RiskResult_RiskFactorsEntry_DoNotUse::RiskResult_RiskFactorsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void RiskResult_RiskFactorsEntry_DoNotUse::MergeFrom(const RiskResult_RiskFactorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata RiskResult_RiskFactorsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[4];
}
void RiskResult_RiskFactorsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RiskResult_RiskFactorsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      RiskResult_RiskFactorsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "vega.RiskResult.RiskFactorsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse() {}
RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::MergeFrom(const RiskResult_PredictedNextRiskFactorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[5];
}
void RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      RiskResult_PredictedNextRiskFactorsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "vega.RiskResult.PredictedNextRiskFactorsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void RiskResult::InitAsDefaultInstance() {
}
class RiskResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RiskResult::kUpdatedTimestampFieldNumber;
const int RiskResult::kRiskFactorsFieldNumber;
const int RiskResult::kNextUpdateTimestampFieldNumber;
const int RiskResult::kPredictedNextRiskFactorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RiskResult::RiskResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.RiskResult)
}
RiskResult::RiskResult(const RiskResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  riskfactors_.MergeFrom(from.riskfactors_);
  predictednextriskfactors_.MergeFrom(from.predictednextriskfactors_);
  ::memcpy(&updatedtimestamp_, &from.updatedtimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&nextupdatetimestamp_) -
    reinterpret_cast<char*>(&updatedtimestamp_)) + sizeof(nextupdatetimestamp_));
  // @@protoc_insertion_point(copy_constructor:vega.RiskResult)
}

void RiskResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RiskResult_proto_2fvega_2eproto.base);
  ::memset(&updatedtimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nextupdatetimestamp_) -
      reinterpret_cast<char*>(&updatedtimestamp_)) + sizeof(nextupdatetimestamp_));
}

RiskResult::~RiskResult() {
  // @@protoc_insertion_point(destructor:vega.RiskResult)
  SharedDtor();
}

void RiskResult::SharedDtor() {
}

void RiskResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RiskResult& RiskResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RiskResult_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void RiskResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.RiskResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  riskfactors_.Clear();
  predictednextriskfactors_.Clear();
  ::memset(&updatedtimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nextupdatetimestamp_) -
      reinterpret_cast<char*>(&updatedtimestamp_)) + sizeof(nextupdatetimestamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RiskResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RiskResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 updatedTimestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_updatedtimestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<string, .vega.RiskFactor> riskFactors = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::vega::RiskResult_RiskFactorsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->riskfactors_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // int64 nextUpdateTimestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_nextupdatetimestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<string, .vega.RiskFactor> predictedNextRiskFactors = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->predictednextriskfactors_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RiskResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.RiskResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 updatedTimestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatedtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .vega.RiskFactor> riskFactors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          RiskResult_RiskFactorsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              RiskResult_RiskFactorsEntry_DoNotUse,
              ::std::string, ::vega::RiskFactor,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::vega::RiskFactor > > parser(&riskfactors_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.RiskResult.RiskFactorsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nextUpdateTimestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nextupdatetimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .vega.RiskFactor> predictedNextRiskFactors = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              RiskResult_PredictedNextRiskFactorsEntry_DoNotUse,
              ::std::string, ::vega::RiskFactor,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::vega::RiskFactor > > parser(&predictednextriskfactors_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.RiskResult.PredictedNextRiskFactorsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.RiskResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.RiskResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RiskResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.RiskResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 updatedTimestamp = 1;
  if (this->updatedtimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->updatedtimestamp(), output);
  }

  // map<string, .vega.RiskFactor> riskFactors = 2;
  if (!this->riskfactors().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vega.RiskResult.RiskFactorsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->riskfactors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->riskfactors().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::const_iterator
          it = this->riskfactors().begin();
          it != this->riskfactors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RiskResult_RiskFactorsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(riskfactors_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<RiskResult_RiskFactorsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::const_iterator
          it = this->riskfactors().begin();
          it != this->riskfactors().end(); ++it) {
        entry.reset(riskfactors_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 nextUpdateTimestamp = 3;
  if (this->nextupdatetimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->nextupdatetimestamp(), output);
  }

  // map<string, .vega.RiskFactor> predictedNextRiskFactors = 4;
  if (!this->predictednextriskfactors().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vega.RiskResult.PredictedNextRiskFactorsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->predictednextriskfactors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->predictednextriskfactors().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::const_iterator
          it = this->predictednextriskfactors().begin();
          it != this->predictednextriskfactors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RiskResult_PredictedNextRiskFactorsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(predictednextriskfactors_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<RiskResult_PredictedNextRiskFactorsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::const_iterator
          it = this->predictednextriskfactors().begin();
          it != this->predictednextriskfactors().end(); ++it) {
        entry.reset(predictednextriskfactors_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.RiskResult)
}

::google::protobuf::uint8* RiskResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.RiskResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 updatedTimestamp = 1;
  if (this->updatedtimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->updatedtimestamp(), target);
  }

  // map<string, .vega.RiskFactor> riskFactors = 2;
  if (!this->riskfactors().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vega.RiskResult.RiskFactorsEntry.key");
      }
    };

    if (false &&
        this->riskfactors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->riskfactors().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::const_iterator
          it = this->riskfactors().begin();
          it != this->riskfactors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RiskResult_RiskFactorsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(riskfactors_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<RiskResult_RiskFactorsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::const_iterator
          it = this->riskfactors().begin();
          it != this->riskfactors().end(); ++it) {
        entry.reset(riskfactors_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 nextUpdateTimestamp = 3;
  if (this->nextupdatetimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->nextupdatetimestamp(), target);
  }

  // map<string, .vega.RiskFactor> predictedNextRiskFactors = 4;
  if (!this->predictednextriskfactors().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "vega.RiskResult.PredictedNextRiskFactorsEntry.key");
      }
    };

    if (false &&
        this->predictednextriskfactors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->predictednextriskfactors().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::const_iterator
          it = this->predictednextriskfactors().begin();
          it != this->predictednextriskfactors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RiskResult_PredictedNextRiskFactorsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(predictednextriskfactors_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<RiskResult_PredictedNextRiskFactorsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::const_iterator
          it = this->predictednextriskfactors().begin();
          it != this->predictednextriskfactors().end(); ++it) {
        entry.reset(predictednextriskfactors_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.RiskResult)
  return target;
}

size_t RiskResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.RiskResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .vega.RiskFactor> riskFactors = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->riskfactors_size());
  {
    ::std::unique_ptr<RiskResult_RiskFactorsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::const_iterator
        it = this->riskfactors().begin();
        it != this->riskfactors().end(); ++it) {
      entry.reset(riskfactors_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .vega.RiskFactor> predictedNextRiskFactors = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->predictednextriskfactors_size());
  {
    ::std::unique_ptr<RiskResult_PredictedNextRiskFactorsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::vega::RiskFactor >::const_iterator
        it = this->predictednextriskfactors().begin();
        it != this->predictednextriskfactors().end(); ++it) {
      entry.reset(predictednextriskfactors_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int64 updatedTimestamp = 1;
  if (this->updatedtimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updatedtimestamp());
  }

  // int64 nextUpdateTimestamp = 3;
  if (this->nextupdatetimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nextupdatetimestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RiskResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.RiskResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskResult* source =
      ::google::protobuf::DynamicCastToGenerated<RiskResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.RiskResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.RiskResult)
    MergeFrom(*source);
  }
}

void RiskResult::MergeFrom(const RiskResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.RiskResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  riskfactors_.MergeFrom(from.riskfactors_);
  predictednextriskfactors_.MergeFrom(from.predictednextriskfactors_);
  if (from.updatedtimestamp() != 0) {
    set_updatedtimestamp(from.updatedtimestamp());
  }
  if (from.nextupdatetimestamp() != 0) {
    set_nextupdatetimestamp(from.nextupdatetimestamp());
  }
}

void RiskResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.RiskResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskResult::CopyFrom(const RiskResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.RiskResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskResult::IsInitialized() const {
  return true;
}

void RiskResult::Swap(RiskResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RiskResult::InternalSwap(RiskResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  riskfactors_.Swap(&other->riskfactors_);
  predictednextriskfactors_.Swap(&other->predictednextriskfactors_);
  swap(updatedtimestamp_, other->updatedtimestamp_);
  swap(nextupdatetimestamp_, other->nextupdatetimestamp_);
}

::google::protobuf::Metadata RiskResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PeggedOrder::InitAsDefaultInstance() {
}
class PeggedOrder::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeggedOrder::kReferenceFieldNumber;
const int PeggedOrder::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeggedOrder::PeggedOrder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.PeggedOrder)
}
PeggedOrder::PeggedOrder(const PeggedOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&reference_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(reference_));
  // @@protoc_insertion_point(copy_constructor:vega.PeggedOrder)
}

void PeggedOrder::SharedCtor() {
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(reference_));
}

PeggedOrder::~PeggedOrder() {
  // @@protoc_insertion_point(destructor:vega.PeggedOrder)
  SharedDtor();
}

void PeggedOrder::SharedDtor() {
}

void PeggedOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeggedOrder& PeggedOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PeggedOrder_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void PeggedOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PeggedOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(reference_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeggedOrder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PeggedOrder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.PeggedReference reference = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_reference(static_cast<::vega::PeggedReference>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 offset = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeggedOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.PeggedOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.PeggedReference reference = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reference(static_cast< ::vega::PeggedReference >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.PeggedOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.PeggedOrder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeggedOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.PeggedOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.PeggedReference reference = 1;
  if (this->reference() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reference(), output);
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.PeggedOrder)
}

::google::protobuf::uint8* PeggedOrder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PeggedOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.PeggedReference reference = 1;
  if (this->reference() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reference(), target);
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PeggedOrder)
  return target;
}

size_t PeggedOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PeggedOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  // .vega.PeggedReference reference = 1;
  if (this->reference() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reference());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeggedOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PeggedOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const PeggedOrder* source =
      ::google::protobuf::DynamicCastToGenerated<PeggedOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PeggedOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PeggedOrder)
    MergeFrom(*source);
  }
}

void PeggedOrder::MergeFrom(const PeggedOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PeggedOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.reference() != 0) {
    set_reference(from.reference());
  }
}

void PeggedOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PeggedOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeggedOrder::CopyFrom(const PeggedOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PeggedOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeggedOrder::IsInitialized() const {
  return true;
}

void PeggedOrder::Swap(PeggedOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeggedOrder::InternalSwap(PeggedOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(offset_, other->offset_);
  swap(reference_, other->reference_);
}

::google::protobuf::Metadata PeggedOrder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Order::InitAsDefaultInstance() {
  ::vega::_Order_default_instance_._instance.get_mutable()->peggedorder_ = const_cast< ::vega::PeggedOrder*>(
      ::vega::PeggedOrder::internal_default_instance());
}
class Order::HasBitSetters {
 public:
  static const ::vega::PeggedOrder& peggedorder(const Order* msg);
};

const ::vega::PeggedOrder&
Order::HasBitSetters::peggedorder(const Order* msg) {
  return *msg->peggedorder_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Order::kIdFieldNumber;
const int Order::kMarketIDFieldNumber;
const int Order::kPartyIDFieldNumber;
const int Order::kSideFieldNumber;
const int Order::kPriceFieldNumber;
const int Order::kSizeFieldNumber;
const int Order::kRemainingFieldNumber;
const int Order::kTimeInForceFieldNumber;
const int Order::kTypeFieldNumber;
const int Order::kCreatedAtFieldNumber;
const int Order::kStatusFieldNumber;
const int Order::kExpiresAtFieldNumber;
const int Order::kReferenceFieldNumber;
const int Order::kReasonFieldNumber;
const int Order::kUpdatedAtFieldNumber;
const int Order::kVersionFieldNumber;
const int Order::kBatchIDFieldNumber;
const int Order::kPeggedOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Order::Order()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Order)
}
Order::Order(const Order& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference().size() > 0) {
    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.has_peggedorder()) {
    peggedorder_ = new ::vega::PeggedOrder(*from.peggedorder_);
  } else {
    peggedorder_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&price_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:vega.Order)
}

void Order::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Order_proto_2fvega_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&peggedorder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&peggedorder_)) + sizeof(reason_));
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:vega.Order)
  SharedDtor();
}

void Order::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peggedorder_;
}

void Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Order& Order::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Order_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Order)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && peggedorder_ != nullptr) {
    delete peggedorder_;
  }
  peggedorder_ = nullptr;
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&price_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Order::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Order*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Order.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string marketID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Order.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string partyID = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Order.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.Side side = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_side(static_cast<::vega::Side>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 price = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_price(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 size = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 remaining = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.Order.TimeInForce timeInForce = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_timeinforce(static_cast<::vega::Order_TimeInForce>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.Order.Type type = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::vega::Order_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 createdAt = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_createdat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.Order.Status status = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::vega::Order_Status>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 expiresAt = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_expiresat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string reference = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Order.reference");
        object = msg->mutable_reference();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.OrderError reason = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_reason(static_cast<::vega::OrderError>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 updatedAt = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_updatedat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 version = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 batchID = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_batchid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.PeggedOrder peggedOrder = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::PeggedOrder::_InternalParse;
        object = msg->mutable_peggedorder();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Order)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Order.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string marketID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Order.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Order.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Side side = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side(static_cast< ::vega::Side >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 price = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 remaining = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Order.TimeInForce timeInForce = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_timeinforce(static_cast< ::vega::Order_TimeInForce >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Order.Type type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::vega::Order_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 createdAt = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createdat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Order.Status status = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::vega::Order_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 expiresAt = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiresat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference().data(), static_cast<int>(this->reference().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Order.reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.OrderError reason = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::vega::OrderError >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 updatedAt = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatedat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 batchID = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.PeggedOrder peggedOrder = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peggedorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Order)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Order)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Order)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Order.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Order.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->marketid(), output);
  }

  // string partyID = 3;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Order.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->partyid(), output);
  }

  // .vega.Side side = 4;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->side(), output);
  }

  // uint64 price = 5;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->price(), output);
  }

  // uint64 size = 6;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->size(), output);
  }

  // uint64 remaining = 7;
  if (this->remaining() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->remaining(), output);
  }

  // .vega.Order.TimeInForce timeInForce = 8;
  if (this->timeinforce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->timeinforce(), output);
  }

  // .vega.Order.Type type = 9;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // int64 createdAt = 10;
  if (this->createdat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->createdat(), output);
  }

  // .vega.Order.Status status = 11;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->status(), output);
  }

  // int64 expiresAt = 12;
  if (this->expiresat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->expiresat(), output);
  }

  // string reference = 13;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Order.reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->reference(), output);
  }

  // .vega.OrderError reason = 14;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->reason(), output);
  }

  // int64 updatedAt = 15;
  if (this->updatedat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->updatedat(), output);
  }

  // uint64 version = 16;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->version(), output);
  }

  // uint64 batchID = 17;
  if (this->batchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->batchid(), output);
  }

  // .vega.PeggedOrder peggedOrder = 18;
  if (this->has_peggedorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::peggedorder(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Order)
}

::google::protobuf::uint8* Order::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Order)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Order.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Order.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->marketid(), target);
  }

  // string partyID = 3;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Order.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->partyid(), target);
  }

  // .vega.Side side = 4;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->side(), target);
  }

  // uint64 price = 5;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->price(), target);
  }

  // uint64 size = 6;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->size(), target);
  }

  // uint64 remaining = 7;
  if (this->remaining() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->remaining(), target);
  }

  // .vega.Order.TimeInForce timeInForce = 8;
  if (this->timeinforce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->timeinforce(), target);
  }

  // .vega.Order.Type type = 9;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // int64 createdAt = 10;
  if (this->createdat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->createdat(), target);
  }

  // .vega.Order.Status status = 11;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->status(), target);
  }

  // int64 expiresAt = 12;
  if (this->expiresat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->expiresat(), target);
  }

  // string reference = 13;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Order.reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->reference(), target);
  }

  // .vega.OrderError reason = 14;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->reason(), target);
  }

  // int64 updatedAt = 15;
  if (this->updatedat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->updatedat(), target);
  }

  // uint64 version = 16;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->version(), target);
  }

  // uint64 batchID = 17;
  if (this->batchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->batchid(), target);
  }

  // .vega.PeggedOrder peggedOrder = 18;
  if (this->has_peggedorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::peggedorder(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Order)
  return target;
}

size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Order)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string partyID = 3;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string reference = 13;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference());
  }

  // .vega.PeggedOrder peggedOrder = 18;
  if (this->has_peggedorder()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peggedorder_);
  }

  // uint64 price = 5;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->price());
  }

  // uint64 size = 6;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // .vega.Side side = 4;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
  }

  // .vega.Order.TimeInForce timeInForce = 8;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
  }

  // uint64 remaining = 7;
  if (this->remaining() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->remaining());
  }

  // int64 createdAt = 10;
  if (this->createdat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->createdat());
  }

  // .vega.Order.Type type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .vega.Order.Status status = 11;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // int64 expiresAt = 12;
  if (this->expiresat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expiresat());
  }

  // int64 updatedAt = 15;
  if (this->updatedat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updatedat());
  }

  // uint64 version = 16;
  if (this->version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // uint64 batchID = 17;
  if (this->batchid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->batchid());
  }

  // .vega.OrderError reason = 14;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Order::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Order)
  GOOGLE_DCHECK_NE(&from, this);
  const Order* source =
      ::google::protobuf::DynamicCastToGenerated<Order>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Order)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Order)
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.has_peggedorder()) {
    mutable_peggedorder()->::vega::PeggedOrder::MergeFrom(from.peggedorder());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.timeinforce() != 0) {
    set_timeinforce(from.timeinforce());
  }
  if (from.remaining() != 0) {
    set_remaining(from.remaining());
  }
  if (from.createdat() != 0) {
    set_createdat(from.createdat());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.expiresat() != 0) {
    set_expiresat(from.expiresat());
  }
  if (from.updatedat() != 0) {
    set_updatedat(from.updatedat());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.batchid() != 0) {
    set_batchid(from.batchid());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void Order::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  return true;
}

void Order::Swap(Order* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Order::InternalSwap(Order* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_.Swap(&other->reference_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(peggedorder_, other->peggedorder_);
  swap(price_, other->price_);
  swap(size_, other->size_);
  swap(side_, other->side_);
  swap(timeinforce_, other->timeinforce_);
  swap(remaining_, other->remaining_);
  swap(createdat_, other->createdat_);
  swap(type_, other->type_);
  swap(status_, other->status_);
  swap(expiresat_, other->expiresat_);
  swap(updatedat_, other->updatedat_);
  swap(version_, other->version_);
  swap(batchid_, other->batchid_);
  swap(reason_, other->reason_);
}

::google::protobuf::Metadata Order::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderCancellationConfirmation::InitAsDefaultInstance() {
  ::vega::_OrderCancellationConfirmation_default_instance_._instance.get_mutable()->order_ = const_cast< ::vega::Order*>(
      ::vega::Order::internal_default_instance());
}
class OrderCancellationConfirmation::HasBitSetters {
 public:
  static const ::vega::Order& order(const OrderCancellationConfirmation* msg);
};

const ::vega::Order&
OrderCancellationConfirmation::HasBitSetters::order(const OrderCancellationConfirmation* msg) {
  return *msg->order_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderCancellationConfirmation::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderCancellationConfirmation::OrderCancellationConfirmation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.OrderCancellationConfirmation)
}
OrderCancellationConfirmation::OrderCancellationConfirmation(const OrderCancellationConfirmation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.OrderCancellationConfirmation)
}

void OrderCancellationConfirmation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderCancellationConfirmation_proto_2fvega_2eproto.base);
  order_ = nullptr;
}

OrderCancellationConfirmation::~OrderCancellationConfirmation() {
  // @@protoc_insertion_point(destructor:vega.OrderCancellationConfirmation)
  SharedDtor();
}

void OrderCancellationConfirmation::SharedDtor() {
  if (this != internal_default_instance()) delete order_;
}

void OrderCancellationConfirmation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderCancellationConfirmation& OrderCancellationConfirmation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderCancellationConfirmation_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void OrderCancellationConfirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.OrderCancellationConfirmation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderCancellationConfirmation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderCancellationConfirmation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Order::_InternalParse;
        object = msg->mutable_order();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderCancellationConfirmation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.OrderCancellationConfirmation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Order order = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.OrderCancellationConfirmation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.OrderCancellationConfirmation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderCancellationConfirmation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.OrderCancellationConfirmation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::order(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.OrderCancellationConfirmation)
}

::google::protobuf::uint8* OrderCancellationConfirmation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.OrderCancellationConfirmation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::order(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.OrderCancellationConfirmation)
  return target;
}

size_t OrderCancellationConfirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.OrderCancellationConfirmation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Order order = 1;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *order_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderCancellationConfirmation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.OrderCancellationConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderCancellationConfirmation* source =
      ::google::protobuf::DynamicCastToGenerated<OrderCancellationConfirmation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.OrderCancellationConfirmation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.OrderCancellationConfirmation)
    MergeFrom(*source);
  }
}

void OrderCancellationConfirmation::MergeFrom(const OrderCancellationConfirmation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.OrderCancellationConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    mutable_order()->::vega::Order::MergeFrom(from.order());
  }
}

void OrderCancellationConfirmation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.OrderCancellationConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCancellationConfirmation::CopyFrom(const OrderCancellationConfirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.OrderCancellationConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCancellationConfirmation::IsInitialized() const {
  return true;
}

void OrderCancellationConfirmation::Swap(OrderCancellationConfirmation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderCancellationConfirmation::InternalSwap(OrderCancellationConfirmation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::google::protobuf::Metadata OrderCancellationConfirmation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderConfirmation::InitAsDefaultInstance() {
  ::vega::_OrderConfirmation_default_instance_._instance.get_mutable()->order_ = const_cast< ::vega::Order*>(
      ::vega::Order::internal_default_instance());
}
class OrderConfirmation::HasBitSetters {
 public:
  static const ::vega::Order& order(const OrderConfirmation* msg);
};

const ::vega::Order&
OrderConfirmation::HasBitSetters::order(const OrderConfirmation* msg) {
  return *msg->order_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderConfirmation::kOrderFieldNumber;
const int OrderConfirmation::kTradesFieldNumber;
const int OrderConfirmation::kPassiveOrdersAffectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderConfirmation::OrderConfirmation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.OrderConfirmation)
}
OrderConfirmation::OrderConfirmation(const OrderConfirmation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      trades_(from.trades_),
      passiveordersaffected_(from.passiveordersaffected_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.OrderConfirmation)
}

void OrderConfirmation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderConfirmation_proto_2fvega_2eproto.base);
  order_ = nullptr;
}

OrderConfirmation::~OrderConfirmation() {
  // @@protoc_insertion_point(destructor:vega.OrderConfirmation)
  SharedDtor();
}

void OrderConfirmation::SharedDtor() {
  if (this != internal_default_instance()) delete order_;
}

void OrderConfirmation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderConfirmation& OrderConfirmation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderConfirmation_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void OrderConfirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.OrderConfirmation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  passiveordersaffected_.Clear();
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderConfirmation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderConfirmation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Order::_InternalParse;
        object = msg->mutable_order();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .vega.Trade trades = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Trade::_InternalParse;
          object = msg->add_trades();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .vega.Order passiveOrdersAffected = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Order::_InternalParse;
          object = msg->add_passiveordersaffected();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderConfirmation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.OrderConfirmation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Order order = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.Trade trades = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.Order passiveOrdersAffected = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_passiveordersaffected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.OrderConfirmation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.OrderConfirmation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderConfirmation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.OrderConfirmation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::order(this), output);
  }

  // repeated .vega.Trade trades = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->trades(static_cast<int>(i)),
      output);
  }

  // repeated .vega.Order passiveOrdersAffected = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->passiveordersaffected_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->passiveordersaffected(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.OrderConfirmation)
}

::google::protobuf::uint8* OrderConfirmation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.OrderConfirmation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::order(this), target);
  }

  // repeated .vega.Trade trades = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trades(static_cast<int>(i)), target);
  }

  // repeated .vega.Order passiveOrdersAffected = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->passiveordersaffected_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->passiveordersaffected(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.OrderConfirmation)
  return target;
}

size_t OrderConfirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.OrderConfirmation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trades_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trades(static_cast<int>(i)));
    }
  }

  // repeated .vega.Order passiveOrdersAffected = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->passiveordersaffected_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->passiveordersaffected(static_cast<int>(i)));
    }
  }

  // .vega.Order order = 1;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *order_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderConfirmation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.OrderConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderConfirmation* source =
      ::google::protobuf::DynamicCastToGenerated<OrderConfirmation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.OrderConfirmation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.OrderConfirmation)
    MergeFrom(*source);
  }
}

void OrderConfirmation::MergeFrom(const OrderConfirmation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.OrderConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
  passiveordersaffected_.MergeFrom(from.passiveordersaffected_);
  if (from.has_order()) {
    mutable_order()->::vega::Order::MergeFrom(from.order());
  }
}

void OrderConfirmation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.OrderConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderConfirmation::CopyFrom(const OrderConfirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.OrderConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderConfirmation::IsInitialized() const {
  return true;
}

void OrderConfirmation::Swap(OrderConfirmation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderConfirmation::InternalSwap(OrderConfirmation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&trades_)->InternalSwap(CastToBase(&other->trades_));
  CastToBase(&passiveordersaffected_)->InternalSwap(CastToBase(&other->passiveordersaffected_));
  swap(order_, other->order_);
}

::google::protobuf::Metadata OrderConfirmation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AuctionIndicativeState::InitAsDefaultInstance() {
}
class AuctionIndicativeState::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuctionIndicativeState::kMarketIDFieldNumber;
const int AuctionIndicativeState::kIndicativePriceFieldNumber;
const int AuctionIndicativeState::kIndicativeVolumeFieldNumber;
const int AuctionIndicativeState::kAuctionStartFieldNumber;
const int AuctionIndicativeState::kAuctionEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuctionIndicativeState::AuctionIndicativeState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.AuctionIndicativeState)
}
AuctionIndicativeState::AuctionIndicativeState(const AuctionIndicativeState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  ::memcpy(&indicativeprice_, &from.indicativeprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&auctionend_) -
    reinterpret_cast<char*>(&indicativeprice_)) + sizeof(auctionend_));
  // @@protoc_insertion_point(copy_constructor:vega.AuctionIndicativeState)
}

void AuctionIndicativeState::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AuctionIndicativeState_proto_2fvega_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&indicativeprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auctionend_) -
      reinterpret_cast<char*>(&indicativeprice_)) + sizeof(auctionend_));
}

AuctionIndicativeState::~AuctionIndicativeState() {
  // @@protoc_insertion_point(destructor:vega.AuctionIndicativeState)
  SharedDtor();
}

void AuctionIndicativeState::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuctionIndicativeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuctionIndicativeState& AuctionIndicativeState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AuctionIndicativeState_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void AuctionIndicativeState::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.AuctionIndicativeState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&indicativeprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auctionend_) -
      reinterpret_cast<char*>(&indicativeprice_)) + sizeof(auctionend_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AuctionIndicativeState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AuctionIndicativeState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.AuctionIndicativeState.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 indicativePrice = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_indicativeprice(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 indicativeVolume = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_indicativevolume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 auctionStart = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_auctionstart(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 auctionEnd = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_auctionend(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AuctionIndicativeState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.AuctionIndicativeState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.AuctionIndicativeState.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 indicativePrice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &indicativeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 indicativeVolume = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &indicativevolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 auctionStart = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &auctionstart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 auctionEnd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &auctionend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.AuctionIndicativeState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.AuctionIndicativeState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AuctionIndicativeState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.AuctionIndicativeState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.AuctionIndicativeState.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // uint64 indicativePrice = 2;
  if (this->indicativeprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->indicativeprice(), output);
  }

  // uint64 indicativeVolume = 3;
  if (this->indicativevolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->indicativevolume(), output);
  }

  // int64 auctionStart = 4;
  if (this->auctionstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->auctionstart(), output);
  }

  // int64 auctionEnd = 5;
  if (this->auctionend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->auctionend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.AuctionIndicativeState)
}

::google::protobuf::uint8* AuctionIndicativeState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.AuctionIndicativeState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.AuctionIndicativeState.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // uint64 indicativePrice = 2;
  if (this->indicativeprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->indicativeprice(), target);
  }

  // uint64 indicativeVolume = 3;
  if (this->indicativevolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->indicativevolume(), target);
  }

  // int64 auctionStart = 4;
  if (this->auctionstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->auctionstart(), target);
  }

  // int64 auctionEnd = 5;
  if (this->auctionend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->auctionend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.AuctionIndicativeState)
  return target;
}

size_t AuctionIndicativeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.AuctionIndicativeState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // uint64 indicativePrice = 2;
  if (this->indicativeprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->indicativeprice());
  }

  // uint64 indicativeVolume = 3;
  if (this->indicativevolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->indicativevolume());
  }

  // int64 auctionStart = 4;
  if (this->auctionstart() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->auctionstart());
  }

  // int64 auctionEnd = 5;
  if (this->auctionend() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->auctionend());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuctionIndicativeState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.AuctionIndicativeState)
  GOOGLE_DCHECK_NE(&from, this);
  const AuctionIndicativeState* source =
      ::google::protobuf::DynamicCastToGenerated<AuctionIndicativeState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.AuctionIndicativeState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.AuctionIndicativeState)
    MergeFrom(*source);
  }
}

void AuctionIndicativeState::MergeFrom(const AuctionIndicativeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.AuctionIndicativeState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.indicativeprice() != 0) {
    set_indicativeprice(from.indicativeprice());
  }
  if (from.indicativevolume() != 0) {
    set_indicativevolume(from.indicativevolume());
  }
  if (from.auctionstart() != 0) {
    set_auctionstart(from.auctionstart());
  }
  if (from.auctionend() != 0) {
    set_auctionend(from.auctionend());
  }
}

void AuctionIndicativeState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.AuctionIndicativeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionIndicativeState::CopyFrom(const AuctionIndicativeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.AuctionIndicativeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionIndicativeState::IsInitialized() const {
  return true;
}

void AuctionIndicativeState::Swap(AuctionIndicativeState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuctionIndicativeState::InternalSwap(AuctionIndicativeState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(indicativeprice_, other->indicativeprice_);
  swap(indicativevolume_, other->indicativevolume_);
  swap(auctionstart_, other->auctionstart_);
  swap(auctionend_, other->auctionend_);
}

::google::protobuf::Metadata AuctionIndicativeState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Trade::InitAsDefaultInstance() {
  ::vega::_Trade_default_instance_._instance.get_mutable()->buyerfee_ = const_cast< ::vega::Fee*>(
      ::vega::Fee::internal_default_instance());
  ::vega::_Trade_default_instance_._instance.get_mutable()->sellerfee_ = const_cast< ::vega::Fee*>(
      ::vega::Fee::internal_default_instance());
}
class Trade::HasBitSetters {
 public:
  static const ::vega::Fee& buyerfee(const Trade* msg);
  static const ::vega::Fee& sellerfee(const Trade* msg);
};

const ::vega::Fee&
Trade::HasBitSetters::buyerfee(const Trade* msg) {
  return *msg->buyerfee_;
}
const ::vega::Fee&
Trade::HasBitSetters::sellerfee(const Trade* msg) {
  return *msg->sellerfee_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trade::kIdFieldNumber;
const int Trade::kMarketIDFieldNumber;
const int Trade::kPriceFieldNumber;
const int Trade::kSizeFieldNumber;
const int Trade::kBuyerFieldNumber;
const int Trade::kSellerFieldNumber;
const int Trade::kAggressorFieldNumber;
const int Trade::kBuyOrderFieldNumber;
const int Trade::kSellOrderFieldNumber;
const int Trade::kTimestampFieldNumber;
const int Trade::kTypeFieldNumber;
const int Trade::kBuyerFeeFieldNumber;
const int Trade::kSellerFeeFieldNumber;
const int Trade::kBuyerAuctionBatchFieldNumber;
const int Trade::kSellerAuctionBatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trade::Trade()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Trade)
}
Trade::Trade(const Trade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  buyer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.buyer().size() > 0) {
    buyer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyer_);
  }
  seller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.seller().size() > 0) {
    seller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seller_);
  }
  buyorder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.buyorder().size() > 0) {
    buyorder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyorder_);
  }
  sellorder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sellorder().size() > 0) {
    sellorder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sellorder_);
  }
  if (from.has_buyerfee()) {
    buyerfee_ = new ::vega::Fee(*from.buyerfee_);
  } else {
    buyerfee_ = nullptr;
  }
  if (from.has_sellerfee()) {
    sellerfee_ = new ::vega::Fee(*from.sellerfee_);
  } else {
    sellerfee_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&sellerauctionbatch_) -
    reinterpret_cast<char*>(&price_)) + sizeof(sellerauctionbatch_));
  // @@protoc_insertion_point(copy_constructor:vega.Trade)
}

void Trade::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Trade_proto_2fvega_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyorder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sellorder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&buyerfee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sellerauctionbatch_) -
      reinterpret_cast<char*>(&buyerfee_)) + sizeof(sellerauctionbatch_));
}

Trade::~Trade() {
  // @@protoc_insertion_point(destructor:vega.Trade)
  SharedDtor();
}

void Trade::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seller_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyorder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sellorder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete buyerfee_;
  if (this != internal_default_instance()) delete sellerfee_;
}

void Trade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trade& Trade::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Trade_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seller_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyorder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sellorder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && buyerfee_ != nullptr) {
    delete buyerfee_;
  }
  buyerfee_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sellerfee_ != nullptr) {
    delete sellerfee_;
  }
  sellerfee_ = nullptr;
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sellerauctionbatch_) -
      reinterpret_cast<char*>(&price_)) + sizeof(sellerauctionbatch_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Trade::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Trade*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Trade.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string marketID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Trade.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 price = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_price(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 size = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string buyer = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Trade.buyer");
        object = msg->mutable_buyer();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string seller = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Trade.seller");
        object = msg->mutable_seller();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.Side aggressor = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_aggressor(static_cast<::vega::Side>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string buyOrder = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Trade.buyOrder");
        object = msg->mutable_buyorder();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string sellOrder = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Trade.sellOrder");
        object = msg->mutable_sellorder();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 timestamp = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.Trade.Type type = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::vega::Trade_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.Fee buyerFee = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Fee::_InternalParse;
        object = msg->mutable_buyerfee();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.Fee sellerFee = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Fee::_InternalParse;
        object = msg->mutable_sellerfee();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint64 buyerAuctionBatch = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_buyerauctionbatch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 sellerAuctionBatch = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_sellerauctionbatch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Trade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Trade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Trade.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string marketID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Trade.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string buyer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->buyer().data(), static_cast<int>(this->buyer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Trade.buyer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string seller = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seller()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->seller().data(), static_cast<int>(this->seller().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Trade.seller"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Side aggressor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_aggressor(static_cast< ::vega::Side >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string buyOrder = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyorder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->buyorder().data(), static_cast<int>(this->buyorder().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Trade.buyOrder"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sellOrder = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sellorder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sellorder().data(), static_cast<int>(this->sellorder().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Trade.sellOrder"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Trade.Type type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::vega::Trade_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Fee buyerFee = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_buyerfee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Fee sellerFee = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sellerfee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 buyerAuctionBatch = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buyerauctionbatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sellerAuctionBatch = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sellerauctionbatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Trade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Trade)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Trade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->marketid(), output);
  }

  // uint64 price = 3;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->price(), output);
  }

  // uint64 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->size(), output);
  }

  // string buyer = 5;
  if (this->buyer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buyer().data(), static_cast<int>(this->buyer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.buyer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->buyer(), output);
  }

  // string seller = 6;
  if (this->seller().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seller().data(), static_cast<int>(this->seller().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.seller");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->seller(), output);
  }

  // .vega.Side aggressor = 7;
  if (this->aggressor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->aggressor(), output);
  }

  // string buyOrder = 8;
  if (this->buyorder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buyorder().data(), static_cast<int>(this->buyorder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.buyOrder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->buyorder(), output);
  }

  // string sellOrder = 9;
  if (this->sellorder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sellorder().data(), static_cast<int>(this->sellorder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.sellOrder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sellorder(), output);
  }

  // int64 timestamp = 10;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->timestamp(), output);
  }

  // .vega.Trade.Type type = 11;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->type(), output);
  }

  // .vega.Fee buyerFee = 12;
  if (this->has_buyerfee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::buyerfee(this), output);
  }

  // .vega.Fee sellerFee = 13;
  if (this->has_sellerfee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::sellerfee(this), output);
  }

  // uint64 buyerAuctionBatch = 14;
  if (this->buyerauctionbatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->buyerauctionbatch(), output);
  }

  // uint64 sellerAuctionBatch = 15;
  if (this->sellerauctionbatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->sellerauctionbatch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Trade)
}

::google::protobuf::uint8* Trade::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->marketid(), target);
  }

  // uint64 price = 3;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->price(), target);
  }

  // uint64 size = 4;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->size(), target);
  }

  // string buyer = 5;
  if (this->buyer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buyer().data(), static_cast<int>(this->buyer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.buyer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->buyer(), target);
  }

  // string seller = 6;
  if (this->seller().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seller().data(), static_cast<int>(this->seller().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.seller");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->seller(), target);
  }

  // .vega.Side aggressor = 7;
  if (this->aggressor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->aggressor(), target);
  }

  // string buyOrder = 8;
  if (this->buyorder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buyorder().data(), static_cast<int>(this->buyorder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.buyOrder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->buyorder(), target);
  }

  // string sellOrder = 9;
  if (this->sellorder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sellorder().data(), static_cast<int>(this->sellorder().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.sellOrder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sellorder(), target);
  }

  // int64 timestamp = 10;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->timestamp(), target);
  }

  // .vega.Trade.Type type = 11;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->type(), target);
  }

  // .vega.Fee buyerFee = 12;
  if (this->has_buyerfee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::buyerfee(this), target);
  }

  // .vega.Fee sellerFee = 13;
  if (this->has_sellerfee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::sellerfee(this), target);
  }

  // uint64 buyerAuctionBatch = 14;
  if (this->buyerauctionbatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->buyerauctionbatch(), target);
  }

  // uint64 sellerAuctionBatch = 15;
  if (this->sellerauctionbatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->sellerauctionbatch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Trade)
  return target;
}

size_t Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Trade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string buyer = 5;
  if (this->buyer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->buyer());
  }

  // string seller = 6;
  if (this->seller().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->seller());
  }

  // string buyOrder = 8;
  if (this->buyorder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->buyorder());
  }

  // string sellOrder = 9;
  if (this->sellorder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sellorder());
  }

  // .vega.Fee buyerFee = 12;
  if (this->has_buyerfee()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *buyerfee_);
  }

  // .vega.Fee sellerFee = 13;
  if (this->has_sellerfee()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sellerfee_);
  }

  // uint64 price = 3;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->price());
  }

  // uint64 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // .vega.Side aggressor = 7;
  if (this->aggressor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->aggressor());
  }

  // .vega.Trade.Type type = 11;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int64 timestamp = 10;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // uint64 buyerAuctionBatch = 14;
  if (this->buyerauctionbatch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->buyerauctionbatch());
  }

  // uint64 sellerAuctionBatch = 15;
  if (this->sellerauctionbatch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sellerauctionbatch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  const Trade* source =
      ::google::protobuf::DynamicCastToGenerated<Trade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Trade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Trade)
    MergeFrom(*source);
  }
}

void Trade::MergeFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.buyer().size() > 0) {

    buyer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyer_);
  }
  if (from.seller().size() > 0) {

    seller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seller_);
  }
  if (from.buyorder().size() > 0) {

    buyorder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyorder_);
  }
  if (from.sellorder().size() > 0) {

    sellorder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sellorder_);
  }
  if (from.has_buyerfee()) {
    mutable_buyerfee()->::vega::Fee::MergeFrom(from.buyerfee());
  }
  if (from.has_sellerfee()) {
    mutable_sellerfee()->::vega::Fee::MergeFrom(from.sellerfee());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.aggressor() != 0) {
    set_aggressor(from.aggressor());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.buyerauctionbatch() != 0) {
    set_buyerauctionbatch(from.buyerauctionbatch());
  }
  if (from.sellerauctionbatch() != 0) {
    set_sellerauctionbatch(from.sellerauctionbatch());
  }
}

void Trade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trade::CopyFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trade::IsInitialized() const {
  return true;
}

void Trade::Swap(Trade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trade::InternalSwap(Trade* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buyer_.Swap(&other->buyer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  seller_.Swap(&other->seller_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buyorder_.Swap(&other->buyorder_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sellorder_.Swap(&other->sellorder_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(buyerfee_, other->buyerfee_);
  swap(sellerfee_, other->sellerfee_);
  swap(price_, other->price_);
  swap(size_, other->size_);
  swap(aggressor_, other->aggressor_);
  swap(type_, other->type_);
  swap(timestamp_, other->timestamp_);
  swap(buyerauctionbatch_, other->buyerauctionbatch_);
  swap(sellerauctionbatch_, other->sellerauctionbatch_);
}

::google::protobuf::Metadata Trade::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Fee::InitAsDefaultInstance() {
}
class Fee::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fee::kMakerFeeFieldNumber;
const int Fee::kInfrastructureFeeFieldNumber;
const int Fee::kLiquidityFeeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fee::Fee()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Fee)
}
Fee::Fee(const Fee& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&makerfee_, &from.makerfee_,
    static_cast<size_t>(reinterpret_cast<char*>(&liquidityfee_) -
    reinterpret_cast<char*>(&makerfee_)) + sizeof(liquidityfee_));
  // @@protoc_insertion_point(copy_constructor:vega.Fee)
}

void Fee::SharedCtor() {
  ::memset(&makerfee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&liquidityfee_) -
      reinterpret_cast<char*>(&makerfee_)) + sizeof(liquidityfee_));
}

Fee::~Fee() {
  // @@protoc_insertion_point(destructor:vega.Fee)
  SharedDtor();
}

void Fee::SharedDtor() {
}

void Fee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fee& Fee::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Fee_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Fee::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Fee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&makerfee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&liquidityfee_) -
      reinterpret_cast<char*>(&makerfee_)) + sizeof(liquidityfee_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fee::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Fee*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 makerFee = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_makerfee(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 infrastructureFee = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_infrastructurefee(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 liquidityFee = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_liquidityfee(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Fee)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 makerFee = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &makerfee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 infrastructureFee = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &infrastructurefee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 liquidityFee = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &liquidityfee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Fee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Fee)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Fee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 makerFee = 1;
  if (this->makerfee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->makerfee(), output);
  }

  // uint64 infrastructureFee = 2;
  if (this->infrastructurefee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->infrastructurefee(), output);
  }

  // uint64 liquidityFee = 3;
  if (this->liquidityfee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->liquidityfee(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Fee)
}

::google::protobuf::uint8* Fee::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Fee)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 makerFee = 1;
  if (this->makerfee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->makerfee(), target);
  }

  // uint64 infrastructureFee = 2;
  if (this->infrastructurefee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->infrastructurefee(), target);
  }

  // uint64 liquidityFee = 3;
  if (this->liquidityfee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->liquidityfee(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Fee)
  return target;
}

size_t Fee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Fee)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 makerFee = 1;
  if (this->makerfee() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->makerfee());
  }

  // uint64 infrastructureFee = 2;
  if (this->infrastructurefee() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->infrastructurefee());
  }

  // uint64 liquidityFee = 3;
  if (this->liquidityfee() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->liquidityfee());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fee::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Fee)
  GOOGLE_DCHECK_NE(&from, this);
  const Fee* source =
      ::google::protobuf::DynamicCastToGenerated<Fee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Fee)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Fee)
    MergeFrom(*source);
  }
}

void Fee::MergeFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Fee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.makerfee() != 0) {
    set_makerfee(from.makerfee());
  }
  if (from.infrastructurefee() != 0) {
    set_infrastructurefee(from.infrastructurefee());
  }
  if (from.liquidityfee() != 0) {
    set_liquidityfee(from.liquidityfee());
  }
}

void Fee::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Fee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fee::CopyFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Fee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fee::IsInitialized() const {
  return true;
}

void Fee::Swap(Fee* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fee::InternalSwap(Fee* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(makerfee_, other->makerfee_);
  swap(infrastructurefee_, other->infrastructurefee_);
  swap(liquidityfee_, other->liquidityfee_);
}

::google::protobuf::Metadata Fee::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TradeSet::InitAsDefaultInstance() {
}
class TradeSet::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeSet::kTradesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeSet::TradeSet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.TradeSet)
}
TradeSet::TradeSet(const TradeSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.TradeSet)
}

void TradeSet::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TradeSet_proto_2fvega_2eproto.base);
}

TradeSet::~TradeSet() {
  // @@protoc_insertion_point(destructor:vega.TradeSet)
  SharedDtor();
}

void TradeSet::SharedDtor() {
}

void TradeSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeSet& TradeSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TradeSet_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void TradeSet::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TradeSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradeSet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TradeSet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Trade trades = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Trade::_InternalParse;
          object = msg->add_trades();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.TradeSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Trade trades = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.TradeSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.TradeSet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.TradeSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->trades(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.TradeSet)
}

::google::protobuf::uint8* TradeSet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TradeSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->trades(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TradeSet)
  return target;
}

size_t TradeSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TradeSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trades_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trades(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TradeSet)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeSet* source =
      ::google::protobuf::DynamicCastToGenerated<TradeSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TradeSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TradeSet)
    MergeFrom(*source);
  }
}

void TradeSet::MergeFrom(const TradeSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TradeSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradeSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TradeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeSet::CopyFrom(const TradeSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TradeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeSet::IsInitialized() const {
  return true;
}

void TradeSet::Swap(TradeSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeSet::InternalSwap(TradeSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&trades_)->InternalSwap(CastToBase(&other->trades_));
}

::google::protobuf::Metadata TradeSet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Candle::InitAsDefaultInstance() {
}
class Candle::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Candle::kTimestampFieldNumber;
const int Candle::kDatetimeFieldNumber;
const int Candle::kHighFieldNumber;
const int Candle::kLowFieldNumber;
const int Candle::kOpenFieldNumber;
const int Candle::kCloseFieldNumber;
const int Candle::kVolumeFieldNumber;
const int Candle::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Candle::Candle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Candle)
}
Candle::Candle(const Candle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  datetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.datetime().size() > 0) {
    datetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:vega.Candle)
}

void Candle::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Candle_proto_2fvega_2eproto.base);
  datetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(interval_));
}

Candle::~Candle() {
  // @@protoc_insertion_point(destructor:vega.Candle)
  SharedDtor();
}

void Candle::SharedDtor() {
  datetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Candle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Candle& Candle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Candle_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Candle::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Candle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(interval_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Candle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Candle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string datetime = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Candle.datetime");
        object = msg->mutable_datetime();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 high = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_high(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 low = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_low(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 open = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_open(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 close = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_close(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 volume = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_volume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.Interval interval = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_interval(static_cast<::vega::Interval>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Candle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Candle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string datetime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->datetime().data(), static_cast<int>(this->datetime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Candle.datetime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 high = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 low = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 open = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 close = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 volume = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Interval interval = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_interval(static_cast< ::vega::Interval >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Candle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Candle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Candle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Candle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Candle.datetime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->datetime(), output);
  }

  // uint64 high = 3;
  if (this->high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->high(), output);
  }

  // uint64 low = 4;
  if (this->low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->low(), output);
  }

  // uint64 open = 5;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->open(), output);
  }

  // uint64 close = 6;
  if (this->close() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->close(), output);
  }

  // uint64 volume = 7;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->volume(), output);
  }

  // .vega.Interval interval = 8;
  if (this->interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Candle)
}

::google::protobuf::uint8* Candle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Candle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Candle.datetime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->datetime(), target);
  }

  // uint64 high = 3;
  if (this->high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->high(), target);
  }

  // uint64 low = 4;
  if (this->low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->low(), target);
  }

  // uint64 open = 5;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->open(), target);
  }

  // uint64 close = 6;
  if (this->close() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->close(), target);
  }

  // uint64 volume = 7;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->volume(), target);
  }

  // .vega.Interval interval = 8;
  if (this->interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Candle)
  return target;
}

size_t Candle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Candle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->datetime());
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // uint64 high = 3;
  if (this->high() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->high());
  }

  // uint64 low = 4;
  if (this->low() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->low());
  }

  // uint64 open = 5;
  if (this->open() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->open());
  }

  // uint64 close = 6;
  if (this->close() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->close());
  }

  // uint64 volume = 7;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->volume());
  }

  // .vega.Interval interval = 8;
  if (this->interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->interval());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Candle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Candle)
  GOOGLE_DCHECK_NE(&from, this);
  const Candle* source =
      ::google::protobuf::DynamicCastToGenerated<Candle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Candle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Candle)
    MergeFrom(*source);
  }
}

void Candle::MergeFrom(const Candle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Candle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datetime().size() > 0) {

    datetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.high() != 0) {
    set_high(from.high());
  }
  if (from.low() != 0) {
    set_low(from.low());
  }
  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.close() != 0) {
    set_close(from.close());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.interval() != 0) {
    set_interval(from.interval());
  }
}

void Candle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Candle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candle::CopyFrom(const Candle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Candle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candle::IsInitialized() const {
  return true;
}

void Candle::Swap(Candle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Candle::InternalSwap(Candle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datetime_.Swap(&other->datetime_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(open_, other->open_);
  swap(close_, other->close_);
  swap(volume_, other->volume_);
  swap(interval_, other->interval_);
}

::google::protobuf::Metadata Candle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PriceLevel::InitAsDefaultInstance() {
}
class PriceLevel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PriceLevel::kPriceFieldNumber;
const int PriceLevel::kNumberOfOrdersFieldNumber;
const int PriceLevel::kVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PriceLevel::PriceLevel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.PriceLevel)
}
PriceLevel::PriceLevel(const PriceLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&price_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:vega.PriceLevel)
}

void PriceLevel::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&price_)) + sizeof(volume_));
}

PriceLevel::~PriceLevel() {
  // @@protoc_insertion_point(destructor:vega.PriceLevel)
  SharedDtor();
}

void PriceLevel::SharedDtor() {
}

void PriceLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceLevel& PriceLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PriceLevel_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void PriceLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PriceLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&price_)) + sizeof(volume_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PriceLevel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PriceLevel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 price = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_price(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 numberOfOrders = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_numberoforders(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 volume = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_volume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PriceLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.PriceLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 price = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 numberOfOrders = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &numberoforders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 volume = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.PriceLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.PriceLevel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PriceLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.PriceLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->price(), output);
  }

  // uint64 numberOfOrders = 2;
  if (this->numberoforders() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->numberoforders(), output);
  }

  // uint64 volume = 3;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->volume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.PriceLevel)
}

::google::protobuf::uint8* PriceLevel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PriceLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->price(), target);
  }

  // uint64 numberOfOrders = 2;
  if (this->numberoforders() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->numberoforders(), target);
  }

  // uint64 volume = 3;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->volume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PriceLevel)
  return target;
}

size_t PriceLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PriceLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 price = 1;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->price());
  }

  // uint64 numberOfOrders = 2;
  if (this->numberoforders() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->numberoforders());
  }

  // uint64 volume = 3;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->volume());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PriceLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceLevel* source =
      ::google::protobuf::DynamicCastToGenerated<PriceLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PriceLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PriceLevel)
    MergeFrom(*source);
  }
}

void PriceLevel::MergeFrom(const PriceLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PriceLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.numberoforders() != 0) {
    set_numberoforders(from.numberoforders());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
}

void PriceLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PriceLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceLevel::CopyFrom(const PriceLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PriceLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceLevel::IsInitialized() const {
  return true;
}

void PriceLevel::Swap(PriceLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PriceLevel::InternalSwap(PriceLevel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(price_, other->price_);
  swap(numberoforders_, other->numberoforders_);
  swap(volume_, other->volume_);
}

::google::protobuf::Metadata PriceLevel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketDepth::InitAsDefaultInstance() {
}
class MarketDepth::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepth::kMarketIDFieldNumber;
const int MarketDepth::kBuyFieldNumber;
const int MarketDepth::kSellFieldNumber;
const int MarketDepth::kSequenceNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepth::MarketDepth()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.MarketDepth)
}
MarketDepth::MarketDepth(const MarketDepth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      buy_(from.buy_),
      sell_(from.sell_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  sequencenumber_ = from.sequencenumber_;
  // @@protoc_insertion_point(copy_constructor:vega.MarketDepth)
}

void MarketDepth::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketDepth_proto_2fvega_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequencenumber_ = PROTOBUF_ULONGLONG(0);
}

MarketDepth::~MarketDepth() {
  // @@protoc_insertion_point(destructor:vega.MarketDepth)
  SharedDtor();
}

void MarketDepth::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketDepth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepth& MarketDepth::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketDepth_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void MarketDepth::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarketDepth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_.Clear();
  sell_.Clear();
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequencenumber_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketDepth::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketDepth*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.MarketDepth.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .vega.PriceLevel buy = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::PriceLevel::_InternalParse;
          object = msg->add_buy();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .vega.PriceLevel sell = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::PriceLevel::_InternalParse;
          object = msg->add_sell();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // uint64 sequenceNumber = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_sequencenumber(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketDepth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.MarketDepth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.MarketDepth.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.PriceLevel buy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.PriceLevel sell = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sell()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sequenceNumber = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequencenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.MarketDepth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.MarketDepth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketDepth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.MarketDepth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketDepth.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // repeated .vega.PriceLevel buy = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buy_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->buy(static_cast<int>(i)),
      output);
  }

  // repeated .vega.PriceLevel sell = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sell_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->sell(static_cast<int>(i)),
      output);
  }

  // uint64 sequenceNumber = 4;
  if (this->sequencenumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sequencenumber(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.MarketDepth)
}

::google::protobuf::uint8* MarketDepth::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarketDepth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketDepth.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // repeated .vega.PriceLevel buy = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buy_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->buy(static_cast<int>(i)), target);
  }

  // repeated .vega.PriceLevel sell = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sell_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->sell(static_cast<int>(i)), target);
  }

  // uint64 sequenceNumber = 4;
  if (this->sequencenumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sequencenumber(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarketDepth)
  return target;
}

size_t MarketDepth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarketDepth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.PriceLevel buy = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->buy_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buy(static_cast<int>(i)));
    }
  }

  // repeated .vega.PriceLevel sell = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->sell_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sell(static_cast<int>(i)));
    }
  }

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // uint64 sequenceNumber = 4;
  if (this->sequencenumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequencenumber());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarketDepth)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepth* source =
      ::google::protobuf::DynamicCastToGenerated<MarketDepth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarketDepth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarketDepth)
    MergeFrom(*source);
  }
}

void MarketDepth::MergeFrom(const MarketDepth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarketDepth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_.MergeFrom(from.buy_);
  sell_.MergeFrom(from.sell_);
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.sequencenumber() != 0) {
    set_sequencenumber(from.sequencenumber());
  }
}

void MarketDepth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarketDepth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepth::CopyFrom(const MarketDepth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarketDepth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepth::IsInitialized() const {
  return true;
}

void MarketDepth::Swap(MarketDepth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepth::InternalSwap(MarketDepth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&buy_)->InternalSwap(CastToBase(&other->buy_));
  CastToBase(&sell_)->InternalSwap(CastToBase(&other->sell_));
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sequencenumber_, other->sequencenumber_);
}

::google::protobuf::Metadata MarketDepth::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthUpdate::InitAsDefaultInstance() {
}
class MarketDepthUpdate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthUpdate::kMarketIDFieldNumber;
const int MarketDepthUpdate::kBuyFieldNumber;
const int MarketDepthUpdate::kSellFieldNumber;
const int MarketDepthUpdate::kSequenceNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthUpdate::MarketDepthUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.MarketDepthUpdate)
}
MarketDepthUpdate::MarketDepthUpdate(const MarketDepthUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      buy_(from.buy_),
      sell_(from.sell_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  sequencenumber_ = from.sequencenumber_;
  // @@protoc_insertion_point(copy_constructor:vega.MarketDepthUpdate)
}

void MarketDepthUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketDepthUpdate_proto_2fvega_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequencenumber_ = PROTOBUF_ULONGLONG(0);
}

MarketDepthUpdate::~MarketDepthUpdate() {
  // @@protoc_insertion_point(destructor:vega.MarketDepthUpdate)
  SharedDtor();
}

void MarketDepthUpdate::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthUpdate& MarketDepthUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketDepthUpdate_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarketDepthUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_.Clear();
  sell_.Clear();
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequencenumber_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketDepthUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketDepthUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.MarketDepthUpdate.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .vega.PriceLevel buy = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::PriceLevel::_InternalParse;
          object = msg->add_buy();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .vega.PriceLevel sell = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::PriceLevel::_InternalParse;
          object = msg->add_sell();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // uint64 sequenceNumber = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_sequencenumber(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketDepthUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.MarketDepthUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.MarketDepthUpdate.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.PriceLevel buy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.PriceLevel sell = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sell()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sequenceNumber = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequencenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.MarketDepthUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.MarketDepthUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketDepthUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.MarketDepthUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketDepthUpdate.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // repeated .vega.PriceLevel buy = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buy_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->buy(static_cast<int>(i)),
      output);
  }

  // repeated .vega.PriceLevel sell = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sell_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->sell(static_cast<int>(i)),
      output);
  }

  // uint64 sequenceNumber = 4;
  if (this->sequencenumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sequencenumber(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.MarketDepthUpdate)
}

::google::protobuf::uint8* MarketDepthUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarketDepthUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketDepthUpdate.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // repeated .vega.PriceLevel buy = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buy_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->buy(static_cast<int>(i)), target);
  }

  // repeated .vega.PriceLevel sell = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sell_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->sell(static_cast<int>(i)), target);
  }

  // uint64 sequenceNumber = 4;
  if (this->sequencenumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sequencenumber(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarketDepthUpdate)
  return target;
}

size_t MarketDepthUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarketDepthUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.PriceLevel buy = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->buy_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buy(static_cast<int>(i)));
    }
  }

  // repeated .vega.PriceLevel sell = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->sell_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sell(static_cast<int>(i)));
    }
  }

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // uint64 sequenceNumber = 4;
  if (this->sequencenumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequencenumber());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarketDepthUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<MarketDepthUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarketDepthUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarketDepthUpdate)
    MergeFrom(*source);
  }
}

void MarketDepthUpdate::MergeFrom(const MarketDepthUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarketDepthUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_.MergeFrom(from.buy_);
  sell_.MergeFrom(from.sell_);
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.sequencenumber() != 0) {
    set_sequencenumber(from.sequencenumber());
  }
}

void MarketDepthUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarketDepthUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdate::CopyFrom(const MarketDepthUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarketDepthUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdate::IsInitialized() const {
  return true;
}

void MarketDepthUpdate::Swap(MarketDepthUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthUpdate::InternalSwap(MarketDepthUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&buy_)->InternalSwap(CastToBase(&other->buy_));
  CastToBase(&sell_)->InternalSwap(CastToBase(&other->sell_));
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sequencenumber_, other->sequencenumber_);
}

::google::protobuf::Metadata MarketDepthUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kMarketIDFieldNumber;
const int Position::kPartyIDFieldNumber;
const int Position::kOpenVolumeFieldNumber;
const int Position::kRealisedPNLFieldNumber;
const int Position::kUnrealisedPNLFieldNumber;
const int Position::kAverageEntryPriceFieldNumber;
const int Position::kUpdatedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Position)
}
Position::Position(const Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  ::memcpy(&openvolume_, &from.openvolume_,
    static_cast<size_t>(reinterpret_cast<char*>(&updatedat_) -
    reinterpret_cast<char*>(&openvolume_)) + sizeof(updatedat_));
  // @@protoc_insertion_point(copy_constructor:vega.Position)
}

void Position::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Position_proto_2fvega_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&openvolume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updatedat_) -
      reinterpret_cast<char*>(&openvolume_)) + sizeof(updatedat_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:vega.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Position_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&openvolume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updatedat_) -
      reinterpret_cast<char*>(&openvolume_)) + sizeof(updatedat_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Position::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Position*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Position.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string partyID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Position.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 openVolume = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_openvolume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 realisedPNL = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_realisedpnl(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 unrealisedPNL = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_unrealisedpnl(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 averageEntryPrice = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_averageentryprice(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 updatedAt = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_updatedat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Position.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Position.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 openVolume = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &openvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 realisedPNL = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &realisedpnl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 unrealisedPNL = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unrealisedpnl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 averageEntryPrice = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &averageentryprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 updatedAt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatedat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Position)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Position.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Position.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partyid(), output);
  }

  // int64 openVolume = 3;
  if (this->openvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->openvolume(), output);
  }

  // int64 realisedPNL = 4;
  if (this->realisedpnl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->realisedpnl(), output);
  }

  // int64 unrealisedPNL = 5;
  if (this->unrealisedpnl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->unrealisedpnl(), output);
  }

  // uint64 averageEntryPrice = 6;
  if (this->averageentryprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->averageentryprice(), output);
  }

  // int64 updatedAt = 7;
  if (this->updatedat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->updatedat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Position.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Position.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partyid(), target);
  }

  // int64 openVolume = 3;
  if (this->openvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->openvolume(), target);
  }

  // int64 realisedPNL = 4;
  if (this->realisedpnl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->realisedpnl(), target);
  }

  // int64 unrealisedPNL = 5;
  if (this->unrealisedpnl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->unrealisedpnl(), target);
  }

  // uint64 averageEntryPrice = 6;
  if (this->averageentryprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->averageentryprice(), target);
  }

  // int64 updatedAt = 7;
  if (this->updatedat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->updatedat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // int64 openVolume = 3;
  if (this->openvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->openvolume());
  }

  // int64 realisedPNL = 4;
  if (this->realisedpnl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->realisedpnl());
  }

  // int64 unrealisedPNL = 5;
  if (this->unrealisedpnl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->unrealisedpnl());
  }

  // uint64 averageEntryPrice = 6;
  if (this->averageentryprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->averageentryprice());
  }

  // int64 updatedAt = 7;
  if (this->updatedat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updatedat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::google::protobuf::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.openvolume() != 0) {
    set_openvolume(from.openvolume());
  }
  if (from.realisedpnl() != 0) {
    set_realisedpnl(from.realisedpnl());
  }
  if (from.unrealisedpnl() != 0) {
    set_unrealisedpnl(from.unrealisedpnl());
  }
  if (from.averageentryprice() != 0) {
    set_averageentryprice(from.averageentryprice());
  }
  if (from.updatedat() != 0) {
    set_updatedat(from.updatedat());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(openvolume_, other->openvolume_);
  swap(realisedpnl_, other->realisedpnl_);
  swap(unrealisedpnl_, other->unrealisedpnl_);
  swap(averageentryprice_, other->averageentryprice_);
  swap(updatedat_, other->updatedat_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PositionTrade::InitAsDefaultInstance() {
}
class PositionTrade::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionTrade::kVolumeFieldNumber;
const int PositionTrade::kPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionTrade::PositionTrade()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.PositionTrade)
}
PositionTrade::PositionTrade(const PositionTrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:vega.PositionTrade)
}

void PositionTrade::SharedCtor() {
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(price_));
}

PositionTrade::~PositionTrade() {
  // @@protoc_insertion_point(destructor:vega.PositionTrade)
  SharedDtor();
}

void PositionTrade::SharedDtor() {
}

void PositionTrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionTrade& PositionTrade::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PositionTrade_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void PositionTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PositionTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(price_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionTrade::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PositionTrade*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 volume = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_volume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 price = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_price(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.PositionTrade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 volume = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.PositionTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.PositionTrade)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.PositionTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 volume = 1;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->volume(), output);
  }

  // uint64 price = 2;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.PositionTrade)
}

::google::protobuf::uint8* PositionTrade::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PositionTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 volume = 1;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->volume(), target);
  }

  // uint64 price = 2;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PositionTrade)
  return target;
}

size_t PositionTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PositionTrade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 volume = 1;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->volume());
  }

  // uint64 price = 2;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->price());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionTrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PositionTrade)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionTrade* source =
      ::google::protobuf::DynamicCastToGenerated<PositionTrade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PositionTrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PositionTrade)
    MergeFrom(*source);
  }
}

void PositionTrade::MergeFrom(const PositionTrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PositionTrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
}

void PositionTrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PositionTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionTrade::CopyFrom(const PositionTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PositionTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionTrade::IsInitialized() const {
  return true;
}

void PositionTrade::Swap(PositionTrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionTrade::InternalSwap(PositionTrade* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(volume_, other->volume_);
  swap(price_, other->price_);
}

::google::protobuf::Metadata PositionTrade::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Statistics::InitAsDefaultInstance() {
}
class Statistics::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Statistics::kBlockHeightFieldNumber;
const int Statistics::kBacklogLengthFieldNumber;
const int Statistics::kTotalPeersFieldNumber;
const int Statistics::kGenesisTimeFieldNumber;
const int Statistics::kCurrentTimeFieldNumber;
const int Statistics::kVegaTimeFieldNumber;
const int Statistics::kStatusFieldNumber;
const int Statistics::kTxPerBlockFieldNumber;
const int Statistics::kAverageTxBytesFieldNumber;
const int Statistics::kAverageOrdersPerBlockFieldNumber;
const int Statistics::kTradesPerSecondFieldNumber;
const int Statistics::kOrdersPerSecondFieldNumber;
const int Statistics::kTotalMarketsFieldNumber;
const int Statistics::kTotalAmendOrderFieldNumber;
const int Statistics::kTotalCancelOrderFieldNumber;
const int Statistics::kTotalCreateOrderFieldNumber;
const int Statistics::kTotalOrdersFieldNumber;
const int Statistics::kTotalTradesFieldNumber;
const int Statistics::kOrderSubscriptionsFieldNumber;
const int Statistics::kTradeSubscriptionsFieldNumber;
const int Statistics::kCandleSubscriptionsFieldNumber;
const int Statistics::kMarketDepthSubscriptionsFieldNumber;
const int Statistics::kPositionsSubscriptionsFieldNumber;
const int Statistics::kAccountSubscriptionsFieldNumber;
const int Statistics::kMarketDataSubscriptionsFieldNumber;
const int Statistics::kAppVersionHashFieldNumber;
const int Statistics::kAppVersionFieldNumber;
const int Statistics::kChainVersionFieldNumber;
const int Statistics::kBlockDurationFieldNumber;
const int Statistics::kUptimeFieldNumber;
const int Statistics::kChainIDFieldNumber;
const int Statistics::kMarketDepthUpdatesSubscriptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Statistics::Statistics()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Statistics)
}
Statistics::Statistics(const Statistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  genesistime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.genesistime().size() > 0) {
    genesistime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.genesistime_);
  }
  currenttime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.currenttime().size() > 0) {
    currenttime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currenttime_);
  }
  vegatime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vegatime().size() > 0) {
    vegatime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vegatime_);
  }
  appversionhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appversionhash().size() > 0) {
    appversionhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appversionhash_);
  }
  appversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appversion().size() > 0) {
    appversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appversion_);
  }
  chainversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chainversion().size() > 0) {
    chainversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chainversion_);
  }
  uptime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uptime().size() > 0) {
    uptime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uptime_);
  }
  chainid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chainid().size() > 0) {
    chainid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chainid_);
  }
  ::memcpy(&blockheight_, &from.blockheight_,
    static_cast<size_t>(reinterpret_cast<char*>(&marketdepthupdatessubscriptions_) -
    reinterpret_cast<char*>(&blockheight_)) + sizeof(marketdepthupdatessubscriptions_));
  // @@protoc_insertion_point(copy_constructor:vega.Statistics)
}

void Statistics::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Statistics_proto_2fvega_2eproto.base);
  genesistime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currenttime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vegatime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appversionhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chainversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uptime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chainid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&blockheight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketdepthupdatessubscriptions_) -
      reinterpret_cast<char*>(&blockheight_)) + sizeof(marketdepthupdatessubscriptions_));
}

Statistics::~Statistics() {
  // @@protoc_insertion_point(destructor:vega.Statistics)
  SharedDtor();
}

void Statistics::SharedDtor() {
  genesistime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currenttime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vegatime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appversionhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chainversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uptime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chainid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Statistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Statistics& Statistics::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Statistics_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Statistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  genesistime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currenttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vegatime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appversionhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chainversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uptime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chainid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&blockheight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketdepthupdatessubscriptions_) -
      reinterpret_cast<char*>(&blockheight_)) + sizeof(marketdepthupdatessubscriptions_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Statistics::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Statistics*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 blockHeight = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_blockheight(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 backlogLength = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_backloglength(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 totalPeers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_totalpeers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string genesisTime = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Statistics.genesisTime");
        object = msg->mutable_genesistime();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string currentTime = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Statistics.currentTime");
        object = msg->mutable_currenttime();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string vegaTime = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Statistics.vegaTime");
        object = msg->mutable_vegatime();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.ChainStatus status = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::vega::ChainStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 txPerBlock = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_txperblock(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 averageTxBytes = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_averagetxbytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 averageOrdersPerBlock = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_averageordersperblock(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 tradesPerSecond = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_tradespersecond(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 ordersPerSecond = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_orderspersecond(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 totalMarkets = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_totalmarkets(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 totalAmendOrder = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_totalamendorder(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 totalCancelOrder = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_totalcancelorder(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 totalCreateOrder = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_totalcreateorder(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 totalOrders = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_totalorders(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 totalTrades = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_totaltrades(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 orderSubscriptions = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_ordersubscriptions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 tradeSubscriptions = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_tradesubscriptions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 candleSubscriptions = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_candlesubscriptions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 marketDepthSubscriptions = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_marketdepthsubscriptions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 positionsSubscriptions = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_positionssubscriptions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 accountSubscriptions = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_accountsubscriptions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 marketDataSubscriptions = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_marketdatasubscriptions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string appVersionHash = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 226) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Statistics.appVersionHash");
        object = msg->mutable_appversionhash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string appVersion = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Statistics.appVersion");
        object = msg->mutable_appversion();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string chainVersion = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 242) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Statistics.chainVersion");
        object = msg->mutable_chainversion();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 blockDuration = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_blockduration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string uptime = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Statistics.uptime");
        object = msg->mutable_uptime();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string chainID = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Statistics.chainID");
        object = msg->mutable_chainid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 marketDepthUpdatesSubscriptions = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_marketdepthupdatessubscriptions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Statistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Statistics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 blockHeight = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blockheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 backlogLength = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &backloglength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 totalPeers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalpeers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string genesisTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genesistime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->genesistime().data(), static_cast<int>(this->genesistime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Statistics.genesisTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string currentTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currenttime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->currenttime().data(), static_cast<int>(this->currenttime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Statistics.currentTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vegaTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vegatime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vegatime().data(), static_cast<int>(this->vegatime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Statistics.vegaTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.ChainStatus status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::vega::ChainStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 txPerBlock = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txperblock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 averageTxBytes = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &averagetxbytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 averageOrdersPerBlock = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &averageordersperblock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tradesPerSecond = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tradespersecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ordersPerSecond = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orderspersecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 totalMarkets = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalmarkets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 totalAmendOrder = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalamendorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 totalCancelOrder = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalcancelorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 totalCreateOrder = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalcreateorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 totalOrders = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 totalTrades = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totaltrades_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 orderSubscriptions = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordersubscriptions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tradeSubscriptions = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradesubscriptions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 candleSubscriptions = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &candlesubscriptions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 marketDepthSubscriptions = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marketdepthsubscriptions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 positionsSubscriptions = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &positionssubscriptions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 accountSubscriptions = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountsubscriptions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 marketDataSubscriptions = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marketdatasubscriptions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appVersionHash = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (226 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appversionhash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appversionhash().data(), static_cast<int>(this->appversionhash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Statistics.appVersionHash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appVersion = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (234 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appversion().data(), static_cast<int>(this->appversion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Statistics.appVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chainVersion = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (242 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chainversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chainversion().data(), static_cast<int>(this->chainversion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Statistics.chainVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 blockDuration = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blockduration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uptime = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (258 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uptime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uptime().data(), static_cast<int>(this->uptime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Statistics.uptime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chainID = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (266 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chainid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chainid().data(), static_cast<int>(this->chainid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Statistics.chainID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 marketDepthUpdatesSubscriptions = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (272 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marketdepthupdatessubscriptions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Statistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Statistics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Statistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Statistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blockHeight = 1;
  if (this->blockheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->blockheight(), output);
  }

  // uint64 backlogLength = 2;
  if (this->backloglength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->backloglength(), output);
  }

  // uint64 totalPeers = 3;
  if (this->totalpeers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->totalpeers(), output);
  }

  // string genesisTime = 4;
  if (this->genesistime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->genesistime().data(), static_cast<int>(this->genesistime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.genesisTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->genesistime(), output);
  }

  // string currentTime = 5;
  if (this->currenttime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currenttime().data(), static_cast<int>(this->currenttime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.currentTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->currenttime(), output);
  }

  // string vegaTime = 6;
  if (this->vegatime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vegatime().data(), static_cast<int>(this->vegatime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.vegaTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->vegatime(), output);
  }

  // .vega.ChainStatus status = 7;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->status(), output);
  }

  // uint64 txPerBlock = 8;
  if (this->txperblock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->txperblock(), output);
  }

  // uint64 averageTxBytes = 9;
  if (this->averagetxbytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->averagetxbytes(), output);
  }

  // uint64 averageOrdersPerBlock = 10;
  if (this->averageordersperblock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->averageordersperblock(), output);
  }

  // uint64 tradesPerSecond = 11;
  if (this->tradespersecond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->tradespersecond(), output);
  }

  // uint64 ordersPerSecond = 12;
  if (this->orderspersecond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->orderspersecond(), output);
  }

  // uint64 totalMarkets = 13;
  if (this->totalmarkets() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->totalmarkets(), output);
  }

  // uint64 totalAmendOrder = 16;
  if (this->totalamendorder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->totalamendorder(), output);
  }

  // uint64 totalCancelOrder = 17;
  if (this->totalcancelorder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->totalcancelorder(), output);
  }

  // uint64 totalCreateOrder = 18;
  if (this->totalcreateorder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->totalcreateorder(), output);
  }

  // uint64 totalOrders = 19;
  if (this->totalorders() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->totalorders(), output);
  }

  // uint64 totalTrades = 20;
  if (this->totaltrades() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->totaltrades(), output);
  }

  // uint32 orderSubscriptions = 21;
  if (this->ordersubscriptions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->ordersubscriptions(), output);
  }

  // uint32 tradeSubscriptions = 22;
  if (this->tradesubscriptions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->tradesubscriptions(), output);
  }

  // uint32 candleSubscriptions = 23;
  if (this->candlesubscriptions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->candlesubscriptions(), output);
  }

  // uint32 marketDepthSubscriptions = 24;
  if (this->marketdepthsubscriptions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->marketdepthsubscriptions(), output);
  }

  // uint32 positionsSubscriptions = 25;
  if (this->positionssubscriptions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->positionssubscriptions(), output);
  }

  // uint32 accountSubscriptions = 26;
  if (this->accountsubscriptions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->accountsubscriptions(), output);
  }

  // uint32 marketDataSubscriptions = 27;
  if (this->marketdatasubscriptions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->marketdatasubscriptions(), output);
  }

  // string appVersionHash = 28;
  if (this->appversionhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appversionhash().data(), static_cast<int>(this->appversionhash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.appVersionHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->appversionhash(), output);
  }

  // string appVersion = 29;
  if (this->appversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appversion().data(), static_cast<int>(this->appversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.appVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->appversion(), output);
  }

  // string chainVersion = 30;
  if (this->chainversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chainversion().data(), static_cast<int>(this->chainversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.chainVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->chainversion(), output);
  }

  // uint64 blockDuration = 31;
  if (this->blockduration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->blockduration(), output);
  }

  // string uptime = 32;
  if (this->uptime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uptime().data(), static_cast<int>(this->uptime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.uptime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->uptime(), output);
  }

  // string chainID = 33;
  if (this->chainid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chainid().data(), static_cast<int>(this->chainid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.chainID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->chainid(), output);
  }

  // uint32 marketDepthUpdatesSubscriptions = 34;
  if (this->marketdepthupdatessubscriptions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->marketdepthupdatessubscriptions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Statistics)
}

::google::protobuf::uint8* Statistics::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Statistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blockHeight = 1;
  if (this->blockheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->blockheight(), target);
  }

  // uint64 backlogLength = 2;
  if (this->backloglength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->backloglength(), target);
  }

  // uint64 totalPeers = 3;
  if (this->totalpeers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->totalpeers(), target);
  }

  // string genesisTime = 4;
  if (this->genesistime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->genesistime().data(), static_cast<int>(this->genesistime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.genesisTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->genesistime(), target);
  }

  // string currentTime = 5;
  if (this->currenttime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currenttime().data(), static_cast<int>(this->currenttime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.currentTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->currenttime(), target);
  }

  // string vegaTime = 6;
  if (this->vegatime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vegatime().data(), static_cast<int>(this->vegatime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.vegaTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->vegatime(), target);
  }

  // .vega.ChainStatus status = 7;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->status(), target);
  }

  // uint64 txPerBlock = 8;
  if (this->txperblock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->txperblock(), target);
  }

  // uint64 averageTxBytes = 9;
  if (this->averagetxbytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->averagetxbytes(), target);
  }

  // uint64 averageOrdersPerBlock = 10;
  if (this->averageordersperblock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->averageordersperblock(), target);
  }

  // uint64 tradesPerSecond = 11;
  if (this->tradespersecond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->tradespersecond(), target);
  }

  // uint64 ordersPerSecond = 12;
  if (this->orderspersecond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->orderspersecond(), target);
  }

  // uint64 totalMarkets = 13;
  if (this->totalmarkets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->totalmarkets(), target);
  }

  // uint64 totalAmendOrder = 16;
  if (this->totalamendorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->totalamendorder(), target);
  }

  // uint64 totalCancelOrder = 17;
  if (this->totalcancelorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->totalcancelorder(), target);
  }

  // uint64 totalCreateOrder = 18;
  if (this->totalcreateorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->totalcreateorder(), target);
  }

  // uint64 totalOrders = 19;
  if (this->totalorders() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->totalorders(), target);
  }

  // uint64 totalTrades = 20;
  if (this->totaltrades() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->totaltrades(), target);
  }

  // uint32 orderSubscriptions = 21;
  if (this->ordersubscriptions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->ordersubscriptions(), target);
  }

  // uint32 tradeSubscriptions = 22;
  if (this->tradesubscriptions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->tradesubscriptions(), target);
  }

  // uint32 candleSubscriptions = 23;
  if (this->candlesubscriptions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->candlesubscriptions(), target);
  }

  // uint32 marketDepthSubscriptions = 24;
  if (this->marketdepthsubscriptions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->marketdepthsubscriptions(), target);
  }

  // uint32 positionsSubscriptions = 25;
  if (this->positionssubscriptions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->positionssubscriptions(), target);
  }

  // uint32 accountSubscriptions = 26;
  if (this->accountsubscriptions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->accountsubscriptions(), target);
  }

  // uint32 marketDataSubscriptions = 27;
  if (this->marketdatasubscriptions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->marketdatasubscriptions(), target);
  }

  // string appVersionHash = 28;
  if (this->appversionhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appversionhash().data(), static_cast<int>(this->appversionhash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.appVersionHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->appversionhash(), target);
  }

  // string appVersion = 29;
  if (this->appversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appversion().data(), static_cast<int>(this->appversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.appVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->appversion(), target);
  }

  // string chainVersion = 30;
  if (this->chainversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chainversion().data(), static_cast<int>(this->chainversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.chainVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->chainversion(), target);
  }

  // uint64 blockDuration = 31;
  if (this->blockduration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->blockduration(), target);
  }

  // string uptime = 32;
  if (this->uptime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uptime().data(), static_cast<int>(this->uptime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.uptime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->uptime(), target);
  }

  // string chainID = 33;
  if (this->chainid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chainid().data(), static_cast<int>(this->chainid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.chainID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->chainid(), target);
  }

  // uint32 marketDepthUpdatesSubscriptions = 34;
  if (this->marketdepthupdatessubscriptions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->marketdepthupdatessubscriptions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Statistics)
  return target;
}

size_t Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Statistics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string genesisTime = 4;
  if (this->genesistime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->genesistime());
  }

  // string currentTime = 5;
  if (this->currenttime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currenttime());
  }

  // string vegaTime = 6;
  if (this->vegatime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vegatime());
  }

  // string appVersionHash = 28;
  if (this->appversionhash().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appversionhash());
  }

  // string appVersion = 29;
  if (this->appversion().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appversion());
  }

  // string chainVersion = 30;
  if (this->chainversion().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chainversion());
  }

  // string uptime = 32;
  if (this->uptime().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uptime());
  }

  // string chainID = 33;
  if (this->chainid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chainid());
  }

  // uint64 blockHeight = 1;
  if (this->blockheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->blockheight());
  }

  // uint64 backlogLength = 2;
  if (this->backloglength() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->backloglength());
  }

  // uint64 totalPeers = 3;
  if (this->totalpeers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalpeers());
  }

  // uint64 txPerBlock = 8;
  if (this->txperblock() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->txperblock());
  }

  // uint64 averageTxBytes = 9;
  if (this->averagetxbytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->averagetxbytes());
  }

  // uint64 averageOrdersPerBlock = 10;
  if (this->averageordersperblock() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->averageordersperblock());
  }

  // uint64 tradesPerSecond = 11;
  if (this->tradespersecond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tradespersecond());
  }

  // uint64 ordersPerSecond = 12;
  if (this->orderspersecond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->orderspersecond());
  }

  // uint64 totalMarkets = 13;
  if (this->totalmarkets() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalmarkets());
  }

  // .vega.ChainStatus status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // uint32 orderSubscriptions = 21;
  if (this->ordersubscriptions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ordersubscriptions());
  }

  // uint64 totalAmendOrder = 16;
  if (this->totalamendorder() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalamendorder());
  }

  // uint64 totalCancelOrder = 17;
  if (this->totalcancelorder() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalcancelorder());
  }

  // uint64 totalCreateOrder = 18;
  if (this->totalcreateorder() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalcreateorder());
  }

  // uint64 totalOrders = 19;
  if (this->totalorders() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalorders());
  }

  // uint64 totalTrades = 20;
  if (this->totaltrades() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totaltrades());
  }

  // uint32 tradeSubscriptions = 22;
  if (this->tradesubscriptions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tradesubscriptions());
  }

  // uint32 candleSubscriptions = 23;
  if (this->candlesubscriptions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->candlesubscriptions());
  }

  // uint32 marketDepthSubscriptions = 24;
  if (this->marketdepthsubscriptions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->marketdepthsubscriptions());
  }

  // uint32 positionsSubscriptions = 25;
  if (this->positionssubscriptions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->positionssubscriptions());
  }

  // uint32 accountSubscriptions = 26;
  if (this->accountsubscriptions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountsubscriptions());
  }

  // uint32 marketDataSubscriptions = 27;
  if (this->marketdatasubscriptions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->marketdatasubscriptions());
  }

  // uint64 blockDuration = 31;
  if (this->blockduration() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->blockduration());
  }

  // uint32 marketDepthUpdatesSubscriptions = 34;
  if (this->marketdepthupdatessubscriptions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->marketdepthupdatessubscriptions());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Statistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  const Statistics* source =
      ::google::protobuf::DynamicCastToGenerated<Statistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Statistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Statistics)
    MergeFrom(*source);
  }
}

void Statistics::MergeFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.genesistime().size() > 0) {

    genesistime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.genesistime_);
  }
  if (from.currenttime().size() > 0) {

    currenttime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currenttime_);
  }
  if (from.vegatime().size() > 0) {

    vegatime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vegatime_);
  }
  if (from.appversionhash().size() > 0) {

    appversionhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appversionhash_);
  }
  if (from.appversion().size() > 0) {

    appversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appversion_);
  }
  if (from.chainversion().size() > 0) {

    chainversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chainversion_);
  }
  if (from.uptime().size() > 0) {

    uptime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uptime_);
  }
  if (from.chainid().size() > 0) {

    chainid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chainid_);
  }
  if (from.blockheight() != 0) {
    set_blockheight(from.blockheight());
  }
  if (from.backloglength() != 0) {
    set_backloglength(from.backloglength());
  }
  if (from.totalpeers() != 0) {
    set_totalpeers(from.totalpeers());
  }
  if (from.txperblock() != 0) {
    set_txperblock(from.txperblock());
  }
  if (from.averagetxbytes() != 0) {
    set_averagetxbytes(from.averagetxbytes());
  }
  if (from.averageordersperblock() != 0) {
    set_averageordersperblock(from.averageordersperblock());
  }
  if (from.tradespersecond() != 0) {
    set_tradespersecond(from.tradespersecond());
  }
  if (from.orderspersecond() != 0) {
    set_orderspersecond(from.orderspersecond());
  }
  if (from.totalmarkets() != 0) {
    set_totalmarkets(from.totalmarkets());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.ordersubscriptions() != 0) {
    set_ordersubscriptions(from.ordersubscriptions());
  }
  if (from.totalamendorder() != 0) {
    set_totalamendorder(from.totalamendorder());
  }
  if (from.totalcancelorder() != 0) {
    set_totalcancelorder(from.totalcancelorder());
  }
  if (from.totalcreateorder() != 0) {
    set_totalcreateorder(from.totalcreateorder());
  }
  if (from.totalorders() != 0) {
    set_totalorders(from.totalorders());
  }
  if (from.totaltrades() != 0) {
    set_totaltrades(from.totaltrades());
  }
  if (from.tradesubscriptions() != 0) {
    set_tradesubscriptions(from.tradesubscriptions());
  }
  if (from.candlesubscriptions() != 0) {
    set_candlesubscriptions(from.candlesubscriptions());
  }
  if (from.marketdepthsubscriptions() != 0) {
    set_marketdepthsubscriptions(from.marketdepthsubscriptions());
  }
  if (from.positionssubscriptions() != 0) {
    set_positionssubscriptions(from.positionssubscriptions());
  }
  if (from.accountsubscriptions() != 0) {
    set_accountsubscriptions(from.accountsubscriptions());
  }
  if (from.marketdatasubscriptions() != 0) {
    set_marketdatasubscriptions(from.marketdatasubscriptions());
  }
  if (from.blockduration() != 0) {
    set_blockduration(from.blockduration());
  }
  if (from.marketdepthupdatessubscriptions() != 0) {
    set_marketdepthupdatessubscriptions(from.marketdepthupdatessubscriptions());
  }
}

void Statistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistics::CopyFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistics::IsInitialized() const {
  return true;
}

void Statistics::Swap(Statistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Statistics::InternalSwap(Statistics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  genesistime_.Swap(&other->genesistime_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currenttime_.Swap(&other->currenttime_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vegatime_.Swap(&other->vegatime_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  appversionhash_.Swap(&other->appversionhash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  appversion_.Swap(&other->appversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chainversion_.Swap(&other->chainversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uptime_.Swap(&other->uptime_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chainid_.Swap(&other->chainid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(blockheight_, other->blockheight_);
  swap(backloglength_, other->backloglength_);
  swap(totalpeers_, other->totalpeers_);
  swap(txperblock_, other->txperblock_);
  swap(averagetxbytes_, other->averagetxbytes_);
  swap(averageordersperblock_, other->averageordersperblock_);
  swap(tradespersecond_, other->tradespersecond_);
  swap(orderspersecond_, other->orderspersecond_);
  swap(totalmarkets_, other->totalmarkets_);
  swap(status_, other->status_);
  swap(ordersubscriptions_, other->ordersubscriptions_);
  swap(totalamendorder_, other->totalamendorder_);
  swap(totalcancelorder_, other->totalcancelorder_);
  swap(totalcreateorder_, other->totalcreateorder_);
  swap(totalorders_, other->totalorders_);
  swap(totaltrades_, other->totaltrades_);
  swap(tradesubscriptions_, other->tradesubscriptions_);
  swap(candlesubscriptions_, other->candlesubscriptions_);
  swap(marketdepthsubscriptions_, other->marketdepthsubscriptions_);
  swap(positionssubscriptions_, other->positionssubscriptions_);
  swap(accountsubscriptions_, other->accountsubscriptions_);
  swap(marketdatasubscriptions_, other->marketdatasubscriptions_);
  swap(blockduration_, other->blockduration_);
  swap(marketdepthupdatessubscriptions_, other->marketdepthupdatessubscriptions_);
}

::google::protobuf::Metadata Statistics::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Deposit::InitAsDefaultInstance() {
}
class Deposit::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Deposit::kIdFieldNumber;
const int Deposit::kStatusFieldNumber;
const int Deposit::kPartyIDFieldNumber;
const int Deposit::kAssetFieldNumber;
const int Deposit::kAmountFieldNumber;
const int Deposit::kTxHashFieldNumber;
const int Deposit::kCreditedTimestampFieldNumber;
const int Deposit::kCreatedTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Deposit::Deposit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Deposit)
}
Deposit::Deposit(const Deposit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset().size() > 0) {
    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.amount().size() > 0) {
    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  txhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txhash().size() > 0) {
    txhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txhash_);
  }
  ::memcpy(&creditedtimestamp_, &from.creditedtimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&creditedtimestamp_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:vega.Deposit)
}

void Deposit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Deposit_proto_2fvega_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creditedtimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&creditedtimestamp_)) + sizeof(status_));
}

Deposit::~Deposit() {
  // @@protoc_insertion_point(destructor:vega.Deposit)
  SharedDtor();
}

void Deposit::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Deposit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Deposit& Deposit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Deposit_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Deposit::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Deposit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creditedtimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&creditedtimestamp_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Deposit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Deposit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Deposit.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.Deposit.Status status = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::vega::Deposit_Status>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string partyID = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Deposit.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string asset = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Deposit.asset");
        object = msg->mutable_asset();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string amount = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Deposit.amount");
        object = msg->mutable_amount();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string txHash = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Deposit.txHash");
        object = msg->mutable_txhash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 creditedTimestamp = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_creditedtimestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 createdTimestamp = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_createdtimestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Deposit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Deposit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Deposit.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Deposit.Status status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::vega::Deposit_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Deposit.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset().data(), static_cast<int>(this->asset().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Deposit.asset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string amount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->amount().data(), static_cast<int>(this->amount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Deposit.amount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string txHash = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txhash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txhash().data(), static_cast<int>(this->txhash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Deposit.txHash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 creditedTimestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creditedtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 createdTimestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createdtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Deposit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Deposit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Deposit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Deposit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .vega.Deposit.Status status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // string partyID = 3;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->partyid(), output);
  }

  // string asset = 4;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.asset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->asset(), output);
  }

  // string amount = 5;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), static_cast<int>(this->amount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->amount(), output);
  }

  // string txHash = 6;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), static_cast<int>(this->txhash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.txHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->txhash(), output);
  }

  // int64 creditedTimestamp = 7;
  if (this->creditedtimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->creditedtimestamp(), output);
  }

  // int64 createdTimestamp = 8;
  if (this->createdtimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->createdtimestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Deposit)
}

::google::protobuf::uint8* Deposit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Deposit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .vega.Deposit.Status status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // string partyID = 3;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->partyid(), target);
  }

  // string asset = 4;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.asset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->asset(), target);
  }

  // string amount = 5;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), static_cast<int>(this->amount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->amount(), target);
  }

  // string txHash = 6;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), static_cast<int>(this->txhash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.txHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->txhash(), target);
  }

  // int64 creditedTimestamp = 7;
  if (this->creditedtimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->creditedtimestamp(), target);
  }

  // int64 createdTimestamp = 8;
  if (this->createdtimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->createdtimestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Deposit)
  return target;
}

size_t Deposit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Deposit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string partyID = 3;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string asset = 4;
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset());
  }

  // string amount = 5;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->amount());
  }

  // string txHash = 6;
  if (this->txhash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txhash());
  }

  // int64 creditedTimestamp = 7;
  if (this->creditedtimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->creditedtimestamp());
  }

  // int64 createdTimestamp = 8;
  if (this->createdtimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->createdtimestamp());
  }

  // .vega.Deposit.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deposit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Deposit)
  GOOGLE_DCHECK_NE(&from, this);
  const Deposit* source =
      ::google::protobuf::DynamicCastToGenerated<Deposit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Deposit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Deposit)
    MergeFrom(*source);
  }
}

void Deposit::MergeFrom(const Deposit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Deposit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.asset().size() > 0) {

    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  if (from.txhash().size() > 0) {

    txhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txhash_);
  }
  if (from.creditedtimestamp() != 0) {
    set_creditedtimestamp(from.creditedtimestamp());
  }
  if (from.createdtimestamp() != 0) {
    set_createdtimestamp(from.createdtimestamp());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Deposit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Deposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deposit::CopyFrom(const Deposit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Deposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deposit::IsInitialized() const {
  return true;
}

void Deposit::Swap(Deposit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Deposit::InternalSwap(Deposit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_.Swap(&other->asset_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  amount_.Swap(&other->amount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  txhash_.Swap(&other->txhash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(creditedtimestamp_, other->creditedtimestamp_);
  swap(createdtimestamp_, other->createdtimestamp_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata Deposit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Withdrawal::InitAsDefaultInstance() {
  ::vega::_Withdrawal_default_instance_._instance.get_mutable()->ext_ = const_cast< ::vega::WithdrawExt*>(
      ::vega::WithdrawExt::internal_default_instance());
}
class Withdrawal::HasBitSetters {
 public:
  static const ::vega::WithdrawExt& ext(const Withdrawal* msg);
};

const ::vega::WithdrawExt&
Withdrawal::HasBitSetters::ext(const Withdrawal* msg) {
  return *msg->ext_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Withdrawal::kIdFieldNumber;
const int Withdrawal::kPartyIDFieldNumber;
const int Withdrawal::kAmountFieldNumber;
const int Withdrawal::kAssetFieldNumber;
const int Withdrawal::kStatusFieldNumber;
const int Withdrawal::kRefFieldNumber;
const int Withdrawal::kExpiryFieldNumber;
const int Withdrawal::kTxHashFieldNumber;
const int Withdrawal::kCreatedTimestampFieldNumber;
const int Withdrawal::kWithdrawnTimestampFieldNumber;
const int Withdrawal::kExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Withdrawal::Withdrawal()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Withdrawal)
}
Withdrawal::Withdrawal(const Withdrawal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset().size() > 0) {
    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ref().size() > 0) {
    ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_);
  }
  txhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txhash().size() > 0) {
    txhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txhash_);
  }
  if (from.has_ext()) {
    ext_ = new ::vega::WithdrawExt(*from.ext_);
  } else {
    ext_ = nullptr;
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:vega.Withdrawal)
}

void Withdrawal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Withdrawal_proto_2fvega_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ext_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&ext_)) + sizeof(status_));
}

Withdrawal::~Withdrawal() {
  // @@protoc_insertion_point(destructor:vega.Withdrawal)
  SharedDtor();
}

void Withdrawal::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_;
}

void Withdrawal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Withdrawal& Withdrawal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Withdrawal_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Withdrawal::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Withdrawal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ext_ != nullptr) {
    delete ext_;
  }
  ext_ = nullptr;
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Withdrawal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Withdrawal*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Withdrawal.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string partyID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Withdrawal.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 amount = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string asset = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Withdrawal.asset");
        object = msg->mutable_asset();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.Withdrawal.Status status = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::vega::Withdrawal_Status>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string ref = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Withdrawal.ref");
        object = msg->mutable_ref();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 expiry = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_expiry(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string txHash = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Withdrawal.txHash");
        object = msg->mutable_txhash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 createdTimestamp = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_createdtimestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 withdrawnTimestamp = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_withdrawntimestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.WithdrawExt ext = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::WithdrawExt::_InternalParse;
        object = msg->mutable_ext();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Withdrawal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Withdrawal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Withdrawal.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Withdrawal.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset().data(), static_cast<int>(this->asset().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Withdrawal.asset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Withdrawal.Status status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::vega::Withdrawal_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ref = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ref().data(), static_cast<int>(this->ref().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Withdrawal.ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 expiry = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string txHash = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txhash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->txhash().data(), static_cast<int>(this->txhash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Withdrawal.txHash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 createdTimestamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createdtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 withdrawnTimestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &withdrawntimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.WithdrawExt ext = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Withdrawal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Withdrawal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Withdrawal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Withdrawal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partyid(), output);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  // string asset = 4;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.asset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->asset(), output);
  }

  // .vega.Withdrawal.Status status = 5;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // string ref = 6;
  if (this->ref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ref().data(), static_cast<int>(this->ref().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.ref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ref(), output);
  }

  // int64 expiry = 7;
  if (this->expiry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->expiry(), output);
  }

  // string txHash = 8;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), static_cast<int>(this->txhash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.txHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->txhash(), output);
  }

  // int64 createdTimestamp = 9;
  if (this->createdtimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->createdtimestamp(), output);
  }

  // int64 withdrawnTimestamp = 10;
  if (this->withdrawntimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->withdrawntimestamp(), output);
  }

  // .vega.WithdrawExt ext = 11;
  if (this->has_ext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::ext(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Withdrawal)
}

::google::protobuf::uint8* Withdrawal::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Withdrawal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partyid(), target);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  // string asset = 4;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.asset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->asset(), target);
  }

  // .vega.Withdrawal.Status status = 5;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // string ref = 6;
  if (this->ref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ref().data(), static_cast<int>(this->ref().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.ref");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ref(), target);
  }

  // int64 expiry = 7;
  if (this->expiry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->expiry(), target);
  }

  // string txHash = 8;
  if (this->txhash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->txhash().data(), static_cast<int>(this->txhash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.txHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->txhash(), target);
  }

  // int64 createdTimestamp = 9;
  if (this->createdtimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->createdtimestamp(), target);
  }

  // int64 withdrawnTimestamp = 10;
  if (this->withdrawntimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->withdrawntimestamp(), target);
  }

  // .vega.WithdrawExt ext = 11;
  if (this->has_ext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::ext(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Withdrawal)
  return target;
}

size_t Withdrawal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Withdrawal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string asset = 4;
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset());
  }

  // string ref = 6;
  if (this->ref().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ref());
  }

  // string txHash = 8;
  if (this->txhash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txhash());
  }

  // .vega.WithdrawExt ext = 11;
  if (this->has_ext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ext_);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  // int64 expiry = 7;
  if (this->expiry() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expiry());
  }

  // int64 createdTimestamp = 9;
  if (this->createdtimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->createdtimestamp());
  }

  // int64 withdrawnTimestamp = 10;
  if (this->withdrawntimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->withdrawntimestamp());
  }

  // .vega.Withdrawal.Status status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Withdrawal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Withdrawal)
  GOOGLE_DCHECK_NE(&from, this);
  const Withdrawal* source =
      ::google::protobuf::DynamicCastToGenerated<Withdrawal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Withdrawal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Withdrawal)
    MergeFrom(*source);
  }
}

void Withdrawal::MergeFrom(const Withdrawal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Withdrawal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.asset().size() > 0) {

    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  if (from.ref().size() > 0) {

    ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_);
  }
  if (from.txhash().size() > 0) {

    txhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txhash_);
  }
  if (from.has_ext()) {
    mutable_ext()->::vega::WithdrawExt::MergeFrom(from.ext());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.expiry() != 0) {
    set_expiry(from.expiry());
  }
  if (from.createdtimestamp() != 0) {
    set_createdtimestamp(from.createdtimestamp());
  }
  if (from.withdrawntimestamp() != 0) {
    set_withdrawntimestamp(from.withdrawntimestamp());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Withdrawal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Withdrawal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Withdrawal::CopyFrom(const Withdrawal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Withdrawal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Withdrawal::IsInitialized() const {
  return true;
}

void Withdrawal::Swap(Withdrawal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Withdrawal::InternalSwap(Withdrawal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_.Swap(&other->asset_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ref_.Swap(&other->ref_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  txhash_.Swap(&other->txhash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ext_, other->ext_);
  swap(amount_, other->amount_);
  swap(expiry_, other->expiry_);
  swap(createdtimestamp_, other->createdtimestamp_);
  swap(withdrawntimestamp_, other->withdrawntimestamp_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata Withdrawal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WithdrawSubmission::InitAsDefaultInstance() {
  ::vega::_WithdrawSubmission_default_instance_._instance.get_mutable()->ext_ = const_cast< ::vega::WithdrawExt*>(
      ::vega::WithdrawExt::internal_default_instance());
}
class WithdrawSubmission::HasBitSetters {
 public:
  static const ::vega::WithdrawExt& ext(const WithdrawSubmission* msg);
};

const ::vega::WithdrawExt&
WithdrawSubmission::HasBitSetters::ext(const WithdrawSubmission* msg) {
  return *msg->ext_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WithdrawSubmission::kPartyIDFieldNumber;
const int WithdrawSubmission::kAmountFieldNumber;
const int WithdrawSubmission::kAssetFieldNumber;
const int WithdrawSubmission::kExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WithdrawSubmission::WithdrawSubmission()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.WithdrawSubmission)
}
WithdrawSubmission::WithdrawSubmission(const WithdrawSubmission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset().size() > 0) {
    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  if (from.has_ext()) {
    ext_ = new ::vega::WithdrawExt(*from.ext_);
  } else {
    ext_ = nullptr;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:vega.WithdrawSubmission)
}

void WithdrawSubmission::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WithdrawSubmission_proto_2fvega_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ext_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&ext_)) + sizeof(amount_));
}

WithdrawSubmission::~WithdrawSubmission() {
  // @@protoc_insertion_point(destructor:vega.WithdrawSubmission)
  SharedDtor();
}

void WithdrawSubmission::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_;
}

void WithdrawSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawSubmission& WithdrawSubmission::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WithdrawSubmission_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void WithdrawSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.WithdrawSubmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ext_ != nullptr) {
    delete ext_;
  }
  ext_ = nullptr;
  amount_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WithdrawSubmission::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WithdrawSubmission*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string partyID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.WithdrawSubmission.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 amount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string asset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.WithdrawSubmission.asset");
        object = msg->mutable_asset();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.WithdrawExt ext = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::WithdrawExt::_InternalParse;
        object = msg->mutable_ext();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WithdrawSubmission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.WithdrawSubmission)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partyID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.WithdrawSubmission.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset().data(), static_cast<int>(this->asset().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.WithdrawSubmission.asset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.WithdrawExt ext = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.WithdrawSubmission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.WithdrawSubmission)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WithdrawSubmission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.WithdrawSubmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.WithdrawSubmission.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partyid(), output);
  }

  // uint64 amount = 2;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->amount(), output);
  }

  // string asset = 3;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.WithdrawSubmission.asset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->asset(), output);
  }

  // .vega.WithdrawExt ext = 4;
  if (this->has_ext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::ext(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.WithdrawSubmission)
}

::google::protobuf::uint8* WithdrawSubmission::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.WithdrawSubmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.WithdrawSubmission.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partyid(), target);
  }

  // uint64 amount = 2;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->amount(), target);
  }

  // string asset = 3;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.WithdrawSubmission.asset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->asset(), target);
  }

  // .vega.WithdrawExt ext = 4;
  if (this->has_ext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::ext(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.WithdrawSubmission)
  return target;
}

size_t WithdrawSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.WithdrawSubmission)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string asset = 3;
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset());
  }

  // .vega.WithdrawExt ext = 4;
  if (this->has_ext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ext_);
  }

  // uint64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawSubmission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.WithdrawSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawSubmission* source =
      ::google::protobuf::DynamicCastToGenerated<WithdrawSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.WithdrawSubmission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.WithdrawSubmission)
    MergeFrom(*source);
  }
}

void WithdrawSubmission::MergeFrom(const WithdrawSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.WithdrawSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.asset().size() > 0) {

    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  if (from.has_ext()) {
    mutable_ext()->::vega::WithdrawExt::MergeFrom(from.ext());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void WithdrawSubmission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.WithdrawSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawSubmission::CopyFrom(const WithdrawSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.WithdrawSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawSubmission::IsInitialized() const {
  return true;
}

void WithdrawSubmission::Swap(WithdrawSubmission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WithdrawSubmission::InternalSwap(WithdrawSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_.Swap(&other->asset_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ext_, other->ext_);
  swap(amount_, other->amount_);
}

::google::protobuf::Metadata WithdrawSubmission::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WithdrawExt::InitAsDefaultInstance() {
  ::vega::_WithdrawExt_default_instance_.erc20_ = const_cast< ::vega::Erc20WithdrawExt*>(
      ::vega::Erc20WithdrawExt::internal_default_instance());
}
class WithdrawExt::HasBitSetters {
 public:
  static const ::vega::Erc20WithdrawExt& erc20(const WithdrawExt* msg);
};

const ::vega::Erc20WithdrawExt&
WithdrawExt::HasBitSetters::erc20(const WithdrawExt* msg) {
  return *msg->ext_.erc20_;
}
void WithdrawExt::set_allocated_erc20(::vega::Erc20WithdrawExt* erc20) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ext();
  if (erc20) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      erc20 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, erc20, submessage_arena);
    }
    set_has_erc20();
    ext_.erc20_ = erc20;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.WithdrawExt.erc20)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WithdrawExt::kErc20FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WithdrawExt::WithdrawExt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.WithdrawExt)
}
WithdrawExt::WithdrawExt(const WithdrawExt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_ext();
  switch (from.ext_case()) {
    case kErc20: {
      mutable_erc20()->::vega::Erc20WithdrawExt::MergeFrom(from.erc20());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.WithdrawExt)
}

void WithdrawExt::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WithdrawExt_proto_2fvega_2eproto.base);
  clear_has_ext();
}

WithdrawExt::~WithdrawExt() {
  // @@protoc_insertion_point(destructor:vega.WithdrawExt)
  SharedDtor();
}

void WithdrawExt::SharedDtor() {
  if (has_ext()) {
    clear_ext();
  }
}

void WithdrawExt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawExt& WithdrawExt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WithdrawExt_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void WithdrawExt::clear_ext() {
// @@protoc_insertion_point(one_of_clear_start:vega.WithdrawExt)
  switch (ext_case()) {
    case kErc20: {
      delete ext_.erc20_;
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXT_NOT_SET;
}


void WithdrawExt::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.WithdrawExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ext();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WithdrawExt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WithdrawExt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Erc20WithdrawExt erc20 = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Erc20WithdrawExt::_InternalParse;
        object = msg->mutable_erc20();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WithdrawExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.WithdrawExt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Erc20WithdrawExt erc20 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_erc20()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.WithdrawExt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.WithdrawExt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WithdrawExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.WithdrawExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Erc20WithdrawExt erc20 = 1;
  if (has_erc20()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::erc20(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.WithdrawExt)
}

::google::protobuf::uint8* WithdrawExt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.WithdrawExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Erc20WithdrawExt erc20 = 1;
  if (has_erc20()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::erc20(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.WithdrawExt)
  return target;
}

size_t WithdrawExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.WithdrawExt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ext_case()) {
    // .vega.Erc20WithdrawExt erc20 = 1;
    case kErc20: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ext_.erc20_);
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawExt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.WithdrawExt)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawExt* source =
      ::google::protobuf::DynamicCastToGenerated<WithdrawExt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.WithdrawExt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.WithdrawExt)
    MergeFrom(*source);
  }
}

void WithdrawExt::MergeFrom(const WithdrawExt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.WithdrawExt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ext_case()) {
    case kErc20: {
      mutable_erc20()->::vega::Erc20WithdrawExt::MergeFrom(from.erc20());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
}

void WithdrawExt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.WithdrawExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawExt::CopyFrom(const WithdrawExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.WithdrawExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawExt::IsInitialized() const {
  return true;
}

void WithdrawExt::Swap(WithdrawExt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WithdrawExt::InternalSwap(WithdrawExt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ext_, other->ext_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata WithdrawExt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Erc20WithdrawExt::InitAsDefaultInstance() {
}
class Erc20WithdrawExt::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Erc20WithdrawExt::kReceiverAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Erc20WithdrawExt::Erc20WithdrawExt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Erc20WithdrawExt)
}
Erc20WithdrawExt::Erc20WithdrawExt(const Erc20WithdrawExt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  receiveraddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.receiveraddress().size() > 0) {
    receiveraddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiveraddress_);
  }
  // @@protoc_insertion_point(copy_constructor:vega.Erc20WithdrawExt)
}

void Erc20WithdrawExt::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Erc20WithdrawExt_proto_2fvega_2eproto.base);
  receiveraddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Erc20WithdrawExt::~Erc20WithdrawExt() {
  // @@protoc_insertion_point(destructor:vega.Erc20WithdrawExt)
  SharedDtor();
}

void Erc20WithdrawExt::SharedDtor() {
  receiveraddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Erc20WithdrawExt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Erc20WithdrawExt& Erc20WithdrawExt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Erc20WithdrawExt_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Erc20WithdrawExt::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Erc20WithdrawExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiveraddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Erc20WithdrawExt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Erc20WithdrawExt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string receiverAddress = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Erc20WithdrawExt.receiverAddress");
        object = msg->mutable_receiveraddress();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Erc20WithdrawExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Erc20WithdrawExt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string receiverAddress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiveraddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->receiveraddress().data(), static_cast<int>(this->receiveraddress().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Erc20WithdrawExt.receiverAddress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Erc20WithdrawExt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Erc20WithdrawExt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Erc20WithdrawExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Erc20WithdrawExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string receiverAddress = 1;
  if (this->receiveraddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiveraddress().data(), static_cast<int>(this->receiveraddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Erc20WithdrawExt.receiverAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->receiveraddress(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Erc20WithdrawExt)
}

::google::protobuf::uint8* Erc20WithdrawExt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Erc20WithdrawExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string receiverAddress = 1;
  if (this->receiveraddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiveraddress().data(), static_cast<int>(this->receiveraddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Erc20WithdrawExt.receiverAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->receiveraddress(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Erc20WithdrawExt)
  return target;
}

size_t Erc20WithdrawExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Erc20WithdrawExt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string receiverAddress = 1;
  if (this->receiveraddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->receiveraddress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Erc20WithdrawExt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Erc20WithdrawExt)
  GOOGLE_DCHECK_NE(&from, this);
  const Erc20WithdrawExt* source =
      ::google::protobuf::DynamicCastToGenerated<Erc20WithdrawExt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Erc20WithdrawExt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Erc20WithdrawExt)
    MergeFrom(*source);
  }
}

void Erc20WithdrawExt::MergeFrom(const Erc20WithdrawExt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Erc20WithdrawExt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receiveraddress().size() > 0) {

    receiveraddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiveraddress_);
  }
}

void Erc20WithdrawExt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Erc20WithdrawExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Erc20WithdrawExt::CopyFrom(const Erc20WithdrawExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Erc20WithdrawExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erc20WithdrawExt::IsInitialized() const {
  return true;
}

void Erc20WithdrawExt::Swap(Erc20WithdrawExt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Erc20WithdrawExt::InternalSwap(Erc20WithdrawExt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  receiveraddress_.Swap(&other->receiveraddress_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Erc20WithdrawExt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderAmendment::InitAsDefaultInstance() {
  ::vega::_OrderAmendment_default_instance_._instance.get_mutable()->price_ = const_cast< ::vega::Price*>(
      ::vega::Price::internal_default_instance());
  ::vega::_OrderAmendment_default_instance_._instance.get_mutable()->expiresat_ = const_cast< ::vega::Timestamp*>(
      ::vega::Timestamp::internal_default_instance());
  ::vega::_OrderAmendment_default_instance_._instance.get_mutable()->peggedoffset_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
}
class OrderAmendment::HasBitSetters {
 public:
  static const ::vega::Price& price(const OrderAmendment* msg);
  static const ::vega::Timestamp& expiresat(const OrderAmendment* msg);
  static const ::google::protobuf::Int64Value& peggedoffset(const OrderAmendment* msg);
};

const ::vega::Price&
OrderAmendment::HasBitSetters::price(const OrderAmendment* msg) {
  return *msg->price_;
}
const ::vega::Timestamp&
OrderAmendment::HasBitSetters::expiresat(const OrderAmendment* msg) {
  return *msg->expiresat_;
}
const ::google::protobuf::Int64Value&
OrderAmendment::HasBitSetters::peggedoffset(const OrderAmendment* msg) {
  return *msg->peggedoffset_;
}
void OrderAmendment::clear_peggedoffset() {
  if (GetArenaNoVirtual() == nullptr && peggedoffset_ != nullptr) {
    delete peggedoffset_;
  }
  peggedoffset_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderAmendment::kOrderIDFieldNumber;
const int OrderAmendment::kPartyIDFieldNumber;
const int OrderAmendment::kMarketIDFieldNumber;
const int OrderAmendment::kPriceFieldNumber;
const int OrderAmendment::kSizeDeltaFieldNumber;
const int OrderAmendment::kExpiresAtFieldNumber;
const int OrderAmendment::kTimeInForceFieldNumber;
const int OrderAmendment::kPeggedOffsetFieldNumber;
const int OrderAmendment::kPeggedReferenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderAmendment::OrderAmendment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.OrderAmendment)
}
OrderAmendment::OrderAmendment(const OrderAmendment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orderid().size() > 0) {
    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.has_price()) {
    price_ = new ::vega::Price(*from.price_);
  } else {
    price_ = nullptr;
  }
  if (from.has_expiresat()) {
    expiresat_ = new ::vega::Timestamp(*from.expiresat_);
  } else {
    expiresat_ = nullptr;
  }
  if (from.has_peggedoffset()) {
    peggedoffset_ = new ::google::protobuf::Int64Value(*from.peggedoffset_);
  } else {
    peggedoffset_ = nullptr;
  }
  ::memcpy(&sizedelta_, &from.sizedelta_,
    static_cast<size_t>(reinterpret_cast<char*>(&peggedreference_) -
    reinterpret_cast<char*>(&sizedelta_)) + sizeof(peggedreference_));
  // @@protoc_insertion_point(copy_constructor:vega.OrderAmendment)
}

void OrderAmendment::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderAmendment_proto_2fvega_2eproto.base);
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peggedreference_) -
      reinterpret_cast<char*>(&price_)) + sizeof(peggedreference_));
}

OrderAmendment::~OrderAmendment() {
  // @@protoc_insertion_point(destructor:vega.OrderAmendment)
  SharedDtor();
}

void OrderAmendment::SharedDtor() {
  orderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete price_;
  if (this != internal_default_instance()) delete expiresat_;
  if (this != internal_default_instance()) delete peggedoffset_;
}

void OrderAmendment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderAmendment& OrderAmendment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderAmendment_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void OrderAmendment::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.OrderAmendment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expiresat_ != nullptr) {
    delete expiresat_;
  }
  expiresat_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && peggedoffset_ != nullptr) {
    delete peggedoffset_;
  }
  peggedoffset_ = nullptr;
  ::memset(&sizedelta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peggedreference_) -
      reinterpret_cast<char*>(&sizedelta_)) + sizeof(peggedreference_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderAmendment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderAmendment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string orderID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.OrderAmendment.orderID");
        object = msg->mutable_orderid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string partyID = 2 [(.validator.field) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.OrderAmendment.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string marketID = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.OrderAmendment.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.Price price = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Price::_InternalParse;
        object = msg->mutable_price();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 sizeDelta = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_sizedelta(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.Timestamp expiresAt = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Timestamp::_InternalParse;
        object = msg->mutable_expiresat();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.Order.TimeInForce timeInForce = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_timeinforce(static_cast<::vega::Order_TimeInForce>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.protobuf.Int64Value peggedOffset = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Int64Value::_InternalParse;
        object = msg->mutable_peggedoffset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.PeggedReference peggedReference = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_peggedreference(static_cast<::vega::PeggedReference>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderAmendment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.OrderAmendment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string orderID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderid().data(), static_cast<int>(this->orderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.OrderAmendment.orderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 2 [(.validator.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.OrderAmendment.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string marketID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.OrderAmendment.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Price price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_price()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 sizeDelta = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sizedelta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Timestamp expiresAt = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expiresat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Order.TimeInForce timeInForce = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_timeinforce(static_cast< ::vega::Order_TimeInForce >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value peggedOffset = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peggedoffset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.PeggedReference peggedReference = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_peggedreference(static_cast< ::vega::PeggedReference >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.OrderAmendment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.OrderAmendment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderAmendment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.OrderAmendment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1 [(.validator.field) = {
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderAmendment.orderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->orderid(), output);
  }

  // string partyID = 2 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderAmendment.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partyid(), output);
  }

  // string marketID = 3;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderAmendment.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->marketid(), output);
  }

  // .vega.Price price = 4;
  if (this->has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::price(this), output);
  }

  // int64 sizeDelta = 5;
  if (this->sizedelta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sizedelta(), output);
  }

  // .vega.Timestamp expiresAt = 6;
  if (this->has_expiresat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::expiresat(this), output);
  }

  // .vega.Order.TimeInForce timeInForce = 7;
  if (this->timeinforce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->timeinforce(), output);
  }

  // .google.protobuf.Int64Value peggedOffset = 8;
  if (this->has_peggedoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::peggedoffset(this), output);
  }

  // .vega.PeggedReference peggedReference = 9;
  if (this->peggedreference() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->peggedreference(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.OrderAmendment)
}

::google::protobuf::uint8* OrderAmendment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.OrderAmendment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1 [(.validator.field) = {
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderAmendment.orderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // string partyID = 2 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderAmendment.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partyid(), target);
  }

  // string marketID = 3;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderAmendment.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->marketid(), target);
  }

  // .vega.Price price = 4;
  if (this->has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::price(this), target);
  }

  // int64 sizeDelta = 5;
  if (this->sizedelta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->sizedelta(), target);
  }

  // .vega.Timestamp expiresAt = 6;
  if (this->has_expiresat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::expiresat(this), target);
  }

  // .vega.Order.TimeInForce timeInForce = 7;
  if (this->timeinforce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->timeinforce(), target);
  }

  // .google.protobuf.Int64Value peggedOffset = 8;
  if (this->has_peggedoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::peggedoffset(this), target);
  }

  // .vega.PeggedReference peggedReference = 9;
  if (this->peggedreference() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->peggedreference(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.OrderAmendment)
  return target;
}

size_t OrderAmendment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.OrderAmendment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderID = 1 [(.validator.field) = {
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderid());
  }

  // string partyID = 2 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string marketID = 3;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // .vega.Price price = 4;
  if (this->has_price()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *price_);
  }

  // .vega.Timestamp expiresAt = 6;
  if (this->has_expiresat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expiresat_);
  }

  // .google.protobuf.Int64Value peggedOffset = 8;
  if (this->has_peggedoffset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peggedoffset_);
  }

  // int64 sizeDelta = 5;
  if (this->sizedelta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sizedelta());
  }

  // .vega.Order.TimeInForce timeInForce = 7;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
  }

  // .vega.PeggedReference peggedReference = 9;
  if (this->peggedreference() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->peggedreference());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderAmendment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.OrderAmendment)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderAmendment* source =
      ::google::protobuf::DynamicCastToGenerated<OrderAmendment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.OrderAmendment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.OrderAmendment)
    MergeFrom(*source);
  }
}

void OrderAmendment::MergeFrom(const OrderAmendment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.OrderAmendment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.has_price()) {
    mutable_price()->::vega::Price::MergeFrom(from.price());
  }
  if (from.has_expiresat()) {
    mutable_expiresat()->::vega::Timestamp::MergeFrom(from.expiresat());
  }
  if (from.has_peggedoffset()) {
    mutable_peggedoffset()->::google::protobuf::Int64Value::MergeFrom(from.peggedoffset());
  }
  if (from.sizedelta() != 0) {
    set_sizedelta(from.sizedelta());
  }
  if (from.timeinforce() != 0) {
    set_timeinforce(from.timeinforce());
  }
  if (from.peggedreference() != 0) {
    set_peggedreference(from.peggedreference());
  }
}

void OrderAmendment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.OrderAmendment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderAmendment::CopyFrom(const OrderAmendment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.OrderAmendment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderAmendment::IsInitialized() const {
  return true;
}

void OrderAmendment::Swap(OrderAmendment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderAmendment::InternalSwap(OrderAmendment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(expiresat_, other->expiresat_);
  swap(peggedoffset_, other->peggedoffset_);
  swap(sizedelta_, other->sizedelta_);
  swap(timeinforce_, other->timeinforce_);
  swap(peggedreference_, other->peggedreference_);
}

::google::protobuf::Metadata OrderAmendment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderSubmission::InitAsDefaultInstance() {
  ::vega::_OrderSubmission_default_instance_._instance.get_mutable()->peggedorder_ = const_cast< ::vega::PeggedOrder*>(
      ::vega::PeggedOrder::internal_default_instance());
}
class OrderSubmission::HasBitSetters {
 public:
  static const ::vega::PeggedOrder& peggedorder(const OrderSubmission* msg);
};

const ::vega::PeggedOrder&
OrderSubmission::HasBitSetters::peggedorder(const OrderSubmission* msg) {
  return *msg->peggedorder_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderSubmission::kIdFieldNumber;
const int OrderSubmission::kMarketIDFieldNumber;
const int OrderSubmission::kPartyIDFieldNumber;
const int OrderSubmission::kPriceFieldNumber;
const int OrderSubmission::kSizeFieldNumber;
const int OrderSubmission::kSideFieldNumber;
const int OrderSubmission::kTimeInForceFieldNumber;
const int OrderSubmission::kExpiresAtFieldNumber;
const int OrderSubmission::kTypeFieldNumber;
const int OrderSubmission::kReferenceFieldNumber;
const int OrderSubmission::kPeggedOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderSubmission::OrderSubmission()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.OrderSubmission)
}
OrderSubmission::OrderSubmission(const OrderSubmission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference().size() > 0) {
    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.has_peggedorder()) {
    peggedorder_ = new ::vega::PeggedOrder(*from.peggedorder_);
  } else {
    peggedorder_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&price_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:vega.OrderSubmission)
}

void OrderSubmission::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderSubmission_proto_2fvega_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&peggedorder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&peggedorder_)) + sizeof(type_));
}

OrderSubmission::~OrderSubmission() {
  // @@protoc_insertion_point(destructor:vega.OrderSubmission)
  SharedDtor();
}

void OrderSubmission::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peggedorder_;
}

void OrderSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderSubmission& OrderSubmission::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderSubmission_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void OrderSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.OrderSubmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && peggedorder_ != nullptr) {
    delete peggedorder_;
  }
  peggedorder_ = nullptr;
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&price_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderSubmission::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderSubmission*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.OrderSubmission.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string marketID = 2 [(.validator.field) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.OrderSubmission.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string partyID = 3 [(.validator.field) = {
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.OrderSubmission.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 price = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_price(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 size = 5 [(.validator.field) = {
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.Side side = 6 [(.validator.field) = {
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_side(static_cast<::vega::Side>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.Order.TimeInForce timeInForce = 7 [(.validator.field) = {
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_timeinforce(static_cast<::vega::Order_TimeInForce>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 expiresAt = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_expiresat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.Order.Type type = 9 [(.validator.field) = {
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::vega::Order_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string reference = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.OrderSubmission.reference");
        object = msg->mutable_reference();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.PeggedOrder peggedOrder = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::PeggedOrder::_InternalParse;
        object = msg->mutable_peggedorder();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderSubmission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.OrderSubmission)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.OrderSubmission.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string marketID = 2 [(.validator.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.OrderSubmission.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 3 [(.validator.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.OrderSubmission.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 5 [(.validator.field) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Side side = 6 [(.validator.field) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side(static_cast< ::vega::Side >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Order.TimeInForce timeInForce = 7 [(.validator.field) = {
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_timeinforce(static_cast< ::vega::Order_TimeInForce >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 expiresAt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiresat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Order.Type type = 9 [(.validator.field) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::vega::Order_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference().data(), static_cast<int>(this->reference().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.OrderSubmission.reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.PeggedOrder peggedOrder = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peggedorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.OrderSubmission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.OrderSubmission)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderSubmission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.OrderSubmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.validator.field) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderSubmission.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string marketID = 2 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderSubmission.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->marketid(), output);
  }

  // string partyID = 3 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderSubmission.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->partyid(), output);
  }

  // uint64 price = 4;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->price(), output);
  }

  // uint64 size = 5 [(.validator.field) = {
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->size(), output);
  }

  // .vega.Side side = 6 [(.validator.field) = {
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->side(), output);
  }

  // .vega.Order.TimeInForce timeInForce = 7 [(.validator.field) = {
  if (this->timeinforce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->timeinforce(), output);
  }

  // int64 expiresAt = 8;
  if (this->expiresat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->expiresat(), output);
  }

  // .vega.Order.Type type = 9 [(.validator.field) = {
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // string reference = 10;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderSubmission.reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->reference(), output);
  }

  // .vega.PeggedOrder peggedOrder = 11;
  if (this->has_peggedorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::peggedorder(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.OrderSubmission)
}

::google::protobuf::uint8* OrderSubmission::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.OrderSubmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.validator.field) = {
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderSubmission.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string marketID = 2 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderSubmission.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->marketid(), target);
  }

  // string partyID = 3 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderSubmission.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->partyid(), target);
  }

  // uint64 price = 4;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->price(), target);
  }

  // uint64 size = 5 [(.validator.field) = {
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->size(), target);
  }

  // .vega.Side side = 6 [(.validator.field) = {
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->side(), target);
  }

  // .vega.Order.TimeInForce timeInForce = 7 [(.validator.field) = {
  if (this->timeinforce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->timeinforce(), target);
  }

  // int64 expiresAt = 8;
  if (this->expiresat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->expiresat(), target);
  }

  // .vega.Order.Type type = 9 [(.validator.field) = {
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // string reference = 10;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderSubmission.reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->reference(), target);
  }

  // .vega.PeggedOrder peggedOrder = 11;
  if (this->has_peggedorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::peggedorder(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.OrderSubmission)
  return target;
}

size_t OrderSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.OrderSubmission)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.validator.field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string marketID = 2 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string partyID = 3 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string reference = 10;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference());
  }

  // .vega.PeggedOrder peggedOrder = 11;
  if (this->has_peggedorder()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peggedorder_);
  }

  // uint64 price = 4;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->price());
  }

  // uint64 size = 5 [(.validator.field) = {
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // .vega.Side side = 6 [(.validator.field) = {
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
  }

  // .vega.Order.TimeInForce timeInForce = 7 [(.validator.field) = {
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
  }

  // int64 expiresAt = 8;
  if (this->expiresat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expiresat());
  }

  // .vega.Order.Type type = 9 [(.validator.field) = {
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderSubmission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.OrderSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderSubmission* source =
      ::google::protobuf::DynamicCastToGenerated<OrderSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.OrderSubmission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.OrderSubmission)
    MergeFrom(*source);
  }
}

void OrderSubmission::MergeFrom(const OrderSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.OrderSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.has_peggedorder()) {
    mutable_peggedorder()->::vega::PeggedOrder::MergeFrom(from.peggedorder());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.timeinforce() != 0) {
    set_timeinforce(from.timeinforce());
  }
  if (from.expiresat() != 0) {
    set_expiresat(from.expiresat());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void OrderSubmission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.OrderSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderSubmission::CopyFrom(const OrderSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.OrderSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderSubmission::IsInitialized() const {
  return true;
}

void OrderSubmission::Swap(OrderSubmission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderSubmission::InternalSwap(OrderSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_.Swap(&other->reference_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(peggedorder_, other->peggedorder_);
  swap(price_, other->price_);
  swap(size_, other->size_);
  swap(side_, other->side_);
  swap(timeinforce_, other->timeinforce_);
  swap(expiresat_, other->expiresat_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata OrderSubmission::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderCancellation::InitAsDefaultInstance() {
}
class OrderCancellation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderCancellation::kOrderIDFieldNumber;
const int OrderCancellation::kMarketIDFieldNumber;
const int OrderCancellation::kPartyIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderCancellation::OrderCancellation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.OrderCancellation)
}
OrderCancellation::OrderCancellation(const OrderCancellation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orderid().size() > 0) {
    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  // @@protoc_insertion_point(copy_constructor:vega.OrderCancellation)
}

void OrderCancellation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderCancellation_proto_2fvega_2eproto.base);
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OrderCancellation::~OrderCancellation() {
  // @@protoc_insertion_point(destructor:vega.OrderCancellation)
  SharedDtor();
}

void OrderCancellation::SharedDtor() {
  orderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderCancellation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderCancellation& OrderCancellation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderCancellation_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void OrderCancellation::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.OrderCancellation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderCancellation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderCancellation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string orderID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.OrderCancellation.orderID");
        object = msg->mutable_orderid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string marketID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.OrderCancellation.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string partyID = 3 [(.validator.field) = {
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.OrderCancellation.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderCancellation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.OrderCancellation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string orderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderid().data(), static_cast<int>(this->orderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.OrderCancellation.orderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string marketID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.OrderCancellation.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 3 [(.validator.field) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.OrderCancellation.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.OrderCancellation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.OrderCancellation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderCancellation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.OrderCancellation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderCancellation.orderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->orderid(), output);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderCancellation.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->marketid(), output);
  }

  // string partyID = 3 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderCancellation.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->partyid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.OrderCancellation)
}

::google::protobuf::uint8* OrderCancellation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.OrderCancellation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderCancellation.orderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderCancellation.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->marketid(), target);
  }

  // string partyID = 3 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.OrderCancellation.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->partyid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.OrderCancellation)
  return target;
}

size_t OrderCancellation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.OrderCancellation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderID = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderid());
  }

  // string marketID = 2;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string partyID = 3 [(.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderCancellation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.OrderCancellation)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderCancellation* source =
      ::google::protobuf::DynamicCastToGenerated<OrderCancellation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.OrderCancellation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.OrderCancellation)
    MergeFrom(*source);
  }
}

void OrderCancellation::MergeFrom(const OrderCancellation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.OrderCancellation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
}

void OrderCancellation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.OrderCancellation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCancellation::CopyFrom(const OrderCancellation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.OrderCancellation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCancellation::IsInitialized() const {
  return true;
}

void OrderCancellation::Swap(OrderCancellation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderCancellation::InternalSwap(OrderCancellation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata OrderCancellation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeRegistration::InitAsDefaultInstance() {
}
class NodeRegistration::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeRegistration::kPubKeyFieldNumber;
const int NodeRegistration::kChainPubKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeRegistration::NodeRegistration()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.NodeRegistration)
}
NodeRegistration::NodeRegistration(const NodeRegistration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pubkey().size() > 0) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  chainpubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chainpubkey().size() > 0) {
    chainpubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chainpubkey_);
  }
  // @@protoc_insertion_point(copy_constructor:vega.NodeRegistration)
}

void NodeRegistration::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeRegistration_proto_2fvega_2eproto.base);
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chainpubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NodeRegistration::~NodeRegistration() {
  // @@protoc_insertion_point(destructor:vega.NodeRegistration)
  SharedDtor();
}

void NodeRegistration::SharedDtor() {
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chainpubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeRegistration& NodeRegistration::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeRegistration_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void NodeRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NodeRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chainpubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeRegistration::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeRegistration*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pubKey = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pubkey();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes chainPubKey = 2 [(.validator.field) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_chainpubkey();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeRegistration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.NodeRegistration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pubKey = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes chainPubKey = 2 [(.validator.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chainpubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.NodeRegistration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.NodeRegistration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeRegistration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.NodeRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pubKey = 1 [(.validator.field) = {
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pubkey(), output);
  }

  // bytes chainPubKey = 2 [(.validator.field) = {
  if (this->chainpubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->chainpubkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.NodeRegistration)
}

::google::protobuf::uint8* NodeRegistration::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NodeRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pubKey = 1 [(.validator.field) = {
  if (this->pubkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pubkey(), target);
  }

  // bytes chainPubKey = 2 [(.validator.field) = {
  if (this->chainpubkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->chainpubkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NodeRegistration)
  return target;
}

size_t NodeRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NodeRegistration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pubKey = 1 [(.validator.field) = {
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pubkey());
  }

  // bytes chainPubKey = 2 [(.validator.field) = {
  if (this->chainpubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chainpubkey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeRegistration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NodeRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeRegistration* source =
      ::google::protobuf::DynamicCastToGenerated<NodeRegistration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NodeRegistration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NodeRegistration)
    MergeFrom(*source);
  }
}

void NodeRegistration::MergeFrom(const NodeRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NodeRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.chainpubkey().size() > 0) {

    chainpubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chainpubkey_);
  }
}

void NodeRegistration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NodeRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRegistration::CopyFrom(const NodeRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NodeRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRegistration::IsInitialized() const {
  return true;
}

void NodeRegistration::Swap(NodeRegistration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeRegistration::InternalSwap(NodeRegistration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chainpubkey_.Swap(&other->chainpubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata NodeRegistration::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeVote::InitAsDefaultInstance() {
}
class NodeVote::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeVote::kPubKeyFieldNumber;
const int NodeVote::kReferenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeVote::NodeVote()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.NodeVote)
}
NodeVote::NodeVote(const NodeVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pubkey().size() > 0) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference().size() > 0) {
    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  // @@protoc_insertion_point(copy_constructor:vega.NodeVote)
}

void NodeVote::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeVote_proto_2fvega_2eproto.base);
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NodeVote::~NodeVote() {
  // @@protoc_insertion_point(destructor:vega.NodeVote)
  SharedDtor();
}

void NodeVote::SharedDtor() {
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeVote& NodeVote::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeVote_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void NodeVote::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NodeVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeVote::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeVote*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pubKey = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pubkey();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string reference = 2 [(.validator.field) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.NodeVote.reference");
        object = msg->mutable_reference();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.NodeVote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pubKey = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference = 2 [(.validator.field) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference().data(), static_cast<int>(this->reference().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.NodeVote.reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.NodeVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.NodeVote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.NodeVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pubKey = 1 [(.validator.field) = {
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pubkey(), output);
  }

  // string reference = 2 [(.validator.field) = {
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.NodeVote.reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reference(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.NodeVote)
}

::google::protobuf::uint8* NodeVote::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NodeVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pubKey = 1 [(.validator.field) = {
  if (this->pubkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pubkey(), target);
  }

  // string reference = 2 [(.validator.field) = {
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.NodeVote.reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reference(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NodeVote)
  return target;
}

size_t NodeVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NodeVote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pubKey = 1 [(.validator.field) = {
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pubkey());
  }

  // string reference = 2 [(.validator.field) = {
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NodeVote)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeVote* source =
      ::google::protobuf::DynamicCastToGenerated<NodeVote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NodeVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NodeVote)
    MergeFrom(*source);
  }
}

void NodeVote::MergeFrom(const NodeVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NodeVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
}

void NodeVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NodeVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeVote::CopyFrom(const NodeVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NodeVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeVote::IsInitialized() const {
  return true;
}

void NodeVote::Swap(NodeVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeVote::InternalSwap(NodeVote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_.Swap(&other->reference_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata NodeVote::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Account::InitAsDefaultInstance() {
}
class Account::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Account::kIdFieldNumber;
const int Account::kOwnerFieldNumber;
const int Account::kBalanceFieldNumber;
const int Account::kAssetFieldNumber;
const int Account::kMarketIDFieldNumber;
const int Account::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Account::Account()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Account)
}
Account::Account(const Account& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.owner().size() > 0) {
    owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset().size() > 0) {
    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  ::memcpy(&balance_, &from.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:vega.Account)
}

void Account::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Account_proto_2fvega_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(type_));
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:vega.Account)
  SharedDtor();
}

void Account::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Account& Account::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Account_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Account::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Account*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Account.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string owner = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Account.owner");
        object = msg->mutable_owner();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 balance = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_balance(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string asset = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Account.asset");
        object = msg->mutable_asset();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string marketID = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Account.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.AccountType type = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::vega::AccountType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Account)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Account.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string owner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner().data(), static_cast<int>(this->owner().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Account.owner"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 balance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset().data(), static_cast<int>(this->asset().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Account.asset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string marketID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Account.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.AccountType type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::vega::AccountType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Account)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Account.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string owner = 2;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), static_cast<int>(this->owner().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Account.owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->owner(), output);
  }

  // uint64 balance = 3;
  if (this->balance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->balance(), output);
  }

  // string asset = 4;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Account.asset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->asset(), output);
  }

  // string marketID = 5;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Account.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->marketid(), output);
  }

  // .vega.AccountType type = 6;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Account)
}

::google::protobuf::uint8* Account::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Account)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Account.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string owner = 2;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), static_cast<int>(this->owner().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Account.owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->owner(), target);
  }

  // uint64 balance = 3;
  if (this->balance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->balance(), target);
  }

  // string asset = 4;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Account.asset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->asset(), target);
  }

  // string marketID = 5;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Account.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->marketid(), target);
  }

  // .vega.AccountType type = 6;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Account)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string owner = 2;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner());
  }

  // string asset = 4;
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset());
  }

  // string marketID = 5;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // uint64 balance = 3;
  if (this->balance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->balance());
  }

  // .vega.AccountType type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Account::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const Account* source =
      ::google::protobuf::DynamicCastToGenerated<Account>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Account)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.owner().size() > 0) {

    owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.asset().size() > 0) {

    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.balance() != 0) {
    set_balance(from.balance());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Account::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::Swap(Account* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Account::InternalSwap(Account* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  owner_.Swap(&other->owner_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_.Swap(&other->asset_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(balance_, other->balance_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata Account::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FinancialAmount::InitAsDefaultInstance() {
}
class FinancialAmount::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FinancialAmount::kAmountFieldNumber;
const int FinancialAmount::kAssetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FinancialAmount::FinancialAmount()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.FinancialAmount)
}
FinancialAmount::FinancialAmount(const FinancialAmount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset().size() > 0) {
    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:vega.FinancialAmount)
}

void FinancialAmount::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FinancialAmount_proto_2fvega_2eproto.base);
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

FinancialAmount::~FinancialAmount() {
  // @@protoc_insertion_point(destructor:vega.FinancialAmount)
  SharedDtor();
}

void FinancialAmount::SharedDtor() {
  asset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FinancialAmount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinancialAmount& FinancialAmount::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FinancialAmount_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void FinancialAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.FinancialAmount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FinancialAmount::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FinancialAmount*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 amount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string asset = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.FinancialAmount.asset");
        object = msg->mutable_asset();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FinancialAmount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.FinancialAmount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset().data(), static_cast<int>(this->asset().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.FinancialAmount.asset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.FinancialAmount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.FinancialAmount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FinancialAmount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.FinancialAmount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 amount = 1;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->amount(), output);
  }

  // string asset = 2;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.FinancialAmount.asset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->asset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.FinancialAmount)
}

::google::protobuf::uint8* FinancialAmount::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.FinancialAmount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 amount = 1;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->amount(), target);
  }

  // string asset = 2;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.FinancialAmount.asset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->asset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.FinancialAmount)
  return target;
}

size_t FinancialAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.FinancialAmount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset = 2;
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset());
  }

  // int64 amount = 1;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinancialAmount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.FinancialAmount)
  GOOGLE_DCHECK_NE(&from, this);
  const FinancialAmount* source =
      ::google::protobuf::DynamicCastToGenerated<FinancialAmount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.FinancialAmount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.FinancialAmount)
    MergeFrom(*source);
  }
}

void FinancialAmount::MergeFrom(const FinancialAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.FinancialAmount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset().size() > 0) {

    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void FinancialAmount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.FinancialAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinancialAmount::CopyFrom(const FinancialAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.FinancialAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinancialAmount::IsInitialized() const {
  return true;
}

void FinancialAmount::Swap(FinancialAmount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FinancialAmount::InternalSwap(FinancialAmount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  asset_.Swap(&other->asset_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
}

::google::protobuf::Metadata FinancialAmount::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Transfer::InitAsDefaultInstance() {
  ::vega::_Transfer_default_instance_._instance.get_mutable()->amount_ = const_cast< ::vega::FinancialAmount*>(
      ::vega::FinancialAmount::internal_default_instance());
}
class Transfer::HasBitSetters {
 public:
  static const ::vega::FinancialAmount& amount(const Transfer* msg);
};

const ::vega::FinancialAmount&
Transfer::HasBitSetters::amount(const Transfer* msg) {
  return *msg->amount_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transfer::kOwnerFieldNumber;
const int Transfer::kAmountFieldNumber;
const int Transfer::kTypeFieldNumber;
const int Transfer::kMinAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transfer::Transfer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Transfer)
}
Transfer::Transfer(const Transfer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.owner().size() > 0) {
    owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.has_amount()) {
    amount_ = new ::vega::FinancialAmount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  ::memcpy(&minamount_, &from.minamount_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&minamount_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:vega.Transfer)
}

void Transfer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Transfer_proto_2fvega_2eproto.base);
  owner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(type_));
}

Transfer::~Transfer() {
  // @@protoc_insertion_point(destructor:vega.Transfer)
  SharedDtor();
}

void Transfer::SharedDtor() {
  owner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transfer& Transfer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Transfer_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Transfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  ::memset(&minamount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&minamount_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Transfer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Transfer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string owner = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Transfer.owner");
        object = msg->mutable_owner();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.FinancialAmount amount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::FinancialAmount::_InternalParse;
        object = msg->mutable_amount();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .vega.TransferType type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::vega::TransferType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 minAmount = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_minamount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Transfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Transfer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string owner = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner().data(), static_cast<int>(this->owner().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Transfer.owner"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.FinancialAmount amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.TransferType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::vega::TransferType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 minAmount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Transfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Transfer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Transfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Transfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner = 1;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), static_cast<int>(this->owner().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Transfer.owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->owner(), output);
  }

  // .vega.FinancialAmount amount = 2;
  if (this->has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::amount(this), output);
  }

  // .vega.TransferType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // int64 minAmount = 4;
  if (this->minamount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->minamount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Transfer)
}

::google::protobuf::uint8* Transfer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Transfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner = 1;
  if (this->owner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), static_cast<int>(this->owner().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Transfer.owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->owner(), target);
  }

  // .vega.FinancialAmount amount = 2;
  if (this->has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::amount(this), target);
  }

  // .vega.TransferType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // int64 minAmount = 4;
  if (this->minamount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->minamount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Transfer)
  return target;
}

size_t Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Transfer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 1;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner());
  }

  // .vega.FinancialAmount amount = 2;
  if (this->has_amount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // int64 minAmount = 4;
  if (this->minamount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->minamount());
  }

  // .vega.TransferType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transfer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const Transfer* source =
      ::google::protobuf::DynamicCastToGenerated<Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Transfer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Transfer)
    MergeFrom(*source);
  }
}

void Transfer::MergeFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner().size() > 0) {

    owner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.has_amount()) {
    mutable_amount()->::vega::FinancialAmount::MergeFrom(from.amount());
  }
  if (from.minamount() != 0) {
    set_minamount(from.minamount());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Transfer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transfer::CopyFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transfer::IsInitialized() const {
  return true;
}

void Transfer::Swap(Transfer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transfer::InternalSwap(Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  owner_.Swap(&other->owner_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(minamount_, other->minamount_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata Transfer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransferRequest::InitAsDefaultInstance() {
}
class TransferRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferRequest::kFromAccountFieldNumber;
const int TransferRequest::kToAccountFieldNumber;
const int TransferRequest::kAmountFieldNumber;
const int TransferRequest::kMinAmountFieldNumber;
const int TransferRequest::kAssetFieldNumber;
const int TransferRequest::kReferenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferRequest::TransferRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.TransferRequest)
}
TransferRequest::TransferRequest(const TransferRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fromaccount_(from.fromaccount_),
      toaccount_(from.toaccount_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset().size() > 0) {
    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference().size() > 0) {
    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&minamount_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(minamount_));
  // @@protoc_insertion_point(copy_constructor:vega.TransferRequest)
}

void TransferRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransferRequest_proto_2fvega_2eproto.base);
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minamount_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(minamount_));
}

TransferRequest::~TransferRequest() {
  // @@protoc_insertion_point(destructor:vega.TransferRequest)
  SharedDtor();
}

void TransferRequest::SharedDtor() {
  asset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransferRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferRequest& TransferRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransferRequest_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void TransferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TransferRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fromaccount_.Clear();
  toaccount_.Clear();
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minamount_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(minamount_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransferRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransferRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.Account fromAccount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Account::_InternalParse;
          object = msg->add_fromaccount();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .vega.Account toAccount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::Account::_InternalParse;
          object = msg->add_toaccount();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // uint64 amount = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 minAmount = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_minamount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string asset = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.TransferRequest.asset");
        object = msg->mutable_asset();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string reference = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.TransferRequest.reference");
        object = msg->mutable_reference();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransferRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.TransferRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.Account fromAccount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fromaccount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.Account toAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_toaccount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 minAmount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset().data(), static_cast<int>(this->asset().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.TransferRequest.asset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference().data(), static_cast<int>(this->reference().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.TransferRequest.reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.TransferRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.TransferRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransferRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.TransferRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Account fromAccount = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fromaccount_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->fromaccount(static_cast<int>(i)),
      output);
  }

  // repeated .vega.Account toAccount = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->toaccount_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->toaccount(static_cast<int>(i)),
      output);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  // uint64 minAmount = 4;
  if (this->minamount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->minamount(), output);
  }

  // string asset = 5;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.TransferRequest.asset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->asset(), output);
  }

  // string reference = 6;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.TransferRequest.reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->reference(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.TransferRequest)
}

::google::protobuf::uint8* TransferRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TransferRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Account fromAccount = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fromaccount_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->fromaccount(static_cast<int>(i)), target);
  }

  // repeated .vega.Account toAccount = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->toaccount_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->toaccount(static_cast<int>(i)), target);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  // uint64 minAmount = 4;
  if (this->minamount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->minamount(), target);
  }

  // string asset = 5;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.TransferRequest.asset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->asset(), target);
  }

  // string reference = 6;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.TransferRequest.reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reference(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TransferRequest)
  return target;
}

size_t TransferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TransferRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Account fromAccount = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fromaccount_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fromaccount(static_cast<int>(i)));
    }
  }

  // repeated .vega.Account toAccount = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->toaccount_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->toaccount(static_cast<int>(i)));
    }
  }

  // string asset = 5;
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset());
  }

  // string reference = 6;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference());
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  // uint64 minAmount = 4;
  if (this->minamount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->minamount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TransferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TransferRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TransferRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TransferRequest)
    MergeFrom(*source);
  }
}

void TransferRequest::MergeFrom(const TransferRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TransferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fromaccount_.MergeFrom(from.fromaccount_);
  toaccount_.MergeFrom(from.toaccount_);
  if (from.asset().size() > 0) {

    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.minamount() != 0) {
    set_minamount(from.minamount());
  }
}

void TransferRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TransferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferRequest::CopyFrom(const TransferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TransferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferRequest::IsInitialized() const {
  return true;
}

void TransferRequest::Swap(TransferRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferRequest::InternalSwap(TransferRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&fromaccount_)->InternalSwap(CastToBase(&other->fromaccount_));
  CastToBase(&toaccount_)->InternalSwap(CastToBase(&other->toaccount_));
  asset_.Swap(&other->asset_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_.Swap(&other->reference_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(minamount_, other->minamount_);
}

::google::protobuf::Metadata TransferRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LedgerEntry::InitAsDefaultInstance() {
}
class LedgerEntry::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LedgerEntry::kFromAccountFieldNumber;
const int LedgerEntry::kToAccountFieldNumber;
const int LedgerEntry::kAmountFieldNumber;
const int LedgerEntry::kReferenceFieldNumber;
const int LedgerEntry::kTypeFieldNumber;
const int LedgerEntry::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LedgerEntry::LedgerEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.LedgerEntry)
}
LedgerEntry::LedgerEntry(const LedgerEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fromaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fromaccount().size() > 0) {
    fromaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromaccount_);
  }
  toaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.toaccount().size() > 0) {
    toaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.toaccount_);
  }
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reference().size() > 0) {
    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:vega.LedgerEntry)
}

void LedgerEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LedgerEntry_proto_2fvega_2eproto.base);
  fromaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(timestamp_));
}

LedgerEntry::~LedgerEntry() {
  // @@protoc_insertion_point(destructor:vega.LedgerEntry)
  SharedDtor();
}

void LedgerEntry::SharedDtor() {
  fromaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LedgerEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LedgerEntry& LedgerEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LedgerEntry_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void LedgerEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LedgerEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fromaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LedgerEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LedgerEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string fromAccount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.LedgerEntry.fromAccount");
        object = msg->mutable_fromaccount();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string toAccount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.LedgerEntry.toAccount");
        object = msg->mutable_toaccount();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 amount = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string reference = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.LedgerEntry.reference");
        object = msg->mutable_reference();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string type = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.LedgerEntry.type");
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 timestamp = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LedgerEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.LedgerEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string fromAccount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fromaccount().data(), static_cast<int>(this->fromaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.LedgerEntry.fromAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string toAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->toaccount().data(), static_cast<int>(this->toaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.LedgerEntry.toAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference().data(), static_cast<int>(this->reference().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.LedgerEntry.reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.LedgerEntry.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.LedgerEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.LedgerEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LedgerEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.LedgerEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fromAccount = 1;
  if (this->fromaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromaccount().data(), static_cast<int>(this->fromaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.fromAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fromaccount(), output);
  }

  // string toAccount = 2;
  if (this->toaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->toaccount().data(), static_cast<int>(this->toaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.toAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->toaccount(), output);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  // string reference = 4;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reference(), output);
  }

  // string type = 5;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.LedgerEntry)
}

::google::protobuf::uint8* LedgerEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LedgerEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fromAccount = 1;
  if (this->fromaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromaccount().data(), static_cast<int>(this->fromaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.fromAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromaccount(), target);
  }

  // string toAccount = 2;
  if (this->toaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->toaccount().data(), static_cast<int>(this->toaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.toAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->toaccount(), target);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  // string reference = 4;
  if (this->reference().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference().data(), static_cast<int>(this->reference().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reference(), target);
  }

  // string type = 5;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LedgerEntry)
  return target;
}

size_t LedgerEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LedgerEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fromAccount = 1;
  if (this->fromaccount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromaccount());
  }

  // string toAccount = 2;
  if (this->toaccount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->toaccount());
  }

  // string reference = 4;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reference());
  }

  // string type = 5;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LedgerEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LedgerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LedgerEntry* source =
      ::google::protobuf::DynamicCastToGenerated<LedgerEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LedgerEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LedgerEntry)
    MergeFrom(*source);
  }
}

void LedgerEntry::MergeFrom(const LedgerEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LedgerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fromaccount().size() > 0) {

    fromaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromaccount_);
  }
  if (from.toaccount().size() > 0) {

    toaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.toaccount_);
  }
  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void LedgerEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LedgerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedgerEntry::CopyFrom(const LedgerEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LedgerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedgerEntry::IsInitialized() const {
  return true;
}

void LedgerEntry::Swap(LedgerEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LedgerEntry::InternalSwap(LedgerEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fromaccount_.Swap(&other->fromaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  toaccount_.Swap(&other->toaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reference_.Swap(&other->reference_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata LedgerEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransferBalance::InitAsDefaultInstance() {
  ::vega::_TransferBalance_default_instance_._instance.get_mutable()->account_ = const_cast< ::vega::Account*>(
      ::vega::Account::internal_default_instance());
}
class TransferBalance::HasBitSetters {
 public:
  static const ::vega::Account& account(const TransferBalance* msg);
};

const ::vega::Account&
TransferBalance::HasBitSetters::account(const TransferBalance* msg) {
  return *msg->account_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferBalance::kAccountFieldNumber;
const int TransferBalance::kBalanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferBalance::TransferBalance()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.TransferBalance)
}
TransferBalance::TransferBalance(const TransferBalance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::vega::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  balance_ = from.balance_;
  // @@protoc_insertion_point(copy_constructor:vega.TransferBalance)
}

void TransferBalance::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransferBalance_proto_2fvega_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balance_) -
      reinterpret_cast<char*>(&account_)) + sizeof(balance_));
}

TransferBalance::~TransferBalance() {
  // @@protoc_insertion_point(destructor:vega.TransferBalance)
  SharedDtor();
}

void TransferBalance::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
}

void TransferBalance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferBalance& TransferBalance::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransferBalance_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void TransferBalance::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TransferBalance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  balance_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransferBalance::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransferBalance*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.Account account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Account::_InternalParse;
        object = msg->mutable_account();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint64 balance = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_balance(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransferBalance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.TransferBalance)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.Account account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 balance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.TransferBalance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.TransferBalance)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransferBalance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.TransferBalance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Account account = 1;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // uint64 balance = 2;
  if (this->balance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->balance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.TransferBalance)
}

::google::protobuf::uint8* TransferBalance::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TransferBalance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Account account = 1;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // uint64 balance = 2;
  if (this->balance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->balance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TransferBalance)
  return target;
}

size_t TransferBalance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TransferBalance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Account account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // uint64 balance = 2;
  if (this->balance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->balance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferBalance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TransferBalance)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferBalance* source =
      ::google::protobuf::DynamicCastToGenerated<TransferBalance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TransferBalance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TransferBalance)
    MergeFrom(*source);
  }
}

void TransferBalance::MergeFrom(const TransferBalance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TransferBalance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    mutable_account()->::vega::Account::MergeFrom(from.account());
  }
  if (from.balance() != 0) {
    set_balance(from.balance());
  }
}

void TransferBalance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TransferBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferBalance::CopyFrom(const TransferBalance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TransferBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferBalance::IsInitialized() const {
  return true;
}

void TransferBalance::Swap(TransferBalance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferBalance::InternalSwap(TransferBalance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_, other->account_);
  swap(balance_, other->balance_);
}

::google::protobuf::Metadata TransferBalance::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransferResponse::InitAsDefaultInstance() {
}
class TransferResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferResponse::kTransfersFieldNumber;
const int TransferResponse::kBalancesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferResponse::TransferResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.TransferResponse)
}
TransferResponse::TransferResponse(const TransferResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      transfers_(from.transfers_),
      balances_(from.balances_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.TransferResponse)
}

void TransferResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransferResponse_proto_2fvega_2eproto.base);
}

TransferResponse::~TransferResponse() {
  // @@protoc_insertion_point(destructor:vega.TransferResponse)
  SharedDtor();
}

void TransferResponse::SharedDtor() {
}

void TransferResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferResponse& TransferResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransferResponse_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void TransferResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TransferResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transfers_.Clear();
  balances_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransferResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransferResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .vega.LedgerEntry transfers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::LedgerEntry::_InternalParse;
          object = msg->add_transfers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .vega.TransferBalance balances = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::TransferBalance::_InternalParse;
          object = msg->add_balances();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransferResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.TransferResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vega.LedgerEntry transfers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_transfers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.TransferBalance balances = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_balances()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.TransferResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.TransferResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransferResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.TransferResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.LedgerEntry transfers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transfers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->transfers(static_cast<int>(i)),
      output);
  }

  // repeated .vega.TransferBalance balances = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->balances_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->balances(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.TransferResponse)
}

::google::protobuf::uint8* TransferResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TransferResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.LedgerEntry transfers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transfers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->transfers(static_cast<int>(i)), target);
  }

  // repeated .vega.TransferBalance balances = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->balances_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->balances(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TransferResponse)
  return target;
}

size_t TransferResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TransferResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.LedgerEntry transfers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->transfers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->transfers(static_cast<int>(i)));
    }
  }

  // repeated .vega.TransferBalance balances = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->balances_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->balances(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TransferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferResponse* source =
      ::google::protobuf::DynamicCastToGenerated<TransferResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TransferResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TransferResponse)
    MergeFrom(*source);
  }
}

void TransferResponse::MergeFrom(const TransferResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TransferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transfers_.MergeFrom(from.transfers_);
  balances_.MergeFrom(from.balances_);
}

void TransferResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TransferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferResponse::CopyFrom(const TransferResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TransferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferResponse::IsInitialized() const {
  return true;
}

void TransferResponse::Swap(TransferResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferResponse::InternalSwap(TransferResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&transfers_)->InternalSwap(CastToBase(&other->transfers_));
  CastToBase(&balances_)->InternalSwap(CastToBase(&other->balances_));
}

::google::protobuf::Metadata TransferResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarginLevels::InitAsDefaultInstance() {
}
class MarginLevels::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarginLevels::kMaintenanceMarginFieldNumber;
const int MarginLevels::kSearchLevelFieldNumber;
const int MarginLevels::kInitialMarginFieldNumber;
const int MarginLevels::kCollateralReleaseLevelFieldNumber;
const int MarginLevels::kPartyIDFieldNumber;
const int MarginLevels::kMarketIDFieldNumber;
const int MarginLevels::kAssetFieldNumber;
const int MarginLevels::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarginLevels::MarginLevels()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.MarginLevels)
}
MarginLevels::MarginLevels(const MarginLevels& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.asset().size() > 0) {
    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  ::memcpy(&maintenancemargin_, &from.maintenancemargin_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&maintenancemargin_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:vega.MarginLevels)
}

void MarginLevels::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarginLevels_proto_2fvega_2eproto.base);
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maintenancemargin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&maintenancemargin_)) + sizeof(timestamp_));
}

MarginLevels::~MarginLevels() {
  // @@protoc_insertion_point(destructor:vega.MarginLevels)
  SharedDtor();
}

void MarginLevels::SharedDtor() {
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarginLevels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginLevels& MarginLevels::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarginLevels_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void MarginLevels::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarginLevels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maintenancemargin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&maintenancemargin_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarginLevels::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarginLevels*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 maintenanceMargin = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_maintenancemargin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 searchLevel = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_searchlevel(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 initialMargin = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_initialmargin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 collateralReleaseLevel = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_collateralreleaselevel(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string partyID = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.MarginLevels.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string marketID = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.MarginLevels.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string asset = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.MarginLevels.asset");
        object = msg->mutable_asset();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 timestamp = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarginLevels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.MarginLevels)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 maintenanceMargin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maintenancemargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 searchLevel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &searchlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 initialMargin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &initialmargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 collateralReleaseLevel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collateralreleaselevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.MarginLevels.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string marketID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.MarginLevels.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string asset = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset().data(), static_cast<int>(this->asset().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.MarginLevels.asset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.MarginLevels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.MarginLevels)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarginLevels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.MarginLevels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 maintenanceMargin = 1;
  if (this->maintenancemargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->maintenancemargin(), output);
  }

  // uint64 searchLevel = 2;
  if (this->searchlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->searchlevel(), output);
  }

  // uint64 initialMargin = 3;
  if (this->initialmargin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->initialmargin(), output);
  }

  // uint64 collateralReleaseLevel = 4;
  if (this->collateralreleaselevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->collateralreleaselevel(), output);
  }

  // string partyID = 5;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarginLevels.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->partyid(), output);
  }

  // string marketID = 6;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarginLevels.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->marketid(), output);
  }

  // string asset = 7;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarginLevels.asset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->asset(), output);
  }

  // int64 timestamp = 8;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.MarginLevels)
}

::google::protobuf::uint8* MarginLevels::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarginLevels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 maintenanceMargin = 1;
  if (this->maintenancemargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->maintenancemargin(), target);
  }

  // uint64 searchLevel = 2;
  if (this->searchlevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->searchlevel(), target);
  }

  // uint64 initialMargin = 3;
  if (this->initialmargin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->initialmargin(), target);
  }

  // uint64 collateralReleaseLevel = 4;
  if (this->collateralreleaselevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->collateralreleaselevel(), target);
  }

  // string partyID = 5;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarginLevels.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->partyid(), target);
  }

  // string marketID = 6;
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarginLevels.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->marketid(), target);
  }

  // string asset = 7;
  if (this->asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset().data(), static_cast<int>(this->asset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarginLevels.asset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->asset(), target);
  }

  // int64 timestamp = 8;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarginLevels)
  return target;
}

size_t MarginLevels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarginLevels)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 5;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string marketID = 6;
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string asset = 7;
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset());
  }

  // uint64 maintenanceMargin = 1;
  if (this->maintenancemargin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maintenancemargin());
  }

  // uint64 searchLevel = 2;
  if (this->searchlevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->searchlevel());
  }

  // uint64 initialMargin = 3;
  if (this->initialmargin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->initialmargin());
  }

  // uint64 collateralReleaseLevel = 4;
  if (this->collateralreleaselevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->collateralreleaselevel());
  }

  // int64 timestamp = 8;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginLevels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarginLevels)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginLevels* source =
      ::google::protobuf::DynamicCastToGenerated<MarginLevels>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarginLevels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarginLevels)
    MergeFrom(*source);
  }
}

void MarginLevels::MergeFrom(const MarginLevels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarginLevels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.asset().size() > 0) {

    asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_);
  }
  if (from.maintenancemargin() != 0) {
    set_maintenancemargin(from.maintenancemargin());
  }
  if (from.searchlevel() != 0) {
    set_searchlevel(from.searchlevel());
  }
  if (from.initialmargin() != 0) {
    set_initialmargin(from.initialmargin());
  }
  if (from.collateralreleaselevel() != 0) {
    set_collateralreleaselevel(from.collateralreleaselevel());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void MarginLevels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarginLevels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginLevels::CopyFrom(const MarginLevels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarginLevels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginLevels::IsInitialized() const {
  return true;
}

void MarginLevels::Swap(MarginLevels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarginLevels::InternalSwap(MarginLevels* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_.Swap(&other->asset_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(maintenancemargin_, other->maintenancemargin_);
  swap(searchlevel_, other->searchlevel_);
  swap(initialmargin_, other->initialmargin_);
  swap(collateralreleaselevel_, other->collateralreleaselevel_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata MarginLevels::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarketData::InitAsDefaultInstance() {
}
class MarketData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketData::kMarkPriceFieldNumber;
const int MarketData::kBestBidPriceFieldNumber;
const int MarketData::kBestBidVolumeFieldNumber;
const int MarketData::kBestOfferPriceFieldNumber;
const int MarketData::kBestOfferVolumeFieldNumber;
const int MarketData::kBestStaticBidPriceFieldNumber;
const int MarketData::kBestStaticBidVolumeFieldNumber;
const int MarketData::kBestStaticOfferPriceFieldNumber;
const int MarketData::kBestStaticOfferVolumeFieldNumber;
const int MarketData::kMidPriceFieldNumber;
const int MarketData::kStaticMidPriceFieldNumber;
const int MarketData::kMarketFieldNumber;
const int MarketData::kTimestampFieldNumber;
const int MarketData::kOpenInterestFieldNumber;
const int MarketData::kAuctionEndFieldNumber;
const int MarketData::kAuctionStartFieldNumber;
const int MarketData::kIndicativePriceFieldNumber;
const int MarketData::kIndicativeVolumeFieldNumber;
const int MarketData::kMarketStateFieldNumber;
const int MarketData::kTriggerFieldNumber;
const int MarketData::kTargetStakeFieldNumber;
const int MarketData::kSuppliedStakeFieldNumber;
const int MarketData::kPriceMonitoringBoundsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketData::MarketData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.MarketData)
}
MarketData::MarketData(const MarketData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      pricemonitoringbounds_(from.pricemonitoringbounds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  market_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.market().size() > 0) {
    market_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  targetstake_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.targetstake().size() > 0) {
    targetstake_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetstake_);
  }
  suppliedstake_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.suppliedstake().size() > 0) {
    suppliedstake_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suppliedstake_);
  }
  ::memcpy(&markprice_, &from.markprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&trigger_) -
    reinterpret_cast<char*>(&markprice_)) + sizeof(trigger_));
  // @@protoc_insertion_point(copy_constructor:vega.MarketData)
}

void MarketData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MarketData_proto_2fvega_2eproto.base);
  market_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetstake_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suppliedstake_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&markprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_) -
      reinterpret_cast<char*>(&markprice_)) + sizeof(trigger_));
}

MarketData::~MarketData() {
  // @@protoc_insertion_point(destructor:vega.MarketData)
  SharedDtor();
}

void MarketData::SharedDtor() {
  market_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetstake_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suppliedstake_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketData& MarketData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarketData_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void MarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pricemonitoringbounds_.Clear();
  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetstake_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suppliedstake_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&markprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_) -
      reinterpret_cast<char*>(&markprice_)) + sizeof(trigger_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarketData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarketData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 markPrice = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_markprice(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 bestBidPrice = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_bestbidprice(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 bestBidVolume = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bestbidvolume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 bestOfferPrice = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_bestofferprice(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 bestOfferVolume = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_bestoffervolume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 bestStaticBidPrice = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_beststaticbidprice(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 bestStaticBidVolume = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_beststaticbidvolume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 bestStaticOfferPrice = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_beststaticofferprice(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 bestStaticOfferVolume = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_beststaticoffervolume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 midPrice = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_midprice(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 staticMidPrice = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_staticmidprice(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string market = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.MarketData.market");
        object = msg->mutable_market();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 timestamp = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 openInterest = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_openinterest(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 auctionEnd = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_auctionend(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 auctionStart = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_auctionstart(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 indicativePrice = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_indicativeprice(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 indicativeVolume = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_indicativevolume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.MarketState marketState = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_marketstate(static_cast<::vega::MarketState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.AuctionTrigger trigger = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_trigger(static_cast<::vega::AuctionTrigger>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string targetStake = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.MarketData.targetStake");
        object = msg->mutable_targetstake();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string suppliedStake = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.MarketData.suppliedStake");
        object = msg->mutable_suppliedstake();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .vega.PriceMonitoringBounds priceMonitoringBounds = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::PriceMonitoringBounds::_InternalParse;
          object = msg->add_pricemonitoringbounds();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 442 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.MarketData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 markPrice = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &markprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bestBidPrice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bestbidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bestBidVolume = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bestbidvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bestOfferPrice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bestofferprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bestOfferVolume = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bestoffervolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bestStaticBidPrice = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beststaticbidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bestStaticBidVolume = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beststaticbidvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bestStaticOfferPrice = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beststaticofferprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bestStaticOfferVolume = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &beststaticoffervolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 midPrice = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &midprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 staticMidPrice = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &staticmidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string market = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->market().data(), static_cast<int>(this->market().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.MarketData.market"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 openInterest = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &openinterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 auctionEnd = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &auctionend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 auctionStart = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &auctionstart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 indicativePrice = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &indicativeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 indicativeVolume = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &indicativevolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.MarketState marketState = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_marketstate(static_cast< ::vega::MarketState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.AuctionTrigger trigger = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trigger(static_cast< ::vega::AuctionTrigger >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string targetStake = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetstake()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->targetstake().data(), static_cast<int>(this->targetstake().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.MarketData.targetStake"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string suppliedStake = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suppliedstake()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suppliedstake().data(), static_cast<int>(this->suppliedstake().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.MarketData.suppliedStake"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.PriceMonitoringBounds priceMonitoringBounds = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pricemonitoringbounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.MarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.MarketData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.MarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 markPrice = 1;
  if (this->markprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->markprice(), output);
  }

  // uint64 bestBidPrice = 2;
  if (this->bestbidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bestbidprice(), output);
  }

  // uint64 bestBidVolume = 3;
  if (this->bestbidvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bestbidvolume(), output);
  }

  // uint64 bestOfferPrice = 4;
  if (this->bestofferprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bestofferprice(), output);
  }

  // uint64 bestOfferVolume = 5;
  if (this->bestoffervolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bestoffervolume(), output);
  }

  // uint64 bestStaticBidPrice = 6;
  if (this->beststaticbidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->beststaticbidprice(), output);
  }

  // uint64 bestStaticBidVolume = 7;
  if (this->beststaticbidvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->beststaticbidvolume(), output);
  }

  // uint64 bestStaticOfferPrice = 8;
  if (this->beststaticofferprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->beststaticofferprice(), output);
  }

  // uint64 bestStaticOfferVolume = 9;
  if (this->beststaticoffervolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->beststaticoffervolume(), output);
  }

  // uint64 midPrice = 10;
  if (this->midprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->midprice(), output);
  }

  // uint64 staticMidPrice = 11;
  if (this->staticmidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->staticmidprice(), output);
  }

  // string market = 12;
  if (this->market().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->market().data(), static_cast<int>(this->market().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketData.market");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->market(), output);
  }

  // int64 timestamp = 13;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->timestamp(), output);
  }

  // uint64 openInterest = 14;
  if (this->openinterest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->openinterest(), output);
  }

  // int64 auctionEnd = 15;
  if (this->auctionend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->auctionend(), output);
  }

  // int64 auctionStart = 16;
  if (this->auctionstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->auctionstart(), output);
  }

  // uint64 indicativePrice = 17;
  if (this->indicativeprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->indicativeprice(), output);
  }

  // uint64 indicativeVolume = 18;
  if (this->indicativevolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->indicativevolume(), output);
  }

  // .vega.MarketState marketState = 19;
  if (this->marketstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->marketstate(), output);
  }

  // .vega.AuctionTrigger trigger = 20;
  if (this->trigger() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->trigger(), output);
  }

  // string targetStake = 21;
  if (this->targetstake().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->targetstake().data(), static_cast<int>(this->targetstake().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketData.targetStake");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->targetstake(), output);
  }

  // string suppliedStake = 22;
  if (this->suppliedstake().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suppliedstake().data(), static_cast<int>(this->suppliedstake().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketData.suppliedStake");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->suppliedstake(), output);
  }

  // repeated .vega.PriceMonitoringBounds priceMonitoringBounds = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pricemonitoringbounds_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23,
      this->pricemonitoringbounds(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.MarketData)
}

::google::protobuf::uint8* MarketData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 markPrice = 1;
  if (this->markprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->markprice(), target);
  }

  // uint64 bestBidPrice = 2;
  if (this->bestbidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bestbidprice(), target);
  }

  // uint64 bestBidVolume = 3;
  if (this->bestbidvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bestbidvolume(), target);
  }

  // uint64 bestOfferPrice = 4;
  if (this->bestofferprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bestofferprice(), target);
  }

  // uint64 bestOfferVolume = 5;
  if (this->bestoffervolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->bestoffervolume(), target);
  }

  // uint64 bestStaticBidPrice = 6;
  if (this->beststaticbidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->beststaticbidprice(), target);
  }

  // uint64 bestStaticBidVolume = 7;
  if (this->beststaticbidvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->beststaticbidvolume(), target);
  }

  // uint64 bestStaticOfferPrice = 8;
  if (this->beststaticofferprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->beststaticofferprice(), target);
  }

  // uint64 bestStaticOfferVolume = 9;
  if (this->beststaticoffervolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->beststaticoffervolume(), target);
  }

  // uint64 midPrice = 10;
  if (this->midprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->midprice(), target);
  }

  // uint64 staticMidPrice = 11;
  if (this->staticmidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->staticmidprice(), target);
  }

  // string market = 12;
  if (this->market().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->market().data(), static_cast<int>(this->market().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketData.market");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->market(), target);
  }

  // int64 timestamp = 13;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->timestamp(), target);
  }

  // uint64 openInterest = 14;
  if (this->openinterest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->openinterest(), target);
  }

  // int64 auctionEnd = 15;
  if (this->auctionend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->auctionend(), target);
  }

  // int64 auctionStart = 16;
  if (this->auctionstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->auctionstart(), target);
  }

  // uint64 indicativePrice = 17;
  if (this->indicativeprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->indicativeprice(), target);
  }

  // uint64 indicativeVolume = 18;
  if (this->indicativevolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->indicativevolume(), target);
  }

  // .vega.MarketState marketState = 19;
  if (this->marketstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->marketstate(), target);
  }

  // .vega.AuctionTrigger trigger = 20;
  if (this->trigger() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->trigger(), target);
  }

  // string targetStake = 21;
  if (this->targetstake().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->targetstake().data(), static_cast<int>(this->targetstake().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketData.targetStake");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->targetstake(), target);
  }

  // string suppliedStake = 22;
  if (this->suppliedstake().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suppliedstake().data(), static_cast<int>(this->suppliedstake().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.MarketData.suppliedStake");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->suppliedstake(), target);
  }

  // repeated .vega.PriceMonitoringBounds priceMonitoringBounds = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pricemonitoringbounds_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->pricemonitoringbounds(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarketData)
  return target;
}

size_t MarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarketData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.PriceMonitoringBounds priceMonitoringBounds = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->pricemonitoringbounds_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pricemonitoringbounds(static_cast<int>(i)));
    }
  }

  // string market = 12;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->market());
  }

  // string targetStake = 21;
  if (this->targetstake().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetstake());
  }

  // string suppliedStake = 22;
  if (this->suppliedstake().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suppliedstake());
  }

  // uint64 markPrice = 1;
  if (this->markprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->markprice());
  }

  // uint64 bestBidPrice = 2;
  if (this->bestbidprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bestbidprice());
  }

  // uint64 bestBidVolume = 3;
  if (this->bestbidvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bestbidvolume());
  }

  // uint64 bestOfferPrice = 4;
  if (this->bestofferprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bestofferprice());
  }

  // uint64 bestOfferVolume = 5;
  if (this->bestoffervolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bestoffervolume());
  }

  // uint64 bestStaticBidPrice = 6;
  if (this->beststaticbidprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->beststaticbidprice());
  }

  // uint64 bestStaticBidVolume = 7;
  if (this->beststaticbidvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->beststaticbidvolume());
  }

  // uint64 bestStaticOfferPrice = 8;
  if (this->beststaticofferprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->beststaticofferprice());
  }

  // uint64 bestStaticOfferVolume = 9;
  if (this->beststaticoffervolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->beststaticoffervolume());
  }

  // uint64 midPrice = 10;
  if (this->midprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->midprice());
  }

  // uint64 staticMidPrice = 11;
  if (this->staticmidprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->staticmidprice());
  }

  // int64 timestamp = 13;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // uint64 openInterest = 14;
  if (this->openinterest() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->openinterest());
  }

  // int64 auctionEnd = 15;
  if (this->auctionend() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->auctionend());
  }

  // int64 auctionStart = 16;
  if (this->auctionstart() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->auctionstart());
  }

  // uint64 indicativePrice = 17;
  if (this->indicativeprice() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->indicativeprice());
  }

  // uint64 indicativeVolume = 18;
  if (this->indicativevolume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->indicativevolume());
  }

  // .vega.MarketState marketState = 19;
  if (this->marketstate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->marketstate());
  }

  // .vega.AuctionTrigger trigger = 20;
  if (this->trigger() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketData* source =
      ::google::protobuf::DynamicCastToGenerated<MarketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarketData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarketData)
    MergeFrom(*source);
  }
}

void MarketData::MergeFrom(const MarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pricemonitoringbounds_.MergeFrom(from.pricemonitoringbounds_);
  if (from.market().size() > 0) {

    market_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  if (from.targetstake().size() > 0) {

    targetstake_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetstake_);
  }
  if (from.suppliedstake().size() > 0) {

    suppliedstake_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suppliedstake_);
  }
  if (from.markprice() != 0) {
    set_markprice(from.markprice());
  }
  if (from.bestbidprice() != 0) {
    set_bestbidprice(from.bestbidprice());
  }
  if (from.bestbidvolume() != 0) {
    set_bestbidvolume(from.bestbidvolume());
  }
  if (from.bestofferprice() != 0) {
    set_bestofferprice(from.bestofferprice());
  }
  if (from.bestoffervolume() != 0) {
    set_bestoffervolume(from.bestoffervolume());
  }
  if (from.beststaticbidprice() != 0) {
    set_beststaticbidprice(from.beststaticbidprice());
  }
  if (from.beststaticbidvolume() != 0) {
    set_beststaticbidvolume(from.beststaticbidvolume());
  }
  if (from.beststaticofferprice() != 0) {
    set_beststaticofferprice(from.beststaticofferprice());
  }
  if (from.beststaticoffervolume() != 0) {
    set_beststaticoffervolume(from.beststaticoffervolume());
  }
  if (from.midprice() != 0) {
    set_midprice(from.midprice());
  }
  if (from.staticmidprice() != 0) {
    set_staticmidprice(from.staticmidprice());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.openinterest() != 0) {
    set_openinterest(from.openinterest());
  }
  if (from.auctionend() != 0) {
    set_auctionend(from.auctionend());
  }
  if (from.auctionstart() != 0) {
    set_auctionstart(from.auctionstart());
  }
  if (from.indicativeprice() != 0) {
    set_indicativeprice(from.indicativeprice());
  }
  if (from.indicativevolume() != 0) {
    set_indicativevolume(from.indicativevolume());
  }
  if (from.marketstate() != 0) {
    set_marketstate(from.marketstate());
  }
  if (from.trigger() != 0) {
    set_trigger(from.trigger());
  }
}

void MarketData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketData::CopyFrom(const MarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketData::IsInitialized() const {
  return true;
}

void MarketData::Swap(MarketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketData::InternalSwap(MarketData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&pricemonitoringbounds_)->InternalSwap(CastToBase(&other->pricemonitoringbounds_));
  market_.Swap(&other->market_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  targetstake_.Swap(&other->targetstake_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  suppliedstake_.Swap(&other->suppliedstake_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(markprice_, other->markprice_);
  swap(bestbidprice_, other->bestbidprice_);
  swap(bestbidvolume_, other->bestbidvolume_);
  swap(bestofferprice_, other->bestofferprice_);
  swap(bestoffervolume_, other->bestoffervolume_);
  swap(beststaticbidprice_, other->beststaticbidprice_);
  swap(beststaticbidvolume_, other->beststaticbidvolume_);
  swap(beststaticofferprice_, other->beststaticofferprice_);
  swap(beststaticoffervolume_, other->beststaticoffervolume_);
  swap(midprice_, other->midprice_);
  swap(staticmidprice_, other->staticmidprice_);
  swap(timestamp_, other->timestamp_);
  swap(openinterest_, other->openinterest_);
  swap(auctionend_, other->auctionend_);
  swap(auctionstart_, other->auctionstart_);
  swap(indicativeprice_, other->indicativeprice_);
  swap(indicativevolume_, other->indicativevolume_);
  swap(marketstate_, other->marketstate_);
  swap(trigger_, other->trigger_);
}

::google::protobuf::Metadata MarketData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PriceMonitoringBounds::InitAsDefaultInstance() {
  ::vega::_PriceMonitoringBounds_default_instance_._instance.get_mutable()->trigger_ = const_cast< ::vega::PriceMonitoringTrigger*>(
      ::vega::PriceMonitoringTrigger::internal_default_instance());
}
class PriceMonitoringBounds::HasBitSetters {
 public:
  static const ::vega::PriceMonitoringTrigger& trigger(const PriceMonitoringBounds* msg);
};

const ::vega::PriceMonitoringTrigger&
PriceMonitoringBounds::HasBitSetters::trigger(const PriceMonitoringBounds* msg) {
  return *msg->trigger_;
}
void PriceMonitoringBounds::clear_trigger() {
  if (GetArenaNoVirtual() == nullptr && trigger_ != nullptr) {
    delete trigger_;
  }
  trigger_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PriceMonitoringBounds::kMinValidPriceFieldNumber;
const int PriceMonitoringBounds::kMaxValidPriceFieldNumber;
const int PriceMonitoringBounds::kTriggerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PriceMonitoringBounds::PriceMonitoringBounds()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.PriceMonitoringBounds)
}
PriceMonitoringBounds::PriceMonitoringBounds(const PriceMonitoringBounds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trigger()) {
    trigger_ = new ::vega::PriceMonitoringTrigger(*from.trigger_);
  } else {
    trigger_ = nullptr;
  }
  ::memcpy(&minvalidprice_, &from.minvalidprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxvalidprice_) -
    reinterpret_cast<char*>(&minvalidprice_)) + sizeof(maxvalidprice_));
  // @@protoc_insertion_point(copy_constructor:vega.PriceMonitoringBounds)
}

void PriceMonitoringBounds::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PriceMonitoringBounds_proto_2fvega_2eproto.base);
  ::memset(&trigger_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxvalidprice_) -
      reinterpret_cast<char*>(&trigger_)) + sizeof(maxvalidprice_));
}

PriceMonitoringBounds::~PriceMonitoringBounds() {
  // @@protoc_insertion_point(destructor:vega.PriceMonitoringBounds)
  SharedDtor();
}

void PriceMonitoringBounds::SharedDtor() {
  if (this != internal_default_instance()) delete trigger_;
}

void PriceMonitoringBounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceMonitoringBounds& PriceMonitoringBounds::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PriceMonitoringBounds_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void PriceMonitoringBounds::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PriceMonitoringBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trigger_ != nullptr) {
    delete trigger_;
  }
  trigger_ = nullptr;
  ::memset(&minvalidprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxvalidprice_) -
      reinterpret_cast<char*>(&minvalidprice_)) + sizeof(maxvalidprice_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PriceMonitoringBounds::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PriceMonitoringBounds*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 minValidPrice = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_minvalidprice(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 maxValidPrice = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_maxvalidprice(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .vega.PriceMonitoringTrigger trigger = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::PriceMonitoringTrigger::_InternalParse;
        object = msg->mutable_trigger();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PriceMonitoringBounds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.PriceMonitoringBounds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 minValidPrice = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minvalidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 maxValidPrice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxvalidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.PriceMonitoringTrigger trigger = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.PriceMonitoringBounds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.PriceMonitoringBounds)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PriceMonitoringBounds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.PriceMonitoringBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 minValidPrice = 1;
  if (this->minvalidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->minvalidprice(), output);
  }

  // uint64 maxValidPrice = 2;
  if (this->maxvalidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->maxvalidprice(), output);
  }

  // .vega.PriceMonitoringTrigger trigger = 3;
  if (this->has_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::trigger(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.PriceMonitoringBounds)
}

::google::protobuf::uint8* PriceMonitoringBounds::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PriceMonitoringBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 minValidPrice = 1;
  if (this->minvalidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->minvalidprice(), target);
  }

  // uint64 maxValidPrice = 2;
  if (this->maxvalidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->maxvalidprice(), target);
  }

  // .vega.PriceMonitoringTrigger trigger = 3;
  if (this->has_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::trigger(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PriceMonitoringBounds)
  return target;
}

size_t PriceMonitoringBounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PriceMonitoringBounds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.PriceMonitoringTrigger trigger = 3;
  if (this->has_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trigger_);
  }

  // uint64 minValidPrice = 1;
  if (this->minvalidprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->minvalidprice());
  }

  // uint64 maxValidPrice = 2;
  if (this->maxvalidprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maxvalidprice());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceMonitoringBounds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PriceMonitoringBounds)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceMonitoringBounds* source =
      ::google::protobuf::DynamicCastToGenerated<PriceMonitoringBounds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PriceMonitoringBounds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PriceMonitoringBounds)
    MergeFrom(*source);
  }
}

void PriceMonitoringBounds::MergeFrom(const PriceMonitoringBounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PriceMonitoringBounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trigger()) {
    mutable_trigger()->::vega::PriceMonitoringTrigger::MergeFrom(from.trigger());
  }
  if (from.minvalidprice() != 0) {
    set_minvalidprice(from.minvalidprice());
  }
  if (from.maxvalidprice() != 0) {
    set_maxvalidprice(from.maxvalidprice());
  }
}

void PriceMonitoringBounds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PriceMonitoringBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceMonitoringBounds::CopyFrom(const PriceMonitoringBounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PriceMonitoringBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceMonitoringBounds::IsInitialized() const {
  return true;
}

void PriceMonitoringBounds::Swap(PriceMonitoringBounds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PriceMonitoringBounds::InternalSwap(PriceMonitoringBounds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trigger_, other->trigger_);
  swap(minvalidprice_, other->minvalidprice_);
  swap(maxvalidprice_, other->maxvalidprice_);
}

::google::protobuf::Metadata PriceMonitoringBounds::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ErrorDetail::InitAsDefaultInstance() {
}
class ErrorDetail::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorDetail::kCodeFieldNumber;
const int ErrorDetail::kMessageFieldNumber;
const int ErrorDetail::kInnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorDetail::ErrorDetail()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.ErrorDetail)
}
ErrorDetail::ErrorDetail(const ErrorDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  inner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inner().size() > 0) {
    inner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:vega.ErrorDetail)
}

void ErrorDetail::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ErrorDetail_proto_2fvega_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

ErrorDetail::~ErrorDetail() {
  // @@protoc_insertion_point(destructor:vega.ErrorDetail)
  SharedDtor();
}

void ErrorDetail::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ErrorDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorDetail& ErrorDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ErrorDetail_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void ErrorDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ErrorDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ErrorDetail::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ErrorDetail*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.ErrorDetail.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string inner = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.ErrorDetail.inner");
        object = msg->mutable_inner();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ErrorDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.ErrorDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.ErrorDetail.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string inner = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inner()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inner().data(), static_cast<int>(this->inner().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.ErrorDetail.inner"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.ErrorDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.ErrorDetail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ErrorDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.ErrorDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.ErrorDetail.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // string inner = 3;
  if (this->inner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner().data(), static_cast<int>(this->inner().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.ErrorDetail.inner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->inner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.ErrorDetail)
}

::google::protobuf::uint8* ErrorDetail::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ErrorDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.ErrorDetail.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // string inner = 3;
  if (this->inner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner().data(), static_cast<int>(this->inner().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.ErrorDetail.inner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->inner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ErrorDetail)
  return target;
}

size_t ErrorDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ErrorDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // string inner = 3;
  if (this->inner().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inner());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ErrorDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorDetail* source =
      ::google::protobuf::DynamicCastToGenerated<ErrorDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ErrorDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ErrorDetail)
    MergeFrom(*source);
  }
}

void ErrorDetail::MergeFrom(const ErrorDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ErrorDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.inner().size() > 0) {

    inner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ErrorDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ErrorDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorDetail::CopyFrom(const ErrorDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ErrorDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorDetail::IsInitialized() const {
  return true;
}

void ErrorDetail::Swap(ErrorDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorDetail::InternalSwap(ErrorDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inner_.Swap(&other->inner_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::google::protobuf::Metadata ErrorDetail::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
  ::vega::_Transaction_default_instance_.address_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::vega::_Transaction_default_instance_.pubkey_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class Transaction::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kInputDataFieldNumber;
const int Transaction::kNonceFieldNumber;
const int Transaction::kBlockHeightFieldNumber;
const int Transaction::kAddressFieldNumber;
const int Transaction::kPubKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inputdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inputdata().size() > 0) {
    inputdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inputdata_);
  }
  ::memcpy(&nonce_, &from.nonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&blockheight_) -
    reinterpret_cast<char*>(&nonce_)) + sizeof(blockheight_));
  clear_has_from();
  switch (from.from_case()) {
    case kAddress: {
      set_address(from.address());
      break;
    }
    case kPubKey: {
      set_pubkey(from.pubkey());
      break;
    }
    case FROM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.Transaction)
}

void Transaction::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Transaction_proto_2fvega_2eproto.base);
  inputdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nonce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blockheight_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(blockheight_));
  clear_has_from();
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:vega.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  inputdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_from()) {
    clear_from();
  }
}

void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Transaction_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Transaction::clear_from() {
// @@protoc_insertion_point(one_of_clear_start:vega.Transaction)
  switch (from_case()) {
    case kAddress: {
      from_.address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kPubKey: {
      from_.pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case FROM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FROM_NOT_SET;
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nonce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blockheight_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(blockheight_));
  clear_from();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Transaction::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Transaction*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes inputData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_inputdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 nonce = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_nonce(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 blockHeight = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_blockheight(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes address = 1001;
      case 1001: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes pubKey = 1002;
      case 1002: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pubkey();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Transaction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes inputData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inputdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 nonce = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 blockHeight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blockheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes address = 1001;
      case 1001: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8010 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pubKey = 1002;
      case 1002: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8018 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Transaction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes inputData = 1;
  if (this->inputdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->inputdata(), output);
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nonce(), output);
  }

  // uint64 blockHeight = 3;
  if (this->blockheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->blockheight(), output);
  }

  // bytes address = 1001;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1001, this->address(), output);
  }

  // bytes pubKey = 1002;
  if (has_pubkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1002, this->pubkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Transaction)
}

::google::protobuf::uint8* Transaction::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes inputData = 1;
  if (this->inputdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->inputdata(), target);
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nonce(), target);
  }

  // uint64 blockHeight = 3;
  if (this->blockheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->blockheight(), target);
  }

  // bytes address = 1001;
  if (has_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1001, this->address(), target);
  }

  // bytes pubKey = 1002;
  if (has_pubkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1002, this->pubkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Transaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes inputData = 1;
  if (this->inputdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->inputdata());
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nonce());
  }

  // uint64 blockHeight = 3;
  if (this->blockheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->blockheight());
  }

  switch (from_case()) {
    // bytes address = 1001;
    case kAddress: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
      break;
    }
    // bytes pubKey = 1002;
    case kPubKey: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
      break;
    }
    case FROM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::google::protobuf::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Transaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inputdata().size() > 0) {

    inputdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inputdata_);
  }
  if (from.nonce() != 0) {
    set_nonce(from.nonce());
  }
  if (from.blockheight() != 0) {
    set_blockheight(from.blockheight());
  }
  switch (from.from_case()) {
    case kAddress: {
      set_address(from.address());
      break;
    }
    case kPubKey: {
      set_pubkey(from.pubkey());
      break;
    }
    case FROM_NOT_SET: {
      break;
    }
  }
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inputdata_.Swap(&other->inputdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nonce_, other->nonce_);
  swap(blockheight_, other->blockheight_);
  swap(from_, other->from_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Signature::InitAsDefaultInstance() {
}
class Signature::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signature::kSigFieldNumber;
const int Signature::kAlgoFieldNumber;
const int Signature::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signature::Signature()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.Signature)
}
Signature::Signature(const Signature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sig().size() > 0) {
    sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  algo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.algo().size() > 0) {
    algo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:vega.Signature)
}

void Signature::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Signature_proto_2fvega_2eproto.base);
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = PROTOBUF_ULONGLONG(0);
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:vega.Signature)
  SharedDtor();
}

void Signature::SharedDtor() {
  sig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Signature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signature& Signature::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Signature_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Signature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Signature::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Signature*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes sig = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sig();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string algo = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.Signature.algo");
        object = msg->mutable_algo();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Signature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.Signature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes sig = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string algo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->algo().data(), static_cast<int>(this->algo().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.Signature.algo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.Signature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.Signature)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Signature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.Signature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sig = 1;
  if (this->sig().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sig(), output);
  }

  // string algo = 2;
  if (this->algo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->algo().data(), static_cast<int>(this->algo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Signature.algo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->algo(), output);
  }

  // uint64 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.Signature)
}

::google::protobuf::uint8* Signature::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Signature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sig = 1;
  if (this->sig().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sig(), target);
  }

  // string algo = 2;
  if (this->algo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->algo().data(), static_cast<int>(this->algo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.Signature.algo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->algo(), target);
  }

  // uint64 version = 3;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Signature)
  return target;
}

size_t Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Signature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sig = 1;
  if (this->sig().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sig());
  }

  // string algo = 2;
  if (this->algo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->algo());
  }

  // uint64 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  const Signature* source =
      ::google::protobuf::DynamicCastToGenerated<Signature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Signature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Signature)
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sig().size() > 0) {

    sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  if (from.algo().size() > 0) {

    algo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void Signature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  return true;
}

void Signature::Swap(Signature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signature::InternalSwap(Signature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sig_.Swap(&other->sig_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  algo_.Swap(&other->algo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
}

::google::protobuf::Metadata Signature::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SignedBundle::InitAsDefaultInstance() {
  ::vega::_SignedBundle_default_instance_._instance.get_mutable()->sig_ = const_cast< ::vega::Signature*>(
      ::vega::Signature::internal_default_instance());
}
class SignedBundle::HasBitSetters {
 public:
  static const ::vega::Signature& sig(const SignedBundle* msg);
};

const ::vega::Signature&
SignedBundle::HasBitSetters::sig(const SignedBundle* msg) {
  return *msg->sig_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignedBundle::kTxFieldNumber;
const int SignedBundle::kSigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignedBundle::SignedBundle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.SignedBundle)
}
SignedBundle::SignedBundle(const SignedBundle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tx().size() > 0) {
    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
  if (from.has_sig()) {
    sig_ = new ::vega::Signature(*from.sig_);
  } else {
    sig_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.SignedBundle)
}

void SignedBundle::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SignedBundle_proto_2fvega_2eproto.base);
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_ = nullptr;
}

SignedBundle::~SignedBundle() {
  // @@protoc_insertion_point(destructor:vega.SignedBundle)
  SharedDtor();
}

void SignedBundle::SharedDtor() {
  tx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sig_;
}

void SignedBundle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignedBundle& SignedBundle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SignedBundle_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void SignedBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.SignedBundle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sig_ != nullptr) {
    delete sig_;
  }
  sig_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignedBundle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SignedBundle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes tx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_tx();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.Signature sig = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::Signature::_InternalParse;
        object = msg->mutable_sig();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignedBundle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.SignedBundle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes tx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.Signature sig = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.SignedBundle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.SignedBundle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignedBundle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.SignedBundle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1;
  if (this->tx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tx(), output);
  }

  // .vega.Signature sig = 2;
  if (this->has_sig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::sig(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.SignedBundle)
}

::google::protobuf::uint8* SignedBundle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.SignedBundle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1;
  if (this->tx().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tx(), target);
  }

  // .vega.Signature sig = 2;
  if (this->has_sig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::sig(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.SignedBundle)
  return target;
}

size_t SignedBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.SignedBundle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 1;
  if (this->tx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tx());
  }

  // .vega.Signature sig = 2;
  if (this->has_sig()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sig_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignedBundle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.SignedBundle)
  GOOGLE_DCHECK_NE(&from, this);
  const SignedBundle* source =
      ::google::protobuf::DynamicCastToGenerated<SignedBundle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.SignedBundle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.SignedBundle)
    MergeFrom(*source);
  }
}

void SignedBundle::MergeFrom(const SignedBundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.SignedBundle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx().size() > 0) {

    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
  if (from.has_sig()) {
    mutable_sig()->::vega::Signature::MergeFrom(from.sig());
  }
}

void SignedBundle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.SignedBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedBundle::CopyFrom(const SignedBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.SignedBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedBundle::IsInitialized() const {
  return true;
}

void SignedBundle::Swap(SignedBundle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignedBundle::InternalSwap(SignedBundle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tx_.Swap(&other->tx_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sig_, other->sig_);
}

::google::protobuf::Metadata SignedBundle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeSignature::InitAsDefaultInstance() {
}
class NodeSignature::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeSignature::kIDFieldNumber;
const int NodeSignature::kSigFieldNumber;
const int NodeSignature::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeSignature::NodeSignature()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.NodeSignature)
}
NodeSignature::NodeSignature(const NodeSignature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sig().size() > 0) {
    sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:vega.NodeSignature)
}

void NodeSignature::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeSignature_proto_2fvega_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_ = 0;
}

NodeSignature::~NodeSignature() {
  // @@protoc_insertion_point(destructor:vega.NodeSignature)
  SharedDtor();
}

void NodeSignature::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeSignature& NodeSignature::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeSignature_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void NodeSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NodeSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeSignature::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeSignature*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.NodeSignature.ID");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes sig = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sig();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.NodeSignatureKind kind = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_kind(static_cast<::vega::NodeSignatureKind>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.NodeSignature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.NodeSignature.ID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sig = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.NodeSignatureKind kind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::vega::NodeSignatureKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.NodeSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.NodeSignature)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.NodeSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.NodeSignature.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // bytes sig = 2;
  if (this->sig().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sig(), output);
  }

  // .vega.NodeSignatureKind kind = 3;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kind(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.NodeSignature)
}

::google::protobuf::uint8* NodeSignature::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NodeSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.NodeSignature.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // bytes sig = 2;
  if (this->sig().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sig(), target);
  }

  // .vega.NodeSignatureKind kind = 3;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->kind(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NodeSignature)
  return target;
}

size_t NodeSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NodeSignature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // bytes sig = 2;
  if (this->sig().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sig());
  }

  // .vega.NodeSignatureKind kind = 3;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NodeSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeSignature* source =
      ::google::protobuf::DynamicCastToGenerated<NodeSignature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NodeSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NodeSignature)
    MergeFrom(*source);
  }
}

void NodeSignature::MergeFrom(const NodeSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NodeSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.sig().size() > 0) {

    sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
}

void NodeSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NodeSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeSignature::CopyFrom(const NodeSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NodeSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeSignature::IsInitialized() const {
  return true;
}

void NodeSignature::Swap(NodeSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeSignature::InternalSwap(NodeSignature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sig_.Swap(&other->sig_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(kind_, other->kind_);
}

::google::protobuf::Metadata NodeSignature::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NetworkParameter::InitAsDefaultInstance() {
}
class NetworkParameter::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkParameter::kKeyFieldNumber;
const int NetworkParameter::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkParameter::NetworkParameter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.NetworkParameter)
}
NetworkParameter::NetworkParameter(const NetworkParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:vega.NetworkParameter)
}

void NetworkParameter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NetworkParameter_proto_2fvega_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NetworkParameter::~NetworkParameter() {
  // @@protoc_insertion_point(destructor:vega.NetworkParameter)
  SharedDtor();
}

void NetworkParameter::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkParameter& NetworkParameter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NetworkParameter_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void NetworkParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NetworkParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkParameter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NetworkParameter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string Key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.NetworkParameter.Key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string Value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.NetworkParameter.Value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.NetworkParameter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.NetworkParameter.Key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.NetworkParameter.Value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.NetworkParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.NetworkParameter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.NetworkParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.NetworkParameter.Key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string Value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.NetworkParameter.Value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.NetworkParameter)
}

::google::protobuf::uint8* NetworkParameter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NetworkParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.NetworkParameter.Key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string Value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.NetworkParameter.Value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NetworkParameter)
  return target;
}

size_t NetworkParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NetworkParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string Value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NetworkParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkParameter* source =
      ::google::protobuf::DynamicCastToGenerated<NetworkParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NetworkParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NetworkParameter)
    MergeFrom(*source);
  }
}

void NetworkParameter::MergeFrom(const NetworkParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NetworkParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void NetworkParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NetworkParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkParameter::CopyFrom(const NetworkParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NetworkParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParameter::IsInitialized() const {
  return true;
}

void NetworkParameter::Swap(NetworkParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkParameter::InternalSwap(NetworkParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata NetworkParameter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiquidityOrder::InitAsDefaultInstance() {
}
class LiquidityOrder::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiquidityOrder::kReferenceFieldNumber;
const int LiquidityOrder::kProportionFieldNumber;
const int LiquidityOrder::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiquidityOrder::LiquidityOrder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.LiquidityOrder)
}
LiquidityOrder::LiquidityOrder(const LiquidityOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reference_, &from.reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&reference_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:vega.LiquidityOrder)
}

void LiquidityOrder::SharedCtor() {
  ::memset(&reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&reference_)) + sizeof(offset_));
}

LiquidityOrder::~LiquidityOrder() {
  // @@protoc_insertion_point(destructor:vega.LiquidityOrder)
  SharedDtor();
}

void LiquidityOrder::SharedDtor() {
}

void LiquidityOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityOrder& LiquidityOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiquidityOrder_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void LiquidityOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LiquidityOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&reference_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiquidityOrder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiquidityOrder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .vega.PeggedReference reference = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_reference(static_cast<::vega::PeggedReference>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 proportion = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_proportion(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 offset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiquidityOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.LiquidityOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vega.PeggedReference reference = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reference(static_cast< ::vega::PeggedReference >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 proportion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proportion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.LiquidityOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.LiquidityOrder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiquidityOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.LiquidityOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.PeggedReference reference = 1;
  if (this->reference() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reference(), output);
  }

  // uint32 proportion = 2;
  if (this->proportion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proportion(), output);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.LiquidityOrder)
}

::google::protobuf::uint8* LiquidityOrder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LiquidityOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.PeggedReference reference = 1;
  if (this->reference() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reference(), target);
  }

  // uint32 proportion = 2;
  if (this->proportion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proportion(), target);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LiquidityOrder)
  return target;
}

size_t LiquidityOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LiquidityOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.PeggedReference reference = 1;
  if (this->reference() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reference());
  }

  // uint32 proportion = 2;
  if (this->proportion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proportion());
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LiquidityOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityOrder* source =
      ::google::protobuf::DynamicCastToGenerated<LiquidityOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LiquidityOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LiquidityOrder)
    MergeFrom(*source);
  }
}

void LiquidityOrder::MergeFrom(const LiquidityOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LiquidityOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference() != 0) {
    set_reference(from.reference());
  }
  if (from.proportion() != 0) {
    set_proportion(from.proportion());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void LiquidityOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LiquidityOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityOrder::CopyFrom(const LiquidityOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LiquidityOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityOrder::IsInitialized() const {
  return true;
}

void LiquidityOrder::Swap(LiquidityOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiquidityOrder::InternalSwap(LiquidityOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(reference_, other->reference_);
  swap(proportion_, other->proportion_);
  swap(offset_, other->offset_);
}

::google::protobuf::Metadata LiquidityOrder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiquidityProvisionSubmission::InitAsDefaultInstance() {
}
class LiquidityProvisionSubmission::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiquidityProvisionSubmission::kMarketIDFieldNumber;
const int LiquidityProvisionSubmission::kCommitmentAmountFieldNumber;
const int LiquidityProvisionSubmission::kFeeFieldNumber;
const int LiquidityProvisionSubmission::kSellsFieldNumber;
const int LiquidityProvisionSubmission::kBuysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiquidityProvisionSubmission::LiquidityProvisionSubmission()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.LiquidityProvisionSubmission)
}
LiquidityProvisionSubmission::LiquidityProvisionSubmission(const LiquidityProvisionSubmission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      sells_(from.sells_),
      buys_(from.buys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  fee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fee().size() > 0) {
    fee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fee_);
  }
  commitmentamount_ = from.commitmentamount_;
  // @@protoc_insertion_point(copy_constructor:vega.LiquidityProvisionSubmission)
}

void LiquidityProvisionSubmission::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiquidityProvisionSubmission_proto_2fvega_2eproto.base);
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitmentamount_ = PROTOBUF_ULONGLONG(0);
}

LiquidityProvisionSubmission::~LiquidityProvisionSubmission() {
  // @@protoc_insertion_point(destructor:vega.LiquidityProvisionSubmission)
  SharedDtor();
}

void LiquidityProvisionSubmission::SharedDtor() {
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LiquidityProvisionSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityProvisionSubmission& LiquidityProvisionSubmission::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiquidityProvisionSubmission_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void LiquidityProvisionSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LiquidityProvisionSubmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sells_.Clear();
  buys_.Clear();
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commitmentamount_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiquidityProvisionSubmission::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiquidityProvisionSubmission*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.LiquidityProvisionSubmission.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 commitmentAmount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_commitmentamount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string fee = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.LiquidityProvisionSubmission.fee");
        object = msg->mutable_fee();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .vega.LiquidityOrder Sells = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::LiquidityOrder::_InternalParse;
          object = msg->add_sells();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .vega.LiquidityOrder Buys = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::LiquidityOrder::_InternalParse;
          object = msg->add_buys();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiquidityProvisionSubmission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.LiquidityProvisionSubmission)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string marketID = 1 [(.validator.field) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.LiquidityProvisionSubmission.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 commitmentAmount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commitmentamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fee = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fee()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fee().data(), static_cast<int>(this->fee().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.LiquidityProvisionSubmission.fee"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.LiquidityOrder Sells = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sells()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.LiquidityOrder Buys = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.LiquidityProvisionSubmission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.LiquidityProvisionSubmission)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiquidityProvisionSubmission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.LiquidityProvisionSubmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvisionSubmission.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marketid(), output);
  }

  // uint64 commitmentAmount = 2;
  if (this->commitmentamount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->commitmentamount(), output);
  }

  // string fee = 3;
  if (this->fee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fee().data(), static_cast<int>(this->fee().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvisionSubmission.fee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fee(), output);
  }

  // repeated .vega.LiquidityOrder Sells = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sells_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->sells(static_cast<int>(i)),
      output);
  }

  // repeated .vega.LiquidityOrder Buys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->buys(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.LiquidityProvisionSubmission)
}

::google::protobuf::uint8* LiquidityProvisionSubmission::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LiquidityProvisionSubmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvisionSubmission.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marketid(), target);
  }

  // uint64 commitmentAmount = 2;
  if (this->commitmentamount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->commitmentamount(), target);
  }

  // string fee = 3;
  if (this->fee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fee().data(), static_cast<int>(this->fee().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvisionSubmission.fee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fee(), target);
  }

  // repeated .vega.LiquidityOrder Sells = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sells_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->sells(static_cast<int>(i)), target);
  }

  // repeated .vega.LiquidityOrder Buys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->buys(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LiquidityProvisionSubmission)
  return target;
}

size_t LiquidityProvisionSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LiquidityProvisionSubmission)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.LiquidityOrder Sells = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->sells_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sells(static_cast<int>(i)));
    }
  }

  // repeated .vega.LiquidityOrder Buys = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->buys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buys(static_cast<int>(i)));
    }
  }

  // string marketID = 1 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string fee = 3;
  if (this->fee().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fee());
  }

  // uint64 commitmentAmount = 2;
  if (this->commitmentamount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commitmentamount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityProvisionSubmission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LiquidityProvisionSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityProvisionSubmission* source =
      ::google::protobuf::DynamicCastToGenerated<LiquidityProvisionSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LiquidityProvisionSubmission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LiquidityProvisionSubmission)
    MergeFrom(*source);
  }
}

void LiquidityProvisionSubmission::MergeFrom(const LiquidityProvisionSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LiquidityProvisionSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sells_.MergeFrom(from.sells_);
  buys_.MergeFrom(from.buys_);
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.fee().size() > 0) {

    fee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fee_);
  }
  if (from.commitmentamount() != 0) {
    set_commitmentamount(from.commitmentamount());
  }
}

void LiquidityProvisionSubmission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LiquidityProvisionSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityProvisionSubmission::CopyFrom(const LiquidityProvisionSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LiquidityProvisionSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityProvisionSubmission::IsInitialized() const {
  return true;
}

void LiquidityProvisionSubmission::Swap(LiquidityProvisionSubmission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiquidityProvisionSubmission::InternalSwap(LiquidityProvisionSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&sells_)->InternalSwap(CastToBase(&other->sells_));
  CastToBase(&buys_)->InternalSwap(CastToBase(&other->buys_));
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fee_.Swap(&other->fee_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(commitmentamount_, other->commitmentamount_);
}

::google::protobuf::Metadata LiquidityProvisionSubmission::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiquidityOrderReference::InitAsDefaultInstance() {
  ::vega::_LiquidityOrderReference_default_instance_._instance.get_mutable()->liquidityorder_ = const_cast< ::vega::LiquidityOrder*>(
      ::vega::LiquidityOrder::internal_default_instance());
}
class LiquidityOrderReference::HasBitSetters {
 public:
  static const ::vega::LiquidityOrder& liquidityorder(const LiquidityOrderReference* msg);
};

const ::vega::LiquidityOrder&
LiquidityOrderReference::HasBitSetters::liquidityorder(const LiquidityOrderReference* msg) {
  return *msg->liquidityorder_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiquidityOrderReference::kOrderIDFieldNumber;
const int LiquidityOrderReference::kLiquidityOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiquidityOrderReference::LiquidityOrderReference()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.LiquidityOrderReference)
}
LiquidityOrderReference::LiquidityOrderReference(const LiquidityOrderReference& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.orderid().size() > 0) {
    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.has_liquidityorder()) {
    liquidityorder_ = new ::vega::LiquidityOrder(*from.liquidityorder_);
  } else {
    liquidityorder_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.LiquidityOrderReference)
}

void LiquidityOrderReference::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiquidityOrderReference_proto_2fvega_2eproto.base);
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  liquidityorder_ = nullptr;
}

LiquidityOrderReference::~LiquidityOrderReference() {
  // @@protoc_insertion_point(destructor:vega.LiquidityOrderReference)
  SharedDtor();
}

void LiquidityOrderReference::SharedDtor() {
  orderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete liquidityorder_;
}

void LiquidityOrderReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityOrderReference& LiquidityOrderReference::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiquidityOrderReference_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void LiquidityOrderReference::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LiquidityOrderReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && liquidityorder_ != nullptr) {
    delete liquidityorder_;
  }
  liquidityorder_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiquidityOrderReference::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiquidityOrderReference*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string orderID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.LiquidityOrderReference.orderID");
        object = msg->mutable_orderid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.LiquidityOrder liquidityOrder = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::vega::LiquidityOrder::_InternalParse;
        object = msg->mutable_liquidityorder();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiquidityOrderReference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.LiquidityOrderReference)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string orderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderid().data(), static_cast<int>(this->orderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.LiquidityOrderReference.orderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.LiquidityOrder liquidityOrder = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_liquidityorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.LiquidityOrderReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.LiquidityOrderReference)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiquidityOrderReference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.LiquidityOrderReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityOrderReference.orderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->orderid(), output);
  }

  // .vega.LiquidityOrder liquidityOrder = 2;
  if (this->has_liquidityorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::liquidityorder(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.LiquidityOrderReference)
}

::google::protobuf::uint8* LiquidityOrderReference::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LiquidityOrderReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), static_cast<int>(this->orderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityOrderReference.orderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // .vega.LiquidityOrder liquidityOrder = 2;
  if (this->has_liquidityorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::liquidityorder(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LiquidityOrderReference)
  return target;
}

size_t LiquidityOrderReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LiquidityOrderReference)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderID = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderid());
  }

  // .vega.LiquidityOrder liquidityOrder = 2;
  if (this->has_liquidityorder()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *liquidityorder_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityOrderReference::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LiquidityOrderReference)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityOrderReference* source =
      ::google::protobuf::DynamicCastToGenerated<LiquidityOrderReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LiquidityOrderReference)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LiquidityOrderReference)
    MergeFrom(*source);
  }
}

void LiquidityOrderReference::MergeFrom(const LiquidityOrderReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LiquidityOrderReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.has_liquidityorder()) {
    mutable_liquidityorder()->::vega::LiquidityOrder::MergeFrom(from.liquidityorder());
  }
}

void LiquidityOrderReference::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LiquidityOrderReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityOrderReference::CopyFrom(const LiquidityOrderReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LiquidityOrderReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityOrderReference::IsInitialized() const {
  return true;
}

void LiquidityOrderReference::Swap(LiquidityOrderReference* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiquidityOrderReference::InternalSwap(LiquidityOrderReference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(liquidityorder_, other->liquidityorder_);
}

::google::protobuf::Metadata LiquidityOrderReference::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiquidityProvision::InitAsDefaultInstance() {
}
class LiquidityProvision::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiquidityProvision::kIdFieldNumber;
const int LiquidityProvision::kPartyIDFieldNumber;
const int LiquidityProvision::kCreatedAtFieldNumber;
const int LiquidityProvision::kUpdatedAtFieldNumber;
const int LiquidityProvision::kMarketIDFieldNumber;
const int LiquidityProvision::kCommitmentAmountFieldNumber;
const int LiquidityProvision::kFeeFieldNumber;
const int LiquidityProvision::kSellsFieldNumber;
const int LiquidityProvision::kBuysFieldNumber;
const int LiquidityProvision::kVersionFieldNumber;
const int LiquidityProvision::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiquidityProvision::LiquidityProvision()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vega.LiquidityProvision)
}
LiquidityProvision::LiquidityProvision(const LiquidityProvision& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      sells_(from.sells_),
      buys_(from.buys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partyid().size() > 0) {
    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.marketid().size() > 0) {
    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  fee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fee().size() > 0) {
    fee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fee_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&createdat_, &from.createdat_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&createdat_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:vega.LiquidityProvision)
}

void LiquidityProvision::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiquidityProvision_proto_2fvega_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&createdat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&createdat_)) + sizeof(status_));
}

LiquidityProvision::~LiquidityProvision() {
  // @@protoc_insertion_point(destructor:vega.LiquidityProvision)
  SharedDtor();
}

void LiquidityProvision::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LiquidityProvision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityProvision& LiquidityProvision::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiquidityProvision_proto_2fvega_2eproto.base);
  return *internal_default_instance();
}


void LiquidityProvision::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LiquidityProvision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sells_.Clear();
  buys_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&createdat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&createdat_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiquidityProvision::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiquidityProvision*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.LiquidityProvision.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string partyID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.LiquidityProvision.partyID");
        object = msg->mutable_partyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 createdAt = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_createdat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 updatedAt = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_updatedat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string marketID = 5 [(.validator.field) = {
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.LiquidityProvision.marketID");
        object = msg->mutable_marketid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 commitmentAmount = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_commitmentamount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string fee = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.LiquidityProvision.fee");
        object = msg->mutable_fee();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .vega.LiquidityOrderReference sells = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::LiquidityOrderReference::_InternalParse;
          object = msg->add_sells();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // repeated .vega.LiquidityOrderReference buys = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::vega::LiquidityOrderReference::_InternalParse;
          object = msg->add_buys();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // string version = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("vega.LiquidityProvision.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .vega.LiquidityProvision.Status status = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::vega::LiquidityProvision_Status>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiquidityProvision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vega.LiquidityProvision)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.LiquidityProvision.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partyID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partyid().data(), static_cast<int>(this->partyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.LiquidityProvision.partyID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 createdAt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createdat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 updatedAt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatedat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string marketID = 5 [(.validator.field) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->marketid().data(), static_cast<int>(this->marketid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.LiquidityProvision.marketID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 commitmentAmount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commitmentamount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fee = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fee()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fee().data(), static_cast<int>(this->fee().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.LiquidityProvision.fee"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.LiquidityOrderReference sells = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sells()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vega.LiquidityOrderReference buys = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vega.LiquidityProvision.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vega.LiquidityProvision.Status status = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::vega::LiquidityProvision_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vega.LiquidityProvision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vega.LiquidityProvision)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiquidityProvision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vega.LiquidityProvision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.partyID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partyid(), output);
  }

  // int64 createdAt = 3;
  if (this->createdat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->createdat(), output);
  }

  // int64 updatedAt = 4;
  if (this->updatedat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->updatedat(), output);
  }

  // string marketID = 5 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.marketID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->marketid(), output);
  }

  // uint64 commitmentAmount = 6;
  if (this->commitmentamount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->commitmentamount(), output);
  }

  // string fee = 7;
  if (this->fee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fee().data(), static_cast<int>(this->fee().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.fee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->fee(), output);
  }

  // repeated .vega.LiquidityOrderReference sells = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sells_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->sells(static_cast<int>(i)),
      output);
  }

  // repeated .vega.LiquidityOrderReference buys = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->buys(static_cast<int>(i)),
      output);
  }

  // string version = 10;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->version(), output);
  }

  // .vega.LiquidityProvision.Status status = 11;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vega.LiquidityProvision)
}

::google::protobuf::uint8* LiquidityProvision::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LiquidityProvision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partyid().data(), static_cast<int>(this->partyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.partyID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partyid(), target);
  }

  // int64 createdAt = 3;
  if (this->createdat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->createdat(), target);
  }

  // int64 updatedAt = 4;
  if (this->updatedat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->updatedat(), target);
  }

  // string marketID = 5 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->marketid().data(), static_cast<int>(this->marketid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.marketID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->marketid(), target);
  }

  // uint64 commitmentAmount = 6;
  if (this->commitmentamount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->commitmentamount(), target);
  }

  // string fee = 7;
  if (this->fee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fee().data(), static_cast<int>(this->fee().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.fee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->fee(), target);
  }

  // repeated .vega.LiquidityOrderReference sells = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sells_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->sells(static_cast<int>(i)), target);
  }

  // repeated .vega.LiquidityOrderReference buys = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->buys(static_cast<int>(i)), target);
  }

  // string version = 10;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->version(), target);
  }

  // .vega.LiquidityProvision.Status status = 11;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LiquidityProvision)
  return target;
}

size_t LiquidityProvision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LiquidityProvision)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.LiquidityOrderReference sells = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->sells_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sells(static_cast<int>(i)));
    }
  }

  // repeated .vega.LiquidityOrderReference buys = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->buys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buys(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string partyID = 2;
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partyid());
  }

  // string marketID = 5 [(.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->marketid());
  }

  // string fee = 7;
  if (this->fee().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fee());
  }

  // string version = 10;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // int64 createdAt = 3;
  if (this->createdat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->createdat());
  }

  // int64 updatedAt = 4;
  if (this->updatedat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updatedat());
  }

  // uint64 commitmentAmount = 6;
  if (this->commitmentamount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commitmentamount());
  }

  // .vega.LiquidityProvision.Status status = 11;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityProvision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LiquidityProvision)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityProvision* source =
      ::google::protobuf::DynamicCastToGenerated<LiquidityProvision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LiquidityProvision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LiquidityProvision)
    MergeFrom(*source);
  }
}

void LiquidityProvision::MergeFrom(const LiquidityProvision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LiquidityProvision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sells_.MergeFrom(from.sells_);
  buys_.MergeFrom(from.buys_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.partyid().size() > 0) {

    partyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partyid_);
  }
  if (from.marketid().size() > 0) {

    marketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.marketid_);
  }
  if (from.fee().size() > 0) {

    fee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fee_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.createdat() != 0) {
    set_createdat(from.createdat());
  }
  if (from.updatedat() != 0) {
    set_updatedat(from.updatedat());
  }
  if (from.commitmentamount() != 0) {
    set_commitmentamount(from.commitmentamount());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void LiquidityProvision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LiquidityProvision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityProvision::CopyFrom(const LiquidityProvision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LiquidityProvision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityProvision::IsInitialized() const {
  return true;
}

void LiquidityProvision::Swap(LiquidityProvision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiquidityProvision::InternalSwap(LiquidityProvision* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&sells_)->InternalSwap(CastToBase(&other->sells_));
  CastToBase(&buys_)->InternalSwap(CastToBase(&other->buys_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partyid_.Swap(&other->partyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  marketid_.Swap(&other->marketid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fee_.Swap(&other->fee_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(createdat_, other->createdat_);
  swap(updatedat_, other->updatedat_);
  swap(commitmentamount_, other->commitmentamount_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata LiquidityProvision::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fvega_2eproto);
  return ::file_level_metadata_proto_2fvega_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vega
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::vega::Price* Arena::CreateMaybeMessage< ::vega::Price >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Price >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Timestamp* Arena::CreateMaybeMessage< ::vega::Timestamp >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Party* Arena::CreateMaybeMessage< ::vega::Party >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Party >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RiskFactor* Arena::CreateMaybeMessage< ::vega::RiskFactor >(Arena* arena) {
  return Arena::CreateInternal< ::vega::RiskFactor >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RiskResult_RiskFactorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vega::RiskResult_RiskFactorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::vega::RiskResult_RiskFactorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RiskResult* Arena::CreateMaybeMessage< ::vega::RiskResult >(Arena* arena) {
  return Arena::CreateInternal< ::vega::RiskResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PeggedOrder* Arena::CreateMaybeMessage< ::vega::PeggedOrder >(Arena* arena) {
  return Arena::CreateInternal< ::vega::PeggedOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Order* Arena::CreateMaybeMessage< ::vega::Order >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Order >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::OrderCancellationConfirmation* Arena::CreateMaybeMessage< ::vega::OrderCancellationConfirmation >(Arena* arena) {
  return Arena::CreateInternal< ::vega::OrderCancellationConfirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::OrderConfirmation* Arena::CreateMaybeMessage< ::vega::OrderConfirmation >(Arena* arena) {
  return Arena::CreateInternal< ::vega::OrderConfirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::AuctionIndicativeState* Arena::CreateMaybeMessage< ::vega::AuctionIndicativeState >(Arena* arena) {
  return Arena::CreateInternal< ::vega::AuctionIndicativeState >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Trade* Arena::CreateMaybeMessage< ::vega::Trade >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Trade >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Fee* Arena::CreateMaybeMessage< ::vega::Fee >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Fee >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TradeSet* Arena::CreateMaybeMessage< ::vega::TradeSet >(Arena* arena) {
  return Arena::CreateInternal< ::vega::TradeSet >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Candle* Arena::CreateMaybeMessage< ::vega::Candle >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Candle >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PriceLevel* Arena::CreateMaybeMessage< ::vega::PriceLevel >(Arena* arena) {
  return Arena::CreateInternal< ::vega::PriceLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::MarketDepth* Arena::CreateMaybeMessage< ::vega::MarketDepth >(Arena* arena) {
  return Arena::CreateInternal< ::vega::MarketDepth >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::MarketDepthUpdate* Arena::CreateMaybeMessage< ::vega::MarketDepthUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::vega::MarketDepthUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Position* Arena::CreateMaybeMessage< ::vega::Position >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PositionTrade* Arena::CreateMaybeMessage< ::vega::PositionTrade >(Arena* arena) {
  return Arena::CreateInternal< ::vega::PositionTrade >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Statistics* Arena::CreateMaybeMessage< ::vega::Statistics >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Deposit* Arena::CreateMaybeMessage< ::vega::Deposit >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Deposit >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Withdrawal* Arena::CreateMaybeMessage< ::vega::Withdrawal >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Withdrawal >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::WithdrawSubmission* Arena::CreateMaybeMessage< ::vega::WithdrawSubmission >(Arena* arena) {
  return Arena::CreateInternal< ::vega::WithdrawSubmission >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::WithdrawExt* Arena::CreateMaybeMessage< ::vega::WithdrawExt >(Arena* arena) {
  return Arena::CreateInternal< ::vega::WithdrawExt >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Erc20WithdrawExt* Arena::CreateMaybeMessage< ::vega::Erc20WithdrawExt >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Erc20WithdrawExt >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::OrderAmendment* Arena::CreateMaybeMessage< ::vega::OrderAmendment >(Arena* arena) {
  return Arena::CreateInternal< ::vega::OrderAmendment >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::OrderSubmission* Arena::CreateMaybeMessage< ::vega::OrderSubmission >(Arena* arena) {
  return Arena::CreateInternal< ::vega::OrderSubmission >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::OrderCancellation* Arena::CreateMaybeMessage< ::vega::OrderCancellation >(Arena* arena) {
  return Arena::CreateInternal< ::vega::OrderCancellation >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NodeRegistration* Arena::CreateMaybeMessage< ::vega::NodeRegistration >(Arena* arena) {
  return Arena::CreateInternal< ::vega::NodeRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NodeVote* Arena::CreateMaybeMessage< ::vega::NodeVote >(Arena* arena) {
  return Arena::CreateInternal< ::vega::NodeVote >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Account* Arena::CreateMaybeMessage< ::vega::Account >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Account >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::FinancialAmount* Arena::CreateMaybeMessage< ::vega::FinancialAmount >(Arena* arena) {
  return Arena::CreateInternal< ::vega::FinancialAmount >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Transfer* Arena::CreateMaybeMessage< ::vega::Transfer >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TransferRequest* Arena::CreateMaybeMessage< ::vega::TransferRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vega::TransferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LedgerEntry* Arena::CreateMaybeMessage< ::vega::LedgerEntry >(Arena* arena) {
  return Arena::CreateInternal< ::vega::LedgerEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TransferBalance* Arena::CreateMaybeMessage< ::vega::TransferBalance >(Arena* arena) {
  return Arena::CreateInternal< ::vega::TransferBalance >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TransferResponse* Arena::CreateMaybeMessage< ::vega::TransferResponse >(Arena* arena) {
  return Arena::CreateInternal< ::vega::TransferResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::MarginLevels* Arena::CreateMaybeMessage< ::vega::MarginLevels >(Arena* arena) {
  return Arena::CreateInternal< ::vega::MarginLevels >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::MarketData* Arena::CreateMaybeMessage< ::vega::MarketData >(Arena* arena) {
  return Arena::CreateInternal< ::vega::MarketData >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PriceMonitoringBounds* Arena::CreateMaybeMessage< ::vega::PriceMonitoringBounds >(Arena* arena) {
  return Arena::CreateInternal< ::vega::PriceMonitoringBounds >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ErrorDetail* Arena::CreateMaybeMessage< ::vega::ErrorDetail >(Arena* arena) {
  return Arena::CreateInternal< ::vega::ErrorDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Transaction* Arena::CreateMaybeMessage< ::vega::Transaction >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Signature* Arena::CreateMaybeMessage< ::vega::Signature >(Arena* arena) {
  return Arena::CreateInternal< ::vega::Signature >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::SignedBundle* Arena::CreateMaybeMessage< ::vega::SignedBundle >(Arena* arena) {
  return Arena::CreateInternal< ::vega::SignedBundle >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NodeSignature* Arena::CreateMaybeMessage< ::vega::NodeSignature >(Arena* arena) {
  return Arena::CreateInternal< ::vega::NodeSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NetworkParameter* Arena::CreateMaybeMessage< ::vega::NetworkParameter >(Arena* arena) {
  return Arena::CreateInternal< ::vega::NetworkParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LiquidityOrder* Arena::CreateMaybeMessage< ::vega::LiquidityOrder >(Arena* arena) {
  return Arena::CreateInternal< ::vega::LiquidityOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LiquidityProvisionSubmission* Arena::CreateMaybeMessage< ::vega::LiquidityProvisionSubmission >(Arena* arena) {
  return Arena::CreateInternal< ::vega::LiquidityProvisionSubmission >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LiquidityOrderReference* Arena::CreateMaybeMessage< ::vega::LiquidityOrderReference >(Arena* arena) {
  return Arena::CreateInternal< ::vega::LiquidityOrderReference >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LiquidityProvision* Arena::CreateMaybeMessage< ::vega::LiquidityProvision >(Arena* arena) {
  return Arena::CreateInternal< ::vega::LiquidityProvision >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
