// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/trading.proto

#include "api/trading.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_api_2ftrading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionalProposalState_api_2ftrading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2ftrading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pagination_api_2ftrading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_assets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Asset_assets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_events_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<26> scc_info_BusEvent_events_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Candle_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chain_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ChainEvent_chain_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Deposit_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fee_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GovernanceData_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityProvision_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityProvisionSubmission_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarginLevels_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Market_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketData_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkParameter_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeSignature_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Order_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OrderAmendment_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderCancellation_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderSubmission_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Party_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceLevel_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proposal_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ProposalTerms_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignedBundle_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trade_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_governance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vote_governance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawSubmission_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Withdrawal_vega_2eproto;
namespace api {
class PropagateChainEventRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropagateChainEventRequest> _instance;
} _PropagateChainEventRequest_default_instance_;
class PropagateChainEventResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropagateChainEventResponse> _instance;
} _PropagateChainEventResponse_default_instance_;
class SubmitTransactionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitTransactionRequest> _instance;
} _SubmitTransactionRequest_default_instance_;
class SubmitTransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitTransactionResponse> _instance;
} _SubmitTransactionResponse_default_instance_;
class PrepareWithdrawRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareWithdrawRequest> _instance;
} _PrepareWithdrawRequest_default_instance_;
class PrepareWithdrawResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareWithdrawResponse> _instance;
} _PrepareWithdrawResponse_default_instance_;
class PrepareSubmitOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareSubmitOrderResponse> _instance;
} _PrepareSubmitOrderResponse_default_instance_;
class PrepareCancelOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareCancelOrderResponse> _instance;
} _PrepareCancelOrderResponse_default_instance_;
class PrepareAmendOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareAmendOrderResponse> _instance;
} _PrepareAmendOrderResponse_default_instance_;
class SubmitOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubmitOrderRequest> _instance;
} _SubmitOrderRequest_default_instance_;
class CancelOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelOrderRequest> _instance;
} _CancelOrderRequest_default_instance_;
class AmendOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AmendOrderRequest> _instance;
} _AmendOrderRequest_default_instance_;
class AssetsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssetsRequest> _instance;
} _AssetsRequest_default_instance_;
class AssetsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssetsResponse> _instance;
} _AssetsResponse_default_instance_;
class AssetByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssetByIDRequest> _instance;
} _AssetByIDRequest_default_instance_;
class AssetByIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssetByIDResponse> _instance;
} _AssetByIDResponse_default_instance_;
class GetNodeSignaturesAggregateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNodeSignaturesAggregateRequest> _instance;
} _GetNodeSignaturesAggregateRequest_default_instance_;
class GetNodeSignaturesAggregateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNodeSignaturesAggregateResponse> _instance;
} _GetNodeSignaturesAggregateResponse_default_instance_;
class OptionalProposalStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptionalProposalState> _instance;
} _OptionalProposalState_default_instance_;
class GetProposalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalsRequest> _instance;
} _GetProposalsRequest_default_instance_;
class GetProposalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalsResponse> _instance;
} _GetProposalsResponse_default_instance_;
class GetProposalsByPartyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalsByPartyRequest> _instance;
} _GetProposalsByPartyRequest_default_instance_;
class GetProposalsByPartyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalsByPartyResponse> _instance;
} _GetProposalsByPartyResponse_default_instance_;
class GetVotesByPartyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVotesByPartyRequest> _instance;
} _GetVotesByPartyRequest_default_instance_;
class GetVotesByPartyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVotesByPartyResponse> _instance;
} _GetVotesByPartyResponse_default_instance_;
class GetNewMarketProposalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNewMarketProposalsRequest> _instance;
} _GetNewMarketProposalsRequest_default_instance_;
class GetNewMarketProposalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNewMarketProposalsResponse> _instance;
} _GetNewMarketProposalsResponse_default_instance_;
class GetUpdateMarketProposalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUpdateMarketProposalsRequest> _instance;
} _GetUpdateMarketProposalsRequest_default_instance_;
class GetUpdateMarketProposalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUpdateMarketProposalsResponse> _instance;
} _GetUpdateMarketProposalsResponse_default_instance_;
class GetNetworkParametersProposalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNetworkParametersProposalsRequest> _instance;
} _GetNetworkParametersProposalsRequest_default_instance_;
class GetNetworkParametersProposalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNetworkParametersProposalsResponse> _instance;
} _GetNetworkParametersProposalsResponse_default_instance_;
class GetNewAssetProposalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNewAssetProposalsRequest> _instance;
} _GetNewAssetProposalsRequest_default_instance_;
class GetNewAssetProposalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNewAssetProposalsResponse> _instance;
} _GetNewAssetProposalsResponse_default_instance_;
class GetProposalByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalByIDRequest> _instance;
} _GetProposalByIDRequest_default_instance_;
class GetProposalByIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalByIDResponse> _instance;
} _GetProposalByIDResponse_default_instance_;
class GetProposalByReferenceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalByReferenceRequest> _instance;
} _GetProposalByReferenceRequest_default_instance_;
class GetProposalByReferenceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProposalByReferenceResponse> _instance;
} _GetProposalByReferenceResponse_default_instance_;
class ObservePartyProposalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObservePartyProposalsRequest> _instance;
} _ObservePartyProposalsRequest_default_instance_;
class ObserveProposalVotesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObserveProposalVotesRequest> _instance;
} _ObserveProposalVotesRequest_default_instance_;
class ObservePartyVotesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObservePartyVotesRequest> _instance;
} _ObservePartyVotesRequest_default_instance_;
class MarginLevelsSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarginLevelsSubscribeRequest> _instance;
} _MarginLevelsSubscribeRequest_default_instance_;
class MarginLevelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarginLevelsRequest> _instance;
} _MarginLevelsRequest_default_instance_;
class MarginLevelsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarginLevelsResponse> _instance;
} _MarginLevelsResponse_default_instance_;
class MarketsDataSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketsDataSubscribeRequest> _instance;
} _MarketsDataSubscribeRequest_default_instance_;
class MarketDataByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDataByIDRequest> _instance;
} _MarketDataByIDRequest_default_instance_;
class MarketDataByIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDataByIDResponse> _instance;
} _MarketDataByIDResponse_default_instance_;
class MarketsDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketsDataResponse> _instance;
} _MarketsDataResponse_default_instance_;
class LastTradeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LastTradeRequest> _instance;
} _LastTradeRequest_default_instance_;
class LastTradeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LastTradeResponse> _instance;
} _LastTradeResponse_default_instance_;
class MarketByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketByIDRequest> _instance;
} _MarketByIDRequest_default_instance_;
class MarketByIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketByIDResponse> _instance;
} _MarketByIDResponse_default_instance_;
class PartyByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyByIDRequest> _instance;
} _PartyByIDRequest_default_instance_;
class PartyByIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyByIDResponse> _instance;
} _PartyByIDResponse_default_instance_;
class PartiesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartiesResponse> _instance;
} _PartiesResponse_default_instance_;
class TradesByPartyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesByPartyRequest> _instance;
} _TradesByPartyRequest_default_instance_;
class TradesByPartyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesByPartyResponse> _instance;
} _TradesByPartyResponse_default_instance_;
class TradesByOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesByOrderRequest> _instance;
} _TradesByOrderRequest_default_instance_;
class TradesByOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesByOrderResponse> _instance;
} _TradesByOrderResponse_default_instance_;
class AccountsSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountsSubscribeRequest> _instance;
} _AccountsSubscribeRequest_default_instance_;
class OrdersSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrdersSubscribeRequest> _instance;
} _OrdersSubscribeRequest_default_instance_;
class TradesSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesSubscribeRequest> _instance;
} _TradesSubscribeRequest_default_instance_;
class CandlesSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CandlesSubscribeRequest> _instance;
} _CandlesSubscribeRequest_default_instance_;
class MarketDepthSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDepthSubscribeRequest> _instance;
} _MarketDepthSubscribeRequest_default_instance_;
class MarketDepthUpdatesSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDepthUpdatesSubscribeRequest> _instance;
} _MarketDepthUpdatesSubscribeRequest_default_instance_;
class PositionsSubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionsSubscribeRequest> _instance;
} _PositionsSubscribeRequest_default_instance_;
class OrdersByMarketRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrdersByMarketRequest> _instance;
} _OrdersByMarketRequest_default_instance_;
class OrdersByMarketResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrdersByMarketResponse> _instance;
} _OrdersByMarketResponse_default_instance_;
class OrdersByPartyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrdersByPartyRequest> _instance;
} _OrdersByPartyRequest_default_instance_;
class OrdersByPartyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrdersByPartyResponse> _instance;
} _OrdersByPartyResponse_default_instance_;
class OrderByMarketAndIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderByMarketAndIdRequest> _instance;
} _OrderByMarketAndIdRequest_default_instance_;
class OrderByMarketAndIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderByMarketAndIdResponse> _instance;
} _OrderByMarketAndIdResponse_default_instance_;
class OrderByReferenceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderByReferenceRequest> _instance;
} _OrderByReferenceRequest_default_instance_;
class OrderByReferenceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderByReferenceResponse> _instance;
} _OrderByReferenceResponse_default_instance_;
class MarketsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketsResponse> _instance;
} _MarketsResponse_default_instance_;
class CandlesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CandlesRequest> _instance;
} _CandlesRequest_default_instance_;
class CandlesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CandlesResponse> _instance;
} _CandlesResponse_default_instance_;
class MarketDepthRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDepthRequest> _instance;
} _MarketDepthRequest_default_instance_;
class MarketDepthResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDepthResponse> _instance;
} _MarketDepthResponse_default_instance_;
class TradesByMarketRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesByMarketRequest> _instance;
} _TradesByMarketRequest_default_instance_;
class TradesByMarketResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesByMarketResponse> _instance;
} _TradesByMarketResponse_default_instance_;
class PositionsByPartyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionsByPartyRequest> _instance;
} _PositionsByPartyRequest_default_instance_;
class PositionsByPartyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionsByPartyResponse> _instance;
} _PositionsByPartyResponse_default_instance_;
class VegaTimeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VegaTimeResponse> _instance;
} _VegaTimeResponse_default_instance_;
class PaginationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pagination> _instance;
} _Pagination_default_instance_;
class OrdersStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrdersStream> _instance;
} _OrdersStream_default_instance_;
class TradesStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradesStream> _instance;
} _TradesStream_default_instance_;
class PartyAccountsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyAccountsRequest> _instance;
} _PartyAccountsRequest_default_instance_;
class PartyAccountsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyAccountsResponse> _instance;
} _PartyAccountsResponse_default_instance_;
class MarketAccountsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketAccountsRequest> _instance;
} _MarketAccountsRequest_default_instance_;
class MarketAccountsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketAccountsResponse> _instance;
} _MarketAccountsResponse_default_instance_;
class FeeInfrastructureAccountsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeeInfrastructureAccountsRequest> _instance;
} _FeeInfrastructureAccountsRequest_default_instance_;
class FeeInfrastructureAccountsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeeInfrastructureAccountsResponse> _instance;
} _FeeInfrastructureAccountsResponse_default_instance_;
class PrepareProposalRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareProposalRequest> _instance;
} _PrepareProposalRequest_default_instance_;
class PrepareProposalResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareProposalResponse> _instance;
} _PrepareProposalResponse_default_instance_;
class PrepareVoteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareVoteRequest> _instance;
} _PrepareVoteRequest_default_instance_;
class PrepareVoteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareVoteResponse> _instance;
} _PrepareVoteResponse_default_instance_;
class PrepareLiquidityProvisionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareLiquidityProvisionRequest> _instance;
} _PrepareLiquidityProvisionRequest_default_instance_;
class PrepareLiquidityProvisionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareLiquidityProvisionResponse> _instance;
} _PrepareLiquidityProvisionResponse_default_instance_;
class OrderByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderByIDRequest> _instance;
} _OrderByIDRequest_default_instance_;
class OrderVersionsByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderVersionsByIDRequest> _instance;
} _OrderVersionsByIDRequest_default_instance_;
class OrderVersionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderVersionsResponse> _instance;
} _OrderVersionsResponse_default_instance_;
class EstimateFeeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstimateFeeRequest> _instance;
} _EstimateFeeRequest_default_instance_;
class EstimateFeeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstimateFeeResponse> _instance;
} _EstimateFeeResponse_default_instance_;
class EstimateMarginRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstimateMarginRequest> _instance;
} _EstimateMarginRequest_default_instance_;
class EstimateMarginResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstimateMarginResponse> _instance;
} _EstimateMarginResponse_default_instance_;
class ObserveEventsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObserveEventsRequest> _instance;
} _ObserveEventsRequest_default_instance_;
class ObserveEventsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObserveEventsResponse> _instance;
} _ObserveEventsResponse_default_instance_;
class WithdrawalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawalsRequest> _instance;
} _WithdrawalsRequest_default_instance_;
class WithdrawalsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawalsResponse> _instance;
} _WithdrawalsResponse_default_instance_;
class WithdrawalRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawalRequest> _instance;
} _WithdrawalRequest_default_instance_;
class WithdrawalResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawalResponse> _instance;
} _WithdrawalResponse_default_instance_;
class ERC20WithdrawalApprovalRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ERC20WithdrawalApprovalRequest> _instance;
} _ERC20WithdrawalApprovalRequest_default_instance_;
class ERC20WithdrawalApprovalResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ERC20WithdrawalApprovalResponse> _instance;
} _ERC20WithdrawalApprovalResponse_default_instance_;
class DepositsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepositsRequest> _instance;
} _DepositsRequest_default_instance_;
class DepositsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepositsResponse> _instance;
} _DepositsResponse_default_instance_;
class DepositRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepositRequest> _instance;
} _DepositRequest_default_instance_;
class DepositResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepositResponse> _instance;
} _DepositResponse_default_instance_;
class NetworkParametersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkParametersRequest> _instance;
} _NetworkParametersRequest_default_instance_;
class NetworkParametersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkParametersResponse> _instance;
} _NetworkParametersResponse_default_instance_;
class LiquidityProvisionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidityProvisionsRequest> _instance;
} _LiquidityProvisionsRequest_default_instance_;
class LiquidityProvisionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidityProvisionsResponse> _instance;
} _LiquidityProvisionsResponse_default_instance_;
}  // namespace api
static void InitDefaultsscc_info_AccountsSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_AccountsSubscribeRequest_default_instance_;
    new (ptr) ::api::AccountsSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountsSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountsSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_AmendOrderRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_AmendOrderRequest_default_instance_;
    new (ptr) ::api::AmendOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AmendOrderRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AmendOrderRequest_api_2ftrading_2eproto}, {
      &scc_info_OrderAmendment_vega_2eproto.base,}};

static void InitDefaultsscc_info_AssetByIDRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_AssetByIDRequest_default_instance_;
    new (ptr) ::api::AssetByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssetByIDRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AssetByIDRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_AssetByIDResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_AssetByIDResponse_default_instance_;
    new (ptr) ::api::AssetByIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AssetByIDResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AssetByIDResponse_api_2ftrading_2eproto}, {
      &scc_info_Asset_assets_2eproto.base,}};

static void InitDefaultsscc_info_AssetsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_AssetsRequest_default_instance_;
    new (ptr) ::api::AssetsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssetsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AssetsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_AssetsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_AssetsResponse_default_instance_;
    new (ptr) ::api::AssetsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AssetsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AssetsResponse_api_2ftrading_2eproto}, {
      &scc_info_Asset_assets_2eproto.base,}};

static void InitDefaultsscc_info_CancelOrderRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CancelOrderRequest_default_instance_;
    new (ptr) ::api::CancelOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CancelOrderRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CancelOrderRequest_api_2ftrading_2eproto}, {
      &scc_info_OrderCancellation_vega_2eproto.base,}};

static void InitDefaultsscc_info_CandlesRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CandlesRequest_default_instance_;
    new (ptr) ::api::CandlesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CandlesRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CandlesRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_CandlesResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CandlesResponse_default_instance_;
    new (ptr) ::api::CandlesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CandlesResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CandlesResponse_api_2ftrading_2eproto}, {
      &scc_info_Candle_vega_2eproto.base,}};

static void InitDefaultsscc_info_CandlesSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_CandlesSubscribeRequest_default_instance_;
    new (ptr) ::api::CandlesSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CandlesSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CandlesSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_DepositRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_DepositRequest_default_instance_;
    new (ptr) ::api::DepositRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepositRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DepositRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_DepositResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_DepositResponse_default_instance_;
    new (ptr) ::api::DepositResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DepositResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DepositResponse_api_2ftrading_2eproto}, {
      &scc_info_Deposit_vega_2eproto.base,}};

static void InitDefaultsscc_info_DepositsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_DepositsRequest_default_instance_;
    new (ptr) ::api::DepositsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepositsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DepositsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_DepositsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_DepositsResponse_default_instance_;
    new (ptr) ::api::DepositsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DepositsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DepositsResponse_api_2ftrading_2eproto}, {
      &scc_info_Deposit_vega_2eproto.base,}};

static void InitDefaultsscc_info_ERC20WithdrawalApprovalRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ERC20WithdrawalApprovalRequest_default_instance_;
    new (ptr) ::api::ERC20WithdrawalApprovalRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ERC20WithdrawalApprovalRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ERC20WithdrawalApprovalRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_ERC20WithdrawalApprovalResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ERC20WithdrawalApprovalResponse_default_instance_;
    new (ptr) ::api::ERC20WithdrawalApprovalResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ERC20WithdrawalApprovalResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ERC20WithdrawalApprovalResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_EstimateFeeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_EstimateFeeRequest_default_instance_;
    new (ptr) ::api::EstimateFeeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EstimateFeeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EstimateFeeRequest_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_EstimateFeeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_EstimateFeeResponse_default_instance_;
    new (ptr) ::api::EstimateFeeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EstimateFeeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EstimateFeeResponse_api_2ftrading_2eproto}, {
      &scc_info_Fee_vega_2eproto.base,}};

static void InitDefaultsscc_info_EstimateMarginRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_EstimateMarginRequest_default_instance_;
    new (ptr) ::api::EstimateMarginRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EstimateMarginRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EstimateMarginRequest_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_EstimateMarginResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_EstimateMarginResponse_default_instance_;
    new (ptr) ::api::EstimateMarginResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EstimateMarginResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EstimateMarginResponse_api_2ftrading_2eproto}, {
      &scc_info_MarginLevels_vega_2eproto.base,}};

static void InitDefaultsscc_info_FeeInfrastructureAccountsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_FeeInfrastructureAccountsRequest_default_instance_;
    new (ptr) ::api::FeeInfrastructureAccountsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeeInfrastructureAccountsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeeInfrastructureAccountsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_FeeInfrastructureAccountsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_FeeInfrastructureAccountsResponse_default_instance_;
    new (ptr) ::api::FeeInfrastructureAccountsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FeeInfrastructureAccountsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FeeInfrastructureAccountsResponse_api_2ftrading_2eproto}, {
      &scc_info_Account_vega_2eproto.base,}};

static void InitDefaultsscc_info_GetNetworkParametersProposalsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNetworkParametersProposalsRequest_default_instance_;
    new (ptr) ::api::GetNetworkParametersProposalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNetworkParametersProposalsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNetworkParametersProposalsRequest_api_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_GetNetworkParametersProposalsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNetworkParametersProposalsResponse_default_instance_;
    new (ptr) ::api::GetNetworkParametersProposalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNetworkParametersProposalsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNetworkParametersProposalsResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetNewAssetProposalsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNewAssetProposalsRequest_default_instance_;
    new (ptr) ::api::GetNewAssetProposalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNewAssetProposalsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNewAssetProposalsRequest_api_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_GetNewAssetProposalsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNewAssetProposalsResponse_default_instance_;
    new (ptr) ::api::GetNewAssetProposalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNewAssetProposalsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNewAssetProposalsResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetNewMarketProposalsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNewMarketProposalsRequest_default_instance_;
    new (ptr) ::api::GetNewMarketProposalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNewMarketProposalsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNewMarketProposalsRequest_api_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_GetNewMarketProposalsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNewMarketProposalsResponse_default_instance_;
    new (ptr) ::api::GetNewMarketProposalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNewMarketProposalsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNewMarketProposalsResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetNodeSignaturesAggregateRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNodeSignaturesAggregateRequest_default_instance_;
    new (ptr) ::api::GetNodeSignaturesAggregateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetNodeSignaturesAggregateRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetNodeSignaturesAggregateRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_GetNodeSignaturesAggregateResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetNodeSignaturesAggregateResponse_default_instance_;
    new (ptr) ::api::GetNodeSignaturesAggregateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNodeSignaturesAggregateResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNodeSignaturesAggregateResponse_api_2ftrading_2eproto}, {
      &scc_info_NodeSignature_vega_2eproto.base,}};

static void InitDefaultsscc_info_GetProposalByIDRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalByIDRequest_default_instance_;
    new (ptr) ::api::GetProposalByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProposalByIDRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetProposalByIDRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_GetProposalByIDResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalByIDResponse_default_instance_;
    new (ptr) ::api::GetProposalByIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProposalByIDResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProposalByIDResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetProposalByReferenceRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalByReferenceRequest_default_instance_;
    new (ptr) ::api::GetProposalByReferenceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProposalByReferenceRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetProposalByReferenceRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_GetProposalByReferenceResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalByReferenceResponse_default_instance_;
    new (ptr) ::api::GetProposalByReferenceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProposalByReferenceResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProposalByReferenceResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetProposalsByPartyRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalsByPartyRequest_default_instance_;
    new (ptr) ::api::GetProposalsByPartyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProposalsByPartyRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProposalsByPartyRequest_api_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_GetProposalsByPartyResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalsByPartyResponse_default_instance_;
    new (ptr) ::api::GetProposalsByPartyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProposalsByPartyResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProposalsByPartyResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetProposalsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalsRequest_default_instance_;
    new (ptr) ::api::GetProposalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProposalsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProposalsRequest_api_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_GetProposalsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetProposalsResponse_default_instance_;
    new (ptr) ::api::GetProposalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProposalsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProposalsResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetUpdateMarketProposalsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetUpdateMarketProposalsRequest_default_instance_;
    new (ptr) ::api::GetUpdateMarketProposalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetUpdateMarketProposalsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetUpdateMarketProposalsRequest_api_2ftrading_2eproto}, {
      &scc_info_OptionalProposalState_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_GetUpdateMarketProposalsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetUpdateMarketProposalsResponse_default_instance_;
    new (ptr) ::api::GetUpdateMarketProposalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetUpdateMarketProposalsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetUpdateMarketProposalsResponse_api_2ftrading_2eproto}, {
      &scc_info_GovernanceData_governance_2eproto.base,}};

static void InitDefaultsscc_info_GetVotesByPartyRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetVotesByPartyRequest_default_instance_;
    new (ptr) ::api::GetVotesByPartyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetVotesByPartyRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetVotesByPartyRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_GetVotesByPartyResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_GetVotesByPartyResponse_default_instance_;
    new (ptr) ::api::GetVotesByPartyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetVotesByPartyResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetVotesByPartyResponse_api_2ftrading_2eproto}, {
      &scc_info_Vote_governance_2eproto.base,}};

static void InitDefaultsscc_info_LastTradeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_LastTradeRequest_default_instance_;
    new (ptr) ::api::LastTradeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LastTradeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LastTradeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_LastTradeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_LastTradeResponse_default_instance_;
    new (ptr) ::api::LastTradeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LastTradeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LastTradeResponse_api_2ftrading_2eproto}, {
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_LiquidityProvisionsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_LiquidityProvisionsRequest_default_instance_;
    new (ptr) ::api::LiquidityProvisionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiquidityProvisionsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LiquidityProvisionsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_LiquidityProvisionsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_LiquidityProvisionsResponse_default_instance_;
    new (ptr) ::api::LiquidityProvisionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityProvisionsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LiquidityProvisionsResponse_api_2ftrading_2eproto}, {
      &scc_info_LiquidityProvision_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarginLevelsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarginLevelsRequest_default_instance_;
    new (ptr) ::api::MarginLevelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarginLevelsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarginLevelsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarginLevelsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarginLevelsResponse_default_instance_;
    new (ptr) ::api::MarginLevelsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarginLevelsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarginLevelsResponse_api_2ftrading_2eproto}, {
      &scc_info_MarginLevels_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarginLevelsSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarginLevelsSubscribeRequest_default_instance_;
    new (ptr) ::api::MarginLevelsSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarginLevelsSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarginLevelsSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketAccountsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketAccountsRequest_default_instance_;
    new (ptr) ::api::MarketAccountsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketAccountsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketAccountsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketAccountsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketAccountsResponse_default_instance_;
    new (ptr) ::api::MarketAccountsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketAccountsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketAccountsResponse_api_2ftrading_2eproto}, {
      &scc_info_Account_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketByIDRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketByIDRequest_default_instance_;
    new (ptr) ::api::MarketByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketByIDRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketByIDRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketByIDResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketByIDResponse_default_instance_;
    new (ptr) ::api::MarketByIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketByIDResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketByIDResponse_api_2ftrading_2eproto}, {
      &scc_info_Market_markets_2eproto.base,}};

static void InitDefaultsscc_info_MarketDataByIDRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketDataByIDRequest_default_instance_;
    new (ptr) ::api::MarketDataByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketDataByIDRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketDataByIDRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketDataByIDResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketDataByIDResponse_default_instance_;
    new (ptr) ::api::MarketDataByIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDataByIDResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketDataByIDResponse_api_2ftrading_2eproto}, {
      &scc_info_MarketData_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketDepthRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketDepthRequest_default_instance_;
    new (ptr) ::api::MarketDepthRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketDepthRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketDepthRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketDepthResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketDepthResponse_default_instance_;
    new (ptr) ::api::MarketDepthResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MarketDepthResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MarketDepthResponse_api_2ftrading_2eproto}, {
      &scc_info_PriceLevel_vega_2eproto.base,
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketDepthSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketDepthSubscribeRequest_default_instance_;
    new (ptr) ::api::MarketDepthSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketDepthSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketDepthSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketDepthUpdatesSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketDepthUpdatesSubscribeRequest_default_instance_;
    new (ptr) ::api::MarketDepthUpdatesSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketDepthUpdatesSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketDepthUpdatesSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketsDataResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketsDataResponse_default_instance_;
    new (ptr) ::api::MarketsDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketsDataResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketsDataResponse_api_2ftrading_2eproto}, {
      &scc_info_MarketData_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketsDataSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketsDataSubscribeRequest_default_instance_;
    new (ptr) ::api::MarketsDataSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketsDataSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketsDataSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_MarketsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_MarketsResponse_default_instance_;
    new (ptr) ::api::MarketsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketsResponse_api_2ftrading_2eproto}, {
      &scc_info_Market_markets_2eproto.base,}};

static void InitDefaultsscc_info_NetworkParametersRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_NetworkParametersRequest_default_instance_;
    new (ptr) ::api::NetworkParametersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkParametersRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkParametersRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_NetworkParametersResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_NetworkParametersResponse_default_instance_;
    new (ptr) ::api::NetworkParametersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkParametersResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NetworkParametersResponse_api_2ftrading_2eproto}, {
      &scc_info_NetworkParameter_vega_2eproto.base,}};

static void InitDefaultsscc_info_ObserveEventsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ObserveEventsRequest_default_instance_;
    new (ptr) ::api::ObserveEventsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObserveEventsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObserveEventsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_ObserveEventsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ObserveEventsResponse_default_instance_;
    new (ptr) ::api::ObserveEventsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObserveEventsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObserveEventsResponse_api_2ftrading_2eproto}, {
      &scc_info_BusEvent_events_2eproto.base,}};

static void InitDefaultsscc_info_ObservePartyProposalsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ObservePartyProposalsRequest_default_instance_;
    new (ptr) ::api::ObservePartyProposalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObservePartyProposalsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObservePartyProposalsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_ObservePartyVotesRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ObservePartyVotesRequest_default_instance_;
    new (ptr) ::api::ObservePartyVotesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObservePartyVotesRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObservePartyVotesRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_ObserveProposalVotesRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_ObserveProposalVotesRequest_default_instance_;
    new (ptr) ::api::ObserveProposalVotesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObserveProposalVotesRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObserveProposalVotesRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_OptionalProposalState_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OptionalProposalState_default_instance_;
    new (ptr) ::api::OptionalProposalState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionalProposalState_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OptionalProposalState_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_OrderByIDRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrderByIDRequest_default_instance_;
    new (ptr) ::api::OrderByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderByIDRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderByIDRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_OrderByMarketAndIdRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrderByMarketAndIdRequest_default_instance_;
    new (ptr) ::api::OrderByMarketAndIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderByMarketAndIdRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderByMarketAndIdRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_OrderByMarketAndIdResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrderByMarketAndIdResponse_default_instance_;
    new (ptr) ::api::OrderByMarketAndIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderByMarketAndIdResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderByMarketAndIdResponse_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrderByReferenceRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrderByReferenceRequest_default_instance_;
    new (ptr) ::api::OrderByReferenceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderByReferenceRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderByReferenceRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_OrderByReferenceResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrderByReferenceResponse_default_instance_;
    new (ptr) ::api::OrderByReferenceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderByReferenceResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderByReferenceResponse_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrderVersionsByIDRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrderVersionsByIDRequest_default_instance_;
    new (ptr) ::api::OrderVersionsByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderVersionsByIDRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderVersionsByIDRequest_api_2ftrading_2eproto}, {
      &scc_info_Pagination_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_OrderVersionsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrderVersionsResponse_default_instance_;
    new (ptr) ::api::OrderVersionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderVersionsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderVersionsResponse_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrdersByMarketRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrdersByMarketRequest_default_instance_;
    new (ptr) ::api::OrdersByMarketRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrdersByMarketRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrdersByMarketRequest_api_2ftrading_2eproto}, {
      &scc_info_Pagination_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_OrdersByMarketResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrdersByMarketResponse_default_instance_;
    new (ptr) ::api::OrdersByMarketResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrdersByMarketResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrdersByMarketResponse_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrdersByPartyRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrdersByPartyRequest_default_instance_;
    new (ptr) ::api::OrdersByPartyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrdersByPartyRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrdersByPartyRequest_api_2ftrading_2eproto}, {
      &scc_info_Pagination_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_OrdersByPartyResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrdersByPartyResponse_default_instance_;
    new (ptr) ::api::OrdersByPartyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrdersByPartyResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrdersByPartyResponse_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrdersStream_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrdersStream_default_instance_;
    new (ptr) ::api::OrdersStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrdersStream_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrdersStream_api_2ftrading_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrdersSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_OrdersSubscribeRequest_default_instance_;
    new (ptr) ::api::OrdersSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrdersSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrdersSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_Pagination_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_Pagination_default_instance_;
    new (ptr) ::api::Pagination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pagination_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pagination_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PartiesResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PartiesResponse_default_instance_;
    new (ptr) ::api::PartiesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartiesResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartiesResponse_api_2ftrading_2eproto}, {
      &scc_info_Party_vega_2eproto.base,}};

static void InitDefaultsscc_info_PartyAccountsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PartyAccountsRequest_default_instance_;
    new (ptr) ::api::PartyAccountsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyAccountsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyAccountsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PartyAccountsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PartyAccountsResponse_default_instance_;
    new (ptr) ::api::PartyAccountsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyAccountsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyAccountsResponse_api_2ftrading_2eproto}, {
      &scc_info_Account_vega_2eproto.base,}};

static void InitDefaultsscc_info_PartyByIDRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PartyByIDRequest_default_instance_;
    new (ptr) ::api::PartyByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyByIDRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyByIDRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PartyByIDResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PartyByIDResponse_default_instance_;
    new (ptr) ::api::PartyByIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyByIDResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyByIDResponse_api_2ftrading_2eproto}, {
      &scc_info_Party_vega_2eproto.base,}};

static void InitDefaultsscc_info_PositionsByPartyRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PositionsByPartyRequest_default_instance_;
    new (ptr) ::api::PositionsByPartyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionsByPartyRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PositionsByPartyRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PositionsByPartyResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PositionsByPartyResponse_default_instance_;
    new (ptr) ::api::PositionsByPartyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionsByPartyResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PositionsByPartyResponse_api_2ftrading_2eproto}, {
      &scc_info_Position_vega_2eproto.base,}};

static void InitDefaultsscc_info_PositionsSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PositionsSubscribeRequest_default_instance_;
    new (ptr) ::api::PositionsSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionsSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PositionsSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PrepareAmendOrderResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareAmendOrderResponse_default_instance_;
    new (ptr) ::api::PrepareAmendOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareAmendOrderResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrepareAmendOrderResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PrepareCancelOrderResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareCancelOrderResponse_default_instance_;
    new (ptr) ::api::PrepareCancelOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareCancelOrderResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrepareCancelOrderResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PrepareLiquidityProvisionRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareLiquidityProvisionRequest_default_instance_;
    new (ptr) ::api::PrepareLiquidityProvisionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareLiquidityProvisionRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareLiquidityProvisionRequest_api_2ftrading_2eproto}, {
      &scc_info_LiquidityProvisionSubmission_vega_2eproto.base,}};

static void InitDefaultsscc_info_PrepareLiquidityProvisionResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareLiquidityProvisionResponse_default_instance_;
    new (ptr) ::api::PrepareLiquidityProvisionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareLiquidityProvisionResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrepareLiquidityProvisionResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PrepareProposalRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareProposalRequest_default_instance_;
    new (ptr) ::api::PrepareProposalRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareProposalRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareProposalRequest_api_2ftrading_2eproto}, {
      &scc_info_ProposalTerms_governance_2eproto.base,}};

static void InitDefaultsscc_info_PrepareProposalResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareProposalResponse_default_instance_;
    new (ptr) ::api::PrepareProposalResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareProposalResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareProposalResponse_api_2ftrading_2eproto}, {
      &scc_info_Proposal_governance_2eproto.base,}};

static void InitDefaultsscc_info_PrepareSubmitOrderResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareSubmitOrderResponse_default_instance_;
    new (ptr) ::api::PrepareSubmitOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareSubmitOrderResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrepareSubmitOrderResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PrepareVoteRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareVoteRequest_default_instance_;
    new (ptr) ::api::PrepareVoteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareVoteRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareVoteRequest_api_2ftrading_2eproto}, {
      &scc_info_Vote_governance_2eproto.base,}};

static void InitDefaultsscc_info_PrepareVoteResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareVoteResponse_default_instance_;
    new (ptr) ::api::PrepareVoteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareVoteResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareVoteResponse_api_2ftrading_2eproto}, {
      &scc_info_Vote_governance_2eproto.base,}};

static void InitDefaultsscc_info_PrepareWithdrawRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareWithdrawRequest_default_instance_;
    new (ptr) ::api::PrepareWithdrawRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrepareWithdrawRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrepareWithdrawRequest_api_2ftrading_2eproto}, {
      &scc_info_WithdrawSubmission_vega_2eproto.base,}};

static void InitDefaultsscc_info_PrepareWithdrawResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PrepareWithdrawResponse_default_instance_;
    new (ptr) ::api::PrepareWithdrawResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareWithdrawResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrepareWithdrawResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_PropagateChainEventRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PropagateChainEventRequest_default_instance_;
    new (ptr) ::api::PropagateChainEventRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PropagateChainEventRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PropagateChainEventRequest_api_2ftrading_2eproto}, {
      &scc_info_ChainEvent_chain_5fevents_2eproto.base,}};

static void InitDefaultsscc_info_PropagateChainEventResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_PropagateChainEventResponse_default_instance_;
    new (ptr) ::api::PropagateChainEventResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropagateChainEventResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PropagateChainEventResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_SubmitOrderRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_SubmitOrderRequest_default_instance_;
    new (ptr) ::api::SubmitOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmitOrderRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubmitOrderRequest_api_2ftrading_2eproto}, {
      &scc_info_OrderSubmission_vega_2eproto.base,}};

static void InitDefaultsscc_info_SubmitTransactionRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_SubmitTransactionRequest_default_instance_;
    new (ptr) ::api::SubmitTransactionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubmitTransactionRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubmitTransactionRequest_api_2ftrading_2eproto}, {
      &scc_info_SignedBundle_vega_2eproto.base,}};

static void InitDefaultsscc_info_SubmitTransactionResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_SubmitTransactionResponse_default_instance_;
    new (ptr) ::api::SubmitTransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubmitTransactionResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubmitTransactionResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_TradesByMarketRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesByMarketRequest_default_instance_;
    new (ptr) ::api::TradesByMarketRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradesByMarketRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradesByMarketRequest_api_2ftrading_2eproto}, {
      &scc_info_Pagination_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_TradesByMarketResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesByMarketResponse_default_instance_;
    new (ptr) ::api::TradesByMarketResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradesByMarketResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradesByMarketResponse_api_2ftrading_2eproto}, {
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_TradesByOrderRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesByOrderRequest_default_instance_;
    new (ptr) ::api::TradesByOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradesByOrderRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TradesByOrderRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_TradesByOrderResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesByOrderResponse_default_instance_;
    new (ptr) ::api::TradesByOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradesByOrderResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradesByOrderResponse_api_2ftrading_2eproto}, {
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_TradesByPartyRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesByPartyRequest_default_instance_;
    new (ptr) ::api::TradesByPartyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradesByPartyRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradesByPartyRequest_api_2ftrading_2eproto}, {
      &scc_info_Pagination_api_2ftrading_2eproto.base,}};

static void InitDefaultsscc_info_TradesByPartyResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesByPartyResponse_default_instance_;
    new (ptr) ::api::TradesByPartyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradesByPartyResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradesByPartyResponse_api_2ftrading_2eproto}, {
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_TradesStream_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesStream_default_instance_;
    new (ptr) ::api::TradesStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradesStream_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradesStream_api_2ftrading_2eproto}, {
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_TradesSubscribeRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_TradesSubscribeRequest_default_instance_;
    new (ptr) ::api::TradesSubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TradesSubscribeRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TradesSubscribeRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_VegaTimeResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_VegaTimeResponse_default_instance_;
    new (ptr) ::api::VegaTimeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VegaTimeResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VegaTimeResponse_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_WithdrawalRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_WithdrawalRequest_default_instance_;
    new (ptr) ::api::WithdrawalRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WithdrawalRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WithdrawalRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_WithdrawalResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_WithdrawalResponse_default_instance_;
    new (ptr) ::api::WithdrawalResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawalResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WithdrawalResponse_api_2ftrading_2eproto}, {
      &scc_info_Withdrawal_vega_2eproto.base,}};

static void InitDefaultsscc_info_WithdrawalsRequest_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_WithdrawalsRequest_default_instance_;
    new (ptr) ::api::WithdrawalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WithdrawalsRequest_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WithdrawalsRequest_api_2ftrading_2eproto}, {}};

static void InitDefaultsscc_info_WithdrawalsResponse_api_2ftrading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_WithdrawalsResponse_default_instance_;
    new (ptr) ::api::WithdrawalsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawalsResponse_api_2ftrading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WithdrawalsResponse_api_2ftrading_2eproto}, {
      &scc_info_Withdrawal_vega_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_api_2ftrading_2eproto[121];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_api_2ftrading_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_api_2ftrading_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_api_2ftrading_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PropagateChainEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PropagateChainEventRequest, evt_),
  PROTOBUF_FIELD_OFFSET(::api::PropagateChainEventRequest, pubkey_),
  PROTOBUF_FIELD_OFFSET(::api::PropagateChainEventRequest, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PropagateChainEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PropagateChainEventResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::SubmitTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::SubmitTransactionRequest, tx_),
  PROTOBUF_FIELD_OFFSET(::api::SubmitTransactionRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::SubmitTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::SubmitTransactionResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareWithdrawRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareWithdrawRequest, withdraw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareWithdrawResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareWithdrawResponse, blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareSubmitOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareSubmitOrderResponse, blob_),
  PROTOBUF_FIELD_OFFSET(::api::PrepareSubmitOrderResponse, submitid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareCancelOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareCancelOrderResponse, blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareAmendOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareAmendOrderResponse, blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::SubmitOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::SubmitOrderRequest, submission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::CancelOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CancelOrderRequest, cancellation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::AmendOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::AmendOrderRequest, amendment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::AssetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::AssetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::AssetsResponse, assets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::AssetByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::AssetByIDRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::AssetByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::AssetByIDResponse, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNodeSignaturesAggregateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNodeSignaturesAggregateRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNodeSignaturesAggregateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNodeSignaturesAggregateResponse, signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OptionalProposalState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OptionalProposalState, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsRequest, selectinstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsByPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsByPartyRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsByPartyRequest, selectinstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsByPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalsByPartyResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetVotesByPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetVotesByPartyRequest, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetVotesByPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetVotesByPartyResponse, votes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNewMarketProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNewMarketProposalsRequest, selectinstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNewMarketProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNewMarketProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetUpdateMarketProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetUpdateMarketProposalsRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::GetUpdateMarketProposalsRequest, selectinstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetUpdateMarketProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetUpdateMarketProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNetworkParametersProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNetworkParametersProposalsRequest, selectinstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNetworkParametersProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNetworkParametersProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNewAssetProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNewAssetProposalsRequest, selectinstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetNewAssetProposalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetNewAssetProposalsResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByIDRequest, proposalid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByIDResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByReferenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByReferenceRequest, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByReferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::GetProposalByReferenceResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ObservePartyProposalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ObservePartyProposalsRequest, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ObserveProposalVotesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ObserveProposalVotesRequest, proposalid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ObservePartyVotesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ObservePartyVotesRequest, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsSubscribeRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsSubscribeRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarginLevelsResponse, marginlevels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketsDataSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketsDataSubscribeRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketDataByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketDataByIDRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketDataByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketDataByIDResponse, marketdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketsDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketsDataResponse, marketsdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::LastTradeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::LastTradeRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::LastTradeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::LastTradeResponse, trade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketByIDRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketByIDResponse, market_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PartyByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PartyByIDRequest, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PartyByIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PartyByIDResponse, party_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PartiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PartiesResponse, parties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesByPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesByPartyRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::TradesByPartyRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::TradesByPartyRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesByPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesByPartyResponse, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesByOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesByOrderRequest, orderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesByOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesByOrderResponse, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::AccountsSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::AccountsSubscribeRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::AccountsSubscribeRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::AccountsSubscribeRequest, asset_),
  PROTOBUF_FIELD_OFFSET(::api::AccountsSubscribeRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrdersSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrdersSubscribeRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::OrdersSubscribeRequest, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesSubscribeRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::TradesSubscribeRequest, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::CandlesSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CandlesSubscribeRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::CandlesSubscribeRequest, interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthSubscribeRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthUpdatesSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthUpdatesSubscribeRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PositionsSubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PositionsSubscribeRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::PositionsSubscribeRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByMarketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByMarketRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::OrdersByMarketRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByMarketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByMarketResponse, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByPartyRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::OrdersByPartyRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrdersByPartyResponse, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrderByMarketAndIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrderByMarketAndIdRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::OrderByMarketAndIdRequest, orderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrderByMarketAndIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrderByMarketAndIdResponse, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrderByReferenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrderByReferenceRequest, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrderByReferenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrderByReferenceResponse, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketsResponse, markets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::CandlesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CandlesRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::CandlesRequest, sincetimestamp_),
  PROTOBUF_FIELD_OFFSET(::api::CandlesRequest, interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::CandlesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::CandlesResponse, candles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthRequest, maxdepth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthResponse, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthResponse, buy_),
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthResponse, sell_),
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthResponse, lasttrade_),
  PROTOBUF_FIELD_OFFSET(::api::MarketDepthResponse, sequencenumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesByMarketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesByMarketRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::TradesByMarketRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesByMarketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesByMarketResponse, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PositionsByPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PositionsByPartyRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::PositionsByPartyRequest, marketid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PositionsByPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PositionsByPartyResponse, positions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::VegaTimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::VegaTimeResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::Pagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::Pagination, skip_),
  PROTOBUF_FIELD_OFFSET(::api::Pagination, limit_),
  PROTOBUF_FIELD_OFFSET(::api::Pagination, descending_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrdersStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrdersStream, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::TradesStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::TradesStream, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PartyAccountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PartyAccountsRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::PartyAccountsRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::PartyAccountsRequest, type_),
  PROTOBUF_FIELD_OFFSET(::api::PartyAccountsRequest, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PartyAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PartyAccountsResponse, accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketAccountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketAccountsRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::MarketAccountsRequest, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::MarketAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::MarketAccountsResponse, accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::FeeInfrastructureAccountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::FeeInfrastructureAccountsRequest, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::FeeInfrastructureAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::FeeInfrastructureAccountsResponse, accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareProposalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareProposalRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::PrepareProposalRequest, reference_),
  PROTOBUF_FIELD_OFFSET(::api::PrepareProposalRequest, proposal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareProposalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareProposalResponse, blob_),
  PROTOBUF_FIELD_OFFSET(::api::PrepareProposalResponse, pendingproposal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareVoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareVoteRequest, vote_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareVoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareVoteResponse, blob_),
  PROTOBUF_FIELD_OFFSET(::api::PrepareVoteResponse, vote_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareLiquidityProvisionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareLiquidityProvisionRequest, submission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::PrepareLiquidityProvisionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::PrepareLiquidityProvisionResponse, blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrderByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrderByIDRequest, orderid_),
  PROTOBUF_FIELD_OFFSET(::api::OrderByIDRequest, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrderVersionsByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrderVersionsByIDRequest, orderid_),
  PROTOBUF_FIELD_OFFSET(::api::OrderVersionsByIDRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::OrderVersionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::OrderVersionsResponse, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::EstimateFeeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::EstimateFeeRequest, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::EstimateFeeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::EstimateFeeResponse, fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::EstimateMarginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::EstimateMarginRequest, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::EstimateMarginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::EstimateMarginResponse, marginlevels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ObserveEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ObserveEventsRequest, type_),
  PROTOBUF_FIELD_OFFSET(::api::ObserveEventsRequest, marketid_),
  PROTOBUF_FIELD_OFFSET(::api::ObserveEventsRequest, partyid_),
  PROTOBUF_FIELD_OFFSET(::api::ObserveEventsRequest, batchsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ObserveEventsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ObserveEventsResponse, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::WithdrawalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::WithdrawalsRequest, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::WithdrawalsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::WithdrawalsResponse, withdrawals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::WithdrawalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::WithdrawalRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::WithdrawalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::WithdrawalResponse, withdrawal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ERC20WithdrawalApprovalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ERC20WithdrawalApprovalRequest, withdrawalid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::ERC20WithdrawalApprovalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::ERC20WithdrawalApprovalResponse, assetsource_),
  PROTOBUF_FIELD_OFFSET(::api::ERC20WithdrawalApprovalResponse, amount_),
  PROTOBUF_FIELD_OFFSET(::api::ERC20WithdrawalApprovalResponse, expiry_),
  PROTOBUF_FIELD_OFFSET(::api::ERC20WithdrawalApprovalResponse, nonce_),
  PROTOBUF_FIELD_OFFSET(::api::ERC20WithdrawalApprovalResponse, signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DepositsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::DepositsRequest, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DepositsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::DepositsResponse, deposits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DepositRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::DepositRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::DepositResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::DepositResponse, deposit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::NetworkParametersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::NetworkParametersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::NetworkParametersResponse, networkparameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::LiquidityProvisionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::LiquidityProvisionsRequest, market_),
  PROTOBUF_FIELD_OFFSET(::api::LiquidityProvisionsRequest, party_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::LiquidityProvisionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::LiquidityProvisionsResponse, liquidityprovisions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::api::PropagateChainEventRequest)},
  { 8, -1, sizeof(::api::PropagateChainEventResponse)},
  { 14, -1, sizeof(::api::SubmitTransactionRequest)},
  { 21, -1, sizeof(::api::SubmitTransactionResponse)},
  { 27, -1, sizeof(::api::PrepareWithdrawRequest)},
  { 33, -1, sizeof(::api::PrepareWithdrawResponse)},
  { 39, -1, sizeof(::api::PrepareSubmitOrderResponse)},
  { 46, -1, sizeof(::api::PrepareCancelOrderResponse)},
  { 52, -1, sizeof(::api::PrepareAmendOrderResponse)},
  { 58, -1, sizeof(::api::SubmitOrderRequest)},
  { 64, -1, sizeof(::api::CancelOrderRequest)},
  { 70, -1, sizeof(::api::AmendOrderRequest)},
  { 76, -1, sizeof(::api::AssetsRequest)},
  { 81, -1, sizeof(::api::AssetsResponse)},
  { 87, -1, sizeof(::api::AssetByIDRequest)},
  { 93, -1, sizeof(::api::AssetByIDResponse)},
  { 99, -1, sizeof(::api::GetNodeSignaturesAggregateRequest)},
  { 105, -1, sizeof(::api::GetNodeSignaturesAggregateResponse)},
  { 111, -1, sizeof(::api::OptionalProposalState)},
  { 117, -1, sizeof(::api::GetProposalsRequest)},
  { 123, -1, sizeof(::api::GetProposalsResponse)},
  { 129, -1, sizeof(::api::GetProposalsByPartyRequest)},
  { 136, -1, sizeof(::api::GetProposalsByPartyResponse)},
  { 142, -1, sizeof(::api::GetVotesByPartyRequest)},
  { 148, -1, sizeof(::api::GetVotesByPartyResponse)},
  { 154, -1, sizeof(::api::GetNewMarketProposalsRequest)},
  { 160, -1, sizeof(::api::GetNewMarketProposalsResponse)},
  { 166, -1, sizeof(::api::GetUpdateMarketProposalsRequest)},
  { 173, -1, sizeof(::api::GetUpdateMarketProposalsResponse)},
  { 179, -1, sizeof(::api::GetNetworkParametersProposalsRequest)},
  { 185, -1, sizeof(::api::GetNetworkParametersProposalsResponse)},
  { 191, -1, sizeof(::api::GetNewAssetProposalsRequest)},
  { 197, -1, sizeof(::api::GetNewAssetProposalsResponse)},
  { 203, -1, sizeof(::api::GetProposalByIDRequest)},
  { 209, -1, sizeof(::api::GetProposalByIDResponse)},
  { 215, -1, sizeof(::api::GetProposalByReferenceRequest)},
  { 221, -1, sizeof(::api::GetProposalByReferenceResponse)},
  { 227, -1, sizeof(::api::ObservePartyProposalsRequest)},
  { 233, -1, sizeof(::api::ObserveProposalVotesRequest)},
  { 239, -1, sizeof(::api::ObservePartyVotesRequest)},
  { 245, -1, sizeof(::api::MarginLevelsSubscribeRequest)},
  { 252, -1, sizeof(::api::MarginLevelsRequest)},
  { 259, -1, sizeof(::api::MarginLevelsResponse)},
  { 265, -1, sizeof(::api::MarketsDataSubscribeRequest)},
  { 271, -1, sizeof(::api::MarketDataByIDRequest)},
  { 277, -1, sizeof(::api::MarketDataByIDResponse)},
  { 283, -1, sizeof(::api::MarketsDataResponse)},
  { 289, -1, sizeof(::api::LastTradeRequest)},
  { 295, -1, sizeof(::api::LastTradeResponse)},
  { 301, -1, sizeof(::api::MarketByIDRequest)},
  { 307, -1, sizeof(::api::MarketByIDResponse)},
  { 313, -1, sizeof(::api::PartyByIDRequest)},
  { 319, -1, sizeof(::api::PartyByIDResponse)},
  { 325, -1, sizeof(::api::PartiesResponse)},
  { 331, -1, sizeof(::api::TradesByPartyRequest)},
  { 339, -1, sizeof(::api::TradesByPartyResponse)},
  { 345, -1, sizeof(::api::TradesByOrderRequest)},
  { 351, -1, sizeof(::api::TradesByOrderResponse)},
  { 357, -1, sizeof(::api::AccountsSubscribeRequest)},
  { 366, -1, sizeof(::api::OrdersSubscribeRequest)},
  { 373, -1, sizeof(::api::TradesSubscribeRequest)},
  { 380, -1, sizeof(::api::CandlesSubscribeRequest)},
  { 387, -1, sizeof(::api::MarketDepthSubscribeRequest)},
  { 393, -1, sizeof(::api::MarketDepthUpdatesSubscribeRequest)},
  { 399, -1, sizeof(::api::PositionsSubscribeRequest)},
  { 406, -1, sizeof(::api::OrdersByMarketRequest)},
  { 413, -1, sizeof(::api::OrdersByMarketResponse)},
  { 419, -1, sizeof(::api::OrdersByPartyRequest)},
  { 426, -1, sizeof(::api::OrdersByPartyResponse)},
  { 432, -1, sizeof(::api::OrderByMarketAndIdRequest)},
  { 439, -1, sizeof(::api::OrderByMarketAndIdResponse)},
  { 445, -1, sizeof(::api::OrderByReferenceRequest)},
  { 451, -1, sizeof(::api::OrderByReferenceResponse)},
  { 457, -1, sizeof(::api::MarketsResponse)},
  { 463, -1, sizeof(::api::CandlesRequest)},
  { 471, -1, sizeof(::api::CandlesResponse)},
  { 477, -1, sizeof(::api::MarketDepthRequest)},
  { 484, -1, sizeof(::api::MarketDepthResponse)},
  { 494, -1, sizeof(::api::TradesByMarketRequest)},
  { 501, -1, sizeof(::api::TradesByMarketResponse)},
  { 507, -1, sizeof(::api::PositionsByPartyRequest)},
  { 514, -1, sizeof(::api::PositionsByPartyResponse)},
  { 520, -1, sizeof(::api::VegaTimeResponse)},
  { 526, -1, sizeof(::api::Pagination)},
  { 534, -1, sizeof(::api::OrdersStream)},
  { 540, -1, sizeof(::api::TradesStream)},
  { 546, -1, sizeof(::api::PartyAccountsRequest)},
  { 555, -1, sizeof(::api::PartyAccountsResponse)},
  { 561, -1, sizeof(::api::MarketAccountsRequest)},
  { 568, -1, sizeof(::api::MarketAccountsResponse)},
  { 574, -1, sizeof(::api::FeeInfrastructureAccountsRequest)},
  { 580, -1, sizeof(::api::FeeInfrastructureAccountsResponse)},
  { 586, -1, sizeof(::api::PrepareProposalRequest)},
  { 594, -1, sizeof(::api::PrepareProposalResponse)},
  { 601, -1, sizeof(::api::PrepareVoteRequest)},
  { 607, -1, sizeof(::api::PrepareVoteResponse)},
  { 614, -1, sizeof(::api::PrepareLiquidityProvisionRequest)},
  { 620, -1, sizeof(::api::PrepareLiquidityProvisionResponse)},
  { 626, -1, sizeof(::api::OrderByIDRequest)},
  { 633, -1, sizeof(::api::OrderVersionsByIDRequest)},
  { 640, -1, sizeof(::api::OrderVersionsResponse)},
  { 646, -1, sizeof(::api::EstimateFeeRequest)},
  { 652, -1, sizeof(::api::EstimateFeeResponse)},
  { 658, -1, sizeof(::api::EstimateMarginRequest)},
  { 664, -1, sizeof(::api::EstimateMarginResponse)},
  { 670, -1, sizeof(::api::ObserveEventsRequest)},
  { 679, -1, sizeof(::api::ObserveEventsResponse)},
  { 685, -1, sizeof(::api::WithdrawalsRequest)},
  { 691, -1, sizeof(::api::WithdrawalsResponse)},
  { 697, -1, sizeof(::api::WithdrawalRequest)},
  { 703, -1, sizeof(::api::WithdrawalResponse)},
  { 709, -1, sizeof(::api::ERC20WithdrawalApprovalRequest)},
  { 715, -1, sizeof(::api::ERC20WithdrawalApprovalResponse)},
  { 725, -1, sizeof(::api::DepositsRequest)},
  { 731, -1, sizeof(::api::DepositsResponse)},
  { 737, -1, sizeof(::api::DepositRequest)},
  { 743, -1, sizeof(::api::DepositResponse)},
  { 749, -1, sizeof(::api::NetworkParametersRequest)},
  { 754, -1, sizeof(::api::NetworkParametersResponse)},
  { 760, -1, sizeof(::api::LiquidityProvisionsRequest)},
  { 767, -1, sizeof(::api::LiquidityProvisionsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PropagateChainEventRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PropagateChainEventResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_SubmitTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_SubmitTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PrepareWithdrawRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PrepareWithdrawResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PrepareSubmitOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PrepareCancelOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PrepareAmendOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_SubmitOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_CancelOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_AmendOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_AssetsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_AssetsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_AssetByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_AssetByIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetNodeSignaturesAggregateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetNodeSignaturesAggregateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_OptionalProposalState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetProposalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetProposalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetProposalsByPartyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetProposalsByPartyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetVotesByPartyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetVotesByPartyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetNewMarketProposalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetNewMarketProposalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetUpdateMarketProposalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetUpdateMarketProposalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetNetworkParametersProposalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetNetworkParametersProposalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetNewAssetProposalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetNewAssetProposalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetProposalByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetProposalByIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetProposalByReferenceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_GetProposalByReferenceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_ObservePartyProposalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_ObserveProposalVotesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_ObservePartyVotesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarginLevelsSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarginLevelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarginLevelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarketsDataSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarketDataByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarketDataByIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarketsDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_LastTradeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_LastTradeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarketByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarketByIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PartyByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PartyByIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PartiesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_TradesByPartyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_TradesByPartyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_TradesByOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_TradesByOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_AccountsSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_OrdersSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_TradesSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_CandlesSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarketDepthSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarketDepthUpdatesSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PositionsSubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_OrdersByMarketRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_OrdersByMarketResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_OrdersByPartyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_OrdersByPartyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_OrderByMarketAndIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_OrderByMarketAndIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_OrderByReferenceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_OrderByReferenceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarketsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_CandlesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_CandlesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarketDepthRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarketDepthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_TradesByMarketRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_TradesByMarketResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PositionsByPartyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PositionsByPartyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_VegaTimeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_Pagination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_OrdersStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_TradesStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PartyAccountsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PartyAccountsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarketAccountsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_MarketAccountsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_FeeInfrastructureAccountsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_FeeInfrastructureAccountsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PrepareProposalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PrepareProposalResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PrepareVoteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PrepareVoteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PrepareLiquidityProvisionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_PrepareLiquidityProvisionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_OrderByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_OrderVersionsByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_OrderVersionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_EstimateFeeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_EstimateFeeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_EstimateMarginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_EstimateMarginResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_ObserveEventsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_ObserveEventsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_WithdrawalsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_WithdrawalsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_WithdrawalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_WithdrawalResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_ERC20WithdrawalApprovalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_ERC20WithdrawalApprovalResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_DepositsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_DepositsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_DepositRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_DepositResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_NetworkParametersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_NetworkParametersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_LiquidityProvisionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_LiquidityProvisionsResponse_default_instance_),
};

const char descriptor_table_protodef_api_2ftrading_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021api/trading.proto\022\003api\032\nvega.proto\032\rma"
  "rkets.proto\032\020governance.proto\032\022chain_eve"
  "nts.proto\032\014assets.proto\032\014events.proto\032\033g"
  "oogle/protobuf/empty.proto\0326github.com/m"
  "witkow/go-proto-validators/validator.pro"
  "to\"v\n\032PropagateChainEventRequest\022\"\n\003evt\030"
  "\001 \001(\0132\020.vega.ChainEventR\003evt\022\026\n\006pubKey\030\002"
  " \001(\tR\006pubKey\022\034\n\tsignature\030\003 \001(\014R\tsignatu"
  "re\"7\n\033PropagateChainEventResponse\022\030\n\007suc"
  "cess\030\001 \001(\010R\007success\"\304\001\n\030SubmitTransactio"
  "nRequest\022\"\n\002tx\030\001 \001(\0132\022.vega.SignedBundle"
  "R\002tx\0226\n\004type\030\002 \001(\0162\".api.SubmitTransacti"
  "onRequest.TypeR\004type\"L\n\004Type\022\024\n\020TYPE_UNS"
  "PECIFIED\020\000\022\016\n\nTYPE_ASYNC\020\001\022\r\n\tTYPE_SYNC\020"
  "\002\022\017\n\013TYPE_COMMIT\020\003\"5\n\031SubmitTransactionR"
  "esponse\022\030\n\007success\030\001 \001(\010R\007success\"N\n\026Pre"
  "pareWithdrawRequest\0224\n\010withdraw\030\001 \001(\0132\030."
  "vega.WithdrawSubmissionR\010withdraw\"-\n\027Pre"
  "pareWithdrawResponse\022\022\n\004blob\030\001 \001(\014R\004blob"
  "\"L\n\032PrepareSubmitOrderResponse\022\022\n\004blob\030\001"
  " \001(\014R\004blob\022\032\n\010submitID\030\002 \001(\tR\010submitID\"0"
  "\n\032PrepareCancelOrderResponse\022\022\n\004blob\030\001 \001"
  "(\014R\004blob\"/\n\031PrepareAmendOrderResponse\022\022\n"
  "\004blob\030\001 \001(\014R\004blob\"K\n\022SubmitOrderRequest\022"
  "5\n\nsubmission\030\001 \001(\0132\025.vega.OrderSubmissi"
  "onR\nsubmission\"Q\n\022CancelOrderRequest\022;\n\014"
  "cancellation\030\001 \001(\0132\027.vega.OrderCancellat"
  "ionR\014cancellation\"G\n\021AmendOrderRequest\0222"
  "\n\tamendment\030\001 \001(\0132\024.vega.OrderAmendmentR"
  "\tamendment\"\017\n\rAssetsRequest\"5\n\016AssetsRes"
  "ponse\022#\n\006assets\030\001 \003(\0132\013.vega.AssetR\006asse"
  "ts\"*\n\020AssetByIDRequest\022\026\n\002ID\030\001 \001(\tB\006\342\337\037\002"
  "X\001R\002ID\"6\n\021AssetByIDResponse\022!\n\005asset\030\001 \001"
  "(\0132\013.vega.AssetR\005asset\";\n!GetNodeSignatu"
  "resAggregateRequest\022\026\n\002ID\030\001 \001(\tB\006\342\337\037\002X\001R"
  "\002ID\"Y\n\"GetNodeSignaturesAggregateRespons"
  "e\0223\n\nsignatures\030\001 \003(\0132\023.vega.NodeSignatu"
  "reR\nsignatures\"C\n\025OptionalProposalState\022"
  "*\n\005value\030\001 \001(\0162\024.vega.Proposal.StateR\005va"
  "lue\"W\n\023GetProposalsRequest\022@\n\rselectInSt"
  "ate\030\001 \001(\0132\032.api.OptionalProposalStateR\rs"
  "electInState\"@\n\024GetProposalsResponse\022(\n\004"
  "data\030\001 \003(\0132\024.vega.GovernanceDataR\004data\"\200"
  "\001\n\032GetProposalsByPartyRequest\022 \n\007partyID"
  "\030\001 \001(\tB\006\342\337\037\002X\001R\007partyID\022@\n\rselectInState"
  "\030\002 \001(\0132\032.api.OptionalProposalStateR\rsele"
  "ctInState\"G\n\033GetProposalsByPartyResponse"
  "\022(\n\004data\030\001 \003(\0132\024.vega.GovernanceDataR\004da"
  "ta\":\n\026GetVotesByPartyRequest\022 \n\007partyID\030"
  "\001 \001(\tB\006\342\337\037\002X\001R\007partyID\";\n\027GetVotesByPart"
  "yResponse\022 \n\005votes\030\001 \003(\0132\n.vega.VoteR\005vo"
  "tes\"`\n\034GetNewMarketProposalsRequest\022@\n\rs"
  "electInState\030\001 \001(\0132\032.api.OptionalProposa"
  "lStateR\rselectInState\"I\n\035GetNewMarketPro"
  "posalsResponse\022(\n\004data\030\001 \003(\0132\024.vega.Gove"
  "rnanceDataR\004data\"\207\001\n\037GetUpdateMarketProp"
  "osalsRequest\022\"\n\010marketID\030\001 \001(\tB\006\342\337\037\002X\001R\010"
  "marketID\022@\n\rselectInState\030\002 \001(\0132\032.api.Op"
  "tionalProposalStateR\rselectInState\"L\n Ge"
  "tUpdateMarketProposalsResponse\022(\n\004data\030\001"
  " \003(\0132\024.vega.GovernanceDataR\004data\"h\n$GetN"
  "etworkParametersProposalsRequest\022@\n\rsele"
  "ctInState\030\001 \001(\0132\032.api.OptionalProposalSt"
  "ateR\rselectInState\"Q\n%GetNetworkParamete"
  "rsProposalsResponse\022(\n\004data\030\001 \003(\0132\024.vega"
  ".GovernanceDataR\004data\"_\n\033GetNewAssetProp"
  "osalsRequest\022@\n\rselectInState\030\001 \001(\0132\032.ap"
  "i.OptionalProposalStateR\rselectInState\"H"
  "\n\034GetNewAssetProposalsResponse\022(\n\004data\030\001"
  " \003(\0132\024.vega.GovernanceDataR\004data\"@\n\026GetP"
  "roposalByIDRequest\022&\n\nproposalID\030\001 \001(\tB\006"
  "\342\337\037\002X\001R\nproposalID\"C\n\027GetProposalByIDRes"
  "ponse\022(\n\004data\030\001 \001(\0132\024.vega.GovernanceDat"
  "aR\004data\"E\n\035GetProposalByReferenceRequest"
  "\022$\n\treference\030\001 \001(\tB\006\342\337\037\002X\001R\treference\"J"
  "\n\036GetProposalByReferenceResponse\022(\n\004data"
  "\030\001 \001(\0132\024.vega.GovernanceDataR\004data\"@\n\034Ob"
  "servePartyProposalsRequest\022 \n\007partyID\030\001 "
  "\001(\tB\006\342\337\037\002X\001R\007partyID\"E\n\033ObserveProposalV"
  "otesRequest\022&\n\nproposalID\030\001 \001(\tB\006\342\337\037\002X\001R"
  "\nproposalID\"<\n\030ObservePartyVotesRequest\022"
  " \n\007partyID\030\001 \001(\tB\006\342\337\037\002X\001R\007partyID\"\\\n\034Mar"
  "ginLevelsSubscribeRequest\022 \n\007partyID\030\001 \001"
  "(\tB\006\342\337\037\002X\001R\007partyID\022\032\n\010marketID\030\002 \001(\tR\010m"
  "arketID\"S\n\023MarginLevelsRequest\022 \n\007partyI"
  "D\030\001 \001(\tB\006\342\337\037\002X\001R\007partyID\022\032\n\010marketID\030\002 \001"
  "(\tR\010marketID\"N\n\024MarginLevelsResponse\0226\n\014"
  "marginLevels\030\001 \003(\0132\022.vega.MarginLevelsR\014"
  "marginLevels\"9\n\033MarketsDataSubscribeRequ"
  "est\022\032\n\010marketID\030\001 \001(\tR\010marketID\";\n\025Marke"
  "tDataByIDRequest\022\"\n\010marketID\030\001 \001(\tB\006\342\337\037\002"
  "X\001R\010marketID\"J\n\026MarketDataByIDResponse\0220"
  "\n\nmarketData\030\001 \001(\0132\020.vega.MarketDataR\nma"
  "rketData\"I\n\023MarketsDataResponse\0222\n\013marke"
  "tsData\030\001 \003(\0132\020.vega.MarketDataR\013marketsD"
  "ata\"6\n\020LastTradeRequest\022\"\n\010marketID\030\001 \001("
  "\tB\006\342\337\037\002X\001R\010marketID\"6\n\021LastTradeResponse"
  "\022!\n\005trade\030\001 \001(\0132\013.vega.TradeR\005trade\"7\n\021M"
  "arketByIDRequest\022\"\n\010marketID\030\001 \001(\tB\006\342\337\037\002"
  "X\001R\010marketID\":\n\022MarketByIDResponse\022$\n\006ma"
  "rket\030\001 \001(\0132\014.vega.MarketR\006market\"4\n\020Part"
  "yByIDRequest\022 \n\007partyID\030\001 \001(\tB\006\342\337\037\002X\001R\007p"
  "artyID\"6\n\021PartyByIDResponse\022!\n\005party\030\001 \001"
  "(\0132\013.vega.PartyR\005party\"8\n\017PartiesRespons"
  "e\022%\n\007parties\030\001 \003(\0132\013.vega.PartyR\007parties"
  "\"}\n\024TradesByPartyRequest\022\030\n\007partyID\030\001 \001("
  "\tR\007partyID\022\032\n\010marketID\030\002 \001(\tR\010marketID\022/"
  "\n\npagination\030\003 \001(\0132\017.api.PaginationR\npag"
  "ination\"<\n\025TradesByPartyResponse\022#\n\006trad"
  "es\030\001 \003(\0132\013.vega.TradeR\006trades\"0\n\024TradesB"
  "yOrderRequest\022\030\n\007orderID\030\001 \001(\tR\007orderID\""
  "<\n\025TradesByOrderResponse\022#\n\006trades\030\001 \003(\013"
  "2\013.vega.TradeR\006trades\"\215\001\n\030AccountsSubscr"
  "ibeRequest\022\032\n\010marketID\030\001 \001(\tR\010marketID\022\030"
  "\n\007partyID\030\002 \001(\tR\007partyID\022\024\n\005asset\030\003 \001(\tR"
  "\005asset\022%\n\004type\030\004 \001(\0162\021.vega.AccountTypeR"
  "\004type\"N\n\026OrdersSubscribeRequest\022\032\n\010marke"
  "tID\030\001 \001(\tR\010marketID\022\030\n\007partyID\030\002 \001(\tR\007pa"
  "rtyID\"N\n\026TradesSubscribeRequest\022\032\n\010marke"
  "tID\030\001 \001(\tR\010marketID\022\030\n\007partyID\030\002 \001(\tR\007pa"
  "rtyID\"i\n\027CandlesSubscribeRequest\022\"\n\010mark"
  "etID\030\001 \001(\tB\006\342\337\037\002X\001R\010marketID\022*\n\010interval"
  "\030\002 \001(\0162\016.vega.IntervalR\010interval\"A\n\033Mark"
  "etDepthSubscribeRequest\022\"\n\010marketID\030\001 \001("
  "\tB\006\342\337\037\002X\001R\010marketID\"H\n\"MarketDepthUpdate"
  "sSubscribeRequest\022\"\n\010marketID\030\001 \001(\tB\006\342\337\037"
  "\002X\001R\010marketID\"Q\n\031PositionsSubscribeReque"
  "st\022\030\n\007partyID\030\001 \001(\tR\007partyID\022\032\n\010marketID"
  "\030\002 \001(\tR\010marketID\"l\n\025OrdersByMarketReques"
  "t\022\"\n\010marketID\030\001 \001(\tB\006\342\337\037\002X\001R\010marketID\022/\n"
  "\npagination\030\002 \001(\0132\017.api.PaginationR\npagi"
  "nation\"=\n\026OrdersByMarketResponse\022#\n\006orde"
  "rs\030\001 \003(\0132\013.vega.OrderR\006orders\"i\n\024OrdersB"
  "yPartyRequest\022 \n\007partyID\030\001 \001(\tB\006\342\337\037\002X\001R\007"
  "partyID\022/\n\npagination\030\002 \001(\0132\017.api.Pagina"
  "tionR\npagination\"<\n\025OrdersByPartyRespons"
  "e\022#\n\006orders\030\001 \003(\0132\013.vega.OrderR\006orders\"a"
  "\n\031OrderByMarketAndIdRequest\022\"\n\010marketID\030"
  "\001 \001(\tB\006\342\337\037\002X\001R\010marketID\022 \n\007orderID\030\002 \001(\t"
  "B\006\342\337\037\002X\001R\007orderID\"\?\n\032OrderByMarketAndIdR"
  "esponse\022!\n\005order\030\001 \001(\0132\013.vega.OrderR\005ord"
  "er\"\?\n\027OrderByReferenceRequest\022$\n\treferen"
  "ce\030\001 \001(\tB\006\342\337\037\002X\001R\treference\"=\n\030OrderByRe"
  "ferenceResponse\022!\n\005order\030\001 \001(\0132\013.vega.Or"
  "derR\005order\"9\n\017MarketsResponse\022&\n\007markets"
  "\030\001 \003(\0132\014.vega.MarketR\007markets\"\220\001\n\016Candle"
  "sRequest\022\"\n\010marketID\030\001 \001(\tB\006\342\337\037\002X\001R\010mark"
  "etID\022.\n\016sinceTimestamp\030\002 \001(\003B\006\342\337\037\002\020\000R\016si"
  "nceTimestamp\022*\n\010interval\030\003 \001(\0162\016.vega.In"
  "tervalR\010interval\"9\n\017CandlesResponse\022&\n\007c"
  "andles\030\001 \003(\0132\014.vega.CandleR\007candles\"T\n\022M"
  "arketDepthRequest\022\"\n\010marketID\030\001 \001(\tB\006\342\337\037"
  "\002X\001R\010marketID\022\032\n\010maxDepth\030\002 \001(\004R\010maxDept"
  "h\"\316\001\n\023MarketDepthResponse\022\032\n\010marketID\030\001 "
  "\001(\tR\010marketID\022\"\n\003buy\030\002 \003(\0132\020.vega.PriceL"
  "evelR\003buy\022$\n\004sell\030\003 \003(\0132\020.vega.PriceLeve"
  "lR\004sell\022)\n\tlastTrade\030\004 \001(\0132\013.vega.TradeR"
  "\tlastTrade\022&\n\016sequenceNumber\030\005 \001(\004R\016sequ"
  "enceNumber\"l\n\025TradesByMarketRequest\022\"\n\010m"
  "arketID\030\001 \001(\tB\006\342\337\037\002X\001R\010marketID\022/\n\npagin"
  "ation\030\002 \001(\0132\017.api.PaginationR\npagination"
  "\"=\n\026TradesByMarketResponse\022#\n\006trades\030\001 \003"
  "(\0132\013.vega.TradeR\006trades\"W\n\027PositionsByPa"
  "rtyRequest\022 \n\007partyID\030\001 \001(\tB\006\342\337\037\002X\001R\007par"
  "tyID\022\032\n\010marketID\030\002 \001(\tR\010marketID\"H\n\030Posi"
  "tionsByPartyResponse\022,\n\tpositions\030\001 \003(\0132"
  "\016.vega.PositionR\tpositions\"0\n\020VegaTimeRe"
  "sponse\022\034\n\ttimestamp\030\001 \001(\003R\ttimestamp\"V\n\n"
  "Pagination\022\022\n\004skip\030\001 \001(\004R\004skip\022\024\n\005limit\030"
  "\002 \001(\004R\005limit\022\036\n\ndescending\030\003 \001(\010R\ndescen"
  "ding\"3\n\014OrdersStream\022#\n\006orders\030\001 \003(\0132\013.v"
  "ega.OrderR\006orders\"3\n\014TradesStream\022#\n\006tra"
  "des\030\001 \003(\0132\013.vega.TradeR\006trades\"\211\001\n\024Party"
  "AccountsRequest\022\030\n\007partyID\030\001 \001(\tR\007partyI"
  "D\022\032\n\010marketID\030\002 \001(\tR\010marketID\022%\n\004type\030\003 "
  "\001(\0162\021.vega.AccountTypeR\004type\022\024\n\005asset\030\004 "
  "\001(\tR\005asset\"B\n\025PartyAccountsResponse\022)\n\010a"
  "ccounts\030\001 \003(\0132\r.vega.AccountR\010accounts\"I"
  "\n\025MarketAccountsRequest\022\032\n\010marketID\030\001 \001("
  "\tR\010marketID\022\024\n\005asset\030\002 \001(\tR\005asset\"C\n\026Mar"
  "ketAccountsResponse\022)\n\010accounts\030\001 \003(\0132\r."
  "vega.AccountR\010accounts\"8\n FeeInfrastruct"
  "ureAccountsRequest\022\024\n\005asset\030\001 \001(\tR\005asset"
  "\"N\n!FeeInfrastructureAccountsResponse\022)\n"
  "\010accounts\030\001 \003(\0132\r.vega.AccountR\010accounts"
  "\"\221\001\n\026PrepareProposalRequest\022 \n\007partyID\030\001"
  " \001(\tB\006\342\337\037\002X\001R\007partyID\022\034\n\treference\030\002 \001(\t"
  "R\treference\0227\n\010proposal\030\003 \001(\0132\023.vega.Pro"
  "posalTermsB\006\342\337\037\002 \001R\010proposal\"g\n\027PrepareP"
  "roposalResponse\022\022\n\004blob\030\001 \001(\014R\004blob\0228\n\017p"
  "endingProposal\030\002 \001(\0132\016.vega.ProposalR\017pe"
  "ndingProposal\"<\n\022PrepareVoteRequest\022&\n\004v"
  "ote\030\001 \001(\0132\n.vega.VoteB\006\342\337\037\002 \001R\004vote\"I\n\023P"
  "repareVoteResponse\022\022\n\004blob\030\001 \001(\014R\004blob\022\036"
  "\n\004vote\030\002 \001(\0132\n.vega.VoteR\004vote\"n\n Prepar"
  "eLiquidityProvisionRequest\022J\n\nsubmission"
  "\030\001 \001(\0132\".vega.LiquidityProvisionSubmissi"
  "onB\006\342\337\037\002 \001R\nsubmission\"7\n!PrepareLiquidi"
  "tyProvisionResponse\022\022\n\004blob\030\001 \001(\014R\004blob\""
  "N\n\020OrderByIDRequest\022 \n\007orderID\030\001 \001(\tB\006\342\337"
  "\037\002 \001R\007orderID\022\030\n\007version\030\002 \001(\004R\007version\""
  "m\n\030OrderVersionsByIDRequest\022 \n\007orderID\030\001"
  " \001(\tB\006\342\337\037\002 \001R\007orderID\022/\n\npagination\030\002 \001("
  "\0132\017.api.PaginationR\npagination\"<\n\025OrderV"
  "ersionsResponse\022#\n\006orders\030\001 \003(\0132\013.vega.O"
  "rderR\006orders\"7\n\022EstimateFeeRequest\022!\n\005or"
  "der\030\001 \001(\0132\013.vega.OrderR\005order\"2\n\023Estimat"
  "eFeeResponse\022\033\n\003fee\030\002 \001(\0132\t.vega.FeeR\003fe"
  "e\":\n\025EstimateMarginRequest\022!\n\005order\030\001 \001("
  "\0132\013.vega.OrderR\005order\"P\n\026EstimateMarginR"
  "esponse\0226\n\014marginLevels\030\002 \001(\0132\022.vega.Mar"
  "ginLevelsR\014marginLevels\"\222\001\n\024ObserveEvent"
  "sRequest\022&\n\004type\030\001 \003(\0162\022.vega.BusEventTy"
  "peR\004type\022\032\n\010marketID\030\002 \001(\tR\010marketID\022\030\n\007"
  "partyID\030\003 \001(\tR\007partyID\022\034\n\tbatchSize\030\004 \001("
  "\003R\tbatchSize\"\?\n\025ObserveEventsResponse\022&\n"
  "\006events\030\001 \003(\0132\016.vega.BusEventR\006events\"6\n"
  "\022WithdrawalsRequest\022 \n\007partyID\030\001 \001(\tB\006\342\337"
  "\037\002X\001R\007partyID\"I\n\023WithdrawalsResponse\0222\n\013"
  "withdrawals\030\001 \003(\0132\020.vega.WithdrawalR\013wit"
  "hdrawals\"+\n\021WithdrawalRequest\022\026\n\002ID\030\001 \001("
  "\tB\006\342\337\037\002X\001R\002ID\"F\n\022WithdrawalResponse\0220\n\nw"
  "ithdrawal\030\001 \001(\0132\020.vega.WithdrawalR\nwithd"
  "rawal\"L\n\036ERC20WithdrawalApprovalRequest\022"
  "*\n\014withdrawalID\030\001 \001(\tB\006\342\337\037\002X\001R\014withdrawa"
  "lID\"\251\001\n\037ERC20WithdrawalApprovalResponse\022"
  " \n\013assetSource\030\001 \001(\tR\013assetSource\022\026\n\006amo"
  "unt\030\002 \001(\tR\006amount\022\026\n\006expiry\030\003 \001(\003R\006expir"
  "y\022\024\n\005nonce\030\004 \001(\tR\005nonce\022\036\n\nsignatures\030\005 "
  "\001(\tR\nsignatures\"3\n\017DepositsRequest\022 \n\007pa"
  "rtyID\030\001 \001(\tB\006\342\337\037\002X\001R\007partyID\"=\n\020Deposits"
  "Response\022)\n\010deposits\030\001 \003(\0132\r.vega.Deposi"
  "tR\010deposits\"(\n\016DepositRequest\022\026\n\002ID\030\001 \001("
  "\tB\006\342\337\037\002X\001R\002ID\":\n\017DepositResponse\022\'\n\007depo"
  "sit\030\001 \001(\0132\r.vega.DepositR\007deposit\"\032\n\030Net"
  "workParametersRequest\"a\n\031NetworkParamete"
  "rsResponse\022D\n\021networkParameters\030\001 \003(\0132\026."
  "vega.NetworkParameterR\021networkParameters"
  "\"J\n\032LiquidityProvisionsRequest\022\026\n\006market"
  "\030\001 \001(\tR\006market\022\024\n\005party\030\002 \001(\tR\005party\"i\n\033"
  "LiquidityProvisionsResponse\022J\n\023liquidity"
  "Provisions\030\001 \003(\0132\030.vega.LiquidityProvisi"
  "onR\023liquidityProvisions2\356\005\n\007trading\022N\n\022P"
  "repareSubmitOrder\022\027.api.SubmitOrderReque"
  "st\032\037.api.PrepareSubmitOrderResponse\022N\n\022P"
  "repareCancelOrder\022\027.api.CancelOrderReque"
  "st\032\037.api.PrepareCancelOrderResponse\022K\n\021P"
  "repareAmendOrder\022\026.api.AmendOrderRequest"
  "\032\036.api.PrepareAmendOrderResponse\022L\n\017Prep"
  "areWithdraw\022\033.api.PrepareWithdrawRequest"
  "\032\034.api.PrepareWithdrawResponse\022R\n\021Submit"
  "Transaction\022\035.api.SubmitTransactionReque"
  "st\032\036.api.SubmitTransactionResponse\022L\n\017Pr"
  "epareProposal\022\033.api.PrepareProposalReque"
  "st\032\034.api.PrepareProposalResponse\022@\n\013Prep"
  "areVote\022\027.api.PrepareVoteRequest\032\030.api.P"
  "repareVoteResponse\022X\n\023PropagateChainEven"
  "t\022\037.api.PropagateChainEventRequest\032 .api"
  ".PropagateChainEventResponse\022j\n\031PrepareL"
  "iquidityProvision\022%.api.PrepareLiquidity"
  "ProvisionRequest\032&.api.PrepareLiquidityP"
  "rovisionResponse2\364#\n\014trading_data\022I\n\016Mar"
  "ketAccounts\022\032.api.MarketAccountsRequest\032"
  "\033.api.MarketAccountsResponse\022F\n\rPartyAcc"
  "ounts\022\031.api.PartyAccountsRequest\032\032.api.P"
  "artyAccountsResponse\022j\n\031FeeInfrastructur"
  "eAccounts\022%.api.FeeInfrastructureAccount"
  "sRequest\032&.api.FeeInfrastructureAccounts"
  "Response\0224\n\007Candles\022\023.api.CandlesRequest"
  "\032\024.api.CandlesResponse\022I\n\016MarketDataByID"
  "\022\032.api.MarketDataByIDRequest\032\033.api.Marke"
  "tDataByIDResponse\022\?\n\013MarketsData\022\026.googl"
  "e.protobuf.Empty\032\030.api.MarketsDataRespon"
  "se\022=\n\nMarketByID\022\026.api.MarketByIDRequest"
  "\032\027.api.MarketByIDResponse\022@\n\013MarketDepth"
  "\022\027.api.MarketDepthRequest\032\030.api.MarketDe"
  "pthResponse\0227\n\007Markets\022\026.google.protobuf"
  ".Empty\032\024.api.MarketsResponse\022U\n\022OrderByM"
  "arketAndID\022\036.api.OrderByMarketAndIdReque"
  "st\032\037.api.OrderByMarketAndIdResponse\022O\n\020O"
  "rderByReference\022\034.api.OrderByReferenceRe"
  "quest\032\035.api.OrderByReferenceResponse\022I\n\016"
  "OrdersByMarket\022\032.api.OrdersByMarketReque"
  "st\032\033.api.OrdersByMarketResponse\022F\n\rOrder"
  "sByParty\022\031.api.OrdersByPartyRequest\032\032.ap"
  "i.OrdersByPartyResponse\022/\n\tOrderByID\022\025.a"
  "pi.OrderByIDRequest\032\013.vega.Order\022N\n\021Orde"
  "rVersionsByID\022\035.api.OrderVersionsByIDReq"
  "uest\032\032.api.OrderVersionsResponse\022C\n\014Marg"
  "inLevels\022\030.api.MarginLevelsRequest\032\031.api"
  ".MarginLevelsResponse\0227\n\007Parties\022\026.googl"
  "e.protobuf.Empty\032\024.api.PartiesResponse\022:"
  "\n\tPartyByID\022\025.api.PartyByIDRequest\032\026.api"
  ".PartyByIDResponse\022O\n\020PositionsByParty\022\034"
  ".api.PositionsByPartyRequest\032\035.api.Posit"
  "ionsByPartyResponse\022:\n\tLastTrade\022\025.api.L"
  "astTradeRequest\032\026.api.LastTradeResponse\022"
  "I\n\016TradesByMarket\022\032.api.TradesByMarketRe"
  "quest\032\033.api.TradesByMarketResponse\022F\n\rTr"
  "adesByOrder\022\031.api.TradesByOrderRequest\032\032"
  ".api.TradesByOrderResponse\022F\n\rTradesByPa"
  "rty\022\031.api.TradesByPartyRequest\032\032.api.Tra"
  "desByPartyResponse\022C\n\014GetProposals\022\030.api"
  ".GetProposalsRequest\032\031.api.GetProposalsR"
  "esponse\022X\n\023GetProposalsByParty\022\037.api.Get"
  "ProposalsByPartyRequest\032 .api.GetProposa"
  "lsByPartyResponse\022L\n\017GetVotesByParty\022\033.a"
  "pi.GetVotesByPartyRequest\032\034.api.GetVotes"
  "ByPartyResponse\022^\n\025GetNewMarketProposals"
  "\022!.api.GetNewMarketProposalsRequest\032\".ap"
  "i.GetNewMarketProposalsResponse\022g\n\030GetUp"
  "dateMarketProposals\022$.api.GetUpdateMarke"
  "tProposalsRequest\032%.api.GetUpdateMarketP"
  "roposalsResponse\022v\n\035GetNetworkParameters"
  "Proposals\022).api.GetNetworkParametersProp"
  "osalsRequest\032*.api.GetNetworkParametersP"
  "roposalsResponse\022[\n\024GetNewAssetProposals"
  "\022 .api.GetNewAssetProposalsRequest\032!.api"
  ".GetNewAssetProposalsResponse\022L\n\017GetProp"
  "osalByID\022\033.api.GetProposalByIDRequest\032\034."
  "api.GetProposalByIDResponse\022a\n\026GetPropos"
  "alByReference\022\".api.GetProposalByReferen"
  "ceRequest\032#.api.GetProposalByReferenceRe"
  "sponse\022C\n\021ObserveGovernance\022\026.google.pro"
  "tobuf.Empty\032\024.vega.GovernanceData0\001\022R\n\025O"
  "bservePartyProposals\022!.api.ObservePartyP"
  "roposalsRequest\032\024.vega.GovernanceData0\001\022"
  "@\n\021ObservePartyVotes\022\035.api.ObservePartyV"
  "otesRequest\032\n.vega.Vote0\001\022F\n\024ObserveProp"
  "osalVotes\022 .api.ObserveProposalVotesRequ"
  "est\032\n.vega.Vote0\001\022L\n\017ObserveEventBus\022\031.a"
  "pi.ObserveEventsRequest\032\032.api.ObserveEve"
  "ntsResponse(\0010\001\0226\n\nStatistics\022\026.google.p"
  "rotobuf.Empty\032\020.vega.Statistics\022<\n\013GetVe"
  "gaTime\022\026.google.protobuf.Empty\032\025.api.Veg"
  "aTimeResponse\022C\n\021AccountsSubscribe\022\035.api"
  ".AccountsSubscribeRequest\032\r.vega.Account"
  "0\001\022@\n\020CandlesSubscribe\022\034.api.CandlesSubs"
  "cribeRequest\032\014.vega.Candle0\001\022P\n\025MarginLe"
  "velsSubscribe\022!.api.MarginLevelsSubscrib"
  "eRequest\032\022.vega.MarginLevels0\001\022M\n\024Market"
  "DepthSubscribe\022 .api.MarketDepthSubscrib"
  "eRequest\032\021.vega.MarketDepth0\001\022a\n\033MarketD"
  "epthUpdatesSubscribe\022\'.api.MarketDepthUp"
  "datesSubscribeRequest\032\027.vega.MarketDepth"
  "Update0\001\022L\n\024MarketsDataSubscribe\022 .api.M"
  "arketsDataSubscribeRequest\032\020.vega.Market"
  "Data0\001\022C\n\017OrdersSubscribe\022\033.api.OrdersSu"
  "bscribeRequest\032\021.api.OrdersStream0\001\022F\n\022P"
  "ositionsSubscribe\022\036.api.PositionsSubscri"
  "beRequest\032\016.vega.Position0\001\022C\n\017TradesSub"
  "scribe\022\033.api.TradesSubscribeRequest\032\021.ap"
  "i.TradesStream0\001\022N\n\032TransferResponsesSub"
  "scribe\022\026.google.protobuf.Empty\032\026.vega.Tr"
  "ansferResponse0\001\022m\n\032GetNodeSignaturesAgg"
  "regate\022&.api.GetNodeSignaturesAggregateR"
  "equest\032\'.api.GetNodeSignaturesAggregateR"
  "esponse\022:\n\tAssetByID\022\025.api.AssetByIDRequ"
  "est\032\026.api.AssetByIDResponse\0221\n\006Assets\022\022."
  "api.AssetsRequest\032\023.api.AssetsResponse\022@"
  "\n\013EstimateFee\022\027.api.EstimateFeeRequest\032\030"
  ".api.EstimateFeeResponse\022I\n\016EstimateMarg"
  "in\022\032.api.EstimateMarginRequest\032\033.api.Est"
  "imateMarginResponse\022d\n\027ERC20WithdrawalAp"
  "proval\022#.api.ERC20WithdrawalApprovalRequ"
  "est\032$.api.ERC20WithdrawalApprovalRespons"
  "e\022=\n\nWithdrawal\022\026.api.WithdrawalRequest\032"
  "\027.api.WithdrawalResponse\022@\n\013Withdrawals\022"
  "\027.api.WithdrawalsRequest\032\030.api.Withdrawa"
  "lsResponse\0224\n\007Deposit\022\023.api.DepositReque"
  "st\032\024.api.DepositResponse\0227\n\010Deposits\022\024.a"
  "pi.DepositsRequest\032\025.api.DepositsRespons"
  "e\022R\n\021NetworkParameters\022\035.api.NetworkPara"
  "metersRequest\032\036.api.NetworkParametersRes"
  "ponse\022X\n\023LiquidityProvisions\022\037.api.Liqui"
  "dityProvisionsRequest\032 .api.LiquidityPro"
  "visionsResponseB\?\n\030io.vegaprotocol.vega."
  "apiZ#code.vegaprotocol.io/vega/proto/api"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_api_2ftrading_2eproto_deps[8] = {
  &::descriptor_table_assets_2eproto,
  &::descriptor_table_chain_5fevents_2eproto,
  &::descriptor_table_events_2eproto,
  &::descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_governance_2eproto,
  &::descriptor_table_markets_2eproto,
  &::descriptor_table_vega_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_api_2ftrading_2eproto_sccs[121] = {
  &scc_info_AccountsSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_AmendOrderRequest_api_2ftrading_2eproto.base,
  &scc_info_AssetByIDRequest_api_2ftrading_2eproto.base,
  &scc_info_AssetByIDResponse_api_2ftrading_2eproto.base,
  &scc_info_AssetsRequest_api_2ftrading_2eproto.base,
  &scc_info_AssetsResponse_api_2ftrading_2eproto.base,
  &scc_info_CancelOrderRequest_api_2ftrading_2eproto.base,
  &scc_info_CandlesRequest_api_2ftrading_2eproto.base,
  &scc_info_CandlesResponse_api_2ftrading_2eproto.base,
  &scc_info_CandlesSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_DepositRequest_api_2ftrading_2eproto.base,
  &scc_info_DepositResponse_api_2ftrading_2eproto.base,
  &scc_info_DepositsRequest_api_2ftrading_2eproto.base,
  &scc_info_DepositsResponse_api_2ftrading_2eproto.base,
  &scc_info_ERC20WithdrawalApprovalRequest_api_2ftrading_2eproto.base,
  &scc_info_ERC20WithdrawalApprovalResponse_api_2ftrading_2eproto.base,
  &scc_info_EstimateFeeRequest_api_2ftrading_2eproto.base,
  &scc_info_EstimateFeeResponse_api_2ftrading_2eproto.base,
  &scc_info_EstimateMarginRequest_api_2ftrading_2eproto.base,
  &scc_info_EstimateMarginResponse_api_2ftrading_2eproto.base,
  &scc_info_FeeInfrastructureAccountsRequest_api_2ftrading_2eproto.base,
  &scc_info_FeeInfrastructureAccountsResponse_api_2ftrading_2eproto.base,
  &scc_info_GetNetworkParametersProposalsRequest_api_2ftrading_2eproto.base,
  &scc_info_GetNetworkParametersProposalsResponse_api_2ftrading_2eproto.base,
  &scc_info_GetNewAssetProposalsRequest_api_2ftrading_2eproto.base,
  &scc_info_GetNewAssetProposalsResponse_api_2ftrading_2eproto.base,
  &scc_info_GetNewMarketProposalsRequest_api_2ftrading_2eproto.base,
  &scc_info_GetNewMarketProposalsResponse_api_2ftrading_2eproto.base,
  &scc_info_GetNodeSignaturesAggregateRequest_api_2ftrading_2eproto.base,
  &scc_info_GetNodeSignaturesAggregateResponse_api_2ftrading_2eproto.base,
  &scc_info_GetProposalByIDRequest_api_2ftrading_2eproto.base,
  &scc_info_GetProposalByIDResponse_api_2ftrading_2eproto.base,
  &scc_info_GetProposalByReferenceRequest_api_2ftrading_2eproto.base,
  &scc_info_GetProposalByReferenceResponse_api_2ftrading_2eproto.base,
  &scc_info_GetProposalsByPartyRequest_api_2ftrading_2eproto.base,
  &scc_info_GetProposalsByPartyResponse_api_2ftrading_2eproto.base,
  &scc_info_GetProposalsRequest_api_2ftrading_2eproto.base,
  &scc_info_GetProposalsResponse_api_2ftrading_2eproto.base,
  &scc_info_GetUpdateMarketProposalsRequest_api_2ftrading_2eproto.base,
  &scc_info_GetUpdateMarketProposalsResponse_api_2ftrading_2eproto.base,
  &scc_info_GetVotesByPartyRequest_api_2ftrading_2eproto.base,
  &scc_info_GetVotesByPartyResponse_api_2ftrading_2eproto.base,
  &scc_info_LastTradeRequest_api_2ftrading_2eproto.base,
  &scc_info_LastTradeResponse_api_2ftrading_2eproto.base,
  &scc_info_LiquidityProvisionsRequest_api_2ftrading_2eproto.base,
  &scc_info_LiquidityProvisionsResponse_api_2ftrading_2eproto.base,
  &scc_info_MarginLevelsRequest_api_2ftrading_2eproto.base,
  &scc_info_MarginLevelsResponse_api_2ftrading_2eproto.base,
  &scc_info_MarginLevelsSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketAccountsRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketAccountsResponse_api_2ftrading_2eproto.base,
  &scc_info_MarketByIDRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketByIDResponse_api_2ftrading_2eproto.base,
  &scc_info_MarketDataByIDRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketDataByIDResponse_api_2ftrading_2eproto.base,
  &scc_info_MarketDepthRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketDepthResponse_api_2ftrading_2eproto.base,
  &scc_info_MarketDepthSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketDepthUpdatesSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketsDataResponse_api_2ftrading_2eproto.base,
  &scc_info_MarketsDataSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_MarketsResponse_api_2ftrading_2eproto.base,
  &scc_info_NetworkParametersRequest_api_2ftrading_2eproto.base,
  &scc_info_NetworkParametersResponse_api_2ftrading_2eproto.base,
  &scc_info_ObserveEventsRequest_api_2ftrading_2eproto.base,
  &scc_info_ObserveEventsResponse_api_2ftrading_2eproto.base,
  &scc_info_ObservePartyProposalsRequest_api_2ftrading_2eproto.base,
  &scc_info_ObservePartyVotesRequest_api_2ftrading_2eproto.base,
  &scc_info_ObserveProposalVotesRequest_api_2ftrading_2eproto.base,
  &scc_info_OptionalProposalState_api_2ftrading_2eproto.base,
  &scc_info_OrderByIDRequest_api_2ftrading_2eproto.base,
  &scc_info_OrderByMarketAndIdRequest_api_2ftrading_2eproto.base,
  &scc_info_OrderByMarketAndIdResponse_api_2ftrading_2eproto.base,
  &scc_info_OrderByReferenceRequest_api_2ftrading_2eproto.base,
  &scc_info_OrderByReferenceResponse_api_2ftrading_2eproto.base,
  &scc_info_OrderVersionsByIDRequest_api_2ftrading_2eproto.base,
  &scc_info_OrderVersionsResponse_api_2ftrading_2eproto.base,
  &scc_info_OrdersByMarketRequest_api_2ftrading_2eproto.base,
  &scc_info_OrdersByMarketResponse_api_2ftrading_2eproto.base,
  &scc_info_OrdersByPartyRequest_api_2ftrading_2eproto.base,
  &scc_info_OrdersByPartyResponse_api_2ftrading_2eproto.base,
  &scc_info_OrdersStream_api_2ftrading_2eproto.base,
  &scc_info_OrdersSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_Pagination_api_2ftrading_2eproto.base,
  &scc_info_PartiesResponse_api_2ftrading_2eproto.base,
  &scc_info_PartyAccountsRequest_api_2ftrading_2eproto.base,
  &scc_info_PartyAccountsResponse_api_2ftrading_2eproto.base,
  &scc_info_PartyByIDRequest_api_2ftrading_2eproto.base,
  &scc_info_PartyByIDResponse_api_2ftrading_2eproto.base,
  &scc_info_PositionsByPartyRequest_api_2ftrading_2eproto.base,
  &scc_info_PositionsByPartyResponse_api_2ftrading_2eproto.base,
  &scc_info_PositionsSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_PrepareAmendOrderResponse_api_2ftrading_2eproto.base,
  &scc_info_PrepareCancelOrderResponse_api_2ftrading_2eproto.base,
  &scc_info_PrepareLiquidityProvisionRequest_api_2ftrading_2eproto.base,
  &scc_info_PrepareLiquidityProvisionResponse_api_2ftrading_2eproto.base,
  &scc_info_PrepareProposalRequest_api_2ftrading_2eproto.base,
  &scc_info_PrepareProposalResponse_api_2ftrading_2eproto.base,
  &scc_info_PrepareSubmitOrderResponse_api_2ftrading_2eproto.base,
  &scc_info_PrepareVoteRequest_api_2ftrading_2eproto.base,
  &scc_info_PrepareVoteResponse_api_2ftrading_2eproto.base,
  &scc_info_PrepareWithdrawRequest_api_2ftrading_2eproto.base,
  &scc_info_PrepareWithdrawResponse_api_2ftrading_2eproto.base,
  &scc_info_PropagateChainEventRequest_api_2ftrading_2eproto.base,
  &scc_info_PropagateChainEventResponse_api_2ftrading_2eproto.base,
  &scc_info_SubmitOrderRequest_api_2ftrading_2eproto.base,
  &scc_info_SubmitTransactionRequest_api_2ftrading_2eproto.base,
  &scc_info_SubmitTransactionResponse_api_2ftrading_2eproto.base,
  &scc_info_TradesByMarketRequest_api_2ftrading_2eproto.base,
  &scc_info_TradesByMarketResponse_api_2ftrading_2eproto.base,
  &scc_info_TradesByOrderRequest_api_2ftrading_2eproto.base,
  &scc_info_TradesByOrderResponse_api_2ftrading_2eproto.base,
  &scc_info_TradesByPartyRequest_api_2ftrading_2eproto.base,
  &scc_info_TradesByPartyResponse_api_2ftrading_2eproto.base,
  &scc_info_TradesStream_api_2ftrading_2eproto.base,
  &scc_info_TradesSubscribeRequest_api_2ftrading_2eproto.base,
  &scc_info_VegaTimeResponse_api_2ftrading_2eproto.base,
  &scc_info_WithdrawalRequest_api_2ftrading_2eproto.base,
  &scc_info_WithdrawalResponse_api_2ftrading_2eproto.base,
  &scc_info_WithdrawalsRequest_api_2ftrading_2eproto.base,
  &scc_info_WithdrawalsResponse_api_2ftrading_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_api_2ftrading_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2ftrading_2eproto = {
  false, false, descriptor_table_protodef_api_2ftrading_2eproto, "api/trading.proto", 15128,
  &descriptor_table_api_2ftrading_2eproto_once, descriptor_table_api_2ftrading_2eproto_sccs, descriptor_table_api_2ftrading_2eproto_deps, 121, 8,
  schemas, file_default_instances, TableStruct_api_2ftrading_2eproto::offsets,
  file_level_metadata_api_2ftrading_2eproto, 121, file_level_enum_descriptors_api_2ftrading_2eproto, file_level_service_descriptors_api_2ftrading_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_api_2ftrading_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_api_2ftrading_2eproto)), true);
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubmitTransactionRequest_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2ftrading_2eproto);
  return file_level_enum_descriptors_api_2ftrading_2eproto[0];
}
bool SubmitTransactionRequest_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest::TYPE_UNSPECIFIED;
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest::TYPE_ASYNC;
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest::TYPE_SYNC;
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest::TYPE_COMMIT;
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest::Type_MIN;
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest::Type_MAX;
constexpr int SubmitTransactionRequest::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PropagateChainEventRequest::_Internal {
 public:
  static const ::vega::ChainEvent& evt(const PropagateChainEventRequest* msg);
};

const ::vega::ChainEvent&
PropagateChainEventRequest::_Internal::evt(const PropagateChainEventRequest* msg) {
  return *msg->evt_;
}
void PropagateChainEventRequest::clear_evt() {
  if (GetArena() == nullptr && evt_ != nullptr) {
    delete evt_;
  }
  evt_ = nullptr;
}
PropagateChainEventRequest::PropagateChainEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PropagateChainEventRequest)
}
PropagateChainEventRequest::PropagateChainEventRequest(const PropagateChainEventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pubkey(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  if (from._internal_has_evt()) {
    evt_ = new ::vega::ChainEvent(*from.evt_);
  } else {
    evt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.PropagateChainEventRequest)
}

void PropagateChainEventRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropagateChainEventRequest_api_2ftrading_2eproto.base);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  evt_ = nullptr;
}

PropagateChainEventRequest::~PropagateChainEventRequest() {
  // @@protoc_insertion_point(destructor:api.PropagateChainEventRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropagateChainEventRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete evt_;
}

void PropagateChainEventRequest::ArenaDtor(void* object) {
  PropagateChainEventRequest* _this = reinterpret_cast< PropagateChainEventRequest* >(object);
  (void)_this;
}
void PropagateChainEventRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropagateChainEventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropagateChainEventRequest& PropagateChainEventRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropagateChainEventRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PropagateChainEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PropagateChainEventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_.ClearToEmpty();
  signature_.ClearToEmpty();
  if (GetArena() == nullptr && evt_ != nullptr) {
    delete evt_;
  }
  evt_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropagateChainEventRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.ChainEvent evt = 1 [json_name = "evt"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_evt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pubKey = 2 [json_name = "pubKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.PropagateChainEventRequest.pubKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 3 [json_name = "signature"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropagateChainEventRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PropagateChainEventRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.ChainEvent evt = 1 [json_name = "evt"];
  if (this->has_evt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::evt(this), target, stream);
  }

  // string pubKey = 2 [json_name = "pubKey"];
  if (this->pubkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pubkey().data(), static_cast<int>(this->_internal_pubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.PropagateChainEventRequest.pubKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pubkey(), target);
  }

  // bytes signature = 3 [json_name = "signature"];
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PropagateChainEventRequest)
  return target;
}

size_t PropagateChainEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PropagateChainEventRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pubKey = 2 [json_name = "pubKey"];
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pubkey());
  }

  // bytes signature = 3 [json_name = "signature"];
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .vega.ChainEvent evt = 1 [json_name = "evt"];
  if (this->has_evt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *evt_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropagateChainEventRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PropagateChainEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PropagateChainEventRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropagateChainEventRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PropagateChainEventRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PropagateChainEventRequest)
    MergeFrom(*source);
  }
}

void PropagateChainEventRequest::MergeFrom(const PropagateChainEventRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PropagateChainEventRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey().size() > 0) {
    _internal_set_pubkey(from._internal_pubkey());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.has_evt()) {
    _internal_mutable_evt()->::vega::ChainEvent::MergeFrom(from._internal_evt());
  }
}

void PropagateChainEventRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PropagateChainEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropagateChainEventRequest::CopyFrom(const PropagateChainEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PropagateChainEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropagateChainEventRequest::IsInitialized() const {
  return true;
}

void PropagateChainEventRequest::InternalSwap(PropagateChainEventRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(evt_, other->evt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropagateChainEventRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PropagateChainEventResponse::_Internal {
 public:
};

PropagateChainEventResponse::PropagateChainEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PropagateChainEventResponse)
}
PropagateChainEventResponse::PropagateChainEventResponse(const PropagateChainEventResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:api.PropagateChainEventResponse)
}

void PropagateChainEventResponse::SharedCtor() {
  success_ = false;
}

PropagateChainEventResponse::~PropagateChainEventResponse() {
  // @@protoc_insertion_point(destructor:api.PropagateChainEventResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropagateChainEventResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PropagateChainEventResponse::ArenaDtor(void* object) {
  PropagateChainEventResponse* _this = reinterpret_cast< PropagateChainEventResponse* >(object);
  (void)_this;
}
void PropagateChainEventResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropagateChainEventResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropagateChainEventResponse& PropagateChainEventResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropagateChainEventResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PropagateChainEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PropagateChainEventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropagateChainEventResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropagateChainEventResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PropagateChainEventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PropagateChainEventResponse)
  return target;
}

size_t PropagateChainEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PropagateChainEventResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropagateChainEventResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PropagateChainEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PropagateChainEventResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropagateChainEventResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PropagateChainEventResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PropagateChainEventResponse)
    MergeFrom(*source);
  }
}

void PropagateChainEventResponse::MergeFrom(const PropagateChainEventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PropagateChainEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void PropagateChainEventResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PropagateChainEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropagateChainEventResponse::CopyFrom(const PropagateChainEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PropagateChainEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropagateChainEventResponse::IsInitialized() const {
  return true;
}

void PropagateChainEventResponse::InternalSwap(PropagateChainEventResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropagateChainEventResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubmitTransactionRequest::_Internal {
 public:
  static const ::vega::SignedBundle& tx(const SubmitTransactionRequest* msg);
};

const ::vega::SignedBundle&
SubmitTransactionRequest::_Internal::tx(const SubmitTransactionRequest* msg) {
  return *msg->tx_;
}
void SubmitTransactionRequest::clear_tx() {
  if (GetArena() == nullptr && tx_ != nullptr) {
    delete tx_;
  }
  tx_ = nullptr;
}
SubmitTransactionRequest::SubmitTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.SubmitTransactionRequest)
}
SubmitTransactionRequest::SubmitTransactionRequest(const SubmitTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tx()) {
    tx_ = new ::vega::SignedBundle(*from.tx_);
  } else {
    tx_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:api.SubmitTransactionRequest)
}

void SubmitTransactionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitTransactionRequest_api_2ftrading_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&tx_)) + sizeof(type_));
}

SubmitTransactionRequest::~SubmitTransactionRequest() {
  // @@protoc_insertion_point(destructor:api.SubmitTransactionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitTransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tx_;
}

void SubmitTransactionRequest::ArenaDtor(void* object) {
  SubmitTransactionRequest* _this = reinterpret_cast< SubmitTransactionRequest* >(object);
  (void)_this;
}
void SubmitTransactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitTransactionRequest& SubmitTransactionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitTransactionRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void SubmitTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.SubmitTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tx_ != nullptr) {
    delete tx_;
  }
  tx_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.SignedBundle tx = 1 [json_name = "tx"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.SubmitTransactionRequest.Type type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::api::SubmitTransactionRequest_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitTransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.SubmitTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.SignedBundle tx = 1 [json_name = "tx"];
  if (this->has_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tx(this), target, stream);
  }

  // .api.SubmitTransactionRequest.Type type = 2 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.SubmitTransactionRequest)
  return target;
}

size_t SubmitTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.SubmitTransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.SignedBundle tx = 1 [json_name = "tx"];
  if (this->has_tx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tx_);
  }

  // .api.SubmitTransactionRequest.Type type = 2 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitTransactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.SubmitTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitTransactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitTransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.SubmitTransactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.SubmitTransactionRequest)
    MergeFrom(*source);
  }
}

void SubmitTransactionRequest::MergeFrom(const SubmitTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.SubmitTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tx()) {
    _internal_mutable_tx()->::vega::SignedBundle::MergeFrom(from._internal_tx());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SubmitTransactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.SubmitTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitTransactionRequest::CopyFrom(const SubmitTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.SubmitTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitTransactionRequest::IsInitialized() const {
  return true;
}

void SubmitTransactionRequest::InternalSwap(SubmitTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmitTransactionRequest, type_)
      + sizeof(SubmitTransactionRequest::type_)
      - PROTOBUF_FIELD_OFFSET(SubmitTransactionRequest, tx_)>(
          reinterpret_cast<char*>(&tx_),
          reinterpret_cast<char*>(&other->tx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitTransactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubmitTransactionResponse::_Internal {
 public:
};

SubmitTransactionResponse::SubmitTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.SubmitTransactionResponse)
}
SubmitTransactionResponse::SubmitTransactionResponse(const SubmitTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:api.SubmitTransactionResponse)
}

void SubmitTransactionResponse::SharedCtor() {
  success_ = false;
}

SubmitTransactionResponse::~SubmitTransactionResponse() {
  // @@protoc_insertion_point(destructor:api.SubmitTransactionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubmitTransactionResponse::ArenaDtor(void* object) {
  SubmitTransactionResponse* _this = reinterpret_cast< SubmitTransactionResponse* >(object);
  (void)_this;
}
void SubmitTransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitTransactionResponse& SubmitTransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitTransactionResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void SubmitTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.SubmitTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.SubmitTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.SubmitTransactionResponse)
  return target;
}

size_t SubmitTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.SubmitTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.SubmitTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.SubmitTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.SubmitTransactionResponse)
    MergeFrom(*source);
  }
}

void SubmitTransactionResponse::MergeFrom(const SubmitTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.SubmitTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void SubmitTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.SubmitTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitTransactionResponse::CopyFrom(const SubmitTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.SubmitTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitTransactionResponse::IsInitialized() const {
  return true;
}

void SubmitTransactionResponse::InternalSwap(SubmitTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareWithdrawRequest::_Internal {
 public:
  static const ::vega::WithdrawSubmission& withdraw(const PrepareWithdrawRequest* msg);
};

const ::vega::WithdrawSubmission&
PrepareWithdrawRequest::_Internal::withdraw(const PrepareWithdrawRequest* msg) {
  return *msg->withdraw_;
}
void PrepareWithdrawRequest::clear_withdraw() {
  if (GetArena() == nullptr && withdraw_ != nullptr) {
    delete withdraw_;
  }
  withdraw_ = nullptr;
}
PrepareWithdrawRequest::PrepareWithdrawRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PrepareWithdrawRequest)
}
PrepareWithdrawRequest::PrepareWithdrawRequest(const PrepareWithdrawRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_withdraw()) {
    withdraw_ = new ::vega::WithdrawSubmission(*from.withdraw_);
  } else {
    withdraw_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareWithdrawRequest)
}

void PrepareWithdrawRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareWithdrawRequest_api_2ftrading_2eproto.base);
  withdraw_ = nullptr;
}

PrepareWithdrawRequest::~PrepareWithdrawRequest() {
  // @@protoc_insertion_point(destructor:api.PrepareWithdrawRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareWithdrawRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete withdraw_;
}

void PrepareWithdrawRequest::ArenaDtor(void* object) {
  PrepareWithdrawRequest* _this = reinterpret_cast< PrepareWithdrawRequest* >(object);
  (void)_this;
}
void PrepareWithdrawRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareWithdrawRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareWithdrawRequest& PrepareWithdrawRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareWithdrawRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareWithdrawRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareWithdrawRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && withdraw_ != nullptr) {
    delete withdraw_;
  }
  withdraw_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareWithdrawRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.WithdrawSubmission withdraw = 1 [json_name = "withdraw"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareWithdrawRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareWithdrawRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.WithdrawSubmission withdraw = 1 [json_name = "withdraw"];
  if (this->has_withdraw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::withdraw(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareWithdrawRequest)
  return target;
}

size_t PrepareWithdrawRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareWithdrawRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.WithdrawSubmission withdraw = 1 [json_name = "withdraw"];
  if (this->has_withdraw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *withdraw_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareWithdrawRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareWithdrawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareWithdrawRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareWithdrawRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareWithdrawRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareWithdrawRequest)
    MergeFrom(*source);
  }
}

void PrepareWithdrawRequest::MergeFrom(const PrepareWithdrawRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareWithdrawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_withdraw()) {
    _internal_mutable_withdraw()->::vega::WithdrawSubmission::MergeFrom(from._internal_withdraw());
  }
}

void PrepareWithdrawRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareWithdrawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareWithdrawRequest::CopyFrom(const PrepareWithdrawRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareWithdrawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareWithdrawRequest::IsInitialized() const {
  return true;
}

void PrepareWithdrawRequest::InternalSwap(PrepareWithdrawRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(withdraw_, other->withdraw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareWithdrawRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareWithdrawResponse::_Internal {
 public:
};

PrepareWithdrawResponse::PrepareWithdrawResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PrepareWithdrawResponse)
}
PrepareWithdrawResponse::PrepareWithdrawResponse(const PrepareWithdrawResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareWithdrawResponse)
}

void PrepareWithdrawResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareWithdrawResponse_api_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrepareWithdrawResponse::~PrepareWithdrawResponse() {
  // @@protoc_insertion_point(destructor:api.PrepareWithdrawResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareWithdrawResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrepareWithdrawResponse::ArenaDtor(void* object) {
  PrepareWithdrawResponse* _this = reinterpret_cast< PrepareWithdrawResponse* >(object);
  (void)_this;
}
void PrepareWithdrawResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareWithdrawResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareWithdrawResponse& PrepareWithdrawResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareWithdrawResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareWithdrawResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareWithdrawResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareWithdrawResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes blob = 1 [json_name = "blob"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareWithdrawResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareWithdrawResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareWithdrawResponse)
  return target;
}

size_t PrepareWithdrawResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareWithdrawResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareWithdrawResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareWithdrawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareWithdrawResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareWithdrawResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareWithdrawResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareWithdrawResponse)
    MergeFrom(*source);
  }
}

void PrepareWithdrawResponse::MergeFrom(const PrepareWithdrawResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareWithdrawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {
    _internal_set_blob(from._internal_blob());
  }
}

void PrepareWithdrawResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareWithdrawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareWithdrawResponse::CopyFrom(const PrepareWithdrawResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareWithdrawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareWithdrawResponse::IsInitialized() const {
  return true;
}

void PrepareWithdrawResponse::InternalSwap(PrepareWithdrawResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareWithdrawResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareSubmitOrderResponse::_Internal {
 public:
};

PrepareSubmitOrderResponse::PrepareSubmitOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PrepareSubmitOrderResponse)
}
PrepareSubmitOrderResponse::PrepareSubmitOrderResponse(const PrepareSubmitOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(), 
      GetArena());
  }
  submitid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_submitid().empty()) {
    submitid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_submitid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareSubmitOrderResponse)
}

void PrepareSubmitOrderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareSubmitOrderResponse_api_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submitid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrepareSubmitOrderResponse::~PrepareSubmitOrderResponse() {
  // @@protoc_insertion_point(destructor:api.PrepareSubmitOrderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareSubmitOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submitid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrepareSubmitOrderResponse::ArenaDtor(void* object) {
  PrepareSubmitOrderResponse* _this = reinterpret_cast< PrepareSubmitOrderResponse* >(object);
  (void)_this;
}
void PrepareSubmitOrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareSubmitOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareSubmitOrderResponse& PrepareSubmitOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareSubmitOrderResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareSubmitOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareSubmitOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  submitid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareSubmitOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes blob = 1 [json_name = "blob"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string submitID = 2 [json_name = "submitID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_submitid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.PrepareSubmitOrderResponse.submitID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareSubmitOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareSubmitOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  // string submitID = 2 [json_name = "submitID"];
  if (this->submitid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_submitid().data(), static_cast<int>(this->_internal_submitid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.PrepareSubmitOrderResponse.submitID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_submitid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareSubmitOrderResponse)
  return target;
}

size_t PrepareSubmitOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareSubmitOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  // string submitID = 2 [json_name = "submitID"];
  if (this->submitid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_submitid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareSubmitOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareSubmitOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareSubmitOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareSubmitOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareSubmitOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareSubmitOrderResponse)
    MergeFrom(*source);
  }
}

void PrepareSubmitOrderResponse::MergeFrom(const PrepareSubmitOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareSubmitOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {
    _internal_set_blob(from._internal_blob());
  }
  if (from.submitid().size() > 0) {
    _internal_set_submitid(from._internal_submitid());
  }
}

void PrepareSubmitOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareSubmitOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareSubmitOrderResponse::CopyFrom(const PrepareSubmitOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareSubmitOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareSubmitOrderResponse::IsInitialized() const {
  return true;
}

void PrepareSubmitOrderResponse::InternalSwap(PrepareSubmitOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  submitid_.Swap(&other->submitid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareSubmitOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareCancelOrderResponse::_Internal {
 public:
};

PrepareCancelOrderResponse::PrepareCancelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PrepareCancelOrderResponse)
}
PrepareCancelOrderResponse::PrepareCancelOrderResponse(const PrepareCancelOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareCancelOrderResponse)
}

void PrepareCancelOrderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareCancelOrderResponse_api_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrepareCancelOrderResponse::~PrepareCancelOrderResponse() {
  // @@protoc_insertion_point(destructor:api.PrepareCancelOrderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareCancelOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrepareCancelOrderResponse::ArenaDtor(void* object) {
  PrepareCancelOrderResponse* _this = reinterpret_cast< PrepareCancelOrderResponse* >(object);
  (void)_this;
}
void PrepareCancelOrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareCancelOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareCancelOrderResponse& PrepareCancelOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareCancelOrderResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareCancelOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareCancelOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareCancelOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes blob = 1 [json_name = "blob"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareCancelOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareCancelOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareCancelOrderResponse)
  return target;
}

size_t PrepareCancelOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareCancelOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareCancelOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareCancelOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareCancelOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareCancelOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareCancelOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareCancelOrderResponse)
    MergeFrom(*source);
  }
}

void PrepareCancelOrderResponse::MergeFrom(const PrepareCancelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareCancelOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {
    _internal_set_blob(from._internal_blob());
  }
}

void PrepareCancelOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareCancelOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareCancelOrderResponse::CopyFrom(const PrepareCancelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareCancelOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareCancelOrderResponse::IsInitialized() const {
  return true;
}

void PrepareCancelOrderResponse::InternalSwap(PrepareCancelOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareCancelOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareAmendOrderResponse::_Internal {
 public:
};

PrepareAmendOrderResponse::PrepareAmendOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PrepareAmendOrderResponse)
}
PrepareAmendOrderResponse::PrepareAmendOrderResponse(const PrepareAmendOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareAmendOrderResponse)
}

void PrepareAmendOrderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareAmendOrderResponse_api_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrepareAmendOrderResponse::~PrepareAmendOrderResponse() {
  // @@protoc_insertion_point(destructor:api.PrepareAmendOrderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareAmendOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrepareAmendOrderResponse::ArenaDtor(void* object) {
  PrepareAmendOrderResponse* _this = reinterpret_cast< PrepareAmendOrderResponse* >(object);
  (void)_this;
}
void PrepareAmendOrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareAmendOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareAmendOrderResponse& PrepareAmendOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareAmendOrderResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareAmendOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareAmendOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareAmendOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes blob = 1 [json_name = "blob"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareAmendOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareAmendOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareAmendOrderResponse)
  return target;
}

size_t PrepareAmendOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareAmendOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareAmendOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareAmendOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareAmendOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareAmendOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareAmendOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareAmendOrderResponse)
    MergeFrom(*source);
  }
}

void PrepareAmendOrderResponse::MergeFrom(const PrepareAmendOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareAmendOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {
    _internal_set_blob(from._internal_blob());
  }
}

void PrepareAmendOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareAmendOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareAmendOrderResponse::CopyFrom(const PrepareAmendOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareAmendOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareAmendOrderResponse::IsInitialized() const {
  return true;
}

void PrepareAmendOrderResponse::InternalSwap(PrepareAmendOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareAmendOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubmitOrderRequest::_Internal {
 public:
  static const ::vega::OrderSubmission& submission(const SubmitOrderRequest* msg);
};

const ::vega::OrderSubmission&
SubmitOrderRequest::_Internal::submission(const SubmitOrderRequest* msg) {
  return *msg->submission_;
}
void SubmitOrderRequest::clear_submission() {
  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
}
SubmitOrderRequest::SubmitOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.SubmitOrderRequest)
}
SubmitOrderRequest::SubmitOrderRequest(const SubmitOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_submission()) {
    submission_ = new ::vega::OrderSubmission(*from.submission_);
  } else {
    submission_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.SubmitOrderRequest)
}

void SubmitOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubmitOrderRequest_api_2ftrading_2eproto.base);
  submission_ = nullptr;
}

SubmitOrderRequest::~SubmitOrderRequest() {
  // @@protoc_insertion_point(destructor:api.SubmitOrderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubmitOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete submission_;
}

void SubmitOrderRequest::ArenaDtor(void* object) {
  SubmitOrderRequest* _this = reinterpret_cast< SubmitOrderRequest* >(object);
  (void)_this;
}
void SubmitOrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubmitOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmitOrderRequest& SubmitOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubmitOrderRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void SubmitOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.SubmitOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.OrderSubmission submission = 1 [json_name = "submission"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubmitOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.SubmitOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.OrderSubmission submission = 1 [json_name = "submission"];
  if (this->has_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::submission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.SubmitOrderRequest)
  return target;
}

size_t SubmitOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.SubmitOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.OrderSubmission submission = 1 [json_name = "submission"];
  if (this->has_submission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submission_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.SubmitOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubmitOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.SubmitOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.SubmitOrderRequest)
    MergeFrom(*source);
  }
}

void SubmitOrderRequest::MergeFrom(const SubmitOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.SubmitOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submission()) {
    _internal_mutable_submission()->::vega::OrderSubmission::MergeFrom(from._internal_submission());
  }
}

void SubmitOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.SubmitOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitOrderRequest::CopyFrom(const SubmitOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.SubmitOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitOrderRequest::IsInitialized() const {
  return true;
}

void SubmitOrderRequest::InternalSwap(SubmitOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(submission_, other->submission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelOrderRequest::_Internal {
 public:
  static const ::vega::OrderCancellation& cancellation(const CancelOrderRequest* msg);
};

const ::vega::OrderCancellation&
CancelOrderRequest::_Internal::cancellation(const CancelOrderRequest* msg) {
  return *msg->cancellation_;
}
void CancelOrderRequest::clear_cancellation() {
  if (GetArena() == nullptr && cancellation_ != nullptr) {
    delete cancellation_;
  }
  cancellation_ = nullptr;
}
CancelOrderRequest::CancelOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.CancelOrderRequest)
}
CancelOrderRequest::CancelOrderRequest(const CancelOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cancellation()) {
    cancellation_ = new ::vega::OrderCancellation(*from.cancellation_);
  } else {
    cancellation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.CancelOrderRequest)
}

void CancelOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelOrderRequest_api_2ftrading_2eproto.base);
  cancellation_ = nullptr;
}

CancelOrderRequest::~CancelOrderRequest() {
  // @@protoc_insertion_point(destructor:api.CancelOrderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cancellation_;
}

void CancelOrderRequest::ArenaDtor(void* object) {
  CancelOrderRequest* _this = reinterpret_cast< CancelOrderRequest* >(object);
  (void)_this;
}
void CancelOrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelOrderRequest& CancelOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelOrderRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void CancelOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.CancelOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && cancellation_ != nullptr) {
    delete cancellation_;
  }
  cancellation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.OrderCancellation cancellation = 1 [json_name = "cancellation"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancellation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.CancelOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.OrderCancellation cancellation = 1 [json_name = "cancellation"];
  if (this->has_cancellation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cancellation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.CancelOrderRequest)
  return target;
}

size_t CancelOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.CancelOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.OrderCancellation cancellation = 1 [json_name = "cancellation"];
  if (this->has_cancellation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cancellation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.CancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.CancelOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.CancelOrderRequest)
    MergeFrom(*source);
  }
}

void CancelOrderRequest::MergeFrom(const CancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.CancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cancellation()) {
    _internal_mutable_cancellation()->::vega::OrderCancellation::MergeFrom(from._internal_cancellation());
  }
}

void CancelOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.CancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrderRequest::CopyFrom(const CancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.CancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrderRequest::IsInitialized() const {
  return true;
}

void CancelOrderRequest::InternalSwap(CancelOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(cancellation_, other->cancellation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AmendOrderRequest::_Internal {
 public:
  static const ::vega::OrderAmendment& amendment(const AmendOrderRequest* msg);
};

const ::vega::OrderAmendment&
AmendOrderRequest::_Internal::amendment(const AmendOrderRequest* msg) {
  return *msg->amendment_;
}
void AmendOrderRequest::clear_amendment() {
  if (GetArena() == nullptr && amendment_ != nullptr) {
    delete amendment_;
  }
  amendment_ = nullptr;
}
AmendOrderRequest::AmendOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.AmendOrderRequest)
}
AmendOrderRequest::AmendOrderRequest(const AmendOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_amendment()) {
    amendment_ = new ::vega::OrderAmendment(*from.amendment_);
  } else {
    amendment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.AmendOrderRequest)
}

void AmendOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AmendOrderRequest_api_2ftrading_2eproto.base);
  amendment_ = nullptr;
}

AmendOrderRequest::~AmendOrderRequest() {
  // @@protoc_insertion_point(destructor:api.AmendOrderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AmendOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete amendment_;
}

void AmendOrderRequest::ArenaDtor(void* object) {
  AmendOrderRequest* _this = reinterpret_cast< AmendOrderRequest* >(object);
  (void)_this;
}
void AmendOrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AmendOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmendOrderRequest& AmendOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AmendOrderRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AmendOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.AmendOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && amendment_ != nullptr) {
    delete amendment_;
  }
  amendment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AmendOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.OrderAmendment amendment = 1 [json_name = "amendment"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_amendment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AmendOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.AmendOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.OrderAmendment amendment = 1 [json_name = "amendment"];
  if (this->has_amendment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::amendment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.AmendOrderRequest)
  return target;
}

size_t AmendOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.AmendOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.OrderAmendment amendment = 1 [json_name = "amendment"];
  if (this->has_amendment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amendment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmendOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.AmendOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AmendOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AmendOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.AmendOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.AmendOrderRequest)
    MergeFrom(*source);
  }
}

void AmendOrderRequest::MergeFrom(const AmendOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.AmendOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_amendment()) {
    _internal_mutable_amendment()->::vega::OrderAmendment::MergeFrom(from._internal_amendment());
  }
}

void AmendOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.AmendOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmendOrderRequest::CopyFrom(const AmendOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.AmendOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmendOrderRequest::IsInitialized() const {
  return true;
}

void AmendOrderRequest::InternalSwap(AmendOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(amendment_, other->amendment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmendOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AssetsRequest::_Internal {
 public:
};

AssetsRequest::AssetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.AssetsRequest)
}
AssetsRequest::AssetsRequest(const AssetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.AssetsRequest)
}

void AssetsRequest::SharedCtor() {
}

AssetsRequest::~AssetsRequest() {
  // @@protoc_insertion_point(destructor:api.AssetsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AssetsRequest::ArenaDtor(void* object) {
  AssetsRequest* _this = reinterpret_cast< AssetsRequest* >(object);
  (void)_this;
}
void AssetsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetsRequest& AssetsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssetsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AssetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.AssetsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.AssetsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.AssetsRequest)
  return target;
}

size_t AssetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.AssetsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.AssetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.AssetsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.AssetsRequest)
    MergeFrom(*source);
  }
}

void AssetsRequest::MergeFrom(const AssetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.AssetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AssetsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.AssetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetsRequest::CopyFrom(const AssetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.AssetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetsRequest::IsInitialized() const {
  return true;
}

void AssetsRequest::InternalSwap(AssetsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AssetsResponse::_Internal {
 public:
};

void AssetsResponse::clear_assets() {
  assets_.Clear();
}
AssetsResponse::AssetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  assets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.AssetsResponse)
}
AssetsResponse::AssetsResponse(const AssetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      assets_(from.assets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.AssetsResponse)
}

void AssetsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssetsResponse_api_2ftrading_2eproto.base);
}

AssetsResponse::~AssetsResponse() {
  // @@protoc_insertion_point(destructor:api.AssetsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssetsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AssetsResponse::ArenaDtor(void* object) {
  AssetsResponse* _this = reinterpret_cast< AssetsResponse* >(object);
  (void)_this;
}
void AssetsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetsResponse& AssetsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssetsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AssetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.AssetsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Asset assets = 1 [json_name = "assets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.AssetsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Asset assets = 1 [json_name = "assets"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_assets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.AssetsResponse)
  return target;
}

size_t AssetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.AssetsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Asset assets = 1 [json_name = "assets"];
  total_size += 1UL * this->_internal_assets_size();
  for (const auto& msg : this->assets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.AssetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.AssetsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.AssetsResponse)
    MergeFrom(*source);
  }
}

void AssetsResponse::MergeFrom(const AssetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.AssetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assets_.MergeFrom(from.assets_);
}

void AssetsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.AssetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetsResponse::CopyFrom(const AssetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.AssetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetsResponse::IsInitialized() const {
  return true;
}

void AssetsResponse::InternalSwap(AssetsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  assets_.InternalSwap(&other->assets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AssetByIDRequest::_Internal {
 public:
};

AssetByIDRequest::AssetByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.AssetByIDRequest)
}
AssetByIDRequest::AssetByIDRequest(const AssetByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.AssetByIDRequest)
}

void AssetByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssetByIDRequest_api_2ftrading_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AssetByIDRequest::~AssetByIDRequest() {
  // @@protoc_insertion_point(destructor:api.AssetByIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssetByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssetByIDRequest::ArenaDtor(void* object) {
  AssetByIDRequest* _this = reinterpret_cast< AssetByIDRequest* >(object);
  (void)_this;
}
void AssetByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetByIDRequest& AssetByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssetByIDRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AssetByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.AssetByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ID = 1 [json_name = "ID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.AssetByIDRequest.ID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.AssetByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1 [json_name = "ID", (.validator.field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.AssetByIDRequest.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.AssetByIDRequest)
  return target;
}

size_t AssetByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.AssetByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1 [json_name = "ID", (.validator.field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.AssetByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.AssetByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.AssetByIDRequest)
    MergeFrom(*source);
  }
}

void AssetByIDRequest::MergeFrom(const AssetByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.AssetByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void AssetByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.AssetByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetByIDRequest::CopyFrom(const AssetByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.AssetByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetByIDRequest::IsInitialized() const {
  return true;
}

void AssetByIDRequest::InternalSwap(AssetByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AssetByIDResponse::_Internal {
 public:
  static const ::vega::Asset& asset(const AssetByIDResponse* msg);
};

const ::vega::Asset&
AssetByIDResponse::_Internal::asset(const AssetByIDResponse* msg) {
  return *msg->asset_;
}
void AssetByIDResponse::clear_asset() {
  if (GetArena() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
}
AssetByIDResponse::AssetByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.AssetByIDResponse)
}
AssetByIDResponse::AssetByIDResponse(const AssetByIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_asset()) {
    asset_ = new ::vega::Asset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.AssetByIDResponse)
}

void AssetByIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssetByIDResponse_api_2ftrading_2eproto.base);
  asset_ = nullptr;
}

AssetByIDResponse::~AssetByIDResponse() {
  // @@protoc_insertion_point(destructor:api.AssetByIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssetByIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete asset_;
}

void AssetByIDResponse::ArenaDtor(void* object) {
  AssetByIDResponse* _this = reinterpret_cast< AssetByIDResponse* >(object);
  (void)_this;
}
void AssetByIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetByIDResponse& AssetByIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssetByIDResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AssetByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.AssetByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetByIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Asset asset = 1 [json_name = "asset"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetByIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.AssetByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Asset asset = 1 [json_name = "asset"];
  if (this->has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.AssetByIDResponse)
  return target;
}

size_t AssetByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.AssetByIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Asset asset = 1 [json_name = "asset"];
  if (this->has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetByIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.AssetByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetByIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.AssetByIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.AssetByIDResponse)
    MergeFrom(*source);
  }
}

void AssetByIDResponse::MergeFrom(const AssetByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.AssetByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_asset()) {
    _internal_mutable_asset()->::vega::Asset::MergeFrom(from._internal_asset());
  }
}

void AssetByIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.AssetByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetByIDResponse::CopyFrom(const AssetByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.AssetByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetByIDResponse::IsInitialized() const {
  return true;
}

void AssetByIDResponse::InternalSwap(AssetByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(asset_, other->asset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetByIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNodeSignaturesAggregateRequest::_Internal {
 public:
};

GetNodeSignaturesAggregateRequest::GetNodeSignaturesAggregateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetNodeSignaturesAggregateRequest)
}
GetNodeSignaturesAggregateRequest::GetNodeSignaturesAggregateRequest(const GetNodeSignaturesAggregateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetNodeSignaturesAggregateRequest)
}

void GetNodeSignaturesAggregateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNodeSignaturesAggregateRequest_api_2ftrading_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetNodeSignaturesAggregateRequest::~GetNodeSignaturesAggregateRequest() {
  // @@protoc_insertion_point(destructor:api.GetNodeSignaturesAggregateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNodeSignaturesAggregateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetNodeSignaturesAggregateRequest::ArenaDtor(void* object) {
  GetNodeSignaturesAggregateRequest* _this = reinterpret_cast< GetNodeSignaturesAggregateRequest* >(object);
  (void)_this;
}
void GetNodeSignaturesAggregateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNodeSignaturesAggregateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNodeSignaturesAggregateRequest& GetNodeSignaturesAggregateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNodeSignaturesAggregateRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNodeSignaturesAggregateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNodeSignaturesAggregateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNodeSignaturesAggregateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ID = 1 [json_name = "ID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.GetNodeSignaturesAggregateRequest.ID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNodeSignaturesAggregateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNodeSignaturesAggregateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1 [json_name = "ID", (.validator.field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetNodeSignaturesAggregateRequest.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNodeSignaturesAggregateRequest)
  return target;
}

size_t GetNodeSignaturesAggregateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNodeSignaturesAggregateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1 [json_name = "ID", (.validator.field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNodeSignaturesAggregateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNodeSignaturesAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeSignaturesAggregateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNodeSignaturesAggregateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNodeSignaturesAggregateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNodeSignaturesAggregateRequest)
    MergeFrom(*source);
  }
}

void GetNodeSignaturesAggregateRequest::MergeFrom(const GetNodeSignaturesAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNodeSignaturesAggregateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetNodeSignaturesAggregateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNodeSignaturesAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeSignaturesAggregateRequest::CopyFrom(const GetNodeSignaturesAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNodeSignaturesAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeSignaturesAggregateRequest::IsInitialized() const {
  return true;
}

void GetNodeSignaturesAggregateRequest::InternalSwap(GetNodeSignaturesAggregateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodeSignaturesAggregateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNodeSignaturesAggregateResponse::_Internal {
 public:
};

void GetNodeSignaturesAggregateResponse::clear_signatures() {
  signatures_.Clear();
}
GetNodeSignaturesAggregateResponse::GetNodeSignaturesAggregateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signatures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetNodeSignaturesAggregateResponse)
}
GetNodeSignaturesAggregateResponse::GetNodeSignaturesAggregateResponse(const GetNodeSignaturesAggregateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetNodeSignaturesAggregateResponse)
}

void GetNodeSignaturesAggregateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNodeSignaturesAggregateResponse_api_2ftrading_2eproto.base);
}

GetNodeSignaturesAggregateResponse::~GetNodeSignaturesAggregateResponse() {
  // @@protoc_insertion_point(destructor:api.GetNodeSignaturesAggregateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNodeSignaturesAggregateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNodeSignaturesAggregateResponse::ArenaDtor(void* object) {
  GetNodeSignaturesAggregateResponse* _this = reinterpret_cast< GetNodeSignaturesAggregateResponse* >(object);
  (void)_this;
}
void GetNodeSignaturesAggregateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNodeSignaturesAggregateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNodeSignaturesAggregateResponse& GetNodeSignaturesAggregateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNodeSignaturesAggregateResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNodeSignaturesAggregateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNodeSignaturesAggregateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNodeSignaturesAggregateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.NodeSignature signatures = 1 [json_name = "signatures"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNodeSignaturesAggregateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNodeSignaturesAggregateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.NodeSignature signatures = 1 [json_name = "signatures"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signatures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_signatures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNodeSignaturesAggregateResponse)
  return target;
}

size_t GetNodeSignaturesAggregateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNodeSignaturesAggregateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.NodeSignature signatures = 1 [json_name = "signatures"];
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNodeSignaturesAggregateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNodeSignaturesAggregateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodeSignaturesAggregateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNodeSignaturesAggregateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNodeSignaturesAggregateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNodeSignaturesAggregateResponse)
    MergeFrom(*source);
  }
}

void GetNodeSignaturesAggregateResponse::MergeFrom(const GetNodeSignaturesAggregateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNodeSignaturesAggregateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
}

void GetNodeSignaturesAggregateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNodeSignaturesAggregateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodeSignaturesAggregateResponse::CopyFrom(const GetNodeSignaturesAggregateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNodeSignaturesAggregateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeSignaturesAggregateResponse::IsInitialized() const {
  return true;
}

void GetNodeSignaturesAggregateResponse::InternalSwap(GetNodeSignaturesAggregateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signatures_.InternalSwap(&other->signatures_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodeSignaturesAggregateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OptionalProposalState::_Internal {
 public:
};

OptionalProposalState::OptionalProposalState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.OptionalProposalState)
}
OptionalProposalState::OptionalProposalState(const OptionalProposalState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:api.OptionalProposalState)
}

void OptionalProposalState::SharedCtor() {
  value_ = 0;
}

OptionalProposalState::~OptionalProposalState() {
  // @@protoc_insertion_point(destructor:api.OptionalProposalState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OptionalProposalState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OptionalProposalState::ArenaDtor(void* object) {
  OptionalProposalState* _this = reinterpret_cast< OptionalProposalState* >(object);
  (void)_this;
}
void OptionalProposalState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OptionalProposalState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionalProposalState& OptionalProposalState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptionalProposalState_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OptionalProposalState::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OptionalProposalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionalProposalState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Proposal.State value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value(static_cast<::vega::Proposal_State>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionalProposalState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OptionalProposalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Proposal.State value = 1 [json_name = "value"];
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OptionalProposalState)
  return target;
}

size_t OptionalProposalState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OptionalProposalState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Proposal.State value = 1 [json_name = "value"];
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionalProposalState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OptionalProposalState)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionalProposalState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptionalProposalState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OptionalProposalState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OptionalProposalState)
    MergeFrom(*source);
  }
}

void OptionalProposalState::MergeFrom(const OptionalProposalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OptionalProposalState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void OptionalProposalState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OptionalProposalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionalProposalState::CopyFrom(const OptionalProposalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OptionalProposalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalProposalState::IsInitialized() const {
  return true;
}

void OptionalProposalState::InternalSwap(OptionalProposalState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionalProposalState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalsRequest::_Internal {
 public:
  static const ::api::OptionalProposalState& selectinstate(const GetProposalsRequest* msg);
};

const ::api::OptionalProposalState&
GetProposalsRequest::_Internal::selectinstate(const GetProposalsRequest* msg) {
  return *msg->selectinstate_;
}
GetProposalsRequest::GetProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetProposalsRequest)
}
GetProposalsRequest::GetProposalsRequest(const GetProposalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selectinstate()) {
    selectinstate_ = new ::api::OptionalProposalState(*from.selectinstate_);
  } else {
    selectinstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetProposalsRequest)
}

void GetProposalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalsRequest_api_2ftrading_2eproto.base);
  selectinstate_ = nullptr;
}

GetProposalsRequest::~GetProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.GetProposalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete selectinstate_;
}

void GetProposalsRequest::ArenaDtor(void* object) {
  GetProposalsRequest* _this = reinterpret_cast< GetProposalsRequest* >(object);
  (void)_this;
}
void GetProposalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalsRequest& GetProposalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectinstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
  if (this->has_selectinstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::selectinstate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalsRequest)
  return target;
}

size_t GetProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
  if (this->has_selectinstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selectinstate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalsRequest)
    MergeFrom(*source);
  }
}

void GetProposalsRequest::MergeFrom(const GetProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selectinstate()) {
    _internal_mutable_selectinstate()->::api::OptionalProposalState::MergeFrom(from._internal_selectinstate());
  }
}

void GetProposalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalsRequest::CopyFrom(const GetProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalsRequest::IsInitialized() const {
  return true;
}

void GetProposalsRequest::InternalSwap(GetProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(selectinstate_, other->selectinstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalsResponse::_Internal {
 public:
};

void GetProposalsResponse::clear_data() {
  data_.Clear();
}
GetProposalsResponse::GetProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetProposalsResponse)
}
GetProposalsResponse::GetProposalsResponse(const GetProposalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetProposalsResponse)
}

void GetProposalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalsResponse_api_2ftrading_2eproto.base);
}

GetProposalsResponse::~GetProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.GetProposalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetProposalsResponse::ArenaDtor(void* object) {
  GetProposalsResponse* _this = reinterpret_cast< GetProposalsResponse* >(object);
  (void)_this;
}
void GetProposalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalsResponse& GetProposalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalsResponse)
  return target;
}

size_t GetProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalsResponse)
    MergeFrom(*source);
  }
}

void GetProposalsResponse::MergeFrom(const GetProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetProposalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalsResponse::CopyFrom(const GetProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalsResponse::IsInitialized() const {
  return true;
}

void GetProposalsResponse::InternalSwap(GetProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalsByPartyRequest::_Internal {
 public:
  static const ::api::OptionalProposalState& selectinstate(const GetProposalsByPartyRequest* msg);
};

const ::api::OptionalProposalState&
GetProposalsByPartyRequest::_Internal::selectinstate(const GetProposalsByPartyRequest* msg) {
  return *msg->selectinstate_;
}
GetProposalsByPartyRequest::GetProposalsByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetProposalsByPartyRequest)
}
GetProposalsByPartyRequest::GetProposalsByPartyRequest(const GetProposalsByPartyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  if (from._internal_has_selectinstate()) {
    selectinstate_ = new ::api::OptionalProposalState(*from.selectinstate_);
  } else {
    selectinstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetProposalsByPartyRequest)
}

void GetProposalsByPartyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalsByPartyRequest_api_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selectinstate_ = nullptr;
}

GetProposalsByPartyRequest::~GetProposalsByPartyRequest() {
  // @@protoc_insertion_point(destructor:api.GetProposalsByPartyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalsByPartyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete selectinstate_;
}

void GetProposalsByPartyRequest::ArenaDtor(void* object) {
  GetProposalsByPartyRequest* _this = reinterpret_cast< GetProposalsByPartyRequest* >(object);
  (void)_this;
}
void GetProposalsByPartyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalsByPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalsByPartyRequest& GetProposalsByPartyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalsByPartyRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalsByPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalsByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  if (GetArena() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalsByPartyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.GetProposalsByPartyRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.OptionalProposalState selectInState = 2 [json_name = "selectInState"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectinstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalsByPartyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalsByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetProposalsByPartyRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  // .api.OptionalProposalState selectInState = 2 [json_name = "selectInState"];
  if (this->has_selectinstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::selectinstate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalsByPartyRequest)
  return target;
}

size_t GetProposalsByPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalsByPartyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // .api.OptionalProposalState selectInState = 2 [json_name = "selectInState"];
  if (this->has_selectinstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selectinstate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalsByPartyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalsByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalsByPartyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalsByPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalsByPartyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalsByPartyRequest)
    MergeFrom(*source);
  }
}

void GetProposalsByPartyRequest::MergeFrom(const GetProposalsByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalsByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.has_selectinstate()) {
    _internal_mutable_selectinstate()->::api::OptionalProposalState::MergeFrom(from._internal_selectinstate());
  }
}

void GetProposalsByPartyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalsByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalsByPartyRequest::CopyFrom(const GetProposalsByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalsByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalsByPartyRequest::IsInitialized() const {
  return true;
}

void GetProposalsByPartyRequest::InternalSwap(GetProposalsByPartyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(selectinstate_, other->selectinstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalsByPartyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalsByPartyResponse::_Internal {
 public:
};

void GetProposalsByPartyResponse::clear_data() {
  data_.Clear();
}
GetProposalsByPartyResponse::GetProposalsByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetProposalsByPartyResponse)
}
GetProposalsByPartyResponse::GetProposalsByPartyResponse(const GetProposalsByPartyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetProposalsByPartyResponse)
}

void GetProposalsByPartyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalsByPartyResponse_api_2ftrading_2eproto.base);
}

GetProposalsByPartyResponse::~GetProposalsByPartyResponse() {
  // @@protoc_insertion_point(destructor:api.GetProposalsByPartyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalsByPartyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetProposalsByPartyResponse::ArenaDtor(void* object) {
  GetProposalsByPartyResponse* _this = reinterpret_cast< GetProposalsByPartyResponse* >(object);
  (void)_this;
}
void GetProposalsByPartyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalsByPartyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalsByPartyResponse& GetProposalsByPartyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalsByPartyResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalsByPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalsByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalsByPartyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalsByPartyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalsByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalsByPartyResponse)
  return target;
}

size_t GetProposalsByPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalsByPartyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalsByPartyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalsByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalsByPartyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalsByPartyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalsByPartyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalsByPartyResponse)
    MergeFrom(*source);
  }
}

void GetProposalsByPartyResponse::MergeFrom(const GetProposalsByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalsByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetProposalsByPartyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalsByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalsByPartyResponse::CopyFrom(const GetProposalsByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalsByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalsByPartyResponse::IsInitialized() const {
  return true;
}

void GetProposalsByPartyResponse::InternalSwap(GetProposalsByPartyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalsByPartyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetVotesByPartyRequest::_Internal {
 public:
};

GetVotesByPartyRequest::GetVotesByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetVotesByPartyRequest)
}
GetVotesByPartyRequest::GetVotesByPartyRequest(const GetVotesByPartyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetVotesByPartyRequest)
}

void GetVotesByPartyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetVotesByPartyRequest_api_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetVotesByPartyRequest::~GetVotesByPartyRequest() {
  // @@protoc_insertion_point(destructor:api.GetVotesByPartyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVotesByPartyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetVotesByPartyRequest::ArenaDtor(void* object) {
  GetVotesByPartyRequest* _this = reinterpret_cast< GetVotesByPartyRequest* >(object);
  (void)_this;
}
void GetVotesByPartyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVotesByPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVotesByPartyRequest& GetVotesByPartyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVotesByPartyRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetVotesByPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetVotesByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVotesByPartyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.GetVotesByPartyRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVotesByPartyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetVotesByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetVotesByPartyRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetVotesByPartyRequest)
  return target;
}

size_t GetVotesByPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetVotesByPartyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVotesByPartyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetVotesByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVotesByPartyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVotesByPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetVotesByPartyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetVotesByPartyRequest)
    MergeFrom(*source);
  }
}

void GetVotesByPartyRequest::MergeFrom(const GetVotesByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetVotesByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
}

void GetVotesByPartyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetVotesByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVotesByPartyRequest::CopyFrom(const GetVotesByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetVotesByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVotesByPartyRequest::IsInitialized() const {
  return true;
}

void GetVotesByPartyRequest::InternalSwap(GetVotesByPartyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVotesByPartyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetVotesByPartyResponse::_Internal {
 public:
};

void GetVotesByPartyResponse::clear_votes() {
  votes_.Clear();
}
GetVotesByPartyResponse::GetVotesByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  votes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetVotesByPartyResponse)
}
GetVotesByPartyResponse::GetVotesByPartyResponse(const GetVotesByPartyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetVotesByPartyResponse)
}

void GetVotesByPartyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetVotesByPartyResponse_api_2ftrading_2eproto.base);
}

GetVotesByPartyResponse::~GetVotesByPartyResponse() {
  // @@protoc_insertion_point(destructor:api.GetVotesByPartyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVotesByPartyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetVotesByPartyResponse::ArenaDtor(void* object) {
  GetVotesByPartyResponse* _this = reinterpret_cast< GetVotesByPartyResponse* >(object);
  (void)_this;
}
void GetVotesByPartyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVotesByPartyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVotesByPartyResponse& GetVotesByPartyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVotesByPartyResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetVotesByPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetVotesByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVotesByPartyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Vote votes = 1 [json_name = "votes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVotesByPartyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetVotesByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Vote votes = 1 [json_name = "votes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_votes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetVotesByPartyResponse)
  return target;
}

size_t GetVotesByPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetVotesByPartyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Vote votes = 1 [json_name = "votes"];
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVotesByPartyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetVotesByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVotesByPartyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVotesByPartyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetVotesByPartyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetVotesByPartyResponse)
    MergeFrom(*source);
  }
}

void GetVotesByPartyResponse::MergeFrom(const GetVotesByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetVotesByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
}

void GetVotesByPartyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetVotesByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVotesByPartyResponse::CopyFrom(const GetVotesByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetVotesByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVotesByPartyResponse::IsInitialized() const {
  return true;
}

void GetVotesByPartyResponse::InternalSwap(GetVotesByPartyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  votes_.InternalSwap(&other->votes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVotesByPartyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNewMarketProposalsRequest::_Internal {
 public:
  static const ::api::OptionalProposalState& selectinstate(const GetNewMarketProposalsRequest* msg);
};

const ::api::OptionalProposalState&
GetNewMarketProposalsRequest::_Internal::selectinstate(const GetNewMarketProposalsRequest* msg) {
  return *msg->selectinstate_;
}
GetNewMarketProposalsRequest::GetNewMarketProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetNewMarketProposalsRequest)
}
GetNewMarketProposalsRequest::GetNewMarketProposalsRequest(const GetNewMarketProposalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selectinstate()) {
    selectinstate_ = new ::api::OptionalProposalState(*from.selectinstate_);
  } else {
    selectinstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetNewMarketProposalsRequest)
}

void GetNewMarketProposalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNewMarketProposalsRequest_api_2ftrading_2eproto.base);
  selectinstate_ = nullptr;
}

GetNewMarketProposalsRequest::~GetNewMarketProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.GetNewMarketProposalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNewMarketProposalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete selectinstate_;
}

void GetNewMarketProposalsRequest::ArenaDtor(void* object) {
  GetNewMarketProposalsRequest* _this = reinterpret_cast< GetNewMarketProposalsRequest* >(object);
  (void)_this;
}
void GetNewMarketProposalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNewMarketProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNewMarketProposalsRequest& GetNewMarketProposalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNewMarketProposalsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNewMarketProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNewMarketProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNewMarketProposalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectinstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNewMarketProposalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNewMarketProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
  if (this->has_selectinstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::selectinstate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNewMarketProposalsRequest)
  return target;
}

size_t GetNewMarketProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNewMarketProposalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
  if (this->has_selectinstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selectinstate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNewMarketProposalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNewMarketProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNewMarketProposalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNewMarketProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNewMarketProposalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNewMarketProposalsRequest)
    MergeFrom(*source);
  }
}

void GetNewMarketProposalsRequest::MergeFrom(const GetNewMarketProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNewMarketProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selectinstate()) {
    _internal_mutable_selectinstate()->::api::OptionalProposalState::MergeFrom(from._internal_selectinstate());
  }
}

void GetNewMarketProposalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNewMarketProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNewMarketProposalsRequest::CopyFrom(const GetNewMarketProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNewMarketProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNewMarketProposalsRequest::IsInitialized() const {
  return true;
}

void GetNewMarketProposalsRequest::InternalSwap(GetNewMarketProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(selectinstate_, other->selectinstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNewMarketProposalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNewMarketProposalsResponse::_Internal {
 public:
};

void GetNewMarketProposalsResponse::clear_data() {
  data_.Clear();
}
GetNewMarketProposalsResponse::GetNewMarketProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetNewMarketProposalsResponse)
}
GetNewMarketProposalsResponse::GetNewMarketProposalsResponse(const GetNewMarketProposalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetNewMarketProposalsResponse)
}

void GetNewMarketProposalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNewMarketProposalsResponse_api_2ftrading_2eproto.base);
}

GetNewMarketProposalsResponse::~GetNewMarketProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.GetNewMarketProposalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNewMarketProposalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNewMarketProposalsResponse::ArenaDtor(void* object) {
  GetNewMarketProposalsResponse* _this = reinterpret_cast< GetNewMarketProposalsResponse* >(object);
  (void)_this;
}
void GetNewMarketProposalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNewMarketProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNewMarketProposalsResponse& GetNewMarketProposalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNewMarketProposalsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNewMarketProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNewMarketProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNewMarketProposalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNewMarketProposalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNewMarketProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNewMarketProposalsResponse)
  return target;
}

size_t GetNewMarketProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNewMarketProposalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNewMarketProposalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNewMarketProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNewMarketProposalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNewMarketProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNewMarketProposalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNewMarketProposalsResponse)
    MergeFrom(*source);
  }
}

void GetNewMarketProposalsResponse::MergeFrom(const GetNewMarketProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNewMarketProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetNewMarketProposalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNewMarketProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNewMarketProposalsResponse::CopyFrom(const GetNewMarketProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNewMarketProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNewMarketProposalsResponse::IsInitialized() const {
  return true;
}

void GetNewMarketProposalsResponse::InternalSwap(GetNewMarketProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNewMarketProposalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetUpdateMarketProposalsRequest::_Internal {
 public:
  static const ::api::OptionalProposalState& selectinstate(const GetUpdateMarketProposalsRequest* msg);
};

const ::api::OptionalProposalState&
GetUpdateMarketProposalsRequest::_Internal::selectinstate(const GetUpdateMarketProposalsRequest* msg) {
  return *msg->selectinstate_;
}
GetUpdateMarketProposalsRequest::GetUpdateMarketProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetUpdateMarketProposalsRequest)
}
GetUpdateMarketProposalsRequest::GetUpdateMarketProposalsRequest(const GetUpdateMarketProposalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  if (from._internal_has_selectinstate()) {
    selectinstate_ = new ::api::OptionalProposalState(*from.selectinstate_);
  } else {
    selectinstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetUpdateMarketProposalsRequest)
}

void GetUpdateMarketProposalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUpdateMarketProposalsRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selectinstate_ = nullptr;
}

GetUpdateMarketProposalsRequest::~GetUpdateMarketProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.GetUpdateMarketProposalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUpdateMarketProposalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete selectinstate_;
}

void GetUpdateMarketProposalsRequest::ArenaDtor(void* object) {
  GetUpdateMarketProposalsRequest* _this = reinterpret_cast< GetUpdateMarketProposalsRequest* >(object);
  (void)_this;
}
void GetUpdateMarketProposalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUpdateMarketProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUpdateMarketProposalsRequest& GetUpdateMarketProposalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUpdateMarketProposalsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetUpdateMarketProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetUpdateMarketProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  if (GetArena() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUpdateMarketProposalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.GetUpdateMarketProposalsRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.OptionalProposalState selectInState = 2 [json_name = "selectInState"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectinstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUpdateMarketProposalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetUpdateMarketProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetUpdateMarketProposalsRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // .api.OptionalProposalState selectInState = 2 [json_name = "selectInState"];
  if (this->has_selectinstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::selectinstate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetUpdateMarketProposalsRequest)
  return target;
}

size_t GetUpdateMarketProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetUpdateMarketProposalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // .api.OptionalProposalState selectInState = 2 [json_name = "selectInState"];
  if (this->has_selectinstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selectinstate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUpdateMarketProposalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetUpdateMarketProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUpdateMarketProposalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUpdateMarketProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetUpdateMarketProposalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetUpdateMarketProposalsRequest)
    MergeFrom(*source);
  }
}

void GetUpdateMarketProposalsRequest::MergeFrom(const GetUpdateMarketProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetUpdateMarketProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.has_selectinstate()) {
    _internal_mutable_selectinstate()->::api::OptionalProposalState::MergeFrom(from._internal_selectinstate());
  }
}

void GetUpdateMarketProposalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetUpdateMarketProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUpdateMarketProposalsRequest::CopyFrom(const GetUpdateMarketProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetUpdateMarketProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdateMarketProposalsRequest::IsInitialized() const {
  return true;
}

void GetUpdateMarketProposalsRequest::InternalSwap(GetUpdateMarketProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(selectinstate_, other->selectinstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUpdateMarketProposalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetUpdateMarketProposalsResponse::_Internal {
 public:
};

void GetUpdateMarketProposalsResponse::clear_data() {
  data_.Clear();
}
GetUpdateMarketProposalsResponse::GetUpdateMarketProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetUpdateMarketProposalsResponse)
}
GetUpdateMarketProposalsResponse::GetUpdateMarketProposalsResponse(const GetUpdateMarketProposalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetUpdateMarketProposalsResponse)
}

void GetUpdateMarketProposalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUpdateMarketProposalsResponse_api_2ftrading_2eproto.base);
}

GetUpdateMarketProposalsResponse::~GetUpdateMarketProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.GetUpdateMarketProposalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUpdateMarketProposalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetUpdateMarketProposalsResponse::ArenaDtor(void* object) {
  GetUpdateMarketProposalsResponse* _this = reinterpret_cast< GetUpdateMarketProposalsResponse* >(object);
  (void)_this;
}
void GetUpdateMarketProposalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUpdateMarketProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUpdateMarketProposalsResponse& GetUpdateMarketProposalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUpdateMarketProposalsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetUpdateMarketProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetUpdateMarketProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUpdateMarketProposalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUpdateMarketProposalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetUpdateMarketProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetUpdateMarketProposalsResponse)
  return target;
}

size_t GetUpdateMarketProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetUpdateMarketProposalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUpdateMarketProposalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetUpdateMarketProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUpdateMarketProposalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUpdateMarketProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetUpdateMarketProposalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetUpdateMarketProposalsResponse)
    MergeFrom(*source);
  }
}

void GetUpdateMarketProposalsResponse::MergeFrom(const GetUpdateMarketProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetUpdateMarketProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetUpdateMarketProposalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetUpdateMarketProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUpdateMarketProposalsResponse::CopyFrom(const GetUpdateMarketProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetUpdateMarketProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdateMarketProposalsResponse::IsInitialized() const {
  return true;
}

void GetUpdateMarketProposalsResponse::InternalSwap(GetUpdateMarketProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUpdateMarketProposalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNetworkParametersProposalsRequest::_Internal {
 public:
  static const ::api::OptionalProposalState& selectinstate(const GetNetworkParametersProposalsRequest* msg);
};

const ::api::OptionalProposalState&
GetNetworkParametersProposalsRequest::_Internal::selectinstate(const GetNetworkParametersProposalsRequest* msg) {
  return *msg->selectinstate_;
}
GetNetworkParametersProposalsRequest::GetNetworkParametersProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetNetworkParametersProposalsRequest)
}
GetNetworkParametersProposalsRequest::GetNetworkParametersProposalsRequest(const GetNetworkParametersProposalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selectinstate()) {
    selectinstate_ = new ::api::OptionalProposalState(*from.selectinstate_);
  } else {
    selectinstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetNetworkParametersProposalsRequest)
}

void GetNetworkParametersProposalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNetworkParametersProposalsRequest_api_2ftrading_2eproto.base);
  selectinstate_ = nullptr;
}

GetNetworkParametersProposalsRequest::~GetNetworkParametersProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.GetNetworkParametersProposalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNetworkParametersProposalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete selectinstate_;
}

void GetNetworkParametersProposalsRequest::ArenaDtor(void* object) {
  GetNetworkParametersProposalsRequest* _this = reinterpret_cast< GetNetworkParametersProposalsRequest* >(object);
  (void)_this;
}
void GetNetworkParametersProposalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNetworkParametersProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNetworkParametersProposalsRequest& GetNetworkParametersProposalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNetworkParametersProposalsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNetworkParametersProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNetworkParametersProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNetworkParametersProposalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectinstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNetworkParametersProposalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNetworkParametersProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
  if (this->has_selectinstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::selectinstate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNetworkParametersProposalsRequest)
  return target;
}

size_t GetNetworkParametersProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNetworkParametersProposalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
  if (this->has_selectinstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selectinstate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkParametersProposalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNetworkParametersProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkParametersProposalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNetworkParametersProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNetworkParametersProposalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNetworkParametersProposalsRequest)
    MergeFrom(*source);
  }
}

void GetNetworkParametersProposalsRequest::MergeFrom(const GetNetworkParametersProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNetworkParametersProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selectinstate()) {
    _internal_mutable_selectinstate()->::api::OptionalProposalState::MergeFrom(from._internal_selectinstate());
  }
}

void GetNetworkParametersProposalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNetworkParametersProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkParametersProposalsRequest::CopyFrom(const GetNetworkParametersProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNetworkParametersProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkParametersProposalsRequest::IsInitialized() const {
  return true;
}

void GetNetworkParametersProposalsRequest::InternalSwap(GetNetworkParametersProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(selectinstate_, other->selectinstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNetworkParametersProposalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNetworkParametersProposalsResponse::_Internal {
 public:
};

void GetNetworkParametersProposalsResponse::clear_data() {
  data_.Clear();
}
GetNetworkParametersProposalsResponse::GetNetworkParametersProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetNetworkParametersProposalsResponse)
}
GetNetworkParametersProposalsResponse::GetNetworkParametersProposalsResponse(const GetNetworkParametersProposalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetNetworkParametersProposalsResponse)
}

void GetNetworkParametersProposalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNetworkParametersProposalsResponse_api_2ftrading_2eproto.base);
}

GetNetworkParametersProposalsResponse::~GetNetworkParametersProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.GetNetworkParametersProposalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNetworkParametersProposalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNetworkParametersProposalsResponse::ArenaDtor(void* object) {
  GetNetworkParametersProposalsResponse* _this = reinterpret_cast< GetNetworkParametersProposalsResponse* >(object);
  (void)_this;
}
void GetNetworkParametersProposalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNetworkParametersProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNetworkParametersProposalsResponse& GetNetworkParametersProposalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNetworkParametersProposalsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNetworkParametersProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNetworkParametersProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNetworkParametersProposalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNetworkParametersProposalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNetworkParametersProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNetworkParametersProposalsResponse)
  return target;
}

size_t GetNetworkParametersProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNetworkParametersProposalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkParametersProposalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNetworkParametersProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkParametersProposalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNetworkParametersProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNetworkParametersProposalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNetworkParametersProposalsResponse)
    MergeFrom(*source);
  }
}

void GetNetworkParametersProposalsResponse::MergeFrom(const GetNetworkParametersProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNetworkParametersProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetNetworkParametersProposalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNetworkParametersProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkParametersProposalsResponse::CopyFrom(const GetNetworkParametersProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNetworkParametersProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkParametersProposalsResponse::IsInitialized() const {
  return true;
}

void GetNetworkParametersProposalsResponse::InternalSwap(GetNetworkParametersProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNetworkParametersProposalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNewAssetProposalsRequest::_Internal {
 public:
  static const ::api::OptionalProposalState& selectinstate(const GetNewAssetProposalsRequest* msg);
};

const ::api::OptionalProposalState&
GetNewAssetProposalsRequest::_Internal::selectinstate(const GetNewAssetProposalsRequest* msg) {
  return *msg->selectinstate_;
}
GetNewAssetProposalsRequest::GetNewAssetProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetNewAssetProposalsRequest)
}
GetNewAssetProposalsRequest::GetNewAssetProposalsRequest(const GetNewAssetProposalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selectinstate()) {
    selectinstate_ = new ::api::OptionalProposalState(*from.selectinstate_);
  } else {
    selectinstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetNewAssetProposalsRequest)
}

void GetNewAssetProposalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNewAssetProposalsRequest_api_2ftrading_2eproto.base);
  selectinstate_ = nullptr;
}

GetNewAssetProposalsRequest::~GetNewAssetProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.GetNewAssetProposalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNewAssetProposalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete selectinstate_;
}

void GetNewAssetProposalsRequest::ArenaDtor(void* object) {
  GetNewAssetProposalsRequest* _this = reinterpret_cast< GetNewAssetProposalsRequest* >(object);
  (void)_this;
}
void GetNewAssetProposalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNewAssetProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNewAssetProposalsRequest& GetNewAssetProposalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNewAssetProposalsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNewAssetProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNewAssetProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNewAssetProposalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectinstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNewAssetProposalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNewAssetProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
  if (this->has_selectinstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::selectinstate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNewAssetProposalsRequest)
  return target;
}

size_t GetNewAssetProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNewAssetProposalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
  if (this->has_selectinstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selectinstate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNewAssetProposalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNewAssetProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNewAssetProposalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNewAssetProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNewAssetProposalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNewAssetProposalsRequest)
    MergeFrom(*source);
  }
}

void GetNewAssetProposalsRequest::MergeFrom(const GetNewAssetProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNewAssetProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selectinstate()) {
    _internal_mutable_selectinstate()->::api::OptionalProposalState::MergeFrom(from._internal_selectinstate());
  }
}

void GetNewAssetProposalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNewAssetProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNewAssetProposalsRequest::CopyFrom(const GetNewAssetProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNewAssetProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNewAssetProposalsRequest::IsInitialized() const {
  return true;
}

void GetNewAssetProposalsRequest::InternalSwap(GetNewAssetProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(selectinstate_, other->selectinstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNewAssetProposalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetNewAssetProposalsResponse::_Internal {
 public:
};

void GetNewAssetProposalsResponse::clear_data() {
  data_.Clear();
}
GetNewAssetProposalsResponse::GetNewAssetProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetNewAssetProposalsResponse)
}
GetNewAssetProposalsResponse::GetNewAssetProposalsResponse(const GetNewAssetProposalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.GetNewAssetProposalsResponse)
}

void GetNewAssetProposalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNewAssetProposalsResponse_api_2ftrading_2eproto.base);
}

GetNewAssetProposalsResponse::~GetNewAssetProposalsResponse() {
  // @@protoc_insertion_point(destructor:api.GetNewAssetProposalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNewAssetProposalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNewAssetProposalsResponse::ArenaDtor(void* object) {
  GetNewAssetProposalsResponse* _this = reinterpret_cast< GetNewAssetProposalsResponse* >(object);
  (void)_this;
}
void GetNewAssetProposalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNewAssetProposalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNewAssetProposalsResponse& GetNewAssetProposalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNewAssetProposalsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetNewAssetProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetNewAssetProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNewAssetProposalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNewAssetProposalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetNewAssetProposalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetNewAssetProposalsResponse)
  return target;
}

size_t GetNewAssetProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetNewAssetProposalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNewAssetProposalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetNewAssetProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNewAssetProposalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNewAssetProposalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetNewAssetProposalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetNewAssetProposalsResponse)
    MergeFrom(*source);
  }
}

void GetNewAssetProposalsResponse::MergeFrom(const GetNewAssetProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetNewAssetProposalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetNewAssetProposalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetNewAssetProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNewAssetProposalsResponse::CopyFrom(const GetNewAssetProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetNewAssetProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNewAssetProposalsResponse::IsInitialized() const {
  return true;
}

void GetNewAssetProposalsResponse::InternalSwap(GetNewAssetProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNewAssetProposalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalByIDRequest::_Internal {
 public:
};

GetProposalByIDRequest::GetProposalByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetProposalByIDRequest)
}
GetProposalByIDRequest::GetProposalByIDRequest(const GetProposalByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proposalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposalid().empty()) {
    proposalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proposalid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetProposalByIDRequest)
}

void GetProposalByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalByIDRequest_api_2ftrading_2eproto.base);
  proposalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetProposalByIDRequest::~GetProposalByIDRequest() {
  // @@protoc_insertion_point(destructor:api.GetProposalByIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  proposalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProposalByIDRequest::ArenaDtor(void* object) {
  GetProposalByIDRequest* _this = reinterpret_cast< GetProposalByIDRequest* >(object);
  (void)_this;
}
void GetProposalByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalByIDRequest& GetProposalByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalByIDRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposalid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string proposalID = 1 [json_name = "proposalID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_proposalid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.GetProposalByIDRequest.proposalID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proposalID = 1 [json_name = "proposalID", (.validator.field) = {
  if (this->proposalid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proposalid().data(), static_cast<int>(this->_internal_proposalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetProposalByIDRequest.proposalID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proposalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalByIDRequest)
  return target;
}

size_t GetProposalByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proposalID = 1 [json_name = "proposalID", (.validator.field) = {
  if (this->proposalid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proposalid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalByIDRequest)
    MergeFrom(*source);
  }
}

void GetProposalByIDRequest::MergeFrom(const GetProposalByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proposalid().size() > 0) {
    _internal_set_proposalid(from._internal_proposalid());
  }
}

void GetProposalByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalByIDRequest::CopyFrom(const GetProposalByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalByIDRequest::IsInitialized() const {
  return true;
}

void GetProposalByIDRequest::InternalSwap(GetProposalByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proposalid_.Swap(&other->proposalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalByIDResponse::_Internal {
 public:
  static const ::vega::GovernanceData& data(const GetProposalByIDResponse* msg);
};

const ::vega::GovernanceData&
GetProposalByIDResponse::_Internal::data(const GetProposalByIDResponse* msg) {
  return *msg->data_;
}
void GetProposalByIDResponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
GetProposalByIDResponse::GetProposalByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetProposalByIDResponse)
}
GetProposalByIDResponse::GetProposalByIDResponse(const GetProposalByIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::vega::GovernanceData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetProposalByIDResponse)
}

void GetProposalByIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalByIDResponse_api_2ftrading_2eproto.base);
  data_ = nullptr;
}

GetProposalByIDResponse::~GetProposalByIDResponse() {
  // @@protoc_insertion_point(destructor:api.GetProposalByIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalByIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void GetProposalByIDResponse::ArenaDtor(void* object) {
  GetProposalByIDResponse* _this = reinterpret_cast< GetProposalByIDResponse* >(object);
  (void)_this;
}
void GetProposalByIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalByIDResponse& GetProposalByIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalByIDResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalByIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalByIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1 [json_name = "data"];
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalByIDResponse)
  return target;
}

size_t GetProposalByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalByIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1 [json_name = "data"];
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalByIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalByIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalByIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalByIDResponse)
    MergeFrom(*source);
  }
}

void GetProposalByIDResponse::MergeFrom(const GetProposalByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::vega::GovernanceData::MergeFrom(from._internal_data());
  }
}

void GetProposalByIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalByIDResponse::CopyFrom(const GetProposalByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalByIDResponse::IsInitialized() const {
  return true;
}

void GetProposalByIDResponse::InternalSwap(GetProposalByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalByIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalByReferenceRequest::_Internal {
 public:
};

GetProposalByReferenceRequest::GetProposalByReferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetProposalByReferenceRequest)
}
GetProposalByReferenceRequest::GetProposalByReferenceRequest(const GetProposalByReferenceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.GetProposalByReferenceRequest)
}

void GetProposalByReferenceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalByReferenceRequest_api_2ftrading_2eproto.base);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetProposalByReferenceRequest::~GetProposalByReferenceRequest() {
  // @@protoc_insertion_point(destructor:api.GetProposalByReferenceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalByReferenceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProposalByReferenceRequest::ArenaDtor(void* object) {
  GetProposalByReferenceRequest* _this = reinterpret_cast< GetProposalByReferenceRequest* >(object);
  (void)_this;
}
void GetProposalByReferenceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalByReferenceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalByReferenceRequest& GetProposalByReferenceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalByReferenceRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalByReferenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalByReferenceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalByReferenceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reference = 1 [json_name = "reference", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.GetProposalByReferenceRequest.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalByReferenceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalByReferenceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference = 1 [json_name = "reference", (.validator.field) = {
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.GetProposalByReferenceRequest.reference");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalByReferenceRequest)
  return target;
}

size_t GetProposalByReferenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalByReferenceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference = 1 [json_name = "reference", (.validator.field) = {
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalByReferenceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalByReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalByReferenceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalByReferenceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalByReferenceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalByReferenceRequest)
    MergeFrom(*source);
  }
}

void GetProposalByReferenceRequest::MergeFrom(const GetProposalByReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalByReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
}

void GetProposalByReferenceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalByReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalByReferenceRequest::CopyFrom(const GetProposalByReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalByReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalByReferenceRequest::IsInitialized() const {
  return true;
}

void GetProposalByReferenceRequest::InternalSwap(GetProposalByReferenceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalByReferenceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetProposalByReferenceResponse::_Internal {
 public:
  static const ::vega::GovernanceData& data(const GetProposalByReferenceResponse* msg);
};

const ::vega::GovernanceData&
GetProposalByReferenceResponse::_Internal::data(const GetProposalByReferenceResponse* msg) {
  return *msg->data_;
}
void GetProposalByReferenceResponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
GetProposalByReferenceResponse::GetProposalByReferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.GetProposalByReferenceResponse)
}
GetProposalByReferenceResponse::GetProposalByReferenceResponse(const GetProposalByReferenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::vega::GovernanceData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.GetProposalByReferenceResponse)
}

void GetProposalByReferenceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProposalByReferenceResponse_api_2ftrading_2eproto.base);
  data_ = nullptr;
}

GetProposalByReferenceResponse::~GetProposalByReferenceResponse() {
  // @@protoc_insertion_point(destructor:api.GetProposalByReferenceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProposalByReferenceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void GetProposalByReferenceResponse::ArenaDtor(void* object) {
  GetProposalByReferenceResponse* _this = reinterpret_cast< GetProposalByReferenceResponse* >(object);
  (void)_this;
}
void GetProposalByReferenceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProposalByReferenceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProposalByReferenceResponse& GetProposalByReferenceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProposalByReferenceResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void GetProposalByReferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GetProposalByReferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProposalByReferenceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.GovernanceData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProposalByReferenceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GetProposalByReferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1 [json_name = "data"];
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.GetProposalByReferenceResponse)
  return target;
}

size_t GetProposalByReferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.GetProposalByReferenceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.GovernanceData data = 1 [json_name = "data"];
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProposalByReferenceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GetProposalByReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProposalByReferenceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProposalByReferenceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GetProposalByReferenceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GetProposalByReferenceResponse)
    MergeFrom(*source);
  }
}

void GetProposalByReferenceResponse::MergeFrom(const GetProposalByReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GetProposalByReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::vega::GovernanceData::MergeFrom(from._internal_data());
  }
}

void GetProposalByReferenceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GetProposalByReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProposalByReferenceResponse::CopyFrom(const GetProposalByReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GetProposalByReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProposalByReferenceResponse::IsInitialized() const {
  return true;
}

void GetProposalByReferenceResponse::InternalSwap(GetProposalByReferenceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProposalByReferenceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObservePartyProposalsRequest::_Internal {
 public:
};

ObservePartyProposalsRequest::ObservePartyProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.ObservePartyProposalsRequest)
}
ObservePartyProposalsRequest::ObservePartyProposalsRequest(const ObservePartyProposalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.ObservePartyProposalsRequest)
}

void ObservePartyProposalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObservePartyProposalsRequest_api_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ObservePartyProposalsRequest::~ObservePartyProposalsRequest() {
  // @@protoc_insertion_point(destructor:api.ObservePartyProposalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObservePartyProposalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObservePartyProposalsRequest::ArenaDtor(void* object) {
  ObservePartyProposalsRequest* _this = reinterpret_cast< ObservePartyProposalsRequest* >(object);
  (void)_this;
}
void ObservePartyProposalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObservePartyProposalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObservePartyProposalsRequest& ObservePartyProposalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObservePartyProposalsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObservePartyProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ObservePartyProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObservePartyProposalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.ObservePartyProposalsRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObservePartyProposalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ObservePartyProposalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ObservePartyProposalsRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ObservePartyProposalsRequest)
  return target;
}

size_t ObservePartyProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ObservePartyProposalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservePartyProposalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ObservePartyProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ObservePartyProposalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObservePartyProposalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ObservePartyProposalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ObservePartyProposalsRequest)
    MergeFrom(*source);
  }
}

void ObservePartyProposalsRequest::MergeFrom(const ObservePartyProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ObservePartyProposalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
}

void ObservePartyProposalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ObservePartyProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservePartyProposalsRequest::CopyFrom(const ObservePartyProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ObservePartyProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservePartyProposalsRequest::IsInitialized() const {
  return true;
}

void ObservePartyProposalsRequest::InternalSwap(ObservePartyProposalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservePartyProposalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObserveProposalVotesRequest::_Internal {
 public:
};

ObserveProposalVotesRequest::ObserveProposalVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.ObserveProposalVotesRequest)
}
ObserveProposalVotesRequest::ObserveProposalVotesRequest(const ObserveProposalVotesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proposalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposalid().empty()) {
    proposalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proposalid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.ObserveProposalVotesRequest)
}

void ObserveProposalVotesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObserveProposalVotesRequest_api_2ftrading_2eproto.base);
  proposalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ObserveProposalVotesRequest::~ObserveProposalVotesRequest() {
  // @@protoc_insertion_point(destructor:api.ObserveProposalVotesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObserveProposalVotesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  proposalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObserveProposalVotesRequest::ArenaDtor(void* object) {
  ObserveProposalVotesRequest* _this = reinterpret_cast< ObserveProposalVotesRequest* >(object);
  (void)_this;
}
void ObserveProposalVotesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObserveProposalVotesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObserveProposalVotesRequest& ObserveProposalVotesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObserveProposalVotesRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObserveProposalVotesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ObserveProposalVotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposalid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObserveProposalVotesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string proposalID = 1 [json_name = "proposalID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_proposalid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.ObserveProposalVotesRequest.proposalID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObserveProposalVotesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ObserveProposalVotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proposalID = 1 [json_name = "proposalID", (.validator.field) = {
  if (this->proposalid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proposalid().data(), static_cast<int>(this->_internal_proposalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ObserveProposalVotesRequest.proposalID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proposalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ObserveProposalVotesRequest)
  return target;
}

size_t ObserveProposalVotesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ObserveProposalVotesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proposalID = 1 [json_name = "proposalID", (.validator.field) = {
  if (this->proposalid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proposalid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObserveProposalVotesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ObserveProposalVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ObserveProposalVotesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObserveProposalVotesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ObserveProposalVotesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ObserveProposalVotesRequest)
    MergeFrom(*source);
  }
}

void ObserveProposalVotesRequest::MergeFrom(const ObserveProposalVotesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ObserveProposalVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proposalid().size() > 0) {
    _internal_set_proposalid(from._internal_proposalid());
  }
}

void ObserveProposalVotesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ObserveProposalVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObserveProposalVotesRequest::CopyFrom(const ObserveProposalVotesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ObserveProposalVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObserveProposalVotesRequest::IsInitialized() const {
  return true;
}

void ObserveProposalVotesRequest::InternalSwap(ObserveProposalVotesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proposalid_.Swap(&other->proposalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ObserveProposalVotesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObservePartyVotesRequest::_Internal {
 public:
};

ObservePartyVotesRequest::ObservePartyVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.ObservePartyVotesRequest)
}
ObservePartyVotesRequest::ObservePartyVotesRequest(const ObservePartyVotesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.ObservePartyVotesRequest)
}

void ObservePartyVotesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObservePartyVotesRequest_api_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ObservePartyVotesRequest::~ObservePartyVotesRequest() {
  // @@protoc_insertion_point(destructor:api.ObservePartyVotesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObservePartyVotesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObservePartyVotesRequest::ArenaDtor(void* object) {
  ObservePartyVotesRequest* _this = reinterpret_cast< ObservePartyVotesRequest* >(object);
  (void)_this;
}
void ObservePartyVotesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObservePartyVotesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObservePartyVotesRequest& ObservePartyVotesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObservePartyVotesRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObservePartyVotesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ObservePartyVotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObservePartyVotesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.ObservePartyVotesRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObservePartyVotesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ObservePartyVotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ObservePartyVotesRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ObservePartyVotesRequest)
  return target;
}

size_t ObservePartyVotesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ObservePartyVotesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservePartyVotesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ObservePartyVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ObservePartyVotesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObservePartyVotesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ObservePartyVotesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ObservePartyVotesRequest)
    MergeFrom(*source);
  }
}

void ObservePartyVotesRequest::MergeFrom(const ObservePartyVotesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ObservePartyVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
}

void ObservePartyVotesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ObservePartyVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservePartyVotesRequest::CopyFrom(const ObservePartyVotesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ObservePartyVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservePartyVotesRequest::IsInitialized() const {
  return true;
}

void ObservePartyVotesRequest::InternalSwap(ObservePartyVotesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservePartyVotesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarginLevelsSubscribeRequest::_Internal {
 public:
};

MarginLevelsSubscribeRequest::MarginLevelsSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarginLevelsSubscribeRequest)
}
MarginLevelsSubscribeRequest::MarginLevelsSubscribeRequest(const MarginLevelsSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.MarginLevelsSubscribeRequest)
}

void MarginLevelsSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarginLevelsSubscribeRequest_api_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarginLevelsSubscribeRequest::~MarginLevelsSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.MarginLevelsSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarginLevelsSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarginLevelsSubscribeRequest::ArenaDtor(void* object) {
  MarginLevelsSubscribeRequest* _this = reinterpret_cast< MarginLevelsSubscribeRequest* >(object);
  (void)_this;
}
void MarginLevelsSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarginLevelsSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginLevelsSubscribeRequest& MarginLevelsSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarginLevelsSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarginLevelsSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarginLevelsSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  marketid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarginLevelsSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.MarginLevelsSubscribeRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketID = 2 [json_name = "marketID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.MarginLevelsSubscribeRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarginLevelsSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarginLevelsSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.MarginLevelsSubscribeRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.MarginLevelsSubscribeRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_marketid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarginLevelsSubscribeRequest)
  return target;
}

size_t MarginLevelsSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarginLevelsSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginLevelsSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarginLevelsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginLevelsSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarginLevelsSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarginLevelsSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarginLevelsSubscribeRequest)
    MergeFrom(*source);
  }
}

void MarginLevelsSubscribeRequest::MergeFrom(const MarginLevelsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarginLevelsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
}

void MarginLevelsSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarginLevelsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginLevelsSubscribeRequest::CopyFrom(const MarginLevelsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarginLevelsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginLevelsSubscribeRequest::IsInitialized() const {
  return true;
}

void MarginLevelsSubscribeRequest::InternalSwap(MarginLevelsSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarginLevelsSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarginLevelsRequest::_Internal {
 public:
};

MarginLevelsRequest::MarginLevelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarginLevelsRequest)
}
MarginLevelsRequest::MarginLevelsRequest(const MarginLevelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.MarginLevelsRequest)
}

void MarginLevelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarginLevelsRequest_api_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarginLevelsRequest::~MarginLevelsRequest() {
  // @@protoc_insertion_point(destructor:api.MarginLevelsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarginLevelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarginLevelsRequest::ArenaDtor(void* object) {
  MarginLevelsRequest* _this = reinterpret_cast< MarginLevelsRequest* >(object);
  (void)_this;
}
void MarginLevelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarginLevelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginLevelsRequest& MarginLevelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarginLevelsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarginLevelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarginLevelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  marketid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarginLevelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.MarginLevelsRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketID = 2 [json_name = "marketID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.MarginLevelsRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarginLevelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarginLevelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.MarginLevelsRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.MarginLevelsRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_marketid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarginLevelsRequest)
  return target;
}

size_t MarginLevelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarginLevelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginLevelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarginLevelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginLevelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarginLevelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarginLevelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarginLevelsRequest)
    MergeFrom(*source);
  }
}

void MarginLevelsRequest::MergeFrom(const MarginLevelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarginLevelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
}

void MarginLevelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarginLevelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginLevelsRequest::CopyFrom(const MarginLevelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarginLevelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginLevelsRequest::IsInitialized() const {
  return true;
}

void MarginLevelsRequest::InternalSwap(MarginLevelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarginLevelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarginLevelsResponse::_Internal {
 public:
};

void MarginLevelsResponse::clear_marginlevels() {
  marginlevels_.Clear();
}
MarginLevelsResponse::MarginLevelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  marginlevels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarginLevelsResponse)
}
MarginLevelsResponse::MarginLevelsResponse(const MarginLevelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      marginlevels_(from.marginlevels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.MarginLevelsResponse)
}

void MarginLevelsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarginLevelsResponse_api_2ftrading_2eproto.base);
}

MarginLevelsResponse::~MarginLevelsResponse() {
  // @@protoc_insertion_point(destructor:api.MarginLevelsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarginLevelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarginLevelsResponse::ArenaDtor(void* object) {
  MarginLevelsResponse* _this = reinterpret_cast< MarginLevelsResponse* >(object);
  (void)_this;
}
void MarginLevelsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarginLevelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginLevelsResponse& MarginLevelsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarginLevelsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarginLevelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarginLevelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marginlevels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarginLevelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.MarginLevels marginLevels = 1 [json_name = "marginLevels"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_marginlevels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarginLevelsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarginLevelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.MarginLevels marginLevels = 1 [json_name = "marginLevels"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_marginlevels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_marginlevels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarginLevelsResponse)
  return target;
}

size_t MarginLevelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarginLevelsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.MarginLevels marginLevels = 1 [json_name = "marginLevels"];
  total_size += 1UL * this->_internal_marginlevels_size();
  for (const auto& msg : this->marginlevels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginLevelsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarginLevelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginLevelsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarginLevelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarginLevelsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarginLevelsResponse)
    MergeFrom(*source);
  }
}

void MarginLevelsResponse::MergeFrom(const MarginLevelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarginLevelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  marginlevels_.MergeFrom(from.marginlevels_);
}

void MarginLevelsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarginLevelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginLevelsResponse::CopyFrom(const MarginLevelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarginLevelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginLevelsResponse::IsInitialized() const {
  return true;
}

void MarginLevelsResponse::InternalSwap(MarginLevelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marginlevels_.InternalSwap(&other->marginlevels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarginLevelsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketsDataSubscribeRequest::_Internal {
 public:
};

MarketsDataSubscribeRequest::MarketsDataSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarketsDataSubscribeRequest)
}
MarketsDataSubscribeRequest::MarketsDataSubscribeRequest(const MarketsDataSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketsDataSubscribeRequest)
}

void MarketsDataSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketsDataSubscribeRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketsDataSubscribeRequest::~MarketsDataSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.MarketsDataSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketsDataSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketsDataSubscribeRequest::ArenaDtor(void* object) {
  MarketsDataSubscribeRequest* _this = reinterpret_cast< MarketsDataSubscribeRequest* >(object);
  (void)_this;
}
void MarketsDataSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketsDataSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketsDataSubscribeRequest& MarketsDataSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketsDataSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketsDataSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketsDataSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketsDataSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.MarketsDataSubscribeRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketsDataSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketsDataSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.MarketsDataSubscribeRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketsDataSubscribeRequest)
  return target;
}

size_t MarketsDataSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketsDataSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketsDataSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketsDataSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketsDataSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketsDataSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketsDataSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketsDataSubscribeRequest)
    MergeFrom(*source);
  }
}

void MarketsDataSubscribeRequest::MergeFrom(const MarketsDataSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketsDataSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
}

void MarketsDataSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketsDataSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketsDataSubscribeRequest::CopyFrom(const MarketsDataSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketsDataSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketsDataSubscribeRequest::IsInitialized() const {
  return true;
}

void MarketsDataSubscribeRequest::InternalSwap(MarketsDataSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketsDataSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDataByIDRequest::_Internal {
 public:
};

MarketDataByIDRequest::MarketDataByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarketDataByIDRequest)
}
MarketDataByIDRequest::MarketDataByIDRequest(const MarketDataByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketDataByIDRequest)
}

void MarketDataByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDataByIDRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketDataByIDRequest::~MarketDataByIDRequest() {
  // @@protoc_insertion_point(destructor:api.MarketDataByIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDataByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketDataByIDRequest::ArenaDtor(void* object) {
  MarketDataByIDRequest* _this = reinterpret_cast< MarketDataByIDRequest* >(object);
  (void)_this;
}
void MarketDataByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDataByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDataByIDRequest& MarketDataByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDataByIDRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDataByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketDataByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDataByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.MarketDataByIDRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDataByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketDataByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.MarketDataByIDRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketDataByIDRequest)
  return target;
}

size_t MarketDataByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketDataByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketDataByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDataByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketDataByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketDataByIDRequest)
    MergeFrom(*source);
  }
}

void MarketDataByIDRequest::MergeFrom(const MarketDataByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketDataByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
}

void MarketDataByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketDataByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataByIDRequest::CopyFrom(const MarketDataByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketDataByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataByIDRequest::IsInitialized() const {
  return true;
}

void MarketDataByIDRequest::InternalSwap(MarketDataByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDataByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDataByIDResponse::_Internal {
 public:
  static const ::vega::MarketData& marketdata(const MarketDataByIDResponse* msg);
};

const ::vega::MarketData&
MarketDataByIDResponse::_Internal::marketdata(const MarketDataByIDResponse* msg) {
  return *msg->marketdata_;
}
void MarketDataByIDResponse::clear_marketdata() {
  if (GetArena() == nullptr && marketdata_ != nullptr) {
    delete marketdata_;
  }
  marketdata_ = nullptr;
}
MarketDataByIDResponse::MarketDataByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarketDataByIDResponse)
}
MarketDataByIDResponse::MarketDataByIDResponse(const MarketDataByIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_marketdata()) {
    marketdata_ = new ::vega::MarketData(*from.marketdata_);
  } else {
    marketdata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketDataByIDResponse)
}

void MarketDataByIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDataByIDResponse_api_2ftrading_2eproto.base);
  marketdata_ = nullptr;
}

MarketDataByIDResponse::~MarketDataByIDResponse() {
  // @@protoc_insertion_point(destructor:api.MarketDataByIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDataByIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete marketdata_;
}

void MarketDataByIDResponse::ArenaDtor(void* object) {
  MarketDataByIDResponse* _this = reinterpret_cast< MarketDataByIDResponse* >(object);
  (void)_this;
}
void MarketDataByIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDataByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDataByIDResponse& MarketDataByIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDataByIDResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDataByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketDataByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && marketdata_ != nullptr) {
    delete marketdata_;
  }
  marketdata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDataByIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.MarketData marketData = 1 [json_name = "marketData"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_marketdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDataByIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketDataByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.MarketData marketData = 1 [json_name = "marketData"];
  if (this->has_marketdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::marketdata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketDataByIDResponse)
  return target;
}

size_t MarketDataByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketDataByIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.MarketData marketData = 1 [json_name = "marketData"];
  if (this->has_marketdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *marketdata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataByIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketDataByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataByIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDataByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketDataByIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketDataByIDResponse)
    MergeFrom(*source);
  }
}

void MarketDataByIDResponse::MergeFrom(const MarketDataByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketDataByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_marketdata()) {
    _internal_mutable_marketdata()->::vega::MarketData::MergeFrom(from._internal_marketdata());
  }
}

void MarketDataByIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketDataByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataByIDResponse::CopyFrom(const MarketDataByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketDataByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataByIDResponse::IsInitialized() const {
  return true;
}

void MarketDataByIDResponse::InternalSwap(MarketDataByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(marketdata_, other->marketdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDataByIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketsDataResponse::_Internal {
 public:
};

void MarketsDataResponse::clear_marketsdata() {
  marketsdata_.Clear();
}
MarketsDataResponse::MarketsDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  marketsdata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarketsDataResponse)
}
MarketsDataResponse::MarketsDataResponse(const MarketsDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      marketsdata_(from.marketsdata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.MarketsDataResponse)
}

void MarketsDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketsDataResponse_api_2ftrading_2eproto.base);
}

MarketsDataResponse::~MarketsDataResponse() {
  // @@protoc_insertion_point(destructor:api.MarketsDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketsDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketsDataResponse::ArenaDtor(void* object) {
  MarketsDataResponse* _this = reinterpret_cast< MarketsDataResponse* >(object);
  (void)_this;
}
void MarketsDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketsDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketsDataResponse& MarketsDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketsDataResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketsDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketsDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketsdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketsDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.MarketData marketsData = 1 [json_name = "marketsData"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_marketsdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketsDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketsDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.MarketData marketsData = 1 [json_name = "marketsData"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_marketsdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_marketsdata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketsDataResponse)
  return target;
}

size_t MarketsDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketsDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.MarketData marketsData = 1 [json_name = "marketsData"];
  total_size += 1UL * this->_internal_marketsdata_size();
  for (const auto& msg : this->marketsdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketsDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketsDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketsDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketsDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketsDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketsDataResponse)
    MergeFrom(*source);
  }
}

void MarketsDataResponse::MergeFrom(const MarketsDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketsDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  marketsdata_.MergeFrom(from.marketsdata_);
}

void MarketsDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketsDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketsDataResponse::CopyFrom(const MarketsDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketsDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketsDataResponse::IsInitialized() const {
  return true;
}

void MarketsDataResponse::InternalSwap(MarketsDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketsdata_.InternalSwap(&other->marketsdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketsDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LastTradeRequest::_Internal {
 public:
};

LastTradeRequest::LastTradeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.LastTradeRequest)
}
LastTradeRequest::LastTradeRequest(const LastTradeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.LastTradeRequest)
}

void LastTradeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LastTradeRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LastTradeRequest::~LastTradeRequest() {
  // @@protoc_insertion_point(destructor:api.LastTradeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LastTradeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LastTradeRequest::ArenaDtor(void* object) {
  LastTradeRequest* _this = reinterpret_cast< LastTradeRequest* >(object);
  (void)_this;
}
void LastTradeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LastTradeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LastTradeRequest& LastTradeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LastTradeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void LastTradeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.LastTradeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastTradeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.LastTradeRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LastTradeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.LastTradeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.LastTradeRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.LastTradeRequest)
  return target;
}

size_t LastTradeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.LastTradeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LastTradeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.LastTradeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LastTradeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LastTradeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.LastTradeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.LastTradeRequest)
    MergeFrom(*source);
  }
}

void LastTradeRequest::MergeFrom(const LastTradeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.LastTradeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
}

void LastTradeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.LastTradeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastTradeRequest::CopyFrom(const LastTradeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.LastTradeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastTradeRequest::IsInitialized() const {
  return true;
}

void LastTradeRequest::InternalSwap(LastTradeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LastTradeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LastTradeResponse::_Internal {
 public:
  static const ::vega::Trade& trade(const LastTradeResponse* msg);
};

const ::vega::Trade&
LastTradeResponse::_Internal::trade(const LastTradeResponse* msg) {
  return *msg->trade_;
}
void LastTradeResponse::clear_trade() {
  if (GetArena() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
}
LastTradeResponse::LastTradeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.LastTradeResponse)
}
LastTradeResponse::LastTradeResponse(const LastTradeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trade()) {
    trade_ = new ::vega::Trade(*from.trade_);
  } else {
    trade_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.LastTradeResponse)
}

void LastTradeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LastTradeResponse_api_2ftrading_2eproto.base);
  trade_ = nullptr;
}

LastTradeResponse::~LastTradeResponse() {
  // @@protoc_insertion_point(destructor:api.LastTradeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LastTradeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete trade_;
}

void LastTradeResponse::ArenaDtor(void* object) {
  LastTradeResponse* _this = reinterpret_cast< LastTradeResponse* >(object);
  (void)_this;
}
void LastTradeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LastTradeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LastTradeResponse& LastTradeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LastTradeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void LastTradeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.LastTradeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastTradeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Trade trade = 1 [json_name = "trade"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LastTradeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.LastTradeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Trade trade = 1 [json_name = "trade"];
  if (this->has_trade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trade(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.LastTradeResponse)
  return target;
}

size_t LastTradeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.LastTradeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Trade trade = 1 [json_name = "trade"];
  if (this->has_trade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trade_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LastTradeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.LastTradeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LastTradeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LastTradeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.LastTradeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.LastTradeResponse)
    MergeFrom(*source);
  }
}

void LastTradeResponse::MergeFrom(const LastTradeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.LastTradeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trade()) {
    _internal_mutable_trade()->::vega::Trade::MergeFrom(from._internal_trade());
  }
}

void LastTradeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.LastTradeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastTradeResponse::CopyFrom(const LastTradeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.LastTradeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastTradeResponse::IsInitialized() const {
  return true;
}

void LastTradeResponse::InternalSwap(LastTradeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(trade_, other->trade_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LastTradeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByIDRequest::_Internal {
 public:
};

MarketByIDRequest::MarketByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarketByIDRequest)
}
MarketByIDRequest::MarketByIDRequest(const MarketByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketByIDRequest)
}

void MarketByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketByIDRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketByIDRequest::~MarketByIDRequest() {
  // @@protoc_insertion_point(destructor:api.MarketByIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketByIDRequest::ArenaDtor(void* object) {
  MarketByIDRequest* _this = reinterpret_cast< MarketByIDRequest* >(object);
  (void)_this;
}
void MarketByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketByIDRequest& MarketByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketByIDRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.MarketByIDRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.MarketByIDRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketByIDRequest)
  return target;
}

size_t MarketByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketByIDRequest)
    MergeFrom(*source);
  }
}

void MarketByIDRequest::MergeFrom(const MarketByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
}

void MarketByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByIDRequest::CopyFrom(const MarketByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByIDRequest::IsInitialized() const {
  return true;
}

void MarketByIDRequest::InternalSwap(MarketByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketByIDResponse::_Internal {
 public:
  static const ::vega::Market& market(const MarketByIDResponse* msg);
};

const ::vega::Market&
MarketByIDResponse::_Internal::market(const MarketByIDResponse* msg) {
  return *msg->market_;
}
void MarketByIDResponse::clear_market() {
  if (GetArena() == nullptr && market_ != nullptr) {
    delete market_;
  }
  market_ = nullptr;
}
MarketByIDResponse::MarketByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarketByIDResponse)
}
MarketByIDResponse::MarketByIDResponse(const MarketByIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_market()) {
    market_ = new ::vega::Market(*from.market_);
  } else {
    market_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketByIDResponse)
}

void MarketByIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketByIDResponse_api_2ftrading_2eproto.base);
  market_ = nullptr;
}

MarketByIDResponse::~MarketByIDResponse() {
  // @@protoc_insertion_point(destructor:api.MarketByIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketByIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete market_;
}

void MarketByIDResponse::ArenaDtor(void* object) {
  MarketByIDResponse* _this = reinterpret_cast< MarketByIDResponse* >(object);
  (void)_this;
}
void MarketByIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketByIDResponse& MarketByIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketByIDResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && market_ != nullptr) {
    delete market_;
  }
  market_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Market market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_market(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketByIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Market market = 1 [json_name = "market"];
  if (this->has_market()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::market(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketByIDResponse)
  return target;
}

size_t MarketByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketByIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Market market = 1 [json_name = "market"];
  if (this->has_market()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *market_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketByIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketByIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketByIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketByIDResponse)
    MergeFrom(*source);
  }
}

void MarketByIDResponse::MergeFrom(const MarketByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_market()) {
    _internal_mutable_market()->::vega::Market::MergeFrom(from._internal_market());
  }
}

void MarketByIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketByIDResponse::CopyFrom(const MarketByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByIDResponse::IsInitialized() const {
  return true;
}

void MarketByIDResponse::InternalSwap(MarketByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(market_, other->market_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyByIDRequest::_Internal {
 public:
};

PartyByIDRequest::PartyByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PartyByIDRequest)
}
PartyByIDRequest::PartyByIDRequest(const PartyByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.PartyByIDRequest)
}

void PartyByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyByIDRequest_api_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PartyByIDRequest::~PartyByIDRequest() {
  // @@protoc_insertion_point(destructor:api.PartyByIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyByIDRequest::ArenaDtor(void* object) {
  PartyByIDRequest* _this = reinterpret_cast< PartyByIDRequest* >(object);
  (void)_this;
}
void PartyByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyByIDRequest& PartyByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyByIDRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartyByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PartyByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.PartyByIDRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PartyByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.PartyByIDRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PartyByIDRequest)
  return target;
}

size_t PartyByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PartyByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PartyByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PartyByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PartyByIDRequest)
    MergeFrom(*source);
  }
}

void PartyByIDRequest::MergeFrom(const PartyByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PartyByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
}

void PartyByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PartyByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyByIDRequest::CopyFrom(const PartyByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PartyByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyByIDRequest::IsInitialized() const {
  return true;
}

void PartyByIDRequest::InternalSwap(PartyByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyByIDResponse::_Internal {
 public:
  static const ::vega::Party& party(const PartyByIDResponse* msg);
};

const ::vega::Party&
PartyByIDResponse::_Internal::party(const PartyByIDResponse* msg) {
  return *msg->party_;
}
void PartyByIDResponse::clear_party() {
  if (GetArena() == nullptr && party_ != nullptr) {
    delete party_;
  }
  party_ = nullptr;
}
PartyByIDResponse::PartyByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PartyByIDResponse)
}
PartyByIDResponse::PartyByIDResponse(const PartyByIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_party()) {
    party_ = new ::vega::Party(*from.party_);
  } else {
    party_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.PartyByIDResponse)
}

void PartyByIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyByIDResponse_api_2ftrading_2eproto.base);
  party_ = nullptr;
}

PartyByIDResponse::~PartyByIDResponse() {
  // @@protoc_insertion_point(destructor:api.PartyByIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyByIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete party_;
}

void PartyByIDResponse::ArenaDtor(void* object) {
  PartyByIDResponse* _this = reinterpret_cast< PartyByIDResponse* >(object);
  (void)_this;
}
void PartyByIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyByIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyByIDResponse& PartyByIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyByIDResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartyByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PartyByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && party_ != nullptr) {
    delete party_;
  }
  party_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyByIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Party party = 1 [json_name = "party"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_party(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyByIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PartyByIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Party party = 1 [json_name = "party"];
  if (this->has_party()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::party(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PartyByIDResponse)
  return target;
}

size_t PartyByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PartyByIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Party party = 1 [json_name = "party"];
  if (this->has_party()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *party_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyByIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PartyByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyByIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyByIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PartyByIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PartyByIDResponse)
    MergeFrom(*source);
  }
}

void PartyByIDResponse::MergeFrom(const PartyByIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PartyByIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_party()) {
    _internal_mutable_party()->::vega::Party::MergeFrom(from._internal_party());
  }
}

void PartyByIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PartyByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyByIDResponse::CopyFrom(const PartyByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PartyByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyByIDResponse::IsInitialized() const {
  return true;
}

void PartyByIDResponse::InternalSwap(PartyByIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(party_, other->party_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyByIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartiesResponse::_Internal {
 public:
};

void PartiesResponse::clear_parties() {
  parties_.Clear();
}
PartiesResponse::PartiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PartiesResponse)
}
PartiesResponse::PartiesResponse(const PartiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parties_(from.parties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.PartiesResponse)
}

void PartiesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartiesResponse_api_2ftrading_2eproto.base);
}

PartiesResponse::~PartiesResponse() {
  // @@protoc_insertion_point(destructor:api.PartiesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PartiesResponse::ArenaDtor(void* object) {
  PartiesResponse* _this = reinterpret_cast< PartiesResponse* >(object);
  (void)_this;
}
void PartiesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartiesResponse& PartiesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartiesResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PartiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartiesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Party parties = 1 [json_name = "parties"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartiesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PartiesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Party parties = 1 [json_name = "parties"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_parties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PartiesResponse)
  return target;
}

size_t PartiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PartiesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Party parties = 1 [json_name = "parties"];
  total_size += 1UL * this->_internal_parties_size();
  for (const auto& msg : this->parties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartiesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PartiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PartiesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartiesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PartiesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PartiesResponse)
    MergeFrom(*source);
  }
}

void PartiesResponse::MergeFrom(const PartiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PartiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parties_.MergeFrom(from.parties_);
}

void PartiesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PartiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartiesResponse::CopyFrom(const PartiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PartiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartiesResponse::IsInitialized() const {
  return true;
}

void PartiesResponse::InternalSwap(PartiesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parties_.InternalSwap(&other->parties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartiesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesByPartyRequest::_Internal {
 public:
  static const ::api::Pagination& pagination(const TradesByPartyRequest* msg);
};

const ::api::Pagination&
TradesByPartyRequest::_Internal::pagination(const TradesByPartyRequest* msg) {
  return *msg->pagination_;
}
TradesByPartyRequest::TradesByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.TradesByPartyRequest)
}
TradesByPartyRequest::TradesByPartyRequest(const TradesByPartyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.TradesByPartyRequest)
}

void TradesByPartyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesByPartyRequest_api_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pagination_ = nullptr;
}

TradesByPartyRequest::~TradesByPartyRequest() {
  // @@protoc_insertion_point(destructor:api.TradesByPartyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesByPartyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void TradesByPartyRequest::ArenaDtor(void* object) {
  TradesByPartyRequest* _this = reinterpret_cast< TradesByPartyRequest* >(object);
  (void)_this;
}
void TradesByPartyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesByPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByPartyRequest& TradesByPartyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesByPartyRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  marketid_.ClearToEmpty();
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesByPartyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.TradesByPartyRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketID = 2 [json_name = "marketID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.TradesByPartyRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.Pagination pagination = 3 [json_name = "pagination"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesByPartyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.TradesByPartyRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.TradesByPartyRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_marketid(), target);
  }

  // .api.Pagination pagination = 3 [json_name = "pagination"];
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesByPartyRequest)
  return target;
}

size_t TradesByPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesByPartyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // .api.Pagination pagination = 3 [json_name = "pagination"];
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByPartyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByPartyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesByPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesByPartyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesByPartyRequest)
    MergeFrom(*source);
  }
}

void TradesByPartyRequest::MergeFrom(const TradesByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void TradesByPartyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByPartyRequest::CopyFrom(const TradesByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByPartyRequest::IsInitialized() const {
  return true;
}

void TradesByPartyRequest::InternalSwap(TradesByPartyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesByPartyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesByPartyResponse::_Internal {
 public:
};

void TradesByPartyResponse::clear_trades() {
  trades_.Clear();
}
TradesByPartyResponse::TradesByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trades_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.TradesByPartyResponse)
}
TradesByPartyResponse::TradesByPartyResponse(const TradesByPartyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.TradesByPartyResponse)
}

void TradesByPartyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesByPartyResponse_api_2ftrading_2eproto.base);
}

TradesByPartyResponse::~TradesByPartyResponse() {
  // @@protoc_insertion_point(destructor:api.TradesByPartyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesByPartyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TradesByPartyResponse::ArenaDtor(void* object) {
  TradesByPartyResponse* _this = reinterpret_cast< TradesByPartyResponse* >(object);
  (void)_this;
}
void TradesByPartyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesByPartyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByPartyResponse& TradesByPartyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesByPartyResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesByPartyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Trade trades = 1 [json_name = "trades"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesByPartyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trades(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesByPartyResponse)
  return target;
}

size_t TradesByPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesByPartyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByPartyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByPartyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesByPartyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesByPartyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesByPartyResponse)
    MergeFrom(*source);
  }
}

void TradesByPartyResponse::MergeFrom(const TradesByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradesByPartyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByPartyResponse::CopyFrom(const TradesByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByPartyResponse::IsInitialized() const {
  return true;
}

void TradesByPartyResponse::InternalSwap(TradesByPartyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trades_.InternalSwap(&other->trades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesByPartyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesByOrderRequest::_Internal {
 public:
};

TradesByOrderRequest::TradesByOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.TradesByOrderRequest)
}
TradesByOrderRequest::TradesByOrderRequest(const TradesByOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_orderid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.TradesByOrderRequest)
}

void TradesByOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesByOrderRequest_api_2ftrading_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TradesByOrderRequest::~TradesByOrderRequest() {
  // @@protoc_insertion_point(destructor:api.TradesByOrderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesByOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TradesByOrderRequest::ArenaDtor(void* object) {
  TradesByOrderRequest* _this = reinterpret_cast< TradesByOrderRequest* >(object);
  (void)_this;
}
void TradesByOrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesByOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByOrderRequest& TradesByOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesByOrderRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesByOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesByOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderID = 1 [json_name = "orderID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.TradesByOrderRequest.orderID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesByOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesByOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1 [json_name = "orderID"];
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.TradesByOrderRequest.orderID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesByOrderRequest)
  return target;
}

size_t TradesByOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesByOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderID = 1 [json_name = "orderID"];
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesByOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesByOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesByOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesByOrderRequest)
    MergeFrom(*source);
  }
}

void TradesByOrderRequest::MergeFrom(const TradesByOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesByOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {
    _internal_set_orderid(from._internal_orderid());
  }
}

void TradesByOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesByOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByOrderRequest::CopyFrom(const TradesByOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesByOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByOrderRequest::IsInitialized() const {
  return true;
}

void TradesByOrderRequest::InternalSwap(TradesByOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesByOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesByOrderResponse::_Internal {
 public:
};

void TradesByOrderResponse::clear_trades() {
  trades_.Clear();
}
TradesByOrderResponse::TradesByOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trades_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.TradesByOrderResponse)
}
TradesByOrderResponse::TradesByOrderResponse(const TradesByOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.TradesByOrderResponse)
}

void TradesByOrderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesByOrderResponse_api_2ftrading_2eproto.base);
}

TradesByOrderResponse::~TradesByOrderResponse() {
  // @@protoc_insertion_point(destructor:api.TradesByOrderResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesByOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TradesByOrderResponse::ArenaDtor(void* object) {
  TradesByOrderResponse* _this = reinterpret_cast< TradesByOrderResponse* >(object);
  (void)_this;
}
void TradesByOrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesByOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByOrderResponse& TradesByOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesByOrderResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesByOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesByOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Trade trades = 1 [json_name = "trades"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesByOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesByOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trades(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesByOrderResponse)
  return target;
}

size_t TradesByOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesByOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesByOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesByOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesByOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesByOrderResponse)
    MergeFrom(*source);
  }
}

void TradesByOrderResponse::MergeFrom(const TradesByOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesByOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradesByOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesByOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByOrderResponse::CopyFrom(const TradesByOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesByOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByOrderResponse::IsInitialized() const {
  return true;
}

void TradesByOrderResponse::InternalSwap(TradesByOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trades_.InternalSwap(&other->trades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesByOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccountsSubscribeRequest::_Internal {
 public:
};

AccountsSubscribeRequest::AccountsSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.AccountsSubscribeRequest)
}
AccountsSubscribeRequest::AccountsSubscribeRequest(const AccountsSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:api.AccountsSubscribeRequest)
}

void AccountsSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountsSubscribeRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

AccountsSubscribeRequest::~AccountsSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.AccountsSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountsSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountsSubscribeRequest::ArenaDtor(void* object) {
  AccountsSubscribeRequest* _this = reinterpret_cast< AccountsSubscribeRequest* >(object);
  (void)_this;
}
void AccountsSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountsSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountsSubscribeRequest& AccountsSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountsSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void AccountsSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.AccountsSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  partyid_.ClearToEmpty();
  asset_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountsSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.AccountsSubscribeRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partyID = 2 [json_name = "partyID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.AccountsSubscribeRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 3 [json_name = "asset"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.AccountsSubscribeRequest.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.AccountType type = 4 [json_name = "type"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::AccountType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountsSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.AccountsSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.AccountsSubscribeRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // string partyID = 2 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.AccountsSubscribeRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partyid(), target);
  }

  // string asset = 3 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.AccountsSubscribeRequest.asset");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_asset(), target);
  }

  // .vega.AccountType type = 4 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.AccountsSubscribeRequest)
  return target;
}

size_t AccountsSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.AccountsSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // string partyID = 2 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string asset = 3 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // .vega.AccountType type = 4 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountsSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.AccountsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountsSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountsSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.AccountsSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.AccountsSubscribeRequest)
    MergeFrom(*source);
  }
}

void AccountsSubscribeRequest::MergeFrom(const AccountsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.AccountsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void AccountsSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.AccountsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountsSubscribeRequest::CopyFrom(const AccountsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.AccountsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountsSubscribeRequest::IsInitialized() const {
  return true;
}

void AccountsSubscribeRequest::InternalSwap(AccountsSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountsSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrdersSubscribeRequest::_Internal {
 public:
};

OrdersSubscribeRequest::OrdersSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.OrdersSubscribeRequest)
}
OrdersSubscribeRequest::OrdersSubscribeRequest(const OrdersSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.OrdersSubscribeRequest)
}

void OrdersSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrdersSubscribeRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OrdersSubscribeRequest::~OrdersSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.OrdersSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrdersSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrdersSubscribeRequest::ArenaDtor(void* object) {
  OrdersSubscribeRequest* _this = reinterpret_cast< OrdersSubscribeRequest* >(object);
  (void)_this;
}
void OrdersSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrdersSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersSubscribeRequest& OrdersSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrdersSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrdersSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  partyid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.OrdersSubscribeRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partyID = 2 [json_name = "partyID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.OrdersSubscribeRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrdersSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrdersSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.OrdersSubscribeRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // string partyID = 2 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.OrdersSubscribeRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrdersSubscribeRequest)
  return target;
}

size_t OrdersSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrdersSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // string partyID = 2 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrdersSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrdersSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrdersSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrdersSubscribeRequest)
    MergeFrom(*source);
  }
}

void OrdersSubscribeRequest::MergeFrom(const OrdersSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrdersSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
}

void OrdersSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrdersSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersSubscribeRequest::CopyFrom(const OrdersSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrdersSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersSubscribeRequest::IsInitialized() const {
  return true;
}

void OrdersSubscribeRequest::InternalSwap(OrdersSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesSubscribeRequest::_Internal {
 public:
};

TradesSubscribeRequest::TradesSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.TradesSubscribeRequest)
}
TradesSubscribeRequest::TradesSubscribeRequest(const TradesSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.TradesSubscribeRequest)
}

void TradesSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesSubscribeRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TradesSubscribeRequest::~TradesSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.TradesSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TradesSubscribeRequest::ArenaDtor(void* object) {
  TradesSubscribeRequest* _this = reinterpret_cast< TradesSubscribeRequest* >(object);
  (void)_this;
}
void TradesSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesSubscribeRequest& TradesSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  partyid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.TradesSubscribeRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partyID = 2 [json_name = "partyID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.TradesSubscribeRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.TradesSubscribeRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // string partyID = 2 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.TradesSubscribeRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesSubscribeRequest)
  return target;
}

size_t TradesSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // string partyID = 2 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesSubscribeRequest)
    MergeFrom(*source);
  }
}

void TradesSubscribeRequest::MergeFrom(const TradesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
}

void TradesSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesSubscribeRequest::CopyFrom(const TradesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesSubscribeRequest::IsInitialized() const {
  return true;
}

void TradesSubscribeRequest::InternalSwap(TradesSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CandlesSubscribeRequest::_Internal {
 public:
};

CandlesSubscribeRequest::CandlesSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.CandlesSubscribeRequest)
}
CandlesSubscribeRequest::CandlesSubscribeRequest(const CandlesSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  interval_ = from.interval_;
  // @@protoc_insertion_point(copy_constructor:api.CandlesSubscribeRequest)
}

void CandlesSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CandlesSubscribeRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interval_ = 0;
}

CandlesSubscribeRequest::~CandlesSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.CandlesSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CandlesSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CandlesSubscribeRequest::ArenaDtor(void* object) {
  CandlesSubscribeRequest* _this = reinterpret_cast< CandlesSubscribeRequest* >(object);
  (void)_this;
}
void CandlesSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandlesSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CandlesSubscribeRequest& CandlesSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CandlesSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void CandlesSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.CandlesSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  interval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandlesSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.CandlesSubscribeRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Interval interval = 2 [json_name = "interval"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interval(static_cast<::vega::Interval>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandlesSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.CandlesSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.CandlesSubscribeRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // .vega.Interval interval = 2 [json_name = "interval"];
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.CandlesSubscribeRequest)
  return target;
}

size_t CandlesSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.CandlesSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // .vega.Interval interval = 2 [json_name = "interval"];
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandlesSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.CandlesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CandlesSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CandlesSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.CandlesSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.CandlesSubscribeRequest)
    MergeFrom(*source);
  }
}

void CandlesSubscribeRequest::MergeFrom(const CandlesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.CandlesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
}

void CandlesSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.CandlesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandlesSubscribeRequest::CopyFrom(const CandlesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.CandlesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandlesSubscribeRequest::IsInitialized() const {
  return true;
}

void CandlesSubscribeRequest::InternalSwap(CandlesSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(interval_, other->interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CandlesSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDepthSubscribeRequest::_Internal {
 public:
};

MarketDepthSubscribeRequest::MarketDepthSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarketDepthSubscribeRequest)
}
MarketDepthSubscribeRequest::MarketDepthSubscribeRequest(const MarketDepthSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketDepthSubscribeRequest)
}

void MarketDepthSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDepthSubscribeRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketDepthSubscribeRequest::~MarketDepthSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.MarketDepthSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDepthSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthSubscribeRequest::ArenaDtor(void* object) {
  MarketDepthSubscribeRequest* _this = reinterpret_cast< MarketDepthSubscribeRequest* >(object);
  (void)_this;
}
void MarketDepthSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDepthSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthSubscribeRequest& MarketDepthSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDepthSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketDepthSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.MarketDepthSubscribeRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDepthSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketDepthSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.MarketDepthSubscribeRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketDepthSubscribeRequest)
  return target;
}

size_t MarketDepthSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketDepthSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketDepthSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDepthSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketDepthSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketDepthSubscribeRequest)
    MergeFrom(*source);
  }
}

void MarketDepthSubscribeRequest::MergeFrom(const MarketDepthSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketDepthSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
}

void MarketDepthSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketDepthSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthSubscribeRequest::CopyFrom(const MarketDepthSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketDepthSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthSubscribeRequest::IsInitialized() const {
  return true;
}

void MarketDepthSubscribeRequest::InternalSwap(MarketDepthSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDepthUpdatesSubscribeRequest::_Internal {
 public:
};

MarketDepthUpdatesSubscribeRequest::MarketDepthUpdatesSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarketDepthUpdatesSubscribeRequest)
}
MarketDepthUpdatesSubscribeRequest::MarketDepthUpdatesSubscribeRequest(const MarketDepthUpdatesSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketDepthUpdatesSubscribeRequest)
}

void MarketDepthUpdatesSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDepthUpdatesSubscribeRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketDepthUpdatesSubscribeRequest::~MarketDepthUpdatesSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.MarketDepthUpdatesSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDepthUpdatesSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthUpdatesSubscribeRequest::ArenaDtor(void* object) {
  MarketDepthUpdatesSubscribeRequest* _this = reinterpret_cast< MarketDepthUpdatesSubscribeRequest* >(object);
  (void)_this;
}
void MarketDepthUpdatesSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDepthUpdatesSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthUpdatesSubscribeRequest& MarketDepthUpdatesSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDepthUpdatesSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthUpdatesSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketDepthUpdatesSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthUpdatesSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.MarketDepthUpdatesSubscribeRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDepthUpdatesSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketDepthUpdatesSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.MarketDepthUpdatesSubscribeRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketDepthUpdatesSubscribeRequest)
  return target;
}

size_t MarketDepthUpdatesSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketDepthUpdatesSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthUpdatesSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketDepthUpdatesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthUpdatesSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDepthUpdatesSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketDepthUpdatesSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketDepthUpdatesSubscribeRequest)
    MergeFrom(*source);
  }
}

void MarketDepthUpdatesSubscribeRequest::MergeFrom(const MarketDepthUpdatesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketDepthUpdatesSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
}

void MarketDepthUpdatesSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketDepthUpdatesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdatesSubscribeRequest::CopyFrom(const MarketDepthUpdatesSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketDepthUpdatesSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdatesSubscribeRequest::IsInitialized() const {
  return true;
}

void MarketDepthUpdatesSubscribeRequest::InternalSwap(MarketDepthUpdatesSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthUpdatesSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionsSubscribeRequest::_Internal {
 public:
};

PositionsSubscribeRequest::PositionsSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PositionsSubscribeRequest)
}
PositionsSubscribeRequest::PositionsSubscribeRequest(const PositionsSubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.PositionsSubscribeRequest)
}

void PositionsSubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionsSubscribeRequest_api_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PositionsSubscribeRequest::~PositionsSubscribeRequest() {
  // @@protoc_insertion_point(destructor:api.PositionsSubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionsSubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PositionsSubscribeRequest::ArenaDtor(void* object) {
  PositionsSubscribeRequest* _this = reinterpret_cast< PositionsSubscribeRequest* >(object);
  (void)_this;
}
void PositionsSubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionsSubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionsSubscribeRequest& PositionsSubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionsSubscribeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PositionsSubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PositionsSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  marketid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsSubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.PositionsSubscribeRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketID = 2 [json_name = "marketID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.PositionsSubscribeRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionsSubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PositionsSubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.PositionsSubscribeRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.PositionsSubscribeRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_marketid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PositionsSubscribeRequest)
  return target;
}

size_t PositionsSubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PositionsSubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionsSubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PositionsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionsSubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionsSubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PositionsSubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PositionsSubscribeRequest)
    MergeFrom(*source);
  }
}

void PositionsSubscribeRequest::MergeFrom(const PositionsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PositionsSubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
}

void PositionsSubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PositionsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionsSubscribeRequest::CopyFrom(const PositionsSubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PositionsSubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsSubscribeRequest::IsInitialized() const {
  return true;
}

void PositionsSubscribeRequest::InternalSwap(PositionsSubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsSubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrdersByMarketRequest::_Internal {
 public:
  static const ::api::Pagination& pagination(const OrdersByMarketRequest* msg);
};

const ::api::Pagination&
OrdersByMarketRequest::_Internal::pagination(const OrdersByMarketRequest* msg) {
  return *msg->pagination_;
}
OrdersByMarketRequest::OrdersByMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.OrdersByMarketRequest)
}
OrdersByMarketRequest::OrdersByMarketRequest(const OrdersByMarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.OrdersByMarketRequest)
}

void OrdersByMarketRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrdersByMarketRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pagination_ = nullptr;
}

OrdersByMarketRequest::~OrdersByMarketRequest() {
  // @@protoc_insertion_point(destructor:api.OrdersByMarketRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrdersByMarketRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void OrdersByMarketRequest::ArenaDtor(void* object) {
  OrdersByMarketRequest* _this = reinterpret_cast< OrdersByMarketRequest* >(object);
  (void)_this;
}
void OrdersByMarketRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrdersByMarketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersByMarketRequest& OrdersByMarketRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrdersByMarketRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersByMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrdersByMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersByMarketRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.OrdersByMarketRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.Pagination pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrdersByMarketRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrdersByMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.OrdersByMarketRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // .api.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrdersByMarketRequest)
  return target;
}

size_t OrdersByMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrdersByMarketRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // .api.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersByMarketRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrdersByMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersByMarketRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrdersByMarketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrdersByMarketRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrdersByMarketRequest)
    MergeFrom(*source);
  }
}

void OrdersByMarketRequest::MergeFrom(const OrdersByMarketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrdersByMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void OrdersByMarketRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrdersByMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersByMarketRequest::CopyFrom(const OrdersByMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrdersByMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersByMarketRequest::IsInitialized() const {
  return true;
}

void OrdersByMarketRequest::InternalSwap(OrdersByMarketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersByMarketRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrdersByMarketResponse::_Internal {
 public:
};

void OrdersByMarketResponse::clear_orders() {
  orders_.Clear();
}
OrdersByMarketResponse::OrdersByMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.OrdersByMarketResponse)
}
OrdersByMarketResponse::OrdersByMarketResponse(const OrdersByMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.OrdersByMarketResponse)
}

void OrdersByMarketResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrdersByMarketResponse_api_2ftrading_2eproto.base);
}

OrdersByMarketResponse::~OrdersByMarketResponse() {
  // @@protoc_insertion_point(destructor:api.OrdersByMarketResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrdersByMarketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrdersByMarketResponse::ArenaDtor(void* object) {
  OrdersByMarketResponse* _this = reinterpret_cast< OrdersByMarketResponse* >(object);
  (void)_this;
}
void OrdersByMarketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrdersByMarketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersByMarketResponse& OrdersByMarketResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrdersByMarketResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersByMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrdersByMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersByMarketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Order orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrdersByMarketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrdersByMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrdersByMarketResponse)
  return target;
}

size_t OrdersByMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrdersByMarketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersByMarketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrdersByMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersByMarketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrdersByMarketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrdersByMarketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrdersByMarketResponse)
    MergeFrom(*source);
  }
}

void OrdersByMarketResponse::MergeFrom(const OrdersByMarketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrdersByMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void OrdersByMarketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrdersByMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersByMarketResponse::CopyFrom(const OrdersByMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrdersByMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersByMarketResponse::IsInitialized() const {
  return true;
}

void OrdersByMarketResponse::InternalSwap(OrdersByMarketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersByMarketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrdersByPartyRequest::_Internal {
 public:
  static const ::api::Pagination& pagination(const OrdersByPartyRequest* msg);
};

const ::api::Pagination&
OrdersByPartyRequest::_Internal::pagination(const OrdersByPartyRequest* msg) {
  return *msg->pagination_;
}
OrdersByPartyRequest::OrdersByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.OrdersByPartyRequest)
}
OrdersByPartyRequest::OrdersByPartyRequest(const OrdersByPartyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.OrdersByPartyRequest)
}

void OrdersByPartyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrdersByPartyRequest_api_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pagination_ = nullptr;
}

OrdersByPartyRequest::~OrdersByPartyRequest() {
  // @@protoc_insertion_point(destructor:api.OrdersByPartyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrdersByPartyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void OrdersByPartyRequest::ArenaDtor(void* object) {
  OrdersByPartyRequest* _this = reinterpret_cast< OrdersByPartyRequest* >(object);
  (void)_this;
}
void OrdersByPartyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrdersByPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersByPartyRequest& OrdersByPartyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrdersByPartyRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersByPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrdersByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersByPartyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.OrdersByPartyRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.Pagination pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrdersByPartyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrdersByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.OrdersByPartyRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  // .api.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrdersByPartyRequest)
  return target;
}

size_t OrdersByPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrdersByPartyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // .api.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersByPartyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrdersByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersByPartyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrdersByPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrdersByPartyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrdersByPartyRequest)
    MergeFrom(*source);
  }
}

void OrdersByPartyRequest::MergeFrom(const OrdersByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrdersByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void OrdersByPartyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrdersByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersByPartyRequest::CopyFrom(const OrdersByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrdersByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersByPartyRequest::IsInitialized() const {
  return true;
}

void OrdersByPartyRequest::InternalSwap(OrdersByPartyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersByPartyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrdersByPartyResponse::_Internal {
 public:
};

void OrdersByPartyResponse::clear_orders() {
  orders_.Clear();
}
OrdersByPartyResponse::OrdersByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.OrdersByPartyResponse)
}
OrdersByPartyResponse::OrdersByPartyResponse(const OrdersByPartyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.OrdersByPartyResponse)
}

void OrdersByPartyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrdersByPartyResponse_api_2ftrading_2eproto.base);
}

OrdersByPartyResponse::~OrdersByPartyResponse() {
  // @@protoc_insertion_point(destructor:api.OrdersByPartyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrdersByPartyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrdersByPartyResponse::ArenaDtor(void* object) {
  OrdersByPartyResponse* _this = reinterpret_cast< OrdersByPartyResponse* >(object);
  (void)_this;
}
void OrdersByPartyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrdersByPartyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersByPartyResponse& OrdersByPartyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrdersByPartyResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersByPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrdersByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersByPartyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Order orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrdersByPartyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrdersByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrdersByPartyResponse)
  return target;
}

size_t OrdersByPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrdersByPartyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersByPartyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrdersByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersByPartyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrdersByPartyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrdersByPartyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrdersByPartyResponse)
    MergeFrom(*source);
  }
}

void OrdersByPartyResponse::MergeFrom(const OrdersByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrdersByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void OrdersByPartyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrdersByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersByPartyResponse::CopyFrom(const OrdersByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrdersByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersByPartyResponse::IsInitialized() const {
  return true;
}

void OrdersByPartyResponse::InternalSwap(OrdersByPartyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersByPartyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderByMarketAndIdRequest::_Internal {
 public:
};

OrderByMarketAndIdRequest::OrderByMarketAndIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.OrderByMarketAndIdRequest)
}
OrderByMarketAndIdRequest::OrderByMarketAndIdRequest(const OrderByMarketAndIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_orderid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.OrderByMarketAndIdRequest)
}

void OrderByMarketAndIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderByMarketAndIdRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OrderByMarketAndIdRequest::~OrderByMarketAndIdRequest() {
  // @@protoc_insertion_point(destructor:api.OrderByMarketAndIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderByMarketAndIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderByMarketAndIdRequest::ArenaDtor(void* object) {
  OrderByMarketAndIdRequest* _this = reinterpret_cast< OrderByMarketAndIdRequest* >(object);
  (void)_this;
}
void OrderByMarketAndIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderByMarketAndIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByMarketAndIdRequest& OrderByMarketAndIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderByMarketAndIdRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByMarketAndIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrderByMarketAndIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  orderid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderByMarketAndIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.OrderByMarketAndIdRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string orderID = 2 [json_name = "orderID", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.OrderByMarketAndIdRequest.orderID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderByMarketAndIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrderByMarketAndIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.OrderByMarketAndIdRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // string orderID = 2 [json_name = "orderID", (.validator.field) = {
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.OrderByMarketAndIdRequest.orderID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_orderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrderByMarketAndIdRequest)
  return target;
}

size_t OrderByMarketAndIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrderByMarketAndIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // string orderID = 2 [json_name = "orderID", (.validator.field) = {
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByMarketAndIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrderByMarketAndIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByMarketAndIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderByMarketAndIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrderByMarketAndIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrderByMarketAndIdRequest)
    MergeFrom(*source);
  }
}

void OrderByMarketAndIdRequest::MergeFrom(const OrderByMarketAndIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrderByMarketAndIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.orderid().size() > 0) {
    _internal_set_orderid(from._internal_orderid());
  }
}

void OrderByMarketAndIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrderByMarketAndIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByMarketAndIdRequest::CopyFrom(const OrderByMarketAndIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrderByMarketAndIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByMarketAndIdRequest::IsInitialized() const {
  return true;
}

void OrderByMarketAndIdRequest::InternalSwap(OrderByMarketAndIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderByMarketAndIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderByMarketAndIdResponse::_Internal {
 public:
  static const ::vega::Order& order(const OrderByMarketAndIdResponse* msg);
};

const ::vega::Order&
OrderByMarketAndIdResponse::_Internal::order(const OrderByMarketAndIdResponse* msg) {
  return *msg->order_;
}
void OrderByMarketAndIdResponse::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
OrderByMarketAndIdResponse::OrderByMarketAndIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.OrderByMarketAndIdResponse)
}
OrderByMarketAndIdResponse::OrderByMarketAndIdResponse(const OrderByMarketAndIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.OrderByMarketAndIdResponse)
}

void OrderByMarketAndIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderByMarketAndIdResponse_api_2ftrading_2eproto.base);
  order_ = nullptr;
}

OrderByMarketAndIdResponse::~OrderByMarketAndIdResponse() {
  // @@protoc_insertion_point(destructor:api.OrderByMarketAndIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderByMarketAndIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_;
}

void OrderByMarketAndIdResponse::ArenaDtor(void* object) {
  OrderByMarketAndIdResponse* _this = reinterpret_cast< OrderByMarketAndIdResponse* >(object);
  (void)_this;
}
void OrderByMarketAndIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderByMarketAndIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByMarketAndIdResponse& OrderByMarketAndIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderByMarketAndIdResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByMarketAndIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrderByMarketAndIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderByMarketAndIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1 [json_name = "order"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderByMarketAndIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrderByMarketAndIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrderByMarketAndIdResponse)
  return target;
}

size_t OrderByMarketAndIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrderByMarketAndIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByMarketAndIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrderByMarketAndIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByMarketAndIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderByMarketAndIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrderByMarketAndIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrderByMarketAndIdResponse)
    MergeFrom(*source);
  }
}

void OrderByMarketAndIdResponse::MergeFrom(const OrderByMarketAndIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrderByMarketAndIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::vega::Order::MergeFrom(from._internal_order());
  }
}

void OrderByMarketAndIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrderByMarketAndIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByMarketAndIdResponse::CopyFrom(const OrderByMarketAndIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrderByMarketAndIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByMarketAndIdResponse::IsInitialized() const {
  return true;
}

void OrderByMarketAndIdResponse::InternalSwap(OrderByMarketAndIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderByMarketAndIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderByReferenceRequest::_Internal {
 public:
};

OrderByReferenceRequest::OrderByReferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.OrderByReferenceRequest)
}
OrderByReferenceRequest::OrderByReferenceRequest(const OrderByReferenceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.OrderByReferenceRequest)
}

void OrderByReferenceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderByReferenceRequest_api_2ftrading_2eproto.base);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OrderByReferenceRequest::~OrderByReferenceRequest() {
  // @@protoc_insertion_point(destructor:api.OrderByReferenceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderByReferenceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderByReferenceRequest::ArenaDtor(void* object) {
  OrderByReferenceRequest* _this = reinterpret_cast< OrderByReferenceRequest* >(object);
  (void)_this;
}
void OrderByReferenceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderByReferenceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByReferenceRequest& OrderByReferenceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderByReferenceRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByReferenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrderByReferenceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderByReferenceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reference = 1 [json_name = "reference", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.OrderByReferenceRequest.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderByReferenceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrderByReferenceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference = 1 [json_name = "reference", (.validator.field) = {
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.OrderByReferenceRequest.reference");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrderByReferenceRequest)
  return target;
}

size_t OrderByReferenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrderByReferenceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference = 1 [json_name = "reference", (.validator.field) = {
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByReferenceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrderByReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByReferenceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderByReferenceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrderByReferenceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrderByReferenceRequest)
    MergeFrom(*source);
  }
}

void OrderByReferenceRequest::MergeFrom(const OrderByReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrderByReferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
}

void OrderByReferenceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrderByReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByReferenceRequest::CopyFrom(const OrderByReferenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrderByReferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByReferenceRequest::IsInitialized() const {
  return true;
}

void OrderByReferenceRequest::InternalSwap(OrderByReferenceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderByReferenceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderByReferenceResponse::_Internal {
 public:
  static const ::vega::Order& order(const OrderByReferenceResponse* msg);
};

const ::vega::Order&
OrderByReferenceResponse::_Internal::order(const OrderByReferenceResponse* msg) {
  return *msg->order_;
}
void OrderByReferenceResponse::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
OrderByReferenceResponse::OrderByReferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.OrderByReferenceResponse)
}
OrderByReferenceResponse::OrderByReferenceResponse(const OrderByReferenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.OrderByReferenceResponse)
}

void OrderByReferenceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderByReferenceResponse_api_2ftrading_2eproto.base);
  order_ = nullptr;
}

OrderByReferenceResponse::~OrderByReferenceResponse() {
  // @@protoc_insertion_point(destructor:api.OrderByReferenceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderByReferenceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_;
}

void OrderByReferenceResponse::ArenaDtor(void* object) {
  OrderByReferenceResponse* _this = reinterpret_cast< OrderByReferenceResponse* >(object);
  (void)_this;
}
void OrderByReferenceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderByReferenceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByReferenceResponse& OrderByReferenceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderByReferenceResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByReferenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrderByReferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderByReferenceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1 [json_name = "order"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderByReferenceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrderByReferenceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrderByReferenceResponse)
  return target;
}

size_t OrderByReferenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrderByReferenceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByReferenceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrderByReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByReferenceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderByReferenceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrderByReferenceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrderByReferenceResponse)
    MergeFrom(*source);
  }
}

void OrderByReferenceResponse::MergeFrom(const OrderByReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrderByReferenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::vega::Order::MergeFrom(from._internal_order());
  }
}

void OrderByReferenceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrderByReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByReferenceResponse::CopyFrom(const OrderByReferenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrderByReferenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByReferenceResponse::IsInitialized() const {
  return true;
}

void OrderByReferenceResponse::InternalSwap(OrderByReferenceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderByReferenceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketsResponse::_Internal {
 public:
};

void MarketsResponse::clear_markets() {
  markets_.Clear();
}
MarketsResponse::MarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  markets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarketsResponse)
}
MarketsResponse::MarketsResponse(const MarketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      markets_(from.markets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.MarketsResponse)
}

void MarketsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketsResponse_api_2ftrading_2eproto.base);
}

MarketsResponse::~MarketsResponse() {
  // @@protoc_insertion_point(destructor:api.MarketsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketsResponse::ArenaDtor(void* object) {
  MarketsResponse* _this = reinterpret_cast< MarketsResponse* >(object);
  (void)_this;
}
void MarketsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketsResponse& MarketsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Market markets = 1 [json_name = "markets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Market markets = 1 [json_name = "markets"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_markets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_markets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketsResponse)
  return target;
}

size_t MarketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Market markets = 1 [json_name = "markets"];
  total_size += 1UL * this->_internal_markets_size();
  for (const auto& msg : this->markets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketsResponse)
    MergeFrom(*source);
  }
}

void MarketsResponse::MergeFrom(const MarketsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markets_.MergeFrom(from.markets_);
}

void MarketsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketsResponse::CopyFrom(const MarketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketsResponse::IsInitialized() const {
  return true;
}

void MarketsResponse::InternalSwap(MarketsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  markets_.InternalSwap(&other->markets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CandlesRequest::_Internal {
 public:
};

CandlesRequest::CandlesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.CandlesRequest)
}
CandlesRequest::CandlesRequest(const CandlesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  ::memcpy(&sincetimestamp_, &from.sincetimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&sincetimestamp_)) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:api.CandlesRequest)
}

void CandlesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CandlesRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sincetimestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&sincetimestamp_)) + sizeof(interval_));
}

CandlesRequest::~CandlesRequest() {
  // @@protoc_insertion_point(destructor:api.CandlesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CandlesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CandlesRequest::ArenaDtor(void* object) {
  CandlesRequest* _this = reinterpret_cast< CandlesRequest* >(object);
  (void)_this;
}
void CandlesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandlesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CandlesRequest& CandlesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CandlesRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void CandlesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.CandlesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  ::memset(&sincetimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&sincetimestamp_)) + sizeof(interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandlesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.CandlesRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sinceTimestamp = 2 [json_name = "sinceTimestamp", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sincetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Interval interval = 3 [json_name = "interval"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interval(static_cast<::vega::Interval>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandlesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.CandlesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.CandlesRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // int64 sinceTimestamp = 2 [json_name = "sinceTimestamp", (.validator.field) = {
  if (this->sincetimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_sincetimestamp(), target);
  }

  // .vega.Interval interval = 3 [json_name = "interval"];
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.CandlesRequest)
  return target;
}

size_t CandlesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.CandlesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // int64 sinceTimestamp = 2 [json_name = "sinceTimestamp", (.validator.field) = {
  if (this->sincetimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sincetimestamp());
  }

  // .vega.Interval interval = 3 [json_name = "interval"];
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandlesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.CandlesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CandlesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CandlesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.CandlesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.CandlesRequest)
    MergeFrom(*source);
  }
}

void CandlesRequest::MergeFrom(const CandlesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.CandlesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.sincetimestamp() != 0) {
    _internal_set_sincetimestamp(from._internal_sincetimestamp());
  }
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
}

void CandlesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.CandlesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandlesRequest::CopyFrom(const CandlesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.CandlesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandlesRequest::IsInitialized() const {
  return true;
}

void CandlesRequest::InternalSwap(CandlesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CandlesRequest, interval_)
      + sizeof(CandlesRequest::interval_)
      - PROTOBUF_FIELD_OFFSET(CandlesRequest, sincetimestamp_)>(
          reinterpret_cast<char*>(&sincetimestamp_),
          reinterpret_cast<char*>(&other->sincetimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CandlesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CandlesResponse::_Internal {
 public:
};

void CandlesResponse::clear_candles() {
  candles_.Clear();
}
CandlesResponse::CandlesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  candles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.CandlesResponse)
}
CandlesResponse::CandlesResponse(const CandlesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      candles_(from.candles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.CandlesResponse)
}

void CandlesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CandlesResponse_api_2ftrading_2eproto.base);
}

CandlesResponse::~CandlesResponse() {
  // @@protoc_insertion_point(destructor:api.CandlesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CandlesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CandlesResponse::ArenaDtor(void* object) {
  CandlesResponse* _this = reinterpret_cast< CandlesResponse* >(object);
  (void)_this;
}
void CandlesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandlesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CandlesResponse& CandlesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CandlesResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void CandlesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.CandlesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandlesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Candle candles = 1 [json_name = "candles"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandlesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.CandlesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Candle candles = 1 [json_name = "candles"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_candles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.CandlesResponse)
  return target;
}

size_t CandlesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.CandlesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Candle candles = 1 [json_name = "candles"];
  total_size += 1UL * this->_internal_candles_size();
  for (const auto& msg : this->candles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandlesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.CandlesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CandlesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CandlesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.CandlesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.CandlesResponse)
    MergeFrom(*source);
  }
}

void CandlesResponse::MergeFrom(const CandlesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.CandlesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candles_.MergeFrom(from.candles_);
}

void CandlesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.CandlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandlesResponse::CopyFrom(const CandlesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.CandlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandlesResponse::IsInitialized() const {
  return true;
}

void CandlesResponse::InternalSwap(CandlesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  candles_.InternalSwap(&other->candles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CandlesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDepthRequest::_Internal {
 public:
};

MarketDepthRequest::MarketDepthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarketDepthRequest)
}
MarketDepthRequest::MarketDepthRequest(const MarketDepthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  maxdepth_ = from.maxdepth_;
  // @@protoc_insertion_point(copy_constructor:api.MarketDepthRequest)
}

void MarketDepthRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDepthRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxdepth_ = PROTOBUF_ULONGLONG(0);
}

MarketDepthRequest::~MarketDepthRequest() {
  // @@protoc_insertion_point(destructor:api.MarketDepthRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDepthRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthRequest::ArenaDtor(void* object) {
  MarketDepthRequest* _this = reinterpret_cast< MarketDepthRequest* >(object);
  (void)_this;
}
void MarketDepthRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDepthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthRequest& MarketDepthRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDepthRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketDepthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  maxdepth_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.MarketDepthRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 maxDepth = 2 [json_name = "maxDepth"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxdepth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDepthRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketDepthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.MarketDepthRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // uint64 maxDepth = 2 [json_name = "maxDepth"];
  if (this->maxdepth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_maxdepth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketDepthRequest)
  return target;
}

size_t MarketDepthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketDepthRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // uint64 maxDepth = 2 [json_name = "maxDepth"];
  if (this->maxdepth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_maxdepth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketDepthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDepthRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketDepthRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketDepthRequest)
    MergeFrom(*source);
  }
}

void MarketDepthRequest::MergeFrom(const MarketDepthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketDepthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.maxdepth() != 0) {
    _internal_set_maxdepth(from._internal_maxdepth());
  }
}

void MarketDepthRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketDepthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthRequest::CopyFrom(const MarketDepthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketDepthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthRequest::IsInitialized() const {
  return true;
}

void MarketDepthRequest::InternalSwap(MarketDepthRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(maxdepth_, other->maxdepth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDepthResponse::_Internal {
 public:
  static const ::vega::Trade& lasttrade(const MarketDepthResponse* msg);
};

const ::vega::Trade&
MarketDepthResponse::_Internal::lasttrade(const MarketDepthResponse* msg) {
  return *msg->lasttrade_;
}
void MarketDepthResponse::clear_buy() {
  buy_.Clear();
}
void MarketDepthResponse::clear_sell() {
  sell_.Clear();
}
void MarketDepthResponse::clear_lasttrade() {
  if (GetArena() == nullptr && lasttrade_ != nullptr) {
    delete lasttrade_;
  }
  lasttrade_ = nullptr;
}
MarketDepthResponse::MarketDepthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buy_(arena),
  sell_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarketDepthResponse)
}
MarketDepthResponse::MarketDepthResponse(const MarketDepthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buy_(from.buy_),
      sell_(from.sell_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  if (from._internal_has_lasttrade()) {
    lasttrade_ = new ::vega::Trade(*from.lasttrade_);
  } else {
    lasttrade_ = nullptr;
  }
  sequencenumber_ = from.sequencenumber_;
  // @@protoc_insertion_point(copy_constructor:api.MarketDepthResponse)
}

void MarketDepthResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDepthResponse_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lasttrade_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sequencenumber_) -
      reinterpret_cast<char*>(&lasttrade_)) + sizeof(sequencenumber_));
}

MarketDepthResponse::~MarketDepthResponse() {
  // @@protoc_insertion_point(destructor:api.MarketDepthResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDepthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lasttrade_;
}

void MarketDepthResponse::ArenaDtor(void* object) {
  MarketDepthResponse* _this = reinterpret_cast< MarketDepthResponse* >(object);
  (void)_this;
}
void MarketDepthResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDepthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthResponse& MarketDepthResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDepthResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketDepthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_.Clear();
  sell_.Clear();
  marketid_.ClearToEmpty();
  if (GetArena() == nullptr && lasttrade_ != nullptr) {
    delete lasttrade_;
  }
  lasttrade_ = nullptr;
  sequencenumber_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.MarketDepthResponse.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .vega.Trade lastTrade = 4 [json_name = "lastTrade"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lasttrade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sequenceNumber = 5 [json_name = "sequenceNumber"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sequencenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDepthResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketDepthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.MarketDepthResponse.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_buy(i), target, stream);
  }

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sell_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sell(i), target, stream);
  }

  // .vega.Trade lastTrade = 4 [json_name = "lastTrade"];
  if (this->has_lasttrade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lasttrade(this), target, stream);
  }

  // uint64 sequenceNumber = 5 [json_name = "sequenceNumber"];
  if (this->sequencenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_sequencenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketDepthResponse)
  return target;
}

size_t MarketDepthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketDepthResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  total_size += 1UL * this->_internal_buy_size();
  for (const auto& msg : this->buy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  total_size += 1UL * this->_internal_sell_size();
  for (const auto& msg : this->sell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // .vega.Trade lastTrade = 4 [json_name = "lastTrade"];
  if (this->has_lasttrade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lasttrade_);
  }

  // uint64 sequenceNumber = 5 [json_name = "sequenceNumber"];
  if (this->sequencenumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequencenumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketDepthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDepthResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketDepthResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketDepthResponse)
    MergeFrom(*source);
  }
}

void MarketDepthResponse::MergeFrom(const MarketDepthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketDepthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_.MergeFrom(from.buy_);
  sell_.MergeFrom(from.sell_);
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.has_lasttrade()) {
    _internal_mutable_lasttrade()->::vega::Trade::MergeFrom(from._internal_lasttrade());
  }
  if (from.sequencenumber() != 0) {
    _internal_set_sequencenumber(from._internal_sequencenumber());
  }
}

void MarketDepthResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketDepthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthResponse::CopyFrom(const MarketDepthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketDepthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthResponse::IsInitialized() const {
  return true;
}

void MarketDepthResponse::InternalSwap(MarketDepthResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buy_.InternalSwap(&other->buy_);
  sell_.InternalSwap(&other->sell_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDepthResponse, sequencenumber_)
      + sizeof(MarketDepthResponse::sequencenumber_)
      - PROTOBUF_FIELD_OFFSET(MarketDepthResponse, lasttrade_)>(
          reinterpret_cast<char*>(&lasttrade_),
          reinterpret_cast<char*>(&other->lasttrade_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesByMarketRequest::_Internal {
 public:
  static const ::api::Pagination& pagination(const TradesByMarketRequest* msg);
};

const ::api::Pagination&
TradesByMarketRequest::_Internal::pagination(const TradesByMarketRequest* msg) {
  return *msg->pagination_;
}
TradesByMarketRequest::TradesByMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.TradesByMarketRequest)
}
TradesByMarketRequest::TradesByMarketRequest(const TradesByMarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.TradesByMarketRequest)
}

void TradesByMarketRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesByMarketRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pagination_ = nullptr;
}

TradesByMarketRequest::~TradesByMarketRequest() {
  // @@protoc_insertion_point(destructor:api.TradesByMarketRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesByMarketRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void TradesByMarketRequest::ArenaDtor(void* object) {
  TradesByMarketRequest* _this = reinterpret_cast< TradesByMarketRequest* >(object);
  (void)_this;
}
void TradesByMarketRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesByMarketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByMarketRequest& TradesByMarketRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesByMarketRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesByMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesByMarketRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.TradesByMarketRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.Pagination pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesByMarketRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesByMarketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.TradesByMarketRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // .api.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesByMarketRequest)
  return target;
}

size_t TradesByMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesByMarketRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // .api.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByMarketRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesByMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByMarketRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesByMarketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesByMarketRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesByMarketRequest)
    MergeFrom(*source);
  }
}

void TradesByMarketRequest::MergeFrom(const TradesByMarketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesByMarketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void TradesByMarketRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesByMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByMarketRequest::CopyFrom(const TradesByMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesByMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByMarketRequest::IsInitialized() const {
  return true;
}

void TradesByMarketRequest::InternalSwap(TradesByMarketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesByMarketRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesByMarketResponse::_Internal {
 public:
};

void TradesByMarketResponse::clear_trades() {
  trades_.Clear();
}
TradesByMarketResponse::TradesByMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trades_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.TradesByMarketResponse)
}
TradesByMarketResponse::TradesByMarketResponse(const TradesByMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.TradesByMarketResponse)
}

void TradesByMarketResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesByMarketResponse_api_2ftrading_2eproto.base);
}

TradesByMarketResponse::~TradesByMarketResponse() {
  // @@protoc_insertion_point(destructor:api.TradesByMarketResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesByMarketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TradesByMarketResponse::ArenaDtor(void* object) {
  TradesByMarketResponse* _this = reinterpret_cast< TradesByMarketResponse* >(object);
  (void)_this;
}
void TradesByMarketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesByMarketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesByMarketResponse& TradesByMarketResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesByMarketResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesByMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesByMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesByMarketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Trade trades = 1 [json_name = "trades"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesByMarketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesByMarketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trades(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesByMarketResponse)
  return target;
}

size_t TradesByMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesByMarketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesByMarketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesByMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesByMarketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesByMarketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesByMarketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesByMarketResponse)
    MergeFrom(*source);
  }
}

void TradesByMarketResponse::MergeFrom(const TradesByMarketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesByMarketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradesByMarketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesByMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesByMarketResponse::CopyFrom(const TradesByMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesByMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesByMarketResponse::IsInitialized() const {
  return true;
}

void TradesByMarketResponse::InternalSwap(TradesByMarketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trades_.InternalSwap(&other->trades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesByMarketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionsByPartyRequest::_Internal {
 public:
};

PositionsByPartyRequest::PositionsByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PositionsByPartyRequest)
}
PositionsByPartyRequest::PositionsByPartyRequest(const PositionsByPartyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.PositionsByPartyRequest)
}

void PositionsByPartyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionsByPartyRequest_api_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PositionsByPartyRequest::~PositionsByPartyRequest() {
  // @@protoc_insertion_point(destructor:api.PositionsByPartyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionsByPartyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PositionsByPartyRequest::ArenaDtor(void* object) {
  PositionsByPartyRequest* _this = reinterpret_cast< PositionsByPartyRequest* >(object);
  (void)_this;
}
void PositionsByPartyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionsByPartyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionsByPartyRequest& PositionsByPartyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionsByPartyRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PositionsByPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PositionsByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  marketid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsByPartyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.PositionsByPartyRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketID = 2 [json_name = "marketID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.PositionsByPartyRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionsByPartyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PositionsByPartyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.PositionsByPartyRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.PositionsByPartyRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_marketid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PositionsByPartyRequest)
  return target;
}

size_t PositionsByPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PositionsByPartyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionsByPartyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PositionsByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionsByPartyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionsByPartyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PositionsByPartyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PositionsByPartyRequest)
    MergeFrom(*source);
  }
}

void PositionsByPartyRequest::MergeFrom(const PositionsByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PositionsByPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
}

void PositionsByPartyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PositionsByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionsByPartyRequest::CopyFrom(const PositionsByPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PositionsByPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsByPartyRequest::IsInitialized() const {
  return true;
}

void PositionsByPartyRequest::InternalSwap(PositionsByPartyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsByPartyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionsByPartyResponse::_Internal {
 public:
};

void PositionsByPartyResponse::clear_positions() {
  positions_.Clear();
}
PositionsByPartyResponse::PositionsByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  positions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PositionsByPartyResponse)
}
PositionsByPartyResponse::PositionsByPartyResponse(const PositionsByPartyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.PositionsByPartyResponse)
}

void PositionsByPartyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionsByPartyResponse_api_2ftrading_2eproto.base);
}

PositionsByPartyResponse::~PositionsByPartyResponse() {
  // @@protoc_insertion_point(destructor:api.PositionsByPartyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionsByPartyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PositionsByPartyResponse::ArenaDtor(void* object) {
  PositionsByPartyResponse* _this = reinterpret_cast< PositionsByPartyResponse* >(object);
  (void)_this;
}
void PositionsByPartyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionsByPartyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionsByPartyResponse& PositionsByPartyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionsByPartyResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PositionsByPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PositionsByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsByPartyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Position positions = 1 [json_name = "positions"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionsByPartyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PositionsByPartyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Position positions = 1 [json_name = "positions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_positions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_positions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PositionsByPartyResponse)
  return target;
}

size_t PositionsByPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PositionsByPartyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Position positions = 1 [json_name = "positions"];
  total_size += 1UL * this->_internal_positions_size();
  for (const auto& msg : this->positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionsByPartyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PositionsByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionsByPartyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionsByPartyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PositionsByPartyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PositionsByPartyResponse)
    MergeFrom(*source);
  }
}

void PositionsByPartyResponse::MergeFrom(const PositionsByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PositionsByPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
}

void PositionsByPartyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PositionsByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionsByPartyResponse::CopyFrom(const PositionsByPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PositionsByPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsByPartyResponse::IsInitialized() const {
  return true;
}

void PositionsByPartyResponse::InternalSwap(PositionsByPartyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  positions_.InternalSwap(&other->positions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsByPartyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VegaTimeResponse::_Internal {
 public:
};

VegaTimeResponse::VegaTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.VegaTimeResponse)
}
VegaTimeResponse::VegaTimeResponse(const VegaTimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:api.VegaTimeResponse)
}

void VegaTimeResponse::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

VegaTimeResponse::~VegaTimeResponse() {
  // @@protoc_insertion_point(destructor:api.VegaTimeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VegaTimeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VegaTimeResponse::ArenaDtor(void* object) {
  VegaTimeResponse* _this = reinterpret_cast< VegaTimeResponse* >(object);
  (void)_this;
}
void VegaTimeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VegaTimeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VegaTimeResponse& VegaTimeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VegaTimeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void VegaTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.VegaTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VegaTimeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1 [json_name = "timestamp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VegaTimeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.VegaTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.VegaTimeResponse)
  return target;
}

size_t VegaTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.VegaTimeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VegaTimeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.VegaTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VegaTimeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VegaTimeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.VegaTimeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.VegaTimeResponse)
    MergeFrom(*source);
  }
}

void VegaTimeResponse::MergeFrom(const VegaTimeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.VegaTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void VegaTimeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.VegaTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VegaTimeResponse::CopyFrom(const VegaTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.VegaTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VegaTimeResponse::IsInitialized() const {
  return true;
}

void VegaTimeResponse::InternalSwap(VegaTimeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VegaTimeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Pagination::_Internal {
 public:
};

Pagination::Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.Pagination)
}
Pagination::Pagination(const Pagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&skip_, &from.skip_,
    static_cast<size_t>(reinterpret_cast<char*>(&descending_) -
    reinterpret_cast<char*>(&skip_)) + sizeof(descending_));
  // @@protoc_insertion_point(copy_constructor:api.Pagination)
}

void Pagination::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&skip_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&descending_) -
      reinterpret_cast<char*>(&skip_)) + sizeof(descending_));
}

Pagination::~Pagination() {
  // @@protoc_insertion_point(destructor:api.Pagination)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pagination::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pagination::ArenaDtor(void* object) {
  Pagination* _this = reinterpret_cast< Pagination* >(object);
  (void)_this;
}
void Pagination::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pagination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pagination& Pagination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pagination_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void Pagination::Clear() {
// @@protoc_insertion_point(message_clear_start:api.Pagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&skip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&descending_) -
      reinterpret_cast<char*>(&skip_)) + sizeof(descending_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pagination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 skip = 1 [json_name = "skip"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 limit = 2 [json_name = "limit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool descending = 3 [json_name = "descending"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          descending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pagination::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.Pagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 skip = 1 [json_name = "skip"];
  if (this->skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_skip(), target);
  }

  // uint64 limit = 2 [json_name = "limit"];
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_limit(), target);
  }

  // bool descending = 3 [json_name = "descending"];
  if (this->descending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_descending(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.Pagination)
  return target;
}

size_t Pagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.Pagination)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 skip = 1 [json_name = "skip"];
  if (this->skip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_skip());
  }

  // uint64 limit = 2 [json_name = "limit"];
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_limit());
  }

  // bool descending = 3 [json_name = "descending"];
  if (this->descending() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pagination::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.Pagination)
  GOOGLE_DCHECK_NE(&from, this);
  const Pagination* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pagination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.Pagination)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.Pagination)
    MergeFrom(*source);
  }
}

void Pagination::MergeFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.Pagination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skip() != 0) {
    _internal_set_skip(from._internal_skip());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.descending() != 0) {
    _internal_set_descending(from._internal_descending());
  }
}

void Pagination::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pagination::CopyFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pagination::IsInitialized() const {
  return true;
}

void Pagination::InternalSwap(Pagination* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pagination, descending_)
      + sizeof(Pagination::descending_)
      - PROTOBUF_FIELD_OFFSET(Pagination, skip_)>(
          reinterpret_cast<char*>(&skip_),
          reinterpret_cast<char*>(&other->skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pagination::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrdersStream::_Internal {
 public:
};

void OrdersStream::clear_orders() {
  orders_.Clear();
}
OrdersStream::OrdersStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.OrdersStream)
}
OrdersStream::OrdersStream(const OrdersStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.OrdersStream)
}

void OrdersStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrdersStream_api_2ftrading_2eproto.base);
}

OrdersStream::~OrdersStream() {
  // @@protoc_insertion_point(destructor:api.OrdersStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrdersStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrdersStream::ArenaDtor(void* object) {
  OrdersStream* _this = reinterpret_cast< OrdersStream* >(object);
  (void)_this;
}
void OrdersStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrdersStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersStream& OrdersStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrdersStream_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrdersStream::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrdersStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Order orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrdersStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrdersStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrdersStream)
  return target;
}

size_t OrdersStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrdersStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrdersStream)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrdersStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrdersStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrdersStream)
    MergeFrom(*source);
  }
}

void OrdersStream::MergeFrom(const OrdersStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrdersStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void OrdersStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrdersStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersStream::CopyFrom(const OrdersStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrdersStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersStream::IsInitialized() const {
  return true;
}

void OrdersStream::InternalSwap(OrdersStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradesStream::_Internal {
 public:
};

void TradesStream::clear_trades() {
  trades_.Clear();
}
TradesStream::TradesStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trades_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.TradesStream)
}
TradesStream::TradesStream(const TradesStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.TradesStream)
}

void TradesStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradesStream_api_2ftrading_2eproto.base);
}

TradesStream::~TradesStream() {
  // @@protoc_insertion_point(destructor:api.TradesStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradesStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TradesStream::ArenaDtor(void* object) {
  TradesStream* _this = reinterpret_cast< TradesStream* >(object);
  (void)_this;
}
void TradesStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradesStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradesStream& TradesStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradesStream_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void TradesStream::Clear() {
// @@protoc_insertion_point(message_clear_start:api.TradesStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Trade trades = 1 [json_name = "trades"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradesStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.TradesStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trades(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.TradesStream)
  return target;
}

size_t TradesStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.TradesStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.TradesStream)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradesStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.TradesStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.TradesStream)
    MergeFrom(*source);
  }
}

void TradesStream::MergeFrom(const TradesStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.TradesStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradesStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.TradesStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesStream::CopyFrom(const TradesStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.TradesStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesStream::IsInitialized() const {
  return true;
}

void TradesStream::InternalSwap(TradesStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trades_.InternalSwap(&other->trades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyAccountsRequest::_Internal {
 public:
};

PartyAccountsRequest::PartyAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PartyAccountsRequest)
}
PartyAccountsRequest::PartyAccountsRequest(const PartyAccountsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:api.PartyAccountsRequest)
}

void PartyAccountsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyAccountsRequest_api_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

PartyAccountsRequest::~PartyAccountsRequest() {
  // @@protoc_insertion_point(destructor:api.PartyAccountsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyAccountsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyAccountsRequest::ArenaDtor(void* object) {
  PartyAccountsRequest* _this = reinterpret_cast< PartyAccountsRequest* >(object);
  (void)_this;
}
void PartyAccountsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyAccountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyAccountsRequest& PartyAccountsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyAccountsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartyAccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PartyAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  marketid_.ClearToEmpty();
  asset_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyAccountsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.PartyAccountsRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketID = 2 [json_name = "marketID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.PartyAccountsRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.AccountType type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::AccountType>(val));
        } else goto handle_unusual;
        continue;
      // string asset = 4 [json_name = "asset"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.PartyAccountsRequest.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyAccountsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PartyAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.PartyAccountsRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.PartyAccountsRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_marketid(), target);
  }

  // .vega.AccountType type = 3 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.PartyAccountsRequest.asset");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_asset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PartyAccountsRequest)
  return target;
}

size_t PartyAccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PartyAccountsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // .vega.AccountType type = 3 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyAccountsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PartyAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyAccountsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyAccountsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PartyAccountsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PartyAccountsRequest)
    MergeFrom(*source);
  }
}

void PartyAccountsRequest::MergeFrom(const PartyAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PartyAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PartyAccountsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PartyAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyAccountsRequest::CopyFrom(const PartyAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PartyAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyAccountsRequest::IsInitialized() const {
  return true;
}

void PartyAccountsRequest::InternalSwap(PartyAccountsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyAccountsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PartyAccountsResponse::_Internal {
 public:
};

void PartyAccountsResponse::clear_accounts() {
  accounts_.Clear();
}
PartyAccountsResponse::PartyAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PartyAccountsResponse)
}
PartyAccountsResponse::PartyAccountsResponse(const PartyAccountsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.PartyAccountsResponse)
}

void PartyAccountsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyAccountsResponse_api_2ftrading_2eproto.base);
}

PartyAccountsResponse::~PartyAccountsResponse() {
  // @@protoc_insertion_point(destructor:api.PartyAccountsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyAccountsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PartyAccountsResponse::ArenaDtor(void* object) {
  PartyAccountsResponse* _this = reinterpret_cast< PartyAccountsResponse* >(object);
  (void)_this;
}
void PartyAccountsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyAccountsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyAccountsResponse& PartyAccountsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyAccountsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PartyAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PartyAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyAccountsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Account accounts = 1 [json_name = "accounts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyAccountsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PartyAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PartyAccountsResponse)
  return target;
}

size_t PartyAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PartyAccountsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyAccountsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PartyAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyAccountsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyAccountsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PartyAccountsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PartyAccountsResponse)
    MergeFrom(*source);
  }
}

void PartyAccountsResponse::MergeFrom(const PartyAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PartyAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void PartyAccountsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PartyAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyAccountsResponse::CopyFrom(const PartyAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PartyAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyAccountsResponse::IsInitialized() const {
  return true;
}

void PartyAccountsResponse::InternalSwap(PartyAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyAccountsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketAccountsRequest::_Internal {
 public:
};

MarketAccountsRequest::MarketAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarketAccountsRequest)
}
MarketAccountsRequest::MarketAccountsRequest(const MarketAccountsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.MarketAccountsRequest)
}

void MarketAccountsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketAccountsRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MarketAccountsRequest::~MarketAccountsRequest() {
  // @@protoc_insertion_point(destructor:api.MarketAccountsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketAccountsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketAccountsRequest::ArenaDtor(void* object) {
  MarketAccountsRequest* _this = reinterpret_cast< MarketAccountsRequest* >(object);
  (void)_this;
}
void MarketAccountsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketAccountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketAccountsRequest& MarketAccountsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketAccountsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketAccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  asset_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketAccountsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.MarketAccountsRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 2 [json_name = "asset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.MarketAccountsRequest.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketAccountsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.MarketAccountsRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // string asset = 2 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.MarketAccountsRequest.asset");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_asset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketAccountsRequest)
  return target;
}

size_t MarketAccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketAccountsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // string asset = 2 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketAccountsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketAccountsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketAccountsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketAccountsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketAccountsRequest)
    MergeFrom(*source);
  }
}

void MarketAccountsRequest::MergeFrom(const MarketAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
}

void MarketAccountsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketAccountsRequest::CopyFrom(const MarketAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketAccountsRequest::IsInitialized() const {
  return true;
}

void MarketAccountsRequest::InternalSwap(MarketAccountsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketAccountsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketAccountsResponse::_Internal {
 public:
};

void MarketAccountsResponse::clear_accounts() {
  accounts_.Clear();
}
MarketAccountsResponse::MarketAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.MarketAccountsResponse)
}
MarketAccountsResponse::MarketAccountsResponse(const MarketAccountsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.MarketAccountsResponse)
}

void MarketAccountsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketAccountsResponse_api_2ftrading_2eproto.base);
}

MarketAccountsResponse::~MarketAccountsResponse() {
  // @@protoc_insertion_point(destructor:api.MarketAccountsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketAccountsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MarketAccountsResponse::ArenaDtor(void* object) {
  MarketAccountsResponse* _this = reinterpret_cast< MarketAccountsResponse* >(object);
  (void)_this;
}
void MarketAccountsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketAccountsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketAccountsResponse& MarketAccountsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketAccountsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void MarketAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.MarketAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketAccountsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Account accounts = 1 [json_name = "accounts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketAccountsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.MarketAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.MarketAccountsResponse)
  return target;
}

size_t MarketAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.MarketAccountsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketAccountsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.MarketAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketAccountsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketAccountsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.MarketAccountsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.MarketAccountsResponse)
    MergeFrom(*source);
  }
}

void MarketAccountsResponse::MergeFrom(const MarketAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.MarketAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void MarketAccountsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.MarketAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketAccountsResponse::CopyFrom(const MarketAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.MarketAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketAccountsResponse::IsInitialized() const {
  return true;
}

void MarketAccountsResponse::InternalSwap(MarketAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketAccountsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FeeInfrastructureAccountsRequest::_Internal {
 public:
};

FeeInfrastructureAccountsRequest::FeeInfrastructureAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.FeeInfrastructureAccountsRequest)
}
FeeInfrastructureAccountsRequest::FeeInfrastructureAccountsRequest(const FeeInfrastructureAccountsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.FeeInfrastructureAccountsRequest)
}

void FeeInfrastructureAccountsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeeInfrastructureAccountsRequest_api_2ftrading_2eproto.base);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FeeInfrastructureAccountsRequest::~FeeInfrastructureAccountsRequest() {
  // @@protoc_insertion_point(destructor:api.FeeInfrastructureAccountsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeeInfrastructureAccountsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FeeInfrastructureAccountsRequest::ArenaDtor(void* object) {
  FeeInfrastructureAccountsRequest* _this = reinterpret_cast< FeeInfrastructureAccountsRequest* >(object);
  (void)_this;
}
void FeeInfrastructureAccountsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeeInfrastructureAccountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeeInfrastructureAccountsRequest& FeeInfrastructureAccountsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeeInfrastructureAccountsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void FeeInfrastructureAccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.FeeInfrastructureAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeeInfrastructureAccountsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset = 1 [json_name = "asset"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.FeeInfrastructureAccountsRequest.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeeInfrastructureAccountsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.FeeInfrastructureAccountsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset = 1 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.FeeInfrastructureAccountsRequest.asset");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.FeeInfrastructureAccountsRequest)
  return target;
}

size_t FeeInfrastructureAccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.FeeInfrastructureAccountsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset = 1 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeeInfrastructureAccountsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.FeeInfrastructureAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FeeInfrastructureAccountsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeeInfrastructureAccountsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.FeeInfrastructureAccountsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.FeeInfrastructureAccountsRequest)
    MergeFrom(*source);
  }
}

void FeeInfrastructureAccountsRequest::MergeFrom(const FeeInfrastructureAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.FeeInfrastructureAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
}

void FeeInfrastructureAccountsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.FeeInfrastructureAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeeInfrastructureAccountsRequest::CopyFrom(const FeeInfrastructureAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.FeeInfrastructureAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeInfrastructureAccountsRequest::IsInitialized() const {
  return true;
}

void FeeInfrastructureAccountsRequest::InternalSwap(FeeInfrastructureAccountsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FeeInfrastructureAccountsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FeeInfrastructureAccountsResponse::_Internal {
 public:
};

void FeeInfrastructureAccountsResponse::clear_accounts() {
  accounts_.Clear();
}
FeeInfrastructureAccountsResponse::FeeInfrastructureAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.FeeInfrastructureAccountsResponse)
}
FeeInfrastructureAccountsResponse::FeeInfrastructureAccountsResponse(const FeeInfrastructureAccountsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.FeeInfrastructureAccountsResponse)
}

void FeeInfrastructureAccountsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeeInfrastructureAccountsResponse_api_2ftrading_2eproto.base);
}

FeeInfrastructureAccountsResponse::~FeeInfrastructureAccountsResponse() {
  // @@protoc_insertion_point(destructor:api.FeeInfrastructureAccountsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeeInfrastructureAccountsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FeeInfrastructureAccountsResponse::ArenaDtor(void* object) {
  FeeInfrastructureAccountsResponse* _this = reinterpret_cast< FeeInfrastructureAccountsResponse* >(object);
  (void)_this;
}
void FeeInfrastructureAccountsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeeInfrastructureAccountsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeeInfrastructureAccountsResponse& FeeInfrastructureAccountsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeeInfrastructureAccountsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void FeeInfrastructureAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.FeeInfrastructureAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeeInfrastructureAccountsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Account accounts = 1 [json_name = "accounts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeeInfrastructureAccountsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.FeeInfrastructureAccountsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.FeeInfrastructureAccountsResponse)
  return target;
}

size_t FeeInfrastructureAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.FeeInfrastructureAccountsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeeInfrastructureAccountsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.FeeInfrastructureAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FeeInfrastructureAccountsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeeInfrastructureAccountsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.FeeInfrastructureAccountsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.FeeInfrastructureAccountsResponse)
    MergeFrom(*source);
  }
}

void FeeInfrastructureAccountsResponse::MergeFrom(const FeeInfrastructureAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.FeeInfrastructureAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void FeeInfrastructureAccountsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.FeeInfrastructureAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeeInfrastructureAccountsResponse::CopyFrom(const FeeInfrastructureAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.FeeInfrastructureAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeInfrastructureAccountsResponse::IsInitialized() const {
  return true;
}

void FeeInfrastructureAccountsResponse::InternalSwap(FeeInfrastructureAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeeInfrastructureAccountsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareProposalRequest::_Internal {
 public:
  static const ::vega::ProposalTerms& proposal(const PrepareProposalRequest* msg);
};

const ::vega::ProposalTerms&
PrepareProposalRequest::_Internal::proposal(const PrepareProposalRequest* msg) {
  return *msg->proposal_;
}
void PrepareProposalRequest::clear_proposal() {
  if (GetArena() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
}
PrepareProposalRequest::PrepareProposalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PrepareProposalRequest)
}
PrepareProposalRequest::PrepareProposalRequest(const PrepareProposalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(), 
      GetArena());
  }
  if (from._internal_has_proposal()) {
    proposal_ = new ::vega::ProposalTerms(*from.proposal_);
  } else {
    proposal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareProposalRequest)
}

void PrepareProposalRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareProposalRequest_api_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposal_ = nullptr;
}

PrepareProposalRequest::~PrepareProposalRequest() {
  // @@protoc_insertion_point(destructor:api.PrepareProposalRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareProposalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proposal_;
}

void PrepareProposalRequest::ArenaDtor(void* object) {
  PrepareProposalRequest* _this = reinterpret_cast< PrepareProposalRequest* >(object);
  (void)_this;
}
void PrepareProposalRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareProposalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareProposalRequest& PrepareProposalRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareProposalRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareProposalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareProposalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  reference_.ClearToEmpty();
  if (GetArena() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareProposalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.PrepareProposalRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 2 [json_name = "reference"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.PrepareProposalRequest.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ProposalTerms proposal = 3 [json_name = "proposal", (.validator.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareProposalRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareProposalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.PrepareProposalRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  // string reference = 2 [json_name = "reference"];
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.PrepareProposalRequest.reference");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reference(), target);
  }

  // .vega.ProposalTerms proposal = 3 [json_name = "proposal", (.validator.field) = {
  if (this->has_proposal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::proposal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareProposalRequest)
  return target;
}

size_t PrepareProposalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareProposalRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string reference = 2 [json_name = "reference"];
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // .vega.ProposalTerms proposal = 3 [json_name = "proposal", (.validator.field) = {
  if (this->has_proposal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proposal_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareProposalRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareProposalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareProposalRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareProposalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareProposalRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareProposalRequest)
    MergeFrom(*source);
  }
}

void PrepareProposalRequest::MergeFrom(const PrepareProposalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareProposalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
  if (from.has_proposal()) {
    _internal_mutable_proposal()->::vega::ProposalTerms::MergeFrom(from._internal_proposal());
  }
}

void PrepareProposalRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareProposalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareProposalRequest::CopyFrom(const PrepareProposalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareProposalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareProposalRequest::IsInitialized() const {
  return true;
}

void PrepareProposalRequest::InternalSwap(PrepareProposalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(proposal_, other->proposal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareProposalRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareProposalResponse::_Internal {
 public:
  static const ::vega::Proposal& pendingproposal(const PrepareProposalResponse* msg);
};

const ::vega::Proposal&
PrepareProposalResponse::_Internal::pendingproposal(const PrepareProposalResponse* msg) {
  return *msg->pendingproposal_;
}
void PrepareProposalResponse::clear_pendingproposal() {
  if (GetArena() == nullptr && pendingproposal_ != nullptr) {
    delete pendingproposal_;
  }
  pendingproposal_ = nullptr;
}
PrepareProposalResponse::PrepareProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PrepareProposalResponse)
}
PrepareProposalResponse::PrepareProposalResponse(const PrepareProposalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(), 
      GetArena());
  }
  if (from._internal_has_pendingproposal()) {
    pendingproposal_ = new ::vega::Proposal(*from.pendingproposal_);
  } else {
    pendingproposal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareProposalResponse)
}

void PrepareProposalResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareProposalResponse_api_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pendingproposal_ = nullptr;
}

PrepareProposalResponse::~PrepareProposalResponse() {
  // @@protoc_insertion_point(destructor:api.PrepareProposalResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareProposalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pendingproposal_;
}

void PrepareProposalResponse::ArenaDtor(void* object) {
  PrepareProposalResponse* _this = reinterpret_cast< PrepareProposalResponse* >(object);
  (void)_this;
}
void PrepareProposalResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareProposalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareProposalResponse& PrepareProposalResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareProposalResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareProposalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareProposalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  if (GetArena() == nullptr && pendingproposal_ != nullptr) {
    delete pendingproposal_;
  }
  pendingproposal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareProposalResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes blob = 1 [json_name = "blob"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Proposal pendingProposal = 2 [json_name = "pendingProposal"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pendingproposal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareProposalResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareProposalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  // .vega.Proposal pendingProposal = 2 [json_name = "pendingProposal"];
  if (this->has_pendingproposal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pendingproposal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareProposalResponse)
  return target;
}

size_t PrepareProposalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareProposalResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  // .vega.Proposal pendingProposal = 2 [json_name = "pendingProposal"];
  if (this->has_pendingproposal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pendingproposal_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareProposalResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareProposalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareProposalResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareProposalResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareProposalResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareProposalResponse)
    MergeFrom(*source);
  }
}

void PrepareProposalResponse::MergeFrom(const PrepareProposalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareProposalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {
    _internal_set_blob(from._internal_blob());
  }
  if (from.has_pendingproposal()) {
    _internal_mutable_pendingproposal()->::vega::Proposal::MergeFrom(from._internal_pendingproposal());
  }
}

void PrepareProposalResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareProposalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareProposalResponse::CopyFrom(const PrepareProposalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareProposalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareProposalResponse::IsInitialized() const {
  return true;
}

void PrepareProposalResponse::InternalSwap(PrepareProposalResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pendingproposal_, other->pendingproposal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareProposalResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareVoteRequest::_Internal {
 public:
  static const ::vega::Vote& vote(const PrepareVoteRequest* msg);
};

const ::vega::Vote&
PrepareVoteRequest::_Internal::vote(const PrepareVoteRequest* msg) {
  return *msg->vote_;
}
void PrepareVoteRequest::clear_vote() {
  if (GetArena() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
}
PrepareVoteRequest::PrepareVoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PrepareVoteRequest)
}
PrepareVoteRequest::PrepareVoteRequest(const PrepareVoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vote()) {
    vote_ = new ::vega::Vote(*from.vote_);
  } else {
    vote_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareVoteRequest)
}

void PrepareVoteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareVoteRequest_api_2ftrading_2eproto.base);
  vote_ = nullptr;
}

PrepareVoteRequest::~PrepareVoteRequest() {
  // @@protoc_insertion_point(destructor:api.PrepareVoteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareVoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vote_;
}

void PrepareVoteRequest::ArenaDtor(void* object) {
  PrepareVoteRequest* _this = reinterpret_cast< PrepareVoteRequest* >(object);
  (void)_this;
}
void PrepareVoteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareVoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareVoteRequest& PrepareVoteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareVoteRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareVoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareVoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareVoteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Vote vote = 1 [json_name = "vote", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareVoteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareVoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Vote vote = 1 [json_name = "vote", (.validator.field) = {
  if (this->has_vote()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vote(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareVoteRequest)
  return target;
}

size_t PrepareVoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareVoteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Vote vote = 1 [json_name = "vote", (.validator.field) = {
  if (this->has_vote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vote_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareVoteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareVoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareVoteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareVoteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareVoteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareVoteRequest)
    MergeFrom(*source);
  }
}

void PrepareVoteRequest::MergeFrom(const PrepareVoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareVoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vote()) {
    _internal_mutable_vote()->::vega::Vote::MergeFrom(from._internal_vote());
  }
}

void PrepareVoteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareVoteRequest::CopyFrom(const PrepareVoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareVoteRequest::IsInitialized() const {
  return true;
}

void PrepareVoteRequest::InternalSwap(PrepareVoteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(vote_, other->vote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareVoteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareVoteResponse::_Internal {
 public:
  static const ::vega::Vote& vote(const PrepareVoteResponse* msg);
};

const ::vega::Vote&
PrepareVoteResponse::_Internal::vote(const PrepareVoteResponse* msg) {
  return *msg->vote_;
}
void PrepareVoteResponse::clear_vote() {
  if (GetArena() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
}
PrepareVoteResponse::PrepareVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PrepareVoteResponse)
}
PrepareVoteResponse::PrepareVoteResponse(const PrepareVoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(), 
      GetArena());
  }
  if (from._internal_has_vote()) {
    vote_ = new ::vega::Vote(*from.vote_);
  } else {
    vote_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareVoteResponse)
}

void PrepareVoteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareVoteResponse_api_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_ = nullptr;
}

PrepareVoteResponse::~PrepareVoteResponse() {
  // @@protoc_insertion_point(destructor:api.PrepareVoteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareVoteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vote_;
}

void PrepareVoteResponse::ArenaDtor(void* object) {
  PrepareVoteResponse* _this = reinterpret_cast< PrepareVoteResponse* >(object);
  (void)_this;
}
void PrepareVoteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareVoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareVoteResponse& PrepareVoteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareVoteResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareVoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareVoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  if (GetArena() == nullptr && vote_ != nullptr) {
    delete vote_;
  }
  vote_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareVoteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes blob = 1 [json_name = "blob"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Vote vote = 2 [json_name = "vote"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareVoteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareVoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  // .vega.Vote vote = 2 [json_name = "vote"];
  if (this->has_vote()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vote(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareVoteResponse)
  return target;
}

size_t PrepareVoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareVoteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  // .vega.Vote vote = 2 [json_name = "vote"];
  if (this->has_vote()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vote_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareVoteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareVoteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareVoteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareVoteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareVoteResponse)
    MergeFrom(*source);
  }
}

void PrepareVoteResponse::MergeFrom(const PrepareVoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {
    _internal_set_blob(from._internal_blob());
  }
  if (from.has_vote()) {
    _internal_mutable_vote()->::vega::Vote::MergeFrom(from._internal_vote());
  }
}

void PrepareVoteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareVoteResponse::CopyFrom(const PrepareVoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareVoteResponse::IsInitialized() const {
  return true;
}

void PrepareVoteResponse::InternalSwap(PrepareVoteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(vote_, other->vote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareVoteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareLiquidityProvisionRequest::_Internal {
 public:
  static const ::vega::LiquidityProvisionSubmission& submission(const PrepareLiquidityProvisionRequest* msg);
};

const ::vega::LiquidityProvisionSubmission&
PrepareLiquidityProvisionRequest::_Internal::submission(const PrepareLiquidityProvisionRequest* msg) {
  return *msg->submission_;
}
void PrepareLiquidityProvisionRequest::clear_submission() {
  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
}
PrepareLiquidityProvisionRequest::PrepareLiquidityProvisionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PrepareLiquidityProvisionRequest)
}
PrepareLiquidityProvisionRequest::PrepareLiquidityProvisionRequest(const PrepareLiquidityProvisionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_submission()) {
    submission_ = new ::vega::LiquidityProvisionSubmission(*from.submission_);
  } else {
    submission_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareLiquidityProvisionRequest)
}

void PrepareLiquidityProvisionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareLiquidityProvisionRequest_api_2ftrading_2eproto.base);
  submission_ = nullptr;
}

PrepareLiquidityProvisionRequest::~PrepareLiquidityProvisionRequest() {
  // @@protoc_insertion_point(destructor:api.PrepareLiquidityProvisionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareLiquidityProvisionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete submission_;
}

void PrepareLiquidityProvisionRequest::ArenaDtor(void* object) {
  PrepareLiquidityProvisionRequest* _this = reinterpret_cast< PrepareLiquidityProvisionRequest* >(object);
  (void)_this;
}
void PrepareLiquidityProvisionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareLiquidityProvisionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareLiquidityProvisionRequest& PrepareLiquidityProvisionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareLiquidityProvisionRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareLiquidityProvisionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareLiquidityProvisionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && submission_ != nullptr) {
    delete submission_;
  }
  submission_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareLiquidityProvisionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.LiquidityProvisionSubmission submission = 1 [json_name = "submission", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_submission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareLiquidityProvisionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareLiquidityProvisionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.LiquidityProvisionSubmission submission = 1 [json_name = "submission", (.validator.field) = {
  if (this->has_submission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::submission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareLiquidityProvisionRequest)
  return target;
}

size_t PrepareLiquidityProvisionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareLiquidityProvisionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.LiquidityProvisionSubmission submission = 1 [json_name = "submission", (.validator.field) = {
  if (this->has_submission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submission_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareLiquidityProvisionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareLiquidityProvisionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareLiquidityProvisionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareLiquidityProvisionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareLiquidityProvisionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareLiquidityProvisionRequest)
    MergeFrom(*source);
  }
}

void PrepareLiquidityProvisionRequest::MergeFrom(const PrepareLiquidityProvisionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareLiquidityProvisionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submission()) {
    _internal_mutable_submission()->::vega::LiquidityProvisionSubmission::MergeFrom(from._internal_submission());
  }
}

void PrepareLiquidityProvisionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareLiquidityProvisionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareLiquidityProvisionRequest::CopyFrom(const PrepareLiquidityProvisionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareLiquidityProvisionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareLiquidityProvisionRequest::IsInitialized() const {
  return true;
}

void PrepareLiquidityProvisionRequest::InternalSwap(PrepareLiquidityProvisionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(submission_, other->submission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareLiquidityProvisionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrepareLiquidityProvisionResponse::_Internal {
 public:
};

PrepareLiquidityProvisionResponse::PrepareLiquidityProvisionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.PrepareLiquidityProvisionResponse)
}
PrepareLiquidityProvisionResponse::PrepareLiquidityProvisionResponse(const PrepareLiquidityProvisionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.PrepareLiquidityProvisionResponse)
}

void PrepareLiquidityProvisionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareLiquidityProvisionResponse_api_2ftrading_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrepareLiquidityProvisionResponse::~PrepareLiquidityProvisionResponse() {
  // @@protoc_insertion_point(destructor:api.PrepareLiquidityProvisionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareLiquidityProvisionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrepareLiquidityProvisionResponse::ArenaDtor(void* object) {
  PrepareLiquidityProvisionResponse* _this = reinterpret_cast< PrepareLiquidityProvisionResponse* >(object);
  (void)_this;
}
void PrepareLiquidityProvisionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareLiquidityProvisionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareLiquidityProvisionResponse& PrepareLiquidityProvisionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareLiquidityProvisionResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void PrepareLiquidityProvisionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.PrepareLiquidityProvisionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareLiquidityProvisionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes blob = 1 [json_name = "blob"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareLiquidityProvisionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.PrepareLiquidityProvisionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.PrepareLiquidityProvisionResponse)
  return target;
}

size_t PrepareLiquidityProvisionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.PrepareLiquidityProvisionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1 [json_name = "blob"];
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareLiquidityProvisionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.PrepareLiquidityProvisionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareLiquidityProvisionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareLiquidityProvisionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.PrepareLiquidityProvisionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.PrepareLiquidityProvisionResponse)
    MergeFrom(*source);
  }
}

void PrepareLiquidityProvisionResponse::MergeFrom(const PrepareLiquidityProvisionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.PrepareLiquidityProvisionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {
    _internal_set_blob(from._internal_blob());
  }
}

void PrepareLiquidityProvisionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.PrepareLiquidityProvisionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareLiquidityProvisionResponse::CopyFrom(const PrepareLiquidityProvisionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.PrepareLiquidityProvisionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareLiquidityProvisionResponse::IsInitialized() const {
  return true;
}

void PrepareLiquidityProvisionResponse::InternalSwap(PrepareLiquidityProvisionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareLiquidityProvisionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderByIDRequest::_Internal {
 public:
};

OrderByIDRequest::OrderByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.OrderByIDRequest)
}
OrderByIDRequest::OrderByIDRequest(const OrderByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_orderid(), 
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:api.OrderByIDRequest)
}

void OrderByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderByIDRequest_api_2ftrading_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = PROTOBUF_ULONGLONG(0);
}

OrderByIDRequest::~OrderByIDRequest() {
  // @@protoc_insertion_point(destructor:api.OrderByIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderByIDRequest::ArenaDtor(void* object) {
  OrderByIDRequest* _this = reinterpret_cast< OrderByIDRequest* >(object);
  (void)_this;
}
void OrderByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderByIDRequest& OrderByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderByIDRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrderByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmpty();
  version_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderID = 1 [json_name = "orderID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.OrderByIDRequest.orderID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 version = 2 [json_name = "version"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrderByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1 [json_name = "orderID", (.validator.field) = {
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.OrderByIDRequest.orderID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  // uint64 version = 2 [json_name = "version"];
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrderByIDRequest)
  return target;
}

size_t OrderByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrderByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderID = 1 [json_name = "orderID", (.validator.field) = {
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // uint64 version = 2 [json_name = "version"];
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrderByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrderByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrderByIDRequest)
    MergeFrom(*source);
  }
}

void OrderByIDRequest::MergeFrom(const OrderByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrderByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void OrderByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrderByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderByIDRequest::CopyFrom(const OrderByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrderByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderByIDRequest::IsInitialized() const {
  return true;
}

void OrderByIDRequest::InternalSwap(OrderByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderVersionsByIDRequest::_Internal {
 public:
  static const ::api::Pagination& pagination(const OrderVersionsByIDRequest* msg);
};

const ::api::Pagination&
OrderVersionsByIDRequest::_Internal::pagination(const OrderVersionsByIDRequest* msg) {
  return *msg->pagination_;
}
OrderVersionsByIDRequest::OrderVersionsByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.OrderVersionsByIDRequest)
}
OrderVersionsByIDRequest::OrderVersionsByIDRequest(const OrderVersionsByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_orderid(), 
      GetArena());
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::api::Pagination(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.OrderVersionsByIDRequest)
}

void OrderVersionsByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderVersionsByIDRequest_api_2ftrading_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pagination_ = nullptr;
}

OrderVersionsByIDRequest::~OrderVersionsByIDRequest() {
  // @@protoc_insertion_point(destructor:api.OrderVersionsByIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderVersionsByIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_;
}

void OrderVersionsByIDRequest::ArenaDtor(void* object) {
  OrderVersionsByIDRequest* _this = reinterpret_cast< OrderVersionsByIDRequest* >(object);
  (void)_this;
}
void OrderVersionsByIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderVersionsByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderVersionsByIDRequest& OrderVersionsByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderVersionsByIDRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderVersionsByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrderVersionsByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmpty();
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderVersionsByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderID = 1 [json_name = "orderID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.OrderVersionsByIDRequest.orderID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.Pagination pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderVersionsByIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrderVersionsByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1 [json_name = "orderID", (.validator.field) = {
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.OrderVersionsByIDRequest.orderID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  // .api.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pagination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrderVersionsByIDRequest)
  return target;
}

size_t OrderVersionsByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrderVersionsByIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderID = 1 [json_name = "orderID", (.validator.field) = {
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // .api.Pagination pagination = 2 [json_name = "pagination"];
  if (this->has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderVersionsByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrderVersionsByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderVersionsByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderVersionsByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrderVersionsByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrderVersionsByIDRequest)
    MergeFrom(*source);
  }
}

void OrderVersionsByIDRequest::MergeFrom(const OrderVersionsByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrderVersionsByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from.has_pagination()) {
    _internal_mutable_pagination()->::api::Pagination::MergeFrom(from._internal_pagination());
  }
}

void OrderVersionsByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrderVersionsByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderVersionsByIDRequest::CopyFrom(const OrderVersionsByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrderVersionsByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderVersionsByIDRequest::IsInitialized() const {
  return true;
}

void OrderVersionsByIDRequest::InternalSwap(OrderVersionsByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pagination_, other->pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderVersionsByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderVersionsResponse::_Internal {
 public:
};

void OrderVersionsResponse::clear_orders() {
  orders_.Clear();
}
OrderVersionsResponse::OrderVersionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.OrderVersionsResponse)
}
OrderVersionsResponse::OrderVersionsResponse(const OrderVersionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.OrderVersionsResponse)
}

void OrderVersionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderVersionsResponse_api_2ftrading_2eproto.base);
}

OrderVersionsResponse::~OrderVersionsResponse() {
  // @@protoc_insertion_point(destructor:api.OrderVersionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderVersionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrderVersionsResponse::ArenaDtor(void* object) {
  OrderVersionsResponse* _this = reinterpret_cast< OrderVersionsResponse* >(object);
  (void)_this;
}
void OrderVersionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderVersionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderVersionsResponse& OrderVersionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderVersionsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void OrderVersionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.OrderVersionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderVersionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Order orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderVersionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.OrderVersionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.OrderVersionsResponse)
  return target;
}

size_t OrderVersionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.OrderVersionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Order orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderVersionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.OrderVersionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderVersionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderVersionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.OrderVersionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.OrderVersionsResponse)
    MergeFrom(*source);
  }
}

void OrderVersionsResponse::MergeFrom(const OrderVersionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.OrderVersionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void OrderVersionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.OrderVersionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderVersionsResponse::CopyFrom(const OrderVersionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.OrderVersionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderVersionsResponse::IsInitialized() const {
  return true;
}

void OrderVersionsResponse::InternalSwap(OrderVersionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderVersionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EstimateFeeRequest::_Internal {
 public:
  static const ::vega::Order& order(const EstimateFeeRequest* msg);
};

const ::vega::Order&
EstimateFeeRequest::_Internal::order(const EstimateFeeRequest* msg) {
  return *msg->order_;
}
void EstimateFeeRequest::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
EstimateFeeRequest::EstimateFeeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.EstimateFeeRequest)
}
EstimateFeeRequest::EstimateFeeRequest(const EstimateFeeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.EstimateFeeRequest)
}

void EstimateFeeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EstimateFeeRequest_api_2ftrading_2eproto.base);
  order_ = nullptr;
}

EstimateFeeRequest::~EstimateFeeRequest() {
  // @@protoc_insertion_point(destructor:api.EstimateFeeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EstimateFeeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_;
}

void EstimateFeeRequest::ArenaDtor(void* object) {
  EstimateFeeRequest* _this = reinterpret_cast< EstimateFeeRequest* >(object);
  (void)_this;
}
void EstimateFeeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateFeeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstimateFeeRequest& EstimateFeeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstimateFeeRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void EstimateFeeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.EstimateFeeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateFeeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1 [json_name = "order"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateFeeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.EstimateFeeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.EstimateFeeRequest)
  return target;
}

size_t EstimateFeeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.EstimateFeeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstimateFeeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.EstimateFeeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EstimateFeeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstimateFeeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.EstimateFeeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.EstimateFeeRequest)
    MergeFrom(*source);
  }
}

void EstimateFeeRequest::MergeFrom(const EstimateFeeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.EstimateFeeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::vega::Order::MergeFrom(from._internal_order());
  }
}

void EstimateFeeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.EstimateFeeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstimateFeeRequest::CopyFrom(const EstimateFeeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.EstimateFeeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateFeeRequest::IsInitialized() const {
  return true;
}

void EstimateFeeRequest::InternalSwap(EstimateFeeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateFeeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EstimateFeeResponse::_Internal {
 public:
  static const ::vega::Fee& fee(const EstimateFeeResponse* msg);
};

const ::vega::Fee&
EstimateFeeResponse::_Internal::fee(const EstimateFeeResponse* msg) {
  return *msg->fee_;
}
void EstimateFeeResponse::clear_fee() {
  if (GetArena() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
}
EstimateFeeResponse::EstimateFeeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.EstimateFeeResponse)
}
EstimateFeeResponse::EstimateFeeResponse(const EstimateFeeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fee()) {
    fee_ = new ::vega::Fee(*from.fee_);
  } else {
    fee_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.EstimateFeeResponse)
}

void EstimateFeeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EstimateFeeResponse_api_2ftrading_2eproto.base);
  fee_ = nullptr;
}

EstimateFeeResponse::~EstimateFeeResponse() {
  // @@protoc_insertion_point(destructor:api.EstimateFeeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EstimateFeeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fee_;
}

void EstimateFeeResponse::ArenaDtor(void* object) {
  EstimateFeeResponse* _this = reinterpret_cast< EstimateFeeResponse* >(object);
  (void)_this;
}
void EstimateFeeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateFeeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstimateFeeResponse& EstimateFeeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstimateFeeResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void EstimateFeeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.EstimateFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateFeeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Fee fee = 2 [json_name = "fee"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateFeeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.EstimateFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Fee fee = 2 [json_name = "fee"];
  if (this->has_fee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fee(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.EstimateFeeResponse)
  return target;
}

size_t EstimateFeeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.EstimateFeeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Fee fee = 2 [json_name = "fee"];
  if (this->has_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fee_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstimateFeeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.EstimateFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EstimateFeeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstimateFeeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.EstimateFeeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.EstimateFeeResponse)
    MergeFrom(*source);
  }
}

void EstimateFeeResponse::MergeFrom(const EstimateFeeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.EstimateFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fee()) {
    _internal_mutable_fee()->::vega::Fee::MergeFrom(from._internal_fee());
  }
}

void EstimateFeeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.EstimateFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstimateFeeResponse::CopyFrom(const EstimateFeeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.EstimateFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateFeeResponse::IsInitialized() const {
  return true;
}

void EstimateFeeResponse::InternalSwap(EstimateFeeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(fee_, other->fee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateFeeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EstimateMarginRequest::_Internal {
 public:
  static const ::vega::Order& order(const EstimateMarginRequest* msg);
};

const ::vega::Order&
EstimateMarginRequest::_Internal::order(const EstimateMarginRequest* msg) {
  return *msg->order_;
}
void EstimateMarginRequest::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
EstimateMarginRequest::EstimateMarginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.EstimateMarginRequest)
}
EstimateMarginRequest::EstimateMarginRequest(const EstimateMarginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.EstimateMarginRequest)
}

void EstimateMarginRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EstimateMarginRequest_api_2ftrading_2eproto.base);
  order_ = nullptr;
}

EstimateMarginRequest::~EstimateMarginRequest() {
  // @@protoc_insertion_point(destructor:api.EstimateMarginRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EstimateMarginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_;
}

void EstimateMarginRequest::ArenaDtor(void* object) {
  EstimateMarginRequest* _this = reinterpret_cast< EstimateMarginRequest* >(object);
  (void)_this;
}
void EstimateMarginRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateMarginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstimateMarginRequest& EstimateMarginRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstimateMarginRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void EstimateMarginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.EstimateMarginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateMarginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1 [json_name = "order"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateMarginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.EstimateMarginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.EstimateMarginRequest)
  return target;
}

size_t EstimateMarginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.EstimateMarginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstimateMarginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.EstimateMarginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EstimateMarginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstimateMarginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.EstimateMarginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.EstimateMarginRequest)
    MergeFrom(*source);
  }
}

void EstimateMarginRequest::MergeFrom(const EstimateMarginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.EstimateMarginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::vega::Order::MergeFrom(from._internal_order());
  }
}

void EstimateMarginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.EstimateMarginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstimateMarginRequest::CopyFrom(const EstimateMarginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.EstimateMarginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateMarginRequest::IsInitialized() const {
  return true;
}

void EstimateMarginRequest::InternalSwap(EstimateMarginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateMarginRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EstimateMarginResponse::_Internal {
 public:
  static const ::vega::MarginLevels& marginlevels(const EstimateMarginResponse* msg);
};

const ::vega::MarginLevels&
EstimateMarginResponse::_Internal::marginlevels(const EstimateMarginResponse* msg) {
  return *msg->marginlevels_;
}
void EstimateMarginResponse::clear_marginlevels() {
  if (GetArena() == nullptr && marginlevels_ != nullptr) {
    delete marginlevels_;
  }
  marginlevels_ = nullptr;
}
EstimateMarginResponse::EstimateMarginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.EstimateMarginResponse)
}
EstimateMarginResponse::EstimateMarginResponse(const EstimateMarginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_marginlevels()) {
    marginlevels_ = new ::vega::MarginLevels(*from.marginlevels_);
  } else {
    marginlevels_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.EstimateMarginResponse)
}

void EstimateMarginResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EstimateMarginResponse_api_2ftrading_2eproto.base);
  marginlevels_ = nullptr;
}

EstimateMarginResponse::~EstimateMarginResponse() {
  // @@protoc_insertion_point(destructor:api.EstimateMarginResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EstimateMarginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete marginlevels_;
}

void EstimateMarginResponse::ArenaDtor(void* object) {
  EstimateMarginResponse* _this = reinterpret_cast< EstimateMarginResponse* >(object);
  (void)_this;
}
void EstimateMarginResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateMarginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstimateMarginResponse& EstimateMarginResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstimateMarginResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void EstimateMarginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.EstimateMarginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && marginlevels_ != nullptr) {
    delete marginlevels_;
  }
  marginlevels_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateMarginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.MarginLevels marginLevels = 2 [json_name = "marginLevels"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_marginlevels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateMarginResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.EstimateMarginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.MarginLevels marginLevels = 2 [json_name = "marginLevels"];
  if (this->has_marginlevels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::marginlevels(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.EstimateMarginResponse)
  return target;
}

size_t EstimateMarginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.EstimateMarginResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.MarginLevels marginLevels = 2 [json_name = "marginLevels"];
  if (this->has_marginlevels()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *marginlevels_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstimateMarginResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.EstimateMarginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EstimateMarginResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstimateMarginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.EstimateMarginResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.EstimateMarginResponse)
    MergeFrom(*source);
  }
}

void EstimateMarginResponse::MergeFrom(const EstimateMarginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.EstimateMarginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_marginlevels()) {
    _internal_mutable_marginlevels()->::vega::MarginLevels::MergeFrom(from._internal_marginlevels());
  }
}

void EstimateMarginResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.EstimateMarginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstimateMarginResponse::CopyFrom(const EstimateMarginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.EstimateMarginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateMarginResponse::IsInitialized() const {
  return true;
}

void EstimateMarginResponse::InternalSwap(EstimateMarginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(marginlevels_, other->marginlevels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateMarginResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObserveEventsRequest::_Internal {
 public:
};

ObserveEventsRequest::ObserveEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.ObserveEventsRequest)
}
ObserveEventsRequest::ObserveEventsRequest(const ObserveEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      type_(from.type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  batchsize_ = from.batchsize_;
  // @@protoc_insertion_point(copy_constructor:api.ObserveEventsRequest)
}

void ObserveEventsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObserveEventsRequest_api_2ftrading_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batchsize_ = PROTOBUF_LONGLONG(0);
}

ObserveEventsRequest::~ObserveEventsRequest() {
  // @@protoc_insertion_point(destructor:api.ObserveEventsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObserveEventsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObserveEventsRequest::ArenaDtor(void* object) {
  ObserveEventsRequest* _this = reinterpret_cast< ObserveEventsRequest* >(object);
  (void)_this;
}
void ObserveEventsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObserveEventsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObserveEventsRequest& ObserveEventsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObserveEventsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObserveEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ObserveEventsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.Clear();
  marketid_.ClearToEmpty();
  partyid_.ClearToEmpty();
  batchsize_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObserveEventsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.BusEventType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_type(static_cast<::vega::BusEventType>(val));
        } else goto handle_unusual;
        continue;
      // string marketID = 2 [json_name = "marketID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.ObserveEventsRequest.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partyID = 3 [json_name = "partyID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.ObserveEventsRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 batchSize = 4 [json_name = "batchSize"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          batchsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObserveEventsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ObserveEventsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.BusEventType type = 1 [json_name = "type"];
  {
    int byte_size = _type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, type_, byte_size, target);
    }
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ObserveEventsRequest.marketID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_marketid(), target);
  }

  // string partyID = 3 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ObserveEventsRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_partyid(), target);
  }

  // int64 batchSize = 4 [json_name = "batchSize"];
  if (this->batchsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_batchsize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ObserveEventsRequest)
  return target;
}

size_t ObserveEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ObserveEventsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.BusEventType type = 1 [json_name = "type"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // string partyID = 3 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // int64 batchSize = 4 [json_name = "batchSize"];
  if (this->batchsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_batchsize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObserveEventsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ObserveEventsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ObserveEventsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObserveEventsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ObserveEventsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ObserveEventsRequest)
    MergeFrom(*source);
  }
}

void ObserveEventsRequest::MergeFrom(const ObserveEventsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ObserveEventsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_.MergeFrom(from.type_);
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.batchsize() != 0) {
    _internal_set_batchsize(from._internal_batchsize());
  }
}

void ObserveEventsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ObserveEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObserveEventsRequest::CopyFrom(const ObserveEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ObserveEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObserveEventsRequest::IsInitialized() const {
  return true;
}

void ObserveEventsRequest::InternalSwap(ObserveEventsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.InternalSwap(&other->type_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(batchsize_, other->batchsize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObserveEventsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObserveEventsResponse::_Internal {
 public:
};

void ObserveEventsResponse::clear_events() {
  events_.Clear();
}
ObserveEventsResponse::ObserveEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.ObserveEventsResponse)
}
ObserveEventsResponse::ObserveEventsResponse(const ObserveEventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.ObserveEventsResponse)
}

void ObserveEventsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObserveEventsResponse_api_2ftrading_2eproto.base);
}

ObserveEventsResponse::~ObserveEventsResponse() {
  // @@protoc_insertion_point(destructor:api.ObserveEventsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObserveEventsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObserveEventsResponse::ArenaDtor(void* object) {
  ObserveEventsResponse* _this = reinterpret_cast< ObserveEventsResponse* >(object);
  (void)_this;
}
void ObserveEventsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObserveEventsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObserveEventsResponse& ObserveEventsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObserveEventsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ObserveEventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ObserveEventsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObserveEventsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.BusEvent events = 1 [json_name = "events"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObserveEventsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ObserveEventsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.BusEvent events = 1 [json_name = "events"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ObserveEventsResponse)
  return target;
}

size_t ObserveEventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ObserveEventsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.BusEvent events = 1 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObserveEventsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ObserveEventsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ObserveEventsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObserveEventsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ObserveEventsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ObserveEventsResponse)
    MergeFrom(*source);
  }
}

void ObserveEventsResponse::MergeFrom(const ObserveEventsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ObserveEventsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void ObserveEventsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ObserveEventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObserveEventsResponse::CopyFrom(const ObserveEventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ObserveEventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObserveEventsResponse::IsInitialized() const {
  return true;
}

void ObserveEventsResponse::InternalSwap(ObserveEventsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObserveEventsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawalsRequest::_Internal {
 public:
};

WithdrawalsRequest::WithdrawalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.WithdrawalsRequest)
}
WithdrawalsRequest::WithdrawalsRequest(const WithdrawalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.WithdrawalsRequest)
}

void WithdrawalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawalsRequest_api_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WithdrawalsRequest::~WithdrawalsRequest() {
  // @@protoc_insertion_point(destructor:api.WithdrawalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WithdrawalsRequest::ArenaDtor(void* object) {
  WithdrawalsRequest* _this = reinterpret_cast< WithdrawalsRequest* >(object);
  (void)_this;
}
void WithdrawalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawalsRequest& WithdrawalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawalsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void WithdrawalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.WithdrawalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.WithdrawalsRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.WithdrawalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.WithdrawalsRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.WithdrawalsRequest)
  return target;
}

size_t WithdrawalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.WithdrawalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.WithdrawalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.WithdrawalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.WithdrawalsRequest)
    MergeFrom(*source);
  }
}

void WithdrawalsRequest::MergeFrom(const WithdrawalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.WithdrawalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
}

void WithdrawalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.WithdrawalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawalsRequest::CopyFrom(const WithdrawalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.WithdrawalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawalsRequest::IsInitialized() const {
  return true;
}

void WithdrawalsRequest::InternalSwap(WithdrawalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawalsResponse::_Internal {
 public:
};

void WithdrawalsResponse::clear_withdrawals() {
  withdrawals_.Clear();
}
WithdrawalsResponse::WithdrawalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  withdrawals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.WithdrawalsResponse)
}
WithdrawalsResponse::WithdrawalsResponse(const WithdrawalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      withdrawals_(from.withdrawals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.WithdrawalsResponse)
}

void WithdrawalsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawalsResponse_api_2ftrading_2eproto.base);
}

WithdrawalsResponse::~WithdrawalsResponse() {
  // @@protoc_insertion_point(destructor:api.WithdrawalsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawalsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WithdrawalsResponse::ArenaDtor(void* object) {
  WithdrawalsResponse* _this = reinterpret_cast< WithdrawalsResponse* >(object);
  (void)_this;
}
void WithdrawalsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawalsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawalsResponse& WithdrawalsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawalsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void WithdrawalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.WithdrawalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  withdrawals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawalsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Withdrawal withdrawals = 1 [json_name = "withdrawals"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_withdrawals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawalsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.WithdrawalsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Withdrawal withdrawals = 1 [json_name = "withdrawals"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_withdrawals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_withdrawals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.WithdrawalsResponse)
  return target;
}

size_t WithdrawalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.WithdrawalsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Withdrawal withdrawals = 1 [json_name = "withdrawals"];
  total_size += 1UL * this->_internal_withdrawals_size();
  for (const auto& msg : this->withdrawals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawalsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.WithdrawalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawalsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawalsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.WithdrawalsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.WithdrawalsResponse)
    MergeFrom(*source);
  }
}

void WithdrawalsResponse::MergeFrom(const WithdrawalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.WithdrawalsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  withdrawals_.MergeFrom(from.withdrawals_);
}

void WithdrawalsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.WithdrawalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawalsResponse::CopyFrom(const WithdrawalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.WithdrawalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawalsResponse::IsInitialized() const {
  return true;
}

void WithdrawalsResponse::InternalSwap(WithdrawalsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  withdrawals_.InternalSwap(&other->withdrawals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawalsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawalRequest::_Internal {
 public:
};

WithdrawalRequest::WithdrawalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.WithdrawalRequest)
}
WithdrawalRequest::WithdrawalRequest(const WithdrawalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.WithdrawalRequest)
}

void WithdrawalRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawalRequest_api_2ftrading_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WithdrawalRequest::~WithdrawalRequest() {
  // @@protoc_insertion_point(destructor:api.WithdrawalRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WithdrawalRequest::ArenaDtor(void* object) {
  WithdrawalRequest* _this = reinterpret_cast< WithdrawalRequest* >(object);
  (void)_this;
}
void WithdrawalRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawalRequest& WithdrawalRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawalRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void WithdrawalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.WithdrawalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ID = 1 [json_name = "ID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.WithdrawalRequest.ID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawalRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.WithdrawalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1 [json_name = "ID", (.validator.field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.WithdrawalRequest.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.WithdrawalRequest)
  return target;
}

size_t WithdrawalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.WithdrawalRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1 [json_name = "ID", (.validator.field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawalRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.WithdrawalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawalRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.WithdrawalRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.WithdrawalRequest)
    MergeFrom(*source);
  }
}

void WithdrawalRequest::MergeFrom(const WithdrawalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.WithdrawalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void WithdrawalRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.WithdrawalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawalRequest::CopyFrom(const WithdrawalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.WithdrawalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawalRequest::IsInitialized() const {
  return true;
}

void WithdrawalRequest::InternalSwap(WithdrawalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawalRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawalResponse::_Internal {
 public:
  static const ::vega::Withdrawal& withdrawal(const WithdrawalResponse* msg);
};

const ::vega::Withdrawal&
WithdrawalResponse::_Internal::withdrawal(const WithdrawalResponse* msg) {
  return *msg->withdrawal_;
}
void WithdrawalResponse::clear_withdrawal() {
  if (GetArena() == nullptr && withdrawal_ != nullptr) {
    delete withdrawal_;
  }
  withdrawal_ = nullptr;
}
WithdrawalResponse::WithdrawalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.WithdrawalResponse)
}
WithdrawalResponse::WithdrawalResponse(const WithdrawalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_withdrawal()) {
    withdrawal_ = new ::vega::Withdrawal(*from.withdrawal_);
  } else {
    withdrawal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.WithdrawalResponse)
}

void WithdrawalResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawalResponse_api_2ftrading_2eproto.base);
  withdrawal_ = nullptr;
}

WithdrawalResponse::~WithdrawalResponse() {
  // @@protoc_insertion_point(destructor:api.WithdrawalResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete withdrawal_;
}

void WithdrawalResponse::ArenaDtor(void* object) {
  WithdrawalResponse* _this = reinterpret_cast< WithdrawalResponse* >(object);
  (void)_this;
}
void WithdrawalResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawalResponse& WithdrawalResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawalResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void WithdrawalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.WithdrawalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && withdrawal_ != nullptr) {
    delete withdrawal_;
  }
  withdrawal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawalResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Withdrawal withdrawal = 1 [json_name = "withdrawal"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdrawal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawalResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.WithdrawalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Withdrawal withdrawal = 1 [json_name = "withdrawal"];
  if (this->has_withdrawal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::withdrawal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.WithdrawalResponse)
  return target;
}

size_t WithdrawalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.WithdrawalResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Withdrawal withdrawal = 1 [json_name = "withdrawal"];
  if (this->has_withdrawal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *withdrawal_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawalResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.WithdrawalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawalResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawalResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.WithdrawalResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.WithdrawalResponse)
    MergeFrom(*source);
  }
}

void WithdrawalResponse::MergeFrom(const WithdrawalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.WithdrawalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_withdrawal()) {
    _internal_mutable_withdrawal()->::vega::Withdrawal::MergeFrom(from._internal_withdrawal());
  }
}

void WithdrawalResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.WithdrawalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawalResponse::CopyFrom(const WithdrawalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.WithdrawalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawalResponse::IsInitialized() const {
  return true;
}

void WithdrawalResponse::InternalSwap(WithdrawalResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(withdrawal_, other->withdrawal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawalResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ERC20WithdrawalApprovalRequest::_Internal {
 public:
};

ERC20WithdrawalApprovalRequest::ERC20WithdrawalApprovalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.ERC20WithdrawalApprovalRequest)
}
ERC20WithdrawalApprovalRequest::ERC20WithdrawalApprovalRequest(const ERC20WithdrawalApprovalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  withdrawalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_withdrawalid().empty()) {
    withdrawalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_withdrawalid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.ERC20WithdrawalApprovalRequest)
}

void ERC20WithdrawalApprovalRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ERC20WithdrawalApprovalRequest_api_2ftrading_2eproto.base);
  withdrawalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ERC20WithdrawalApprovalRequest::~ERC20WithdrawalApprovalRequest() {
  // @@protoc_insertion_point(destructor:api.ERC20WithdrawalApprovalRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ERC20WithdrawalApprovalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  withdrawalid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ERC20WithdrawalApprovalRequest::ArenaDtor(void* object) {
  ERC20WithdrawalApprovalRequest* _this = reinterpret_cast< ERC20WithdrawalApprovalRequest* >(object);
  (void)_this;
}
void ERC20WithdrawalApprovalRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ERC20WithdrawalApprovalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ERC20WithdrawalApprovalRequest& ERC20WithdrawalApprovalRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ERC20WithdrawalApprovalRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ERC20WithdrawalApprovalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ERC20WithdrawalApprovalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  withdrawalid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ERC20WithdrawalApprovalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string withdrawalID = 1 [json_name = "withdrawalID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_withdrawalid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.ERC20WithdrawalApprovalRequest.withdrawalID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ERC20WithdrawalApprovalRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ERC20WithdrawalApprovalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string withdrawalID = 1 [json_name = "withdrawalID", (.validator.field) = {
  if (this->withdrawalid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_withdrawalid().data(), static_cast<int>(this->_internal_withdrawalid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ERC20WithdrawalApprovalRequest.withdrawalID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_withdrawalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ERC20WithdrawalApprovalRequest)
  return target;
}

size_t ERC20WithdrawalApprovalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ERC20WithdrawalApprovalRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string withdrawalID = 1 [json_name = "withdrawalID", (.validator.field) = {
  if (this->withdrawalid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_withdrawalid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ERC20WithdrawalApprovalRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ERC20WithdrawalApprovalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ERC20WithdrawalApprovalRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ERC20WithdrawalApprovalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ERC20WithdrawalApprovalRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ERC20WithdrawalApprovalRequest)
    MergeFrom(*source);
  }
}

void ERC20WithdrawalApprovalRequest::MergeFrom(const ERC20WithdrawalApprovalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ERC20WithdrawalApprovalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.withdrawalid().size() > 0) {
    _internal_set_withdrawalid(from._internal_withdrawalid());
  }
}

void ERC20WithdrawalApprovalRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ERC20WithdrawalApprovalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ERC20WithdrawalApprovalRequest::CopyFrom(const ERC20WithdrawalApprovalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ERC20WithdrawalApprovalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ERC20WithdrawalApprovalRequest::IsInitialized() const {
  return true;
}

void ERC20WithdrawalApprovalRequest::InternalSwap(ERC20WithdrawalApprovalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  withdrawalid_.Swap(&other->withdrawalid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ERC20WithdrawalApprovalRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ERC20WithdrawalApprovalResponse::_Internal {
 public:
};

ERC20WithdrawalApprovalResponse::ERC20WithdrawalApprovalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.ERC20WithdrawalApprovalResponse)
}
ERC20WithdrawalApprovalResponse::ERC20WithdrawalApprovalResponse(const ERC20WithdrawalApprovalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  assetsource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetsource().empty()) {
    assetsource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_assetsource(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce(), 
      GetArena());
  }
  signatures_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signatures().empty()) {
    signatures_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signatures(), 
      GetArena());
  }
  expiry_ = from.expiry_;
  // @@protoc_insertion_point(copy_constructor:api.ERC20WithdrawalApprovalResponse)
}

void ERC20WithdrawalApprovalResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ERC20WithdrawalApprovalResponse_api_2ftrading_2eproto.base);
  assetsource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signatures_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiry_ = PROTOBUF_LONGLONG(0);
}

ERC20WithdrawalApprovalResponse::~ERC20WithdrawalApprovalResponse() {
  // @@protoc_insertion_point(destructor:api.ERC20WithdrawalApprovalResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ERC20WithdrawalApprovalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  assetsource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signatures_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ERC20WithdrawalApprovalResponse::ArenaDtor(void* object) {
  ERC20WithdrawalApprovalResponse* _this = reinterpret_cast< ERC20WithdrawalApprovalResponse* >(object);
  (void)_this;
}
void ERC20WithdrawalApprovalResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ERC20WithdrawalApprovalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ERC20WithdrawalApprovalResponse& ERC20WithdrawalApprovalResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ERC20WithdrawalApprovalResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void ERC20WithdrawalApprovalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.ERC20WithdrawalApprovalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assetsource_.ClearToEmpty();
  amount_.ClearToEmpty();
  nonce_.ClearToEmpty();
  signatures_.ClearToEmpty();
  expiry_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ERC20WithdrawalApprovalResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string assetSource = 1 [json_name = "assetSource"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_assetsource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.ERC20WithdrawalApprovalResponse.assetSource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.ERC20WithdrawalApprovalResponse.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiry = 3 [json_name = "expiry"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nonce = 4 [json_name = "nonce"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.ERC20WithdrawalApprovalResponse.nonce"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signatures = 5 [json_name = "signatures"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_signatures();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.ERC20WithdrawalApprovalResponse.signatures"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ERC20WithdrawalApprovalResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.ERC20WithdrawalApprovalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string assetSource = 1 [json_name = "assetSource"];
  if (this->assetsource().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assetsource().data(), static_cast<int>(this->_internal_assetsource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ERC20WithdrawalApprovalResponse.assetSource");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_assetsource(), target);
  }

  // string amount = 2 [json_name = "amount"];
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ERC20WithdrawalApprovalResponse.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  // int64 expiry = 3 [json_name = "expiry"];
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_expiry(), target);
  }

  // string nonce = 4 [json_name = "nonce"];
  if (this->nonce().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ERC20WithdrawalApprovalResponse.nonce");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nonce(), target);
  }

  // string signatures = 5 [json_name = "signatures"];
  if (this->signatures().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signatures().data(), static_cast<int>(this->_internal_signatures().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.ERC20WithdrawalApprovalResponse.signatures");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_signatures(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.ERC20WithdrawalApprovalResponse)
  return target;
}

size_t ERC20WithdrawalApprovalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.ERC20WithdrawalApprovalResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string assetSource = 1 [json_name = "assetSource"];
  if (this->assetsource().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetsource());
  }

  // string amount = 2 [json_name = "amount"];
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string nonce = 4 [json_name = "nonce"];
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  // string signatures = 5 [json_name = "signatures"];
  if (this->signatures().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signatures());
  }

  // int64 expiry = 3 [json_name = "expiry"];
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiry());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ERC20WithdrawalApprovalResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.ERC20WithdrawalApprovalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ERC20WithdrawalApprovalResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ERC20WithdrawalApprovalResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.ERC20WithdrawalApprovalResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.ERC20WithdrawalApprovalResponse)
    MergeFrom(*source);
  }
}

void ERC20WithdrawalApprovalResponse::MergeFrom(const ERC20WithdrawalApprovalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.ERC20WithdrawalApprovalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.assetsource().size() > 0) {
    _internal_set_assetsource(from._internal_assetsource());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.nonce().size() > 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.signatures().size() > 0) {
    _internal_set_signatures(from._internal_signatures());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
}

void ERC20WithdrawalApprovalResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.ERC20WithdrawalApprovalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ERC20WithdrawalApprovalResponse::CopyFrom(const ERC20WithdrawalApprovalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.ERC20WithdrawalApprovalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ERC20WithdrawalApprovalResponse::IsInitialized() const {
  return true;
}

void ERC20WithdrawalApprovalResponse::InternalSwap(ERC20WithdrawalApprovalResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  assetsource_.Swap(&other->assetsource_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nonce_.Swap(&other->nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signatures_.Swap(&other->signatures_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(expiry_, other->expiry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ERC20WithdrawalApprovalResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DepositsRequest::_Internal {
 public:
};

DepositsRequest::DepositsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.DepositsRequest)
}
DepositsRequest::DepositsRequest(const DepositsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.DepositsRequest)
}

void DepositsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepositsRequest_api_2ftrading_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DepositsRequest::~DepositsRequest() {
  // @@protoc_insertion_point(destructor:api.DepositsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepositsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepositsRequest::ArenaDtor(void* object) {
  DepositsRequest* _this = reinterpret_cast< DepositsRequest* >(object);
  (void)_this;
}
void DepositsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepositsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepositsRequest& DepositsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepositsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void DepositsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DepositsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepositsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DepositsRequest.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepositsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DepositsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DepositsRequest.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DepositsRequest)
  return target;
}

size_t DepositsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DepositsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepositsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.DepositsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DepositsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepositsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.DepositsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.DepositsRequest)
    MergeFrom(*source);
  }
}

void DepositsRequest::MergeFrom(const DepositsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.DepositsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
}

void DepositsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.DepositsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositsRequest::CopyFrom(const DepositsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DepositsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositsRequest::IsInitialized() const {
  return true;
}

void DepositsRequest::InternalSwap(DepositsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DepositsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DepositsResponse::_Internal {
 public:
};

void DepositsResponse::clear_deposits() {
  deposits_.Clear();
}
DepositsResponse::DepositsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deposits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.DepositsResponse)
}
DepositsResponse::DepositsResponse(const DepositsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deposits_(from.deposits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.DepositsResponse)
}

void DepositsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepositsResponse_api_2ftrading_2eproto.base);
}

DepositsResponse::~DepositsResponse() {
  // @@protoc_insertion_point(destructor:api.DepositsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepositsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DepositsResponse::ArenaDtor(void* object) {
  DepositsResponse* _this = reinterpret_cast< DepositsResponse* >(object);
  (void)_this;
}
void DepositsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepositsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepositsResponse& DepositsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepositsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void DepositsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DepositsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deposits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepositsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Deposit deposits = 1 [json_name = "deposits"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deposits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepositsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DepositsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Deposit deposits = 1 [json_name = "deposits"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deposits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_deposits(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DepositsResponse)
  return target;
}

size_t DepositsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DepositsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Deposit deposits = 1 [json_name = "deposits"];
  total_size += 1UL * this->_internal_deposits_size();
  for (const auto& msg : this->deposits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepositsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.DepositsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DepositsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepositsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.DepositsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.DepositsResponse)
    MergeFrom(*source);
  }
}

void DepositsResponse::MergeFrom(const DepositsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.DepositsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deposits_.MergeFrom(from.deposits_);
}

void DepositsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.DepositsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositsResponse::CopyFrom(const DepositsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DepositsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositsResponse::IsInitialized() const {
  return true;
}

void DepositsResponse::InternalSwap(DepositsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deposits_.InternalSwap(&other->deposits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DepositsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DepositRequest::_Internal {
 public:
};

DepositRequest::DepositRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.DepositRequest)
}
DepositRequest::DepositRequest(const DepositRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.DepositRequest)
}

void DepositRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepositRequest_api_2ftrading_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DepositRequest::~DepositRequest() {
  // @@protoc_insertion_point(destructor:api.DepositRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepositRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepositRequest::ArenaDtor(void* object) {
  DepositRequest* _this = reinterpret_cast< DepositRequest* >(object);
  (void)_this;
}
void DepositRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepositRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepositRequest& DepositRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepositRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void DepositRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DepositRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepositRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ID = 1 [json_name = "ID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.DepositRequest.ID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepositRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DepositRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1 [json_name = "ID", (.validator.field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.DepositRequest.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DepositRequest)
  return target;
}

size_t DepositRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DepositRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1 [json_name = "ID", (.validator.field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepositRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.DepositRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DepositRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepositRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.DepositRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.DepositRequest)
    MergeFrom(*source);
  }
}

void DepositRequest::MergeFrom(const DepositRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.DepositRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DepositRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.DepositRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositRequest::CopyFrom(const DepositRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DepositRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositRequest::IsInitialized() const {
  return true;
}

void DepositRequest::InternalSwap(DepositRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DepositRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DepositResponse::_Internal {
 public:
  static const ::vega::Deposit& deposit(const DepositResponse* msg);
};

const ::vega::Deposit&
DepositResponse::_Internal::deposit(const DepositResponse* msg) {
  return *msg->deposit_;
}
void DepositResponse::clear_deposit() {
  if (GetArena() == nullptr && deposit_ != nullptr) {
    delete deposit_;
  }
  deposit_ = nullptr;
}
DepositResponse::DepositResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.DepositResponse)
}
DepositResponse::DepositResponse(const DepositResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_deposit()) {
    deposit_ = new ::vega::Deposit(*from.deposit_);
  } else {
    deposit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api.DepositResponse)
}

void DepositResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepositResponse_api_2ftrading_2eproto.base);
  deposit_ = nullptr;
}

DepositResponse::~DepositResponse() {
  // @@protoc_insertion_point(destructor:api.DepositResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepositResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete deposit_;
}

void DepositResponse::ArenaDtor(void* object) {
  DepositResponse* _this = reinterpret_cast< DepositResponse* >(object);
  (void)_this;
}
void DepositResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepositResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepositResponse& DepositResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepositResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void DepositResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.DepositResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && deposit_ != nullptr) {
    delete deposit_;
  }
  deposit_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepositResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Deposit deposit = 1 [json_name = "deposit"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepositResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.DepositResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Deposit deposit = 1 [json_name = "deposit"];
  if (this->has_deposit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::deposit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.DepositResponse)
  return target;
}

size_t DepositResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.DepositResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Deposit deposit = 1 [json_name = "deposit"];
  if (this->has_deposit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deposit_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepositResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.DepositResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DepositResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepositResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.DepositResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.DepositResponse)
    MergeFrom(*source);
  }
}

void DepositResponse::MergeFrom(const DepositResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.DepositResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_deposit()) {
    _internal_mutable_deposit()->::vega::Deposit::MergeFrom(from._internal_deposit());
  }
}

void DepositResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.DepositResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositResponse::CopyFrom(const DepositResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.DepositResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositResponse::IsInitialized() const {
  return true;
}

void DepositResponse::InternalSwap(DepositResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(deposit_, other->deposit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DepositResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetworkParametersRequest::_Internal {
 public:
};

NetworkParametersRequest::NetworkParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.NetworkParametersRequest)
}
NetworkParametersRequest::NetworkParametersRequest(const NetworkParametersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.NetworkParametersRequest)
}

void NetworkParametersRequest::SharedCtor() {
}

NetworkParametersRequest::~NetworkParametersRequest() {
  // @@protoc_insertion_point(destructor:api.NetworkParametersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkParametersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetworkParametersRequest::ArenaDtor(void* object) {
  NetworkParametersRequest* _this = reinterpret_cast< NetworkParametersRequest* >(object);
  (void)_this;
}
void NetworkParametersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkParametersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkParametersRequest& NetworkParametersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkParametersRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void NetworkParametersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.NetworkParametersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkParametersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkParametersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.NetworkParametersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.NetworkParametersRequest)
  return target;
}

size_t NetworkParametersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.NetworkParametersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkParametersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.NetworkParametersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkParametersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkParametersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.NetworkParametersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.NetworkParametersRequest)
    MergeFrom(*source);
  }
}

void NetworkParametersRequest::MergeFrom(const NetworkParametersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.NetworkParametersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NetworkParametersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.NetworkParametersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkParametersRequest::CopyFrom(const NetworkParametersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.NetworkParametersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParametersRequest::IsInitialized() const {
  return true;
}

void NetworkParametersRequest::InternalSwap(NetworkParametersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkParametersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetworkParametersResponse::_Internal {
 public:
};

void NetworkParametersResponse::clear_networkparameters() {
  networkparameters_.Clear();
}
NetworkParametersResponse::NetworkParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  networkparameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.NetworkParametersResponse)
}
NetworkParametersResponse::NetworkParametersResponse(const NetworkParametersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      networkparameters_(from.networkparameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.NetworkParametersResponse)
}

void NetworkParametersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkParametersResponse_api_2ftrading_2eproto.base);
}

NetworkParametersResponse::~NetworkParametersResponse() {
  // @@protoc_insertion_point(destructor:api.NetworkParametersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkParametersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetworkParametersResponse::ArenaDtor(void* object) {
  NetworkParametersResponse* _this = reinterpret_cast< NetworkParametersResponse* >(object);
  (void)_this;
}
void NetworkParametersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkParametersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkParametersResponse& NetworkParametersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkParametersResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void NetworkParametersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.NetworkParametersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networkparameters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkParametersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.NetworkParameter networkParameters = 1 [json_name = "networkParameters"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_networkparameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkParametersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.NetworkParametersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.NetworkParameter networkParameters = 1 [json_name = "networkParameters"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_networkparameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_networkparameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.NetworkParametersResponse)
  return target;
}

size_t NetworkParametersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.NetworkParametersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.NetworkParameter networkParameters = 1 [json_name = "networkParameters"];
  total_size += 1UL * this->_internal_networkparameters_size();
  for (const auto& msg : this->networkparameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkParametersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.NetworkParametersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkParametersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkParametersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.NetworkParametersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.NetworkParametersResponse)
    MergeFrom(*source);
  }
}

void NetworkParametersResponse::MergeFrom(const NetworkParametersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.NetworkParametersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  networkparameters_.MergeFrom(from.networkparameters_);
}

void NetworkParametersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.NetworkParametersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkParametersResponse::CopyFrom(const NetworkParametersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.NetworkParametersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParametersResponse::IsInitialized() const {
  return true;
}

void NetworkParametersResponse::InternalSwap(NetworkParametersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  networkparameters_.InternalSwap(&other->networkparameters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkParametersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidityProvisionsRequest::_Internal {
 public:
};

LiquidityProvisionsRequest::LiquidityProvisionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.LiquidityProvisionsRequest)
}
LiquidityProvisionsRequest::LiquidityProvisionsRequest(const LiquidityProvisionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market(), 
      GetArena());
  }
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_party().empty()) {
    party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_party(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.LiquidityProvisionsRequest)
}

void LiquidityProvisionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidityProvisionsRequest_api_2ftrading_2eproto.base);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LiquidityProvisionsRequest::~LiquidityProvisionsRequest() {
  // @@protoc_insertion_point(destructor:api.LiquidityProvisionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidityProvisionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LiquidityProvisionsRequest::ArenaDtor(void* object) {
  LiquidityProvisionsRequest* _this = reinterpret_cast< LiquidityProvisionsRequest* >(object);
  (void)_this;
}
void LiquidityProvisionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidityProvisionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityProvisionsRequest& LiquidityProvisionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidityProvisionsRequest_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void LiquidityProvisionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api.LiquidityProvisionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_.ClearToEmpty();
  party_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidityProvisionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.LiquidityProvisionsRequest.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string party = 2 [json_name = "party"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_party();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.LiquidityProvisionsRequest.party"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidityProvisionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.LiquidityProvisionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market = 1 [json_name = "market"];
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.LiquidityProvisionsRequest.market");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market(), target);
  }

  // string party = 2 [json_name = "party"];
  if (this->party().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_party().data(), static_cast<int>(this->_internal_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.LiquidityProvisionsRequest.party");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_party(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.LiquidityProvisionsRequest)
  return target;
}

size_t LiquidityProvisionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.LiquidityProvisionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market = 1 [json_name = "market"];
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // string party = 2 [json_name = "party"];
  if (this->party().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityProvisionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.LiquidityProvisionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityProvisionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidityProvisionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.LiquidityProvisionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.LiquidityProvisionsRequest)
    MergeFrom(*source);
  }
}

void LiquidityProvisionsRequest::MergeFrom(const LiquidityProvisionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.LiquidityProvisionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market().size() > 0) {
    _internal_set_market(from._internal_market());
  }
  if (from.party().size() > 0) {
    _internal_set_party(from._internal_party());
  }
}

void LiquidityProvisionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.LiquidityProvisionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityProvisionsRequest::CopyFrom(const LiquidityProvisionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.LiquidityProvisionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityProvisionsRequest::IsInitialized() const {
  return true;
}

void LiquidityProvisionsRequest::InternalSwap(LiquidityProvisionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_.Swap(&other->party_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidityProvisionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidityProvisionsResponse::_Internal {
 public:
};

void LiquidityProvisionsResponse::clear_liquidityprovisions() {
  liquidityprovisions_.Clear();
}
LiquidityProvisionsResponse::LiquidityProvisionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  liquidityprovisions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.LiquidityProvisionsResponse)
}
LiquidityProvisionsResponse::LiquidityProvisionsResponse(const LiquidityProvisionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      liquidityprovisions_(from.liquidityprovisions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.LiquidityProvisionsResponse)
}

void LiquidityProvisionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidityProvisionsResponse_api_2ftrading_2eproto.base);
}

LiquidityProvisionsResponse::~LiquidityProvisionsResponse() {
  // @@protoc_insertion_point(destructor:api.LiquidityProvisionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidityProvisionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LiquidityProvisionsResponse::ArenaDtor(void* object) {
  LiquidityProvisionsResponse* _this = reinterpret_cast< LiquidityProvisionsResponse* >(object);
  (void)_this;
}
void LiquidityProvisionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidityProvisionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityProvisionsResponse& LiquidityProvisionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidityProvisionsResponse_api_2ftrading_2eproto.base);
  return *internal_default_instance();
}


void LiquidityProvisionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api.LiquidityProvisionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  liquidityprovisions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidityProvisionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.LiquidityProvision liquidityProvisions = 1 [json_name = "liquidityProvisions"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_liquidityprovisions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidityProvisionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.LiquidityProvisionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.LiquidityProvision liquidityProvisions = 1 [json_name = "liquidityProvisions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_liquidityprovisions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_liquidityprovisions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.LiquidityProvisionsResponse)
  return target;
}

size_t LiquidityProvisionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.LiquidityProvisionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.LiquidityProvision liquidityProvisions = 1 [json_name = "liquidityProvisions"];
  total_size += 1UL * this->_internal_liquidityprovisions_size();
  for (const auto& msg : this->liquidityprovisions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityProvisionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.LiquidityProvisionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityProvisionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidityProvisionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.LiquidityProvisionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.LiquidityProvisionsResponse)
    MergeFrom(*source);
  }
}

void LiquidityProvisionsResponse::MergeFrom(const LiquidityProvisionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.LiquidityProvisionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  liquidityprovisions_.MergeFrom(from.liquidityprovisions_);
}

void LiquidityProvisionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.LiquidityProvisionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityProvisionsResponse::CopyFrom(const LiquidityProvisionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.LiquidityProvisionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityProvisionsResponse::IsInitialized() const {
  return true;
}

void LiquidityProvisionsResponse::InternalSwap(LiquidityProvisionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  liquidityprovisions_.InternalSwap(&other->liquidityprovisions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidityProvisionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::api::PropagateChainEventRequest* Arena::CreateMaybeMessage< ::api::PropagateChainEventRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PropagateChainEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PropagateChainEventResponse* Arena::CreateMaybeMessage< ::api::PropagateChainEventResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PropagateChainEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::SubmitTransactionRequest* Arena::CreateMaybeMessage< ::api::SubmitTransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::SubmitTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::SubmitTransactionResponse* Arena::CreateMaybeMessage< ::api::SubmitTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::SubmitTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareWithdrawRequest* Arena::CreateMaybeMessage< ::api::PrepareWithdrawRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PrepareWithdrawRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareWithdrawResponse* Arena::CreateMaybeMessage< ::api::PrepareWithdrawResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PrepareWithdrawResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareSubmitOrderResponse* Arena::CreateMaybeMessage< ::api::PrepareSubmitOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PrepareSubmitOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareCancelOrderResponse* Arena::CreateMaybeMessage< ::api::PrepareCancelOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PrepareCancelOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareAmendOrderResponse* Arena::CreateMaybeMessage< ::api::PrepareAmendOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PrepareAmendOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::SubmitOrderRequest* Arena::CreateMaybeMessage< ::api::SubmitOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::SubmitOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CancelOrderRequest* Arena::CreateMaybeMessage< ::api::CancelOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::CancelOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::AmendOrderRequest* Arena::CreateMaybeMessage< ::api::AmendOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::AmendOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::AssetsRequest* Arena::CreateMaybeMessage< ::api::AssetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::AssetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::AssetsResponse* Arena::CreateMaybeMessage< ::api::AssetsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::AssetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::AssetByIDRequest* Arena::CreateMaybeMessage< ::api::AssetByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::AssetByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::AssetByIDResponse* Arena::CreateMaybeMessage< ::api::AssetByIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::AssetByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNodeSignaturesAggregateRequest* Arena::CreateMaybeMessage< ::api::GetNodeSignaturesAggregateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetNodeSignaturesAggregateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNodeSignaturesAggregateResponse* Arena::CreateMaybeMessage< ::api::GetNodeSignaturesAggregateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetNodeSignaturesAggregateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OptionalProposalState* Arena::CreateMaybeMessage< ::api::OptionalProposalState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::OptionalProposalState >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalsRequest* Arena::CreateMaybeMessage< ::api::GetProposalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalsResponse* Arena::CreateMaybeMessage< ::api::GetProposalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalsByPartyRequest* Arena::CreateMaybeMessage< ::api::GetProposalsByPartyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetProposalsByPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalsByPartyResponse* Arena::CreateMaybeMessage< ::api::GetProposalsByPartyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetProposalsByPartyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetVotesByPartyRequest* Arena::CreateMaybeMessage< ::api::GetVotesByPartyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetVotesByPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetVotesByPartyResponse* Arena::CreateMaybeMessage< ::api::GetVotesByPartyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetVotesByPartyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNewMarketProposalsRequest* Arena::CreateMaybeMessage< ::api::GetNewMarketProposalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetNewMarketProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNewMarketProposalsResponse* Arena::CreateMaybeMessage< ::api::GetNewMarketProposalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetNewMarketProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetUpdateMarketProposalsRequest* Arena::CreateMaybeMessage< ::api::GetUpdateMarketProposalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetUpdateMarketProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetUpdateMarketProposalsResponse* Arena::CreateMaybeMessage< ::api::GetUpdateMarketProposalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetUpdateMarketProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNetworkParametersProposalsRequest* Arena::CreateMaybeMessage< ::api::GetNetworkParametersProposalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetNetworkParametersProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNetworkParametersProposalsResponse* Arena::CreateMaybeMessage< ::api::GetNetworkParametersProposalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetNetworkParametersProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNewAssetProposalsRequest* Arena::CreateMaybeMessage< ::api::GetNewAssetProposalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetNewAssetProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetNewAssetProposalsResponse* Arena::CreateMaybeMessage< ::api::GetNewAssetProposalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetNewAssetProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalByIDRequest* Arena::CreateMaybeMessage< ::api::GetProposalByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetProposalByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalByIDResponse* Arena::CreateMaybeMessage< ::api::GetProposalByIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetProposalByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalByReferenceRequest* Arena::CreateMaybeMessage< ::api::GetProposalByReferenceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetProposalByReferenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::GetProposalByReferenceResponse* Arena::CreateMaybeMessage< ::api::GetProposalByReferenceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::GetProposalByReferenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ObservePartyProposalsRequest* Arena::CreateMaybeMessage< ::api::ObservePartyProposalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::ObservePartyProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ObserveProposalVotesRequest* Arena::CreateMaybeMessage< ::api::ObserveProposalVotesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::ObserveProposalVotesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ObservePartyVotesRequest* Arena::CreateMaybeMessage< ::api::ObservePartyVotesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::ObservePartyVotesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarginLevelsSubscribeRequest* Arena::CreateMaybeMessage< ::api::MarginLevelsSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarginLevelsSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarginLevelsRequest* Arena::CreateMaybeMessage< ::api::MarginLevelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarginLevelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarginLevelsResponse* Arena::CreateMaybeMessage< ::api::MarginLevelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarginLevelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketsDataSubscribeRequest* Arena::CreateMaybeMessage< ::api::MarketsDataSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarketsDataSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketDataByIDRequest* Arena::CreateMaybeMessage< ::api::MarketDataByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarketDataByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketDataByIDResponse* Arena::CreateMaybeMessage< ::api::MarketDataByIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarketDataByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketsDataResponse* Arena::CreateMaybeMessage< ::api::MarketsDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarketsDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::LastTradeRequest* Arena::CreateMaybeMessage< ::api::LastTradeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::LastTradeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::LastTradeResponse* Arena::CreateMaybeMessage< ::api::LastTradeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::LastTradeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketByIDRequest* Arena::CreateMaybeMessage< ::api::MarketByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarketByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketByIDResponse* Arena::CreateMaybeMessage< ::api::MarketByIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarketByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PartyByIDRequest* Arena::CreateMaybeMessage< ::api::PartyByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PartyByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PartyByIDResponse* Arena::CreateMaybeMessage< ::api::PartyByIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PartyByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PartiesResponse* Arena::CreateMaybeMessage< ::api::PartiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PartiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesByPartyRequest* Arena::CreateMaybeMessage< ::api::TradesByPartyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::TradesByPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesByPartyResponse* Arena::CreateMaybeMessage< ::api::TradesByPartyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::TradesByPartyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesByOrderRequest* Arena::CreateMaybeMessage< ::api::TradesByOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::TradesByOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesByOrderResponse* Arena::CreateMaybeMessage< ::api::TradesByOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::TradesByOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::AccountsSubscribeRequest* Arena::CreateMaybeMessage< ::api::AccountsSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::AccountsSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrdersSubscribeRequest* Arena::CreateMaybeMessage< ::api::OrdersSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::OrdersSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesSubscribeRequest* Arena::CreateMaybeMessage< ::api::TradesSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::TradesSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CandlesSubscribeRequest* Arena::CreateMaybeMessage< ::api::CandlesSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::CandlesSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketDepthSubscribeRequest* Arena::CreateMaybeMessage< ::api::MarketDepthSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarketDepthSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketDepthUpdatesSubscribeRequest* Arena::CreateMaybeMessage< ::api::MarketDepthUpdatesSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarketDepthUpdatesSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PositionsSubscribeRequest* Arena::CreateMaybeMessage< ::api::PositionsSubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PositionsSubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrdersByMarketRequest* Arena::CreateMaybeMessage< ::api::OrdersByMarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::OrdersByMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrdersByMarketResponse* Arena::CreateMaybeMessage< ::api::OrdersByMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::OrdersByMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrdersByPartyRequest* Arena::CreateMaybeMessage< ::api::OrdersByPartyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::OrdersByPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrdersByPartyResponse* Arena::CreateMaybeMessage< ::api::OrdersByPartyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::OrdersByPartyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrderByMarketAndIdRequest* Arena::CreateMaybeMessage< ::api::OrderByMarketAndIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::OrderByMarketAndIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrderByMarketAndIdResponse* Arena::CreateMaybeMessage< ::api::OrderByMarketAndIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::OrderByMarketAndIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrderByReferenceRequest* Arena::CreateMaybeMessage< ::api::OrderByReferenceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::OrderByReferenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrderByReferenceResponse* Arena::CreateMaybeMessage< ::api::OrderByReferenceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::OrderByReferenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketsResponse* Arena::CreateMaybeMessage< ::api::MarketsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CandlesRequest* Arena::CreateMaybeMessage< ::api::CandlesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::CandlesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::CandlesResponse* Arena::CreateMaybeMessage< ::api::CandlesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::CandlesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketDepthRequest* Arena::CreateMaybeMessage< ::api::MarketDepthRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarketDepthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketDepthResponse* Arena::CreateMaybeMessage< ::api::MarketDepthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarketDepthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesByMarketRequest* Arena::CreateMaybeMessage< ::api::TradesByMarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::TradesByMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesByMarketResponse* Arena::CreateMaybeMessage< ::api::TradesByMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::TradesByMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PositionsByPartyRequest* Arena::CreateMaybeMessage< ::api::PositionsByPartyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PositionsByPartyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PositionsByPartyResponse* Arena::CreateMaybeMessage< ::api::PositionsByPartyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PositionsByPartyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::VegaTimeResponse* Arena::CreateMaybeMessage< ::api::VegaTimeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::VegaTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::Pagination* Arena::CreateMaybeMessage< ::api::Pagination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::Pagination >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrdersStream* Arena::CreateMaybeMessage< ::api::OrdersStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::OrdersStream >(arena);
}
template<> PROTOBUF_NOINLINE ::api::TradesStream* Arena::CreateMaybeMessage< ::api::TradesStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::TradesStream >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PartyAccountsRequest* Arena::CreateMaybeMessage< ::api::PartyAccountsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PartyAccountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PartyAccountsResponse* Arena::CreateMaybeMessage< ::api::PartyAccountsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PartyAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketAccountsRequest* Arena::CreateMaybeMessage< ::api::MarketAccountsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarketAccountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::MarketAccountsResponse* Arena::CreateMaybeMessage< ::api::MarketAccountsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::MarketAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::FeeInfrastructureAccountsRequest* Arena::CreateMaybeMessage< ::api::FeeInfrastructureAccountsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::FeeInfrastructureAccountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::FeeInfrastructureAccountsResponse* Arena::CreateMaybeMessage< ::api::FeeInfrastructureAccountsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::FeeInfrastructureAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareProposalRequest* Arena::CreateMaybeMessage< ::api::PrepareProposalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PrepareProposalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareProposalResponse* Arena::CreateMaybeMessage< ::api::PrepareProposalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PrepareProposalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareVoteRequest* Arena::CreateMaybeMessage< ::api::PrepareVoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PrepareVoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareVoteResponse* Arena::CreateMaybeMessage< ::api::PrepareVoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PrepareVoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareLiquidityProvisionRequest* Arena::CreateMaybeMessage< ::api::PrepareLiquidityProvisionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PrepareLiquidityProvisionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::PrepareLiquidityProvisionResponse* Arena::CreateMaybeMessage< ::api::PrepareLiquidityProvisionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::PrepareLiquidityProvisionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrderByIDRequest* Arena::CreateMaybeMessage< ::api::OrderByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::OrderByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrderVersionsByIDRequest* Arena::CreateMaybeMessage< ::api::OrderVersionsByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::OrderVersionsByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::OrderVersionsResponse* Arena::CreateMaybeMessage< ::api::OrderVersionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::OrderVersionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::EstimateFeeRequest* Arena::CreateMaybeMessage< ::api::EstimateFeeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::EstimateFeeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::EstimateFeeResponse* Arena::CreateMaybeMessage< ::api::EstimateFeeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::EstimateFeeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::EstimateMarginRequest* Arena::CreateMaybeMessage< ::api::EstimateMarginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::EstimateMarginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::EstimateMarginResponse* Arena::CreateMaybeMessage< ::api::EstimateMarginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::EstimateMarginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ObserveEventsRequest* Arena::CreateMaybeMessage< ::api::ObserveEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::ObserveEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ObserveEventsResponse* Arena::CreateMaybeMessage< ::api::ObserveEventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::ObserveEventsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::WithdrawalsRequest* Arena::CreateMaybeMessage< ::api::WithdrawalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::WithdrawalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::WithdrawalsResponse* Arena::CreateMaybeMessage< ::api::WithdrawalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::WithdrawalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::WithdrawalRequest* Arena::CreateMaybeMessage< ::api::WithdrawalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::WithdrawalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::WithdrawalResponse* Arena::CreateMaybeMessage< ::api::WithdrawalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::WithdrawalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ERC20WithdrawalApprovalRequest* Arena::CreateMaybeMessage< ::api::ERC20WithdrawalApprovalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::ERC20WithdrawalApprovalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::ERC20WithdrawalApprovalResponse* Arena::CreateMaybeMessage< ::api::ERC20WithdrawalApprovalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::ERC20WithdrawalApprovalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DepositsRequest* Arena::CreateMaybeMessage< ::api::DepositsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DepositsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DepositsResponse* Arena::CreateMaybeMessage< ::api::DepositsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DepositsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DepositRequest* Arena::CreateMaybeMessage< ::api::DepositRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DepositRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::DepositResponse* Arena::CreateMaybeMessage< ::api::DepositResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::DepositResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::NetworkParametersRequest* Arena::CreateMaybeMessage< ::api::NetworkParametersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::NetworkParametersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::NetworkParametersResponse* Arena::CreateMaybeMessage< ::api::NetworkParametersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::NetworkParametersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api::LiquidityProvisionsRequest* Arena::CreateMaybeMessage< ::api::LiquidityProvisionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::LiquidityProvisionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api::LiquidityProvisionsResponse* Arena::CreateMaybeMessage< ::api::LiquidityProvisionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::LiquidityProvisionsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
