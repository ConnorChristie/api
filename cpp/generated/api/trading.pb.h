// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/trading.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2ftrading_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_2ftrading_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vega.pb.h"
#include "markets.pb.h"
#include "governance.pb.h"
#include "chain_events.pb.h"
#include "assets.pb.h"
#include "events.pb.h"
#include <google/protobuf/empty.pb.h>
#include "github.com/mwitkow/go-proto-validators/validator.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2ftrading_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2ftrading_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[121]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2ftrading_2eproto;
namespace api {
class AccountsSubscribeRequest;
class AccountsSubscribeRequestDefaultTypeInternal;
extern AccountsSubscribeRequestDefaultTypeInternal _AccountsSubscribeRequest_default_instance_;
class AmendOrderRequest;
class AmendOrderRequestDefaultTypeInternal;
extern AmendOrderRequestDefaultTypeInternal _AmendOrderRequest_default_instance_;
class AssetByIDRequest;
class AssetByIDRequestDefaultTypeInternal;
extern AssetByIDRequestDefaultTypeInternal _AssetByIDRequest_default_instance_;
class AssetByIDResponse;
class AssetByIDResponseDefaultTypeInternal;
extern AssetByIDResponseDefaultTypeInternal _AssetByIDResponse_default_instance_;
class AssetsRequest;
class AssetsRequestDefaultTypeInternal;
extern AssetsRequestDefaultTypeInternal _AssetsRequest_default_instance_;
class AssetsResponse;
class AssetsResponseDefaultTypeInternal;
extern AssetsResponseDefaultTypeInternal _AssetsResponse_default_instance_;
class CancelOrderRequest;
class CancelOrderRequestDefaultTypeInternal;
extern CancelOrderRequestDefaultTypeInternal _CancelOrderRequest_default_instance_;
class CandlesRequest;
class CandlesRequestDefaultTypeInternal;
extern CandlesRequestDefaultTypeInternal _CandlesRequest_default_instance_;
class CandlesResponse;
class CandlesResponseDefaultTypeInternal;
extern CandlesResponseDefaultTypeInternal _CandlesResponse_default_instance_;
class CandlesSubscribeRequest;
class CandlesSubscribeRequestDefaultTypeInternal;
extern CandlesSubscribeRequestDefaultTypeInternal _CandlesSubscribeRequest_default_instance_;
class DepositRequest;
class DepositRequestDefaultTypeInternal;
extern DepositRequestDefaultTypeInternal _DepositRequest_default_instance_;
class DepositResponse;
class DepositResponseDefaultTypeInternal;
extern DepositResponseDefaultTypeInternal _DepositResponse_default_instance_;
class DepositsRequest;
class DepositsRequestDefaultTypeInternal;
extern DepositsRequestDefaultTypeInternal _DepositsRequest_default_instance_;
class DepositsResponse;
class DepositsResponseDefaultTypeInternal;
extern DepositsResponseDefaultTypeInternal _DepositsResponse_default_instance_;
class ERC20WithdrawalApprovalRequest;
class ERC20WithdrawalApprovalRequestDefaultTypeInternal;
extern ERC20WithdrawalApprovalRequestDefaultTypeInternal _ERC20WithdrawalApprovalRequest_default_instance_;
class ERC20WithdrawalApprovalResponse;
class ERC20WithdrawalApprovalResponseDefaultTypeInternal;
extern ERC20WithdrawalApprovalResponseDefaultTypeInternal _ERC20WithdrawalApprovalResponse_default_instance_;
class EstimateFeeRequest;
class EstimateFeeRequestDefaultTypeInternal;
extern EstimateFeeRequestDefaultTypeInternal _EstimateFeeRequest_default_instance_;
class EstimateFeeResponse;
class EstimateFeeResponseDefaultTypeInternal;
extern EstimateFeeResponseDefaultTypeInternal _EstimateFeeResponse_default_instance_;
class EstimateMarginRequest;
class EstimateMarginRequestDefaultTypeInternal;
extern EstimateMarginRequestDefaultTypeInternal _EstimateMarginRequest_default_instance_;
class EstimateMarginResponse;
class EstimateMarginResponseDefaultTypeInternal;
extern EstimateMarginResponseDefaultTypeInternal _EstimateMarginResponse_default_instance_;
class FeeInfrastructureAccountsRequest;
class FeeInfrastructureAccountsRequestDefaultTypeInternal;
extern FeeInfrastructureAccountsRequestDefaultTypeInternal _FeeInfrastructureAccountsRequest_default_instance_;
class FeeInfrastructureAccountsResponse;
class FeeInfrastructureAccountsResponseDefaultTypeInternal;
extern FeeInfrastructureAccountsResponseDefaultTypeInternal _FeeInfrastructureAccountsResponse_default_instance_;
class GetNetworkParametersProposalsRequest;
class GetNetworkParametersProposalsRequestDefaultTypeInternal;
extern GetNetworkParametersProposalsRequestDefaultTypeInternal _GetNetworkParametersProposalsRequest_default_instance_;
class GetNetworkParametersProposalsResponse;
class GetNetworkParametersProposalsResponseDefaultTypeInternal;
extern GetNetworkParametersProposalsResponseDefaultTypeInternal _GetNetworkParametersProposalsResponse_default_instance_;
class GetNewAssetProposalsRequest;
class GetNewAssetProposalsRequestDefaultTypeInternal;
extern GetNewAssetProposalsRequestDefaultTypeInternal _GetNewAssetProposalsRequest_default_instance_;
class GetNewAssetProposalsResponse;
class GetNewAssetProposalsResponseDefaultTypeInternal;
extern GetNewAssetProposalsResponseDefaultTypeInternal _GetNewAssetProposalsResponse_default_instance_;
class GetNewMarketProposalsRequest;
class GetNewMarketProposalsRequestDefaultTypeInternal;
extern GetNewMarketProposalsRequestDefaultTypeInternal _GetNewMarketProposalsRequest_default_instance_;
class GetNewMarketProposalsResponse;
class GetNewMarketProposalsResponseDefaultTypeInternal;
extern GetNewMarketProposalsResponseDefaultTypeInternal _GetNewMarketProposalsResponse_default_instance_;
class GetNodeSignaturesAggregateRequest;
class GetNodeSignaturesAggregateRequestDefaultTypeInternal;
extern GetNodeSignaturesAggregateRequestDefaultTypeInternal _GetNodeSignaturesAggregateRequest_default_instance_;
class GetNodeSignaturesAggregateResponse;
class GetNodeSignaturesAggregateResponseDefaultTypeInternal;
extern GetNodeSignaturesAggregateResponseDefaultTypeInternal _GetNodeSignaturesAggregateResponse_default_instance_;
class GetProposalByIDRequest;
class GetProposalByIDRequestDefaultTypeInternal;
extern GetProposalByIDRequestDefaultTypeInternal _GetProposalByIDRequest_default_instance_;
class GetProposalByIDResponse;
class GetProposalByIDResponseDefaultTypeInternal;
extern GetProposalByIDResponseDefaultTypeInternal _GetProposalByIDResponse_default_instance_;
class GetProposalByReferenceRequest;
class GetProposalByReferenceRequestDefaultTypeInternal;
extern GetProposalByReferenceRequestDefaultTypeInternal _GetProposalByReferenceRequest_default_instance_;
class GetProposalByReferenceResponse;
class GetProposalByReferenceResponseDefaultTypeInternal;
extern GetProposalByReferenceResponseDefaultTypeInternal _GetProposalByReferenceResponse_default_instance_;
class GetProposalsByPartyRequest;
class GetProposalsByPartyRequestDefaultTypeInternal;
extern GetProposalsByPartyRequestDefaultTypeInternal _GetProposalsByPartyRequest_default_instance_;
class GetProposalsByPartyResponse;
class GetProposalsByPartyResponseDefaultTypeInternal;
extern GetProposalsByPartyResponseDefaultTypeInternal _GetProposalsByPartyResponse_default_instance_;
class GetProposalsRequest;
class GetProposalsRequestDefaultTypeInternal;
extern GetProposalsRequestDefaultTypeInternal _GetProposalsRequest_default_instance_;
class GetProposalsResponse;
class GetProposalsResponseDefaultTypeInternal;
extern GetProposalsResponseDefaultTypeInternal _GetProposalsResponse_default_instance_;
class GetUpdateMarketProposalsRequest;
class GetUpdateMarketProposalsRequestDefaultTypeInternal;
extern GetUpdateMarketProposalsRequestDefaultTypeInternal _GetUpdateMarketProposalsRequest_default_instance_;
class GetUpdateMarketProposalsResponse;
class GetUpdateMarketProposalsResponseDefaultTypeInternal;
extern GetUpdateMarketProposalsResponseDefaultTypeInternal _GetUpdateMarketProposalsResponse_default_instance_;
class GetVotesByPartyRequest;
class GetVotesByPartyRequestDefaultTypeInternal;
extern GetVotesByPartyRequestDefaultTypeInternal _GetVotesByPartyRequest_default_instance_;
class GetVotesByPartyResponse;
class GetVotesByPartyResponseDefaultTypeInternal;
extern GetVotesByPartyResponseDefaultTypeInternal _GetVotesByPartyResponse_default_instance_;
class LastTradeRequest;
class LastTradeRequestDefaultTypeInternal;
extern LastTradeRequestDefaultTypeInternal _LastTradeRequest_default_instance_;
class LastTradeResponse;
class LastTradeResponseDefaultTypeInternal;
extern LastTradeResponseDefaultTypeInternal _LastTradeResponse_default_instance_;
class LiquidityProvisionsRequest;
class LiquidityProvisionsRequestDefaultTypeInternal;
extern LiquidityProvisionsRequestDefaultTypeInternal _LiquidityProvisionsRequest_default_instance_;
class LiquidityProvisionsResponse;
class LiquidityProvisionsResponseDefaultTypeInternal;
extern LiquidityProvisionsResponseDefaultTypeInternal _LiquidityProvisionsResponse_default_instance_;
class MarginLevelsRequest;
class MarginLevelsRequestDefaultTypeInternal;
extern MarginLevelsRequestDefaultTypeInternal _MarginLevelsRequest_default_instance_;
class MarginLevelsResponse;
class MarginLevelsResponseDefaultTypeInternal;
extern MarginLevelsResponseDefaultTypeInternal _MarginLevelsResponse_default_instance_;
class MarginLevelsSubscribeRequest;
class MarginLevelsSubscribeRequestDefaultTypeInternal;
extern MarginLevelsSubscribeRequestDefaultTypeInternal _MarginLevelsSubscribeRequest_default_instance_;
class MarketAccountsRequest;
class MarketAccountsRequestDefaultTypeInternal;
extern MarketAccountsRequestDefaultTypeInternal _MarketAccountsRequest_default_instance_;
class MarketAccountsResponse;
class MarketAccountsResponseDefaultTypeInternal;
extern MarketAccountsResponseDefaultTypeInternal _MarketAccountsResponse_default_instance_;
class MarketByIDRequest;
class MarketByIDRequestDefaultTypeInternal;
extern MarketByIDRequestDefaultTypeInternal _MarketByIDRequest_default_instance_;
class MarketByIDResponse;
class MarketByIDResponseDefaultTypeInternal;
extern MarketByIDResponseDefaultTypeInternal _MarketByIDResponse_default_instance_;
class MarketDataByIDRequest;
class MarketDataByIDRequestDefaultTypeInternal;
extern MarketDataByIDRequestDefaultTypeInternal _MarketDataByIDRequest_default_instance_;
class MarketDataByIDResponse;
class MarketDataByIDResponseDefaultTypeInternal;
extern MarketDataByIDResponseDefaultTypeInternal _MarketDataByIDResponse_default_instance_;
class MarketDepthRequest;
class MarketDepthRequestDefaultTypeInternal;
extern MarketDepthRequestDefaultTypeInternal _MarketDepthRequest_default_instance_;
class MarketDepthResponse;
class MarketDepthResponseDefaultTypeInternal;
extern MarketDepthResponseDefaultTypeInternal _MarketDepthResponse_default_instance_;
class MarketDepthSubscribeRequest;
class MarketDepthSubscribeRequestDefaultTypeInternal;
extern MarketDepthSubscribeRequestDefaultTypeInternal _MarketDepthSubscribeRequest_default_instance_;
class MarketDepthUpdatesSubscribeRequest;
class MarketDepthUpdatesSubscribeRequestDefaultTypeInternal;
extern MarketDepthUpdatesSubscribeRequestDefaultTypeInternal _MarketDepthUpdatesSubscribeRequest_default_instance_;
class MarketsDataResponse;
class MarketsDataResponseDefaultTypeInternal;
extern MarketsDataResponseDefaultTypeInternal _MarketsDataResponse_default_instance_;
class MarketsDataSubscribeRequest;
class MarketsDataSubscribeRequestDefaultTypeInternal;
extern MarketsDataSubscribeRequestDefaultTypeInternal _MarketsDataSubscribeRequest_default_instance_;
class MarketsResponse;
class MarketsResponseDefaultTypeInternal;
extern MarketsResponseDefaultTypeInternal _MarketsResponse_default_instance_;
class NetworkParametersRequest;
class NetworkParametersRequestDefaultTypeInternal;
extern NetworkParametersRequestDefaultTypeInternal _NetworkParametersRequest_default_instance_;
class NetworkParametersResponse;
class NetworkParametersResponseDefaultTypeInternal;
extern NetworkParametersResponseDefaultTypeInternal _NetworkParametersResponse_default_instance_;
class ObserveEventsRequest;
class ObserveEventsRequestDefaultTypeInternal;
extern ObserveEventsRequestDefaultTypeInternal _ObserveEventsRequest_default_instance_;
class ObserveEventsResponse;
class ObserveEventsResponseDefaultTypeInternal;
extern ObserveEventsResponseDefaultTypeInternal _ObserveEventsResponse_default_instance_;
class ObservePartyProposalsRequest;
class ObservePartyProposalsRequestDefaultTypeInternal;
extern ObservePartyProposalsRequestDefaultTypeInternal _ObservePartyProposalsRequest_default_instance_;
class ObservePartyVotesRequest;
class ObservePartyVotesRequestDefaultTypeInternal;
extern ObservePartyVotesRequestDefaultTypeInternal _ObservePartyVotesRequest_default_instance_;
class ObserveProposalVotesRequest;
class ObserveProposalVotesRequestDefaultTypeInternal;
extern ObserveProposalVotesRequestDefaultTypeInternal _ObserveProposalVotesRequest_default_instance_;
class OptionalProposalState;
class OptionalProposalStateDefaultTypeInternal;
extern OptionalProposalStateDefaultTypeInternal _OptionalProposalState_default_instance_;
class OrderByIDRequest;
class OrderByIDRequestDefaultTypeInternal;
extern OrderByIDRequestDefaultTypeInternal _OrderByIDRequest_default_instance_;
class OrderByMarketAndIdRequest;
class OrderByMarketAndIdRequestDefaultTypeInternal;
extern OrderByMarketAndIdRequestDefaultTypeInternal _OrderByMarketAndIdRequest_default_instance_;
class OrderByMarketAndIdResponse;
class OrderByMarketAndIdResponseDefaultTypeInternal;
extern OrderByMarketAndIdResponseDefaultTypeInternal _OrderByMarketAndIdResponse_default_instance_;
class OrderByReferenceRequest;
class OrderByReferenceRequestDefaultTypeInternal;
extern OrderByReferenceRequestDefaultTypeInternal _OrderByReferenceRequest_default_instance_;
class OrderByReferenceResponse;
class OrderByReferenceResponseDefaultTypeInternal;
extern OrderByReferenceResponseDefaultTypeInternal _OrderByReferenceResponse_default_instance_;
class OrderVersionsByIDRequest;
class OrderVersionsByIDRequestDefaultTypeInternal;
extern OrderVersionsByIDRequestDefaultTypeInternal _OrderVersionsByIDRequest_default_instance_;
class OrderVersionsResponse;
class OrderVersionsResponseDefaultTypeInternal;
extern OrderVersionsResponseDefaultTypeInternal _OrderVersionsResponse_default_instance_;
class OrdersByMarketRequest;
class OrdersByMarketRequestDefaultTypeInternal;
extern OrdersByMarketRequestDefaultTypeInternal _OrdersByMarketRequest_default_instance_;
class OrdersByMarketResponse;
class OrdersByMarketResponseDefaultTypeInternal;
extern OrdersByMarketResponseDefaultTypeInternal _OrdersByMarketResponse_default_instance_;
class OrdersByPartyRequest;
class OrdersByPartyRequestDefaultTypeInternal;
extern OrdersByPartyRequestDefaultTypeInternal _OrdersByPartyRequest_default_instance_;
class OrdersByPartyResponse;
class OrdersByPartyResponseDefaultTypeInternal;
extern OrdersByPartyResponseDefaultTypeInternal _OrdersByPartyResponse_default_instance_;
class OrdersStream;
class OrdersStreamDefaultTypeInternal;
extern OrdersStreamDefaultTypeInternal _OrdersStream_default_instance_;
class OrdersSubscribeRequest;
class OrdersSubscribeRequestDefaultTypeInternal;
extern OrdersSubscribeRequestDefaultTypeInternal _OrdersSubscribeRequest_default_instance_;
class Pagination;
class PaginationDefaultTypeInternal;
extern PaginationDefaultTypeInternal _Pagination_default_instance_;
class PartiesResponse;
class PartiesResponseDefaultTypeInternal;
extern PartiesResponseDefaultTypeInternal _PartiesResponse_default_instance_;
class PartyAccountsRequest;
class PartyAccountsRequestDefaultTypeInternal;
extern PartyAccountsRequestDefaultTypeInternal _PartyAccountsRequest_default_instance_;
class PartyAccountsResponse;
class PartyAccountsResponseDefaultTypeInternal;
extern PartyAccountsResponseDefaultTypeInternal _PartyAccountsResponse_default_instance_;
class PartyByIDRequest;
class PartyByIDRequestDefaultTypeInternal;
extern PartyByIDRequestDefaultTypeInternal _PartyByIDRequest_default_instance_;
class PartyByIDResponse;
class PartyByIDResponseDefaultTypeInternal;
extern PartyByIDResponseDefaultTypeInternal _PartyByIDResponse_default_instance_;
class PositionsByPartyRequest;
class PositionsByPartyRequestDefaultTypeInternal;
extern PositionsByPartyRequestDefaultTypeInternal _PositionsByPartyRequest_default_instance_;
class PositionsByPartyResponse;
class PositionsByPartyResponseDefaultTypeInternal;
extern PositionsByPartyResponseDefaultTypeInternal _PositionsByPartyResponse_default_instance_;
class PositionsSubscribeRequest;
class PositionsSubscribeRequestDefaultTypeInternal;
extern PositionsSubscribeRequestDefaultTypeInternal _PositionsSubscribeRequest_default_instance_;
class PrepareAmendOrderResponse;
class PrepareAmendOrderResponseDefaultTypeInternal;
extern PrepareAmendOrderResponseDefaultTypeInternal _PrepareAmendOrderResponse_default_instance_;
class PrepareCancelOrderResponse;
class PrepareCancelOrderResponseDefaultTypeInternal;
extern PrepareCancelOrderResponseDefaultTypeInternal _PrepareCancelOrderResponse_default_instance_;
class PrepareLiquidityProvisionRequest;
class PrepareLiquidityProvisionRequestDefaultTypeInternal;
extern PrepareLiquidityProvisionRequestDefaultTypeInternal _PrepareLiquidityProvisionRequest_default_instance_;
class PrepareLiquidityProvisionResponse;
class PrepareLiquidityProvisionResponseDefaultTypeInternal;
extern PrepareLiquidityProvisionResponseDefaultTypeInternal _PrepareLiquidityProvisionResponse_default_instance_;
class PrepareProposalRequest;
class PrepareProposalRequestDefaultTypeInternal;
extern PrepareProposalRequestDefaultTypeInternal _PrepareProposalRequest_default_instance_;
class PrepareProposalResponse;
class PrepareProposalResponseDefaultTypeInternal;
extern PrepareProposalResponseDefaultTypeInternal _PrepareProposalResponse_default_instance_;
class PrepareSubmitOrderResponse;
class PrepareSubmitOrderResponseDefaultTypeInternal;
extern PrepareSubmitOrderResponseDefaultTypeInternal _PrepareSubmitOrderResponse_default_instance_;
class PrepareVoteRequest;
class PrepareVoteRequestDefaultTypeInternal;
extern PrepareVoteRequestDefaultTypeInternal _PrepareVoteRequest_default_instance_;
class PrepareVoteResponse;
class PrepareVoteResponseDefaultTypeInternal;
extern PrepareVoteResponseDefaultTypeInternal _PrepareVoteResponse_default_instance_;
class PrepareWithdrawRequest;
class PrepareWithdrawRequestDefaultTypeInternal;
extern PrepareWithdrawRequestDefaultTypeInternal _PrepareWithdrawRequest_default_instance_;
class PrepareWithdrawResponse;
class PrepareWithdrawResponseDefaultTypeInternal;
extern PrepareWithdrawResponseDefaultTypeInternal _PrepareWithdrawResponse_default_instance_;
class PropagateChainEventRequest;
class PropagateChainEventRequestDefaultTypeInternal;
extern PropagateChainEventRequestDefaultTypeInternal _PropagateChainEventRequest_default_instance_;
class PropagateChainEventResponse;
class PropagateChainEventResponseDefaultTypeInternal;
extern PropagateChainEventResponseDefaultTypeInternal _PropagateChainEventResponse_default_instance_;
class SubmitOrderRequest;
class SubmitOrderRequestDefaultTypeInternal;
extern SubmitOrderRequestDefaultTypeInternal _SubmitOrderRequest_default_instance_;
class SubmitTransactionRequest;
class SubmitTransactionRequestDefaultTypeInternal;
extern SubmitTransactionRequestDefaultTypeInternal _SubmitTransactionRequest_default_instance_;
class SubmitTransactionResponse;
class SubmitTransactionResponseDefaultTypeInternal;
extern SubmitTransactionResponseDefaultTypeInternal _SubmitTransactionResponse_default_instance_;
class TradesByMarketRequest;
class TradesByMarketRequestDefaultTypeInternal;
extern TradesByMarketRequestDefaultTypeInternal _TradesByMarketRequest_default_instance_;
class TradesByMarketResponse;
class TradesByMarketResponseDefaultTypeInternal;
extern TradesByMarketResponseDefaultTypeInternal _TradesByMarketResponse_default_instance_;
class TradesByOrderRequest;
class TradesByOrderRequestDefaultTypeInternal;
extern TradesByOrderRequestDefaultTypeInternal _TradesByOrderRequest_default_instance_;
class TradesByOrderResponse;
class TradesByOrderResponseDefaultTypeInternal;
extern TradesByOrderResponseDefaultTypeInternal _TradesByOrderResponse_default_instance_;
class TradesByPartyRequest;
class TradesByPartyRequestDefaultTypeInternal;
extern TradesByPartyRequestDefaultTypeInternal _TradesByPartyRequest_default_instance_;
class TradesByPartyResponse;
class TradesByPartyResponseDefaultTypeInternal;
extern TradesByPartyResponseDefaultTypeInternal _TradesByPartyResponse_default_instance_;
class TradesStream;
class TradesStreamDefaultTypeInternal;
extern TradesStreamDefaultTypeInternal _TradesStream_default_instance_;
class TradesSubscribeRequest;
class TradesSubscribeRequestDefaultTypeInternal;
extern TradesSubscribeRequestDefaultTypeInternal _TradesSubscribeRequest_default_instance_;
class VegaTimeResponse;
class VegaTimeResponseDefaultTypeInternal;
extern VegaTimeResponseDefaultTypeInternal _VegaTimeResponse_default_instance_;
class WithdrawalRequest;
class WithdrawalRequestDefaultTypeInternal;
extern WithdrawalRequestDefaultTypeInternal _WithdrawalRequest_default_instance_;
class WithdrawalResponse;
class WithdrawalResponseDefaultTypeInternal;
extern WithdrawalResponseDefaultTypeInternal _WithdrawalResponse_default_instance_;
class WithdrawalsRequest;
class WithdrawalsRequestDefaultTypeInternal;
extern WithdrawalsRequestDefaultTypeInternal _WithdrawalsRequest_default_instance_;
class WithdrawalsResponse;
class WithdrawalsResponseDefaultTypeInternal;
extern WithdrawalsResponseDefaultTypeInternal _WithdrawalsResponse_default_instance_;
}  // namespace api
PROTOBUF_NAMESPACE_OPEN
template<> ::api::AccountsSubscribeRequest* Arena::CreateMaybeMessage<::api::AccountsSubscribeRequest>(Arena*);
template<> ::api::AmendOrderRequest* Arena::CreateMaybeMessage<::api::AmendOrderRequest>(Arena*);
template<> ::api::AssetByIDRequest* Arena::CreateMaybeMessage<::api::AssetByIDRequest>(Arena*);
template<> ::api::AssetByIDResponse* Arena::CreateMaybeMessage<::api::AssetByIDResponse>(Arena*);
template<> ::api::AssetsRequest* Arena::CreateMaybeMessage<::api::AssetsRequest>(Arena*);
template<> ::api::AssetsResponse* Arena::CreateMaybeMessage<::api::AssetsResponse>(Arena*);
template<> ::api::CancelOrderRequest* Arena::CreateMaybeMessage<::api::CancelOrderRequest>(Arena*);
template<> ::api::CandlesRequest* Arena::CreateMaybeMessage<::api::CandlesRequest>(Arena*);
template<> ::api::CandlesResponse* Arena::CreateMaybeMessage<::api::CandlesResponse>(Arena*);
template<> ::api::CandlesSubscribeRequest* Arena::CreateMaybeMessage<::api::CandlesSubscribeRequest>(Arena*);
template<> ::api::DepositRequest* Arena::CreateMaybeMessage<::api::DepositRequest>(Arena*);
template<> ::api::DepositResponse* Arena::CreateMaybeMessage<::api::DepositResponse>(Arena*);
template<> ::api::DepositsRequest* Arena::CreateMaybeMessage<::api::DepositsRequest>(Arena*);
template<> ::api::DepositsResponse* Arena::CreateMaybeMessage<::api::DepositsResponse>(Arena*);
template<> ::api::ERC20WithdrawalApprovalRequest* Arena::CreateMaybeMessage<::api::ERC20WithdrawalApprovalRequest>(Arena*);
template<> ::api::ERC20WithdrawalApprovalResponse* Arena::CreateMaybeMessage<::api::ERC20WithdrawalApprovalResponse>(Arena*);
template<> ::api::EstimateFeeRequest* Arena::CreateMaybeMessage<::api::EstimateFeeRequest>(Arena*);
template<> ::api::EstimateFeeResponse* Arena::CreateMaybeMessage<::api::EstimateFeeResponse>(Arena*);
template<> ::api::EstimateMarginRequest* Arena::CreateMaybeMessage<::api::EstimateMarginRequest>(Arena*);
template<> ::api::EstimateMarginResponse* Arena::CreateMaybeMessage<::api::EstimateMarginResponse>(Arena*);
template<> ::api::FeeInfrastructureAccountsRequest* Arena::CreateMaybeMessage<::api::FeeInfrastructureAccountsRequest>(Arena*);
template<> ::api::FeeInfrastructureAccountsResponse* Arena::CreateMaybeMessage<::api::FeeInfrastructureAccountsResponse>(Arena*);
template<> ::api::GetNetworkParametersProposalsRequest* Arena::CreateMaybeMessage<::api::GetNetworkParametersProposalsRequest>(Arena*);
template<> ::api::GetNetworkParametersProposalsResponse* Arena::CreateMaybeMessage<::api::GetNetworkParametersProposalsResponse>(Arena*);
template<> ::api::GetNewAssetProposalsRequest* Arena::CreateMaybeMessage<::api::GetNewAssetProposalsRequest>(Arena*);
template<> ::api::GetNewAssetProposalsResponse* Arena::CreateMaybeMessage<::api::GetNewAssetProposalsResponse>(Arena*);
template<> ::api::GetNewMarketProposalsRequest* Arena::CreateMaybeMessage<::api::GetNewMarketProposalsRequest>(Arena*);
template<> ::api::GetNewMarketProposalsResponse* Arena::CreateMaybeMessage<::api::GetNewMarketProposalsResponse>(Arena*);
template<> ::api::GetNodeSignaturesAggregateRequest* Arena::CreateMaybeMessage<::api::GetNodeSignaturesAggregateRequest>(Arena*);
template<> ::api::GetNodeSignaturesAggregateResponse* Arena::CreateMaybeMessage<::api::GetNodeSignaturesAggregateResponse>(Arena*);
template<> ::api::GetProposalByIDRequest* Arena::CreateMaybeMessage<::api::GetProposalByIDRequest>(Arena*);
template<> ::api::GetProposalByIDResponse* Arena::CreateMaybeMessage<::api::GetProposalByIDResponse>(Arena*);
template<> ::api::GetProposalByReferenceRequest* Arena::CreateMaybeMessage<::api::GetProposalByReferenceRequest>(Arena*);
template<> ::api::GetProposalByReferenceResponse* Arena::CreateMaybeMessage<::api::GetProposalByReferenceResponse>(Arena*);
template<> ::api::GetProposalsByPartyRequest* Arena::CreateMaybeMessage<::api::GetProposalsByPartyRequest>(Arena*);
template<> ::api::GetProposalsByPartyResponse* Arena::CreateMaybeMessage<::api::GetProposalsByPartyResponse>(Arena*);
template<> ::api::GetProposalsRequest* Arena::CreateMaybeMessage<::api::GetProposalsRequest>(Arena*);
template<> ::api::GetProposalsResponse* Arena::CreateMaybeMessage<::api::GetProposalsResponse>(Arena*);
template<> ::api::GetUpdateMarketProposalsRequest* Arena::CreateMaybeMessage<::api::GetUpdateMarketProposalsRequest>(Arena*);
template<> ::api::GetUpdateMarketProposalsResponse* Arena::CreateMaybeMessage<::api::GetUpdateMarketProposalsResponse>(Arena*);
template<> ::api::GetVotesByPartyRequest* Arena::CreateMaybeMessage<::api::GetVotesByPartyRequest>(Arena*);
template<> ::api::GetVotesByPartyResponse* Arena::CreateMaybeMessage<::api::GetVotesByPartyResponse>(Arena*);
template<> ::api::LastTradeRequest* Arena::CreateMaybeMessage<::api::LastTradeRequest>(Arena*);
template<> ::api::LastTradeResponse* Arena::CreateMaybeMessage<::api::LastTradeResponse>(Arena*);
template<> ::api::LiquidityProvisionsRequest* Arena::CreateMaybeMessage<::api::LiquidityProvisionsRequest>(Arena*);
template<> ::api::LiquidityProvisionsResponse* Arena::CreateMaybeMessage<::api::LiquidityProvisionsResponse>(Arena*);
template<> ::api::MarginLevelsRequest* Arena::CreateMaybeMessage<::api::MarginLevelsRequest>(Arena*);
template<> ::api::MarginLevelsResponse* Arena::CreateMaybeMessage<::api::MarginLevelsResponse>(Arena*);
template<> ::api::MarginLevelsSubscribeRequest* Arena::CreateMaybeMessage<::api::MarginLevelsSubscribeRequest>(Arena*);
template<> ::api::MarketAccountsRequest* Arena::CreateMaybeMessage<::api::MarketAccountsRequest>(Arena*);
template<> ::api::MarketAccountsResponse* Arena::CreateMaybeMessage<::api::MarketAccountsResponse>(Arena*);
template<> ::api::MarketByIDRequest* Arena::CreateMaybeMessage<::api::MarketByIDRequest>(Arena*);
template<> ::api::MarketByIDResponse* Arena::CreateMaybeMessage<::api::MarketByIDResponse>(Arena*);
template<> ::api::MarketDataByIDRequest* Arena::CreateMaybeMessage<::api::MarketDataByIDRequest>(Arena*);
template<> ::api::MarketDataByIDResponse* Arena::CreateMaybeMessage<::api::MarketDataByIDResponse>(Arena*);
template<> ::api::MarketDepthRequest* Arena::CreateMaybeMessage<::api::MarketDepthRequest>(Arena*);
template<> ::api::MarketDepthResponse* Arena::CreateMaybeMessage<::api::MarketDepthResponse>(Arena*);
template<> ::api::MarketDepthSubscribeRequest* Arena::CreateMaybeMessage<::api::MarketDepthSubscribeRequest>(Arena*);
template<> ::api::MarketDepthUpdatesSubscribeRequest* Arena::CreateMaybeMessage<::api::MarketDepthUpdatesSubscribeRequest>(Arena*);
template<> ::api::MarketsDataResponse* Arena::CreateMaybeMessage<::api::MarketsDataResponse>(Arena*);
template<> ::api::MarketsDataSubscribeRequest* Arena::CreateMaybeMessage<::api::MarketsDataSubscribeRequest>(Arena*);
template<> ::api::MarketsResponse* Arena::CreateMaybeMessage<::api::MarketsResponse>(Arena*);
template<> ::api::NetworkParametersRequest* Arena::CreateMaybeMessage<::api::NetworkParametersRequest>(Arena*);
template<> ::api::NetworkParametersResponse* Arena::CreateMaybeMessage<::api::NetworkParametersResponse>(Arena*);
template<> ::api::ObserveEventsRequest* Arena::CreateMaybeMessage<::api::ObserveEventsRequest>(Arena*);
template<> ::api::ObserveEventsResponse* Arena::CreateMaybeMessage<::api::ObserveEventsResponse>(Arena*);
template<> ::api::ObservePartyProposalsRequest* Arena::CreateMaybeMessage<::api::ObservePartyProposalsRequest>(Arena*);
template<> ::api::ObservePartyVotesRequest* Arena::CreateMaybeMessage<::api::ObservePartyVotesRequest>(Arena*);
template<> ::api::ObserveProposalVotesRequest* Arena::CreateMaybeMessage<::api::ObserveProposalVotesRequest>(Arena*);
template<> ::api::OptionalProposalState* Arena::CreateMaybeMessage<::api::OptionalProposalState>(Arena*);
template<> ::api::OrderByIDRequest* Arena::CreateMaybeMessage<::api::OrderByIDRequest>(Arena*);
template<> ::api::OrderByMarketAndIdRequest* Arena::CreateMaybeMessage<::api::OrderByMarketAndIdRequest>(Arena*);
template<> ::api::OrderByMarketAndIdResponse* Arena::CreateMaybeMessage<::api::OrderByMarketAndIdResponse>(Arena*);
template<> ::api::OrderByReferenceRequest* Arena::CreateMaybeMessage<::api::OrderByReferenceRequest>(Arena*);
template<> ::api::OrderByReferenceResponse* Arena::CreateMaybeMessage<::api::OrderByReferenceResponse>(Arena*);
template<> ::api::OrderVersionsByIDRequest* Arena::CreateMaybeMessage<::api::OrderVersionsByIDRequest>(Arena*);
template<> ::api::OrderVersionsResponse* Arena::CreateMaybeMessage<::api::OrderVersionsResponse>(Arena*);
template<> ::api::OrdersByMarketRequest* Arena::CreateMaybeMessage<::api::OrdersByMarketRequest>(Arena*);
template<> ::api::OrdersByMarketResponse* Arena::CreateMaybeMessage<::api::OrdersByMarketResponse>(Arena*);
template<> ::api::OrdersByPartyRequest* Arena::CreateMaybeMessage<::api::OrdersByPartyRequest>(Arena*);
template<> ::api::OrdersByPartyResponse* Arena::CreateMaybeMessage<::api::OrdersByPartyResponse>(Arena*);
template<> ::api::OrdersStream* Arena::CreateMaybeMessage<::api::OrdersStream>(Arena*);
template<> ::api::OrdersSubscribeRequest* Arena::CreateMaybeMessage<::api::OrdersSubscribeRequest>(Arena*);
template<> ::api::Pagination* Arena::CreateMaybeMessage<::api::Pagination>(Arena*);
template<> ::api::PartiesResponse* Arena::CreateMaybeMessage<::api::PartiesResponse>(Arena*);
template<> ::api::PartyAccountsRequest* Arena::CreateMaybeMessage<::api::PartyAccountsRequest>(Arena*);
template<> ::api::PartyAccountsResponse* Arena::CreateMaybeMessage<::api::PartyAccountsResponse>(Arena*);
template<> ::api::PartyByIDRequest* Arena::CreateMaybeMessage<::api::PartyByIDRequest>(Arena*);
template<> ::api::PartyByIDResponse* Arena::CreateMaybeMessage<::api::PartyByIDResponse>(Arena*);
template<> ::api::PositionsByPartyRequest* Arena::CreateMaybeMessage<::api::PositionsByPartyRequest>(Arena*);
template<> ::api::PositionsByPartyResponse* Arena::CreateMaybeMessage<::api::PositionsByPartyResponse>(Arena*);
template<> ::api::PositionsSubscribeRequest* Arena::CreateMaybeMessage<::api::PositionsSubscribeRequest>(Arena*);
template<> ::api::PrepareAmendOrderResponse* Arena::CreateMaybeMessage<::api::PrepareAmendOrderResponse>(Arena*);
template<> ::api::PrepareCancelOrderResponse* Arena::CreateMaybeMessage<::api::PrepareCancelOrderResponse>(Arena*);
template<> ::api::PrepareLiquidityProvisionRequest* Arena::CreateMaybeMessage<::api::PrepareLiquidityProvisionRequest>(Arena*);
template<> ::api::PrepareLiquidityProvisionResponse* Arena::CreateMaybeMessage<::api::PrepareLiquidityProvisionResponse>(Arena*);
template<> ::api::PrepareProposalRequest* Arena::CreateMaybeMessage<::api::PrepareProposalRequest>(Arena*);
template<> ::api::PrepareProposalResponse* Arena::CreateMaybeMessage<::api::PrepareProposalResponse>(Arena*);
template<> ::api::PrepareSubmitOrderResponse* Arena::CreateMaybeMessage<::api::PrepareSubmitOrderResponse>(Arena*);
template<> ::api::PrepareVoteRequest* Arena::CreateMaybeMessage<::api::PrepareVoteRequest>(Arena*);
template<> ::api::PrepareVoteResponse* Arena::CreateMaybeMessage<::api::PrepareVoteResponse>(Arena*);
template<> ::api::PrepareWithdrawRequest* Arena::CreateMaybeMessage<::api::PrepareWithdrawRequest>(Arena*);
template<> ::api::PrepareWithdrawResponse* Arena::CreateMaybeMessage<::api::PrepareWithdrawResponse>(Arena*);
template<> ::api::PropagateChainEventRequest* Arena::CreateMaybeMessage<::api::PropagateChainEventRequest>(Arena*);
template<> ::api::PropagateChainEventResponse* Arena::CreateMaybeMessage<::api::PropagateChainEventResponse>(Arena*);
template<> ::api::SubmitOrderRequest* Arena::CreateMaybeMessage<::api::SubmitOrderRequest>(Arena*);
template<> ::api::SubmitTransactionRequest* Arena::CreateMaybeMessage<::api::SubmitTransactionRequest>(Arena*);
template<> ::api::SubmitTransactionResponse* Arena::CreateMaybeMessage<::api::SubmitTransactionResponse>(Arena*);
template<> ::api::TradesByMarketRequest* Arena::CreateMaybeMessage<::api::TradesByMarketRequest>(Arena*);
template<> ::api::TradesByMarketResponse* Arena::CreateMaybeMessage<::api::TradesByMarketResponse>(Arena*);
template<> ::api::TradesByOrderRequest* Arena::CreateMaybeMessage<::api::TradesByOrderRequest>(Arena*);
template<> ::api::TradesByOrderResponse* Arena::CreateMaybeMessage<::api::TradesByOrderResponse>(Arena*);
template<> ::api::TradesByPartyRequest* Arena::CreateMaybeMessage<::api::TradesByPartyRequest>(Arena*);
template<> ::api::TradesByPartyResponse* Arena::CreateMaybeMessage<::api::TradesByPartyResponse>(Arena*);
template<> ::api::TradesStream* Arena::CreateMaybeMessage<::api::TradesStream>(Arena*);
template<> ::api::TradesSubscribeRequest* Arena::CreateMaybeMessage<::api::TradesSubscribeRequest>(Arena*);
template<> ::api::VegaTimeResponse* Arena::CreateMaybeMessage<::api::VegaTimeResponse>(Arena*);
template<> ::api::WithdrawalRequest* Arena::CreateMaybeMessage<::api::WithdrawalRequest>(Arena*);
template<> ::api::WithdrawalResponse* Arena::CreateMaybeMessage<::api::WithdrawalResponse>(Arena*);
template<> ::api::WithdrawalsRequest* Arena::CreateMaybeMessage<::api::WithdrawalsRequest>(Arena*);
template<> ::api::WithdrawalsResponse* Arena::CreateMaybeMessage<::api::WithdrawalsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace api {

enum SubmitTransactionRequest_Type : int {
  SubmitTransactionRequest_Type_TYPE_UNSPECIFIED = 0,
  SubmitTransactionRequest_Type_TYPE_ASYNC = 1,
  SubmitTransactionRequest_Type_TYPE_SYNC = 2,
  SubmitTransactionRequest_Type_TYPE_COMMIT = 3,
  SubmitTransactionRequest_Type_SubmitTransactionRequest_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SubmitTransactionRequest_Type_SubmitTransactionRequest_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SubmitTransactionRequest_Type_IsValid(int value);
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest_Type_Type_MIN = SubmitTransactionRequest_Type_TYPE_UNSPECIFIED;
constexpr SubmitTransactionRequest_Type SubmitTransactionRequest_Type_Type_MAX = SubmitTransactionRequest_Type_TYPE_COMMIT;
constexpr int SubmitTransactionRequest_Type_Type_ARRAYSIZE = SubmitTransactionRequest_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubmitTransactionRequest_Type_descriptor();
template<typename T>
inline const std::string& SubmitTransactionRequest_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubmitTransactionRequest_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubmitTransactionRequest_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubmitTransactionRequest_Type_descriptor(), enum_t_value);
}
inline bool SubmitTransactionRequest_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SubmitTransactionRequest_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubmitTransactionRequest_Type>(
    SubmitTransactionRequest_Type_descriptor(), name, value);
}
// ===================================================================

class PropagateChainEventRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PropagateChainEventRequest) */ {
 public:
  inline PropagateChainEventRequest() : PropagateChainEventRequest(nullptr) {}
  virtual ~PropagateChainEventRequest();

  PropagateChainEventRequest(const PropagateChainEventRequest& from);
  PropagateChainEventRequest(PropagateChainEventRequest&& from) noexcept
    : PropagateChainEventRequest() {
    *this = ::std::move(from);
  }

  inline PropagateChainEventRequest& operator=(const PropagateChainEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropagateChainEventRequest& operator=(PropagateChainEventRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropagateChainEventRequest& default_instance();

  static inline const PropagateChainEventRequest* internal_default_instance() {
    return reinterpret_cast<const PropagateChainEventRequest*>(
               &_PropagateChainEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PropagateChainEventRequest& a, PropagateChainEventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PropagateChainEventRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropagateChainEventRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropagateChainEventRequest* New() const final {
    return CreateMaybeMessage<PropagateChainEventRequest>(nullptr);
  }

  PropagateChainEventRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropagateChainEventRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropagateChainEventRequest& from);
  void MergeFrom(const PropagateChainEventRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropagateChainEventRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PropagateChainEventRequest";
  }
  protected:
  explicit PropagateChainEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kEvtFieldNumber = 1,
  };
  // string pubKey = 2 [json_name = "pubKey"];
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const char* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // bytes signature = 3 [json_name = "signature"];
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .vega.ChainEvent evt = 1 [json_name = "evt"];
  bool has_evt() const;
  private:
  bool _internal_has_evt() const;
  public:
  void clear_evt();
  const ::vega::ChainEvent& evt() const;
  ::vega::ChainEvent* release_evt();
  ::vega::ChainEvent* mutable_evt();
  void set_allocated_evt(::vega::ChainEvent* evt);
  private:
  const ::vega::ChainEvent& _internal_evt() const;
  ::vega::ChainEvent* _internal_mutable_evt();
  public:
  void unsafe_arena_set_allocated_evt(
      ::vega::ChainEvent* evt);
  ::vega::ChainEvent* unsafe_arena_release_evt();

  // @@protoc_insertion_point(class_scope:api.PropagateChainEventRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::vega::ChainEvent* evt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PropagateChainEventResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PropagateChainEventResponse) */ {
 public:
  inline PropagateChainEventResponse() : PropagateChainEventResponse(nullptr) {}
  virtual ~PropagateChainEventResponse();

  PropagateChainEventResponse(const PropagateChainEventResponse& from);
  PropagateChainEventResponse(PropagateChainEventResponse&& from) noexcept
    : PropagateChainEventResponse() {
    *this = ::std::move(from);
  }

  inline PropagateChainEventResponse& operator=(const PropagateChainEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropagateChainEventResponse& operator=(PropagateChainEventResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropagateChainEventResponse& default_instance();

  static inline const PropagateChainEventResponse* internal_default_instance() {
    return reinterpret_cast<const PropagateChainEventResponse*>(
               &_PropagateChainEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PropagateChainEventResponse& a, PropagateChainEventResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PropagateChainEventResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropagateChainEventResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropagateChainEventResponse* New() const final {
    return CreateMaybeMessage<PropagateChainEventResponse>(nullptr);
  }

  PropagateChainEventResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropagateChainEventResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropagateChainEventResponse& from);
  void MergeFrom(const PropagateChainEventResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropagateChainEventResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PropagateChainEventResponse";
  }
  protected:
  explicit PropagateChainEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api.PropagateChainEventResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class SubmitTransactionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.SubmitTransactionRequest) */ {
 public:
  inline SubmitTransactionRequest() : SubmitTransactionRequest(nullptr) {}
  virtual ~SubmitTransactionRequest();

  SubmitTransactionRequest(const SubmitTransactionRequest& from);
  SubmitTransactionRequest(SubmitTransactionRequest&& from) noexcept
    : SubmitTransactionRequest() {
    *this = ::std::move(from);
  }

  inline SubmitTransactionRequest& operator=(const SubmitTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTransactionRequest& operator=(SubmitTransactionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitTransactionRequest& default_instance();

  static inline const SubmitTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitTransactionRequest*>(
               &_SubmitTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubmitTransactionRequest& a, SubmitTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitTransactionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitTransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitTransactionRequest* New() const final {
    return CreateMaybeMessage<SubmitTransactionRequest>(nullptr);
  }

  SubmitTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitTransactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitTransactionRequest& from);
  void MergeFrom(const SubmitTransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitTransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.SubmitTransactionRequest";
  }
  protected:
  explicit SubmitTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SubmitTransactionRequest_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    SubmitTransactionRequest_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_ASYNC =
    SubmitTransactionRequest_Type_TYPE_ASYNC;
  static constexpr Type TYPE_SYNC =
    SubmitTransactionRequest_Type_TYPE_SYNC;
  static constexpr Type TYPE_COMMIT =
    SubmitTransactionRequest_Type_TYPE_COMMIT;
  static inline bool Type_IsValid(int value) {
    return SubmitTransactionRequest_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SubmitTransactionRequest_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SubmitTransactionRequest_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SubmitTransactionRequest_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return SubmitTransactionRequest_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SubmitTransactionRequest_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return SubmitTransactionRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .vega.SignedBundle tx = 1 [json_name = "tx"];
  bool has_tx() const;
  private:
  bool _internal_has_tx() const;
  public:
  void clear_tx();
  const ::vega::SignedBundle& tx() const;
  ::vega::SignedBundle* release_tx();
  ::vega::SignedBundle* mutable_tx();
  void set_allocated_tx(::vega::SignedBundle* tx);
  private:
  const ::vega::SignedBundle& _internal_tx() const;
  ::vega::SignedBundle* _internal_mutable_tx();
  public:
  void unsafe_arena_set_allocated_tx(
      ::vega::SignedBundle* tx);
  ::vega::SignedBundle* unsafe_arena_release_tx();

  // .api.SubmitTransactionRequest.Type type = 2 [json_name = "type"];
  void clear_type();
  ::api::SubmitTransactionRequest_Type type() const;
  void set_type(::api::SubmitTransactionRequest_Type value);
  private:
  ::api::SubmitTransactionRequest_Type _internal_type() const;
  void _internal_set_type(::api::SubmitTransactionRequest_Type value);
  public:

  // @@protoc_insertion_point(class_scope:api.SubmitTransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::SignedBundle* tx_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class SubmitTransactionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.SubmitTransactionResponse) */ {
 public:
  inline SubmitTransactionResponse() : SubmitTransactionResponse(nullptr) {}
  virtual ~SubmitTransactionResponse();

  SubmitTransactionResponse(const SubmitTransactionResponse& from);
  SubmitTransactionResponse(SubmitTransactionResponse&& from) noexcept
    : SubmitTransactionResponse() {
    *this = ::std::move(from);
  }

  inline SubmitTransactionResponse& operator=(const SubmitTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitTransactionResponse& operator=(SubmitTransactionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitTransactionResponse& default_instance();

  static inline const SubmitTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const SubmitTransactionResponse*>(
               &_SubmitTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SubmitTransactionResponse& a, SubmitTransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitTransactionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitTransactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitTransactionResponse* New() const final {
    return CreateMaybeMessage<SubmitTransactionResponse>(nullptr);
  }

  SubmitTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitTransactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitTransactionResponse& from);
  void MergeFrom(const SubmitTransactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitTransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.SubmitTransactionResponse";
  }
  protected:
  explicit SubmitTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api.SubmitTransactionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareWithdrawRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PrepareWithdrawRequest) */ {
 public:
  inline PrepareWithdrawRequest() : PrepareWithdrawRequest(nullptr) {}
  virtual ~PrepareWithdrawRequest();

  PrepareWithdrawRequest(const PrepareWithdrawRequest& from);
  PrepareWithdrawRequest(PrepareWithdrawRequest&& from) noexcept
    : PrepareWithdrawRequest() {
    *this = ::std::move(from);
  }

  inline PrepareWithdrawRequest& operator=(const PrepareWithdrawRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareWithdrawRequest& operator=(PrepareWithdrawRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareWithdrawRequest& default_instance();

  static inline const PrepareWithdrawRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareWithdrawRequest*>(
               &_PrepareWithdrawRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PrepareWithdrawRequest& a, PrepareWithdrawRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareWithdrawRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareWithdrawRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareWithdrawRequest* New() const final {
    return CreateMaybeMessage<PrepareWithdrawRequest>(nullptr);
  }

  PrepareWithdrawRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareWithdrawRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareWithdrawRequest& from);
  void MergeFrom(const PrepareWithdrawRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareWithdrawRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PrepareWithdrawRequest";
  }
  protected:
  explicit PrepareWithdrawRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWithdrawFieldNumber = 1,
  };
  // .vega.WithdrawSubmission withdraw = 1 [json_name = "withdraw"];
  bool has_withdraw() const;
  private:
  bool _internal_has_withdraw() const;
  public:
  void clear_withdraw();
  const ::vega::WithdrawSubmission& withdraw() const;
  ::vega::WithdrawSubmission* release_withdraw();
  ::vega::WithdrawSubmission* mutable_withdraw();
  void set_allocated_withdraw(::vega::WithdrawSubmission* withdraw);
  private:
  const ::vega::WithdrawSubmission& _internal_withdraw() const;
  ::vega::WithdrawSubmission* _internal_mutable_withdraw();
  public:
  void unsafe_arena_set_allocated_withdraw(
      ::vega::WithdrawSubmission* withdraw);
  ::vega::WithdrawSubmission* unsafe_arena_release_withdraw();

  // @@protoc_insertion_point(class_scope:api.PrepareWithdrawRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::WithdrawSubmission* withdraw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareWithdrawResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PrepareWithdrawResponse) */ {
 public:
  inline PrepareWithdrawResponse() : PrepareWithdrawResponse(nullptr) {}
  virtual ~PrepareWithdrawResponse();

  PrepareWithdrawResponse(const PrepareWithdrawResponse& from);
  PrepareWithdrawResponse(PrepareWithdrawResponse&& from) noexcept
    : PrepareWithdrawResponse() {
    *this = ::std::move(from);
  }

  inline PrepareWithdrawResponse& operator=(const PrepareWithdrawResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareWithdrawResponse& operator=(PrepareWithdrawResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareWithdrawResponse& default_instance();

  static inline const PrepareWithdrawResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareWithdrawResponse*>(
               &_PrepareWithdrawResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PrepareWithdrawResponse& a, PrepareWithdrawResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareWithdrawResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareWithdrawResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareWithdrawResponse* New() const final {
    return CreateMaybeMessage<PrepareWithdrawResponse>(nullptr);
  }

  PrepareWithdrawResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareWithdrawResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareWithdrawResponse& from);
  void MergeFrom(const PrepareWithdrawResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareWithdrawResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PrepareWithdrawResponse";
  }
  protected:
  explicit PrepareWithdrawResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
  };
  // bytes blob = 1 [json_name = "blob"];
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // @@protoc_insertion_point(class_scope:api.PrepareWithdrawResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareSubmitOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PrepareSubmitOrderResponse) */ {
 public:
  inline PrepareSubmitOrderResponse() : PrepareSubmitOrderResponse(nullptr) {}
  virtual ~PrepareSubmitOrderResponse();

  PrepareSubmitOrderResponse(const PrepareSubmitOrderResponse& from);
  PrepareSubmitOrderResponse(PrepareSubmitOrderResponse&& from) noexcept
    : PrepareSubmitOrderResponse() {
    *this = ::std::move(from);
  }

  inline PrepareSubmitOrderResponse& operator=(const PrepareSubmitOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareSubmitOrderResponse& operator=(PrepareSubmitOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareSubmitOrderResponse& default_instance();

  static inline const PrepareSubmitOrderResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareSubmitOrderResponse*>(
               &_PrepareSubmitOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PrepareSubmitOrderResponse& a, PrepareSubmitOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareSubmitOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareSubmitOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareSubmitOrderResponse* New() const final {
    return CreateMaybeMessage<PrepareSubmitOrderResponse>(nullptr);
  }

  PrepareSubmitOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareSubmitOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareSubmitOrderResponse& from);
  void MergeFrom(const PrepareSubmitOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareSubmitOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PrepareSubmitOrderResponse";
  }
  protected:
  explicit PrepareSubmitOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
    kSubmitIDFieldNumber = 2,
  };
  // bytes blob = 1 [json_name = "blob"];
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // string submitID = 2 [json_name = "submitID"];
  void clear_submitid();
  const std::string& submitid() const;
  void set_submitid(const std::string& value);
  void set_submitid(std::string&& value);
  void set_submitid(const char* value);
  void set_submitid(const char* value, size_t size);
  std::string* mutable_submitid();
  std::string* release_submitid();
  void set_allocated_submitid(std::string* submitid);
  private:
  const std::string& _internal_submitid() const;
  void _internal_set_submitid(const std::string& value);
  std::string* _internal_mutable_submitid();
  public:

  // @@protoc_insertion_point(class_scope:api.PrepareSubmitOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr submitid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareCancelOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PrepareCancelOrderResponse) */ {
 public:
  inline PrepareCancelOrderResponse() : PrepareCancelOrderResponse(nullptr) {}
  virtual ~PrepareCancelOrderResponse();

  PrepareCancelOrderResponse(const PrepareCancelOrderResponse& from);
  PrepareCancelOrderResponse(PrepareCancelOrderResponse&& from) noexcept
    : PrepareCancelOrderResponse() {
    *this = ::std::move(from);
  }

  inline PrepareCancelOrderResponse& operator=(const PrepareCancelOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareCancelOrderResponse& operator=(PrepareCancelOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareCancelOrderResponse& default_instance();

  static inline const PrepareCancelOrderResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareCancelOrderResponse*>(
               &_PrepareCancelOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PrepareCancelOrderResponse& a, PrepareCancelOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareCancelOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareCancelOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareCancelOrderResponse* New() const final {
    return CreateMaybeMessage<PrepareCancelOrderResponse>(nullptr);
  }

  PrepareCancelOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareCancelOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareCancelOrderResponse& from);
  void MergeFrom(const PrepareCancelOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareCancelOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PrepareCancelOrderResponse";
  }
  protected:
  explicit PrepareCancelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
  };
  // bytes blob = 1 [json_name = "blob"];
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // @@protoc_insertion_point(class_scope:api.PrepareCancelOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareAmendOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PrepareAmendOrderResponse) */ {
 public:
  inline PrepareAmendOrderResponse() : PrepareAmendOrderResponse(nullptr) {}
  virtual ~PrepareAmendOrderResponse();

  PrepareAmendOrderResponse(const PrepareAmendOrderResponse& from);
  PrepareAmendOrderResponse(PrepareAmendOrderResponse&& from) noexcept
    : PrepareAmendOrderResponse() {
    *this = ::std::move(from);
  }

  inline PrepareAmendOrderResponse& operator=(const PrepareAmendOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareAmendOrderResponse& operator=(PrepareAmendOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareAmendOrderResponse& default_instance();

  static inline const PrepareAmendOrderResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareAmendOrderResponse*>(
               &_PrepareAmendOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PrepareAmendOrderResponse& a, PrepareAmendOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareAmendOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareAmendOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareAmendOrderResponse* New() const final {
    return CreateMaybeMessage<PrepareAmendOrderResponse>(nullptr);
  }

  PrepareAmendOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareAmendOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareAmendOrderResponse& from);
  void MergeFrom(const PrepareAmendOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareAmendOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PrepareAmendOrderResponse";
  }
  protected:
  explicit PrepareAmendOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
  };
  // bytes blob = 1 [json_name = "blob"];
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // @@protoc_insertion_point(class_scope:api.PrepareAmendOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class SubmitOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.SubmitOrderRequest) */ {
 public:
  inline SubmitOrderRequest() : SubmitOrderRequest(nullptr) {}
  virtual ~SubmitOrderRequest();

  SubmitOrderRequest(const SubmitOrderRequest& from);
  SubmitOrderRequest(SubmitOrderRequest&& from) noexcept
    : SubmitOrderRequest() {
    *this = ::std::move(from);
  }

  inline SubmitOrderRequest& operator=(const SubmitOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitOrderRequest& operator=(SubmitOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitOrderRequest& default_instance();

  static inline const SubmitOrderRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitOrderRequest*>(
               &_SubmitOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SubmitOrderRequest& a, SubmitOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitOrderRequest* New() const final {
    return CreateMaybeMessage<SubmitOrderRequest>(nullptr);
  }

  SubmitOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitOrderRequest& from);
  void MergeFrom(const SubmitOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.SubmitOrderRequest";
  }
  protected:
  explicit SubmitOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubmissionFieldNumber = 1,
  };
  // .vega.OrderSubmission submission = 1 [json_name = "submission"];
  bool has_submission() const;
  private:
  bool _internal_has_submission() const;
  public:
  void clear_submission();
  const ::vega::OrderSubmission& submission() const;
  ::vega::OrderSubmission* release_submission();
  ::vega::OrderSubmission* mutable_submission();
  void set_allocated_submission(::vega::OrderSubmission* submission);
  private:
  const ::vega::OrderSubmission& _internal_submission() const;
  ::vega::OrderSubmission* _internal_mutable_submission();
  public:
  void unsafe_arena_set_allocated_submission(
      ::vega::OrderSubmission* submission);
  ::vega::OrderSubmission* unsafe_arena_release_submission();

  // @@protoc_insertion_point(class_scope:api.SubmitOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::OrderSubmission* submission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class CancelOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.CancelOrderRequest) */ {
 public:
  inline CancelOrderRequest() : CancelOrderRequest(nullptr) {}
  virtual ~CancelOrderRequest();

  CancelOrderRequest(const CancelOrderRequest& from);
  CancelOrderRequest(CancelOrderRequest&& from) noexcept
    : CancelOrderRequest() {
    *this = ::std::move(from);
  }

  inline CancelOrderRequest& operator=(const CancelOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOrderRequest& operator=(CancelOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelOrderRequest& default_instance();

  static inline const CancelOrderRequest* internal_default_instance() {
    return reinterpret_cast<const CancelOrderRequest*>(
               &_CancelOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CancelOrderRequest& a, CancelOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelOrderRequest* New() const final {
    return CreateMaybeMessage<CancelOrderRequest>(nullptr);
  }

  CancelOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelOrderRequest& from);
  void MergeFrom(const CancelOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.CancelOrderRequest";
  }
  protected:
  explicit CancelOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCancellationFieldNumber = 1,
  };
  // .vega.OrderCancellation cancellation = 1 [json_name = "cancellation"];
  bool has_cancellation() const;
  private:
  bool _internal_has_cancellation() const;
  public:
  void clear_cancellation();
  const ::vega::OrderCancellation& cancellation() const;
  ::vega::OrderCancellation* release_cancellation();
  ::vega::OrderCancellation* mutable_cancellation();
  void set_allocated_cancellation(::vega::OrderCancellation* cancellation);
  private:
  const ::vega::OrderCancellation& _internal_cancellation() const;
  ::vega::OrderCancellation* _internal_mutable_cancellation();
  public:
  void unsafe_arena_set_allocated_cancellation(
      ::vega::OrderCancellation* cancellation);
  ::vega::OrderCancellation* unsafe_arena_release_cancellation();

  // @@protoc_insertion_point(class_scope:api.CancelOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::OrderCancellation* cancellation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class AmendOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.AmendOrderRequest) */ {
 public:
  inline AmendOrderRequest() : AmendOrderRequest(nullptr) {}
  virtual ~AmendOrderRequest();

  AmendOrderRequest(const AmendOrderRequest& from);
  AmendOrderRequest(AmendOrderRequest&& from) noexcept
    : AmendOrderRequest() {
    *this = ::std::move(from);
  }

  inline AmendOrderRequest& operator=(const AmendOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AmendOrderRequest& operator=(AmendOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AmendOrderRequest& default_instance();

  static inline const AmendOrderRequest* internal_default_instance() {
    return reinterpret_cast<const AmendOrderRequest*>(
               &_AmendOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AmendOrderRequest& a, AmendOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AmendOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AmendOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AmendOrderRequest* New() const final {
    return CreateMaybeMessage<AmendOrderRequest>(nullptr);
  }

  AmendOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AmendOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AmendOrderRequest& from);
  void MergeFrom(const AmendOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AmendOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.AmendOrderRequest";
  }
  protected:
  explicit AmendOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmendmentFieldNumber = 1,
  };
  // .vega.OrderAmendment amendment = 1 [json_name = "amendment"];
  bool has_amendment() const;
  private:
  bool _internal_has_amendment() const;
  public:
  void clear_amendment();
  const ::vega::OrderAmendment& amendment() const;
  ::vega::OrderAmendment* release_amendment();
  ::vega::OrderAmendment* mutable_amendment();
  void set_allocated_amendment(::vega::OrderAmendment* amendment);
  private:
  const ::vega::OrderAmendment& _internal_amendment() const;
  ::vega::OrderAmendment* _internal_mutable_amendment();
  public:
  void unsafe_arena_set_allocated_amendment(
      ::vega::OrderAmendment* amendment);
  ::vega::OrderAmendment* unsafe_arena_release_amendment();

  // @@protoc_insertion_point(class_scope:api.AmendOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::OrderAmendment* amendment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class AssetsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.AssetsRequest) */ {
 public:
  inline AssetsRequest() : AssetsRequest(nullptr) {}
  virtual ~AssetsRequest();

  AssetsRequest(const AssetsRequest& from);
  AssetsRequest(AssetsRequest&& from) noexcept
    : AssetsRequest() {
    *this = ::std::move(from);
  }

  inline AssetsRequest& operator=(const AssetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetsRequest& operator=(AssetsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetsRequest& default_instance();

  static inline const AssetsRequest* internal_default_instance() {
    return reinterpret_cast<const AssetsRequest*>(
               &_AssetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AssetsRequest& a, AssetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetsRequest* New() const final {
    return CreateMaybeMessage<AssetsRequest>(nullptr);
  }

  AssetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetsRequest& from);
  void MergeFrom(const AssetsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.AssetsRequest";
  }
  protected:
  explicit AssetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.AssetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class AssetsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.AssetsResponse) */ {
 public:
  inline AssetsResponse() : AssetsResponse(nullptr) {}
  virtual ~AssetsResponse();

  AssetsResponse(const AssetsResponse& from);
  AssetsResponse(AssetsResponse&& from) noexcept
    : AssetsResponse() {
    *this = ::std::move(from);
  }

  inline AssetsResponse& operator=(const AssetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetsResponse& operator=(AssetsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetsResponse& default_instance();

  static inline const AssetsResponse* internal_default_instance() {
    return reinterpret_cast<const AssetsResponse*>(
               &_AssetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AssetsResponse& a, AssetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetsResponse* New() const final {
    return CreateMaybeMessage<AssetsResponse>(nullptr);
  }

  AssetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetsResponse& from);
  void MergeFrom(const AssetsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.AssetsResponse";
  }
  protected:
  explicit AssetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetsFieldNumber = 1,
  };
  // repeated .vega.Asset assets = 1 [json_name = "assets"];
  int assets_size() const;
  private:
  int _internal_assets_size() const;
  public:
  void clear_assets();
  ::vega::Asset* mutable_assets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Asset >*
      mutable_assets();
  private:
  const ::vega::Asset& _internal_assets(int index) const;
  ::vega::Asset* _internal_add_assets();
  public:
  const ::vega::Asset& assets(int index) const;
  ::vega::Asset* add_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Asset >&
      assets() const;

  // @@protoc_insertion_point(class_scope:api.AssetsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Asset > assets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class AssetByIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.AssetByIDRequest) */ {
 public:
  inline AssetByIDRequest() : AssetByIDRequest(nullptr) {}
  virtual ~AssetByIDRequest();

  AssetByIDRequest(const AssetByIDRequest& from);
  AssetByIDRequest(AssetByIDRequest&& from) noexcept
    : AssetByIDRequest() {
    *this = ::std::move(from);
  }

  inline AssetByIDRequest& operator=(const AssetByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetByIDRequest& operator=(AssetByIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetByIDRequest& default_instance();

  static inline const AssetByIDRequest* internal_default_instance() {
    return reinterpret_cast<const AssetByIDRequest*>(
               &_AssetByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AssetByIDRequest& a, AssetByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetByIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetByIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetByIDRequest* New() const final {
    return CreateMaybeMessage<AssetByIDRequest>(nullptr);
  }

  AssetByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetByIDRequest& from);
  void MergeFrom(const AssetByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.AssetByIDRequest";
  }
  protected:
  explicit AssetByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
  };
  // string ID = 1 [json_name = "ID", (.validator.field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:api.AssetByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class AssetByIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.AssetByIDResponse) */ {
 public:
  inline AssetByIDResponse() : AssetByIDResponse(nullptr) {}
  virtual ~AssetByIDResponse();

  AssetByIDResponse(const AssetByIDResponse& from);
  AssetByIDResponse(AssetByIDResponse&& from) noexcept
    : AssetByIDResponse() {
    *this = ::std::move(from);
  }

  inline AssetByIDResponse& operator=(const AssetByIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetByIDResponse& operator=(AssetByIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetByIDResponse& default_instance();

  static inline const AssetByIDResponse* internal_default_instance() {
    return reinterpret_cast<const AssetByIDResponse*>(
               &_AssetByIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AssetByIDResponse& a, AssetByIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetByIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetByIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetByIDResponse* New() const final {
    return CreateMaybeMessage<AssetByIDResponse>(nullptr);
  }

  AssetByIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetByIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetByIDResponse& from);
  void MergeFrom(const AssetByIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetByIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.AssetByIDResponse";
  }
  protected:
  explicit AssetByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetFieldNumber = 1,
  };
  // .vega.Asset asset = 1 [json_name = "asset"];
  bool has_asset() const;
  private:
  bool _internal_has_asset() const;
  public:
  void clear_asset();
  const ::vega::Asset& asset() const;
  ::vega::Asset* release_asset();
  ::vega::Asset* mutable_asset();
  void set_allocated_asset(::vega::Asset* asset);
  private:
  const ::vega::Asset& _internal_asset() const;
  ::vega::Asset* _internal_mutable_asset();
  public:
  void unsafe_arena_set_allocated_asset(
      ::vega::Asset* asset);
  ::vega::Asset* unsafe_arena_release_asset();

  // @@protoc_insertion_point(class_scope:api.AssetByIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Asset* asset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNodeSignaturesAggregateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetNodeSignaturesAggregateRequest) */ {
 public:
  inline GetNodeSignaturesAggregateRequest() : GetNodeSignaturesAggregateRequest(nullptr) {}
  virtual ~GetNodeSignaturesAggregateRequest();

  GetNodeSignaturesAggregateRequest(const GetNodeSignaturesAggregateRequest& from);
  GetNodeSignaturesAggregateRequest(GetNodeSignaturesAggregateRequest&& from) noexcept
    : GetNodeSignaturesAggregateRequest() {
    *this = ::std::move(from);
  }

  inline GetNodeSignaturesAggregateRequest& operator=(const GetNodeSignaturesAggregateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeSignaturesAggregateRequest& operator=(GetNodeSignaturesAggregateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodeSignaturesAggregateRequest& default_instance();

  static inline const GetNodeSignaturesAggregateRequest* internal_default_instance() {
    return reinterpret_cast<const GetNodeSignaturesAggregateRequest*>(
               &_GetNodeSignaturesAggregateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetNodeSignaturesAggregateRequest& a, GetNodeSignaturesAggregateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeSignaturesAggregateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodeSignaturesAggregateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodeSignaturesAggregateRequest* New() const final {
    return CreateMaybeMessage<GetNodeSignaturesAggregateRequest>(nullptr);
  }

  GetNodeSignaturesAggregateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodeSignaturesAggregateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodeSignaturesAggregateRequest& from);
  void MergeFrom(const GetNodeSignaturesAggregateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeSignaturesAggregateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetNodeSignaturesAggregateRequest";
  }
  protected:
  explicit GetNodeSignaturesAggregateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
  };
  // string ID = 1 [json_name = "ID", (.validator.field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:api.GetNodeSignaturesAggregateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNodeSignaturesAggregateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetNodeSignaturesAggregateResponse) */ {
 public:
  inline GetNodeSignaturesAggregateResponse() : GetNodeSignaturesAggregateResponse(nullptr) {}
  virtual ~GetNodeSignaturesAggregateResponse();

  GetNodeSignaturesAggregateResponse(const GetNodeSignaturesAggregateResponse& from);
  GetNodeSignaturesAggregateResponse(GetNodeSignaturesAggregateResponse&& from) noexcept
    : GetNodeSignaturesAggregateResponse() {
    *this = ::std::move(from);
  }

  inline GetNodeSignaturesAggregateResponse& operator=(const GetNodeSignaturesAggregateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeSignaturesAggregateResponse& operator=(GetNodeSignaturesAggregateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodeSignaturesAggregateResponse& default_instance();

  static inline const GetNodeSignaturesAggregateResponse* internal_default_instance() {
    return reinterpret_cast<const GetNodeSignaturesAggregateResponse*>(
               &_GetNodeSignaturesAggregateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetNodeSignaturesAggregateResponse& a, GetNodeSignaturesAggregateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeSignaturesAggregateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodeSignaturesAggregateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodeSignaturesAggregateResponse* New() const final {
    return CreateMaybeMessage<GetNodeSignaturesAggregateResponse>(nullptr);
  }

  GetNodeSignaturesAggregateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodeSignaturesAggregateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodeSignaturesAggregateResponse& from);
  void MergeFrom(const GetNodeSignaturesAggregateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeSignaturesAggregateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetNodeSignaturesAggregateResponse";
  }
  protected:
  explicit GetNodeSignaturesAggregateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 1,
  };
  // repeated .vega.NodeSignature signatures = 1 [json_name = "signatures"];
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  ::vega::NodeSignature* mutable_signatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NodeSignature >*
      mutable_signatures();
  private:
  const ::vega::NodeSignature& _internal_signatures(int index) const;
  ::vega::NodeSignature* _internal_add_signatures();
  public:
  const ::vega::NodeSignature& signatures(int index) const;
  ::vega::NodeSignature* add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NodeSignature >&
      signatures() const;

  // @@protoc_insertion_point(class_scope:api.GetNodeSignaturesAggregateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NodeSignature > signatures_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OptionalProposalState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.OptionalProposalState) */ {
 public:
  inline OptionalProposalState() : OptionalProposalState(nullptr) {}
  virtual ~OptionalProposalState();

  OptionalProposalState(const OptionalProposalState& from);
  OptionalProposalState(OptionalProposalState&& from) noexcept
    : OptionalProposalState() {
    *this = ::std::move(from);
  }

  inline OptionalProposalState& operator=(const OptionalProposalState& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionalProposalState& operator=(OptionalProposalState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptionalProposalState& default_instance();

  static inline const OptionalProposalState* internal_default_instance() {
    return reinterpret_cast<const OptionalProposalState*>(
               &_OptionalProposalState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(OptionalProposalState& a, OptionalProposalState& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionalProposalState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionalProposalState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionalProposalState* New() const final {
    return CreateMaybeMessage<OptionalProposalState>(nullptr);
  }

  OptionalProposalState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionalProposalState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptionalProposalState& from);
  void MergeFrom(const OptionalProposalState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionalProposalState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.OptionalProposalState";
  }
  protected:
  explicit OptionalProposalState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .vega.Proposal.State value = 1 [json_name = "value"];
  void clear_value();
  ::vega::Proposal_State value() const;
  void set_value(::vega::Proposal_State value);
  private:
  ::vega::Proposal_State _internal_value() const;
  void _internal_set_value(::vega::Proposal_State value);
  public:

  // @@protoc_insertion_point(class_scope:api.OptionalProposalState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetProposalsRequest) */ {
 public:
  inline GetProposalsRequest() : GetProposalsRequest(nullptr) {}
  virtual ~GetProposalsRequest();

  GetProposalsRequest(const GetProposalsRequest& from);
  GetProposalsRequest(GetProposalsRequest&& from) noexcept
    : GetProposalsRequest() {
    *this = ::std::move(from);
  }

  inline GetProposalsRequest& operator=(const GetProposalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalsRequest& operator=(GetProposalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalsRequest& default_instance();

  static inline const GetProposalsRequest* internal_default_instance() {
    return reinterpret_cast<const GetProposalsRequest*>(
               &_GetProposalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetProposalsRequest& a, GetProposalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalsRequest* New() const final {
    return CreateMaybeMessage<GetProposalsRequest>(nullptr);
  }

  GetProposalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalsRequest& from);
  void MergeFrom(const GetProposalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetProposalsRequest";
  }
  protected:
  explicit GetProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectInStateFieldNumber = 1,
  };
  // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
  bool has_selectinstate() const;
  private:
  bool _internal_has_selectinstate() const;
  public:
  void clear_selectinstate();
  const ::api::OptionalProposalState& selectinstate() const;
  ::api::OptionalProposalState* release_selectinstate();
  ::api::OptionalProposalState* mutable_selectinstate();
  void set_allocated_selectinstate(::api::OptionalProposalState* selectinstate);
  private:
  const ::api::OptionalProposalState& _internal_selectinstate() const;
  ::api::OptionalProposalState* _internal_mutable_selectinstate();
  public:
  void unsafe_arena_set_allocated_selectinstate(
      ::api::OptionalProposalState* selectinstate);
  ::api::OptionalProposalState* unsafe_arena_release_selectinstate();

  // @@protoc_insertion_point(class_scope:api.GetProposalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::OptionalProposalState* selectinstate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetProposalsResponse) */ {
 public:
  inline GetProposalsResponse() : GetProposalsResponse(nullptr) {}
  virtual ~GetProposalsResponse();

  GetProposalsResponse(const GetProposalsResponse& from);
  GetProposalsResponse(GetProposalsResponse&& from) noexcept
    : GetProposalsResponse() {
    *this = ::std::move(from);
  }

  inline GetProposalsResponse& operator=(const GetProposalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalsResponse& operator=(GetProposalsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalsResponse& default_instance();

  static inline const GetProposalsResponse* internal_default_instance() {
    return reinterpret_cast<const GetProposalsResponse*>(
               &_GetProposalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetProposalsResponse& a, GetProposalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalsResponse* New() const final {
    return CreateMaybeMessage<GetProposalsResponse>(nullptr);
  }

  GetProposalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalsResponse& from);
  void MergeFrom(const GetProposalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetProposalsResponse";
  }
  protected:
  explicit GetProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::vega::GovernanceData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
      mutable_data();
  private:
  const ::vega::GovernanceData& _internal_data(int index) const;
  ::vega::GovernanceData* _internal_add_data();
  public:
  const ::vega::GovernanceData& data(int index) const;
  ::vega::GovernanceData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
      data() const;

  // @@protoc_insertion_point(class_scope:api.GetProposalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalsByPartyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetProposalsByPartyRequest) */ {
 public:
  inline GetProposalsByPartyRequest() : GetProposalsByPartyRequest(nullptr) {}
  virtual ~GetProposalsByPartyRequest();

  GetProposalsByPartyRequest(const GetProposalsByPartyRequest& from);
  GetProposalsByPartyRequest(GetProposalsByPartyRequest&& from) noexcept
    : GetProposalsByPartyRequest() {
    *this = ::std::move(from);
  }

  inline GetProposalsByPartyRequest& operator=(const GetProposalsByPartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalsByPartyRequest& operator=(GetProposalsByPartyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalsByPartyRequest& default_instance();

  static inline const GetProposalsByPartyRequest* internal_default_instance() {
    return reinterpret_cast<const GetProposalsByPartyRequest*>(
               &_GetProposalsByPartyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetProposalsByPartyRequest& a, GetProposalsByPartyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalsByPartyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalsByPartyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalsByPartyRequest* New() const final {
    return CreateMaybeMessage<GetProposalsByPartyRequest>(nullptr);
  }

  GetProposalsByPartyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalsByPartyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalsByPartyRequest& from);
  void MergeFrom(const GetProposalsByPartyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalsByPartyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetProposalsByPartyRequest";
  }
  protected:
  explicit GetProposalsByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
    kSelectInStateFieldNumber = 2,
  };
  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // .api.OptionalProposalState selectInState = 2 [json_name = "selectInState"];
  bool has_selectinstate() const;
  private:
  bool _internal_has_selectinstate() const;
  public:
  void clear_selectinstate();
  const ::api::OptionalProposalState& selectinstate() const;
  ::api::OptionalProposalState* release_selectinstate();
  ::api::OptionalProposalState* mutable_selectinstate();
  void set_allocated_selectinstate(::api::OptionalProposalState* selectinstate);
  private:
  const ::api::OptionalProposalState& _internal_selectinstate() const;
  ::api::OptionalProposalState* _internal_mutable_selectinstate();
  public:
  void unsafe_arena_set_allocated_selectinstate(
      ::api::OptionalProposalState* selectinstate);
  ::api::OptionalProposalState* unsafe_arena_release_selectinstate();

  // @@protoc_insertion_point(class_scope:api.GetProposalsByPartyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::api::OptionalProposalState* selectinstate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalsByPartyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetProposalsByPartyResponse) */ {
 public:
  inline GetProposalsByPartyResponse() : GetProposalsByPartyResponse(nullptr) {}
  virtual ~GetProposalsByPartyResponse();

  GetProposalsByPartyResponse(const GetProposalsByPartyResponse& from);
  GetProposalsByPartyResponse(GetProposalsByPartyResponse&& from) noexcept
    : GetProposalsByPartyResponse() {
    *this = ::std::move(from);
  }

  inline GetProposalsByPartyResponse& operator=(const GetProposalsByPartyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalsByPartyResponse& operator=(GetProposalsByPartyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalsByPartyResponse& default_instance();

  static inline const GetProposalsByPartyResponse* internal_default_instance() {
    return reinterpret_cast<const GetProposalsByPartyResponse*>(
               &_GetProposalsByPartyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetProposalsByPartyResponse& a, GetProposalsByPartyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalsByPartyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalsByPartyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalsByPartyResponse* New() const final {
    return CreateMaybeMessage<GetProposalsByPartyResponse>(nullptr);
  }

  GetProposalsByPartyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalsByPartyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalsByPartyResponse& from);
  void MergeFrom(const GetProposalsByPartyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalsByPartyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetProposalsByPartyResponse";
  }
  protected:
  explicit GetProposalsByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::vega::GovernanceData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
      mutable_data();
  private:
  const ::vega::GovernanceData& _internal_data(int index) const;
  ::vega::GovernanceData* _internal_add_data();
  public:
  const ::vega::GovernanceData& data(int index) const;
  ::vega::GovernanceData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
      data() const;

  // @@protoc_insertion_point(class_scope:api.GetProposalsByPartyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetVotesByPartyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetVotesByPartyRequest) */ {
 public:
  inline GetVotesByPartyRequest() : GetVotesByPartyRequest(nullptr) {}
  virtual ~GetVotesByPartyRequest();

  GetVotesByPartyRequest(const GetVotesByPartyRequest& from);
  GetVotesByPartyRequest(GetVotesByPartyRequest&& from) noexcept
    : GetVotesByPartyRequest() {
    *this = ::std::move(from);
  }

  inline GetVotesByPartyRequest& operator=(const GetVotesByPartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVotesByPartyRequest& operator=(GetVotesByPartyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVotesByPartyRequest& default_instance();

  static inline const GetVotesByPartyRequest* internal_default_instance() {
    return reinterpret_cast<const GetVotesByPartyRequest*>(
               &_GetVotesByPartyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetVotesByPartyRequest& a, GetVotesByPartyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVotesByPartyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVotesByPartyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVotesByPartyRequest* New() const final {
    return CreateMaybeMessage<GetVotesByPartyRequest>(nullptr);
  }

  GetVotesByPartyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVotesByPartyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVotesByPartyRequest& from);
  void MergeFrom(const GetVotesByPartyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVotesByPartyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetVotesByPartyRequest";
  }
  protected:
  explicit GetVotesByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
  };
  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // @@protoc_insertion_point(class_scope:api.GetVotesByPartyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetVotesByPartyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetVotesByPartyResponse) */ {
 public:
  inline GetVotesByPartyResponse() : GetVotesByPartyResponse(nullptr) {}
  virtual ~GetVotesByPartyResponse();

  GetVotesByPartyResponse(const GetVotesByPartyResponse& from);
  GetVotesByPartyResponse(GetVotesByPartyResponse&& from) noexcept
    : GetVotesByPartyResponse() {
    *this = ::std::move(from);
  }

  inline GetVotesByPartyResponse& operator=(const GetVotesByPartyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVotesByPartyResponse& operator=(GetVotesByPartyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVotesByPartyResponse& default_instance();

  static inline const GetVotesByPartyResponse* internal_default_instance() {
    return reinterpret_cast<const GetVotesByPartyResponse*>(
               &_GetVotesByPartyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetVotesByPartyResponse& a, GetVotesByPartyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVotesByPartyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVotesByPartyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVotesByPartyResponse* New() const final {
    return CreateMaybeMessage<GetVotesByPartyResponse>(nullptr);
  }

  GetVotesByPartyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVotesByPartyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVotesByPartyResponse& from);
  void MergeFrom(const GetVotesByPartyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVotesByPartyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetVotesByPartyResponse";
  }
  protected:
  explicit GetVotesByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 1,
  };
  // repeated .vega.Vote votes = 1 [json_name = "votes"];
  int votes_size() const;
  private:
  int _internal_votes_size() const;
  public:
  void clear_votes();
  ::vega::Vote* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Vote >*
      mutable_votes();
  private:
  const ::vega::Vote& _internal_votes(int index) const;
  ::vega::Vote* _internal_add_votes();
  public:
  const ::vega::Vote& votes(int index) const;
  ::vega::Vote* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Vote >&
      votes() const;

  // @@protoc_insertion_point(class_scope:api.GetVotesByPartyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Vote > votes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNewMarketProposalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetNewMarketProposalsRequest) */ {
 public:
  inline GetNewMarketProposalsRequest() : GetNewMarketProposalsRequest(nullptr) {}
  virtual ~GetNewMarketProposalsRequest();

  GetNewMarketProposalsRequest(const GetNewMarketProposalsRequest& from);
  GetNewMarketProposalsRequest(GetNewMarketProposalsRequest&& from) noexcept
    : GetNewMarketProposalsRequest() {
    *this = ::std::move(from);
  }

  inline GetNewMarketProposalsRequest& operator=(const GetNewMarketProposalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNewMarketProposalsRequest& operator=(GetNewMarketProposalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNewMarketProposalsRequest& default_instance();

  static inline const GetNewMarketProposalsRequest* internal_default_instance() {
    return reinterpret_cast<const GetNewMarketProposalsRequest*>(
               &_GetNewMarketProposalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetNewMarketProposalsRequest& a, GetNewMarketProposalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNewMarketProposalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNewMarketProposalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNewMarketProposalsRequest* New() const final {
    return CreateMaybeMessage<GetNewMarketProposalsRequest>(nullptr);
  }

  GetNewMarketProposalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNewMarketProposalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNewMarketProposalsRequest& from);
  void MergeFrom(const GetNewMarketProposalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNewMarketProposalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetNewMarketProposalsRequest";
  }
  protected:
  explicit GetNewMarketProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectInStateFieldNumber = 1,
  };
  // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
  bool has_selectinstate() const;
  private:
  bool _internal_has_selectinstate() const;
  public:
  void clear_selectinstate();
  const ::api::OptionalProposalState& selectinstate() const;
  ::api::OptionalProposalState* release_selectinstate();
  ::api::OptionalProposalState* mutable_selectinstate();
  void set_allocated_selectinstate(::api::OptionalProposalState* selectinstate);
  private:
  const ::api::OptionalProposalState& _internal_selectinstate() const;
  ::api::OptionalProposalState* _internal_mutable_selectinstate();
  public:
  void unsafe_arena_set_allocated_selectinstate(
      ::api::OptionalProposalState* selectinstate);
  ::api::OptionalProposalState* unsafe_arena_release_selectinstate();

  // @@protoc_insertion_point(class_scope:api.GetNewMarketProposalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::OptionalProposalState* selectinstate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNewMarketProposalsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetNewMarketProposalsResponse) */ {
 public:
  inline GetNewMarketProposalsResponse() : GetNewMarketProposalsResponse(nullptr) {}
  virtual ~GetNewMarketProposalsResponse();

  GetNewMarketProposalsResponse(const GetNewMarketProposalsResponse& from);
  GetNewMarketProposalsResponse(GetNewMarketProposalsResponse&& from) noexcept
    : GetNewMarketProposalsResponse() {
    *this = ::std::move(from);
  }

  inline GetNewMarketProposalsResponse& operator=(const GetNewMarketProposalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNewMarketProposalsResponse& operator=(GetNewMarketProposalsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNewMarketProposalsResponse& default_instance();

  static inline const GetNewMarketProposalsResponse* internal_default_instance() {
    return reinterpret_cast<const GetNewMarketProposalsResponse*>(
               &_GetNewMarketProposalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetNewMarketProposalsResponse& a, GetNewMarketProposalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNewMarketProposalsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNewMarketProposalsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNewMarketProposalsResponse* New() const final {
    return CreateMaybeMessage<GetNewMarketProposalsResponse>(nullptr);
  }

  GetNewMarketProposalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNewMarketProposalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNewMarketProposalsResponse& from);
  void MergeFrom(const GetNewMarketProposalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNewMarketProposalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetNewMarketProposalsResponse";
  }
  protected:
  explicit GetNewMarketProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::vega::GovernanceData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
      mutable_data();
  private:
  const ::vega::GovernanceData& _internal_data(int index) const;
  ::vega::GovernanceData* _internal_add_data();
  public:
  const ::vega::GovernanceData& data(int index) const;
  ::vega::GovernanceData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
      data() const;

  // @@protoc_insertion_point(class_scope:api.GetNewMarketProposalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetUpdateMarketProposalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetUpdateMarketProposalsRequest) */ {
 public:
  inline GetUpdateMarketProposalsRequest() : GetUpdateMarketProposalsRequest(nullptr) {}
  virtual ~GetUpdateMarketProposalsRequest();

  GetUpdateMarketProposalsRequest(const GetUpdateMarketProposalsRequest& from);
  GetUpdateMarketProposalsRequest(GetUpdateMarketProposalsRequest&& from) noexcept
    : GetUpdateMarketProposalsRequest() {
    *this = ::std::move(from);
  }

  inline GetUpdateMarketProposalsRequest& operator=(const GetUpdateMarketProposalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUpdateMarketProposalsRequest& operator=(GetUpdateMarketProposalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUpdateMarketProposalsRequest& default_instance();

  static inline const GetUpdateMarketProposalsRequest* internal_default_instance() {
    return reinterpret_cast<const GetUpdateMarketProposalsRequest*>(
               &_GetUpdateMarketProposalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetUpdateMarketProposalsRequest& a, GetUpdateMarketProposalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUpdateMarketProposalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUpdateMarketProposalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUpdateMarketProposalsRequest* New() const final {
    return CreateMaybeMessage<GetUpdateMarketProposalsRequest>(nullptr);
  }

  GetUpdateMarketProposalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUpdateMarketProposalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUpdateMarketProposalsRequest& from);
  void MergeFrom(const GetUpdateMarketProposalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUpdateMarketProposalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetUpdateMarketProposalsRequest";
  }
  protected:
  explicit GetUpdateMarketProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kSelectInStateFieldNumber = 2,
  };
  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // .api.OptionalProposalState selectInState = 2 [json_name = "selectInState"];
  bool has_selectinstate() const;
  private:
  bool _internal_has_selectinstate() const;
  public:
  void clear_selectinstate();
  const ::api::OptionalProposalState& selectinstate() const;
  ::api::OptionalProposalState* release_selectinstate();
  ::api::OptionalProposalState* mutable_selectinstate();
  void set_allocated_selectinstate(::api::OptionalProposalState* selectinstate);
  private:
  const ::api::OptionalProposalState& _internal_selectinstate() const;
  ::api::OptionalProposalState* _internal_mutable_selectinstate();
  public:
  void unsafe_arena_set_allocated_selectinstate(
      ::api::OptionalProposalState* selectinstate);
  ::api::OptionalProposalState* unsafe_arena_release_selectinstate();

  // @@protoc_insertion_point(class_scope:api.GetUpdateMarketProposalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::api::OptionalProposalState* selectinstate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetUpdateMarketProposalsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetUpdateMarketProposalsResponse) */ {
 public:
  inline GetUpdateMarketProposalsResponse() : GetUpdateMarketProposalsResponse(nullptr) {}
  virtual ~GetUpdateMarketProposalsResponse();

  GetUpdateMarketProposalsResponse(const GetUpdateMarketProposalsResponse& from);
  GetUpdateMarketProposalsResponse(GetUpdateMarketProposalsResponse&& from) noexcept
    : GetUpdateMarketProposalsResponse() {
    *this = ::std::move(from);
  }

  inline GetUpdateMarketProposalsResponse& operator=(const GetUpdateMarketProposalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUpdateMarketProposalsResponse& operator=(GetUpdateMarketProposalsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUpdateMarketProposalsResponse& default_instance();

  static inline const GetUpdateMarketProposalsResponse* internal_default_instance() {
    return reinterpret_cast<const GetUpdateMarketProposalsResponse*>(
               &_GetUpdateMarketProposalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetUpdateMarketProposalsResponse& a, GetUpdateMarketProposalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUpdateMarketProposalsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUpdateMarketProposalsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUpdateMarketProposalsResponse* New() const final {
    return CreateMaybeMessage<GetUpdateMarketProposalsResponse>(nullptr);
  }

  GetUpdateMarketProposalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUpdateMarketProposalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUpdateMarketProposalsResponse& from);
  void MergeFrom(const GetUpdateMarketProposalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUpdateMarketProposalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetUpdateMarketProposalsResponse";
  }
  protected:
  explicit GetUpdateMarketProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::vega::GovernanceData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
      mutable_data();
  private:
  const ::vega::GovernanceData& _internal_data(int index) const;
  ::vega::GovernanceData* _internal_add_data();
  public:
  const ::vega::GovernanceData& data(int index) const;
  ::vega::GovernanceData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
      data() const;

  // @@protoc_insertion_point(class_scope:api.GetUpdateMarketProposalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNetworkParametersProposalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetNetworkParametersProposalsRequest) */ {
 public:
  inline GetNetworkParametersProposalsRequest() : GetNetworkParametersProposalsRequest(nullptr) {}
  virtual ~GetNetworkParametersProposalsRequest();

  GetNetworkParametersProposalsRequest(const GetNetworkParametersProposalsRequest& from);
  GetNetworkParametersProposalsRequest(GetNetworkParametersProposalsRequest&& from) noexcept
    : GetNetworkParametersProposalsRequest() {
    *this = ::std::move(from);
  }

  inline GetNetworkParametersProposalsRequest& operator=(const GetNetworkParametersProposalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNetworkParametersProposalsRequest& operator=(GetNetworkParametersProposalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNetworkParametersProposalsRequest& default_instance();

  static inline const GetNetworkParametersProposalsRequest* internal_default_instance() {
    return reinterpret_cast<const GetNetworkParametersProposalsRequest*>(
               &_GetNetworkParametersProposalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetNetworkParametersProposalsRequest& a, GetNetworkParametersProposalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNetworkParametersProposalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNetworkParametersProposalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNetworkParametersProposalsRequest* New() const final {
    return CreateMaybeMessage<GetNetworkParametersProposalsRequest>(nullptr);
  }

  GetNetworkParametersProposalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNetworkParametersProposalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNetworkParametersProposalsRequest& from);
  void MergeFrom(const GetNetworkParametersProposalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNetworkParametersProposalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetNetworkParametersProposalsRequest";
  }
  protected:
  explicit GetNetworkParametersProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectInStateFieldNumber = 1,
  };
  // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
  bool has_selectinstate() const;
  private:
  bool _internal_has_selectinstate() const;
  public:
  void clear_selectinstate();
  const ::api::OptionalProposalState& selectinstate() const;
  ::api::OptionalProposalState* release_selectinstate();
  ::api::OptionalProposalState* mutable_selectinstate();
  void set_allocated_selectinstate(::api::OptionalProposalState* selectinstate);
  private:
  const ::api::OptionalProposalState& _internal_selectinstate() const;
  ::api::OptionalProposalState* _internal_mutable_selectinstate();
  public:
  void unsafe_arena_set_allocated_selectinstate(
      ::api::OptionalProposalState* selectinstate);
  ::api::OptionalProposalState* unsafe_arena_release_selectinstate();

  // @@protoc_insertion_point(class_scope:api.GetNetworkParametersProposalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::OptionalProposalState* selectinstate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNetworkParametersProposalsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetNetworkParametersProposalsResponse) */ {
 public:
  inline GetNetworkParametersProposalsResponse() : GetNetworkParametersProposalsResponse(nullptr) {}
  virtual ~GetNetworkParametersProposalsResponse();

  GetNetworkParametersProposalsResponse(const GetNetworkParametersProposalsResponse& from);
  GetNetworkParametersProposalsResponse(GetNetworkParametersProposalsResponse&& from) noexcept
    : GetNetworkParametersProposalsResponse() {
    *this = ::std::move(from);
  }

  inline GetNetworkParametersProposalsResponse& operator=(const GetNetworkParametersProposalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNetworkParametersProposalsResponse& operator=(GetNetworkParametersProposalsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNetworkParametersProposalsResponse& default_instance();

  static inline const GetNetworkParametersProposalsResponse* internal_default_instance() {
    return reinterpret_cast<const GetNetworkParametersProposalsResponse*>(
               &_GetNetworkParametersProposalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetNetworkParametersProposalsResponse& a, GetNetworkParametersProposalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNetworkParametersProposalsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNetworkParametersProposalsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNetworkParametersProposalsResponse* New() const final {
    return CreateMaybeMessage<GetNetworkParametersProposalsResponse>(nullptr);
  }

  GetNetworkParametersProposalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNetworkParametersProposalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNetworkParametersProposalsResponse& from);
  void MergeFrom(const GetNetworkParametersProposalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNetworkParametersProposalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetNetworkParametersProposalsResponse";
  }
  protected:
  explicit GetNetworkParametersProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::vega::GovernanceData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
      mutable_data();
  private:
  const ::vega::GovernanceData& _internal_data(int index) const;
  ::vega::GovernanceData* _internal_add_data();
  public:
  const ::vega::GovernanceData& data(int index) const;
  ::vega::GovernanceData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
      data() const;

  // @@protoc_insertion_point(class_scope:api.GetNetworkParametersProposalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNewAssetProposalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetNewAssetProposalsRequest) */ {
 public:
  inline GetNewAssetProposalsRequest() : GetNewAssetProposalsRequest(nullptr) {}
  virtual ~GetNewAssetProposalsRequest();

  GetNewAssetProposalsRequest(const GetNewAssetProposalsRequest& from);
  GetNewAssetProposalsRequest(GetNewAssetProposalsRequest&& from) noexcept
    : GetNewAssetProposalsRequest() {
    *this = ::std::move(from);
  }

  inline GetNewAssetProposalsRequest& operator=(const GetNewAssetProposalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNewAssetProposalsRequest& operator=(GetNewAssetProposalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNewAssetProposalsRequest& default_instance();

  static inline const GetNewAssetProposalsRequest* internal_default_instance() {
    return reinterpret_cast<const GetNewAssetProposalsRequest*>(
               &_GetNewAssetProposalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetNewAssetProposalsRequest& a, GetNewAssetProposalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNewAssetProposalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNewAssetProposalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNewAssetProposalsRequest* New() const final {
    return CreateMaybeMessage<GetNewAssetProposalsRequest>(nullptr);
  }

  GetNewAssetProposalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNewAssetProposalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNewAssetProposalsRequest& from);
  void MergeFrom(const GetNewAssetProposalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNewAssetProposalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetNewAssetProposalsRequest";
  }
  protected:
  explicit GetNewAssetProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectInStateFieldNumber = 1,
  };
  // .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
  bool has_selectinstate() const;
  private:
  bool _internal_has_selectinstate() const;
  public:
  void clear_selectinstate();
  const ::api::OptionalProposalState& selectinstate() const;
  ::api::OptionalProposalState* release_selectinstate();
  ::api::OptionalProposalState* mutable_selectinstate();
  void set_allocated_selectinstate(::api::OptionalProposalState* selectinstate);
  private:
  const ::api::OptionalProposalState& _internal_selectinstate() const;
  ::api::OptionalProposalState* _internal_mutable_selectinstate();
  public:
  void unsafe_arena_set_allocated_selectinstate(
      ::api::OptionalProposalState* selectinstate);
  ::api::OptionalProposalState* unsafe_arena_release_selectinstate();

  // @@protoc_insertion_point(class_scope:api.GetNewAssetProposalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::OptionalProposalState* selectinstate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetNewAssetProposalsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetNewAssetProposalsResponse) */ {
 public:
  inline GetNewAssetProposalsResponse() : GetNewAssetProposalsResponse(nullptr) {}
  virtual ~GetNewAssetProposalsResponse();

  GetNewAssetProposalsResponse(const GetNewAssetProposalsResponse& from);
  GetNewAssetProposalsResponse(GetNewAssetProposalsResponse&& from) noexcept
    : GetNewAssetProposalsResponse() {
    *this = ::std::move(from);
  }

  inline GetNewAssetProposalsResponse& operator=(const GetNewAssetProposalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNewAssetProposalsResponse& operator=(GetNewAssetProposalsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNewAssetProposalsResponse& default_instance();

  static inline const GetNewAssetProposalsResponse* internal_default_instance() {
    return reinterpret_cast<const GetNewAssetProposalsResponse*>(
               &_GetNewAssetProposalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetNewAssetProposalsResponse& a, GetNewAssetProposalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNewAssetProposalsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNewAssetProposalsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNewAssetProposalsResponse* New() const final {
    return CreateMaybeMessage<GetNewAssetProposalsResponse>(nullptr);
  }

  GetNewAssetProposalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNewAssetProposalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNewAssetProposalsResponse& from);
  void MergeFrom(const GetNewAssetProposalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNewAssetProposalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetNewAssetProposalsResponse";
  }
  protected:
  explicit GetNewAssetProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .vega.GovernanceData data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::vega::GovernanceData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
      mutable_data();
  private:
  const ::vega::GovernanceData& _internal_data(int index) const;
  ::vega::GovernanceData* _internal_add_data();
  public:
  const ::vega::GovernanceData& data(int index) const;
  ::vega::GovernanceData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
      data() const;

  // @@protoc_insertion_point(class_scope:api.GetNewAssetProposalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalByIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetProposalByIDRequest) */ {
 public:
  inline GetProposalByIDRequest() : GetProposalByIDRequest(nullptr) {}
  virtual ~GetProposalByIDRequest();

  GetProposalByIDRequest(const GetProposalByIDRequest& from);
  GetProposalByIDRequest(GetProposalByIDRequest&& from) noexcept
    : GetProposalByIDRequest() {
    *this = ::std::move(from);
  }

  inline GetProposalByIDRequest& operator=(const GetProposalByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalByIDRequest& operator=(GetProposalByIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalByIDRequest& default_instance();

  static inline const GetProposalByIDRequest* internal_default_instance() {
    return reinterpret_cast<const GetProposalByIDRequest*>(
               &_GetProposalByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetProposalByIDRequest& a, GetProposalByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalByIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalByIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalByIDRequest* New() const final {
    return CreateMaybeMessage<GetProposalByIDRequest>(nullptr);
  }

  GetProposalByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalByIDRequest& from);
  void MergeFrom(const GetProposalByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetProposalByIDRequest";
  }
  protected:
  explicit GetProposalByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalIDFieldNumber = 1,
  };
  // string proposalID = 1 [json_name = "proposalID", (.validator.field) = {
  void clear_proposalid();
  const std::string& proposalid() const;
  void set_proposalid(const std::string& value);
  void set_proposalid(std::string&& value);
  void set_proposalid(const char* value);
  void set_proposalid(const char* value, size_t size);
  std::string* mutable_proposalid();
  std::string* release_proposalid();
  void set_allocated_proposalid(std::string* proposalid);
  private:
  const std::string& _internal_proposalid() const;
  void _internal_set_proposalid(const std::string& value);
  std::string* _internal_mutable_proposalid();
  public:

  // @@protoc_insertion_point(class_scope:api.GetProposalByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposalid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalByIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetProposalByIDResponse) */ {
 public:
  inline GetProposalByIDResponse() : GetProposalByIDResponse(nullptr) {}
  virtual ~GetProposalByIDResponse();

  GetProposalByIDResponse(const GetProposalByIDResponse& from);
  GetProposalByIDResponse(GetProposalByIDResponse&& from) noexcept
    : GetProposalByIDResponse() {
    *this = ::std::move(from);
  }

  inline GetProposalByIDResponse& operator=(const GetProposalByIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalByIDResponse& operator=(GetProposalByIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalByIDResponse& default_instance();

  static inline const GetProposalByIDResponse* internal_default_instance() {
    return reinterpret_cast<const GetProposalByIDResponse*>(
               &_GetProposalByIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetProposalByIDResponse& a, GetProposalByIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalByIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalByIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalByIDResponse* New() const final {
    return CreateMaybeMessage<GetProposalByIDResponse>(nullptr);
  }

  GetProposalByIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalByIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalByIDResponse& from);
  void MergeFrom(const GetProposalByIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalByIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetProposalByIDResponse";
  }
  protected:
  explicit GetProposalByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .vega.GovernanceData data = 1 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::vega::GovernanceData& data() const;
  ::vega::GovernanceData* release_data();
  ::vega::GovernanceData* mutable_data();
  void set_allocated_data(::vega::GovernanceData* data);
  private:
  const ::vega::GovernanceData& _internal_data() const;
  ::vega::GovernanceData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::vega::GovernanceData* data);
  ::vega::GovernanceData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:api.GetProposalByIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::GovernanceData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalByReferenceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetProposalByReferenceRequest) */ {
 public:
  inline GetProposalByReferenceRequest() : GetProposalByReferenceRequest(nullptr) {}
  virtual ~GetProposalByReferenceRequest();

  GetProposalByReferenceRequest(const GetProposalByReferenceRequest& from);
  GetProposalByReferenceRequest(GetProposalByReferenceRequest&& from) noexcept
    : GetProposalByReferenceRequest() {
    *this = ::std::move(from);
  }

  inline GetProposalByReferenceRequest& operator=(const GetProposalByReferenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalByReferenceRequest& operator=(GetProposalByReferenceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalByReferenceRequest& default_instance();

  static inline const GetProposalByReferenceRequest* internal_default_instance() {
    return reinterpret_cast<const GetProposalByReferenceRequest*>(
               &_GetProposalByReferenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetProposalByReferenceRequest& a, GetProposalByReferenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalByReferenceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalByReferenceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalByReferenceRequest* New() const final {
    return CreateMaybeMessage<GetProposalByReferenceRequest>(nullptr);
  }

  GetProposalByReferenceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalByReferenceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalByReferenceRequest& from);
  void MergeFrom(const GetProposalByReferenceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalByReferenceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetProposalByReferenceRequest";
  }
  protected:
  explicit GetProposalByReferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFieldNumber = 1,
  };
  // string reference = 1 [json_name = "reference", (.validator.field) = {
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // @@protoc_insertion_point(class_scope:api.GetProposalByReferenceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class GetProposalByReferenceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.GetProposalByReferenceResponse) */ {
 public:
  inline GetProposalByReferenceResponse() : GetProposalByReferenceResponse(nullptr) {}
  virtual ~GetProposalByReferenceResponse();

  GetProposalByReferenceResponse(const GetProposalByReferenceResponse& from);
  GetProposalByReferenceResponse(GetProposalByReferenceResponse&& from) noexcept
    : GetProposalByReferenceResponse() {
    *this = ::std::move(from);
  }

  inline GetProposalByReferenceResponse& operator=(const GetProposalByReferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProposalByReferenceResponse& operator=(GetProposalByReferenceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProposalByReferenceResponse& default_instance();

  static inline const GetProposalByReferenceResponse* internal_default_instance() {
    return reinterpret_cast<const GetProposalByReferenceResponse*>(
               &_GetProposalByReferenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetProposalByReferenceResponse& a, GetProposalByReferenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProposalByReferenceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProposalByReferenceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProposalByReferenceResponse* New() const final {
    return CreateMaybeMessage<GetProposalByReferenceResponse>(nullptr);
  }

  GetProposalByReferenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProposalByReferenceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProposalByReferenceResponse& from);
  void MergeFrom(const GetProposalByReferenceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProposalByReferenceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.GetProposalByReferenceResponse";
  }
  protected:
  explicit GetProposalByReferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .vega.GovernanceData data = 1 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::vega::GovernanceData& data() const;
  ::vega::GovernanceData* release_data();
  ::vega::GovernanceData* mutable_data();
  void set_allocated_data(::vega::GovernanceData* data);
  private:
  const ::vega::GovernanceData& _internal_data() const;
  ::vega::GovernanceData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::vega::GovernanceData* data);
  ::vega::GovernanceData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:api.GetProposalByReferenceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::GovernanceData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObservePartyProposalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ObservePartyProposalsRequest) */ {
 public:
  inline ObservePartyProposalsRequest() : ObservePartyProposalsRequest(nullptr) {}
  virtual ~ObservePartyProposalsRequest();

  ObservePartyProposalsRequest(const ObservePartyProposalsRequest& from);
  ObservePartyProposalsRequest(ObservePartyProposalsRequest&& from) noexcept
    : ObservePartyProposalsRequest() {
    *this = ::std::move(from);
  }

  inline ObservePartyProposalsRequest& operator=(const ObservePartyProposalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObservePartyProposalsRequest& operator=(ObservePartyProposalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObservePartyProposalsRequest& default_instance();

  static inline const ObservePartyProposalsRequest* internal_default_instance() {
    return reinterpret_cast<const ObservePartyProposalsRequest*>(
               &_ObservePartyProposalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ObservePartyProposalsRequest& a, ObservePartyProposalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ObservePartyProposalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObservePartyProposalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObservePartyProposalsRequest* New() const final {
    return CreateMaybeMessage<ObservePartyProposalsRequest>(nullptr);
  }

  ObservePartyProposalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObservePartyProposalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObservePartyProposalsRequest& from);
  void MergeFrom(const ObservePartyProposalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservePartyProposalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ObservePartyProposalsRequest";
  }
  protected:
  explicit ObservePartyProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
  };
  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // @@protoc_insertion_point(class_scope:api.ObservePartyProposalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObserveProposalVotesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ObserveProposalVotesRequest) */ {
 public:
  inline ObserveProposalVotesRequest() : ObserveProposalVotesRequest(nullptr) {}
  virtual ~ObserveProposalVotesRequest();

  ObserveProposalVotesRequest(const ObserveProposalVotesRequest& from);
  ObserveProposalVotesRequest(ObserveProposalVotesRequest&& from) noexcept
    : ObserveProposalVotesRequest() {
    *this = ::std::move(from);
  }

  inline ObserveProposalVotesRequest& operator=(const ObserveProposalVotesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObserveProposalVotesRequest& operator=(ObserveProposalVotesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObserveProposalVotesRequest& default_instance();

  static inline const ObserveProposalVotesRequest* internal_default_instance() {
    return reinterpret_cast<const ObserveProposalVotesRequest*>(
               &_ObserveProposalVotesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ObserveProposalVotesRequest& a, ObserveProposalVotesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ObserveProposalVotesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObserveProposalVotesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObserveProposalVotesRequest* New() const final {
    return CreateMaybeMessage<ObserveProposalVotesRequest>(nullptr);
  }

  ObserveProposalVotesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObserveProposalVotesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObserveProposalVotesRequest& from);
  void MergeFrom(const ObserveProposalVotesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObserveProposalVotesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ObserveProposalVotesRequest";
  }
  protected:
  explicit ObserveProposalVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalIDFieldNumber = 1,
  };
  // string proposalID = 1 [json_name = "proposalID", (.validator.field) = {
  void clear_proposalid();
  const std::string& proposalid() const;
  void set_proposalid(const std::string& value);
  void set_proposalid(std::string&& value);
  void set_proposalid(const char* value);
  void set_proposalid(const char* value, size_t size);
  std::string* mutable_proposalid();
  std::string* release_proposalid();
  void set_allocated_proposalid(std::string* proposalid);
  private:
  const std::string& _internal_proposalid() const;
  void _internal_set_proposalid(const std::string& value);
  std::string* _internal_mutable_proposalid();
  public:

  // @@protoc_insertion_point(class_scope:api.ObserveProposalVotesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposalid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObservePartyVotesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ObservePartyVotesRequest) */ {
 public:
  inline ObservePartyVotesRequest() : ObservePartyVotesRequest(nullptr) {}
  virtual ~ObservePartyVotesRequest();

  ObservePartyVotesRequest(const ObservePartyVotesRequest& from);
  ObservePartyVotesRequest(ObservePartyVotesRequest&& from) noexcept
    : ObservePartyVotesRequest() {
    *this = ::std::move(from);
  }

  inline ObservePartyVotesRequest& operator=(const ObservePartyVotesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObservePartyVotesRequest& operator=(ObservePartyVotesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObservePartyVotesRequest& default_instance();

  static inline const ObservePartyVotesRequest* internal_default_instance() {
    return reinterpret_cast<const ObservePartyVotesRequest*>(
               &_ObservePartyVotesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ObservePartyVotesRequest& a, ObservePartyVotesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ObservePartyVotesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObservePartyVotesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObservePartyVotesRequest* New() const final {
    return CreateMaybeMessage<ObservePartyVotesRequest>(nullptr);
  }

  ObservePartyVotesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObservePartyVotesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObservePartyVotesRequest& from);
  void MergeFrom(const ObservePartyVotesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservePartyVotesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ObservePartyVotesRequest";
  }
  protected:
  explicit ObservePartyVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
  };
  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // @@protoc_insertion_point(class_scope:api.ObservePartyVotesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarginLevelsSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarginLevelsSubscribeRequest) */ {
 public:
  inline MarginLevelsSubscribeRequest() : MarginLevelsSubscribeRequest(nullptr) {}
  virtual ~MarginLevelsSubscribeRequest();

  MarginLevelsSubscribeRequest(const MarginLevelsSubscribeRequest& from);
  MarginLevelsSubscribeRequest(MarginLevelsSubscribeRequest&& from) noexcept
    : MarginLevelsSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline MarginLevelsSubscribeRequest& operator=(const MarginLevelsSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarginLevelsSubscribeRequest& operator=(MarginLevelsSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarginLevelsSubscribeRequest& default_instance();

  static inline const MarginLevelsSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const MarginLevelsSubscribeRequest*>(
               &_MarginLevelsSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(MarginLevelsSubscribeRequest& a, MarginLevelsSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarginLevelsSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarginLevelsSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarginLevelsSubscribeRequest* New() const final {
    return CreateMaybeMessage<MarginLevelsSubscribeRequest>(nullptr);
  }

  MarginLevelsSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarginLevelsSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarginLevelsSubscribeRequest& from);
  void MergeFrom(const MarginLevelsSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarginLevelsSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarginLevelsSubscribeRequest";
  }
  protected:
  explicit MarginLevelsSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
    kMarketIDFieldNumber = 2,
  };
  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string marketID = 2 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // @@protoc_insertion_point(class_scope:api.MarginLevelsSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarginLevelsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarginLevelsRequest) */ {
 public:
  inline MarginLevelsRequest() : MarginLevelsRequest(nullptr) {}
  virtual ~MarginLevelsRequest();

  MarginLevelsRequest(const MarginLevelsRequest& from);
  MarginLevelsRequest(MarginLevelsRequest&& from) noexcept
    : MarginLevelsRequest() {
    *this = ::std::move(from);
  }

  inline MarginLevelsRequest& operator=(const MarginLevelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarginLevelsRequest& operator=(MarginLevelsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarginLevelsRequest& default_instance();

  static inline const MarginLevelsRequest* internal_default_instance() {
    return reinterpret_cast<const MarginLevelsRequest*>(
               &_MarginLevelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(MarginLevelsRequest& a, MarginLevelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarginLevelsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarginLevelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarginLevelsRequest* New() const final {
    return CreateMaybeMessage<MarginLevelsRequest>(nullptr);
  }

  MarginLevelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarginLevelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarginLevelsRequest& from);
  void MergeFrom(const MarginLevelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarginLevelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarginLevelsRequest";
  }
  protected:
  explicit MarginLevelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
    kMarketIDFieldNumber = 2,
  };
  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string marketID = 2 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // @@protoc_insertion_point(class_scope:api.MarginLevelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarginLevelsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarginLevelsResponse) */ {
 public:
  inline MarginLevelsResponse() : MarginLevelsResponse(nullptr) {}
  virtual ~MarginLevelsResponse();

  MarginLevelsResponse(const MarginLevelsResponse& from);
  MarginLevelsResponse(MarginLevelsResponse&& from) noexcept
    : MarginLevelsResponse() {
    *this = ::std::move(from);
  }

  inline MarginLevelsResponse& operator=(const MarginLevelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarginLevelsResponse& operator=(MarginLevelsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarginLevelsResponse& default_instance();

  static inline const MarginLevelsResponse* internal_default_instance() {
    return reinterpret_cast<const MarginLevelsResponse*>(
               &_MarginLevelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(MarginLevelsResponse& a, MarginLevelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarginLevelsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarginLevelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarginLevelsResponse* New() const final {
    return CreateMaybeMessage<MarginLevelsResponse>(nullptr);
  }

  MarginLevelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarginLevelsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarginLevelsResponse& from);
  void MergeFrom(const MarginLevelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarginLevelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarginLevelsResponse";
  }
  protected:
  explicit MarginLevelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarginLevelsFieldNumber = 1,
  };
  // repeated .vega.MarginLevels marginLevels = 1 [json_name = "marginLevels"];
  int marginlevels_size() const;
  private:
  int _internal_marginlevels_size() const;
  public:
  void clear_marginlevels();
  ::vega::MarginLevels* mutable_marginlevels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarginLevels >*
      mutable_marginlevels();
  private:
  const ::vega::MarginLevels& _internal_marginlevels(int index) const;
  ::vega::MarginLevels* _internal_add_marginlevels();
  public:
  const ::vega::MarginLevels& marginlevels(int index) const;
  ::vega::MarginLevels* add_marginlevels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarginLevels >&
      marginlevels() const;

  // @@protoc_insertion_point(class_scope:api.MarginLevelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarginLevels > marginlevels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketsDataSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarketsDataSubscribeRequest) */ {
 public:
  inline MarketsDataSubscribeRequest() : MarketsDataSubscribeRequest(nullptr) {}
  virtual ~MarketsDataSubscribeRequest();

  MarketsDataSubscribeRequest(const MarketsDataSubscribeRequest& from);
  MarketsDataSubscribeRequest(MarketsDataSubscribeRequest&& from) noexcept
    : MarketsDataSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline MarketsDataSubscribeRequest& operator=(const MarketsDataSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketsDataSubscribeRequest& operator=(MarketsDataSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketsDataSubscribeRequest& default_instance();

  static inline const MarketsDataSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const MarketsDataSubscribeRequest*>(
               &_MarketsDataSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(MarketsDataSubscribeRequest& a, MarketsDataSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketsDataSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketsDataSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketsDataSubscribeRequest* New() const final {
    return CreateMaybeMessage<MarketsDataSubscribeRequest>(nullptr);
  }

  MarketsDataSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketsDataSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketsDataSubscribeRequest& from);
  void MergeFrom(const MarketsDataSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketsDataSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarketsDataSubscribeRequest";
  }
  protected:
  explicit MarketsDataSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
  };
  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // @@protoc_insertion_point(class_scope:api.MarketsDataSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketDataByIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarketDataByIDRequest) */ {
 public:
  inline MarketDataByIDRequest() : MarketDataByIDRequest(nullptr) {}
  virtual ~MarketDataByIDRequest();

  MarketDataByIDRequest(const MarketDataByIDRequest& from);
  MarketDataByIDRequest(MarketDataByIDRequest&& from) noexcept
    : MarketDataByIDRequest() {
    *this = ::std::move(from);
  }

  inline MarketDataByIDRequest& operator=(const MarketDataByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDataByIDRequest& operator=(MarketDataByIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDataByIDRequest& default_instance();

  static inline const MarketDataByIDRequest* internal_default_instance() {
    return reinterpret_cast<const MarketDataByIDRequest*>(
               &_MarketDataByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(MarketDataByIDRequest& a, MarketDataByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDataByIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDataByIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDataByIDRequest* New() const final {
    return CreateMaybeMessage<MarketDataByIDRequest>(nullptr);
  }

  MarketDataByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDataByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDataByIDRequest& from);
  void MergeFrom(const MarketDataByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDataByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarketDataByIDRequest";
  }
  protected:
  explicit MarketDataByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
  };
  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // @@protoc_insertion_point(class_scope:api.MarketDataByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketDataByIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarketDataByIDResponse) */ {
 public:
  inline MarketDataByIDResponse() : MarketDataByIDResponse(nullptr) {}
  virtual ~MarketDataByIDResponse();

  MarketDataByIDResponse(const MarketDataByIDResponse& from);
  MarketDataByIDResponse(MarketDataByIDResponse&& from) noexcept
    : MarketDataByIDResponse() {
    *this = ::std::move(from);
  }

  inline MarketDataByIDResponse& operator=(const MarketDataByIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDataByIDResponse& operator=(MarketDataByIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDataByIDResponse& default_instance();

  static inline const MarketDataByIDResponse* internal_default_instance() {
    return reinterpret_cast<const MarketDataByIDResponse*>(
               &_MarketDataByIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(MarketDataByIDResponse& a, MarketDataByIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDataByIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDataByIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDataByIDResponse* New() const final {
    return CreateMaybeMessage<MarketDataByIDResponse>(nullptr);
  }

  MarketDataByIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDataByIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDataByIDResponse& from);
  void MergeFrom(const MarketDataByIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDataByIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarketDataByIDResponse";
  }
  protected:
  explicit MarketDataByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketDataFieldNumber = 1,
  };
  // .vega.MarketData marketData = 1 [json_name = "marketData"];
  bool has_marketdata() const;
  private:
  bool _internal_has_marketdata() const;
  public:
  void clear_marketdata();
  const ::vega::MarketData& marketdata() const;
  ::vega::MarketData* release_marketdata();
  ::vega::MarketData* mutable_marketdata();
  void set_allocated_marketdata(::vega::MarketData* marketdata);
  private:
  const ::vega::MarketData& _internal_marketdata() const;
  ::vega::MarketData* _internal_mutable_marketdata();
  public:
  void unsafe_arena_set_allocated_marketdata(
      ::vega::MarketData* marketdata);
  ::vega::MarketData* unsafe_arena_release_marketdata();

  // @@protoc_insertion_point(class_scope:api.MarketDataByIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::MarketData* marketdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketsDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarketsDataResponse) */ {
 public:
  inline MarketsDataResponse() : MarketsDataResponse(nullptr) {}
  virtual ~MarketsDataResponse();

  MarketsDataResponse(const MarketsDataResponse& from);
  MarketsDataResponse(MarketsDataResponse&& from) noexcept
    : MarketsDataResponse() {
    *this = ::std::move(from);
  }

  inline MarketsDataResponse& operator=(const MarketsDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketsDataResponse& operator=(MarketsDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketsDataResponse& default_instance();

  static inline const MarketsDataResponse* internal_default_instance() {
    return reinterpret_cast<const MarketsDataResponse*>(
               &_MarketsDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(MarketsDataResponse& a, MarketsDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketsDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketsDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketsDataResponse* New() const final {
    return CreateMaybeMessage<MarketsDataResponse>(nullptr);
  }

  MarketsDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketsDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketsDataResponse& from);
  void MergeFrom(const MarketsDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketsDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarketsDataResponse";
  }
  protected:
  explicit MarketsDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketsDataFieldNumber = 1,
  };
  // repeated .vega.MarketData marketsData = 1 [json_name = "marketsData"];
  int marketsdata_size() const;
  private:
  int _internal_marketsdata_size() const;
  public:
  void clear_marketsdata();
  ::vega::MarketData* mutable_marketsdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarketData >*
      mutable_marketsdata();
  private:
  const ::vega::MarketData& _internal_marketsdata(int index) const;
  ::vega::MarketData* _internal_add_marketsdata();
  public:
  const ::vega::MarketData& marketsdata(int index) const;
  ::vega::MarketData* add_marketsdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarketData >&
      marketsdata() const;

  // @@protoc_insertion_point(class_scope:api.MarketsDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarketData > marketsdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class LastTradeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.LastTradeRequest) */ {
 public:
  inline LastTradeRequest() : LastTradeRequest(nullptr) {}
  virtual ~LastTradeRequest();

  LastTradeRequest(const LastTradeRequest& from);
  LastTradeRequest(LastTradeRequest&& from) noexcept
    : LastTradeRequest() {
    *this = ::std::move(from);
  }

  inline LastTradeRequest& operator=(const LastTradeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastTradeRequest& operator=(LastTradeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LastTradeRequest& default_instance();

  static inline const LastTradeRequest* internal_default_instance() {
    return reinterpret_cast<const LastTradeRequest*>(
               &_LastTradeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(LastTradeRequest& a, LastTradeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LastTradeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastTradeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LastTradeRequest* New() const final {
    return CreateMaybeMessage<LastTradeRequest>(nullptr);
  }

  LastTradeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LastTradeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LastTradeRequest& from);
  void MergeFrom(const LastTradeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastTradeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.LastTradeRequest";
  }
  protected:
  explicit LastTradeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
  };
  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // @@protoc_insertion_point(class_scope:api.LastTradeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class LastTradeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.LastTradeResponse) */ {
 public:
  inline LastTradeResponse() : LastTradeResponse(nullptr) {}
  virtual ~LastTradeResponse();

  LastTradeResponse(const LastTradeResponse& from);
  LastTradeResponse(LastTradeResponse&& from) noexcept
    : LastTradeResponse() {
    *this = ::std::move(from);
  }

  inline LastTradeResponse& operator=(const LastTradeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastTradeResponse& operator=(LastTradeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LastTradeResponse& default_instance();

  static inline const LastTradeResponse* internal_default_instance() {
    return reinterpret_cast<const LastTradeResponse*>(
               &_LastTradeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(LastTradeResponse& a, LastTradeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LastTradeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastTradeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LastTradeResponse* New() const final {
    return CreateMaybeMessage<LastTradeResponse>(nullptr);
  }

  LastTradeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LastTradeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LastTradeResponse& from);
  void MergeFrom(const LastTradeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastTradeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.LastTradeResponse";
  }
  protected:
  explicit LastTradeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeFieldNumber = 1,
  };
  // .vega.Trade trade = 1 [json_name = "trade"];
  bool has_trade() const;
  private:
  bool _internal_has_trade() const;
  public:
  void clear_trade();
  const ::vega::Trade& trade() const;
  ::vega::Trade* release_trade();
  ::vega::Trade* mutable_trade();
  void set_allocated_trade(::vega::Trade* trade);
  private:
  const ::vega::Trade& _internal_trade() const;
  ::vega::Trade* _internal_mutable_trade();
  public:
  void unsafe_arena_set_allocated_trade(
      ::vega::Trade* trade);
  ::vega::Trade* unsafe_arena_release_trade();

  // @@protoc_insertion_point(class_scope:api.LastTradeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Trade* trade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketByIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarketByIDRequest) */ {
 public:
  inline MarketByIDRequest() : MarketByIDRequest(nullptr) {}
  virtual ~MarketByIDRequest();

  MarketByIDRequest(const MarketByIDRequest& from);
  MarketByIDRequest(MarketByIDRequest&& from) noexcept
    : MarketByIDRequest() {
    *this = ::std::move(from);
  }

  inline MarketByIDRequest& operator=(const MarketByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByIDRequest& operator=(MarketByIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByIDRequest& default_instance();

  static inline const MarketByIDRequest* internal_default_instance() {
    return reinterpret_cast<const MarketByIDRequest*>(
               &_MarketByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(MarketByIDRequest& a, MarketByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByIDRequest* New() const final {
    return CreateMaybeMessage<MarketByIDRequest>(nullptr);
  }

  MarketByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByIDRequest& from);
  void MergeFrom(const MarketByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarketByIDRequest";
  }
  protected:
  explicit MarketByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
  };
  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // @@protoc_insertion_point(class_scope:api.MarketByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketByIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarketByIDResponse) */ {
 public:
  inline MarketByIDResponse() : MarketByIDResponse(nullptr) {}
  virtual ~MarketByIDResponse();

  MarketByIDResponse(const MarketByIDResponse& from);
  MarketByIDResponse(MarketByIDResponse&& from) noexcept
    : MarketByIDResponse() {
    *this = ::std::move(from);
  }

  inline MarketByIDResponse& operator=(const MarketByIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByIDResponse& operator=(MarketByIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketByIDResponse& default_instance();

  static inline const MarketByIDResponse* internal_default_instance() {
    return reinterpret_cast<const MarketByIDResponse*>(
               &_MarketByIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(MarketByIDResponse& a, MarketByIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketByIDResponse* New() const final {
    return CreateMaybeMessage<MarketByIDResponse>(nullptr);
  }

  MarketByIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketByIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketByIDResponse& from);
  void MergeFrom(const MarketByIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarketByIDResponse";
  }
  protected:
  explicit MarketByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketFieldNumber = 1,
  };
  // .vega.Market market = 1 [json_name = "market"];
  bool has_market() const;
  private:
  bool _internal_has_market() const;
  public:
  void clear_market();
  const ::vega::Market& market() const;
  ::vega::Market* release_market();
  ::vega::Market* mutable_market();
  void set_allocated_market(::vega::Market* market);
  private:
  const ::vega::Market& _internal_market() const;
  ::vega::Market* _internal_mutable_market();
  public:
  void unsafe_arena_set_allocated_market(
      ::vega::Market* market);
  ::vega::Market* unsafe_arena_release_market();

  // @@protoc_insertion_point(class_scope:api.MarketByIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Market* market_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PartyByIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PartyByIDRequest) */ {
 public:
  inline PartyByIDRequest() : PartyByIDRequest(nullptr) {}
  virtual ~PartyByIDRequest();

  PartyByIDRequest(const PartyByIDRequest& from);
  PartyByIDRequest(PartyByIDRequest&& from) noexcept
    : PartyByIDRequest() {
    *this = ::std::move(from);
  }

  inline PartyByIDRequest& operator=(const PartyByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyByIDRequest& operator=(PartyByIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyByIDRequest& default_instance();

  static inline const PartyByIDRequest* internal_default_instance() {
    return reinterpret_cast<const PartyByIDRequest*>(
               &_PartyByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(PartyByIDRequest& a, PartyByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyByIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyByIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyByIDRequest* New() const final {
    return CreateMaybeMessage<PartyByIDRequest>(nullptr);
  }

  PartyByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyByIDRequest& from);
  void MergeFrom(const PartyByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PartyByIDRequest";
  }
  protected:
  explicit PartyByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
  };
  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // @@protoc_insertion_point(class_scope:api.PartyByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PartyByIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PartyByIDResponse) */ {
 public:
  inline PartyByIDResponse() : PartyByIDResponse(nullptr) {}
  virtual ~PartyByIDResponse();

  PartyByIDResponse(const PartyByIDResponse& from);
  PartyByIDResponse(PartyByIDResponse&& from) noexcept
    : PartyByIDResponse() {
    *this = ::std::move(from);
  }

  inline PartyByIDResponse& operator=(const PartyByIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyByIDResponse& operator=(PartyByIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyByIDResponse& default_instance();

  static inline const PartyByIDResponse* internal_default_instance() {
    return reinterpret_cast<const PartyByIDResponse*>(
               &_PartyByIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(PartyByIDResponse& a, PartyByIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyByIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyByIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyByIDResponse* New() const final {
    return CreateMaybeMessage<PartyByIDResponse>(nullptr);
  }

  PartyByIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyByIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyByIDResponse& from);
  void MergeFrom(const PartyByIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyByIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PartyByIDResponse";
  }
  protected:
  explicit PartyByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyFieldNumber = 1,
  };
  // .vega.Party party = 1 [json_name = "party"];
  bool has_party() const;
  private:
  bool _internal_has_party() const;
  public:
  void clear_party();
  const ::vega::Party& party() const;
  ::vega::Party* release_party();
  ::vega::Party* mutable_party();
  void set_allocated_party(::vega::Party* party);
  private:
  const ::vega::Party& _internal_party() const;
  ::vega::Party* _internal_mutable_party();
  public:
  void unsafe_arena_set_allocated_party(
      ::vega::Party* party);
  ::vega::Party* unsafe_arena_release_party();

  // @@protoc_insertion_point(class_scope:api.PartyByIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Party* party_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PartiesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PartiesResponse) */ {
 public:
  inline PartiesResponse() : PartiesResponse(nullptr) {}
  virtual ~PartiesResponse();

  PartiesResponse(const PartiesResponse& from);
  PartiesResponse(PartiesResponse&& from) noexcept
    : PartiesResponse() {
    *this = ::std::move(from);
  }

  inline PartiesResponse& operator=(const PartiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartiesResponse& operator=(PartiesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartiesResponse& default_instance();

  static inline const PartiesResponse* internal_default_instance() {
    return reinterpret_cast<const PartiesResponse*>(
               &_PartiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(PartiesResponse& a, PartiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PartiesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartiesResponse* New() const final {
    return CreateMaybeMessage<PartiesResponse>(nullptr);
  }

  PartiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartiesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartiesResponse& from);
  void MergeFrom(const PartiesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartiesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PartiesResponse";
  }
  protected:
  explicit PartiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartiesFieldNumber = 1,
  };
  // repeated .vega.Party parties = 1 [json_name = "parties"];
  int parties_size() const;
  private:
  int _internal_parties_size() const;
  public:
  void clear_parties();
  ::vega::Party* mutable_parties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Party >*
      mutable_parties();
  private:
  const ::vega::Party& _internal_parties(int index) const;
  ::vega::Party* _internal_add_parties();
  public:
  const ::vega::Party& parties(int index) const;
  ::vega::Party* add_parties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Party >&
      parties() const;

  // @@protoc_insertion_point(class_scope:api.PartiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Party > parties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesByPartyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.TradesByPartyRequest) */ {
 public:
  inline TradesByPartyRequest() : TradesByPartyRequest(nullptr) {}
  virtual ~TradesByPartyRequest();

  TradesByPartyRequest(const TradesByPartyRequest& from);
  TradesByPartyRequest(TradesByPartyRequest&& from) noexcept
    : TradesByPartyRequest() {
    *this = ::std::move(from);
  }

  inline TradesByPartyRequest& operator=(const TradesByPartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesByPartyRequest& operator=(TradesByPartyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesByPartyRequest& default_instance();

  static inline const TradesByPartyRequest* internal_default_instance() {
    return reinterpret_cast<const TradesByPartyRequest*>(
               &_TradesByPartyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(TradesByPartyRequest& a, TradesByPartyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesByPartyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesByPartyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesByPartyRequest* New() const final {
    return CreateMaybeMessage<TradesByPartyRequest>(nullptr);
  }

  TradesByPartyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesByPartyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesByPartyRequest& from);
  void MergeFrom(const TradesByPartyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesByPartyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.TradesByPartyRequest";
  }
  protected:
  explicit TradesByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
    kMarketIDFieldNumber = 2,
    kPaginationFieldNumber = 3,
  };
  // string partyID = 1 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string marketID = 2 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // .api.Pagination pagination = 3 [json_name = "pagination"];
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::api::Pagination& pagination() const;
  ::api::Pagination* release_pagination();
  ::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::api::Pagination* pagination);
  private:
  const ::api::Pagination& _internal_pagination() const;
  ::api::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::api::Pagination* pagination);
  ::api::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:api.TradesByPartyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesByPartyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.TradesByPartyResponse) */ {
 public:
  inline TradesByPartyResponse() : TradesByPartyResponse(nullptr) {}
  virtual ~TradesByPartyResponse();

  TradesByPartyResponse(const TradesByPartyResponse& from);
  TradesByPartyResponse(TradesByPartyResponse&& from) noexcept
    : TradesByPartyResponse() {
    *this = ::std::move(from);
  }

  inline TradesByPartyResponse& operator=(const TradesByPartyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesByPartyResponse& operator=(TradesByPartyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesByPartyResponse& default_instance();

  static inline const TradesByPartyResponse* internal_default_instance() {
    return reinterpret_cast<const TradesByPartyResponse*>(
               &_TradesByPartyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(TradesByPartyResponse& a, TradesByPartyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesByPartyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesByPartyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesByPartyResponse* New() const final {
    return CreateMaybeMessage<TradesByPartyResponse>(nullptr);
  }

  TradesByPartyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesByPartyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesByPartyResponse& from);
  void MergeFrom(const TradesByPartyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesByPartyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.TradesByPartyResponse";
  }
  protected:
  explicit TradesByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::vega::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
      mutable_trades();
  private:
  const ::vega::Trade& _internal_trades(int index) const;
  ::vega::Trade* _internal_add_trades();
  public:
  const ::vega::Trade& trades(int index) const;
  ::vega::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:api.TradesByPartyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade > trades_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesByOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.TradesByOrderRequest) */ {
 public:
  inline TradesByOrderRequest() : TradesByOrderRequest(nullptr) {}
  virtual ~TradesByOrderRequest();

  TradesByOrderRequest(const TradesByOrderRequest& from);
  TradesByOrderRequest(TradesByOrderRequest&& from) noexcept
    : TradesByOrderRequest() {
    *this = ::std::move(from);
  }

  inline TradesByOrderRequest& operator=(const TradesByOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesByOrderRequest& operator=(TradesByOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesByOrderRequest& default_instance();

  static inline const TradesByOrderRequest* internal_default_instance() {
    return reinterpret_cast<const TradesByOrderRequest*>(
               &_TradesByOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(TradesByOrderRequest& a, TradesByOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesByOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesByOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesByOrderRequest* New() const final {
    return CreateMaybeMessage<TradesByOrderRequest>(nullptr);
  }

  TradesByOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesByOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesByOrderRequest& from);
  void MergeFrom(const TradesByOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesByOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.TradesByOrderRequest";
  }
  protected:
  explicit TradesByOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIDFieldNumber = 1,
  };
  // string orderID = 1 [json_name = "orderID"];
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // @@protoc_insertion_point(class_scope:api.TradesByOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesByOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.TradesByOrderResponse) */ {
 public:
  inline TradesByOrderResponse() : TradesByOrderResponse(nullptr) {}
  virtual ~TradesByOrderResponse();

  TradesByOrderResponse(const TradesByOrderResponse& from);
  TradesByOrderResponse(TradesByOrderResponse&& from) noexcept
    : TradesByOrderResponse() {
    *this = ::std::move(from);
  }

  inline TradesByOrderResponse& operator=(const TradesByOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesByOrderResponse& operator=(TradesByOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesByOrderResponse& default_instance();

  static inline const TradesByOrderResponse* internal_default_instance() {
    return reinterpret_cast<const TradesByOrderResponse*>(
               &_TradesByOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(TradesByOrderResponse& a, TradesByOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesByOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesByOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesByOrderResponse* New() const final {
    return CreateMaybeMessage<TradesByOrderResponse>(nullptr);
  }

  TradesByOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesByOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesByOrderResponse& from);
  void MergeFrom(const TradesByOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesByOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.TradesByOrderResponse";
  }
  protected:
  explicit TradesByOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::vega::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
      mutable_trades();
  private:
  const ::vega::Trade& _internal_trades(int index) const;
  ::vega::Trade* _internal_add_trades();
  public:
  const ::vega::Trade& trades(int index) const;
  ::vega::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:api.TradesByOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade > trades_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class AccountsSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.AccountsSubscribeRequest) */ {
 public:
  inline AccountsSubscribeRequest() : AccountsSubscribeRequest(nullptr) {}
  virtual ~AccountsSubscribeRequest();

  AccountsSubscribeRequest(const AccountsSubscribeRequest& from);
  AccountsSubscribeRequest(AccountsSubscribeRequest&& from) noexcept
    : AccountsSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline AccountsSubscribeRequest& operator=(const AccountsSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountsSubscribeRequest& operator=(AccountsSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountsSubscribeRequest& default_instance();

  static inline const AccountsSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const AccountsSubscribeRequest*>(
               &_AccountsSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(AccountsSubscribeRequest& a, AccountsSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountsSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountsSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountsSubscribeRequest* New() const final {
    return CreateMaybeMessage<AccountsSubscribeRequest>(nullptr);
  }

  AccountsSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountsSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountsSubscribeRequest& from);
  void MergeFrom(const AccountsSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountsSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.AccountsSubscribeRequest";
  }
  protected:
  explicit AccountsSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kPartyIDFieldNumber = 2,
    kAssetFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string partyID = 2 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string asset = 3 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // .vega.AccountType type = 4 [json_name = "type"];
  void clear_type();
  ::vega::AccountType type() const;
  void set_type(::vega::AccountType value);
  private:
  ::vega::AccountType _internal_type() const;
  void _internal_set_type(::vega::AccountType value);
  public:

  // @@protoc_insertion_point(class_scope:api.AccountsSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrdersSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.OrdersSubscribeRequest) */ {
 public:
  inline OrdersSubscribeRequest() : OrdersSubscribeRequest(nullptr) {}
  virtual ~OrdersSubscribeRequest();

  OrdersSubscribeRequest(const OrdersSubscribeRequest& from);
  OrdersSubscribeRequest(OrdersSubscribeRequest&& from) noexcept
    : OrdersSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline OrdersSubscribeRequest& operator=(const OrdersSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrdersSubscribeRequest& operator=(OrdersSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrdersSubscribeRequest& default_instance();

  static inline const OrdersSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const OrdersSubscribeRequest*>(
               &_OrdersSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(OrdersSubscribeRequest& a, OrdersSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrdersSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrdersSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrdersSubscribeRequest* New() const final {
    return CreateMaybeMessage<OrdersSubscribeRequest>(nullptr);
  }

  OrdersSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrdersSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrdersSubscribeRequest& from);
  void MergeFrom(const OrdersSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrdersSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.OrdersSubscribeRequest";
  }
  protected:
  explicit OrdersSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kPartyIDFieldNumber = 2,
  };
  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string partyID = 2 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // @@protoc_insertion_point(class_scope:api.OrdersSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.TradesSubscribeRequest) */ {
 public:
  inline TradesSubscribeRequest() : TradesSubscribeRequest(nullptr) {}
  virtual ~TradesSubscribeRequest();

  TradesSubscribeRequest(const TradesSubscribeRequest& from);
  TradesSubscribeRequest(TradesSubscribeRequest&& from) noexcept
    : TradesSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline TradesSubscribeRequest& operator=(const TradesSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesSubscribeRequest& operator=(TradesSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesSubscribeRequest& default_instance();

  static inline const TradesSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const TradesSubscribeRequest*>(
               &_TradesSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(TradesSubscribeRequest& a, TradesSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesSubscribeRequest* New() const final {
    return CreateMaybeMessage<TradesSubscribeRequest>(nullptr);
  }

  TradesSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesSubscribeRequest& from);
  void MergeFrom(const TradesSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.TradesSubscribeRequest";
  }
  protected:
  explicit TradesSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kPartyIDFieldNumber = 2,
  };
  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string partyID = 2 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // @@protoc_insertion_point(class_scope:api.TradesSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class CandlesSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.CandlesSubscribeRequest) */ {
 public:
  inline CandlesSubscribeRequest() : CandlesSubscribeRequest(nullptr) {}
  virtual ~CandlesSubscribeRequest();

  CandlesSubscribeRequest(const CandlesSubscribeRequest& from);
  CandlesSubscribeRequest(CandlesSubscribeRequest&& from) noexcept
    : CandlesSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline CandlesSubscribeRequest& operator=(const CandlesSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandlesSubscribeRequest& operator=(CandlesSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CandlesSubscribeRequest& default_instance();

  static inline const CandlesSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const CandlesSubscribeRequest*>(
               &_CandlesSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CandlesSubscribeRequest& a, CandlesSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CandlesSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandlesSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandlesSubscribeRequest* New() const final {
    return CreateMaybeMessage<CandlesSubscribeRequest>(nullptr);
  }

  CandlesSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandlesSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CandlesSubscribeRequest& from);
  void MergeFrom(const CandlesSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandlesSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.CandlesSubscribeRequest";
  }
  protected:
  explicit CandlesSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kIntervalFieldNumber = 2,
  };
  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // .vega.Interval interval = 2 [json_name = "interval"];
  void clear_interval();
  ::vega::Interval interval() const;
  void set_interval(::vega::Interval value);
  private:
  ::vega::Interval _internal_interval() const;
  void _internal_set_interval(::vega::Interval value);
  public:

  // @@protoc_insertion_point(class_scope:api.CandlesSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  int interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketDepthSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarketDepthSubscribeRequest) */ {
 public:
  inline MarketDepthSubscribeRequest() : MarketDepthSubscribeRequest(nullptr) {}
  virtual ~MarketDepthSubscribeRequest();

  MarketDepthSubscribeRequest(const MarketDepthSubscribeRequest& from);
  MarketDepthSubscribeRequest(MarketDepthSubscribeRequest&& from) noexcept
    : MarketDepthSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline MarketDepthSubscribeRequest& operator=(const MarketDepthSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepthSubscribeRequest& operator=(MarketDepthSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDepthSubscribeRequest& default_instance();

  static inline const MarketDepthSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const MarketDepthSubscribeRequest*>(
               &_MarketDepthSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(MarketDepthSubscribeRequest& a, MarketDepthSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepthSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepthSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDepthSubscribeRequest* New() const final {
    return CreateMaybeMessage<MarketDepthSubscribeRequest>(nullptr);
  }

  MarketDepthSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepthSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDepthSubscribeRequest& from);
  void MergeFrom(const MarketDepthSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarketDepthSubscribeRequest";
  }
  protected:
  explicit MarketDepthSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
  };
  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // @@protoc_insertion_point(class_scope:api.MarketDepthSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketDepthUpdatesSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarketDepthUpdatesSubscribeRequest) */ {
 public:
  inline MarketDepthUpdatesSubscribeRequest() : MarketDepthUpdatesSubscribeRequest(nullptr) {}
  virtual ~MarketDepthUpdatesSubscribeRequest();

  MarketDepthUpdatesSubscribeRequest(const MarketDepthUpdatesSubscribeRequest& from);
  MarketDepthUpdatesSubscribeRequest(MarketDepthUpdatesSubscribeRequest&& from) noexcept
    : MarketDepthUpdatesSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline MarketDepthUpdatesSubscribeRequest& operator=(const MarketDepthUpdatesSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepthUpdatesSubscribeRequest& operator=(MarketDepthUpdatesSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDepthUpdatesSubscribeRequest& default_instance();

  static inline const MarketDepthUpdatesSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const MarketDepthUpdatesSubscribeRequest*>(
               &_MarketDepthUpdatesSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(MarketDepthUpdatesSubscribeRequest& a, MarketDepthUpdatesSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepthUpdatesSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepthUpdatesSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDepthUpdatesSubscribeRequest* New() const final {
    return CreateMaybeMessage<MarketDepthUpdatesSubscribeRequest>(nullptr);
  }

  MarketDepthUpdatesSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepthUpdatesSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDepthUpdatesSubscribeRequest& from);
  void MergeFrom(const MarketDepthUpdatesSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthUpdatesSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarketDepthUpdatesSubscribeRequest";
  }
  protected:
  explicit MarketDepthUpdatesSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
  };
  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // @@protoc_insertion_point(class_scope:api.MarketDepthUpdatesSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PositionsSubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PositionsSubscribeRequest) */ {
 public:
  inline PositionsSubscribeRequest() : PositionsSubscribeRequest(nullptr) {}
  virtual ~PositionsSubscribeRequest();

  PositionsSubscribeRequest(const PositionsSubscribeRequest& from);
  PositionsSubscribeRequest(PositionsSubscribeRequest&& from) noexcept
    : PositionsSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline PositionsSubscribeRequest& operator=(const PositionsSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsSubscribeRequest& operator=(PositionsSubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionsSubscribeRequest& default_instance();

  static inline const PositionsSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const PositionsSubscribeRequest*>(
               &_PositionsSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(PositionsSubscribeRequest& a, PositionsSubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsSubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsSubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionsSubscribeRequest* New() const final {
    return CreateMaybeMessage<PositionsSubscribeRequest>(nullptr);
  }

  PositionsSubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionsSubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionsSubscribeRequest& from);
  void MergeFrom(const PositionsSubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsSubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PositionsSubscribeRequest";
  }
  protected:
  explicit PositionsSubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
    kMarketIDFieldNumber = 2,
  };
  // string partyID = 1 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string marketID = 2 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // @@protoc_insertion_point(class_scope:api.PositionsSubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrdersByMarketRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.OrdersByMarketRequest) */ {
 public:
  inline OrdersByMarketRequest() : OrdersByMarketRequest(nullptr) {}
  virtual ~OrdersByMarketRequest();

  OrdersByMarketRequest(const OrdersByMarketRequest& from);
  OrdersByMarketRequest(OrdersByMarketRequest&& from) noexcept
    : OrdersByMarketRequest() {
    *this = ::std::move(from);
  }

  inline OrdersByMarketRequest& operator=(const OrdersByMarketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrdersByMarketRequest& operator=(OrdersByMarketRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrdersByMarketRequest& default_instance();

  static inline const OrdersByMarketRequest* internal_default_instance() {
    return reinterpret_cast<const OrdersByMarketRequest*>(
               &_OrdersByMarketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(OrdersByMarketRequest& a, OrdersByMarketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrdersByMarketRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrdersByMarketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrdersByMarketRequest* New() const final {
    return CreateMaybeMessage<OrdersByMarketRequest>(nullptr);
  }

  OrdersByMarketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrdersByMarketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrdersByMarketRequest& from);
  void MergeFrom(const OrdersByMarketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrdersByMarketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.OrdersByMarketRequest";
  }
  protected:
  explicit OrdersByMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // .api.Pagination pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::api::Pagination& pagination() const;
  ::api::Pagination* release_pagination();
  ::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::api::Pagination* pagination);
  private:
  const ::api::Pagination& _internal_pagination() const;
  ::api::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::api::Pagination* pagination);
  ::api::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:api.OrdersByMarketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrdersByMarketResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.OrdersByMarketResponse) */ {
 public:
  inline OrdersByMarketResponse() : OrdersByMarketResponse(nullptr) {}
  virtual ~OrdersByMarketResponse();

  OrdersByMarketResponse(const OrdersByMarketResponse& from);
  OrdersByMarketResponse(OrdersByMarketResponse&& from) noexcept
    : OrdersByMarketResponse() {
    *this = ::std::move(from);
  }

  inline OrdersByMarketResponse& operator=(const OrdersByMarketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrdersByMarketResponse& operator=(OrdersByMarketResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrdersByMarketResponse& default_instance();

  static inline const OrdersByMarketResponse* internal_default_instance() {
    return reinterpret_cast<const OrdersByMarketResponse*>(
               &_OrdersByMarketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(OrdersByMarketResponse& a, OrdersByMarketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrdersByMarketResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrdersByMarketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrdersByMarketResponse* New() const final {
    return CreateMaybeMessage<OrdersByMarketResponse>(nullptr);
  }

  OrdersByMarketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrdersByMarketResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrdersByMarketResponse& from);
  void MergeFrom(const OrdersByMarketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrdersByMarketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.OrdersByMarketResponse";
  }
  protected:
  explicit OrdersByMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
  };
  // repeated .vega.Order orders = 1 [json_name = "orders"];
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::vega::Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
      mutable_orders();
  private:
  const ::vega::Order& _internal_orders(int index) const;
  ::vega::Order* _internal_add_orders();
  public:
  const ::vega::Order& orders(int index) const;
  ::vega::Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
      orders() const;

  // @@protoc_insertion_point(class_scope:api.OrdersByMarketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order > orders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrdersByPartyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.OrdersByPartyRequest) */ {
 public:
  inline OrdersByPartyRequest() : OrdersByPartyRequest(nullptr) {}
  virtual ~OrdersByPartyRequest();

  OrdersByPartyRequest(const OrdersByPartyRequest& from);
  OrdersByPartyRequest(OrdersByPartyRequest&& from) noexcept
    : OrdersByPartyRequest() {
    *this = ::std::move(from);
  }

  inline OrdersByPartyRequest& operator=(const OrdersByPartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrdersByPartyRequest& operator=(OrdersByPartyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrdersByPartyRequest& default_instance();

  static inline const OrdersByPartyRequest* internal_default_instance() {
    return reinterpret_cast<const OrdersByPartyRequest*>(
               &_OrdersByPartyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(OrdersByPartyRequest& a, OrdersByPartyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrdersByPartyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrdersByPartyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrdersByPartyRequest* New() const final {
    return CreateMaybeMessage<OrdersByPartyRequest>(nullptr);
  }

  OrdersByPartyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrdersByPartyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrdersByPartyRequest& from);
  void MergeFrom(const OrdersByPartyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrdersByPartyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.OrdersByPartyRequest";
  }
  protected:
  explicit OrdersByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // .api.Pagination pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::api::Pagination& pagination() const;
  ::api::Pagination* release_pagination();
  ::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::api::Pagination* pagination);
  private:
  const ::api::Pagination& _internal_pagination() const;
  ::api::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::api::Pagination* pagination);
  ::api::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:api.OrdersByPartyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrdersByPartyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.OrdersByPartyResponse) */ {
 public:
  inline OrdersByPartyResponse() : OrdersByPartyResponse(nullptr) {}
  virtual ~OrdersByPartyResponse();

  OrdersByPartyResponse(const OrdersByPartyResponse& from);
  OrdersByPartyResponse(OrdersByPartyResponse&& from) noexcept
    : OrdersByPartyResponse() {
    *this = ::std::move(from);
  }

  inline OrdersByPartyResponse& operator=(const OrdersByPartyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrdersByPartyResponse& operator=(OrdersByPartyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrdersByPartyResponse& default_instance();

  static inline const OrdersByPartyResponse* internal_default_instance() {
    return reinterpret_cast<const OrdersByPartyResponse*>(
               &_OrdersByPartyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(OrdersByPartyResponse& a, OrdersByPartyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrdersByPartyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrdersByPartyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrdersByPartyResponse* New() const final {
    return CreateMaybeMessage<OrdersByPartyResponse>(nullptr);
  }

  OrdersByPartyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrdersByPartyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrdersByPartyResponse& from);
  void MergeFrom(const OrdersByPartyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrdersByPartyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.OrdersByPartyResponse";
  }
  protected:
  explicit OrdersByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
  };
  // repeated .vega.Order orders = 1 [json_name = "orders"];
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::vega::Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
      mutable_orders();
  private:
  const ::vega::Order& _internal_orders(int index) const;
  ::vega::Order* _internal_add_orders();
  public:
  const ::vega::Order& orders(int index) const;
  ::vega::Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
      orders() const;

  // @@protoc_insertion_point(class_scope:api.OrdersByPartyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order > orders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrderByMarketAndIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.OrderByMarketAndIdRequest) */ {
 public:
  inline OrderByMarketAndIdRequest() : OrderByMarketAndIdRequest(nullptr) {}
  virtual ~OrderByMarketAndIdRequest();

  OrderByMarketAndIdRequest(const OrderByMarketAndIdRequest& from);
  OrderByMarketAndIdRequest(OrderByMarketAndIdRequest&& from) noexcept
    : OrderByMarketAndIdRequest() {
    *this = ::std::move(from);
  }

  inline OrderByMarketAndIdRequest& operator=(const OrderByMarketAndIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderByMarketAndIdRequest& operator=(OrderByMarketAndIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderByMarketAndIdRequest& default_instance();

  static inline const OrderByMarketAndIdRequest* internal_default_instance() {
    return reinterpret_cast<const OrderByMarketAndIdRequest*>(
               &_OrderByMarketAndIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(OrderByMarketAndIdRequest& a, OrderByMarketAndIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderByMarketAndIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderByMarketAndIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderByMarketAndIdRequest* New() const final {
    return CreateMaybeMessage<OrderByMarketAndIdRequest>(nullptr);
  }

  OrderByMarketAndIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderByMarketAndIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderByMarketAndIdRequest& from);
  void MergeFrom(const OrderByMarketAndIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderByMarketAndIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.OrderByMarketAndIdRequest";
  }
  protected:
  explicit OrderByMarketAndIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kOrderIDFieldNumber = 2,
  };
  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string orderID = 2 [json_name = "orderID", (.validator.field) = {
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // @@protoc_insertion_point(class_scope:api.OrderByMarketAndIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrderByMarketAndIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.OrderByMarketAndIdResponse) */ {
 public:
  inline OrderByMarketAndIdResponse() : OrderByMarketAndIdResponse(nullptr) {}
  virtual ~OrderByMarketAndIdResponse();

  OrderByMarketAndIdResponse(const OrderByMarketAndIdResponse& from);
  OrderByMarketAndIdResponse(OrderByMarketAndIdResponse&& from) noexcept
    : OrderByMarketAndIdResponse() {
    *this = ::std::move(from);
  }

  inline OrderByMarketAndIdResponse& operator=(const OrderByMarketAndIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderByMarketAndIdResponse& operator=(OrderByMarketAndIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderByMarketAndIdResponse& default_instance();

  static inline const OrderByMarketAndIdResponse* internal_default_instance() {
    return reinterpret_cast<const OrderByMarketAndIdResponse*>(
               &_OrderByMarketAndIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(OrderByMarketAndIdResponse& a, OrderByMarketAndIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderByMarketAndIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderByMarketAndIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderByMarketAndIdResponse* New() const final {
    return CreateMaybeMessage<OrderByMarketAndIdResponse>(nullptr);
  }

  OrderByMarketAndIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderByMarketAndIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderByMarketAndIdResponse& from);
  void MergeFrom(const OrderByMarketAndIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderByMarketAndIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.OrderByMarketAndIdResponse";
  }
  protected:
  explicit OrderByMarketAndIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .vega.Order order = 1 [json_name = "order"];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);
  private:
  const ::vega::Order& _internal_order() const;
  ::vega::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::vega::Order* order);
  ::vega::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:api.OrderByMarketAndIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrderByReferenceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.OrderByReferenceRequest) */ {
 public:
  inline OrderByReferenceRequest() : OrderByReferenceRequest(nullptr) {}
  virtual ~OrderByReferenceRequest();

  OrderByReferenceRequest(const OrderByReferenceRequest& from);
  OrderByReferenceRequest(OrderByReferenceRequest&& from) noexcept
    : OrderByReferenceRequest() {
    *this = ::std::move(from);
  }

  inline OrderByReferenceRequest& operator=(const OrderByReferenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderByReferenceRequest& operator=(OrderByReferenceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderByReferenceRequest& default_instance();

  static inline const OrderByReferenceRequest* internal_default_instance() {
    return reinterpret_cast<const OrderByReferenceRequest*>(
               &_OrderByReferenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(OrderByReferenceRequest& a, OrderByReferenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderByReferenceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderByReferenceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderByReferenceRequest* New() const final {
    return CreateMaybeMessage<OrderByReferenceRequest>(nullptr);
  }

  OrderByReferenceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderByReferenceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderByReferenceRequest& from);
  void MergeFrom(const OrderByReferenceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderByReferenceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.OrderByReferenceRequest";
  }
  protected:
  explicit OrderByReferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFieldNumber = 1,
  };
  // string reference = 1 [json_name = "reference", (.validator.field) = {
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // @@protoc_insertion_point(class_scope:api.OrderByReferenceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrderByReferenceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.OrderByReferenceResponse) */ {
 public:
  inline OrderByReferenceResponse() : OrderByReferenceResponse(nullptr) {}
  virtual ~OrderByReferenceResponse();

  OrderByReferenceResponse(const OrderByReferenceResponse& from);
  OrderByReferenceResponse(OrderByReferenceResponse&& from) noexcept
    : OrderByReferenceResponse() {
    *this = ::std::move(from);
  }

  inline OrderByReferenceResponse& operator=(const OrderByReferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderByReferenceResponse& operator=(OrderByReferenceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderByReferenceResponse& default_instance();

  static inline const OrderByReferenceResponse* internal_default_instance() {
    return reinterpret_cast<const OrderByReferenceResponse*>(
               &_OrderByReferenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(OrderByReferenceResponse& a, OrderByReferenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderByReferenceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderByReferenceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderByReferenceResponse* New() const final {
    return CreateMaybeMessage<OrderByReferenceResponse>(nullptr);
  }

  OrderByReferenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderByReferenceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderByReferenceResponse& from);
  void MergeFrom(const OrderByReferenceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderByReferenceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.OrderByReferenceResponse";
  }
  protected:
  explicit OrderByReferenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .vega.Order order = 1 [json_name = "order"];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);
  private:
  const ::vega::Order& _internal_order() const;
  ::vega::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::vega::Order* order);
  ::vega::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:api.OrderByReferenceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarketsResponse) */ {
 public:
  inline MarketsResponse() : MarketsResponse(nullptr) {}
  virtual ~MarketsResponse();

  MarketsResponse(const MarketsResponse& from);
  MarketsResponse(MarketsResponse&& from) noexcept
    : MarketsResponse() {
    *this = ::std::move(from);
  }

  inline MarketsResponse& operator=(const MarketsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketsResponse& operator=(MarketsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketsResponse& default_instance();

  static inline const MarketsResponse* internal_default_instance() {
    return reinterpret_cast<const MarketsResponse*>(
               &_MarketsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(MarketsResponse& a, MarketsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketsResponse* New() const final {
    return CreateMaybeMessage<MarketsResponse>(nullptr);
  }

  MarketsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketsResponse& from);
  void MergeFrom(const MarketsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarketsResponse";
  }
  protected:
  explicit MarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketsFieldNumber = 1,
  };
  // repeated .vega.Market markets = 1 [json_name = "markets"];
  int markets_size() const;
  private:
  int _internal_markets_size() const;
  public:
  void clear_markets();
  ::vega::Market* mutable_markets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Market >*
      mutable_markets();
  private:
  const ::vega::Market& _internal_markets(int index) const;
  ::vega::Market* _internal_add_markets();
  public:
  const ::vega::Market& markets(int index) const;
  ::vega::Market* add_markets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Market >&
      markets() const;

  // @@protoc_insertion_point(class_scope:api.MarketsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Market > markets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class CandlesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.CandlesRequest) */ {
 public:
  inline CandlesRequest() : CandlesRequest(nullptr) {}
  virtual ~CandlesRequest();

  CandlesRequest(const CandlesRequest& from);
  CandlesRequest(CandlesRequest&& from) noexcept
    : CandlesRequest() {
    *this = ::std::move(from);
  }

  inline CandlesRequest& operator=(const CandlesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandlesRequest& operator=(CandlesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CandlesRequest& default_instance();

  static inline const CandlesRequest* internal_default_instance() {
    return reinterpret_cast<const CandlesRequest*>(
               &_CandlesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CandlesRequest& a, CandlesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CandlesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandlesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandlesRequest* New() const final {
    return CreateMaybeMessage<CandlesRequest>(nullptr);
  }

  CandlesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandlesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CandlesRequest& from);
  void MergeFrom(const CandlesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandlesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.CandlesRequest";
  }
  protected:
  explicit CandlesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kSinceTimestampFieldNumber = 2,
    kIntervalFieldNumber = 3,
  };
  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // int64 sinceTimestamp = 2 [json_name = "sinceTimestamp", (.validator.field) = {
  void clear_sincetimestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 sincetimestamp() const;
  void set_sincetimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sincetimestamp() const;
  void _internal_set_sincetimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.Interval interval = 3 [json_name = "interval"];
  void clear_interval();
  ::vega::Interval interval() const;
  void set_interval(::vega::Interval value);
  private:
  ::vega::Interval _internal_interval() const;
  void _internal_set_interval(::vega::Interval value);
  public:

  // @@protoc_insertion_point(class_scope:api.CandlesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::int64 sincetimestamp_;
  int interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class CandlesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.CandlesResponse) */ {
 public:
  inline CandlesResponse() : CandlesResponse(nullptr) {}
  virtual ~CandlesResponse();

  CandlesResponse(const CandlesResponse& from);
  CandlesResponse(CandlesResponse&& from) noexcept
    : CandlesResponse() {
    *this = ::std::move(from);
  }

  inline CandlesResponse& operator=(const CandlesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandlesResponse& operator=(CandlesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CandlesResponse& default_instance();

  static inline const CandlesResponse* internal_default_instance() {
    return reinterpret_cast<const CandlesResponse*>(
               &_CandlesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CandlesResponse& a, CandlesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CandlesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandlesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandlesResponse* New() const final {
    return CreateMaybeMessage<CandlesResponse>(nullptr);
  }

  CandlesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandlesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CandlesResponse& from);
  void MergeFrom(const CandlesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandlesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.CandlesResponse";
  }
  protected:
  explicit CandlesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandlesFieldNumber = 1,
  };
  // repeated .vega.Candle candles = 1 [json_name = "candles"];
  int candles_size() const;
  private:
  int _internal_candles_size() const;
  public:
  void clear_candles();
  ::vega::Candle* mutable_candles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Candle >*
      mutable_candles();
  private:
  const ::vega::Candle& _internal_candles(int index) const;
  ::vega::Candle* _internal_add_candles();
  public:
  const ::vega::Candle& candles(int index) const;
  ::vega::Candle* add_candles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Candle >&
      candles() const;

  // @@protoc_insertion_point(class_scope:api.CandlesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Candle > candles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketDepthRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarketDepthRequest) */ {
 public:
  inline MarketDepthRequest() : MarketDepthRequest(nullptr) {}
  virtual ~MarketDepthRequest();

  MarketDepthRequest(const MarketDepthRequest& from);
  MarketDepthRequest(MarketDepthRequest&& from) noexcept
    : MarketDepthRequest() {
    *this = ::std::move(from);
  }

  inline MarketDepthRequest& operator=(const MarketDepthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepthRequest& operator=(MarketDepthRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDepthRequest& default_instance();

  static inline const MarketDepthRequest* internal_default_instance() {
    return reinterpret_cast<const MarketDepthRequest*>(
               &_MarketDepthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(MarketDepthRequest& a, MarketDepthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepthRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDepthRequest* New() const final {
    return CreateMaybeMessage<MarketDepthRequest>(nullptr);
  }

  MarketDepthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepthRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDepthRequest& from);
  void MergeFrom(const MarketDepthRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarketDepthRequest";
  }
  protected:
  explicit MarketDepthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kMaxDepthFieldNumber = 2,
  };
  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // uint64 maxDepth = 2 [json_name = "maxDepth"];
  void clear_maxdepth();
  ::PROTOBUF_NAMESPACE_ID::uint64 maxdepth() const;
  void set_maxdepth(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maxdepth() const;
  void _internal_set_maxdepth(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.MarketDepthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maxdepth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketDepthResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarketDepthResponse) */ {
 public:
  inline MarketDepthResponse() : MarketDepthResponse(nullptr) {}
  virtual ~MarketDepthResponse();

  MarketDepthResponse(const MarketDepthResponse& from);
  MarketDepthResponse(MarketDepthResponse&& from) noexcept
    : MarketDepthResponse() {
    *this = ::std::move(from);
  }

  inline MarketDepthResponse& operator=(const MarketDepthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepthResponse& operator=(MarketDepthResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDepthResponse& default_instance();

  static inline const MarketDepthResponse* internal_default_instance() {
    return reinterpret_cast<const MarketDepthResponse*>(
               &_MarketDepthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(MarketDepthResponse& a, MarketDepthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepthResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDepthResponse* New() const final {
    return CreateMaybeMessage<MarketDepthResponse>(nullptr);
  }

  MarketDepthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepthResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDepthResponse& from);
  void MergeFrom(const MarketDepthResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarketDepthResponse";
  }
  protected:
  explicit MarketDepthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyFieldNumber = 2,
    kSellFieldNumber = 3,
    kMarketIDFieldNumber = 1,
    kLastTradeFieldNumber = 4,
    kSequenceNumberFieldNumber = 5,
  };
  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  int buy_size() const;
  private:
  int _internal_buy_size() const;
  public:
  void clear_buy();
  ::vega::PriceLevel* mutable_buy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_buy();
  private:
  const ::vega::PriceLevel& _internal_buy(int index) const;
  ::vega::PriceLevel* _internal_add_buy();
  public:
  const ::vega::PriceLevel& buy(int index) const;
  ::vega::PriceLevel* add_buy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
      buy() const;

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  int sell_size() const;
  private:
  int _internal_sell_size() const;
  public:
  void clear_sell();
  ::vega::PriceLevel* mutable_sell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_sell();
  private:
  const ::vega::PriceLevel& _internal_sell(int index) const;
  ::vega::PriceLevel* _internal_add_sell();
  public:
  const ::vega::PriceLevel& sell(int index) const;
  ::vega::PriceLevel* add_sell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
      sell() const;

  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // .vega.Trade lastTrade = 4 [json_name = "lastTrade"];
  bool has_lasttrade() const;
  private:
  bool _internal_has_lasttrade() const;
  public:
  void clear_lasttrade();
  const ::vega::Trade& lasttrade() const;
  ::vega::Trade* release_lasttrade();
  ::vega::Trade* mutable_lasttrade();
  void set_allocated_lasttrade(::vega::Trade* lasttrade);
  private:
  const ::vega::Trade& _internal_lasttrade() const;
  ::vega::Trade* _internal_mutable_lasttrade();
  public:
  void unsafe_arena_set_allocated_lasttrade(
      ::vega::Trade* lasttrade);
  ::vega::Trade* unsafe_arena_release_lasttrade();

  // uint64 sequenceNumber = 5 [json_name = "sequenceNumber"];
  void clear_sequencenumber();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequencenumber() const;
  void set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequencenumber() const;
  void _internal_set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.MarketDepthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel > buy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel > sell_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::vega::Trade* lasttrade_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequencenumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesByMarketRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.TradesByMarketRequest) */ {
 public:
  inline TradesByMarketRequest() : TradesByMarketRequest(nullptr) {}
  virtual ~TradesByMarketRequest();

  TradesByMarketRequest(const TradesByMarketRequest& from);
  TradesByMarketRequest(TradesByMarketRequest&& from) noexcept
    : TradesByMarketRequest() {
    *this = ::std::move(from);
  }

  inline TradesByMarketRequest& operator=(const TradesByMarketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesByMarketRequest& operator=(TradesByMarketRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesByMarketRequest& default_instance();

  static inline const TradesByMarketRequest* internal_default_instance() {
    return reinterpret_cast<const TradesByMarketRequest*>(
               &_TradesByMarketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(TradesByMarketRequest& a, TradesByMarketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesByMarketRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesByMarketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesByMarketRequest* New() const final {
    return CreateMaybeMessage<TradesByMarketRequest>(nullptr);
  }

  TradesByMarketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesByMarketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesByMarketRequest& from);
  void MergeFrom(const TradesByMarketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesByMarketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.TradesByMarketRequest";
  }
  protected:
  explicit TradesByMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // .api.Pagination pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::api::Pagination& pagination() const;
  ::api::Pagination* release_pagination();
  ::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::api::Pagination* pagination);
  private:
  const ::api::Pagination& _internal_pagination() const;
  ::api::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::api::Pagination* pagination);
  ::api::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:api.TradesByMarketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesByMarketResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.TradesByMarketResponse) */ {
 public:
  inline TradesByMarketResponse() : TradesByMarketResponse(nullptr) {}
  virtual ~TradesByMarketResponse();

  TradesByMarketResponse(const TradesByMarketResponse& from);
  TradesByMarketResponse(TradesByMarketResponse&& from) noexcept
    : TradesByMarketResponse() {
    *this = ::std::move(from);
  }

  inline TradesByMarketResponse& operator=(const TradesByMarketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesByMarketResponse& operator=(TradesByMarketResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesByMarketResponse& default_instance();

  static inline const TradesByMarketResponse* internal_default_instance() {
    return reinterpret_cast<const TradesByMarketResponse*>(
               &_TradesByMarketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(TradesByMarketResponse& a, TradesByMarketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesByMarketResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesByMarketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesByMarketResponse* New() const final {
    return CreateMaybeMessage<TradesByMarketResponse>(nullptr);
  }

  TradesByMarketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesByMarketResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesByMarketResponse& from);
  void MergeFrom(const TradesByMarketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesByMarketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.TradesByMarketResponse";
  }
  protected:
  explicit TradesByMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::vega::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
      mutable_trades();
  private:
  const ::vega::Trade& _internal_trades(int index) const;
  ::vega::Trade* _internal_add_trades();
  public:
  const ::vega::Trade& trades(int index) const;
  ::vega::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:api.TradesByMarketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade > trades_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PositionsByPartyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PositionsByPartyRequest) */ {
 public:
  inline PositionsByPartyRequest() : PositionsByPartyRequest(nullptr) {}
  virtual ~PositionsByPartyRequest();

  PositionsByPartyRequest(const PositionsByPartyRequest& from);
  PositionsByPartyRequest(PositionsByPartyRequest&& from) noexcept
    : PositionsByPartyRequest() {
    *this = ::std::move(from);
  }

  inline PositionsByPartyRequest& operator=(const PositionsByPartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsByPartyRequest& operator=(PositionsByPartyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionsByPartyRequest& default_instance();

  static inline const PositionsByPartyRequest* internal_default_instance() {
    return reinterpret_cast<const PositionsByPartyRequest*>(
               &_PositionsByPartyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(PositionsByPartyRequest& a, PositionsByPartyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsByPartyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsByPartyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionsByPartyRequest* New() const final {
    return CreateMaybeMessage<PositionsByPartyRequest>(nullptr);
  }

  PositionsByPartyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionsByPartyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionsByPartyRequest& from);
  void MergeFrom(const PositionsByPartyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsByPartyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PositionsByPartyRequest";
  }
  protected:
  explicit PositionsByPartyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
    kMarketIDFieldNumber = 2,
  };
  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string marketID = 2 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // @@protoc_insertion_point(class_scope:api.PositionsByPartyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PositionsByPartyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PositionsByPartyResponse) */ {
 public:
  inline PositionsByPartyResponse() : PositionsByPartyResponse(nullptr) {}
  virtual ~PositionsByPartyResponse();

  PositionsByPartyResponse(const PositionsByPartyResponse& from);
  PositionsByPartyResponse(PositionsByPartyResponse&& from) noexcept
    : PositionsByPartyResponse() {
    *this = ::std::move(from);
  }

  inline PositionsByPartyResponse& operator=(const PositionsByPartyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionsByPartyResponse& operator=(PositionsByPartyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionsByPartyResponse& default_instance();

  static inline const PositionsByPartyResponse* internal_default_instance() {
    return reinterpret_cast<const PositionsByPartyResponse*>(
               &_PositionsByPartyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(PositionsByPartyResponse& a, PositionsByPartyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionsByPartyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionsByPartyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionsByPartyResponse* New() const final {
    return CreateMaybeMessage<PositionsByPartyResponse>(nullptr);
  }

  PositionsByPartyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionsByPartyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionsByPartyResponse& from);
  void MergeFrom(const PositionsByPartyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionsByPartyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PositionsByPartyResponse";
  }
  protected:
  explicit PositionsByPartyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsFieldNumber = 1,
  };
  // repeated .vega.Position positions = 1 [json_name = "positions"];
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  ::vega::Position* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Position >*
      mutable_positions();
  private:
  const ::vega::Position& _internal_positions(int index) const;
  ::vega::Position* _internal_add_positions();
  public:
  const ::vega::Position& positions(int index) const;
  ::vega::Position* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Position >&
      positions() const;

  // @@protoc_insertion_point(class_scope:api.PositionsByPartyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Position > positions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class VegaTimeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.VegaTimeResponse) */ {
 public:
  inline VegaTimeResponse() : VegaTimeResponse(nullptr) {}
  virtual ~VegaTimeResponse();

  VegaTimeResponse(const VegaTimeResponse& from);
  VegaTimeResponse(VegaTimeResponse&& from) noexcept
    : VegaTimeResponse() {
    *this = ::std::move(from);
  }

  inline VegaTimeResponse& operator=(const VegaTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VegaTimeResponse& operator=(VegaTimeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VegaTimeResponse& default_instance();

  static inline const VegaTimeResponse* internal_default_instance() {
    return reinterpret_cast<const VegaTimeResponse*>(
               &_VegaTimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(VegaTimeResponse& a, VegaTimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VegaTimeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VegaTimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VegaTimeResponse* New() const final {
    return CreateMaybeMessage<VegaTimeResponse>(nullptr);
  }

  VegaTimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VegaTimeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VegaTimeResponse& from);
  void MergeFrom(const VegaTimeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VegaTimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.VegaTimeResponse";
  }
  protected:
  explicit VegaTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 timestamp = 1 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.VegaTimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class Pagination PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.Pagination) */ {
 public:
  inline Pagination() : Pagination(nullptr) {}
  virtual ~Pagination();

  Pagination(const Pagination& from);
  Pagination(Pagination&& from) noexcept
    : Pagination() {
    *this = ::std::move(from);
  }

  inline Pagination& operator=(const Pagination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pagination& operator=(Pagination&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pagination& default_instance();

  static inline const Pagination* internal_default_instance() {
    return reinterpret_cast<const Pagination*>(
               &_Pagination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(Pagination& a, Pagination& b) {
    a.Swap(&b);
  }
  inline void Swap(Pagination* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pagination* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pagination* New() const final {
    return CreateMaybeMessage<Pagination>(nullptr);
  }

  Pagination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pagination>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pagination& from);
  void MergeFrom(const Pagination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pagination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.Pagination";
  }
  protected:
  explicit Pagination(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkipFieldNumber = 1,
    kLimitFieldNumber = 2,
    kDescendingFieldNumber = 3,
  };
  // uint64 skip = 1 [json_name = "skip"];
  void clear_skip();
  ::PROTOBUF_NAMESPACE_ID::uint64 skip() const;
  void set_skip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_skip() const;
  void _internal_set_skip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 limit = 2 [json_name = "limit"];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool descending = 3 [json_name = "descending"];
  void clear_descending();
  bool descending() const;
  void set_descending(bool value);
  private:
  bool _internal_descending() const;
  void _internal_set_descending(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api.Pagination)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 skip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 limit_;
  bool descending_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrdersStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.OrdersStream) */ {
 public:
  inline OrdersStream() : OrdersStream(nullptr) {}
  virtual ~OrdersStream();

  OrdersStream(const OrdersStream& from);
  OrdersStream(OrdersStream&& from) noexcept
    : OrdersStream() {
    *this = ::std::move(from);
  }

  inline OrdersStream& operator=(const OrdersStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrdersStream& operator=(OrdersStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrdersStream& default_instance();

  static inline const OrdersStream* internal_default_instance() {
    return reinterpret_cast<const OrdersStream*>(
               &_OrdersStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(OrdersStream& a, OrdersStream& b) {
    a.Swap(&b);
  }
  inline void Swap(OrdersStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrdersStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrdersStream* New() const final {
    return CreateMaybeMessage<OrdersStream>(nullptr);
  }

  OrdersStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrdersStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrdersStream& from);
  void MergeFrom(const OrdersStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrdersStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.OrdersStream";
  }
  protected:
  explicit OrdersStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
  };
  // repeated .vega.Order orders = 1 [json_name = "orders"];
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::vega::Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
      mutable_orders();
  private:
  const ::vega::Order& _internal_orders(int index) const;
  ::vega::Order* _internal_add_orders();
  public:
  const ::vega::Order& orders(int index) const;
  ::vega::Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
      orders() const;

  // @@protoc_insertion_point(class_scope:api.OrdersStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order > orders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class TradesStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.TradesStream) */ {
 public:
  inline TradesStream() : TradesStream(nullptr) {}
  virtual ~TradesStream();

  TradesStream(const TradesStream& from);
  TradesStream(TradesStream&& from) noexcept
    : TradesStream() {
    *this = ::std::move(from);
  }

  inline TradesStream& operator=(const TradesStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradesStream& operator=(TradesStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradesStream& default_instance();

  static inline const TradesStream* internal_default_instance() {
    return reinterpret_cast<const TradesStream*>(
               &_TradesStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(TradesStream& a, TradesStream& b) {
    a.Swap(&b);
  }
  inline void Swap(TradesStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradesStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradesStream* New() const final {
    return CreateMaybeMessage<TradesStream>(nullptr);
  }

  TradesStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradesStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradesStream& from);
  void MergeFrom(const TradesStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradesStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.TradesStream";
  }
  protected:
  explicit TradesStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::vega::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
      mutable_trades();
  private:
  const ::vega::Trade& _internal_trades(int index) const;
  ::vega::Trade* _internal_add_trades();
  public:
  const ::vega::Trade& trades(int index) const;
  ::vega::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:api.TradesStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade > trades_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PartyAccountsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PartyAccountsRequest) */ {
 public:
  inline PartyAccountsRequest() : PartyAccountsRequest(nullptr) {}
  virtual ~PartyAccountsRequest();

  PartyAccountsRequest(const PartyAccountsRequest& from);
  PartyAccountsRequest(PartyAccountsRequest&& from) noexcept
    : PartyAccountsRequest() {
    *this = ::std::move(from);
  }

  inline PartyAccountsRequest& operator=(const PartyAccountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyAccountsRequest& operator=(PartyAccountsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyAccountsRequest& default_instance();

  static inline const PartyAccountsRequest* internal_default_instance() {
    return reinterpret_cast<const PartyAccountsRequest*>(
               &_PartyAccountsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(PartyAccountsRequest& a, PartyAccountsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyAccountsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyAccountsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyAccountsRequest* New() const final {
    return CreateMaybeMessage<PartyAccountsRequest>(nullptr);
  }

  PartyAccountsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyAccountsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyAccountsRequest& from);
  void MergeFrom(const PartyAccountsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyAccountsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PartyAccountsRequest";
  }
  protected:
  explicit PartyAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
    kMarketIDFieldNumber = 2,
    kAssetFieldNumber = 4,
    kTypeFieldNumber = 3,
  };
  // string partyID = 1 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string marketID = 2 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string asset = 4 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // .vega.AccountType type = 3 [json_name = "type"];
  void clear_type();
  ::vega::AccountType type() const;
  void set_type(::vega::AccountType value);
  private:
  ::vega::AccountType _internal_type() const;
  void _internal_set_type(::vega::AccountType value);
  public:

  // @@protoc_insertion_point(class_scope:api.PartyAccountsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PartyAccountsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PartyAccountsResponse) */ {
 public:
  inline PartyAccountsResponse() : PartyAccountsResponse(nullptr) {}
  virtual ~PartyAccountsResponse();

  PartyAccountsResponse(const PartyAccountsResponse& from);
  PartyAccountsResponse(PartyAccountsResponse&& from) noexcept
    : PartyAccountsResponse() {
    *this = ::std::move(from);
  }

  inline PartyAccountsResponse& operator=(const PartyAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyAccountsResponse& operator=(PartyAccountsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyAccountsResponse& default_instance();

  static inline const PartyAccountsResponse* internal_default_instance() {
    return reinterpret_cast<const PartyAccountsResponse*>(
               &_PartyAccountsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(PartyAccountsResponse& a, PartyAccountsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyAccountsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyAccountsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyAccountsResponse* New() const final {
    return CreateMaybeMessage<PartyAccountsResponse>(nullptr);
  }

  PartyAccountsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyAccountsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyAccountsResponse& from);
  void MergeFrom(const PartyAccountsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyAccountsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PartyAccountsResponse";
  }
  protected:
  explicit PartyAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::vega::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
      mutable_accounts();
  private:
  const ::vega::Account& _internal_accounts(int index) const;
  ::vega::Account* _internal_add_accounts();
  public:
  const ::vega::Account& accounts(int index) const;
  ::vega::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:api.PartyAccountsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account > accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketAccountsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarketAccountsRequest) */ {
 public:
  inline MarketAccountsRequest() : MarketAccountsRequest(nullptr) {}
  virtual ~MarketAccountsRequest();

  MarketAccountsRequest(const MarketAccountsRequest& from);
  MarketAccountsRequest(MarketAccountsRequest&& from) noexcept
    : MarketAccountsRequest() {
    *this = ::std::move(from);
  }

  inline MarketAccountsRequest& operator=(const MarketAccountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketAccountsRequest& operator=(MarketAccountsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketAccountsRequest& default_instance();

  static inline const MarketAccountsRequest* internal_default_instance() {
    return reinterpret_cast<const MarketAccountsRequest*>(
               &_MarketAccountsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(MarketAccountsRequest& a, MarketAccountsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketAccountsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketAccountsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketAccountsRequest* New() const final {
    return CreateMaybeMessage<MarketAccountsRequest>(nullptr);
  }

  MarketAccountsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketAccountsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketAccountsRequest& from);
  void MergeFrom(const MarketAccountsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketAccountsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarketAccountsRequest";
  }
  protected:
  explicit MarketAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kAssetFieldNumber = 2,
  };
  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string asset = 2 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // @@protoc_insertion_point(class_scope:api.MarketAccountsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketAccountsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.MarketAccountsResponse) */ {
 public:
  inline MarketAccountsResponse() : MarketAccountsResponse(nullptr) {}
  virtual ~MarketAccountsResponse();

  MarketAccountsResponse(const MarketAccountsResponse& from);
  MarketAccountsResponse(MarketAccountsResponse&& from) noexcept
    : MarketAccountsResponse() {
    *this = ::std::move(from);
  }

  inline MarketAccountsResponse& operator=(const MarketAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketAccountsResponse& operator=(MarketAccountsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketAccountsResponse& default_instance();

  static inline const MarketAccountsResponse* internal_default_instance() {
    return reinterpret_cast<const MarketAccountsResponse*>(
               &_MarketAccountsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(MarketAccountsResponse& a, MarketAccountsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketAccountsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketAccountsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketAccountsResponse* New() const final {
    return CreateMaybeMessage<MarketAccountsResponse>(nullptr);
  }

  MarketAccountsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketAccountsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketAccountsResponse& from);
  void MergeFrom(const MarketAccountsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketAccountsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.MarketAccountsResponse";
  }
  protected:
  explicit MarketAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::vega::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
      mutable_accounts();
  private:
  const ::vega::Account& _internal_accounts(int index) const;
  ::vega::Account* _internal_add_accounts();
  public:
  const ::vega::Account& accounts(int index) const;
  ::vega::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:api.MarketAccountsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account > accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class FeeInfrastructureAccountsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.FeeInfrastructureAccountsRequest) */ {
 public:
  inline FeeInfrastructureAccountsRequest() : FeeInfrastructureAccountsRequest(nullptr) {}
  virtual ~FeeInfrastructureAccountsRequest();

  FeeInfrastructureAccountsRequest(const FeeInfrastructureAccountsRequest& from);
  FeeInfrastructureAccountsRequest(FeeInfrastructureAccountsRequest&& from) noexcept
    : FeeInfrastructureAccountsRequest() {
    *this = ::std::move(from);
  }

  inline FeeInfrastructureAccountsRequest& operator=(const FeeInfrastructureAccountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeeInfrastructureAccountsRequest& operator=(FeeInfrastructureAccountsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeeInfrastructureAccountsRequest& default_instance();

  static inline const FeeInfrastructureAccountsRequest* internal_default_instance() {
    return reinterpret_cast<const FeeInfrastructureAccountsRequest*>(
               &_FeeInfrastructureAccountsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(FeeInfrastructureAccountsRequest& a, FeeInfrastructureAccountsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FeeInfrastructureAccountsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeeInfrastructureAccountsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeeInfrastructureAccountsRequest* New() const final {
    return CreateMaybeMessage<FeeInfrastructureAccountsRequest>(nullptr);
  }

  FeeInfrastructureAccountsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeeInfrastructureAccountsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeeInfrastructureAccountsRequest& from);
  void MergeFrom(const FeeInfrastructureAccountsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeeInfrastructureAccountsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.FeeInfrastructureAccountsRequest";
  }
  protected:
  explicit FeeInfrastructureAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetFieldNumber = 1,
  };
  // string asset = 1 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // @@protoc_insertion_point(class_scope:api.FeeInfrastructureAccountsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class FeeInfrastructureAccountsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.FeeInfrastructureAccountsResponse) */ {
 public:
  inline FeeInfrastructureAccountsResponse() : FeeInfrastructureAccountsResponse(nullptr) {}
  virtual ~FeeInfrastructureAccountsResponse();

  FeeInfrastructureAccountsResponse(const FeeInfrastructureAccountsResponse& from);
  FeeInfrastructureAccountsResponse(FeeInfrastructureAccountsResponse&& from) noexcept
    : FeeInfrastructureAccountsResponse() {
    *this = ::std::move(from);
  }

  inline FeeInfrastructureAccountsResponse& operator=(const FeeInfrastructureAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeeInfrastructureAccountsResponse& operator=(FeeInfrastructureAccountsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeeInfrastructureAccountsResponse& default_instance();

  static inline const FeeInfrastructureAccountsResponse* internal_default_instance() {
    return reinterpret_cast<const FeeInfrastructureAccountsResponse*>(
               &_FeeInfrastructureAccountsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(FeeInfrastructureAccountsResponse& a, FeeInfrastructureAccountsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FeeInfrastructureAccountsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeeInfrastructureAccountsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeeInfrastructureAccountsResponse* New() const final {
    return CreateMaybeMessage<FeeInfrastructureAccountsResponse>(nullptr);
  }

  FeeInfrastructureAccountsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeeInfrastructureAccountsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeeInfrastructureAccountsResponse& from);
  void MergeFrom(const FeeInfrastructureAccountsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeeInfrastructureAccountsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.FeeInfrastructureAccountsResponse";
  }
  protected:
  explicit FeeInfrastructureAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated .vega.Account accounts = 1 [json_name = "accounts"];
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::vega::Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
      mutable_accounts();
  private:
  const ::vega::Account& _internal_accounts(int index) const;
  ::vega::Account* _internal_add_accounts();
  public:
  const ::vega::Account& accounts(int index) const;
  ::vega::Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:api.FeeInfrastructureAccountsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account > accounts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareProposalRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PrepareProposalRequest) */ {
 public:
  inline PrepareProposalRequest() : PrepareProposalRequest(nullptr) {}
  virtual ~PrepareProposalRequest();

  PrepareProposalRequest(const PrepareProposalRequest& from);
  PrepareProposalRequest(PrepareProposalRequest&& from) noexcept
    : PrepareProposalRequest() {
    *this = ::std::move(from);
  }

  inline PrepareProposalRequest& operator=(const PrepareProposalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareProposalRequest& operator=(PrepareProposalRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareProposalRequest& default_instance();

  static inline const PrepareProposalRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareProposalRequest*>(
               &_PrepareProposalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(PrepareProposalRequest& a, PrepareProposalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareProposalRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareProposalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareProposalRequest* New() const final {
    return CreateMaybeMessage<PrepareProposalRequest>(nullptr);
  }

  PrepareProposalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareProposalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareProposalRequest& from);
  void MergeFrom(const PrepareProposalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareProposalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PrepareProposalRequest";
  }
  protected:
  explicit PrepareProposalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
    kReferenceFieldNumber = 2,
    kProposalFieldNumber = 3,
  };
  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string reference = 2 [json_name = "reference"];
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // .vega.ProposalTerms proposal = 3 [json_name = "proposal", (.validator.field) = {
  bool has_proposal() const;
  private:
  bool _internal_has_proposal() const;
  public:
  void clear_proposal();
  const ::vega::ProposalTerms& proposal() const;
  ::vega::ProposalTerms* release_proposal();
  ::vega::ProposalTerms* mutable_proposal();
  void set_allocated_proposal(::vega::ProposalTerms* proposal);
  private:
  const ::vega::ProposalTerms& _internal_proposal() const;
  ::vega::ProposalTerms* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::vega::ProposalTerms* proposal);
  ::vega::ProposalTerms* unsafe_arena_release_proposal();

  // @@protoc_insertion_point(class_scope:api.PrepareProposalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::vega::ProposalTerms* proposal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareProposalResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PrepareProposalResponse) */ {
 public:
  inline PrepareProposalResponse() : PrepareProposalResponse(nullptr) {}
  virtual ~PrepareProposalResponse();

  PrepareProposalResponse(const PrepareProposalResponse& from);
  PrepareProposalResponse(PrepareProposalResponse&& from) noexcept
    : PrepareProposalResponse() {
    *this = ::std::move(from);
  }

  inline PrepareProposalResponse& operator=(const PrepareProposalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareProposalResponse& operator=(PrepareProposalResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareProposalResponse& default_instance();

  static inline const PrepareProposalResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareProposalResponse*>(
               &_PrepareProposalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(PrepareProposalResponse& a, PrepareProposalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareProposalResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareProposalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareProposalResponse* New() const final {
    return CreateMaybeMessage<PrepareProposalResponse>(nullptr);
  }

  PrepareProposalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareProposalResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareProposalResponse& from);
  void MergeFrom(const PrepareProposalResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareProposalResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PrepareProposalResponse";
  }
  protected:
  explicit PrepareProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
    kPendingProposalFieldNumber = 2,
  };
  // bytes blob = 1 [json_name = "blob"];
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // .vega.Proposal pendingProposal = 2 [json_name = "pendingProposal"];
  bool has_pendingproposal() const;
  private:
  bool _internal_has_pendingproposal() const;
  public:
  void clear_pendingproposal();
  const ::vega::Proposal& pendingproposal() const;
  ::vega::Proposal* release_pendingproposal();
  ::vega::Proposal* mutable_pendingproposal();
  void set_allocated_pendingproposal(::vega::Proposal* pendingproposal);
  private:
  const ::vega::Proposal& _internal_pendingproposal() const;
  ::vega::Proposal* _internal_mutable_pendingproposal();
  public:
  void unsafe_arena_set_allocated_pendingproposal(
      ::vega::Proposal* pendingproposal);
  ::vega::Proposal* unsafe_arena_release_pendingproposal();

  // @@protoc_insertion_point(class_scope:api.PrepareProposalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  ::vega::Proposal* pendingproposal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareVoteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PrepareVoteRequest) */ {
 public:
  inline PrepareVoteRequest() : PrepareVoteRequest(nullptr) {}
  virtual ~PrepareVoteRequest();

  PrepareVoteRequest(const PrepareVoteRequest& from);
  PrepareVoteRequest(PrepareVoteRequest&& from) noexcept
    : PrepareVoteRequest() {
    *this = ::std::move(from);
  }

  inline PrepareVoteRequest& operator=(const PrepareVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareVoteRequest& operator=(PrepareVoteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareVoteRequest& default_instance();

  static inline const PrepareVoteRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareVoteRequest*>(
               &_PrepareVoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(PrepareVoteRequest& a, PrepareVoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareVoteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareVoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareVoteRequest* New() const final {
    return CreateMaybeMessage<PrepareVoteRequest>(nullptr);
  }

  PrepareVoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareVoteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareVoteRequest& from);
  void MergeFrom(const PrepareVoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareVoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PrepareVoteRequest";
  }
  protected:
  explicit PrepareVoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoteFieldNumber = 1,
  };
  // .vega.Vote vote = 1 [json_name = "vote", (.validator.field) = {
  bool has_vote() const;
  private:
  bool _internal_has_vote() const;
  public:
  void clear_vote();
  const ::vega::Vote& vote() const;
  ::vega::Vote* release_vote();
  ::vega::Vote* mutable_vote();
  void set_allocated_vote(::vega::Vote* vote);
  private:
  const ::vega::Vote& _internal_vote() const;
  ::vega::Vote* _internal_mutable_vote();
  public:
  void unsafe_arena_set_allocated_vote(
      ::vega::Vote* vote);
  ::vega::Vote* unsafe_arena_release_vote();

  // @@protoc_insertion_point(class_scope:api.PrepareVoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Vote* vote_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareVoteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PrepareVoteResponse) */ {
 public:
  inline PrepareVoteResponse() : PrepareVoteResponse(nullptr) {}
  virtual ~PrepareVoteResponse();

  PrepareVoteResponse(const PrepareVoteResponse& from);
  PrepareVoteResponse(PrepareVoteResponse&& from) noexcept
    : PrepareVoteResponse() {
    *this = ::std::move(from);
  }

  inline PrepareVoteResponse& operator=(const PrepareVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareVoteResponse& operator=(PrepareVoteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareVoteResponse& default_instance();

  static inline const PrepareVoteResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareVoteResponse*>(
               &_PrepareVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(PrepareVoteResponse& a, PrepareVoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareVoteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareVoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareVoteResponse* New() const final {
    return CreateMaybeMessage<PrepareVoteResponse>(nullptr);
  }

  PrepareVoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareVoteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareVoteResponse& from);
  void MergeFrom(const PrepareVoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareVoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PrepareVoteResponse";
  }
  protected:
  explicit PrepareVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
    kVoteFieldNumber = 2,
  };
  // bytes blob = 1 [json_name = "blob"];
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // .vega.Vote vote = 2 [json_name = "vote"];
  bool has_vote() const;
  private:
  bool _internal_has_vote() const;
  public:
  void clear_vote();
  const ::vega::Vote& vote() const;
  ::vega::Vote* release_vote();
  ::vega::Vote* mutable_vote();
  void set_allocated_vote(::vega::Vote* vote);
  private:
  const ::vega::Vote& _internal_vote() const;
  ::vega::Vote* _internal_mutable_vote();
  public:
  void unsafe_arena_set_allocated_vote(
      ::vega::Vote* vote);
  ::vega::Vote* unsafe_arena_release_vote();

  // @@protoc_insertion_point(class_scope:api.PrepareVoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  ::vega::Vote* vote_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareLiquidityProvisionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PrepareLiquidityProvisionRequest) */ {
 public:
  inline PrepareLiquidityProvisionRequest() : PrepareLiquidityProvisionRequest(nullptr) {}
  virtual ~PrepareLiquidityProvisionRequest();

  PrepareLiquidityProvisionRequest(const PrepareLiquidityProvisionRequest& from);
  PrepareLiquidityProvisionRequest(PrepareLiquidityProvisionRequest&& from) noexcept
    : PrepareLiquidityProvisionRequest() {
    *this = ::std::move(from);
  }

  inline PrepareLiquidityProvisionRequest& operator=(const PrepareLiquidityProvisionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareLiquidityProvisionRequest& operator=(PrepareLiquidityProvisionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareLiquidityProvisionRequest& default_instance();

  static inline const PrepareLiquidityProvisionRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareLiquidityProvisionRequest*>(
               &_PrepareLiquidityProvisionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(PrepareLiquidityProvisionRequest& a, PrepareLiquidityProvisionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareLiquidityProvisionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareLiquidityProvisionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareLiquidityProvisionRequest* New() const final {
    return CreateMaybeMessage<PrepareLiquidityProvisionRequest>(nullptr);
  }

  PrepareLiquidityProvisionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareLiquidityProvisionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareLiquidityProvisionRequest& from);
  void MergeFrom(const PrepareLiquidityProvisionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareLiquidityProvisionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PrepareLiquidityProvisionRequest";
  }
  protected:
  explicit PrepareLiquidityProvisionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubmissionFieldNumber = 1,
  };
  // .vega.LiquidityProvisionSubmission submission = 1 [json_name = "submission", (.validator.field) = {
  bool has_submission() const;
  private:
  bool _internal_has_submission() const;
  public:
  void clear_submission();
  const ::vega::LiquidityProvisionSubmission& submission() const;
  ::vega::LiquidityProvisionSubmission* release_submission();
  ::vega::LiquidityProvisionSubmission* mutable_submission();
  void set_allocated_submission(::vega::LiquidityProvisionSubmission* submission);
  private:
  const ::vega::LiquidityProvisionSubmission& _internal_submission() const;
  ::vega::LiquidityProvisionSubmission* _internal_mutable_submission();
  public:
  void unsafe_arena_set_allocated_submission(
      ::vega::LiquidityProvisionSubmission* submission);
  ::vega::LiquidityProvisionSubmission* unsafe_arena_release_submission();

  // @@protoc_insertion_point(class_scope:api.PrepareLiquidityProvisionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::LiquidityProvisionSubmission* submission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class PrepareLiquidityProvisionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.PrepareLiquidityProvisionResponse) */ {
 public:
  inline PrepareLiquidityProvisionResponse() : PrepareLiquidityProvisionResponse(nullptr) {}
  virtual ~PrepareLiquidityProvisionResponse();

  PrepareLiquidityProvisionResponse(const PrepareLiquidityProvisionResponse& from);
  PrepareLiquidityProvisionResponse(PrepareLiquidityProvisionResponse&& from) noexcept
    : PrepareLiquidityProvisionResponse() {
    *this = ::std::move(from);
  }

  inline PrepareLiquidityProvisionResponse& operator=(const PrepareLiquidityProvisionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareLiquidityProvisionResponse& operator=(PrepareLiquidityProvisionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareLiquidityProvisionResponse& default_instance();

  static inline const PrepareLiquidityProvisionResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareLiquidityProvisionResponse*>(
               &_PrepareLiquidityProvisionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(PrepareLiquidityProvisionResponse& a, PrepareLiquidityProvisionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareLiquidityProvisionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareLiquidityProvisionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareLiquidityProvisionResponse* New() const final {
    return CreateMaybeMessage<PrepareLiquidityProvisionResponse>(nullptr);
  }

  PrepareLiquidityProvisionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareLiquidityProvisionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareLiquidityProvisionResponse& from);
  void MergeFrom(const PrepareLiquidityProvisionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareLiquidityProvisionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.PrepareLiquidityProvisionResponse";
  }
  protected:
  explicit PrepareLiquidityProvisionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
  };
  // bytes blob = 1 [json_name = "blob"];
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // @@protoc_insertion_point(class_scope:api.PrepareLiquidityProvisionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrderByIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.OrderByIDRequest) */ {
 public:
  inline OrderByIDRequest() : OrderByIDRequest(nullptr) {}
  virtual ~OrderByIDRequest();

  OrderByIDRequest(const OrderByIDRequest& from);
  OrderByIDRequest(OrderByIDRequest&& from) noexcept
    : OrderByIDRequest() {
    *this = ::std::move(from);
  }

  inline OrderByIDRequest& operator=(const OrderByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderByIDRequest& operator=(OrderByIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderByIDRequest& default_instance();

  static inline const OrderByIDRequest* internal_default_instance() {
    return reinterpret_cast<const OrderByIDRequest*>(
               &_OrderByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(OrderByIDRequest& a, OrderByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderByIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderByIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderByIDRequest* New() const final {
    return CreateMaybeMessage<OrderByIDRequest>(nullptr);
  }

  OrderByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderByIDRequest& from);
  void MergeFrom(const OrderByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.OrderByIDRequest";
  }
  protected:
  explicit OrderByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIDFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string orderID = 1 [json_name = "orderID", (.validator.field) = {
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // uint64 version = 2 [json_name = "version"];
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.OrderByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrderVersionsByIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.OrderVersionsByIDRequest) */ {
 public:
  inline OrderVersionsByIDRequest() : OrderVersionsByIDRequest(nullptr) {}
  virtual ~OrderVersionsByIDRequest();

  OrderVersionsByIDRequest(const OrderVersionsByIDRequest& from);
  OrderVersionsByIDRequest(OrderVersionsByIDRequest&& from) noexcept
    : OrderVersionsByIDRequest() {
    *this = ::std::move(from);
  }

  inline OrderVersionsByIDRequest& operator=(const OrderVersionsByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderVersionsByIDRequest& operator=(OrderVersionsByIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderVersionsByIDRequest& default_instance();

  static inline const OrderVersionsByIDRequest* internal_default_instance() {
    return reinterpret_cast<const OrderVersionsByIDRequest*>(
               &_OrderVersionsByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(OrderVersionsByIDRequest& a, OrderVersionsByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderVersionsByIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderVersionsByIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderVersionsByIDRequest* New() const final {
    return CreateMaybeMessage<OrderVersionsByIDRequest>(nullptr);
  }

  OrderVersionsByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderVersionsByIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderVersionsByIDRequest& from);
  void MergeFrom(const OrderVersionsByIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderVersionsByIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.OrderVersionsByIDRequest";
  }
  protected:
  explicit OrderVersionsByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIDFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string orderID = 1 [json_name = "orderID", (.validator.field) = {
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // .api.Pagination pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::api::Pagination& pagination() const;
  ::api::Pagination* release_pagination();
  ::api::Pagination* mutable_pagination();
  void set_allocated_pagination(::api::Pagination* pagination);
  private:
  const ::api::Pagination& _internal_pagination() const;
  ::api::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::api::Pagination* pagination);
  ::api::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:api.OrderVersionsByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::api::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class OrderVersionsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.OrderVersionsResponse) */ {
 public:
  inline OrderVersionsResponse() : OrderVersionsResponse(nullptr) {}
  virtual ~OrderVersionsResponse();

  OrderVersionsResponse(const OrderVersionsResponse& from);
  OrderVersionsResponse(OrderVersionsResponse&& from) noexcept
    : OrderVersionsResponse() {
    *this = ::std::move(from);
  }

  inline OrderVersionsResponse& operator=(const OrderVersionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderVersionsResponse& operator=(OrderVersionsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderVersionsResponse& default_instance();

  static inline const OrderVersionsResponse* internal_default_instance() {
    return reinterpret_cast<const OrderVersionsResponse*>(
               &_OrderVersionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(OrderVersionsResponse& a, OrderVersionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderVersionsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderVersionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderVersionsResponse* New() const final {
    return CreateMaybeMessage<OrderVersionsResponse>(nullptr);
  }

  OrderVersionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderVersionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderVersionsResponse& from);
  void MergeFrom(const OrderVersionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderVersionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.OrderVersionsResponse";
  }
  protected:
  explicit OrderVersionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
  };
  // repeated .vega.Order orders = 1 [json_name = "orders"];
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::vega::Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
      mutable_orders();
  private:
  const ::vega::Order& _internal_orders(int index) const;
  ::vega::Order* _internal_add_orders();
  public:
  const ::vega::Order& orders(int index) const;
  ::vega::Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
      orders() const;

  // @@protoc_insertion_point(class_scope:api.OrderVersionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order > orders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class EstimateFeeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.EstimateFeeRequest) */ {
 public:
  inline EstimateFeeRequest() : EstimateFeeRequest(nullptr) {}
  virtual ~EstimateFeeRequest();

  EstimateFeeRequest(const EstimateFeeRequest& from);
  EstimateFeeRequest(EstimateFeeRequest&& from) noexcept
    : EstimateFeeRequest() {
    *this = ::std::move(from);
  }

  inline EstimateFeeRequest& operator=(const EstimateFeeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateFeeRequest& operator=(EstimateFeeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateFeeRequest& default_instance();

  static inline const EstimateFeeRequest* internal_default_instance() {
    return reinterpret_cast<const EstimateFeeRequest*>(
               &_EstimateFeeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(EstimateFeeRequest& a, EstimateFeeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateFeeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateFeeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateFeeRequest* New() const final {
    return CreateMaybeMessage<EstimateFeeRequest>(nullptr);
  }

  EstimateFeeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateFeeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateFeeRequest& from);
  void MergeFrom(const EstimateFeeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateFeeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.EstimateFeeRequest";
  }
  protected:
  explicit EstimateFeeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .vega.Order order = 1 [json_name = "order"];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);
  private:
  const ::vega::Order& _internal_order() const;
  ::vega::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::vega::Order* order);
  ::vega::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:api.EstimateFeeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class EstimateFeeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.EstimateFeeResponse) */ {
 public:
  inline EstimateFeeResponse() : EstimateFeeResponse(nullptr) {}
  virtual ~EstimateFeeResponse();

  EstimateFeeResponse(const EstimateFeeResponse& from);
  EstimateFeeResponse(EstimateFeeResponse&& from) noexcept
    : EstimateFeeResponse() {
    *this = ::std::move(from);
  }

  inline EstimateFeeResponse& operator=(const EstimateFeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateFeeResponse& operator=(EstimateFeeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateFeeResponse& default_instance();

  static inline const EstimateFeeResponse* internal_default_instance() {
    return reinterpret_cast<const EstimateFeeResponse*>(
               &_EstimateFeeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(EstimateFeeResponse& a, EstimateFeeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateFeeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateFeeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateFeeResponse* New() const final {
    return CreateMaybeMessage<EstimateFeeResponse>(nullptr);
  }

  EstimateFeeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateFeeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateFeeResponse& from);
  void MergeFrom(const EstimateFeeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateFeeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.EstimateFeeResponse";
  }
  protected:
  explicit EstimateFeeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeeFieldNumber = 2,
  };
  // .vega.Fee fee = 2 [json_name = "fee"];
  bool has_fee() const;
  private:
  bool _internal_has_fee() const;
  public:
  void clear_fee();
  const ::vega::Fee& fee() const;
  ::vega::Fee* release_fee();
  ::vega::Fee* mutable_fee();
  void set_allocated_fee(::vega::Fee* fee);
  private:
  const ::vega::Fee& _internal_fee() const;
  ::vega::Fee* _internal_mutable_fee();
  public:
  void unsafe_arena_set_allocated_fee(
      ::vega::Fee* fee);
  ::vega::Fee* unsafe_arena_release_fee();

  // @@protoc_insertion_point(class_scope:api.EstimateFeeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Fee* fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class EstimateMarginRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.EstimateMarginRequest) */ {
 public:
  inline EstimateMarginRequest() : EstimateMarginRequest(nullptr) {}
  virtual ~EstimateMarginRequest();

  EstimateMarginRequest(const EstimateMarginRequest& from);
  EstimateMarginRequest(EstimateMarginRequest&& from) noexcept
    : EstimateMarginRequest() {
    *this = ::std::move(from);
  }

  inline EstimateMarginRequest& operator=(const EstimateMarginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateMarginRequest& operator=(EstimateMarginRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateMarginRequest& default_instance();

  static inline const EstimateMarginRequest* internal_default_instance() {
    return reinterpret_cast<const EstimateMarginRequest*>(
               &_EstimateMarginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(EstimateMarginRequest& a, EstimateMarginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateMarginRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateMarginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateMarginRequest* New() const final {
    return CreateMaybeMessage<EstimateMarginRequest>(nullptr);
  }

  EstimateMarginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateMarginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateMarginRequest& from);
  void MergeFrom(const EstimateMarginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateMarginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.EstimateMarginRequest";
  }
  protected:
  explicit EstimateMarginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .vega.Order order = 1 [json_name = "order"];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);
  private:
  const ::vega::Order& _internal_order() const;
  ::vega::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::vega::Order* order);
  ::vega::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:api.EstimateMarginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class EstimateMarginResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.EstimateMarginResponse) */ {
 public:
  inline EstimateMarginResponse() : EstimateMarginResponse(nullptr) {}
  virtual ~EstimateMarginResponse();

  EstimateMarginResponse(const EstimateMarginResponse& from);
  EstimateMarginResponse(EstimateMarginResponse&& from) noexcept
    : EstimateMarginResponse() {
    *this = ::std::move(from);
  }

  inline EstimateMarginResponse& operator=(const EstimateMarginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateMarginResponse& operator=(EstimateMarginResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateMarginResponse& default_instance();

  static inline const EstimateMarginResponse* internal_default_instance() {
    return reinterpret_cast<const EstimateMarginResponse*>(
               &_EstimateMarginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(EstimateMarginResponse& a, EstimateMarginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateMarginResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateMarginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateMarginResponse* New() const final {
    return CreateMaybeMessage<EstimateMarginResponse>(nullptr);
  }

  EstimateMarginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateMarginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateMarginResponse& from);
  void MergeFrom(const EstimateMarginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateMarginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.EstimateMarginResponse";
  }
  protected:
  explicit EstimateMarginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarginLevelsFieldNumber = 2,
  };
  // .vega.MarginLevels marginLevels = 2 [json_name = "marginLevels"];
  bool has_marginlevels() const;
  private:
  bool _internal_has_marginlevels() const;
  public:
  void clear_marginlevels();
  const ::vega::MarginLevels& marginlevels() const;
  ::vega::MarginLevels* release_marginlevels();
  ::vega::MarginLevels* mutable_marginlevels();
  void set_allocated_marginlevels(::vega::MarginLevels* marginlevels);
  private:
  const ::vega::MarginLevels& _internal_marginlevels() const;
  ::vega::MarginLevels* _internal_mutable_marginlevels();
  public:
  void unsafe_arena_set_allocated_marginlevels(
      ::vega::MarginLevels* marginlevels);
  ::vega::MarginLevels* unsafe_arena_release_marginlevels();

  // @@protoc_insertion_point(class_scope:api.EstimateMarginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::MarginLevels* marginlevels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObserveEventsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ObserveEventsRequest) */ {
 public:
  inline ObserveEventsRequest() : ObserveEventsRequest(nullptr) {}
  virtual ~ObserveEventsRequest();

  ObserveEventsRequest(const ObserveEventsRequest& from);
  ObserveEventsRequest(ObserveEventsRequest&& from) noexcept
    : ObserveEventsRequest() {
    *this = ::std::move(from);
  }

  inline ObserveEventsRequest& operator=(const ObserveEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObserveEventsRequest& operator=(ObserveEventsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObserveEventsRequest& default_instance();

  static inline const ObserveEventsRequest* internal_default_instance() {
    return reinterpret_cast<const ObserveEventsRequest*>(
               &_ObserveEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(ObserveEventsRequest& a, ObserveEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ObserveEventsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObserveEventsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObserveEventsRequest* New() const final {
    return CreateMaybeMessage<ObserveEventsRequest>(nullptr);
  }

  ObserveEventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObserveEventsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObserveEventsRequest& from);
  void MergeFrom(const ObserveEventsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObserveEventsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ObserveEventsRequest";
  }
  protected:
  explicit ObserveEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kMarketIDFieldNumber = 2,
    kPartyIDFieldNumber = 3,
    kBatchSizeFieldNumber = 4,
  };
  // repeated .vega.BusEventType type = 1 [json_name = "type"];
  int type_size() const;
  private:
  int _internal_type_size() const;
  public:
  void clear_type();
  private:
  ::vega::BusEventType _internal_type(int index) const;
  void _internal_add_type(::vega::BusEventType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_type();
  public:
  ::vega::BusEventType type(int index) const;
  void set_type(int index, ::vega::BusEventType value);
  void add_type(::vega::BusEventType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_type();

  // string marketID = 2 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string partyID = 3 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // int64 batchSize = 4 [json_name = "batchSize"];
  void clear_batchsize();
  ::PROTOBUF_NAMESPACE_ID::int64 batchsize() const;
  void set_batchsize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_batchsize() const;
  void _internal_set_batchsize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.ObserveEventsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> type_;
  mutable std::atomic<int> _type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::int64 batchsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ObserveEventsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ObserveEventsResponse) */ {
 public:
  inline ObserveEventsResponse() : ObserveEventsResponse(nullptr) {}
  virtual ~ObserveEventsResponse();

  ObserveEventsResponse(const ObserveEventsResponse& from);
  ObserveEventsResponse(ObserveEventsResponse&& from) noexcept
    : ObserveEventsResponse() {
    *this = ::std::move(from);
  }

  inline ObserveEventsResponse& operator=(const ObserveEventsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObserveEventsResponse& operator=(ObserveEventsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObserveEventsResponse& default_instance();

  static inline const ObserveEventsResponse* internal_default_instance() {
    return reinterpret_cast<const ObserveEventsResponse*>(
               &_ObserveEventsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(ObserveEventsResponse& a, ObserveEventsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ObserveEventsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObserveEventsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObserveEventsResponse* New() const final {
    return CreateMaybeMessage<ObserveEventsResponse>(nullptr);
  }

  ObserveEventsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObserveEventsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObserveEventsResponse& from);
  void MergeFrom(const ObserveEventsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObserveEventsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ObserveEventsResponse";
  }
  protected:
  explicit ObserveEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .vega.BusEvent events = 1 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::vega::BusEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::BusEvent >*
      mutable_events();
  private:
  const ::vega::BusEvent& _internal_events(int index) const;
  ::vega::BusEvent* _internal_add_events();
  public:
  const ::vega::BusEvent& events(int index) const;
  ::vega::BusEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::BusEvent >&
      events() const;

  // @@protoc_insertion_point(class_scope:api.ObserveEventsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::BusEvent > events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class WithdrawalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.WithdrawalsRequest) */ {
 public:
  inline WithdrawalsRequest() : WithdrawalsRequest(nullptr) {}
  virtual ~WithdrawalsRequest();

  WithdrawalsRequest(const WithdrawalsRequest& from);
  WithdrawalsRequest(WithdrawalsRequest&& from) noexcept
    : WithdrawalsRequest() {
    *this = ::std::move(from);
  }

  inline WithdrawalsRequest& operator=(const WithdrawalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawalsRequest& operator=(WithdrawalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithdrawalsRequest& default_instance();

  static inline const WithdrawalsRequest* internal_default_instance() {
    return reinterpret_cast<const WithdrawalsRequest*>(
               &_WithdrawalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(WithdrawalsRequest& a, WithdrawalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithdrawalsRequest* New() const final {
    return CreateMaybeMessage<WithdrawalsRequest>(nullptr);
  }

  WithdrawalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithdrawalsRequest& from);
  void MergeFrom(const WithdrawalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.WithdrawalsRequest";
  }
  protected:
  explicit WithdrawalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
  };
  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // @@protoc_insertion_point(class_scope:api.WithdrawalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class WithdrawalsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.WithdrawalsResponse) */ {
 public:
  inline WithdrawalsResponse() : WithdrawalsResponse(nullptr) {}
  virtual ~WithdrawalsResponse();

  WithdrawalsResponse(const WithdrawalsResponse& from);
  WithdrawalsResponse(WithdrawalsResponse&& from) noexcept
    : WithdrawalsResponse() {
    *this = ::std::move(from);
  }

  inline WithdrawalsResponse& operator=(const WithdrawalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawalsResponse& operator=(WithdrawalsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithdrawalsResponse& default_instance();

  static inline const WithdrawalsResponse* internal_default_instance() {
    return reinterpret_cast<const WithdrawalsResponse*>(
               &_WithdrawalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(WithdrawalsResponse& a, WithdrawalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawalsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawalsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithdrawalsResponse* New() const final {
    return CreateMaybeMessage<WithdrawalsResponse>(nullptr);
  }

  WithdrawalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawalsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithdrawalsResponse& from);
  void MergeFrom(const WithdrawalsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawalsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.WithdrawalsResponse";
  }
  protected:
  explicit WithdrawalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWithdrawalsFieldNumber = 1,
  };
  // repeated .vega.Withdrawal withdrawals = 1 [json_name = "withdrawals"];
  int withdrawals_size() const;
  private:
  int _internal_withdrawals_size() const;
  public:
  void clear_withdrawals();
  ::vega::Withdrawal* mutable_withdrawals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Withdrawal >*
      mutable_withdrawals();
  private:
  const ::vega::Withdrawal& _internal_withdrawals(int index) const;
  ::vega::Withdrawal* _internal_add_withdrawals();
  public:
  const ::vega::Withdrawal& withdrawals(int index) const;
  ::vega::Withdrawal* add_withdrawals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Withdrawal >&
      withdrawals() const;

  // @@protoc_insertion_point(class_scope:api.WithdrawalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Withdrawal > withdrawals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class WithdrawalRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.WithdrawalRequest) */ {
 public:
  inline WithdrawalRequest() : WithdrawalRequest(nullptr) {}
  virtual ~WithdrawalRequest();

  WithdrawalRequest(const WithdrawalRequest& from);
  WithdrawalRequest(WithdrawalRequest&& from) noexcept
    : WithdrawalRequest() {
    *this = ::std::move(from);
  }

  inline WithdrawalRequest& operator=(const WithdrawalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawalRequest& operator=(WithdrawalRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithdrawalRequest& default_instance();

  static inline const WithdrawalRequest* internal_default_instance() {
    return reinterpret_cast<const WithdrawalRequest*>(
               &_WithdrawalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(WithdrawalRequest& a, WithdrawalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawalRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithdrawalRequest* New() const final {
    return CreateMaybeMessage<WithdrawalRequest>(nullptr);
  }

  WithdrawalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithdrawalRequest& from);
  void MergeFrom(const WithdrawalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.WithdrawalRequest";
  }
  protected:
  explicit WithdrawalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
  };
  // string ID = 1 [json_name = "ID", (.validator.field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:api.WithdrawalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class WithdrawalResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.WithdrawalResponse) */ {
 public:
  inline WithdrawalResponse() : WithdrawalResponse(nullptr) {}
  virtual ~WithdrawalResponse();

  WithdrawalResponse(const WithdrawalResponse& from);
  WithdrawalResponse(WithdrawalResponse&& from) noexcept
    : WithdrawalResponse() {
    *this = ::std::move(from);
  }

  inline WithdrawalResponse& operator=(const WithdrawalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawalResponse& operator=(WithdrawalResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithdrawalResponse& default_instance();

  static inline const WithdrawalResponse* internal_default_instance() {
    return reinterpret_cast<const WithdrawalResponse*>(
               &_WithdrawalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(WithdrawalResponse& a, WithdrawalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawalResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithdrawalResponse* New() const final {
    return CreateMaybeMessage<WithdrawalResponse>(nullptr);
  }

  WithdrawalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawalResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithdrawalResponse& from);
  void MergeFrom(const WithdrawalResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawalResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.WithdrawalResponse";
  }
  protected:
  explicit WithdrawalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWithdrawalFieldNumber = 1,
  };
  // .vega.Withdrawal withdrawal = 1 [json_name = "withdrawal"];
  bool has_withdrawal() const;
  private:
  bool _internal_has_withdrawal() const;
  public:
  void clear_withdrawal();
  const ::vega::Withdrawal& withdrawal() const;
  ::vega::Withdrawal* release_withdrawal();
  ::vega::Withdrawal* mutable_withdrawal();
  void set_allocated_withdrawal(::vega::Withdrawal* withdrawal);
  private:
  const ::vega::Withdrawal& _internal_withdrawal() const;
  ::vega::Withdrawal* _internal_mutable_withdrawal();
  public:
  void unsafe_arena_set_allocated_withdrawal(
      ::vega::Withdrawal* withdrawal);
  ::vega::Withdrawal* unsafe_arena_release_withdrawal();

  // @@protoc_insertion_point(class_scope:api.WithdrawalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Withdrawal* withdrawal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ERC20WithdrawalApprovalRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ERC20WithdrawalApprovalRequest) */ {
 public:
  inline ERC20WithdrawalApprovalRequest() : ERC20WithdrawalApprovalRequest(nullptr) {}
  virtual ~ERC20WithdrawalApprovalRequest();

  ERC20WithdrawalApprovalRequest(const ERC20WithdrawalApprovalRequest& from);
  ERC20WithdrawalApprovalRequest(ERC20WithdrawalApprovalRequest&& from) noexcept
    : ERC20WithdrawalApprovalRequest() {
    *this = ::std::move(from);
  }

  inline ERC20WithdrawalApprovalRequest& operator=(const ERC20WithdrawalApprovalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ERC20WithdrawalApprovalRequest& operator=(ERC20WithdrawalApprovalRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ERC20WithdrawalApprovalRequest& default_instance();

  static inline const ERC20WithdrawalApprovalRequest* internal_default_instance() {
    return reinterpret_cast<const ERC20WithdrawalApprovalRequest*>(
               &_ERC20WithdrawalApprovalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(ERC20WithdrawalApprovalRequest& a, ERC20WithdrawalApprovalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ERC20WithdrawalApprovalRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ERC20WithdrawalApprovalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ERC20WithdrawalApprovalRequest* New() const final {
    return CreateMaybeMessage<ERC20WithdrawalApprovalRequest>(nullptr);
  }

  ERC20WithdrawalApprovalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ERC20WithdrawalApprovalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ERC20WithdrawalApprovalRequest& from);
  void MergeFrom(const ERC20WithdrawalApprovalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ERC20WithdrawalApprovalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ERC20WithdrawalApprovalRequest";
  }
  protected:
  explicit ERC20WithdrawalApprovalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWithdrawalIDFieldNumber = 1,
  };
  // string withdrawalID = 1 [json_name = "withdrawalID", (.validator.field) = {
  void clear_withdrawalid();
  const std::string& withdrawalid() const;
  void set_withdrawalid(const std::string& value);
  void set_withdrawalid(std::string&& value);
  void set_withdrawalid(const char* value);
  void set_withdrawalid(const char* value, size_t size);
  std::string* mutable_withdrawalid();
  std::string* release_withdrawalid();
  void set_allocated_withdrawalid(std::string* withdrawalid);
  private:
  const std::string& _internal_withdrawalid() const;
  void _internal_set_withdrawalid(const std::string& value);
  std::string* _internal_mutable_withdrawalid();
  public:

  // @@protoc_insertion_point(class_scope:api.ERC20WithdrawalApprovalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr withdrawalid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class ERC20WithdrawalApprovalResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.ERC20WithdrawalApprovalResponse) */ {
 public:
  inline ERC20WithdrawalApprovalResponse() : ERC20WithdrawalApprovalResponse(nullptr) {}
  virtual ~ERC20WithdrawalApprovalResponse();

  ERC20WithdrawalApprovalResponse(const ERC20WithdrawalApprovalResponse& from);
  ERC20WithdrawalApprovalResponse(ERC20WithdrawalApprovalResponse&& from) noexcept
    : ERC20WithdrawalApprovalResponse() {
    *this = ::std::move(from);
  }

  inline ERC20WithdrawalApprovalResponse& operator=(const ERC20WithdrawalApprovalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ERC20WithdrawalApprovalResponse& operator=(ERC20WithdrawalApprovalResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ERC20WithdrawalApprovalResponse& default_instance();

  static inline const ERC20WithdrawalApprovalResponse* internal_default_instance() {
    return reinterpret_cast<const ERC20WithdrawalApprovalResponse*>(
               &_ERC20WithdrawalApprovalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(ERC20WithdrawalApprovalResponse& a, ERC20WithdrawalApprovalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ERC20WithdrawalApprovalResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ERC20WithdrawalApprovalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ERC20WithdrawalApprovalResponse* New() const final {
    return CreateMaybeMessage<ERC20WithdrawalApprovalResponse>(nullptr);
  }

  ERC20WithdrawalApprovalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ERC20WithdrawalApprovalResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ERC20WithdrawalApprovalResponse& from);
  void MergeFrom(const ERC20WithdrawalApprovalResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ERC20WithdrawalApprovalResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.ERC20WithdrawalApprovalResponse";
  }
  protected:
  explicit ERC20WithdrawalApprovalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetSourceFieldNumber = 1,
    kAmountFieldNumber = 2,
    kNonceFieldNumber = 4,
    kSignaturesFieldNumber = 5,
    kExpiryFieldNumber = 3,
  };
  // string assetSource = 1 [json_name = "assetSource"];
  void clear_assetsource();
  const std::string& assetsource() const;
  void set_assetsource(const std::string& value);
  void set_assetsource(std::string&& value);
  void set_assetsource(const char* value);
  void set_assetsource(const char* value, size_t size);
  std::string* mutable_assetsource();
  std::string* release_assetsource();
  void set_allocated_assetsource(std::string* assetsource);
  private:
  const std::string& _internal_assetsource() const;
  void _internal_set_assetsource(const std::string& value);
  std::string* _internal_mutable_assetsource();
  public:

  // string amount = 2 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string nonce = 4 [json_name = "nonce"];
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // string signatures = 5 [json_name = "signatures"];
  void clear_signatures();
  const std::string& signatures() const;
  void set_signatures(const std::string& value);
  void set_signatures(std::string&& value);
  void set_signatures(const char* value);
  void set_signatures(const char* value, size_t size);
  std::string* mutable_signatures();
  std::string* release_signatures();
  void set_allocated_signatures(std::string* signatures);
  private:
  const std::string& _internal_signatures() const;
  void _internal_set_signatures(const std::string& value);
  std::string* _internal_mutable_signatures();
  public:

  // int64 expiry = 3 [json_name = "expiry"];
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::int64 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:api.ERC20WithdrawalApprovalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetsource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signatures_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class DepositsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.DepositsRequest) */ {
 public:
  inline DepositsRequest() : DepositsRequest(nullptr) {}
  virtual ~DepositsRequest();

  DepositsRequest(const DepositsRequest& from);
  DepositsRequest(DepositsRequest&& from) noexcept
    : DepositsRequest() {
    *this = ::std::move(from);
  }

  inline DepositsRequest& operator=(const DepositsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepositsRequest& operator=(DepositsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepositsRequest& default_instance();

  static inline const DepositsRequest* internal_default_instance() {
    return reinterpret_cast<const DepositsRequest*>(
               &_DepositsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(DepositsRequest& a, DepositsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DepositsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepositsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepositsRequest* New() const final {
    return CreateMaybeMessage<DepositsRequest>(nullptr);
  }

  DepositsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepositsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepositsRequest& from);
  void MergeFrom(const DepositsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepositsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.DepositsRequest";
  }
  protected:
  explicit DepositsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
  };
  // string partyID = 1 [json_name = "partyID", (.validator.field) = {
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // @@protoc_insertion_point(class_scope:api.DepositsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class DepositsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.DepositsResponse) */ {
 public:
  inline DepositsResponse() : DepositsResponse(nullptr) {}
  virtual ~DepositsResponse();

  DepositsResponse(const DepositsResponse& from);
  DepositsResponse(DepositsResponse&& from) noexcept
    : DepositsResponse() {
    *this = ::std::move(from);
  }

  inline DepositsResponse& operator=(const DepositsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepositsResponse& operator=(DepositsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepositsResponse& default_instance();

  static inline const DepositsResponse* internal_default_instance() {
    return reinterpret_cast<const DepositsResponse*>(
               &_DepositsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(DepositsResponse& a, DepositsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DepositsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepositsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepositsResponse* New() const final {
    return CreateMaybeMessage<DepositsResponse>(nullptr);
  }

  DepositsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepositsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepositsResponse& from);
  void MergeFrom(const DepositsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepositsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.DepositsResponse";
  }
  protected:
  explicit DepositsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepositsFieldNumber = 1,
  };
  // repeated .vega.Deposit deposits = 1 [json_name = "deposits"];
  int deposits_size() const;
  private:
  int _internal_deposits_size() const;
  public:
  void clear_deposits();
  ::vega::Deposit* mutable_deposits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Deposit >*
      mutable_deposits();
  private:
  const ::vega::Deposit& _internal_deposits(int index) const;
  ::vega::Deposit* _internal_add_deposits();
  public:
  const ::vega::Deposit& deposits(int index) const;
  ::vega::Deposit* add_deposits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Deposit >&
      deposits() const;

  // @@protoc_insertion_point(class_scope:api.DepositsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Deposit > deposits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class DepositRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.DepositRequest) */ {
 public:
  inline DepositRequest() : DepositRequest(nullptr) {}
  virtual ~DepositRequest();

  DepositRequest(const DepositRequest& from);
  DepositRequest(DepositRequest&& from) noexcept
    : DepositRequest() {
    *this = ::std::move(from);
  }

  inline DepositRequest& operator=(const DepositRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepositRequest& operator=(DepositRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepositRequest& default_instance();

  static inline const DepositRequest* internal_default_instance() {
    return reinterpret_cast<const DepositRequest*>(
               &_DepositRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(DepositRequest& a, DepositRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DepositRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepositRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepositRequest* New() const final {
    return CreateMaybeMessage<DepositRequest>(nullptr);
  }

  DepositRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepositRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepositRequest& from);
  void MergeFrom(const DepositRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepositRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.DepositRequest";
  }
  protected:
  explicit DepositRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
  };
  // string ID = 1 [json_name = "ID", (.validator.field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:api.DepositRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class DepositResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.DepositResponse) */ {
 public:
  inline DepositResponse() : DepositResponse(nullptr) {}
  virtual ~DepositResponse();

  DepositResponse(const DepositResponse& from);
  DepositResponse(DepositResponse&& from) noexcept
    : DepositResponse() {
    *this = ::std::move(from);
  }

  inline DepositResponse& operator=(const DepositResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepositResponse& operator=(DepositResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepositResponse& default_instance();

  static inline const DepositResponse* internal_default_instance() {
    return reinterpret_cast<const DepositResponse*>(
               &_DepositResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(DepositResponse& a, DepositResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DepositResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepositResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepositResponse* New() const final {
    return CreateMaybeMessage<DepositResponse>(nullptr);
  }

  DepositResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepositResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepositResponse& from);
  void MergeFrom(const DepositResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepositResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.DepositResponse";
  }
  protected:
  explicit DepositResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepositFieldNumber = 1,
  };
  // .vega.Deposit deposit = 1 [json_name = "deposit"];
  bool has_deposit() const;
  private:
  bool _internal_has_deposit() const;
  public:
  void clear_deposit();
  const ::vega::Deposit& deposit() const;
  ::vega::Deposit* release_deposit();
  ::vega::Deposit* mutable_deposit();
  void set_allocated_deposit(::vega::Deposit* deposit);
  private:
  const ::vega::Deposit& _internal_deposit() const;
  ::vega::Deposit* _internal_mutable_deposit();
  public:
  void unsafe_arena_set_allocated_deposit(
      ::vega::Deposit* deposit);
  ::vega::Deposit* unsafe_arena_release_deposit();

  // @@protoc_insertion_point(class_scope:api.DepositResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Deposit* deposit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class NetworkParametersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.NetworkParametersRequest) */ {
 public:
  inline NetworkParametersRequest() : NetworkParametersRequest(nullptr) {}
  virtual ~NetworkParametersRequest();

  NetworkParametersRequest(const NetworkParametersRequest& from);
  NetworkParametersRequest(NetworkParametersRequest&& from) noexcept
    : NetworkParametersRequest() {
    *this = ::std::move(from);
  }

  inline NetworkParametersRequest& operator=(const NetworkParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkParametersRequest& operator=(NetworkParametersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkParametersRequest& default_instance();

  static inline const NetworkParametersRequest* internal_default_instance() {
    return reinterpret_cast<const NetworkParametersRequest*>(
               &_NetworkParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(NetworkParametersRequest& a, NetworkParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkParametersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkParametersRequest* New() const final {
    return CreateMaybeMessage<NetworkParametersRequest>(nullptr);
  }

  NetworkParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkParametersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkParametersRequest& from);
  void MergeFrom(const NetworkParametersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.NetworkParametersRequest";
  }
  protected:
  explicit NetworkParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.NetworkParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class NetworkParametersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.NetworkParametersResponse) */ {
 public:
  inline NetworkParametersResponse() : NetworkParametersResponse(nullptr) {}
  virtual ~NetworkParametersResponse();

  NetworkParametersResponse(const NetworkParametersResponse& from);
  NetworkParametersResponse(NetworkParametersResponse&& from) noexcept
    : NetworkParametersResponse() {
    *this = ::std::move(from);
  }

  inline NetworkParametersResponse& operator=(const NetworkParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkParametersResponse& operator=(NetworkParametersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkParametersResponse& default_instance();

  static inline const NetworkParametersResponse* internal_default_instance() {
    return reinterpret_cast<const NetworkParametersResponse*>(
               &_NetworkParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(NetworkParametersResponse& a, NetworkParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkParametersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkParametersResponse* New() const final {
    return CreateMaybeMessage<NetworkParametersResponse>(nullptr);
  }

  NetworkParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkParametersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkParametersResponse& from);
  void MergeFrom(const NetworkParametersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.NetworkParametersResponse";
  }
  protected:
  explicit NetworkParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkParametersFieldNumber = 1,
  };
  // repeated .vega.NetworkParameter networkParameters = 1 [json_name = "networkParameters"];
  int networkparameters_size() const;
  private:
  int _internal_networkparameters_size() const;
  public:
  void clear_networkparameters();
  ::vega::NetworkParameter* mutable_networkparameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >*
      mutable_networkparameters();
  private:
  const ::vega::NetworkParameter& _internal_networkparameters(int index) const;
  ::vega::NetworkParameter* _internal_add_networkparameters();
  public:
  const ::vega::NetworkParameter& networkparameters(int index) const;
  ::vega::NetworkParameter* add_networkparameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >&
      networkparameters() const;

  // @@protoc_insertion_point(class_scope:api.NetworkParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter > networkparameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class LiquidityProvisionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.LiquidityProvisionsRequest) */ {
 public:
  inline LiquidityProvisionsRequest() : LiquidityProvisionsRequest(nullptr) {}
  virtual ~LiquidityProvisionsRequest();

  LiquidityProvisionsRequest(const LiquidityProvisionsRequest& from);
  LiquidityProvisionsRequest(LiquidityProvisionsRequest&& from) noexcept
    : LiquidityProvisionsRequest() {
    *this = ::std::move(from);
  }

  inline LiquidityProvisionsRequest& operator=(const LiquidityProvisionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidityProvisionsRequest& operator=(LiquidityProvisionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidityProvisionsRequest& default_instance();

  static inline const LiquidityProvisionsRequest* internal_default_instance() {
    return reinterpret_cast<const LiquidityProvisionsRequest*>(
               &_LiquidityProvisionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(LiquidityProvisionsRequest& a, LiquidityProvisionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidityProvisionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidityProvisionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidityProvisionsRequest* New() const final {
    return CreateMaybeMessage<LiquidityProvisionsRequest>(nullptr);
  }

  LiquidityProvisionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidityProvisionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidityProvisionsRequest& from);
  void MergeFrom(const LiquidityProvisionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidityProvisionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.LiquidityProvisionsRequest";
  }
  protected:
  explicit LiquidityProvisionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketFieldNumber = 1,
    kPartyFieldNumber = 2,
  };
  // string market = 1 [json_name = "market"];
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // string party = 2 [json_name = "party"];
  void clear_party();
  const std::string& party() const;
  void set_party(const std::string& value);
  void set_party(std::string&& value);
  void set_party(const char* value);
  void set_party(const char* value, size_t size);
  std::string* mutable_party();
  std::string* release_party();
  void set_allocated_party(std::string* party);
  private:
  const std::string& _internal_party() const;
  void _internal_set_party(const std::string& value);
  std::string* _internal_mutable_party();
  public:

  // @@protoc_insertion_point(class_scope:api.LiquidityProvisionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// -------------------------------------------------------------------

class LiquidityProvisionsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.LiquidityProvisionsResponse) */ {
 public:
  inline LiquidityProvisionsResponse() : LiquidityProvisionsResponse(nullptr) {}
  virtual ~LiquidityProvisionsResponse();

  LiquidityProvisionsResponse(const LiquidityProvisionsResponse& from);
  LiquidityProvisionsResponse(LiquidityProvisionsResponse&& from) noexcept
    : LiquidityProvisionsResponse() {
    *this = ::std::move(from);
  }

  inline LiquidityProvisionsResponse& operator=(const LiquidityProvisionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidityProvisionsResponse& operator=(LiquidityProvisionsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidityProvisionsResponse& default_instance();

  static inline const LiquidityProvisionsResponse* internal_default_instance() {
    return reinterpret_cast<const LiquidityProvisionsResponse*>(
               &_LiquidityProvisionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(LiquidityProvisionsResponse& a, LiquidityProvisionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidityProvisionsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidityProvisionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidityProvisionsResponse* New() const final {
    return CreateMaybeMessage<LiquidityProvisionsResponse>(nullptr);
  }

  LiquidityProvisionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidityProvisionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidityProvisionsResponse& from);
  void MergeFrom(const LiquidityProvisionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidityProvisionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.LiquidityProvisionsResponse";
  }
  protected:
  explicit LiquidityProvisionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2ftrading_2eproto);
    return ::descriptor_table_api_2ftrading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiquidityProvisionsFieldNumber = 1,
  };
  // repeated .vega.LiquidityProvision liquidityProvisions = 1 [json_name = "liquidityProvisions"];
  int liquidityprovisions_size() const;
  private:
  int _internal_liquidityprovisions_size() const;
  public:
  void clear_liquidityprovisions();
  ::vega::LiquidityProvision* mutable_liquidityprovisions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityProvision >*
      mutable_liquidityprovisions();
  private:
  const ::vega::LiquidityProvision& _internal_liquidityprovisions(int index) const;
  ::vega::LiquidityProvision* _internal_add_liquidityprovisions();
  public:
  const ::vega::LiquidityProvision& liquidityprovisions(int index) const;
  ::vega::LiquidityProvision* add_liquidityprovisions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityProvision >&
      liquidityprovisions() const;

  // @@protoc_insertion_point(class_scope:api.LiquidityProvisionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityProvision > liquidityprovisions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2ftrading_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PropagateChainEventRequest

// .vega.ChainEvent evt = 1 [json_name = "evt"];
inline bool PropagateChainEventRequest::_internal_has_evt() const {
  return this != internal_default_instance() && evt_ != nullptr;
}
inline bool PropagateChainEventRequest::has_evt() const {
  return _internal_has_evt();
}
inline const ::vega::ChainEvent& PropagateChainEventRequest::_internal_evt() const {
  const ::vega::ChainEvent* p = evt_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::ChainEvent&>(
      ::vega::_ChainEvent_default_instance_);
}
inline const ::vega::ChainEvent& PropagateChainEventRequest::evt() const {
  // @@protoc_insertion_point(field_get:api.PropagateChainEventRequest.evt)
  return _internal_evt();
}
inline void PropagateChainEventRequest::unsafe_arena_set_allocated_evt(
    ::vega::ChainEvent* evt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evt_);
  }
  evt_ = evt;
  if (evt) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.PropagateChainEventRequest.evt)
}
inline ::vega::ChainEvent* PropagateChainEventRequest::release_evt() {

  ::vega::ChainEvent* temp = evt_;
  evt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::ChainEvent* PropagateChainEventRequest::unsafe_arena_release_evt() {
  // @@protoc_insertion_point(field_release:api.PropagateChainEventRequest.evt)

  ::vega::ChainEvent* temp = evt_;
  evt_ = nullptr;
  return temp;
}
inline ::vega::ChainEvent* PropagateChainEventRequest::_internal_mutable_evt() {

  if (evt_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::ChainEvent>(GetArena());
    evt_ = p;
  }
  return evt_;
}
inline ::vega::ChainEvent* PropagateChainEventRequest::mutable_evt() {
  // @@protoc_insertion_point(field_mutable:api.PropagateChainEventRequest.evt)
  return _internal_mutable_evt();
}
inline void PropagateChainEventRequest::set_allocated_evt(::vega::ChainEvent* evt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(evt_);
  }
  if (evt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evt)->GetArena();
    if (message_arena != submessage_arena) {
      evt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, evt, submessage_arena);
    }

  } else {

  }
  evt_ = evt;
  // @@protoc_insertion_point(field_set_allocated:api.PropagateChainEventRequest.evt)
}

// string pubKey = 2 [json_name = "pubKey"];
inline void PropagateChainEventRequest::clear_pubkey() {
  pubkey_.ClearToEmpty();
}
inline const std::string& PropagateChainEventRequest::pubkey() const {
  // @@protoc_insertion_point(field_get:api.PropagateChainEventRequest.pubKey)
  return _internal_pubkey();
}
inline void PropagateChainEventRequest::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:api.PropagateChainEventRequest.pubKey)
}
inline std::string* PropagateChainEventRequest::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:api.PropagateChainEventRequest.pubKey)
  return _internal_mutable_pubkey();
}
inline const std::string& PropagateChainEventRequest::_internal_pubkey() const {
  return pubkey_.Get();
}
inline void PropagateChainEventRequest::_internal_set_pubkey(const std::string& value) {

  pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PropagateChainEventRequest::set_pubkey(std::string&& value) {

  pubkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PropagateChainEventRequest.pubKey)
}
inline void PropagateChainEventRequest::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PropagateChainEventRequest.pubKey)
}
inline void PropagateChainEventRequest::set_pubkey(const char* value,
    size_t size) {

  pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PropagateChainEventRequest.pubKey)
}
inline std::string* PropagateChainEventRequest::_internal_mutable_pubkey() {

  return pubkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PropagateChainEventRequest::release_pubkey() {
  // @@protoc_insertion_point(field_release:api.PropagateChainEventRequest.pubKey)
  return pubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PropagateChainEventRequest::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {

  } else {

  }
  pubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PropagateChainEventRequest.pubKey)
}

// bytes signature = 3 [json_name = "signature"];
inline void PropagateChainEventRequest::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& PropagateChainEventRequest::signature() const {
  // @@protoc_insertion_point(field_get:api.PropagateChainEventRequest.signature)
  return _internal_signature();
}
inline void PropagateChainEventRequest::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:api.PropagateChainEventRequest.signature)
}
inline std::string* PropagateChainEventRequest::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:api.PropagateChainEventRequest.signature)
  return _internal_mutable_signature();
}
inline const std::string& PropagateChainEventRequest::_internal_signature() const {
  return signature_.Get();
}
inline void PropagateChainEventRequest::_internal_set_signature(const std::string& value) {

  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PropagateChainEventRequest::set_signature(std::string&& value) {

  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PropagateChainEventRequest.signature)
}
inline void PropagateChainEventRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PropagateChainEventRequest.signature)
}
inline void PropagateChainEventRequest::set_signature(const void* value,
    size_t size) {

  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PropagateChainEventRequest.signature)
}
inline std::string* PropagateChainEventRequest::_internal_mutable_signature() {

  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PropagateChainEventRequest::release_signature() {
  // @@protoc_insertion_point(field_release:api.PropagateChainEventRequest.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PropagateChainEventRequest::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {

  } else {

  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PropagateChainEventRequest.signature)
}

// -------------------------------------------------------------------

// PropagateChainEventResponse

// bool success = 1 [json_name = "success"];
inline void PropagateChainEventResponse::clear_success() {
  success_ = false;
}
inline bool PropagateChainEventResponse::_internal_success() const {
  return success_;
}
inline bool PropagateChainEventResponse::success() const {
  // @@protoc_insertion_point(field_get:api.PropagateChainEventResponse.success)
  return _internal_success();
}
inline void PropagateChainEventResponse::_internal_set_success(bool value) {

  success_ = value;
}
inline void PropagateChainEventResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:api.PropagateChainEventResponse.success)
}

// -------------------------------------------------------------------

// SubmitTransactionRequest

// .vega.SignedBundle tx = 1 [json_name = "tx"];
inline bool SubmitTransactionRequest::_internal_has_tx() const {
  return this != internal_default_instance() && tx_ != nullptr;
}
inline bool SubmitTransactionRequest::has_tx() const {
  return _internal_has_tx();
}
inline const ::vega::SignedBundle& SubmitTransactionRequest::_internal_tx() const {
  const ::vega::SignedBundle* p = tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::SignedBundle&>(
      ::vega::_SignedBundle_default_instance_);
}
inline const ::vega::SignedBundle& SubmitTransactionRequest::tx() const {
  // @@protoc_insertion_point(field_get:api.SubmitTransactionRequest.tx)
  return _internal_tx();
}
inline void SubmitTransactionRequest::unsafe_arena_set_allocated_tx(
    ::vega::SignedBundle* tx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_);
  }
  tx_ = tx;
  if (tx) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.SubmitTransactionRequest.tx)
}
inline ::vega::SignedBundle* SubmitTransactionRequest::release_tx() {

  ::vega::SignedBundle* temp = tx_;
  tx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::SignedBundle* SubmitTransactionRequest::unsafe_arena_release_tx() {
  // @@protoc_insertion_point(field_release:api.SubmitTransactionRequest.tx)

  ::vega::SignedBundle* temp = tx_;
  tx_ = nullptr;
  return temp;
}
inline ::vega::SignedBundle* SubmitTransactionRequest::_internal_mutable_tx() {

  if (tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::SignedBundle>(GetArena());
    tx_ = p;
  }
  return tx_;
}
inline ::vega::SignedBundle* SubmitTransactionRequest::mutable_tx() {
  // @@protoc_insertion_point(field_mutable:api.SubmitTransactionRequest.tx)
  return _internal_mutable_tx();
}
inline void SubmitTransactionRequest::set_allocated_tx(::vega::SignedBundle* tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_);
  }
  if (tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx)->GetArena();
    if (message_arena != submessage_arena) {
      tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }

  } else {

  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:api.SubmitTransactionRequest.tx)
}

// .api.SubmitTransactionRequest.Type type = 2 [json_name = "type"];
inline void SubmitTransactionRequest::clear_type() {
  type_ = 0;
}
inline ::api::SubmitTransactionRequest_Type SubmitTransactionRequest::_internal_type() const {
  return static_cast< ::api::SubmitTransactionRequest_Type >(type_);
}
inline ::api::SubmitTransactionRequest_Type SubmitTransactionRequest::type() const {
  // @@protoc_insertion_point(field_get:api.SubmitTransactionRequest.type)
  return _internal_type();
}
inline void SubmitTransactionRequest::_internal_set_type(::api::SubmitTransactionRequest_Type value) {

  type_ = value;
}
inline void SubmitTransactionRequest::set_type(::api::SubmitTransactionRequest_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:api.SubmitTransactionRequest.type)
}

// -------------------------------------------------------------------

// SubmitTransactionResponse

// bool success = 1 [json_name = "success"];
inline void SubmitTransactionResponse::clear_success() {
  success_ = false;
}
inline bool SubmitTransactionResponse::_internal_success() const {
  return success_;
}
inline bool SubmitTransactionResponse::success() const {
  // @@protoc_insertion_point(field_get:api.SubmitTransactionResponse.success)
  return _internal_success();
}
inline void SubmitTransactionResponse::_internal_set_success(bool value) {

  success_ = value;
}
inline void SubmitTransactionResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:api.SubmitTransactionResponse.success)
}

// -------------------------------------------------------------------

// PrepareWithdrawRequest

// .vega.WithdrawSubmission withdraw = 1 [json_name = "withdraw"];
inline bool PrepareWithdrawRequest::_internal_has_withdraw() const {
  return this != internal_default_instance() && withdraw_ != nullptr;
}
inline bool PrepareWithdrawRequest::has_withdraw() const {
  return _internal_has_withdraw();
}
inline const ::vega::WithdrawSubmission& PrepareWithdrawRequest::_internal_withdraw() const {
  const ::vega::WithdrawSubmission* p = withdraw_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::WithdrawSubmission&>(
      ::vega::_WithdrawSubmission_default_instance_);
}
inline const ::vega::WithdrawSubmission& PrepareWithdrawRequest::withdraw() const {
  // @@protoc_insertion_point(field_get:api.PrepareWithdrawRequest.withdraw)
  return _internal_withdraw();
}
inline void PrepareWithdrawRequest::unsafe_arena_set_allocated_withdraw(
    ::vega::WithdrawSubmission* withdraw) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdraw_);
  }
  withdraw_ = withdraw;
  if (withdraw) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.PrepareWithdrawRequest.withdraw)
}
inline ::vega::WithdrawSubmission* PrepareWithdrawRequest::release_withdraw() {

  ::vega::WithdrawSubmission* temp = withdraw_;
  withdraw_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::WithdrawSubmission* PrepareWithdrawRequest::unsafe_arena_release_withdraw() {
  // @@protoc_insertion_point(field_release:api.PrepareWithdrawRequest.withdraw)

  ::vega::WithdrawSubmission* temp = withdraw_;
  withdraw_ = nullptr;
  return temp;
}
inline ::vega::WithdrawSubmission* PrepareWithdrawRequest::_internal_mutable_withdraw() {

  if (withdraw_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::WithdrawSubmission>(GetArena());
    withdraw_ = p;
  }
  return withdraw_;
}
inline ::vega::WithdrawSubmission* PrepareWithdrawRequest::mutable_withdraw() {
  // @@protoc_insertion_point(field_mutable:api.PrepareWithdrawRequest.withdraw)
  return _internal_mutable_withdraw();
}
inline void PrepareWithdrawRequest::set_allocated_withdraw(::vega::WithdrawSubmission* withdraw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdraw_);
  }
  if (withdraw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdraw)->GetArena();
    if (message_arena != submessage_arena) {
      withdraw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw, submessage_arena);
    }

  } else {

  }
  withdraw_ = withdraw;
  // @@protoc_insertion_point(field_set_allocated:api.PrepareWithdrawRequest.withdraw)
}

// -------------------------------------------------------------------

// PrepareWithdrawResponse

// bytes blob = 1 [json_name = "blob"];
inline void PrepareWithdrawResponse::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& PrepareWithdrawResponse::blob() const {
  // @@protoc_insertion_point(field_get:api.PrepareWithdrawResponse.blob)
  return _internal_blob();
}
inline void PrepareWithdrawResponse::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:api.PrepareWithdrawResponse.blob)
}
inline std::string* PrepareWithdrawResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:api.PrepareWithdrawResponse.blob)
  return _internal_mutable_blob();
}
inline const std::string& PrepareWithdrawResponse::_internal_blob() const {
  return blob_.Get();
}
inline void PrepareWithdrawResponse::_internal_set_blob(const std::string& value) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareWithdrawResponse::set_blob(std::string&& value) {

  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PrepareWithdrawResponse.blob)
}
inline void PrepareWithdrawResponse::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PrepareWithdrawResponse.blob)
}
inline void PrepareWithdrawResponse::set_blob(const void* value,
    size_t size) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PrepareWithdrawResponse.blob)
}
inline std::string* PrepareWithdrawResponse::_internal_mutable_blob() {

  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareWithdrawResponse::release_blob() {
  // @@protoc_insertion_point(field_release:api.PrepareWithdrawResponse.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareWithdrawResponse::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {

  } else {

  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PrepareWithdrawResponse.blob)
}

// -------------------------------------------------------------------

// PrepareSubmitOrderResponse

// bytes blob = 1 [json_name = "blob"];
inline void PrepareSubmitOrderResponse::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& PrepareSubmitOrderResponse::blob() const {
  // @@protoc_insertion_point(field_get:api.PrepareSubmitOrderResponse.blob)
  return _internal_blob();
}
inline void PrepareSubmitOrderResponse::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:api.PrepareSubmitOrderResponse.blob)
}
inline std::string* PrepareSubmitOrderResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:api.PrepareSubmitOrderResponse.blob)
  return _internal_mutable_blob();
}
inline const std::string& PrepareSubmitOrderResponse::_internal_blob() const {
  return blob_.Get();
}
inline void PrepareSubmitOrderResponse::_internal_set_blob(const std::string& value) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareSubmitOrderResponse::set_blob(std::string&& value) {

  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PrepareSubmitOrderResponse.blob)
}
inline void PrepareSubmitOrderResponse::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PrepareSubmitOrderResponse.blob)
}
inline void PrepareSubmitOrderResponse::set_blob(const void* value,
    size_t size) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PrepareSubmitOrderResponse.blob)
}
inline std::string* PrepareSubmitOrderResponse::_internal_mutable_blob() {

  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareSubmitOrderResponse::release_blob() {
  // @@protoc_insertion_point(field_release:api.PrepareSubmitOrderResponse.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareSubmitOrderResponse::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {

  } else {

  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PrepareSubmitOrderResponse.blob)
}

// string submitID = 2 [json_name = "submitID"];
inline void PrepareSubmitOrderResponse::clear_submitid() {
  submitid_.ClearToEmpty();
}
inline const std::string& PrepareSubmitOrderResponse::submitid() const {
  // @@protoc_insertion_point(field_get:api.PrepareSubmitOrderResponse.submitID)
  return _internal_submitid();
}
inline void PrepareSubmitOrderResponse::set_submitid(const std::string& value) {
  _internal_set_submitid(value);
  // @@protoc_insertion_point(field_set:api.PrepareSubmitOrderResponse.submitID)
}
inline std::string* PrepareSubmitOrderResponse::mutable_submitid() {
  // @@protoc_insertion_point(field_mutable:api.PrepareSubmitOrderResponse.submitID)
  return _internal_mutable_submitid();
}
inline const std::string& PrepareSubmitOrderResponse::_internal_submitid() const {
  return submitid_.Get();
}
inline void PrepareSubmitOrderResponse::_internal_set_submitid(const std::string& value) {

  submitid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareSubmitOrderResponse::set_submitid(std::string&& value) {

  submitid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PrepareSubmitOrderResponse.submitID)
}
inline void PrepareSubmitOrderResponse::set_submitid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  submitid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PrepareSubmitOrderResponse.submitID)
}
inline void PrepareSubmitOrderResponse::set_submitid(const char* value,
    size_t size) {

  submitid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PrepareSubmitOrderResponse.submitID)
}
inline std::string* PrepareSubmitOrderResponse::_internal_mutable_submitid() {

  return submitid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareSubmitOrderResponse::release_submitid() {
  // @@protoc_insertion_point(field_release:api.PrepareSubmitOrderResponse.submitID)
  return submitid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareSubmitOrderResponse::set_allocated_submitid(std::string* submitid) {
  if (submitid != nullptr) {

  } else {

  }
  submitid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), submitid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PrepareSubmitOrderResponse.submitID)
}

// -------------------------------------------------------------------

// PrepareCancelOrderResponse

// bytes blob = 1 [json_name = "blob"];
inline void PrepareCancelOrderResponse::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& PrepareCancelOrderResponse::blob() const {
  // @@protoc_insertion_point(field_get:api.PrepareCancelOrderResponse.blob)
  return _internal_blob();
}
inline void PrepareCancelOrderResponse::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:api.PrepareCancelOrderResponse.blob)
}
inline std::string* PrepareCancelOrderResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:api.PrepareCancelOrderResponse.blob)
  return _internal_mutable_blob();
}
inline const std::string& PrepareCancelOrderResponse::_internal_blob() const {
  return blob_.Get();
}
inline void PrepareCancelOrderResponse::_internal_set_blob(const std::string& value) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareCancelOrderResponse::set_blob(std::string&& value) {

  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PrepareCancelOrderResponse.blob)
}
inline void PrepareCancelOrderResponse::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PrepareCancelOrderResponse.blob)
}
inline void PrepareCancelOrderResponse::set_blob(const void* value,
    size_t size) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PrepareCancelOrderResponse.blob)
}
inline std::string* PrepareCancelOrderResponse::_internal_mutable_blob() {

  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareCancelOrderResponse::release_blob() {
  // @@protoc_insertion_point(field_release:api.PrepareCancelOrderResponse.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareCancelOrderResponse::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {

  } else {

  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PrepareCancelOrderResponse.blob)
}

// -------------------------------------------------------------------

// PrepareAmendOrderResponse

// bytes blob = 1 [json_name = "blob"];
inline void PrepareAmendOrderResponse::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& PrepareAmendOrderResponse::blob() const {
  // @@protoc_insertion_point(field_get:api.PrepareAmendOrderResponse.blob)
  return _internal_blob();
}
inline void PrepareAmendOrderResponse::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:api.PrepareAmendOrderResponse.blob)
}
inline std::string* PrepareAmendOrderResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:api.PrepareAmendOrderResponse.blob)
  return _internal_mutable_blob();
}
inline const std::string& PrepareAmendOrderResponse::_internal_blob() const {
  return blob_.Get();
}
inline void PrepareAmendOrderResponse::_internal_set_blob(const std::string& value) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareAmendOrderResponse::set_blob(std::string&& value) {

  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PrepareAmendOrderResponse.blob)
}
inline void PrepareAmendOrderResponse::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PrepareAmendOrderResponse.blob)
}
inline void PrepareAmendOrderResponse::set_blob(const void* value,
    size_t size) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PrepareAmendOrderResponse.blob)
}
inline std::string* PrepareAmendOrderResponse::_internal_mutable_blob() {

  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareAmendOrderResponse::release_blob() {
  // @@protoc_insertion_point(field_release:api.PrepareAmendOrderResponse.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareAmendOrderResponse::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {

  } else {

  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PrepareAmendOrderResponse.blob)
}

// -------------------------------------------------------------------

// SubmitOrderRequest

// .vega.OrderSubmission submission = 1 [json_name = "submission"];
inline bool SubmitOrderRequest::_internal_has_submission() const {
  return this != internal_default_instance() && submission_ != nullptr;
}
inline bool SubmitOrderRequest::has_submission() const {
  return _internal_has_submission();
}
inline const ::vega::OrderSubmission& SubmitOrderRequest::_internal_submission() const {
  const ::vega::OrderSubmission* p = submission_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::OrderSubmission&>(
      ::vega::_OrderSubmission_default_instance_);
}
inline const ::vega::OrderSubmission& SubmitOrderRequest::submission() const {
  // @@protoc_insertion_point(field_get:api.SubmitOrderRequest.submission)
  return _internal_submission();
}
inline void SubmitOrderRequest::unsafe_arena_set_allocated_submission(
    ::vega::OrderSubmission* submission) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  submission_ = submission;
  if (submission) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.SubmitOrderRequest.submission)
}
inline ::vega::OrderSubmission* SubmitOrderRequest::release_submission() {

  ::vega::OrderSubmission* temp = submission_;
  submission_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::OrderSubmission* SubmitOrderRequest::unsafe_arena_release_submission() {
  // @@protoc_insertion_point(field_release:api.SubmitOrderRequest.submission)

  ::vega::OrderSubmission* temp = submission_;
  submission_ = nullptr;
  return temp;
}
inline ::vega::OrderSubmission* SubmitOrderRequest::_internal_mutable_submission() {

  if (submission_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::OrderSubmission>(GetArena());
    submission_ = p;
  }
  return submission_;
}
inline ::vega::OrderSubmission* SubmitOrderRequest::mutable_submission() {
  // @@protoc_insertion_point(field_mutable:api.SubmitOrderRequest.submission)
  return _internal_mutable_submission();
}
inline void SubmitOrderRequest::set_allocated_submission(::vega::OrderSubmission* submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  if (submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission)->GetArena();
    if (message_arena != submessage_arena) {
      submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submission, submessage_arena);
    }

  } else {

  }
  submission_ = submission;
  // @@protoc_insertion_point(field_set_allocated:api.SubmitOrderRequest.submission)
}

// -------------------------------------------------------------------

// CancelOrderRequest

// .vega.OrderCancellation cancellation = 1 [json_name = "cancellation"];
inline bool CancelOrderRequest::_internal_has_cancellation() const {
  return this != internal_default_instance() && cancellation_ != nullptr;
}
inline bool CancelOrderRequest::has_cancellation() const {
  return _internal_has_cancellation();
}
inline const ::vega::OrderCancellation& CancelOrderRequest::_internal_cancellation() const {
  const ::vega::OrderCancellation* p = cancellation_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::OrderCancellation&>(
      ::vega::_OrderCancellation_default_instance_);
}
inline const ::vega::OrderCancellation& CancelOrderRequest::cancellation() const {
  // @@protoc_insertion_point(field_get:api.CancelOrderRequest.cancellation)
  return _internal_cancellation();
}
inline void CancelOrderRequest::unsafe_arena_set_allocated_cancellation(
    ::vega::OrderCancellation* cancellation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancellation_);
  }
  cancellation_ = cancellation;
  if (cancellation) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.CancelOrderRequest.cancellation)
}
inline ::vega::OrderCancellation* CancelOrderRequest::release_cancellation() {

  ::vega::OrderCancellation* temp = cancellation_;
  cancellation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::OrderCancellation* CancelOrderRequest::unsafe_arena_release_cancellation() {
  // @@protoc_insertion_point(field_release:api.CancelOrderRequest.cancellation)

  ::vega::OrderCancellation* temp = cancellation_;
  cancellation_ = nullptr;
  return temp;
}
inline ::vega::OrderCancellation* CancelOrderRequest::_internal_mutable_cancellation() {

  if (cancellation_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::OrderCancellation>(GetArena());
    cancellation_ = p;
  }
  return cancellation_;
}
inline ::vega::OrderCancellation* CancelOrderRequest::mutable_cancellation() {
  // @@protoc_insertion_point(field_mutable:api.CancelOrderRequest.cancellation)
  return _internal_mutable_cancellation();
}
inline void CancelOrderRequest::set_allocated_cancellation(::vega::OrderCancellation* cancellation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancellation_);
  }
  if (cancellation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancellation)->GetArena();
    if (message_arena != submessage_arena) {
      cancellation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancellation, submessage_arena);
    }

  } else {

  }
  cancellation_ = cancellation;
  // @@protoc_insertion_point(field_set_allocated:api.CancelOrderRequest.cancellation)
}

// -------------------------------------------------------------------

// AmendOrderRequest

// .vega.OrderAmendment amendment = 1 [json_name = "amendment"];
inline bool AmendOrderRequest::_internal_has_amendment() const {
  return this != internal_default_instance() && amendment_ != nullptr;
}
inline bool AmendOrderRequest::has_amendment() const {
  return _internal_has_amendment();
}
inline const ::vega::OrderAmendment& AmendOrderRequest::_internal_amendment() const {
  const ::vega::OrderAmendment* p = amendment_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::OrderAmendment&>(
      ::vega::_OrderAmendment_default_instance_);
}
inline const ::vega::OrderAmendment& AmendOrderRequest::amendment() const {
  // @@protoc_insertion_point(field_get:api.AmendOrderRequest.amendment)
  return _internal_amendment();
}
inline void AmendOrderRequest::unsafe_arena_set_allocated_amendment(
    ::vega::OrderAmendment* amendment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amendment_);
  }
  amendment_ = amendment;
  if (amendment) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.AmendOrderRequest.amendment)
}
inline ::vega::OrderAmendment* AmendOrderRequest::release_amendment() {

  ::vega::OrderAmendment* temp = amendment_;
  amendment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::OrderAmendment* AmendOrderRequest::unsafe_arena_release_amendment() {
  // @@protoc_insertion_point(field_release:api.AmendOrderRequest.amendment)

  ::vega::OrderAmendment* temp = amendment_;
  amendment_ = nullptr;
  return temp;
}
inline ::vega::OrderAmendment* AmendOrderRequest::_internal_mutable_amendment() {

  if (amendment_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::OrderAmendment>(GetArena());
    amendment_ = p;
  }
  return amendment_;
}
inline ::vega::OrderAmendment* AmendOrderRequest::mutable_amendment() {
  // @@protoc_insertion_point(field_mutable:api.AmendOrderRequest.amendment)
  return _internal_mutable_amendment();
}
inline void AmendOrderRequest::set_allocated_amendment(::vega::OrderAmendment* amendment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amendment_);
  }
  if (amendment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amendment)->GetArena();
    if (message_arena != submessage_arena) {
      amendment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amendment, submessage_arena);
    }

  } else {

  }
  amendment_ = amendment;
  // @@protoc_insertion_point(field_set_allocated:api.AmendOrderRequest.amendment)
}

// -------------------------------------------------------------------

// AssetsRequest

// -------------------------------------------------------------------

// AssetsResponse

// repeated .vega.Asset assets = 1 [json_name = "assets"];
inline int AssetsResponse::_internal_assets_size() const {
  return assets_.size();
}
inline int AssetsResponse::assets_size() const {
  return _internal_assets_size();
}
inline ::vega::Asset* AssetsResponse::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:api.AssetsResponse.assets)
  return assets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Asset >*
AssetsResponse::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:api.AssetsResponse.assets)
  return &assets_;
}
inline const ::vega::Asset& AssetsResponse::_internal_assets(int index) const {
  return assets_.Get(index);
}
inline const ::vega::Asset& AssetsResponse::assets(int index) const {
  // @@protoc_insertion_point(field_get:api.AssetsResponse.assets)
  return _internal_assets(index);
}
inline ::vega::Asset* AssetsResponse::_internal_add_assets() {
  return assets_.Add();
}
inline ::vega::Asset* AssetsResponse::add_assets() {
  // @@protoc_insertion_point(field_add:api.AssetsResponse.assets)
  return _internal_add_assets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Asset >&
AssetsResponse::assets() const {
  // @@protoc_insertion_point(field_list:api.AssetsResponse.assets)
  return assets_;
}

// -------------------------------------------------------------------

// AssetByIDRequest

// string ID = 1 [json_name = "ID", (.validator.field) = {
inline void AssetByIDRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& AssetByIDRequest::id() const {
  // @@protoc_insertion_point(field_get:api.AssetByIDRequest.ID)
  return _internal_id();
}
inline void AssetByIDRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api.AssetByIDRequest.ID)
}
inline std::string* AssetByIDRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:api.AssetByIDRequest.ID)
  return _internal_mutable_id();
}
inline const std::string& AssetByIDRequest::_internal_id() const {
  return id_.Get();
}
inline void AssetByIDRequest::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AssetByIDRequest::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.AssetByIDRequest.ID)
}
inline void AssetByIDRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.AssetByIDRequest.ID)
}
inline void AssetByIDRequest::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.AssetByIDRequest.ID)
}
inline std::string* AssetByIDRequest::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AssetByIDRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.AssetByIDRequest.ID)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssetByIDRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.AssetByIDRequest.ID)
}

// -------------------------------------------------------------------

// AssetByIDResponse

// .vega.Asset asset = 1 [json_name = "asset"];
inline bool AssetByIDResponse::_internal_has_asset() const {
  return this != internal_default_instance() && asset_ != nullptr;
}
inline bool AssetByIDResponse::has_asset() const {
  return _internal_has_asset();
}
inline const ::vega::Asset& AssetByIDResponse::_internal_asset() const {
  const ::vega::Asset* p = asset_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Asset&>(
      ::vega::_Asset_default_instance_);
}
inline const ::vega::Asset& AssetByIDResponse::asset() const {
  // @@protoc_insertion_point(field_get:api.AssetByIDResponse.asset)
  return _internal_asset();
}
inline void AssetByIDResponse::unsafe_arena_set_allocated_asset(
    ::vega::Asset* asset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset_);
  }
  asset_ = asset;
  if (asset) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.AssetByIDResponse.asset)
}
inline ::vega::Asset* AssetByIDResponse::release_asset() {

  ::vega::Asset* temp = asset_;
  asset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Asset* AssetByIDResponse::unsafe_arena_release_asset() {
  // @@protoc_insertion_point(field_release:api.AssetByIDResponse.asset)

  ::vega::Asset* temp = asset_;
  asset_ = nullptr;
  return temp;
}
inline ::vega::Asset* AssetByIDResponse::_internal_mutable_asset() {

  if (asset_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Asset>(GetArena());
    asset_ = p;
  }
  return asset_;
}
inline ::vega::Asset* AssetByIDResponse::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:api.AssetByIDResponse.asset)
  return _internal_mutable_asset();
}
inline void AssetByIDResponse::set_allocated_asset(::vega::Asset* asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset_);
  }
  if (asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset)->GetArena();
    if (message_arena != submessage_arena) {
      asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }

  } else {

  }
  asset_ = asset;
  // @@protoc_insertion_point(field_set_allocated:api.AssetByIDResponse.asset)
}

// -------------------------------------------------------------------

// GetNodeSignaturesAggregateRequest

// string ID = 1 [json_name = "ID", (.validator.field) = {
inline void GetNodeSignaturesAggregateRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetNodeSignaturesAggregateRequest::id() const {
  // @@protoc_insertion_point(field_get:api.GetNodeSignaturesAggregateRequest.ID)
  return _internal_id();
}
inline void GetNodeSignaturesAggregateRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api.GetNodeSignaturesAggregateRequest.ID)
}
inline std::string* GetNodeSignaturesAggregateRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:api.GetNodeSignaturesAggregateRequest.ID)
  return _internal_mutable_id();
}
inline const std::string& GetNodeSignaturesAggregateRequest::_internal_id() const {
  return id_.Get();
}
inline void GetNodeSignaturesAggregateRequest::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetNodeSignaturesAggregateRequest::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.GetNodeSignaturesAggregateRequest.ID)
}
inline void GetNodeSignaturesAggregateRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.GetNodeSignaturesAggregateRequest.ID)
}
inline void GetNodeSignaturesAggregateRequest::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.GetNodeSignaturesAggregateRequest.ID)
}
inline std::string* GetNodeSignaturesAggregateRequest::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetNodeSignaturesAggregateRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.GetNodeSignaturesAggregateRequest.ID)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetNodeSignaturesAggregateRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.GetNodeSignaturesAggregateRequest.ID)
}

// -------------------------------------------------------------------

// GetNodeSignaturesAggregateResponse

// repeated .vega.NodeSignature signatures = 1 [json_name = "signatures"];
inline int GetNodeSignaturesAggregateResponse::_internal_signatures_size() const {
  return signatures_.size();
}
inline int GetNodeSignaturesAggregateResponse::signatures_size() const {
  return _internal_signatures_size();
}
inline ::vega::NodeSignature* GetNodeSignaturesAggregateResponse::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:api.GetNodeSignaturesAggregateResponse.signatures)
  return signatures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NodeSignature >*
GetNodeSignaturesAggregateResponse::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:api.GetNodeSignaturesAggregateResponse.signatures)
  return &signatures_;
}
inline const ::vega::NodeSignature& GetNodeSignaturesAggregateResponse::_internal_signatures(int index) const {
  return signatures_.Get(index);
}
inline const ::vega::NodeSignature& GetNodeSignaturesAggregateResponse::signatures(int index) const {
  // @@protoc_insertion_point(field_get:api.GetNodeSignaturesAggregateResponse.signatures)
  return _internal_signatures(index);
}
inline ::vega::NodeSignature* GetNodeSignaturesAggregateResponse::_internal_add_signatures() {
  return signatures_.Add();
}
inline ::vega::NodeSignature* GetNodeSignaturesAggregateResponse::add_signatures() {
  // @@protoc_insertion_point(field_add:api.GetNodeSignaturesAggregateResponse.signatures)
  return _internal_add_signatures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NodeSignature >&
GetNodeSignaturesAggregateResponse::signatures() const {
  // @@protoc_insertion_point(field_list:api.GetNodeSignaturesAggregateResponse.signatures)
  return signatures_;
}

// -------------------------------------------------------------------

// OptionalProposalState

// .vega.Proposal.State value = 1 [json_name = "value"];
inline void OptionalProposalState::clear_value() {
  value_ = 0;
}
inline ::vega::Proposal_State OptionalProposalState::_internal_value() const {
  return static_cast< ::vega::Proposal_State >(value_);
}
inline ::vega::Proposal_State OptionalProposalState::value() const {
  // @@protoc_insertion_point(field_get:api.OptionalProposalState.value)
  return _internal_value();
}
inline void OptionalProposalState::_internal_set_value(::vega::Proposal_State value) {

  value_ = value;
}
inline void OptionalProposalState::set_value(::vega::Proposal_State value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:api.OptionalProposalState.value)
}

// -------------------------------------------------------------------

// GetProposalsRequest

// .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
inline bool GetProposalsRequest::_internal_has_selectinstate() const {
  return this != internal_default_instance() && selectinstate_ != nullptr;
}
inline bool GetProposalsRequest::has_selectinstate() const {
  return _internal_has_selectinstate();
}
inline void GetProposalsRequest::clear_selectinstate() {
  if (GetArena() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
}
inline const ::api::OptionalProposalState& GetProposalsRequest::_internal_selectinstate() const {
  const ::api::OptionalProposalState* p = selectinstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::OptionalProposalState&>(
      ::api::_OptionalProposalState_default_instance_);
}
inline const ::api::OptionalProposalState& GetProposalsRequest::selectinstate() const {
  // @@protoc_insertion_point(field_get:api.GetProposalsRequest.selectInState)
  return _internal_selectinstate();
}
inline void GetProposalsRequest::unsafe_arena_set_allocated_selectinstate(
    ::api::OptionalProposalState* selectinstate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selectinstate_);
  }
  selectinstate_ = selectinstate;
  if (selectinstate) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetProposalsRequest.selectInState)
}
inline ::api::OptionalProposalState* GetProposalsRequest::release_selectinstate() {

  ::api::OptionalProposalState* temp = selectinstate_;
  selectinstate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::OptionalProposalState* GetProposalsRequest::unsafe_arena_release_selectinstate() {
  // @@protoc_insertion_point(field_release:api.GetProposalsRequest.selectInState)

  ::api::OptionalProposalState* temp = selectinstate_;
  selectinstate_ = nullptr;
  return temp;
}
inline ::api::OptionalProposalState* GetProposalsRequest::_internal_mutable_selectinstate() {

  if (selectinstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::OptionalProposalState>(GetArena());
    selectinstate_ = p;
  }
  return selectinstate_;
}
inline ::api::OptionalProposalState* GetProposalsRequest::mutable_selectinstate() {
  // @@protoc_insertion_point(field_mutable:api.GetProposalsRequest.selectInState)
  return _internal_mutable_selectinstate();
}
inline void GetProposalsRequest::set_allocated_selectinstate(::api::OptionalProposalState* selectinstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selectinstate_;
  }
  if (selectinstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selectinstate);
    if (message_arena != submessage_arena) {
      selectinstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectinstate, submessage_arena);
    }

  } else {

  }
  selectinstate_ = selectinstate;
  // @@protoc_insertion_point(field_set_allocated:api.GetProposalsRequest.selectInState)
}

// -------------------------------------------------------------------

// GetProposalsResponse

// repeated .vega.GovernanceData data = 1 [json_name = "data"];
inline int GetProposalsResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetProposalsResponse::data_size() const {
  return _internal_data_size();
}
inline ::vega::GovernanceData* GetProposalsResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:api.GetProposalsResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
GetProposalsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:api.GetProposalsResponse.data)
  return &data_;
}
inline const ::vega::GovernanceData& GetProposalsResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::vega::GovernanceData& GetProposalsResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:api.GetProposalsResponse.data)
  return _internal_data(index);
}
inline ::vega::GovernanceData* GetProposalsResponse::_internal_add_data() {
  return data_.Add();
}
inline ::vega::GovernanceData* GetProposalsResponse::add_data() {
  // @@protoc_insertion_point(field_add:api.GetProposalsResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
GetProposalsResponse::data() const {
  // @@protoc_insertion_point(field_list:api.GetProposalsResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// GetProposalsByPartyRequest

// string partyID = 1 [json_name = "partyID", (.validator.field) = {
inline void GetProposalsByPartyRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& GetProposalsByPartyRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.GetProposalsByPartyRequest.partyID)
  return _internal_partyid();
}
inline void GetProposalsByPartyRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.GetProposalsByPartyRequest.partyID)
}
inline std::string* GetProposalsByPartyRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.GetProposalsByPartyRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& GetProposalsByPartyRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void GetProposalsByPartyRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetProposalsByPartyRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.GetProposalsByPartyRequest.partyID)
}
inline void GetProposalsByPartyRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.GetProposalsByPartyRequest.partyID)
}
inline void GetProposalsByPartyRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.GetProposalsByPartyRequest.partyID)
}
inline std::string* GetProposalsByPartyRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetProposalsByPartyRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.GetProposalsByPartyRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProposalsByPartyRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.GetProposalsByPartyRequest.partyID)
}

// .api.OptionalProposalState selectInState = 2 [json_name = "selectInState"];
inline bool GetProposalsByPartyRequest::_internal_has_selectinstate() const {
  return this != internal_default_instance() && selectinstate_ != nullptr;
}
inline bool GetProposalsByPartyRequest::has_selectinstate() const {
  return _internal_has_selectinstate();
}
inline void GetProposalsByPartyRequest::clear_selectinstate() {
  if (GetArena() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
}
inline const ::api::OptionalProposalState& GetProposalsByPartyRequest::_internal_selectinstate() const {
  const ::api::OptionalProposalState* p = selectinstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::OptionalProposalState&>(
      ::api::_OptionalProposalState_default_instance_);
}
inline const ::api::OptionalProposalState& GetProposalsByPartyRequest::selectinstate() const {
  // @@protoc_insertion_point(field_get:api.GetProposalsByPartyRequest.selectInState)
  return _internal_selectinstate();
}
inline void GetProposalsByPartyRequest::unsafe_arena_set_allocated_selectinstate(
    ::api::OptionalProposalState* selectinstate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selectinstate_);
  }
  selectinstate_ = selectinstate;
  if (selectinstate) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetProposalsByPartyRequest.selectInState)
}
inline ::api::OptionalProposalState* GetProposalsByPartyRequest::release_selectinstate() {

  ::api::OptionalProposalState* temp = selectinstate_;
  selectinstate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::OptionalProposalState* GetProposalsByPartyRequest::unsafe_arena_release_selectinstate() {
  // @@protoc_insertion_point(field_release:api.GetProposalsByPartyRequest.selectInState)

  ::api::OptionalProposalState* temp = selectinstate_;
  selectinstate_ = nullptr;
  return temp;
}
inline ::api::OptionalProposalState* GetProposalsByPartyRequest::_internal_mutable_selectinstate() {

  if (selectinstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::OptionalProposalState>(GetArena());
    selectinstate_ = p;
  }
  return selectinstate_;
}
inline ::api::OptionalProposalState* GetProposalsByPartyRequest::mutable_selectinstate() {
  // @@protoc_insertion_point(field_mutable:api.GetProposalsByPartyRequest.selectInState)
  return _internal_mutable_selectinstate();
}
inline void GetProposalsByPartyRequest::set_allocated_selectinstate(::api::OptionalProposalState* selectinstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selectinstate_;
  }
  if (selectinstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selectinstate);
    if (message_arena != submessage_arena) {
      selectinstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectinstate, submessage_arena);
    }

  } else {

  }
  selectinstate_ = selectinstate;
  // @@protoc_insertion_point(field_set_allocated:api.GetProposalsByPartyRequest.selectInState)
}

// -------------------------------------------------------------------

// GetProposalsByPartyResponse

// repeated .vega.GovernanceData data = 1 [json_name = "data"];
inline int GetProposalsByPartyResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetProposalsByPartyResponse::data_size() const {
  return _internal_data_size();
}
inline ::vega::GovernanceData* GetProposalsByPartyResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:api.GetProposalsByPartyResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
GetProposalsByPartyResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:api.GetProposalsByPartyResponse.data)
  return &data_;
}
inline const ::vega::GovernanceData& GetProposalsByPartyResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::vega::GovernanceData& GetProposalsByPartyResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:api.GetProposalsByPartyResponse.data)
  return _internal_data(index);
}
inline ::vega::GovernanceData* GetProposalsByPartyResponse::_internal_add_data() {
  return data_.Add();
}
inline ::vega::GovernanceData* GetProposalsByPartyResponse::add_data() {
  // @@protoc_insertion_point(field_add:api.GetProposalsByPartyResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
GetProposalsByPartyResponse::data() const {
  // @@protoc_insertion_point(field_list:api.GetProposalsByPartyResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// GetVotesByPartyRequest

// string partyID = 1 [json_name = "partyID", (.validator.field) = {
inline void GetVotesByPartyRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& GetVotesByPartyRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.GetVotesByPartyRequest.partyID)
  return _internal_partyid();
}
inline void GetVotesByPartyRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.GetVotesByPartyRequest.partyID)
}
inline std::string* GetVotesByPartyRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.GetVotesByPartyRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& GetVotesByPartyRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void GetVotesByPartyRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetVotesByPartyRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.GetVotesByPartyRequest.partyID)
}
inline void GetVotesByPartyRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.GetVotesByPartyRequest.partyID)
}
inline void GetVotesByPartyRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.GetVotesByPartyRequest.partyID)
}
inline std::string* GetVotesByPartyRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetVotesByPartyRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.GetVotesByPartyRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVotesByPartyRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.GetVotesByPartyRequest.partyID)
}

// -------------------------------------------------------------------

// GetVotesByPartyResponse

// repeated .vega.Vote votes = 1 [json_name = "votes"];
inline int GetVotesByPartyResponse::_internal_votes_size() const {
  return votes_.size();
}
inline int GetVotesByPartyResponse::votes_size() const {
  return _internal_votes_size();
}
inline ::vega::Vote* GetVotesByPartyResponse::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:api.GetVotesByPartyResponse.votes)
  return votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Vote >*
GetVotesByPartyResponse::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:api.GetVotesByPartyResponse.votes)
  return &votes_;
}
inline const ::vega::Vote& GetVotesByPartyResponse::_internal_votes(int index) const {
  return votes_.Get(index);
}
inline const ::vega::Vote& GetVotesByPartyResponse::votes(int index) const {
  // @@protoc_insertion_point(field_get:api.GetVotesByPartyResponse.votes)
  return _internal_votes(index);
}
inline ::vega::Vote* GetVotesByPartyResponse::_internal_add_votes() {
  return votes_.Add();
}
inline ::vega::Vote* GetVotesByPartyResponse::add_votes() {
  // @@protoc_insertion_point(field_add:api.GetVotesByPartyResponse.votes)
  return _internal_add_votes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Vote >&
GetVotesByPartyResponse::votes() const {
  // @@protoc_insertion_point(field_list:api.GetVotesByPartyResponse.votes)
  return votes_;
}

// -------------------------------------------------------------------

// GetNewMarketProposalsRequest

// .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
inline bool GetNewMarketProposalsRequest::_internal_has_selectinstate() const {
  return this != internal_default_instance() && selectinstate_ != nullptr;
}
inline bool GetNewMarketProposalsRequest::has_selectinstate() const {
  return _internal_has_selectinstate();
}
inline void GetNewMarketProposalsRequest::clear_selectinstate() {
  if (GetArena() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
}
inline const ::api::OptionalProposalState& GetNewMarketProposalsRequest::_internal_selectinstate() const {
  const ::api::OptionalProposalState* p = selectinstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::OptionalProposalState&>(
      ::api::_OptionalProposalState_default_instance_);
}
inline const ::api::OptionalProposalState& GetNewMarketProposalsRequest::selectinstate() const {
  // @@protoc_insertion_point(field_get:api.GetNewMarketProposalsRequest.selectInState)
  return _internal_selectinstate();
}
inline void GetNewMarketProposalsRequest::unsafe_arena_set_allocated_selectinstate(
    ::api::OptionalProposalState* selectinstate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selectinstate_);
  }
  selectinstate_ = selectinstate;
  if (selectinstate) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetNewMarketProposalsRequest.selectInState)
}
inline ::api::OptionalProposalState* GetNewMarketProposalsRequest::release_selectinstate() {

  ::api::OptionalProposalState* temp = selectinstate_;
  selectinstate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::OptionalProposalState* GetNewMarketProposalsRequest::unsafe_arena_release_selectinstate() {
  // @@protoc_insertion_point(field_release:api.GetNewMarketProposalsRequest.selectInState)

  ::api::OptionalProposalState* temp = selectinstate_;
  selectinstate_ = nullptr;
  return temp;
}
inline ::api::OptionalProposalState* GetNewMarketProposalsRequest::_internal_mutable_selectinstate() {

  if (selectinstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::OptionalProposalState>(GetArena());
    selectinstate_ = p;
  }
  return selectinstate_;
}
inline ::api::OptionalProposalState* GetNewMarketProposalsRequest::mutable_selectinstate() {
  // @@protoc_insertion_point(field_mutable:api.GetNewMarketProposalsRequest.selectInState)
  return _internal_mutable_selectinstate();
}
inline void GetNewMarketProposalsRequest::set_allocated_selectinstate(::api::OptionalProposalState* selectinstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selectinstate_;
  }
  if (selectinstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selectinstate);
    if (message_arena != submessage_arena) {
      selectinstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectinstate, submessage_arena);
    }

  } else {

  }
  selectinstate_ = selectinstate;
  // @@protoc_insertion_point(field_set_allocated:api.GetNewMarketProposalsRequest.selectInState)
}

// -------------------------------------------------------------------

// GetNewMarketProposalsResponse

// repeated .vega.GovernanceData data = 1 [json_name = "data"];
inline int GetNewMarketProposalsResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetNewMarketProposalsResponse::data_size() const {
  return _internal_data_size();
}
inline ::vega::GovernanceData* GetNewMarketProposalsResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:api.GetNewMarketProposalsResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
GetNewMarketProposalsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:api.GetNewMarketProposalsResponse.data)
  return &data_;
}
inline const ::vega::GovernanceData& GetNewMarketProposalsResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::vega::GovernanceData& GetNewMarketProposalsResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:api.GetNewMarketProposalsResponse.data)
  return _internal_data(index);
}
inline ::vega::GovernanceData* GetNewMarketProposalsResponse::_internal_add_data() {
  return data_.Add();
}
inline ::vega::GovernanceData* GetNewMarketProposalsResponse::add_data() {
  // @@protoc_insertion_point(field_add:api.GetNewMarketProposalsResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
GetNewMarketProposalsResponse::data() const {
  // @@protoc_insertion_point(field_list:api.GetNewMarketProposalsResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// GetUpdateMarketProposalsRequest

// string marketID = 1 [json_name = "marketID", (.validator.field) = {
inline void GetUpdateMarketProposalsRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& GetUpdateMarketProposalsRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.GetUpdateMarketProposalsRequest.marketID)
  return _internal_marketid();
}
inline void GetUpdateMarketProposalsRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.GetUpdateMarketProposalsRequest.marketID)
}
inline std::string* GetUpdateMarketProposalsRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.GetUpdateMarketProposalsRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& GetUpdateMarketProposalsRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void GetUpdateMarketProposalsRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetUpdateMarketProposalsRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.GetUpdateMarketProposalsRequest.marketID)
}
inline void GetUpdateMarketProposalsRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.GetUpdateMarketProposalsRequest.marketID)
}
inline void GetUpdateMarketProposalsRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.GetUpdateMarketProposalsRequest.marketID)
}
inline std::string* GetUpdateMarketProposalsRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetUpdateMarketProposalsRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.GetUpdateMarketProposalsRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUpdateMarketProposalsRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.GetUpdateMarketProposalsRequest.marketID)
}

// .api.OptionalProposalState selectInState = 2 [json_name = "selectInState"];
inline bool GetUpdateMarketProposalsRequest::_internal_has_selectinstate() const {
  return this != internal_default_instance() && selectinstate_ != nullptr;
}
inline bool GetUpdateMarketProposalsRequest::has_selectinstate() const {
  return _internal_has_selectinstate();
}
inline void GetUpdateMarketProposalsRequest::clear_selectinstate() {
  if (GetArena() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
}
inline const ::api::OptionalProposalState& GetUpdateMarketProposalsRequest::_internal_selectinstate() const {
  const ::api::OptionalProposalState* p = selectinstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::OptionalProposalState&>(
      ::api::_OptionalProposalState_default_instance_);
}
inline const ::api::OptionalProposalState& GetUpdateMarketProposalsRequest::selectinstate() const {
  // @@protoc_insertion_point(field_get:api.GetUpdateMarketProposalsRequest.selectInState)
  return _internal_selectinstate();
}
inline void GetUpdateMarketProposalsRequest::unsafe_arena_set_allocated_selectinstate(
    ::api::OptionalProposalState* selectinstate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selectinstate_);
  }
  selectinstate_ = selectinstate;
  if (selectinstate) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetUpdateMarketProposalsRequest.selectInState)
}
inline ::api::OptionalProposalState* GetUpdateMarketProposalsRequest::release_selectinstate() {

  ::api::OptionalProposalState* temp = selectinstate_;
  selectinstate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::OptionalProposalState* GetUpdateMarketProposalsRequest::unsafe_arena_release_selectinstate() {
  // @@protoc_insertion_point(field_release:api.GetUpdateMarketProposalsRequest.selectInState)

  ::api::OptionalProposalState* temp = selectinstate_;
  selectinstate_ = nullptr;
  return temp;
}
inline ::api::OptionalProposalState* GetUpdateMarketProposalsRequest::_internal_mutable_selectinstate() {

  if (selectinstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::OptionalProposalState>(GetArena());
    selectinstate_ = p;
  }
  return selectinstate_;
}
inline ::api::OptionalProposalState* GetUpdateMarketProposalsRequest::mutable_selectinstate() {
  // @@protoc_insertion_point(field_mutable:api.GetUpdateMarketProposalsRequest.selectInState)
  return _internal_mutable_selectinstate();
}
inline void GetUpdateMarketProposalsRequest::set_allocated_selectinstate(::api::OptionalProposalState* selectinstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selectinstate_;
  }
  if (selectinstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selectinstate);
    if (message_arena != submessage_arena) {
      selectinstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectinstate, submessage_arena);
    }

  } else {

  }
  selectinstate_ = selectinstate;
  // @@protoc_insertion_point(field_set_allocated:api.GetUpdateMarketProposalsRequest.selectInState)
}

// -------------------------------------------------------------------

// GetUpdateMarketProposalsResponse

// repeated .vega.GovernanceData data = 1 [json_name = "data"];
inline int GetUpdateMarketProposalsResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetUpdateMarketProposalsResponse::data_size() const {
  return _internal_data_size();
}
inline ::vega::GovernanceData* GetUpdateMarketProposalsResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:api.GetUpdateMarketProposalsResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
GetUpdateMarketProposalsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:api.GetUpdateMarketProposalsResponse.data)
  return &data_;
}
inline const ::vega::GovernanceData& GetUpdateMarketProposalsResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::vega::GovernanceData& GetUpdateMarketProposalsResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:api.GetUpdateMarketProposalsResponse.data)
  return _internal_data(index);
}
inline ::vega::GovernanceData* GetUpdateMarketProposalsResponse::_internal_add_data() {
  return data_.Add();
}
inline ::vega::GovernanceData* GetUpdateMarketProposalsResponse::add_data() {
  // @@protoc_insertion_point(field_add:api.GetUpdateMarketProposalsResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
GetUpdateMarketProposalsResponse::data() const {
  // @@protoc_insertion_point(field_list:api.GetUpdateMarketProposalsResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// GetNetworkParametersProposalsRequest

// .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
inline bool GetNetworkParametersProposalsRequest::_internal_has_selectinstate() const {
  return this != internal_default_instance() && selectinstate_ != nullptr;
}
inline bool GetNetworkParametersProposalsRequest::has_selectinstate() const {
  return _internal_has_selectinstate();
}
inline void GetNetworkParametersProposalsRequest::clear_selectinstate() {
  if (GetArena() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
}
inline const ::api::OptionalProposalState& GetNetworkParametersProposalsRequest::_internal_selectinstate() const {
  const ::api::OptionalProposalState* p = selectinstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::OptionalProposalState&>(
      ::api::_OptionalProposalState_default_instance_);
}
inline const ::api::OptionalProposalState& GetNetworkParametersProposalsRequest::selectinstate() const {
  // @@protoc_insertion_point(field_get:api.GetNetworkParametersProposalsRequest.selectInState)
  return _internal_selectinstate();
}
inline void GetNetworkParametersProposalsRequest::unsafe_arena_set_allocated_selectinstate(
    ::api::OptionalProposalState* selectinstate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selectinstate_);
  }
  selectinstate_ = selectinstate;
  if (selectinstate) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetNetworkParametersProposalsRequest.selectInState)
}
inline ::api::OptionalProposalState* GetNetworkParametersProposalsRequest::release_selectinstate() {

  ::api::OptionalProposalState* temp = selectinstate_;
  selectinstate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::OptionalProposalState* GetNetworkParametersProposalsRequest::unsafe_arena_release_selectinstate() {
  // @@protoc_insertion_point(field_release:api.GetNetworkParametersProposalsRequest.selectInState)

  ::api::OptionalProposalState* temp = selectinstate_;
  selectinstate_ = nullptr;
  return temp;
}
inline ::api::OptionalProposalState* GetNetworkParametersProposalsRequest::_internal_mutable_selectinstate() {

  if (selectinstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::OptionalProposalState>(GetArena());
    selectinstate_ = p;
  }
  return selectinstate_;
}
inline ::api::OptionalProposalState* GetNetworkParametersProposalsRequest::mutable_selectinstate() {
  // @@protoc_insertion_point(field_mutable:api.GetNetworkParametersProposalsRequest.selectInState)
  return _internal_mutable_selectinstate();
}
inline void GetNetworkParametersProposalsRequest::set_allocated_selectinstate(::api::OptionalProposalState* selectinstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selectinstate_;
  }
  if (selectinstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selectinstate);
    if (message_arena != submessage_arena) {
      selectinstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectinstate, submessage_arena);
    }

  } else {

  }
  selectinstate_ = selectinstate;
  // @@protoc_insertion_point(field_set_allocated:api.GetNetworkParametersProposalsRequest.selectInState)
}

// -------------------------------------------------------------------

// GetNetworkParametersProposalsResponse

// repeated .vega.GovernanceData data = 1 [json_name = "data"];
inline int GetNetworkParametersProposalsResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetNetworkParametersProposalsResponse::data_size() const {
  return _internal_data_size();
}
inline ::vega::GovernanceData* GetNetworkParametersProposalsResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:api.GetNetworkParametersProposalsResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
GetNetworkParametersProposalsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:api.GetNetworkParametersProposalsResponse.data)
  return &data_;
}
inline const ::vega::GovernanceData& GetNetworkParametersProposalsResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::vega::GovernanceData& GetNetworkParametersProposalsResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:api.GetNetworkParametersProposalsResponse.data)
  return _internal_data(index);
}
inline ::vega::GovernanceData* GetNetworkParametersProposalsResponse::_internal_add_data() {
  return data_.Add();
}
inline ::vega::GovernanceData* GetNetworkParametersProposalsResponse::add_data() {
  // @@protoc_insertion_point(field_add:api.GetNetworkParametersProposalsResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
GetNetworkParametersProposalsResponse::data() const {
  // @@protoc_insertion_point(field_list:api.GetNetworkParametersProposalsResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// GetNewAssetProposalsRequest

// .api.OptionalProposalState selectInState = 1 [json_name = "selectInState"];
inline bool GetNewAssetProposalsRequest::_internal_has_selectinstate() const {
  return this != internal_default_instance() && selectinstate_ != nullptr;
}
inline bool GetNewAssetProposalsRequest::has_selectinstate() const {
  return _internal_has_selectinstate();
}
inline void GetNewAssetProposalsRequest::clear_selectinstate() {
  if (GetArena() == nullptr && selectinstate_ != nullptr) {
    delete selectinstate_;
  }
  selectinstate_ = nullptr;
}
inline const ::api::OptionalProposalState& GetNewAssetProposalsRequest::_internal_selectinstate() const {
  const ::api::OptionalProposalState* p = selectinstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::OptionalProposalState&>(
      ::api::_OptionalProposalState_default_instance_);
}
inline const ::api::OptionalProposalState& GetNewAssetProposalsRequest::selectinstate() const {
  // @@protoc_insertion_point(field_get:api.GetNewAssetProposalsRequest.selectInState)
  return _internal_selectinstate();
}
inline void GetNewAssetProposalsRequest::unsafe_arena_set_allocated_selectinstate(
    ::api::OptionalProposalState* selectinstate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selectinstate_);
  }
  selectinstate_ = selectinstate;
  if (selectinstate) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetNewAssetProposalsRequest.selectInState)
}
inline ::api::OptionalProposalState* GetNewAssetProposalsRequest::release_selectinstate() {

  ::api::OptionalProposalState* temp = selectinstate_;
  selectinstate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::OptionalProposalState* GetNewAssetProposalsRequest::unsafe_arena_release_selectinstate() {
  // @@protoc_insertion_point(field_release:api.GetNewAssetProposalsRequest.selectInState)

  ::api::OptionalProposalState* temp = selectinstate_;
  selectinstate_ = nullptr;
  return temp;
}
inline ::api::OptionalProposalState* GetNewAssetProposalsRequest::_internal_mutable_selectinstate() {

  if (selectinstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::OptionalProposalState>(GetArena());
    selectinstate_ = p;
  }
  return selectinstate_;
}
inline ::api::OptionalProposalState* GetNewAssetProposalsRequest::mutable_selectinstate() {
  // @@protoc_insertion_point(field_mutable:api.GetNewAssetProposalsRequest.selectInState)
  return _internal_mutable_selectinstate();
}
inline void GetNewAssetProposalsRequest::set_allocated_selectinstate(::api::OptionalProposalState* selectinstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selectinstate_;
  }
  if (selectinstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selectinstate);
    if (message_arena != submessage_arena) {
      selectinstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectinstate, submessage_arena);
    }

  } else {

  }
  selectinstate_ = selectinstate;
  // @@protoc_insertion_point(field_set_allocated:api.GetNewAssetProposalsRequest.selectInState)
}

// -------------------------------------------------------------------

// GetNewAssetProposalsResponse

// repeated .vega.GovernanceData data = 1 [json_name = "data"];
inline int GetNewAssetProposalsResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetNewAssetProposalsResponse::data_size() const {
  return _internal_data_size();
}
inline ::vega::GovernanceData* GetNewAssetProposalsResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:api.GetNewAssetProposalsResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >*
GetNewAssetProposalsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:api.GetNewAssetProposalsResponse.data)
  return &data_;
}
inline const ::vega::GovernanceData& GetNewAssetProposalsResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::vega::GovernanceData& GetNewAssetProposalsResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:api.GetNewAssetProposalsResponse.data)
  return _internal_data(index);
}
inline ::vega::GovernanceData* GetNewAssetProposalsResponse::_internal_add_data() {
  return data_.Add();
}
inline ::vega::GovernanceData* GetNewAssetProposalsResponse::add_data() {
  // @@protoc_insertion_point(field_add:api.GetNewAssetProposalsResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::GovernanceData >&
GetNewAssetProposalsResponse::data() const {
  // @@protoc_insertion_point(field_list:api.GetNewAssetProposalsResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// GetProposalByIDRequest

// string proposalID = 1 [json_name = "proposalID", (.validator.field) = {
inline void GetProposalByIDRequest::clear_proposalid() {
  proposalid_.ClearToEmpty();
}
inline const std::string& GetProposalByIDRequest::proposalid() const {
  // @@protoc_insertion_point(field_get:api.GetProposalByIDRequest.proposalID)
  return _internal_proposalid();
}
inline void GetProposalByIDRequest::set_proposalid(const std::string& value) {
  _internal_set_proposalid(value);
  // @@protoc_insertion_point(field_set:api.GetProposalByIDRequest.proposalID)
}
inline std::string* GetProposalByIDRequest::mutable_proposalid() {
  // @@protoc_insertion_point(field_mutable:api.GetProposalByIDRequest.proposalID)
  return _internal_mutable_proposalid();
}
inline const std::string& GetProposalByIDRequest::_internal_proposalid() const {
  return proposalid_.Get();
}
inline void GetProposalByIDRequest::_internal_set_proposalid(const std::string& value) {

  proposalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetProposalByIDRequest::set_proposalid(std::string&& value) {

  proposalid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.GetProposalByIDRequest.proposalID)
}
inline void GetProposalByIDRequest::set_proposalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  proposalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.GetProposalByIDRequest.proposalID)
}
inline void GetProposalByIDRequest::set_proposalid(const char* value,
    size_t size) {

  proposalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.GetProposalByIDRequest.proposalID)
}
inline std::string* GetProposalByIDRequest::_internal_mutable_proposalid() {

  return proposalid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetProposalByIDRequest::release_proposalid() {
  // @@protoc_insertion_point(field_release:api.GetProposalByIDRequest.proposalID)
  return proposalid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProposalByIDRequest::set_allocated_proposalid(std::string* proposalid) {
  if (proposalid != nullptr) {

  } else {

  }
  proposalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.GetProposalByIDRequest.proposalID)
}

// -------------------------------------------------------------------

// GetProposalByIDResponse

// .vega.GovernanceData data = 1 [json_name = "data"];
inline bool GetProposalByIDResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool GetProposalByIDResponse::has_data() const {
  return _internal_has_data();
}
inline const ::vega::GovernanceData& GetProposalByIDResponse::_internal_data() const {
  const ::vega::GovernanceData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::GovernanceData&>(
      ::vega::_GovernanceData_default_instance_);
}
inline const ::vega::GovernanceData& GetProposalByIDResponse::data() const {
  // @@protoc_insertion_point(field_get:api.GetProposalByIDResponse.data)
  return _internal_data();
}
inline void GetProposalByIDResponse::unsafe_arena_set_allocated_data(
    ::vega::GovernanceData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetProposalByIDResponse.data)
}
inline ::vega::GovernanceData* GetProposalByIDResponse::release_data() {

  ::vega::GovernanceData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::GovernanceData* GetProposalByIDResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:api.GetProposalByIDResponse.data)

  ::vega::GovernanceData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::vega::GovernanceData* GetProposalByIDResponse::_internal_mutable_data() {

  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::GovernanceData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::vega::GovernanceData* GetProposalByIDResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:api.GetProposalByIDResponse.data)
  return _internal_mutable_data();
}
inline void GetProposalByIDResponse::set_allocated_data(::vega::GovernanceData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }

  } else {

  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:api.GetProposalByIDResponse.data)
}

// -------------------------------------------------------------------

// GetProposalByReferenceRequest

// string reference = 1 [json_name = "reference", (.validator.field) = {
inline void GetProposalByReferenceRequest::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& GetProposalByReferenceRequest::reference() const {
  // @@protoc_insertion_point(field_get:api.GetProposalByReferenceRequest.reference)
  return _internal_reference();
}
inline void GetProposalByReferenceRequest::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:api.GetProposalByReferenceRequest.reference)
}
inline std::string* GetProposalByReferenceRequest::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:api.GetProposalByReferenceRequest.reference)
  return _internal_mutable_reference();
}
inline const std::string& GetProposalByReferenceRequest::_internal_reference() const {
  return reference_.Get();
}
inline void GetProposalByReferenceRequest::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetProposalByReferenceRequest::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.GetProposalByReferenceRequest.reference)
}
inline void GetProposalByReferenceRequest::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.GetProposalByReferenceRequest.reference)
}
inline void GetProposalByReferenceRequest::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.GetProposalByReferenceRequest.reference)
}
inline std::string* GetProposalByReferenceRequest::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetProposalByReferenceRequest::release_reference() {
  // @@protoc_insertion_point(field_release:api.GetProposalByReferenceRequest.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProposalByReferenceRequest::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.GetProposalByReferenceRequest.reference)
}

// -------------------------------------------------------------------

// GetProposalByReferenceResponse

// .vega.GovernanceData data = 1 [json_name = "data"];
inline bool GetProposalByReferenceResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool GetProposalByReferenceResponse::has_data() const {
  return _internal_has_data();
}
inline const ::vega::GovernanceData& GetProposalByReferenceResponse::_internal_data() const {
  const ::vega::GovernanceData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::GovernanceData&>(
      ::vega::_GovernanceData_default_instance_);
}
inline const ::vega::GovernanceData& GetProposalByReferenceResponse::data() const {
  // @@protoc_insertion_point(field_get:api.GetProposalByReferenceResponse.data)
  return _internal_data();
}
inline void GetProposalByReferenceResponse::unsafe_arena_set_allocated_data(
    ::vega::GovernanceData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.GetProposalByReferenceResponse.data)
}
inline ::vega::GovernanceData* GetProposalByReferenceResponse::release_data() {

  ::vega::GovernanceData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::GovernanceData* GetProposalByReferenceResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:api.GetProposalByReferenceResponse.data)

  ::vega::GovernanceData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::vega::GovernanceData* GetProposalByReferenceResponse::_internal_mutable_data() {

  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::GovernanceData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::vega::GovernanceData* GetProposalByReferenceResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:api.GetProposalByReferenceResponse.data)
  return _internal_mutable_data();
}
inline void GetProposalByReferenceResponse::set_allocated_data(::vega::GovernanceData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }

  } else {

  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:api.GetProposalByReferenceResponse.data)
}

// -------------------------------------------------------------------

// ObservePartyProposalsRequest

// string partyID = 1 [json_name = "partyID", (.validator.field) = {
inline void ObservePartyProposalsRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& ObservePartyProposalsRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.ObservePartyProposalsRequest.partyID)
  return _internal_partyid();
}
inline void ObservePartyProposalsRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.ObservePartyProposalsRequest.partyID)
}
inline std::string* ObservePartyProposalsRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.ObservePartyProposalsRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& ObservePartyProposalsRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void ObservePartyProposalsRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObservePartyProposalsRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ObservePartyProposalsRequest.partyID)
}
inline void ObservePartyProposalsRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.ObservePartyProposalsRequest.partyID)
}
inline void ObservePartyProposalsRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ObservePartyProposalsRequest.partyID)
}
inline std::string* ObservePartyProposalsRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObservePartyProposalsRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.ObservePartyProposalsRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObservePartyProposalsRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ObservePartyProposalsRequest.partyID)
}

// -------------------------------------------------------------------

// ObserveProposalVotesRequest

// string proposalID = 1 [json_name = "proposalID", (.validator.field) = {
inline void ObserveProposalVotesRequest::clear_proposalid() {
  proposalid_.ClearToEmpty();
}
inline const std::string& ObserveProposalVotesRequest::proposalid() const {
  // @@protoc_insertion_point(field_get:api.ObserveProposalVotesRequest.proposalID)
  return _internal_proposalid();
}
inline void ObserveProposalVotesRequest::set_proposalid(const std::string& value) {
  _internal_set_proposalid(value);
  // @@protoc_insertion_point(field_set:api.ObserveProposalVotesRequest.proposalID)
}
inline std::string* ObserveProposalVotesRequest::mutable_proposalid() {
  // @@protoc_insertion_point(field_mutable:api.ObserveProposalVotesRequest.proposalID)
  return _internal_mutable_proposalid();
}
inline const std::string& ObserveProposalVotesRequest::_internal_proposalid() const {
  return proposalid_.Get();
}
inline void ObserveProposalVotesRequest::_internal_set_proposalid(const std::string& value) {

  proposalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObserveProposalVotesRequest::set_proposalid(std::string&& value) {

  proposalid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ObserveProposalVotesRequest.proposalID)
}
inline void ObserveProposalVotesRequest::set_proposalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  proposalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.ObserveProposalVotesRequest.proposalID)
}
inline void ObserveProposalVotesRequest::set_proposalid(const char* value,
    size_t size) {

  proposalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ObserveProposalVotesRequest.proposalID)
}
inline std::string* ObserveProposalVotesRequest::_internal_mutable_proposalid() {

  return proposalid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObserveProposalVotesRequest::release_proposalid() {
  // @@protoc_insertion_point(field_release:api.ObserveProposalVotesRequest.proposalID)
  return proposalid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObserveProposalVotesRequest::set_allocated_proposalid(std::string* proposalid) {
  if (proposalid != nullptr) {

  } else {

  }
  proposalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ObserveProposalVotesRequest.proposalID)
}

// -------------------------------------------------------------------

// ObservePartyVotesRequest

// string partyID = 1 [json_name = "partyID", (.validator.field) = {
inline void ObservePartyVotesRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& ObservePartyVotesRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.ObservePartyVotesRequest.partyID)
  return _internal_partyid();
}
inline void ObservePartyVotesRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.ObservePartyVotesRequest.partyID)
}
inline std::string* ObservePartyVotesRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.ObservePartyVotesRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& ObservePartyVotesRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void ObservePartyVotesRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObservePartyVotesRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ObservePartyVotesRequest.partyID)
}
inline void ObservePartyVotesRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.ObservePartyVotesRequest.partyID)
}
inline void ObservePartyVotesRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ObservePartyVotesRequest.partyID)
}
inline std::string* ObservePartyVotesRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObservePartyVotesRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.ObservePartyVotesRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObservePartyVotesRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ObservePartyVotesRequest.partyID)
}

// -------------------------------------------------------------------

// MarginLevelsSubscribeRequest

// string partyID = 1 [json_name = "partyID", (.validator.field) = {
inline void MarginLevelsSubscribeRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& MarginLevelsSubscribeRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.MarginLevelsSubscribeRequest.partyID)
  return _internal_partyid();
}
inline void MarginLevelsSubscribeRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.MarginLevelsSubscribeRequest.partyID)
}
inline std::string* MarginLevelsSubscribeRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.MarginLevelsSubscribeRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& MarginLevelsSubscribeRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void MarginLevelsSubscribeRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarginLevelsSubscribeRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.MarginLevelsSubscribeRequest.partyID)
}
inline void MarginLevelsSubscribeRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.MarginLevelsSubscribeRequest.partyID)
}
inline void MarginLevelsSubscribeRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.MarginLevelsSubscribeRequest.partyID)
}
inline std::string* MarginLevelsSubscribeRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarginLevelsSubscribeRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.MarginLevelsSubscribeRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarginLevelsSubscribeRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.MarginLevelsSubscribeRequest.partyID)
}

// string marketID = 2 [json_name = "marketID"];
inline void MarginLevelsSubscribeRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& MarginLevelsSubscribeRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.MarginLevelsSubscribeRequest.marketID)
  return _internal_marketid();
}
inline void MarginLevelsSubscribeRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.MarginLevelsSubscribeRequest.marketID)
}
inline std::string* MarginLevelsSubscribeRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.MarginLevelsSubscribeRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& MarginLevelsSubscribeRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void MarginLevelsSubscribeRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarginLevelsSubscribeRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.MarginLevelsSubscribeRequest.marketID)
}
inline void MarginLevelsSubscribeRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.MarginLevelsSubscribeRequest.marketID)
}
inline void MarginLevelsSubscribeRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.MarginLevelsSubscribeRequest.marketID)
}
inline std::string* MarginLevelsSubscribeRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarginLevelsSubscribeRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.MarginLevelsSubscribeRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarginLevelsSubscribeRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.MarginLevelsSubscribeRequest.marketID)
}

// -------------------------------------------------------------------

// MarginLevelsRequest

// string partyID = 1 [json_name = "partyID", (.validator.field) = {
inline void MarginLevelsRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& MarginLevelsRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.MarginLevelsRequest.partyID)
  return _internal_partyid();
}
inline void MarginLevelsRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.MarginLevelsRequest.partyID)
}
inline std::string* MarginLevelsRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.MarginLevelsRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& MarginLevelsRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void MarginLevelsRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarginLevelsRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.MarginLevelsRequest.partyID)
}
inline void MarginLevelsRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.MarginLevelsRequest.partyID)
}
inline void MarginLevelsRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.MarginLevelsRequest.partyID)
}
inline std::string* MarginLevelsRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarginLevelsRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.MarginLevelsRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarginLevelsRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.MarginLevelsRequest.partyID)
}

// string marketID = 2 [json_name = "marketID"];
inline void MarginLevelsRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& MarginLevelsRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.MarginLevelsRequest.marketID)
  return _internal_marketid();
}
inline void MarginLevelsRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.MarginLevelsRequest.marketID)
}
inline std::string* MarginLevelsRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.MarginLevelsRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& MarginLevelsRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void MarginLevelsRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarginLevelsRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.MarginLevelsRequest.marketID)
}
inline void MarginLevelsRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.MarginLevelsRequest.marketID)
}
inline void MarginLevelsRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.MarginLevelsRequest.marketID)
}
inline std::string* MarginLevelsRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarginLevelsRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.MarginLevelsRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarginLevelsRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.MarginLevelsRequest.marketID)
}

// -------------------------------------------------------------------

// MarginLevelsResponse

// repeated .vega.MarginLevels marginLevels = 1 [json_name = "marginLevels"];
inline int MarginLevelsResponse::_internal_marginlevels_size() const {
  return marginlevels_.size();
}
inline int MarginLevelsResponse::marginlevels_size() const {
  return _internal_marginlevels_size();
}
inline ::vega::MarginLevels* MarginLevelsResponse::mutable_marginlevels(int index) {
  // @@protoc_insertion_point(field_mutable:api.MarginLevelsResponse.marginLevels)
  return marginlevels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarginLevels >*
MarginLevelsResponse::mutable_marginlevels() {
  // @@protoc_insertion_point(field_mutable_list:api.MarginLevelsResponse.marginLevels)
  return &marginlevels_;
}
inline const ::vega::MarginLevels& MarginLevelsResponse::_internal_marginlevels(int index) const {
  return marginlevels_.Get(index);
}
inline const ::vega::MarginLevels& MarginLevelsResponse::marginlevels(int index) const {
  // @@protoc_insertion_point(field_get:api.MarginLevelsResponse.marginLevels)
  return _internal_marginlevels(index);
}
inline ::vega::MarginLevels* MarginLevelsResponse::_internal_add_marginlevels() {
  return marginlevels_.Add();
}
inline ::vega::MarginLevels* MarginLevelsResponse::add_marginlevels() {
  // @@protoc_insertion_point(field_add:api.MarginLevelsResponse.marginLevels)
  return _internal_add_marginlevels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarginLevels >&
MarginLevelsResponse::marginlevels() const {
  // @@protoc_insertion_point(field_list:api.MarginLevelsResponse.marginLevels)
  return marginlevels_;
}

// -------------------------------------------------------------------

// MarketsDataSubscribeRequest

// string marketID = 1 [json_name = "marketID"];
inline void MarketsDataSubscribeRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& MarketsDataSubscribeRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.MarketsDataSubscribeRequest.marketID)
  return _internal_marketid();
}
inline void MarketsDataSubscribeRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.MarketsDataSubscribeRequest.marketID)
}
inline std::string* MarketsDataSubscribeRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.MarketsDataSubscribeRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& MarketsDataSubscribeRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void MarketsDataSubscribeRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketsDataSubscribeRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.MarketsDataSubscribeRequest.marketID)
}
inline void MarketsDataSubscribeRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.MarketsDataSubscribeRequest.marketID)
}
inline void MarketsDataSubscribeRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.MarketsDataSubscribeRequest.marketID)
}
inline std::string* MarketsDataSubscribeRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketsDataSubscribeRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.MarketsDataSubscribeRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketsDataSubscribeRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.MarketsDataSubscribeRequest.marketID)
}

// -------------------------------------------------------------------

// MarketDataByIDRequest

// string marketID = 1 [json_name = "marketID", (.validator.field) = {
inline void MarketDataByIDRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& MarketDataByIDRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.MarketDataByIDRequest.marketID)
  return _internal_marketid();
}
inline void MarketDataByIDRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.MarketDataByIDRequest.marketID)
}
inline std::string* MarketDataByIDRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.MarketDataByIDRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& MarketDataByIDRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void MarketDataByIDRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketDataByIDRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.MarketDataByIDRequest.marketID)
}
inline void MarketDataByIDRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.MarketDataByIDRequest.marketID)
}
inline void MarketDataByIDRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.MarketDataByIDRequest.marketID)
}
inline std::string* MarketDataByIDRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketDataByIDRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.MarketDataByIDRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDataByIDRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.MarketDataByIDRequest.marketID)
}

// -------------------------------------------------------------------

// MarketDataByIDResponse

// .vega.MarketData marketData = 1 [json_name = "marketData"];
inline bool MarketDataByIDResponse::_internal_has_marketdata() const {
  return this != internal_default_instance() && marketdata_ != nullptr;
}
inline bool MarketDataByIDResponse::has_marketdata() const {
  return _internal_has_marketdata();
}
inline const ::vega::MarketData& MarketDataByIDResponse::_internal_marketdata() const {
  const ::vega::MarketData* p = marketdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::MarketData&>(
      ::vega::_MarketData_default_instance_);
}
inline const ::vega::MarketData& MarketDataByIDResponse::marketdata() const {
  // @@protoc_insertion_point(field_get:api.MarketDataByIDResponse.marketData)
  return _internal_marketdata();
}
inline void MarketDataByIDResponse::unsafe_arena_set_allocated_marketdata(
    ::vega::MarketData* marketdata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(marketdata_);
  }
  marketdata_ = marketdata;
  if (marketdata) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.MarketDataByIDResponse.marketData)
}
inline ::vega::MarketData* MarketDataByIDResponse::release_marketdata() {

  ::vega::MarketData* temp = marketdata_;
  marketdata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::MarketData* MarketDataByIDResponse::unsafe_arena_release_marketdata() {
  // @@protoc_insertion_point(field_release:api.MarketDataByIDResponse.marketData)

  ::vega::MarketData* temp = marketdata_;
  marketdata_ = nullptr;
  return temp;
}
inline ::vega::MarketData* MarketDataByIDResponse::_internal_mutable_marketdata() {

  if (marketdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::MarketData>(GetArena());
    marketdata_ = p;
  }
  return marketdata_;
}
inline ::vega::MarketData* MarketDataByIDResponse::mutable_marketdata() {
  // @@protoc_insertion_point(field_mutable:api.MarketDataByIDResponse.marketData)
  return _internal_mutable_marketdata();
}
inline void MarketDataByIDResponse::set_allocated_marketdata(::vega::MarketData* marketdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(marketdata_);
  }
  if (marketdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(marketdata)->GetArena();
    if (message_arena != submessage_arena) {
      marketdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marketdata, submessage_arena);
    }

  } else {

  }
  marketdata_ = marketdata;
  // @@protoc_insertion_point(field_set_allocated:api.MarketDataByIDResponse.marketData)
}

// -------------------------------------------------------------------

// MarketsDataResponse

// repeated .vega.MarketData marketsData = 1 [json_name = "marketsData"];
inline int MarketsDataResponse::_internal_marketsdata_size() const {
  return marketsdata_.size();
}
inline int MarketsDataResponse::marketsdata_size() const {
  return _internal_marketsdata_size();
}
inline ::vega::MarketData* MarketsDataResponse::mutable_marketsdata(int index) {
  // @@protoc_insertion_point(field_mutable:api.MarketsDataResponse.marketsData)
  return marketsdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarketData >*
MarketsDataResponse::mutable_marketsdata() {
  // @@protoc_insertion_point(field_mutable_list:api.MarketsDataResponse.marketsData)
  return &marketsdata_;
}
inline const ::vega::MarketData& MarketsDataResponse::_internal_marketsdata(int index) const {
  return marketsdata_.Get(index);
}
inline const ::vega::MarketData& MarketsDataResponse::marketsdata(int index) const {
  // @@protoc_insertion_point(field_get:api.MarketsDataResponse.marketsData)
  return _internal_marketsdata(index);
}
inline ::vega::MarketData* MarketsDataResponse::_internal_add_marketsdata() {
  return marketsdata_.Add();
}
inline ::vega::MarketData* MarketsDataResponse::add_marketsdata() {
  // @@protoc_insertion_point(field_add:api.MarketsDataResponse.marketsData)
  return _internal_add_marketsdata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::MarketData >&
MarketsDataResponse::marketsdata() const {
  // @@protoc_insertion_point(field_list:api.MarketsDataResponse.marketsData)
  return marketsdata_;
}

// -------------------------------------------------------------------

// LastTradeRequest

// string marketID = 1 [json_name = "marketID", (.validator.field) = {
inline void LastTradeRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& LastTradeRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.LastTradeRequest.marketID)
  return _internal_marketid();
}
inline void LastTradeRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.LastTradeRequest.marketID)
}
inline std::string* LastTradeRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.LastTradeRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& LastTradeRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void LastTradeRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LastTradeRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.LastTradeRequest.marketID)
}
inline void LastTradeRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.LastTradeRequest.marketID)
}
inline void LastTradeRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.LastTradeRequest.marketID)
}
inline std::string* LastTradeRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LastTradeRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.LastTradeRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LastTradeRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.LastTradeRequest.marketID)
}

// -------------------------------------------------------------------

// LastTradeResponse

// .vega.Trade trade = 1 [json_name = "trade"];
inline bool LastTradeResponse::_internal_has_trade() const {
  return this != internal_default_instance() && trade_ != nullptr;
}
inline bool LastTradeResponse::has_trade() const {
  return _internal_has_trade();
}
inline const ::vega::Trade& LastTradeResponse::_internal_trade() const {
  const ::vega::Trade* p = trade_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Trade&>(
      ::vega::_Trade_default_instance_);
}
inline const ::vega::Trade& LastTradeResponse::trade() const {
  // @@protoc_insertion_point(field_get:api.LastTradeResponse.trade)
  return _internal_trade();
}
inline void LastTradeResponse::unsafe_arena_set_allocated_trade(
    ::vega::Trade* trade) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trade_);
  }
  trade_ = trade;
  if (trade) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.LastTradeResponse.trade)
}
inline ::vega::Trade* LastTradeResponse::release_trade() {

  ::vega::Trade* temp = trade_;
  trade_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Trade* LastTradeResponse::unsafe_arena_release_trade() {
  // @@protoc_insertion_point(field_release:api.LastTradeResponse.trade)

  ::vega::Trade* temp = trade_;
  trade_ = nullptr;
  return temp;
}
inline ::vega::Trade* LastTradeResponse::_internal_mutable_trade() {

  if (trade_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Trade>(GetArena());
    trade_ = p;
  }
  return trade_;
}
inline ::vega::Trade* LastTradeResponse::mutable_trade() {
  // @@protoc_insertion_point(field_mutable:api.LastTradeResponse.trade)
  return _internal_mutable_trade();
}
inline void LastTradeResponse::set_allocated_trade(::vega::Trade* trade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trade_);
  }
  if (trade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trade)->GetArena();
    if (message_arena != submessage_arena) {
      trade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trade, submessage_arena);
    }

  } else {

  }
  trade_ = trade;
  // @@protoc_insertion_point(field_set_allocated:api.LastTradeResponse.trade)
}

// -------------------------------------------------------------------

// MarketByIDRequest

// string marketID = 1 [json_name = "marketID", (.validator.field) = {
inline void MarketByIDRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& MarketByIDRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.MarketByIDRequest.marketID)
  return _internal_marketid();
}
inline void MarketByIDRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.MarketByIDRequest.marketID)
}
inline std::string* MarketByIDRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.MarketByIDRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& MarketByIDRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void MarketByIDRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketByIDRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.MarketByIDRequest.marketID)
}
inline void MarketByIDRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.MarketByIDRequest.marketID)
}
inline void MarketByIDRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.MarketByIDRequest.marketID)
}
inline std::string* MarketByIDRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketByIDRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.MarketByIDRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketByIDRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.MarketByIDRequest.marketID)
}

// -------------------------------------------------------------------

// MarketByIDResponse

// .vega.Market market = 1 [json_name = "market"];
inline bool MarketByIDResponse::_internal_has_market() const {
  return this != internal_default_instance() && market_ != nullptr;
}
inline bool MarketByIDResponse::has_market() const {
  return _internal_has_market();
}
inline const ::vega::Market& MarketByIDResponse::_internal_market() const {
  const ::vega::Market* p = market_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Market&>(
      ::vega::_Market_default_instance_);
}
inline const ::vega::Market& MarketByIDResponse::market() const {
  // @@protoc_insertion_point(field_get:api.MarketByIDResponse.market)
  return _internal_market();
}
inline void MarketByIDResponse::unsafe_arena_set_allocated_market(
    ::vega::Market* market) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_);
  }
  market_ = market;
  if (market) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.MarketByIDResponse.market)
}
inline ::vega::Market* MarketByIDResponse::release_market() {

  ::vega::Market* temp = market_;
  market_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Market* MarketByIDResponse::unsafe_arena_release_market() {
  // @@protoc_insertion_point(field_release:api.MarketByIDResponse.market)

  ::vega::Market* temp = market_;
  market_ = nullptr;
  return temp;
}
inline ::vega::Market* MarketByIDResponse::_internal_mutable_market() {

  if (market_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Market>(GetArena());
    market_ = p;
  }
  return market_;
}
inline ::vega::Market* MarketByIDResponse::mutable_market() {
  // @@protoc_insertion_point(field_mutable:api.MarketByIDResponse.market)
  return _internal_mutable_market();
}
inline void MarketByIDResponse::set_allocated_market(::vega::Market* market) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_);
  }
  if (market) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market)->GetArena();
    if (message_arena != submessage_arena) {
      market = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market, submessage_arena);
    }

  } else {

  }
  market_ = market;
  // @@protoc_insertion_point(field_set_allocated:api.MarketByIDResponse.market)
}

// -------------------------------------------------------------------

// PartyByIDRequest

// string partyID = 1 [json_name = "partyID", (.validator.field) = {
inline void PartyByIDRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& PartyByIDRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.PartyByIDRequest.partyID)
  return _internal_partyid();
}
inline void PartyByIDRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.PartyByIDRequest.partyID)
}
inline std::string* PartyByIDRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.PartyByIDRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& PartyByIDRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void PartyByIDRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartyByIDRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PartyByIDRequest.partyID)
}
inline void PartyByIDRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PartyByIDRequest.partyID)
}
inline void PartyByIDRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PartyByIDRequest.partyID)
}
inline std::string* PartyByIDRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartyByIDRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.PartyByIDRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyByIDRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PartyByIDRequest.partyID)
}

// -------------------------------------------------------------------

// PartyByIDResponse

// .vega.Party party = 1 [json_name = "party"];
inline bool PartyByIDResponse::_internal_has_party() const {
  return this != internal_default_instance() && party_ != nullptr;
}
inline bool PartyByIDResponse::has_party() const {
  return _internal_has_party();
}
inline const ::vega::Party& PartyByIDResponse::_internal_party() const {
  const ::vega::Party* p = party_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Party&>(
      ::vega::_Party_default_instance_);
}
inline const ::vega::Party& PartyByIDResponse::party() const {
  // @@protoc_insertion_point(field_get:api.PartyByIDResponse.party)
  return _internal_party();
}
inline void PartyByIDResponse::unsafe_arena_set_allocated_party(
    ::vega::Party* party) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(party_);
  }
  party_ = party;
  if (party) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.PartyByIDResponse.party)
}
inline ::vega::Party* PartyByIDResponse::release_party() {

  ::vega::Party* temp = party_;
  party_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Party* PartyByIDResponse::unsafe_arena_release_party() {
  // @@protoc_insertion_point(field_release:api.PartyByIDResponse.party)

  ::vega::Party* temp = party_;
  party_ = nullptr;
  return temp;
}
inline ::vega::Party* PartyByIDResponse::_internal_mutable_party() {

  if (party_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Party>(GetArena());
    party_ = p;
  }
  return party_;
}
inline ::vega::Party* PartyByIDResponse::mutable_party() {
  // @@protoc_insertion_point(field_mutable:api.PartyByIDResponse.party)
  return _internal_mutable_party();
}
inline void PartyByIDResponse::set_allocated_party(::vega::Party* party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(party_);
  }
  if (party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(party)->GetArena();
    if (message_arena != submessage_arena) {
      party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party, submessage_arena);
    }

  } else {

  }
  party_ = party;
  // @@protoc_insertion_point(field_set_allocated:api.PartyByIDResponse.party)
}

// -------------------------------------------------------------------

// PartiesResponse

// repeated .vega.Party parties = 1 [json_name = "parties"];
inline int PartiesResponse::_internal_parties_size() const {
  return parties_.size();
}
inline int PartiesResponse::parties_size() const {
  return _internal_parties_size();
}
inline ::vega::Party* PartiesResponse::mutable_parties(int index) {
  // @@protoc_insertion_point(field_mutable:api.PartiesResponse.parties)
  return parties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Party >*
PartiesResponse::mutable_parties() {
  // @@protoc_insertion_point(field_mutable_list:api.PartiesResponse.parties)
  return &parties_;
}
inline const ::vega::Party& PartiesResponse::_internal_parties(int index) const {
  return parties_.Get(index);
}
inline const ::vega::Party& PartiesResponse::parties(int index) const {
  // @@protoc_insertion_point(field_get:api.PartiesResponse.parties)
  return _internal_parties(index);
}
inline ::vega::Party* PartiesResponse::_internal_add_parties() {
  return parties_.Add();
}
inline ::vega::Party* PartiesResponse::add_parties() {
  // @@protoc_insertion_point(field_add:api.PartiesResponse.parties)
  return _internal_add_parties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Party >&
PartiesResponse::parties() const {
  // @@protoc_insertion_point(field_list:api.PartiesResponse.parties)
  return parties_;
}

// -------------------------------------------------------------------

// TradesByPartyRequest

// string partyID = 1 [json_name = "partyID"];
inline void TradesByPartyRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& TradesByPartyRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.TradesByPartyRequest.partyID)
  return _internal_partyid();
}
inline void TradesByPartyRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.TradesByPartyRequest.partyID)
}
inline std::string* TradesByPartyRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.TradesByPartyRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& TradesByPartyRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void TradesByPartyRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradesByPartyRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.TradesByPartyRequest.partyID)
}
inline void TradesByPartyRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.TradesByPartyRequest.partyID)
}
inline void TradesByPartyRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.TradesByPartyRequest.partyID)
}
inline std::string* TradesByPartyRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradesByPartyRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.TradesByPartyRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradesByPartyRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.TradesByPartyRequest.partyID)
}

// string marketID = 2 [json_name = "marketID"];
inline void TradesByPartyRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& TradesByPartyRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.TradesByPartyRequest.marketID)
  return _internal_marketid();
}
inline void TradesByPartyRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.TradesByPartyRequest.marketID)
}
inline std::string* TradesByPartyRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.TradesByPartyRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& TradesByPartyRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void TradesByPartyRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradesByPartyRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.TradesByPartyRequest.marketID)
}
inline void TradesByPartyRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.TradesByPartyRequest.marketID)
}
inline void TradesByPartyRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.TradesByPartyRequest.marketID)
}
inline std::string* TradesByPartyRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradesByPartyRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.TradesByPartyRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradesByPartyRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.TradesByPartyRequest.marketID)
}

// .api.Pagination pagination = 3 [json_name = "pagination"];
inline bool TradesByPartyRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool TradesByPartyRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void TradesByPartyRequest::clear_pagination() {
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::api::Pagination& TradesByPartyRequest::_internal_pagination() const {
  const ::api::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::Pagination&>(
      ::api::_Pagination_default_instance_);
}
inline const ::api::Pagination& TradesByPartyRequest::pagination() const {
  // @@protoc_insertion_point(field_get:api.TradesByPartyRequest.pagination)
  return _internal_pagination();
}
inline void TradesByPartyRequest::unsafe_arena_set_allocated_pagination(
    ::api::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.TradesByPartyRequest.pagination)
}
inline ::api::Pagination* TradesByPartyRequest::release_pagination() {

  ::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::Pagination* TradesByPartyRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:api.TradesByPartyRequest.pagination)

  ::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::api::Pagination* TradesByPartyRequest::_internal_mutable_pagination() {

  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::api::Pagination* TradesByPartyRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:api.TradesByPartyRequest.pagination)
  return _internal_mutable_pagination();
}
inline void TradesByPartyRequest::set_allocated_pagination(::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }

  } else {

  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:api.TradesByPartyRequest.pagination)
}

// -------------------------------------------------------------------

// TradesByPartyResponse

// repeated .vega.Trade trades = 1 [json_name = "trades"];
inline int TradesByPartyResponse::_internal_trades_size() const {
  return trades_.size();
}
inline int TradesByPartyResponse::trades_size() const {
  return _internal_trades_size();
}
inline ::vega::Trade* TradesByPartyResponse::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:api.TradesByPartyResponse.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
TradesByPartyResponse::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:api.TradesByPartyResponse.trades)
  return &trades_;
}
inline const ::vega::Trade& TradesByPartyResponse::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::vega::Trade& TradesByPartyResponse::trades(int index) const {
  // @@protoc_insertion_point(field_get:api.TradesByPartyResponse.trades)
  return _internal_trades(index);
}
inline ::vega::Trade* TradesByPartyResponse::_internal_add_trades() {
  return trades_.Add();
}
inline ::vega::Trade* TradesByPartyResponse::add_trades() {
  // @@protoc_insertion_point(field_add:api.TradesByPartyResponse.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
TradesByPartyResponse::trades() const {
  // @@protoc_insertion_point(field_list:api.TradesByPartyResponse.trades)
  return trades_;
}

// -------------------------------------------------------------------

// TradesByOrderRequest

// string orderID = 1 [json_name = "orderID"];
inline void TradesByOrderRequest::clear_orderid() {
  orderid_.ClearToEmpty();
}
inline const std::string& TradesByOrderRequest::orderid() const {
  // @@protoc_insertion_point(field_get:api.TradesByOrderRequest.orderID)
  return _internal_orderid();
}
inline void TradesByOrderRequest::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:api.TradesByOrderRequest.orderID)
}
inline std::string* TradesByOrderRequest::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:api.TradesByOrderRequest.orderID)
  return _internal_mutable_orderid();
}
inline const std::string& TradesByOrderRequest::_internal_orderid() const {
  return orderid_.Get();
}
inline void TradesByOrderRequest::_internal_set_orderid(const std::string& value) {

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradesByOrderRequest::set_orderid(std::string&& value) {

  orderid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.TradesByOrderRequest.orderID)
}
inline void TradesByOrderRequest::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.TradesByOrderRequest.orderID)
}
inline void TradesByOrderRequest::set_orderid(const char* value,
    size_t size) {

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.TradesByOrderRequest.orderID)
}
inline std::string* TradesByOrderRequest::_internal_mutable_orderid() {

  return orderid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradesByOrderRequest::release_orderid() {
  // @@protoc_insertion_point(field_release:api.TradesByOrderRequest.orderID)
  return orderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradesByOrderRequest::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {

  } else {

  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.TradesByOrderRequest.orderID)
}

// -------------------------------------------------------------------

// TradesByOrderResponse

// repeated .vega.Trade trades = 1 [json_name = "trades"];
inline int TradesByOrderResponse::_internal_trades_size() const {
  return trades_.size();
}
inline int TradesByOrderResponse::trades_size() const {
  return _internal_trades_size();
}
inline ::vega::Trade* TradesByOrderResponse::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:api.TradesByOrderResponse.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
TradesByOrderResponse::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:api.TradesByOrderResponse.trades)
  return &trades_;
}
inline const ::vega::Trade& TradesByOrderResponse::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::vega::Trade& TradesByOrderResponse::trades(int index) const {
  // @@protoc_insertion_point(field_get:api.TradesByOrderResponse.trades)
  return _internal_trades(index);
}
inline ::vega::Trade* TradesByOrderResponse::_internal_add_trades() {
  return trades_.Add();
}
inline ::vega::Trade* TradesByOrderResponse::add_trades() {
  // @@protoc_insertion_point(field_add:api.TradesByOrderResponse.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
TradesByOrderResponse::trades() const {
  // @@protoc_insertion_point(field_list:api.TradesByOrderResponse.trades)
  return trades_;
}

// -------------------------------------------------------------------

// AccountsSubscribeRequest

// string marketID = 1 [json_name = "marketID"];
inline void AccountsSubscribeRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& AccountsSubscribeRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.AccountsSubscribeRequest.marketID)
  return _internal_marketid();
}
inline void AccountsSubscribeRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.AccountsSubscribeRequest.marketID)
}
inline std::string* AccountsSubscribeRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.AccountsSubscribeRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& AccountsSubscribeRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void AccountsSubscribeRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountsSubscribeRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.AccountsSubscribeRequest.marketID)
}
inline void AccountsSubscribeRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.AccountsSubscribeRequest.marketID)
}
inline void AccountsSubscribeRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.AccountsSubscribeRequest.marketID)
}
inline std::string* AccountsSubscribeRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountsSubscribeRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.AccountsSubscribeRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountsSubscribeRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.AccountsSubscribeRequest.marketID)
}

// string partyID = 2 [json_name = "partyID"];
inline void AccountsSubscribeRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& AccountsSubscribeRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.AccountsSubscribeRequest.partyID)
  return _internal_partyid();
}
inline void AccountsSubscribeRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.AccountsSubscribeRequest.partyID)
}
inline std::string* AccountsSubscribeRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.AccountsSubscribeRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& AccountsSubscribeRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void AccountsSubscribeRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountsSubscribeRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.AccountsSubscribeRequest.partyID)
}
inline void AccountsSubscribeRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.AccountsSubscribeRequest.partyID)
}
inline void AccountsSubscribeRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.AccountsSubscribeRequest.partyID)
}
inline std::string* AccountsSubscribeRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountsSubscribeRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.AccountsSubscribeRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountsSubscribeRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.AccountsSubscribeRequest.partyID)
}

// string asset = 3 [json_name = "asset"];
inline void AccountsSubscribeRequest::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& AccountsSubscribeRequest::asset() const {
  // @@protoc_insertion_point(field_get:api.AccountsSubscribeRequest.asset)
  return _internal_asset();
}
inline void AccountsSubscribeRequest::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:api.AccountsSubscribeRequest.asset)
}
inline std::string* AccountsSubscribeRequest::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:api.AccountsSubscribeRequest.asset)
  return _internal_mutable_asset();
}
inline const std::string& AccountsSubscribeRequest::_internal_asset() const {
  return asset_.Get();
}
inline void AccountsSubscribeRequest::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountsSubscribeRequest::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.AccountsSubscribeRequest.asset)
}
inline void AccountsSubscribeRequest::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.AccountsSubscribeRequest.asset)
}
inline void AccountsSubscribeRequest::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.AccountsSubscribeRequest.asset)
}
inline std::string* AccountsSubscribeRequest::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountsSubscribeRequest::release_asset() {
  // @@protoc_insertion_point(field_release:api.AccountsSubscribeRequest.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountsSubscribeRequest::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.AccountsSubscribeRequest.asset)
}

// .vega.AccountType type = 4 [json_name = "type"];
inline void AccountsSubscribeRequest::clear_type() {
  type_ = 0;
}
inline ::vega::AccountType AccountsSubscribeRequest::_internal_type() const {
  return static_cast< ::vega::AccountType >(type_);
}
inline ::vega::AccountType AccountsSubscribeRequest::type() const {
  // @@protoc_insertion_point(field_get:api.AccountsSubscribeRequest.type)
  return _internal_type();
}
inline void AccountsSubscribeRequest::_internal_set_type(::vega::AccountType value) {

  type_ = value;
}
inline void AccountsSubscribeRequest::set_type(::vega::AccountType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:api.AccountsSubscribeRequest.type)
}

// -------------------------------------------------------------------

// OrdersSubscribeRequest

// string marketID = 1 [json_name = "marketID"];
inline void OrdersSubscribeRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& OrdersSubscribeRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.OrdersSubscribeRequest.marketID)
  return _internal_marketid();
}
inline void OrdersSubscribeRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.OrdersSubscribeRequest.marketID)
}
inline std::string* OrdersSubscribeRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.OrdersSubscribeRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& OrdersSubscribeRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void OrdersSubscribeRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrdersSubscribeRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.OrdersSubscribeRequest.marketID)
}
inline void OrdersSubscribeRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.OrdersSubscribeRequest.marketID)
}
inline void OrdersSubscribeRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.OrdersSubscribeRequest.marketID)
}
inline std::string* OrdersSubscribeRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrdersSubscribeRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.OrdersSubscribeRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrdersSubscribeRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.OrdersSubscribeRequest.marketID)
}

// string partyID = 2 [json_name = "partyID"];
inline void OrdersSubscribeRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& OrdersSubscribeRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.OrdersSubscribeRequest.partyID)
  return _internal_partyid();
}
inline void OrdersSubscribeRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.OrdersSubscribeRequest.partyID)
}
inline std::string* OrdersSubscribeRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.OrdersSubscribeRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& OrdersSubscribeRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void OrdersSubscribeRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrdersSubscribeRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.OrdersSubscribeRequest.partyID)
}
inline void OrdersSubscribeRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.OrdersSubscribeRequest.partyID)
}
inline void OrdersSubscribeRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.OrdersSubscribeRequest.partyID)
}
inline std::string* OrdersSubscribeRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrdersSubscribeRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.OrdersSubscribeRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrdersSubscribeRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.OrdersSubscribeRequest.partyID)
}

// -------------------------------------------------------------------

// TradesSubscribeRequest

// string marketID = 1 [json_name = "marketID"];
inline void TradesSubscribeRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& TradesSubscribeRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.TradesSubscribeRequest.marketID)
  return _internal_marketid();
}
inline void TradesSubscribeRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.TradesSubscribeRequest.marketID)
}
inline std::string* TradesSubscribeRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.TradesSubscribeRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& TradesSubscribeRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void TradesSubscribeRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradesSubscribeRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.TradesSubscribeRequest.marketID)
}
inline void TradesSubscribeRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.TradesSubscribeRequest.marketID)
}
inline void TradesSubscribeRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.TradesSubscribeRequest.marketID)
}
inline std::string* TradesSubscribeRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradesSubscribeRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.TradesSubscribeRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradesSubscribeRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.TradesSubscribeRequest.marketID)
}

// string partyID = 2 [json_name = "partyID"];
inline void TradesSubscribeRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& TradesSubscribeRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.TradesSubscribeRequest.partyID)
  return _internal_partyid();
}
inline void TradesSubscribeRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.TradesSubscribeRequest.partyID)
}
inline std::string* TradesSubscribeRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.TradesSubscribeRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& TradesSubscribeRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void TradesSubscribeRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradesSubscribeRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.TradesSubscribeRequest.partyID)
}
inline void TradesSubscribeRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.TradesSubscribeRequest.partyID)
}
inline void TradesSubscribeRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.TradesSubscribeRequest.partyID)
}
inline std::string* TradesSubscribeRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradesSubscribeRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.TradesSubscribeRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradesSubscribeRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.TradesSubscribeRequest.partyID)
}

// -------------------------------------------------------------------

// CandlesSubscribeRequest

// string marketID = 1 [json_name = "marketID", (.validator.field) = {
inline void CandlesSubscribeRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& CandlesSubscribeRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.CandlesSubscribeRequest.marketID)
  return _internal_marketid();
}
inline void CandlesSubscribeRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.CandlesSubscribeRequest.marketID)
}
inline std::string* CandlesSubscribeRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.CandlesSubscribeRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& CandlesSubscribeRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void CandlesSubscribeRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CandlesSubscribeRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.CandlesSubscribeRequest.marketID)
}
inline void CandlesSubscribeRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.CandlesSubscribeRequest.marketID)
}
inline void CandlesSubscribeRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.CandlesSubscribeRequest.marketID)
}
inline std::string* CandlesSubscribeRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CandlesSubscribeRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.CandlesSubscribeRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CandlesSubscribeRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.CandlesSubscribeRequest.marketID)
}

// .vega.Interval interval = 2 [json_name = "interval"];
inline void CandlesSubscribeRequest::clear_interval() {
  interval_ = 0;
}
inline ::vega::Interval CandlesSubscribeRequest::_internal_interval() const {
  return static_cast< ::vega::Interval >(interval_);
}
inline ::vega::Interval CandlesSubscribeRequest::interval() const {
  // @@protoc_insertion_point(field_get:api.CandlesSubscribeRequest.interval)
  return _internal_interval();
}
inline void CandlesSubscribeRequest::_internal_set_interval(::vega::Interval value) {

  interval_ = value;
}
inline void CandlesSubscribeRequest::set_interval(::vega::Interval value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:api.CandlesSubscribeRequest.interval)
}

// -------------------------------------------------------------------

// MarketDepthSubscribeRequest

// string marketID = 1 [json_name = "marketID", (.validator.field) = {
inline void MarketDepthSubscribeRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& MarketDepthSubscribeRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.MarketDepthSubscribeRequest.marketID)
  return _internal_marketid();
}
inline void MarketDepthSubscribeRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.MarketDepthSubscribeRequest.marketID)
}
inline std::string* MarketDepthSubscribeRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.MarketDepthSubscribeRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& MarketDepthSubscribeRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void MarketDepthSubscribeRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketDepthSubscribeRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.MarketDepthSubscribeRequest.marketID)
}
inline void MarketDepthSubscribeRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.MarketDepthSubscribeRequest.marketID)
}
inline void MarketDepthSubscribeRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.MarketDepthSubscribeRequest.marketID)
}
inline std::string* MarketDepthSubscribeRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketDepthSubscribeRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.MarketDepthSubscribeRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDepthSubscribeRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.MarketDepthSubscribeRequest.marketID)
}

// -------------------------------------------------------------------

// MarketDepthUpdatesSubscribeRequest

// string marketID = 1 [json_name = "marketID", (.validator.field) = {
inline void MarketDepthUpdatesSubscribeRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& MarketDepthUpdatesSubscribeRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.MarketDepthUpdatesSubscribeRequest.marketID)
  return _internal_marketid();
}
inline void MarketDepthUpdatesSubscribeRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.MarketDepthUpdatesSubscribeRequest.marketID)
}
inline std::string* MarketDepthUpdatesSubscribeRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.MarketDepthUpdatesSubscribeRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& MarketDepthUpdatesSubscribeRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void MarketDepthUpdatesSubscribeRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketDepthUpdatesSubscribeRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.MarketDepthUpdatesSubscribeRequest.marketID)
}
inline void MarketDepthUpdatesSubscribeRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.MarketDepthUpdatesSubscribeRequest.marketID)
}
inline void MarketDepthUpdatesSubscribeRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.MarketDepthUpdatesSubscribeRequest.marketID)
}
inline std::string* MarketDepthUpdatesSubscribeRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketDepthUpdatesSubscribeRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.MarketDepthUpdatesSubscribeRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDepthUpdatesSubscribeRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.MarketDepthUpdatesSubscribeRequest.marketID)
}

// -------------------------------------------------------------------

// PositionsSubscribeRequest

// string partyID = 1 [json_name = "partyID"];
inline void PositionsSubscribeRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& PositionsSubscribeRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.PositionsSubscribeRequest.partyID)
  return _internal_partyid();
}
inline void PositionsSubscribeRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.PositionsSubscribeRequest.partyID)
}
inline std::string* PositionsSubscribeRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.PositionsSubscribeRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& PositionsSubscribeRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void PositionsSubscribeRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionsSubscribeRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PositionsSubscribeRequest.partyID)
}
inline void PositionsSubscribeRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PositionsSubscribeRequest.partyID)
}
inline void PositionsSubscribeRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PositionsSubscribeRequest.partyID)
}
inline std::string* PositionsSubscribeRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionsSubscribeRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.PositionsSubscribeRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionsSubscribeRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PositionsSubscribeRequest.partyID)
}

// string marketID = 2 [json_name = "marketID"];
inline void PositionsSubscribeRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& PositionsSubscribeRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.PositionsSubscribeRequest.marketID)
  return _internal_marketid();
}
inline void PositionsSubscribeRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.PositionsSubscribeRequest.marketID)
}
inline std::string* PositionsSubscribeRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.PositionsSubscribeRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& PositionsSubscribeRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void PositionsSubscribeRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionsSubscribeRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PositionsSubscribeRequest.marketID)
}
inline void PositionsSubscribeRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PositionsSubscribeRequest.marketID)
}
inline void PositionsSubscribeRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PositionsSubscribeRequest.marketID)
}
inline std::string* PositionsSubscribeRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionsSubscribeRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.PositionsSubscribeRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionsSubscribeRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PositionsSubscribeRequest.marketID)
}

// -------------------------------------------------------------------

// OrdersByMarketRequest

// string marketID = 1 [json_name = "marketID", (.validator.field) = {
inline void OrdersByMarketRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& OrdersByMarketRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.OrdersByMarketRequest.marketID)
  return _internal_marketid();
}
inline void OrdersByMarketRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.OrdersByMarketRequest.marketID)
}
inline std::string* OrdersByMarketRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.OrdersByMarketRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& OrdersByMarketRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void OrdersByMarketRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrdersByMarketRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.OrdersByMarketRequest.marketID)
}
inline void OrdersByMarketRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.OrdersByMarketRequest.marketID)
}
inline void OrdersByMarketRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.OrdersByMarketRequest.marketID)
}
inline std::string* OrdersByMarketRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrdersByMarketRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.OrdersByMarketRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrdersByMarketRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.OrdersByMarketRequest.marketID)
}

// .api.Pagination pagination = 2 [json_name = "pagination"];
inline bool OrdersByMarketRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool OrdersByMarketRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void OrdersByMarketRequest::clear_pagination() {
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::api::Pagination& OrdersByMarketRequest::_internal_pagination() const {
  const ::api::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::Pagination&>(
      ::api::_Pagination_default_instance_);
}
inline const ::api::Pagination& OrdersByMarketRequest::pagination() const {
  // @@protoc_insertion_point(field_get:api.OrdersByMarketRequest.pagination)
  return _internal_pagination();
}
inline void OrdersByMarketRequest::unsafe_arena_set_allocated_pagination(
    ::api::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.OrdersByMarketRequest.pagination)
}
inline ::api::Pagination* OrdersByMarketRequest::release_pagination() {

  ::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::Pagination* OrdersByMarketRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:api.OrdersByMarketRequest.pagination)

  ::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::api::Pagination* OrdersByMarketRequest::_internal_mutable_pagination() {

  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::api::Pagination* OrdersByMarketRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:api.OrdersByMarketRequest.pagination)
  return _internal_mutable_pagination();
}
inline void OrdersByMarketRequest::set_allocated_pagination(::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }

  } else {

  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:api.OrdersByMarketRequest.pagination)
}

// -------------------------------------------------------------------

// OrdersByMarketResponse

// repeated .vega.Order orders = 1 [json_name = "orders"];
inline int OrdersByMarketResponse::_internal_orders_size() const {
  return orders_.size();
}
inline int OrdersByMarketResponse::orders_size() const {
  return _internal_orders_size();
}
inline ::vega::Order* OrdersByMarketResponse::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:api.OrdersByMarketResponse.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
OrdersByMarketResponse::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:api.OrdersByMarketResponse.orders)
  return &orders_;
}
inline const ::vega::Order& OrdersByMarketResponse::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::vega::Order& OrdersByMarketResponse::orders(int index) const {
  // @@protoc_insertion_point(field_get:api.OrdersByMarketResponse.orders)
  return _internal_orders(index);
}
inline ::vega::Order* OrdersByMarketResponse::_internal_add_orders() {
  return orders_.Add();
}
inline ::vega::Order* OrdersByMarketResponse::add_orders() {
  // @@protoc_insertion_point(field_add:api.OrdersByMarketResponse.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
OrdersByMarketResponse::orders() const {
  // @@protoc_insertion_point(field_list:api.OrdersByMarketResponse.orders)
  return orders_;
}

// -------------------------------------------------------------------

// OrdersByPartyRequest

// string partyID = 1 [json_name = "partyID", (.validator.field) = {
inline void OrdersByPartyRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& OrdersByPartyRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.OrdersByPartyRequest.partyID)
  return _internal_partyid();
}
inline void OrdersByPartyRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.OrdersByPartyRequest.partyID)
}
inline std::string* OrdersByPartyRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.OrdersByPartyRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& OrdersByPartyRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void OrdersByPartyRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrdersByPartyRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.OrdersByPartyRequest.partyID)
}
inline void OrdersByPartyRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.OrdersByPartyRequest.partyID)
}
inline void OrdersByPartyRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.OrdersByPartyRequest.partyID)
}
inline std::string* OrdersByPartyRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrdersByPartyRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.OrdersByPartyRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrdersByPartyRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.OrdersByPartyRequest.partyID)
}

// .api.Pagination pagination = 2 [json_name = "pagination"];
inline bool OrdersByPartyRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool OrdersByPartyRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void OrdersByPartyRequest::clear_pagination() {
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::api::Pagination& OrdersByPartyRequest::_internal_pagination() const {
  const ::api::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::Pagination&>(
      ::api::_Pagination_default_instance_);
}
inline const ::api::Pagination& OrdersByPartyRequest::pagination() const {
  // @@protoc_insertion_point(field_get:api.OrdersByPartyRequest.pagination)
  return _internal_pagination();
}
inline void OrdersByPartyRequest::unsafe_arena_set_allocated_pagination(
    ::api::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.OrdersByPartyRequest.pagination)
}
inline ::api::Pagination* OrdersByPartyRequest::release_pagination() {

  ::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::Pagination* OrdersByPartyRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:api.OrdersByPartyRequest.pagination)

  ::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::api::Pagination* OrdersByPartyRequest::_internal_mutable_pagination() {

  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::api::Pagination* OrdersByPartyRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:api.OrdersByPartyRequest.pagination)
  return _internal_mutable_pagination();
}
inline void OrdersByPartyRequest::set_allocated_pagination(::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }

  } else {

  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:api.OrdersByPartyRequest.pagination)
}

// -------------------------------------------------------------------

// OrdersByPartyResponse

// repeated .vega.Order orders = 1 [json_name = "orders"];
inline int OrdersByPartyResponse::_internal_orders_size() const {
  return orders_.size();
}
inline int OrdersByPartyResponse::orders_size() const {
  return _internal_orders_size();
}
inline ::vega::Order* OrdersByPartyResponse::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:api.OrdersByPartyResponse.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
OrdersByPartyResponse::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:api.OrdersByPartyResponse.orders)
  return &orders_;
}
inline const ::vega::Order& OrdersByPartyResponse::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::vega::Order& OrdersByPartyResponse::orders(int index) const {
  // @@protoc_insertion_point(field_get:api.OrdersByPartyResponse.orders)
  return _internal_orders(index);
}
inline ::vega::Order* OrdersByPartyResponse::_internal_add_orders() {
  return orders_.Add();
}
inline ::vega::Order* OrdersByPartyResponse::add_orders() {
  // @@protoc_insertion_point(field_add:api.OrdersByPartyResponse.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
OrdersByPartyResponse::orders() const {
  // @@protoc_insertion_point(field_list:api.OrdersByPartyResponse.orders)
  return orders_;
}

// -------------------------------------------------------------------

// OrderByMarketAndIdRequest

// string marketID = 1 [json_name = "marketID", (.validator.field) = {
inline void OrderByMarketAndIdRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& OrderByMarketAndIdRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.OrderByMarketAndIdRequest.marketID)
  return _internal_marketid();
}
inline void OrderByMarketAndIdRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.OrderByMarketAndIdRequest.marketID)
}
inline std::string* OrderByMarketAndIdRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.OrderByMarketAndIdRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& OrderByMarketAndIdRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void OrderByMarketAndIdRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderByMarketAndIdRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.OrderByMarketAndIdRequest.marketID)
}
inline void OrderByMarketAndIdRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.OrderByMarketAndIdRequest.marketID)
}
inline void OrderByMarketAndIdRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.OrderByMarketAndIdRequest.marketID)
}
inline std::string* OrderByMarketAndIdRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderByMarketAndIdRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.OrderByMarketAndIdRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderByMarketAndIdRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.OrderByMarketAndIdRequest.marketID)
}

// string orderID = 2 [json_name = "orderID", (.validator.field) = {
inline void OrderByMarketAndIdRequest::clear_orderid() {
  orderid_.ClearToEmpty();
}
inline const std::string& OrderByMarketAndIdRequest::orderid() const {
  // @@protoc_insertion_point(field_get:api.OrderByMarketAndIdRequest.orderID)
  return _internal_orderid();
}
inline void OrderByMarketAndIdRequest::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:api.OrderByMarketAndIdRequest.orderID)
}
inline std::string* OrderByMarketAndIdRequest::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:api.OrderByMarketAndIdRequest.orderID)
  return _internal_mutable_orderid();
}
inline const std::string& OrderByMarketAndIdRequest::_internal_orderid() const {
  return orderid_.Get();
}
inline void OrderByMarketAndIdRequest::_internal_set_orderid(const std::string& value) {

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderByMarketAndIdRequest::set_orderid(std::string&& value) {

  orderid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.OrderByMarketAndIdRequest.orderID)
}
inline void OrderByMarketAndIdRequest::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.OrderByMarketAndIdRequest.orderID)
}
inline void OrderByMarketAndIdRequest::set_orderid(const char* value,
    size_t size) {

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.OrderByMarketAndIdRequest.orderID)
}
inline std::string* OrderByMarketAndIdRequest::_internal_mutable_orderid() {

  return orderid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderByMarketAndIdRequest::release_orderid() {
  // @@protoc_insertion_point(field_release:api.OrderByMarketAndIdRequest.orderID)
  return orderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderByMarketAndIdRequest::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {

  } else {

  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.OrderByMarketAndIdRequest.orderID)
}

// -------------------------------------------------------------------

// OrderByMarketAndIdResponse

// .vega.Order order = 1 [json_name = "order"];
inline bool OrderByMarketAndIdResponse::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool OrderByMarketAndIdResponse::has_order() const {
  return _internal_has_order();
}
inline const ::vega::Order& OrderByMarketAndIdResponse::_internal_order() const {
  const ::vega::Order* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Order&>(
      ::vega::_Order_default_instance_);
}
inline const ::vega::Order& OrderByMarketAndIdResponse::order() const {
  // @@protoc_insertion_point(field_get:api.OrderByMarketAndIdResponse.order)
  return _internal_order();
}
inline void OrderByMarketAndIdResponse::unsafe_arena_set_allocated_order(
    ::vega::Order* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.OrderByMarketAndIdResponse.order)
}
inline ::vega::Order* OrderByMarketAndIdResponse::release_order() {

  ::vega::Order* temp = order_;
  order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Order* OrderByMarketAndIdResponse::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:api.OrderByMarketAndIdResponse.order)

  ::vega::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::vega::Order* OrderByMarketAndIdResponse::_internal_mutable_order() {

  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Order>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::vega::Order* OrderByMarketAndIdResponse::mutable_order() {
  // @@protoc_insertion_point(field_mutable:api.OrderByMarketAndIdResponse.order)
  return _internal_mutable_order();
}
inline void OrderByMarketAndIdResponse::set_allocated_order(::vega::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order)->GetArena();
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }

  } else {

  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:api.OrderByMarketAndIdResponse.order)
}

// -------------------------------------------------------------------

// OrderByReferenceRequest

// string reference = 1 [json_name = "reference", (.validator.field) = {
inline void OrderByReferenceRequest::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& OrderByReferenceRequest::reference() const {
  // @@protoc_insertion_point(field_get:api.OrderByReferenceRequest.reference)
  return _internal_reference();
}
inline void OrderByReferenceRequest::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:api.OrderByReferenceRequest.reference)
}
inline std::string* OrderByReferenceRequest::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:api.OrderByReferenceRequest.reference)
  return _internal_mutable_reference();
}
inline const std::string& OrderByReferenceRequest::_internal_reference() const {
  return reference_.Get();
}
inline void OrderByReferenceRequest::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderByReferenceRequest::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.OrderByReferenceRequest.reference)
}
inline void OrderByReferenceRequest::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.OrderByReferenceRequest.reference)
}
inline void OrderByReferenceRequest::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.OrderByReferenceRequest.reference)
}
inline std::string* OrderByReferenceRequest::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderByReferenceRequest::release_reference() {
  // @@protoc_insertion_point(field_release:api.OrderByReferenceRequest.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderByReferenceRequest::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.OrderByReferenceRequest.reference)
}

// -------------------------------------------------------------------

// OrderByReferenceResponse

// .vega.Order order = 1 [json_name = "order"];
inline bool OrderByReferenceResponse::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool OrderByReferenceResponse::has_order() const {
  return _internal_has_order();
}
inline const ::vega::Order& OrderByReferenceResponse::_internal_order() const {
  const ::vega::Order* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Order&>(
      ::vega::_Order_default_instance_);
}
inline const ::vega::Order& OrderByReferenceResponse::order() const {
  // @@protoc_insertion_point(field_get:api.OrderByReferenceResponse.order)
  return _internal_order();
}
inline void OrderByReferenceResponse::unsafe_arena_set_allocated_order(
    ::vega::Order* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.OrderByReferenceResponse.order)
}
inline ::vega::Order* OrderByReferenceResponse::release_order() {

  ::vega::Order* temp = order_;
  order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Order* OrderByReferenceResponse::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:api.OrderByReferenceResponse.order)

  ::vega::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::vega::Order* OrderByReferenceResponse::_internal_mutable_order() {

  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Order>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::vega::Order* OrderByReferenceResponse::mutable_order() {
  // @@protoc_insertion_point(field_mutable:api.OrderByReferenceResponse.order)
  return _internal_mutable_order();
}
inline void OrderByReferenceResponse::set_allocated_order(::vega::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order)->GetArena();
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }

  } else {

  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:api.OrderByReferenceResponse.order)
}

// -------------------------------------------------------------------

// MarketsResponse

// repeated .vega.Market markets = 1 [json_name = "markets"];
inline int MarketsResponse::_internal_markets_size() const {
  return markets_.size();
}
inline int MarketsResponse::markets_size() const {
  return _internal_markets_size();
}
inline ::vega::Market* MarketsResponse::mutable_markets(int index) {
  // @@protoc_insertion_point(field_mutable:api.MarketsResponse.markets)
  return markets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Market >*
MarketsResponse::mutable_markets() {
  // @@protoc_insertion_point(field_mutable_list:api.MarketsResponse.markets)
  return &markets_;
}
inline const ::vega::Market& MarketsResponse::_internal_markets(int index) const {
  return markets_.Get(index);
}
inline const ::vega::Market& MarketsResponse::markets(int index) const {
  // @@protoc_insertion_point(field_get:api.MarketsResponse.markets)
  return _internal_markets(index);
}
inline ::vega::Market* MarketsResponse::_internal_add_markets() {
  return markets_.Add();
}
inline ::vega::Market* MarketsResponse::add_markets() {
  // @@protoc_insertion_point(field_add:api.MarketsResponse.markets)
  return _internal_add_markets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Market >&
MarketsResponse::markets() const {
  // @@protoc_insertion_point(field_list:api.MarketsResponse.markets)
  return markets_;
}

// -------------------------------------------------------------------

// CandlesRequest

// string marketID = 1 [json_name = "marketID", (.validator.field) = {
inline void CandlesRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& CandlesRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.CandlesRequest.marketID)
  return _internal_marketid();
}
inline void CandlesRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.CandlesRequest.marketID)
}
inline std::string* CandlesRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.CandlesRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& CandlesRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void CandlesRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CandlesRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.CandlesRequest.marketID)
}
inline void CandlesRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.CandlesRequest.marketID)
}
inline void CandlesRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.CandlesRequest.marketID)
}
inline std::string* CandlesRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CandlesRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.CandlesRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CandlesRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.CandlesRequest.marketID)
}

// int64 sinceTimestamp = 2 [json_name = "sinceTimestamp", (.validator.field) = {
inline void CandlesRequest::clear_sincetimestamp() {
  sincetimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CandlesRequest::_internal_sincetimestamp() const {
  return sincetimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CandlesRequest::sincetimestamp() const {
  // @@protoc_insertion_point(field_get:api.CandlesRequest.sinceTimestamp)
  return _internal_sincetimestamp();
}
inline void CandlesRequest::_internal_set_sincetimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  sincetimestamp_ = value;
}
inline void CandlesRequest::set_sincetimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sincetimestamp(value);
  // @@protoc_insertion_point(field_set:api.CandlesRequest.sinceTimestamp)
}

// .vega.Interval interval = 3 [json_name = "interval"];
inline void CandlesRequest::clear_interval() {
  interval_ = 0;
}
inline ::vega::Interval CandlesRequest::_internal_interval() const {
  return static_cast< ::vega::Interval >(interval_);
}
inline ::vega::Interval CandlesRequest::interval() const {
  // @@protoc_insertion_point(field_get:api.CandlesRequest.interval)
  return _internal_interval();
}
inline void CandlesRequest::_internal_set_interval(::vega::Interval value) {

  interval_ = value;
}
inline void CandlesRequest::set_interval(::vega::Interval value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:api.CandlesRequest.interval)
}

// -------------------------------------------------------------------

// CandlesResponse

// repeated .vega.Candle candles = 1 [json_name = "candles"];
inline int CandlesResponse::_internal_candles_size() const {
  return candles_.size();
}
inline int CandlesResponse::candles_size() const {
  return _internal_candles_size();
}
inline ::vega::Candle* CandlesResponse::mutable_candles(int index) {
  // @@protoc_insertion_point(field_mutable:api.CandlesResponse.candles)
  return candles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Candle >*
CandlesResponse::mutable_candles() {
  // @@protoc_insertion_point(field_mutable_list:api.CandlesResponse.candles)
  return &candles_;
}
inline const ::vega::Candle& CandlesResponse::_internal_candles(int index) const {
  return candles_.Get(index);
}
inline const ::vega::Candle& CandlesResponse::candles(int index) const {
  // @@protoc_insertion_point(field_get:api.CandlesResponse.candles)
  return _internal_candles(index);
}
inline ::vega::Candle* CandlesResponse::_internal_add_candles() {
  return candles_.Add();
}
inline ::vega::Candle* CandlesResponse::add_candles() {
  // @@protoc_insertion_point(field_add:api.CandlesResponse.candles)
  return _internal_add_candles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Candle >&
CandlesResponse::candles() const {
  // @@protoc_insertion_point(field_list:api.CandlesResponse.candles)
  return candles_;
}

// -------------------------------------------------------------------

// MarketDepthRequest

// string marketID = 1 [json_name = "marketID", (.validator.field) = {
inline void MarketDepthRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& MarketDepthRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.MarketDepthRequest.marketID)
  return _internal_marketid();
}
inline void MarketDepthRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.MarketDepthRequest.marketID)
}
inline std::string* MarketDepthRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.MarketDepthRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& MarketDepthRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void MarketDepthRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketDepthRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.MarketDepthRequest.marketID)
}
inline void MarketDepthRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.MarketDepthRequest.marketID)
}
inline void MarketDepthRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.MarketDepthRequest.marketID)
}
inline std::string* MarketDepthRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketDepthRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.MarketDepthRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDepthRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.MarketDepthRequest.marketID)
}

// uint64 maxDepth = 2 [json_name = "maxDepth"];
inline void MarketDepthRequest::clear_maxdepth() {
  maxdepth_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepthRequest::_internal_maxdepth() const {
  return maxdepth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepthRequest::maxdepth() const {
  // @@protoc_insertion_point(field_get:api.MarketDepthRequest.maxDepth)
  return _internal_maxdepth();
}
inline void MarketDepthRequest::_internal_set_maxdepth(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  maxdepth_ = value;
}
inline void MarketDepthRequest::set_maxdepth(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maxdepth(value);
  // @@protoc_insertion_point(field_set:api.MarketDepthRequest.maxDepth)
}

// -------------------------------------------------------------------

// MarketDepthResponse

// string marketID = 1 [json_name = "marketID"];
inline void MarketDepthResponse::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& MarketDepthResponse::marketid() const {
  // @@protoc_insertion_point(field_get:api.MarketDepthResponse.marketID)
  return _internal_marketid();
}
inline void MarketDepthResponse::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.MarketDepthResponse.marketID)
}
inline std::string* MarketDepthResponse::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.MarketDepthResponse.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& MarketDepthResponse::_internal_marketid() const {
  return marketid_.Get();
}
inline void MarketDepthResponse::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketDepthResponse::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.MarketDepthResponse.marketID)
}
inline void MarketDepthResponse::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.MarketDepthResponse.marketID)
}
inline void MarketDepthResponse::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.MarketDepthResponse.marketID)
}
inline std::string* MarketDepthResponse::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketDepthResponse::release_marketid() {
  // @@protoc_insertion_point(field_release:api.MarketDepthResponse.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDepthResponse::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.MarketDepthResponse.marketID)
}

// repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
inline int MarketDepthResponse::_internal_buy_size() const {
  return buy_.size();
}
inline int MarketDepthResponse::buy_size() const {
  return _internal_buy_size();
}
inline ::vega::PriceLevel* MarketDepthResponse::mutable_buy(int index) {
  // @@protoc_insertion_point(field_mutable:api.MarketDepthResponse.buy)
  return buy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepthResponse::mutable_buy() {
  // @@protoc_insertion_point(field_mutable_list:api.MarketDepthResponse.buy)
  return &buy_;
}
inline const ::vega::PriceLevel& MarketDepthResponse::_internal_buy(int index) const {
  return buy_.Get(index);
}
inline const ::vega::PriceLevel& MarketDepthResponse::buy(int index) const {
  // @@protoc_insertion_point(field_get:api.MarketDepthResponse.buy)
  return _internal_buy(index);
}
inline ::vega::PriceLevel* MarketDepthResponse::_internal_add_buy() {
  return buy_.Add();
}
inline ::vega::PriceLevel* MarketDepthResponse::add_buy() {
  // @@protoc_insertion_point(field_add:api.MarketDepthResponse.buy)
  return _internal_add_buy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepthResponse::buy() const {
  // @@protoc_insertion_point(field_list:api.MarketDepthResponse.buy)
  return buy_;
}

// repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
inline int MarketDepthResponse::_internal_sell_size() const {
  return sell_.size();
}
inline int MarketDepthResponse::sell_size() const {
  return _internal_sell_size();
}
inline ::vega::PriceLevel* MarketDepthResponse::mutable_sell(int index) {
  // @@protoc_insertion_point(field_mutable:api.MarketDepthResponse.sell)
  return sell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepthResponse::mutable_sell() {
  // @@protoc_insertion_point(field_mutable_list:api.MarketDepthResponse.sell)
  return &sell_;
}
inline const ::vega::PriceLevel& MarketDepthResponse::_internal_sell(int index) const {
  return sell_.Get(index);
}
inline const ::vega::PriceLevel& MarketDepthResponse::sell(int index) const {
  // @@protoc_insertion_point(field_get:api.MarketDepthResponse.sell)
  return _internal_sell(index);
}
inline ::vega::PriceLevel* MarketDepthResponse::_internal_add_sell() {
  return sell_.Add();
}
inline ::vega::PriceLevel* MarketDepthResponse::add_sell() {
  // @@protoc_insertion_point(field_add:api.MarketDepthResponse.sell)
  return _internal_add_sell();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepthResponse::sell() const {
  // @@protoc_insertion_point(field_list:api.MarketDepthResponse.sell)
  return sell_;
}

// .vega.Trade lastTrade = 4 [json_name = "lastTrade"];
inline bool MarketDepthResponse::_internal_has_lasttrade() const {
  return this != internal_default_instance() && lasttrade_ != nullptr;
}
inline bool MarketDepthResponse::has_lasttrade() const {
  return _internal_has_lasttrade();
}
inline const ::vega::Trade& MarketDepthResponse::_internal_lasttrade() const {
  const ::vega::Trade* p = lasttrade_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Trade&>(
      ::vega::_Trade_default_instance_);
}
inline const ::vega::Trade& MarketDepthResponse::lasttrade() const {
  // @@protoc_insertion_point(field_get:api.MarketDepthResponse.lastTrade)
  return _internal_lasttrade();
}
inline void MarketDepthResponse::unsafe_arena_set_allocated_lasttrade(
    ::vega::Trade* lasttrade) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lasttrade_);
  }
  lasttrade_ = lasttrade;
  if (lasttrade) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.MarketDepthResponse.lastTrade)
}
inline ::vega::Trade* MarketDepthResponse::release_lasttrade() {

  ::vega::Trade* temp = lasttrade_;
  lasttrade_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Trade* MarketDepthResponse::unsafe_arena_release_lasttrade() {
  // @@protoc_insertion_point(field_release:api.MarketDepthResponse.lastTrade)

  ::vega::Trade* temp = lasttrade_;
  lasttrade_ = nullptr;
  return temp;
}
inline ::vega::Trade* MarketDepthResponse::_internal_mutable_lasttrade() {

  if (lasttrade_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Trade>(GetArena());
    lasttrade_ = p;
  }
  return lasttrade_;
}
inline ::vega::Trade* MarketDepthResponse::mutable_lasttrade() {
  // @@protoc_insertion_point(field_mutable:api.MarketDepthResponse.lastTrade)
  return _internal_mutable_lasttrade();
}
inline void MarketDepthResponse::set_allocated_lasttrade(::vega::Trade* lasttrade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lasttrade_);
  }
  if (lasttrade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lasttrade)->GetArena();
    if (message_arena != submessage_arena) {
      lasttrade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lasttrade, submessage_arena);
    }

  } else {

  }
  lasttrade_ = lasttrade;
  // @@protoc_insertion_point(field_set_allocated:api.MarketDepthResponse.lastTrade)
}

// uint64 sequenceNumber = 5 [json_name = "sequenceNumber"];
inline void MarketDepthResponse::clear_sequencenumber() {
  sequencenumber_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepthResponse::_internal_sequencenumber() const {
  return sequencenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepthResponse::sequencenumber() const {
  // @@protoc_insertion_point(field_get:api.MarketDepthResponse.sequenceNumber)
  return _internal_sequencenumber();
}
inline void MarketDepthResponse::_internal_set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  sequencenumber_ = value;
}
inline void MarketDepthResponse::set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequencenumber(value);
  // @@protoc_insertion_point(field_set:api.MarketDepthResponse.sequenceNumber)
}

// -------------------------------------------------------------------

// TradesByMarketRequest

// string marketID = 1 [json_name = "marketID", (.validator.field) = {
inline void TradesByMarketRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& TradesByMarketRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.TradesByMarketRequest.marketID)
  return _internal_marketid();
}
inline void TradesByMarketRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.TradesByMarketRequest.marketID)
}
inline std::string* TradesByMarketRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.TradesByMarketRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& TradesByMarketRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void TradesByMarketRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TradesByMarketRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.TradesByMarketRequest.marketID)
}
inline void TradesByMarketRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.TradesByMarketRequest.marketID)
}
inline void TradesByMarketRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.TradesByMarketRequest.marketID)
}
inline std::string* TradesByMarketRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TradesByMarketRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.TradesByMarketRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TradesByMarketRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.TradesByMarketRequest.marketID)
}

// .api.Pagination pagination = 2 [json_name = "pagination"];
inline bool TradesByMarketRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool TradesByMarketRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void TradesByMarketRequest::clear_pagination() {
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::api::Pagination& TradesByMarketRequest::_internal_pagination() const {
  const ::api::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::Pagination&>(
      ::api::_Pagination_default_instance_);
}
inline const ::api::Pagination& TradesByMarketRequest::pagination() const {
  // @@protoc_insertion_point(field_get:api.TradesByMarketRequest.pagination)
  return _internal_pagination();
}
inline void TradesByMarketRequest::unsafe_arena_set_allocated_pagination(
    ::api::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.TradesByMarketRequest.pagination)
}
inline ::api::Pagination* TradesByMarketRequest::release_pagination() {

  ::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::Pagination* TradesByMarketRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:api.TradesByMarketRequest.pagination)

  ::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::api::Pagination* TradesByMarketRequest::_internal_mutable_pagination() {

  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::api::Pagination* TradesByMarketRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:api.TradesByMarketRequest.pagination)
  return _internal_mutable_pagination();
}
inline void TradesByMarketRequest::set_allocated_pagination(::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }

  } else {

  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:api.TradesByMarketRequest.pagination)
}

// -------------------------------------------------------------------

// TradesByMarketResponse

// repeated .vega.Trade trades = 1 [json_name = "trades"];
inline int TradesByMarketResponse::_internal_trades_size() const {
  return trades_.size();
}
inline int TradesByMarketResponse::trades_size() const {
  return _internal_trades_size();
}
inline ::vega::Trade* TradesByMarketResponse::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:api.TradesByMarketResponse.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
TradesByMarketResponse::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:api.TradesByMarketResponse.trades)
  return &trades_;
}
inline const ::vega::Trade& TradesByMarketResponse::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::vega::Trade& TradesByMarketResponse::trades(int index) const {
  // @@protoc_insertion_point(field_get:api.TradesByMarketResponse.trades)
  return _internal_trades(index);
}
inline ::vega::Trade* TradesByMarketResponse::_internal_add_trades() {
  return trades_.Add();
}
inline ::vega::Trade* TradesByMarketResponse::add_trades() {
  // @@protoc_insertion_point(field_add:api.TradesByMarketResponse.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
TradesByMarketResponse::trades() const {
  // @@protoc_insertion_point(field_list:api.TradesByMarketResponse.trades)
  return trades_;
}

// -------------------------------------------------------------------

// PositionsByPartyRequest

// string partyID = 1 [json_name = "partyID", (.validator.field) = {
inline void PositionsByPartyRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& PositionsByPartyRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.PositionsByPartyRequest.partyID)
  return _internal_partyid();
}
inline void PositionsByPartyRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.PositionsByPartyRequest.partyID)
}
inline std::string* PositionsByPartyRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.PositionsByPartyRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& PositionsByPartyRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void PositionsByPartyRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionsByPartyRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PositionsByPartyRequest.partyID)
}
inline void PositionsByPartyRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PositionsByPartyRequest.partyID)
}
inline void PositionsByPartyRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PositionsByPartyRequest.partyID)
}
inline std::string* PositionsByPartyRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionsByPartyRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.PositionsByPartyRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionsByPartyRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PositionsByPartyRequest.partyID)
}

// string marketID = 2 [json_name = "marketID"];
inline void PositionsByPartyRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& PositionsByPartyRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.PositionsByPartyRequest.marketID)
  return _internal_marketid();
}
inline void PositionsByPartyRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.PositionsByPartyRequest.marketID)
}
inline std::string* PositionsByPartyRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.PositionsByPartyRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& PositionsByPartyRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void PositionsByPartyRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionsByPartyRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PositionsByPartyRequest.marketID)
}
inline void PositionsByPartyRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PositionsByPartyRequest.marketID)
}
inline void PositionsByPartyRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PositionsByPartyRequest.marketID)
}
inline std::string* PositionsByPartyRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionsByPartyRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.PositionsByPartyRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionsByPartyRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PositionsByPartyRequest.marketID)
}

// -------------------------------------------------------------------

// PositionsByPartyResponse

// repeated .vega.Position positions = 1 [json_name = "positions"];
inline int PositionsByPartyResponse::_internal_positions_size() const {
  return positions_.size();
}
inline int PositionsByPartyResponse::positions_size() const {
  return _internal_positions_size();
}
inline ::vega::Position* PositionsByPartyResponse::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:api.PositionsByPartyResponse.positions)
  return positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Position >*
PositionsByPartyResponse::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:api.PositionsByPartyResponse.positions)
  return &positions_;
}
inline const ::vega::Position& PositionsByPartyResponse::_internal_positions(int index) const {
  return positions_.Get(index);
}
inline const ::vega::Position& PositionsByPartyResponse::positions(int index) const {
  // @@protoc_insertion_point(field_get:api.PositionsByPartyResponse.positions)
  return _internal_positions(index);
}
inline ::vega::Position* PositionsByPartyResponse::_internal_add_positions() {
  return positions_.Add();
}
inline ::vega::Position* PositionsByPartyResponse::add_positions() {
  // @@protoc_insertion_point(field_add:api.PositionsByPartyResponse.positions)
  return _internal_add_positions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Position >&
PositionsByPartyResponse::positions() const {
  // @@protoc_insertion_point(field_list:api.PositionsByPartyResponse.positions)
  return positions_;
}

// -------------------------------------------------------------------

// VegaTimeResponse

// int64 timestamp = 1 [json_name = "timestamp"];
inline void VegaTimeResponse::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VegaTimeResponse::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VegaTimeResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:api.VegaTimeResponse.timestamp)
  return _internal_timestamp();
}
inline void VegaTimeResponse::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void VegaTimeResponse::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:api.VegaTimeResponse.timestamp)
}

// -------------------------------------------------------------------

// Pagination

// uint64 skip = 1 [json_name = "skip"];
inline void Pagination::clear_skip() {
  skip_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pagination::_internal_skip() const {
  return skip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pagination::skip() const {
  // @@protoc_insertion_point(field_get:api.Pagination.skip)
  return _internal_skip();
}
inline void Pagination::_internal_set_skip(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  skip_ = value;
}
inline void Pagination::set_skip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_skip(value);
  // @@protoc_insertion_point(field_set:api.Pagination.skip)
}

// uint64 limit = 2 [json_name = "limit"];
inline void Pagination::clear_limit() {
  limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pagination::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pagination::limit() const {
  // @@protoc_insertion_point(field_get:api.Pagination.limit)
  return _internal_limit();
}
inline void Pagination::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  limit_ = value;
}
inline void Pagination::set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:api.Pagination.limit)
}

// bool descending = 3 [json_name = "descending"];
inline void Pagination::clear_descending() {
  descending_ = false;
}
inline bool Pagination::_internal_descending() const {
  return descending_;
}
inline bool Pagination::descending() const {
  // @@protoc_insertion_point(field_get:api.Pagination.descending)
  return _internal_descending();
}
inline void Pagination::_internal_set_descending(bool value) {

  descending_ = value;
}
inline void Pagination::set_descending(bool value) {
  _internal_set_descending(value);
  // @@protoc_insertion_point(field_set:api.Pagination.descending)
}

// -------------------------------------------------------------------

// OrdersStream

// repeated .vega.Order orders = 1 [json_name = "orders"];
inline int OrdersStream::_internal_orders_size() const {
  return orders_.size();
}
inline int OrdersStream::orders_size() const {
  return _internal_orders_size();
}
inline ::vega::Order* OrdersStream::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:api.OrdersStream.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
OrdersStream::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:api.OrdersStream.orders)
  return &orders_;
}
inline const ::vega::Order& OrdersStream::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::vega::Order& OrdersStream::orders(int index) const {
  // @@protoc_insertion_point(field_get:api.OrdersStream.orders)
  return _internal_orders(index);
}
inline ::vega::Order* OrdersStream::_internal_add_orders() {
  return orders_.Add();
}
inline ::vega::Order* OrdersStream::add_orders() {
  // @@protoc_insertion_point(field_add:api.OrdersStream.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
OrdersStream::orders() const {
  // @@protoc_insertion_point(field_list:api.OrdersStream.orders)
  return orders_;
}

// -------------------------------------------------------------------

// TradesStream

// repeated .vega.Trade trades = 1 [json_name = "trades"];
inline int TradesStream::_internal_trades_size() const {
  return trades_.size();
}
inline int TradesStream::trades_size() const {
  return _internal_trades_size();
}
inline ::vega::Trade* TradesStream::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:api.TradesStream.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
TradesStream::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:api.TradesStream.trades)
  return &trades_;
}
inline const ::vega::Trade& TradesStream::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::vega::Trade& TradesStream::trades(int index) const {
  // @@protoc_insertion_point(field_get:api.TradesStream.trades)
  return _internal_trades(index);
}
inline ::vega::Trade* TradesStream::_internal_add_trades() {
  return trades_.Add();
}
inline ::vega::Trade* TradesStream::add_trades() {
  // @@protoc_insertion_point(field_add:api.TradesStream.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
TradesStream::trades() const {
  // @@protoc_insertion_point(field_list:api.TradesStream.trades)
  return trades_;
}

// -------------------------------------------------------------------

// PartyAccountsRequest

// string partyID = 1 [json_name = "partyID"];
inline void PartyAccountsRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& PartyAccountsRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.PartyAccountsRequest.partyID)
  return _internal_partyid();
}
inline void PartyAccountsRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.PartyAccountsRequest.partyID)
}
inline std::string* PartyAccountsRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.PartyAccountsRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& PartyAccountsRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void PartyAccountsRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartyAccountsRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PartyAccountsRequest.partyID)
}
inline void PartyAccountsRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PartyAccountsRequest.partyID)
}
inline void PartyAccountsRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PartyAccountsRequest.partyID)
}
inline std::string* PartyAccountsRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartyAccountsRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.PartyAccountsRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyAccountsRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PartyAccountsRequest.partyID)
}

// string marketID = 2 [json_name = "marketID"];
inline void PartyAccountsRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& PartyAccountsRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.PartyAccountsRequest.marketID)
  return _internal_marketid();
}
inline void PartyAccountsRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.PartyAccountsRequest.marketID)
}
inline std::string* PartyAccountsRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.PartyAccountsRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& PartyAccountsRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void PartyAccountsRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartyAccountsRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PartyAccountsRequest.marketID)
}
inline void PartyAccountsRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PartyAccountsRequest.marketID)
}
inline void PartyAccountsRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PartyAccountsRequest.marketID)
}
inline std::string* PartyAccountsRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartyAccountsRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.PartyAccountsRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyAccountsRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PartyAccountsRequest.marketID)
}

// .vega.AccountType type = 3 [json_name = "type"];
inline void PartyAccountsRequest::clear_type() {
  type_ = 0;
}
inline ::vega::AccountType PartyAccountsRequest::_internal_type() const {
  return static_cast< ::vega::AccountType >(type_);
}
inline ::vega::AccountType PartyAccountsRequest::type() const {
  // @@protoc_insertion_point(field_get:api.PartyAccountsRequest.type)
  return _internal_type();
}
inline void PartyAccountsRequest::_internal_set_type(::vega::AccountType value) {

  type_ = value;
}
inline void PartyAccountsRequest::set_type(::vega::AccountType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:api.PartyAccountsRequest.type)
}

// string asset = 4 [json_name = "asset"];
inline void PartyAccountsRequest::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& PartyAccountsRequest::asset() const {
  // @@protoc_insertion_point(field_get:api.PartyAccountsRequest.asset)
  return _internal_asset();
}
inline void PartyAccountsRequest::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:api.PartyAccountsRequest.asset)
}
inline std::string* PartyAccountsRequest::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:api.PartyAccountsRequest.asset)
  return _internal_mutable_asset();
}
inline const std::string& PartyAccountsRequest::_internal_asset() const {
  return asset_.Get();
}
inline void PartyAccountsRequest::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PartyAccountsRequest::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PartyAccountsRequest.asset)
}
inline void PartyAccountsRequest::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PartyAccountsRequest.asset)
}
inline void PartyAccountsRequest::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PartyAccountsRequest.asset)
}
inline std::string* PartyAccountsRequest::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PartyAccountsRequest::release_asset() {
  // @@protoc_insertion_point(field_release:api.PartyAccountsRequest.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyAccountsRequest::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PartyAccountsRequest.asset)
}

// -------------------------------------------------------------------

// PartyAccountsResponse

// repeated .vega.Account accounts = 1 [json_name = "accounts"];
inline int PartyAccountsResponse::_internal_accounts_size() const {
  return accounts_.size();
}
inline int PartyAccountsResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline ::vega::Account* PartyAccountsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:api.PartyAccountsResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
PartyAccountsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:api.PartyAccountsResponse.accounts)
  return &accounts_;
}
inline const ::vega::Account& PartyAccountsResponse::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::vega::Account& PartyAccountsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:api.PartyAccountsResponse.accounts)
  return _internal_accounts(index);
}
inline ::vega::Account* PartyAccountsResponse::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::vega::Account* PartyAccountsResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:api.PartyAccountsResponse.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
PartyAccountsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:api.PartyAccountsResponse.accounts)
  return accounts_;
}

// -------------------------------------------------------------------

// MarketAccountsRequest

// string marketID = 1 [json_name = "marketID"];
inline void MarketAccountsRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& MarketAccountsRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.MarketAccountsRequest.marketID)
  return _internal_marketid();
}
inline void MarketAccountsRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.MarketAccountsRequest.marketID)
}
inline std::string* MarketAccountsRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.MarketAccountsRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& MarketAccountsRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void MarketAccountsRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketAccountsRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.MarketAccountsRequest.marketID)
}
inline void MarketAccountsRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.MarketAccountsRequest.marketID)
}
inline void MarketAccountsRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.MarketAccountsRequest.marketID)
}
inline std::string* MarketAccountsRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketAccountsRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.MarketAccountsRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketAccountsRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.MarketAccountsRequest.marketID)
}

// string asset = 2 [json_name = "asset"];
inline void MarketAccountsRequest::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& MarketAccountsRequest::asset() const {
  // @@protoc_insertion_point(field_get:api.MarketAccountsRequest.asset)
  return _internal_asset();
}
inline void MarketAccountsRequest::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:api.MarketAccountsRequest.asset)
}
inline std::string* MarketAccountsRequest::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:api.MarketAccountsRequest.asset)
  return _internal_mutable_asset();
}
inline const std::string& MarketAccountsRequest::_internal_asset() const {
  return asset_.Get();
}
inline void MarketAccountsRequest::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketAccountsRequest::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.MarketAccountsRequest.asset)
}
inline void MarketAccountsRequest::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.MarketAccountsRequest.asset)
}
inline void MarketAccountsRequest::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.MarketAccountsRequest.asset)
}
inline std::string* MarketAccountsRequest::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketAccountsRequest::release_asset() {
  // @@protoc_insertion_point(field_release:api.MarketAccountsRequest.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketAccountsRequest::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.MarketAccountsRequest.asset)
}

// -------------------------------------------------------------------

// MarketAccountsResponse

// repeated .vega.Account accounts = 1 [json_name = "accounts"];
inline int MarketAccountsResponse::_internal_accounts_size() const {
  return accounts_.size();
}
inline int MarketAccountsResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline ::vega::Account* MarketAccountsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:api.MarketAccountsResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
MarketAccountsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:api.MarketAccountsResponse.accounts)
  return &accounts_;
}
inline const ::vega::Account& MarketAccountsResponse::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::vega::Account& MarketAccountsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:api.MarketAccountsResponse.accounts)
  return _internal_accounts(index);
}
inline ::vega::Account* MarketAccountsResponse::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::vega::Account* MarketAccountsResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:api.MarketAccountsResponse.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
MarketAccountsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:api.MarketAccountsResponse.accounts)
  return accounts_;
}

// -------------------------------------------------------------------

// FeeInfrastructureAccountsRequest

// string asset = 1 [json_name = "asset"];
inline void FeeInfrastructureAccountsRequest::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& FeeInfrastructureAccountsRequest::asset() const {
  // @@protoc_insertion_point(field_get:api.FeeInfrastructureAccountsRequest.asset)
  return _internal_asset();
}
inline void FeeInfrastructureAccountsRequest::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:api.FeeInfrastructureAccountsRequest.asset)
}
inline std::string* FeeInfrastructureAccountsRequest::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:api.FeeInfrastructureAccountsRequest.asset)
  return _internal_mutable_asset();
}
inline const std::string& FeeInfrastructureAccountsRequest::_internal_asset() const {
  return asset_.Get();
}
inline void FeeInfrastructureAccountsRequest::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FeeInfrastructureAccountsRequest::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.FeeInfrastructureAccountsRequest.asset)
}
inline void FeeInfrastructureAccountsRequest::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.FeeInfrastructureAccountsRequest.asset)
}
inline void FeeInfrastructureAccountsRequest::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.FeeInfrastructureAccountsRequest.asset)
}
inline std::string* FeeInfrastructureAccountsRequest::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FeeInfrastructureAccountsRequest::release_asset() {
  // @@protoc_insertion_point(field_release:api.FeeInfrastructureAccountsRequest.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FeeInfrastructureAccountsRequest::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.FeeInfrastructureAccountsRequest.asset)
}

// -------------------------------------------------------------------

// FeeInfrastructureAccountsResponse

// repeated .vega.Account accounts = 1 [json_name = "accounts"];
inline int FeeInfrastructureAccountsResponse::_internal_accounts_size() const {
  return accounts_.size();
}
inline int FeeInfrastructureAccountsResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline ::vega::Account* FeeInfrastructureAccountsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:api.FeeInfrastructureAccountsResponse.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
FeeInfrastructureAccountsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:api.FeeInfrastructureAccountsResponse.accounts)
  return &accounts_;
}
inline const ::vega::Account& FeeInfrastructureAccountsResponse::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::vega::Account& FeeInfrastructureAccountsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:api.FeeInfrastructureAccountsResponse.accounts)
  return _internal_accounts(index);
}
inline ::vega::Account* FeeInfrastructureAccountsResponse::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::vega::Account* FeeInfrastructureAccountsResponse::add_accounts() {
  // @@protoc_insertion_point(field_add:api.FeeInfrastructureAccountsResponse.accounts)
  return _internal_add_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
FeeInfrastructureAccountsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:api.FeeInfrastructureAccountsResponse.accounts)
  return accounts_;
}

// -------------------------------------------------------------------

// PrepareProposalRequest

// string partyID = 1 [json_name = "partyID", (.validator.field) = {
inline void PrepareProposalRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& PrepareProposalRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.PrepareProposalRequest.partyID)
  return _internal_partyid();
}
inline void PrepareProposalRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.PrepareProposalRequest.partyID)
}
inline std::string* PrepareProposalRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.PrepareProposalRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& PrepareProposalRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void PrepareProposalRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareProposalRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PrepareProposalRequest.partyID)
}
inline void PrepareProposalRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PrepareProposalRequest.partyID)
}
inline void PrepareProposalRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PrepareProposalRequest.partyID)
}
inline std::string* PrepareProposalRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareProposalRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.PrepareProposalRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareProposalRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PrepareProposalRequest.partyID)
}

// string reference = 2 [json_name = "reference"];
inline void PrepareProposalRequest::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& PrepareProposalRequest::reference() const {
  // @@protoc_insertion_point(field_get:api.PrepareProposalRequest.reference)
  return _internal_reference();
}
inline void PrepareProposalRequest::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:api.PrepareProposalRequest.reference)
}
inline std::string* PrepareProposalRequest::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:api.PrepareProposalRequest.reference)
  return _internal_mutable_reference();
}
inline const std::string& PrepareProposalRequest::_internal_reference() const {
  return reference_.Get();
}
inline void PrepareProposalRequest::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareProposalRequest::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PrepareProposalRequest.reference)
}
inline void PrepareProposalRequest::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PrepareProposalRequest.reference)
}
inline void PrepareProposalRequest::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PrepareProposalRequest.reference)
}
inline std::string* PrepareProposalRequest::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareProposalRequest::release_reference() {
  // @@protoc_insertion_point(field_release:api.PrepareProposalRequest.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareProposalRequest::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PrepareProposalRequest.reference)
}

// .vega.ProposalTerms proposal = 3 [json_name = "proposal", (.validator.field) = {
inline bool PrepareProposalRequest::_internal_has_proposal() const {
  return this != internal_default_instance() && proposal_ != nullptr;
}
inline bool PrepareProposalRequest::has_proposal() const {
  return _internal_has_proposal();
}
inline const ::vega::ProposalTerms& PrepareProposalRequest::_internal_proposal() const {
  const ::vega::ProposalTerms* p = proposal_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::ProposalTerms&>(
      ::vega::_ProposalTerms_default_instance_);
}
inline const ::vega::ProposalTerms& PrepareProposalRequest::proposal() const {
  // @@protoc_insertion_point(field_get:api.PrepareProposalRequest.proposal)
  return _internal_proposal();
}
inline void PrepareProposalRequest::unsafe_arena_set_allocated_proposal(
    ::vega::ProposalTerms* proposal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_);
  }
  proposal_ = proposal;
  if (proposal) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.PrepareProposalRequest.proposal)
}
inline ::vega::ProposalTerms* PrepareProposalRequest::release_proposal() {

  ::vega::ProposalTerms* temp = proposal_;
  proposal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::ProposalTerms* PrepareProposalRequest::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_release:api.PrepareProposalRequest.proposal)

  ::vega::ProposalTerms* temp = proposal_;
  proposal_ = nullptr;
  return temp;
}
inline ::vega::ProposalTerms* PrepareProposalRequest::_internal_mutable_proposal() {

  if (proposal_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::ProposalTerms>(GetArena());
    proposal_ = p;
  }
  return proposal_;
}
inline ::vega::ProposalTerms* PrepareProposalRequest::mutable_proposal() {
  // @@protoc_insertion_point(field_mutable:api.PrepareProposalRequest.proposal)
  return _internal_mutable_proposal();
}
inline void PrepareProposalRequest::set_allocated_proposal(::vega::ProposalTerms* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_);
  }
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal)->GetArena();
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }

  } else {

  }
  proposal_ = proposal;
  // @@protoc_insertion_point(field_set_allocated:api.PrepareProposalRequest.proposal)
}

// -------------------------------------------------------------------

// PrepareProposalResponse

// bytes blob = 1 [json_name = "blob"];
inline void PrepareProposalResponse::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& PrepareProposalResponse::blob() const {
  // @@protoc_insertion_point(field_get:api.PrepareProposalResponse.blob)
  return _internal_blob();
}
inline void PrepareProposalResponse::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:api.PrepareProposalResponse.blob)
}
inline std::string* PrepareProposalResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:api.PrepareProposalResponse.blob)
  return _internal_mutable_blob();
}
inline const std::string& PrepareProposalResponse::_internal_blob() const {
  return blob_.Get();
}
inline void PrepareProposalResponse::_internal_set_blob(const std::string& value) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareProposalResponse::set_blob(std::string&& value) {

  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PrepareProposalResponse.blob)
}
inline void PrepareProposalResponse::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PrepareProposalResponse.blob)
}
inline void PrepareProposalResponse::set_blob(const void* value,
    size_t size) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PrepareProposalResponse.blob)
}
inline std::string* PrepareProposalResponse::_internal_mutable_blob() {

  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareProposalResponse::release_blob() {
  // @@protoc_insertion_point(field_release:api.PrepareProposalResponse.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareProposalResponse::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {

  } else {

  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PrepareProposalResponse.blob)
}

// .vega.Proposal pendingProposal = 2 [json_name = "pendingProposal"];
inline bool PrepareProposalResponse::_internal_has_pendingproposal() const {
  return this != internal_default_instance() && pendingproposal_ != nullptr;
}
inline bool PrepareProposalResponse::has_pendingproposal() const {
  return _internal_has_pendingproposal();
}
inline const ::vega::Proposal& PrepareProposalResponse::_internal_pendingproposal() const {
  const ::vega::Proposal* p = pendingproposal_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Proposal&>(
      ::vega::_Proposal_default_instance_);
}
inline const ::vega::Proposal& PrepareProposalResponse::pendingproposal() const {
  // @@protoc_insertion_point(field_get:api.PrepareProposalResponse.pendingProposal)
  return _internal_pendingproposal();
}
inline void PrepareProposalResponse::unsafe_arena_set_allocated_pendingproposal(
    ::vega::Proposal* pendingproposal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pendingproposal_);
  }
  pendingproposal_ = pendingproposal;
  if (pendingproposal) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.PrepareProposalResponse.pendingProposal)
}
inline ::vega::Proposal* PrepareProposalResponse::release_pendingproposal() {

  ::vega::Proposal* temp = pendingproposal_;
  pendingproposal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Proposal* PrepareProposalResponse::unsafe_arena_release_pendingproposal() {
  // @@protoc_insertion_point(field_release:api.PrepareProposalResponse.pendingProposal)

  ::vega::Proposal* temp = pendingproposal_;
  pendingproposal_ = nullptr;
  return temp;
}
inline ::vega::Proposal* PrepareProposalResponse::_internal_mutable_pendingproposal() {

  if (pendingproposal_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Proposal>(GetArena());
    pendingproposal_ = p;
  }
  return pendingproposal_;
}
inline ::vega::Proposal* PrepareProposalResponse::mutable_pendingproposal() {
  // @@protoc_insertion_point(field_mutable:api.PrepareProposalResponse.pendingProposal)
  return _internal_mutable_pendingproposal();
}
inline void PrepareProposalResponse::set_allocated_pendingproposal(::vega::Proposal* pendingproposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pendingproposal_);
  }
  if (pendingproposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pendingproposal)->GetArena();
    if (message_arena != submessage_arena) {
      pendingproposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pendingproposal, submessage_arena);
    }

  } else {

  }
  pendingproposal_ = pendingproposal;
  // @@protoc_insertion_point(field_set_allocated:api.PrepareProposalResponse.pendingProposal)
}

// -------------------------------------------------------------------

// PrepareVoteRequest

// .vega.Vote vote = 1 [json_name = "vote", (.validator.field) = {
inline bool PrepareVoteRequest::_internal_has_vote() const {
  return this != internal_default_instance() && vote_ != nullptr;
}
inline bool PrepareVoteRequest::has_vote() const {
  return _internal_has_vote();
}
inline const ::vega::Vote& PrepareVoteRequest::_internal_vote() const {
  const ::vega::Vote* p = vote_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Vote&>(
      ::vega::_Vote_default_instance_);
}
inline const ::vega::Vote& PrepareVoteRequest::vote() const {
  // @@protoc_insertion_point(field_get:api.PrepareVoteRequest.vote)
  return _internal_vote();
}
inline void PrepareVoteRequest::unsafe_arena_set_allocated_vote(
    ::vega::Vote* vote) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_);
  }
  vote_ = vote;
  if (vote) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.PrepareVoteRequest.vote)
}
inline ::vega::Vote* PrepareVoteRequest::release_vote() {

  ::vega::Vote* temp = vote_;
  vote_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Vote* PrepareVoteRequest::unsafe_arena_release_vote() {
  // @@protoc_insertion_point(field_release:api.PrepareVoteRequest.vote)

  ::vega::Vote* temp = vote_;
  vote_ = nullptr;
  return temp;
}
inline ::vega::Vote* PrepareVoteRequest::_internal_mutable_vote() {

  if (vote_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Vote>(GetArena());
    vote_ = p;
  }
  return vote_;
}
inline ::vega::Vote* PrepareVoteRequest::mutable_vote() {
  // @@protoc_insertion_point(field_mutable:api.PrepareVoteRequest.vote)
  return _internal_mutable_vote();
}
inline void PrepareVoteRequest::set_allocated_vote(::vega::Vote* vote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_);
  }
  if (vote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote)->GetArena();
    if (message_arena != submessage_arena) {
      vote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote, submessage_arena);
    }

  } else {

  }
  vote_ = vote;
  // @@protoc_insertion_point(field_set_allocated:api.PrepareVoteRequest.vote)
}

// -------------------------------------------------------------------

// PrepareVoteResponse

// bytes blob = 1 [json_name = "blob"];
inline void PrepareVoteResponse::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& PrepareVoteResponse::blob() const {
  // @@protoc_insertion_point(field_get:api.PrepareVoteResponse.blob)
  return _internal_blob();
}
inline void PrepareVoteResponse::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:api.PrepareVoteResponse.blob)
}
inline std::string* PrepareVoteResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:api.PrepareVoteResponse.blob)
  return _internal_mutable_blob();
}
inline const std::string& PrepareVoteResponse::_internal_blob() const {
  return blob_.Get();
}
inline void PrepareVoteResponse::_internal_set_blob(const std::string& value) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareVoteResponse::set_blob(std::string&& value) {

  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PrepareVoteResponse.blob)
}
inline void PrepareVoteResponse::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PrepareVoteResponse.blob)
}
inline void PrepareVoteResponse::set_blob(const void* value,
    size_t size) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PrepareVoteResponse.blob)
}
inline std::string* PrepareVoteResponse::_internal_mutable_blob() {

  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareVoteResponse::release_blob() {
  // @@protoc_insertion_point(field_release:api.PrepareVoteResponse.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareVoteResponse::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {

  } else {

  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PrepareVoteResponse.blob)
}

// .vega.Vote vote = 2 [json_name = "vote"];
inline bool PrepareVoteResponse::_internal_has_vote() const {
  return this != internal_default_instance() && vote_ != nullptr;
}
inline bool PrepareVoteResponse::has_vote() const {
  return _internal_has_vote();
}
inline const ::vega::Vote& PrepareVoteResponse::_internal_vote() const {
  const ::vega::Vote* p = vote_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Vote&>(
      ::vega::_Vote_default_instance_);
}
inline const ::vega::Vote& PrepareVoteResponse::vote() const {
  // @@protoc_insertion_point(field_get:api.PrepareVoteResponse.vote)
  return _internal_vote();
}
inline void PrepareVoteResponse::unsafe_arena_set_allocated_vote(
    ::vega::Vote* vote) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_);
  }
  vote_ = vote;
  if (vote) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.PrepareVoteResponse.vote)
}
inline ::vega::Vote* PrepareVoteResponse::release_vote() {

  ::vega::Vote* temp = vote_;
  vote_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Vote* PrepareVoteResponse::unsafe_arena_release_vote() {
  // @@protoc_insertion_point(field_release:api.PrepareVoteResponse.vote)

  ::vega::Vote* temp = vote_;
  vote_ = nullptr;
  return temp;
}
inline ::vega::Vote* PrepareVoteResponse::_internal_mutable_vote() {

  if (vote_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Vote>(GetArena());
    vote_ = p;
  }
  return vote_;
}
inline ::vega::Vote* PrepareVoteResponse::mutable_vote() {
  // @@protoc_insertion_point(field_mutable:api.PrepareVoteResponse.vote)
  return _internal_mutable_vote();
}
inline void PrepareVoteResponse::set_allocated_vote(::vega::Vote* vote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_);
  }
  if (vote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote)->GetArena();
    if (message_arena != submessage_arena) {
      vote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote, submessage_arena);
    }

  } else {

  }
  vote_ = vote;
  // @@protoc_insertion_point(field_set_allocated:api.PrepareVoteResponse.vote)
}

// -------------------------------------------------------------------

// PrepareLiquidityProvisionRequest

// .vega.LiquidityProvisionSubmission submission = 1 [json_name = "submission", (.validator.field) = {
inline bool PrepareLiquidityProvisionRequest::_internal_has_submission() const {
  return this != internal_default_instance() && submission_ != nullptr;
}
inline bool PrepareLiquidityProvisionRequest::has_submission() const {
  return _internal_has_submission();
}
inline const ::vega::LiquidityProvisionSubmission& PrepareLiquidityProvisionRequest::_internal_submission() const {
  const ::vega::LiquidityProvisionSubmission* p = submission_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::LiquidityProvisionSubmission&>(
      ::vega::_LiquidityProvisionSubmission_default_instance_);
}
inline const ::vega::LiquidityProvisionSubmission& PrepareLiquidityProvisionRequest::submission() const {
  // @@protoc_insertion_point(field_get:api.PrepareLiquidityProvisionRequest.submission)
  return _internal_submission();
}
inline void PrepareLiquidityProvisionRequest::unsafe_arena_set_allocated_submission(
    ::vega::LiquidityProvisionSubmission* submission) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  submission_ = submission;
  if (submission) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.PrepareLiquidityProvisionRequest.submission)
}
inline ::vega::LiquidityProvisionSubmission* PrepareLiquidityProvisionRequest::release_submission() {

  ::vega::LiquidityProvisionSubmission* temp = submission_;
  submission_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::LiquidityProvisionSubmission* PrepareLiquidityProvisionRequest::unsafe_arena_release_submission() {
  // @@protoc_insertion_point(field_release:api.PrepareLiquidityProvisionRequest.submission)

  ::vega::LiquidityProvisionSubmission* temp = submission_;
  submission_ = nullptr;
  return temp;
}
inline ::vega::LiquidityProvisionSubmission* PrepareLiquidityProvisionRequest::_internal_mutable_submission() {

  if (submission_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::LiquidityProvisionSubmission>(GetArena());
    submission_ = p;
  }
  return submission_;
}
inline ::vega::LiquidityProvisionSubmission* PrepareLiquidityProvisionRequest::mutable_submission() {
  // @@protoc_insertion_point(field_mutable:api.PrepareLiquidityProvisionRequest.submission)
  return _internal_mutable_submission();
}
inline void PrepareLiquidityProvisionRequest::set_allocated_submission(::vega::LiquidityProvisionSubmission* submission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission_);
  }
  if (submission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submission)->GetArena();
    if (message_arena != submessage_arena) {
      submission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submission, submessage_arena);
    }

  } else {

  }
  submission_ = submission;
  // @@protoc_insertion_point(field_set_allocated:api.PrepareLiquidityProvisionRequest.submission)
}

// -------------------------------------------------------------------

// PrepareLiquidityProvisionResponse

// bytes blob = 1 [json_name = "blob"];
inline void PrepareLiquidityProvisionResponse::clear_blob() {
  blob_.ClearToEmpty();
}
inline const std::string& PrepareLiquidityProvisionResponse::blob() const {
  // @@protoc_insertion_point(field_get:api.PrepareLiquidityProvisionResponse.blob)
  return _internal_blob();
}
inline void PrepareLiquidityProvisionResponse::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:api.PrepareLiquidityProvisionResponse.blob)
}
inline std::string* PrepareLiquidityProvisionResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:api.PrepareLiquidityProvisionResponse.blob)
  return _internal_mutable_blob();
}
inline const std::string& PrepareLiquidityProvisionResponse::_internal_blob() const {
  return blob_.Get();
}
inline void PrepareLiquidityProvisionResponse::_internal_set_blob(const std::string& value) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrepareLiquidityProvisionResponse::set_blob(std::string&& value) {

  blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.PrepareLiquidityProvisionResponse.blob)
}
inline void PrepareLiquidityProvisionResponse::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.PrepareLiquidityProvisionResponse.blob)
}
inline void PrepareLiquidityProvisionResponse::set_blob(const void* value,
    size_t size) {

  blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.PrepareLiquidityProvisionResponse.blob)
}
inline std::string* PrepareLiquidityProvisionResponse::_internal_mutable_blob() {

  return blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrepareLiquidityProvisionResponse::release_blob() {
  // @@protoc_insertion_point(field_release:api.PrepareLiquidityProvisionResponse.blob)
  return blob_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrepareLiquidityProvisionResponse::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {

  } else {

  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.PrepareLiquidityProvisionResponse.blob)
}

// -------------------------------------------------------------------

// OrderByIDRequest

// string orderID = 1 [json_name = "orderID", (.validator.field) = {
inline void OrderByIDRequest::clear_orderid() {
  orderid_.ClearToEmpty();
}
inline const std::string& OrderByIDRequest::orderid() const {
  // @@protoc_insertion_point(field_get:api.OrderByIDRequest.orderID)
  return _internal_orderid();
}
inline void OrderByIDRequest::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:api.OrderByIDRequest.orderID)
}
inline std::string* OrderByIDRequest::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:api.OrderByIDRequest.orderID)
  return _internal_mutable_orderid();
}
inline const std::string& OrderByIDRequest::_internal_orderid() const {
  return orderid_.Get();
}
inline void OrderByIDRequest::_internal_set_orderid(const std::string& value) {

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderByIDRequest::set_orderid(std::string&& value) {

  orderid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.OrderByIDRequest.orderID)
}
inline void OrderByIDRequest::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.OrderByIDRequest.orderID)
}
inline void OrderByIDRequest::set_orderid(const char* value,
    size_t size) {

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.OrderByIDRequest.orderID)
}
inline std::string* OrderByIDRequest::_internal_mutable_orderid() {

  return orderid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderByIDRequest::release_orderid() {
  // @@protoc_insertion_point(field_release:api.OrderByIDRequest.orderID)
  return orderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderByIDRequest::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {

  } else {

  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.OrderByIDRequest.orderID)
}

// uint64 version = 2 [json_name = "version"];
inline void OrderByIDRequest::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderByIDRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderByIDRequest::version() const {
  // @@protoc_insertion_point(field_get:api.OrderByIDRequest.version)
  return _internal_version();
}
inline void OrderByIDRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  version_ = value;
}
inline void OrderByIDRequest::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:api.OrderByIDRequest.version)
}

// -------------------------------------------------------------------

// OrderVersionsByIDRequest

// string orderID = 1 [json_name = "orderID", (.validator.field) = {
inline void OrderVersionsByIDRequest::clear_orderid() {
  orderid_.ClearToEmpty();
}
inline const std::string& OrderVersionsByIDRequest::orderid() const {
  // @@protoc_insertion_point(field_get:api.OrderVersionsByIDRequest.orderID)
  return _internal_orderid();
}
inline void OrderVersionsByIDRequest::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:api.OrderVersionsByIDRequest.orderID)
}
inline std::string* OrderVersionsByIDRequest::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:api.OrderVersionsByIDRequest.orderID)
  return _internal_mutable_orderid();
}
inline const std::string& OrderVersionsByIDRequest::_internal_orderid() const {
  return orderid_.Get();
}
inline void OrderVersionsByIDRequest::_internal_set_orderid(const std::string& value) {

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderVersionsByIDRequest::set_orderid(std::string&& value) {

  orderid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.OrderVersionsByIDRequest.orderID)
}
inline void OrderVersionsByIDRequest::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.OrderVersionsByIDRequest.orderID)
}
inline void OrderVersionsByIDRequest::set_orderid(const char* value,
    size_t size) {

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.OrderVersionsByIDRequest.orderID)
}
inline std::string* OrderVersionsByIDRequest::_internal_mutable_orderid() {

  return orderid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderVersionsByIDRequest::release_orderid() {
  // @@protoc_insertion_point(field_release:api.OrderVersionsByIDRequest.orderID)
  return orderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderVersionsByIDRequest::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {

  } else {

  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.OrderVersionsByIDRequest.orderID)
}

// .api.Pagination pagination = 2 [json_name = "pagination"];
inline bool OrderVersionsByIDRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool OrderVersionsByIDRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline void OrderVersionsByIDRequest::clear_pagination() {
  if (GetArena() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
}
inline const ::api::Pagination& OrderVersionsByIDRequest::_internal_pagination() const {
  const ::api::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::api::Pagination&>(
      ::api::_Pagination_default_instance_);
}
inline const ::api::Pagination& OrderVersionsByIDRequest::pagination() const {
  // @@protoc_insertion_point(field_get:api.OrderVersionsByIDRequest.pagination)
  return _internal_pagination();
}
inline void OrderVersionsByIDRequest::unsafe_arena_set_allocated_pagination(
    ::api::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.OrderVersionsByIDRequest.pagination)
}
inline ::api::Pagination* OrderVersionsByIDRequest::release_pagination() {

  ::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::Pagination* OrderVersionsByIDRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:api.OrderVersionsByIDRequest.pagination)

  ::api::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::api::Pagination* OrderVersionsByIDRequest::_internal_mutable_pagination() {

  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::api::Pagination* OrderVersionsByIDRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:api.OrderVersionsByIDRequest.pagination)
  return _internal_mutable_pagination();
}
inline void OrderVersionsByIDRequest::set_allocated_pagination(::api::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }

  } else {

  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:api.OrderVersionsByIDRequest.pagination)
}

// -------------------------------------------------------------------

// OrderVersionsResponse

// repeated .vega.Order orders = 1 [json_name = "orders"];
inline int OrderVersionsResponse::_internal_orders_size() const {
  return orders_.size();
}
inline int OrderVersionsResponse::orders_size() const {
  return _internal_orders_size();
}
inline ::vega::Order* OrderVersionsResponse::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:api.OrderVersionsResponse.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
OrderVersionsResponse::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:api.OrderVersionsResponse.orders)
  return &orders_;
}
inline const ::vega::Order& OrderVersionsResponse::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::vega::Order& OrderVersionsResponse::orders(int index) const {
  // @@protoc_insertion_point(field_get:api.OrderVersionsResponse.orders)
  return _internal_orders(index);
}
inline ::vega::Order* OrderVersionsResponse::_internal_add_orders() {
  return orders_.Add();
}
inline ::vega::Order* OrderVersionsResponse::add_orders() {
  // @@protoc_insertion_point(field_add:api.OrderVersionsResponse.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
OrderVersionsResponse::orders() const {
  // @@protoc_insertion_point(field_list:api.OrderVersionsResponse.orders)
  return orders_;
}

// -------------------------------------------------------------------

// EstimateFeeRequest

// .vega.Order order = 1 [json_name = "order"];
inline bool EstimateFeeRequest::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool EstimateFeeRequest::has_order() const {
  return _internal_has_order();
}
inline const ::vega::Order& EstimateFeeRequest::_internal_order() const {
  const ::vega::Order* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Order&>(
      ::vega::_Order_default_instance_);
}
inline const ::vega::Order& EstimateFeeRequest::order() const {
  // @@protoc_insertion_point(field_get:api.EstimateFeeRequest.order)
  return _internal_order();
}
inline void EstimateFeeRequest::unsafe_arena_set_allocated_order(
    ::vega::Order* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.EstimateFeeRequest.order)
}
inline ::vega::Order* EstimateFeeRequest::release_order() {

  ::vega::Order* temp = order_;
  order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Order* EstimateFeeRequest::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:api.EstimateFeeRequest.order)

  ::vega::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::vega::Order* EstimateFeeRequest::_internal_mutable_order() {

  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Order>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::vega::Order* EstimateFeeRequest::mutable_order() {
  // @@protoc_insertion_point(field_mutable:api.EstimateFeeRequest.order)
  return _internal_mutable_order();
}
inline void EstimateFeeRequest::set_allocated_order(::vega::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order)->GetArena();
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }

  } else {

  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:api.EstimateFeeRequest.order)
}

// -------------------------------------------------------------------

// EstimateFeeResponse

// .vega.Fee fee = 2 [json_name = "fee"];
inline bool EstimateFeeResponse::_internal_has_fee() const {
  return this != internal_default_instance() && fee_ != nullptr;
}
inline bool EstimateFeeResponse::has_fee() const {
  return _internal_has_fee();
}
inline const ::vega::Fee& EstimateFeeResponse::_internal_fee() const {
  const ::vega::Fee* p = fee_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Fee&>(
      ::vega::_Fee_default_instance_);
}
inline const ::vega::Fee& EstimateFeeResponse::fee() const {
  // @@protoc_insertion_point(field_get:api.EstimateFeeResponse.fee)
  return _internal_fee();
}
inline void EstimateFeeResponse::unsafe_arena_set_allocated_fee(
    ::vega::Fee* fee) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee_);
  }
  fee_ = fee;
  if (fee) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.EstimateFeeResponse.fee)
}
inline ::vega::Fee* EstimateFeeResponse::release_fee() {

  ::vega::Fee* temp = fee_;
  fee_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Fee* EstimateFeeResponse::unsafe_arena_release_fee() {
  // @@protoc_insertion_point(field_release:api.EstimateFeeResponse.fee)

  ::vega::Fee* temp = fee_;
  fee_ = nullptr;
  return temp;
}
inline ::vega::Fee* EstimateFeeResponse::_internal_mutable_fee() {

  if (fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Fee>(GetArena());
    fee_ = p;
  }
  return fee_;
}
inline ::vega::Fee* EstimateFeeResponse::mutable_fee() {
  // @@protoc_insertion_point(field_mutable:api.EstimateFeeResponse.fee)
  return _internal_mutable_fee();
}
inline void EstimateFeeResponse::set_allocated_fee(::vega::Fee* fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee_);
  }
  if (fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee)->GetArena();
    if (message_arena != submessage_arena) {
      fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee, submessage_arena);
    }

  } else {

  }
  fee_ = fee;
  // @@protoc_insertion_point(field_set_allocated:api.EstimateFeeResponse.fee)
}

// -------------------------------------------------------------------

// EstimateMarginRequest

// .vega.Order order = 1 [json_name = "order"];
inline bool EstimateMarginRequest::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool EstimateMarginRequest::has_order() const {
  return _internal_has_order();
}
inline const ::vega::Order& EstimateMarginRequest::_internal_order() const {
  const ::vega::Order* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Order&>(
      ::vega::_Order_default_instance_);
}
inline const ::vega::Order& EstimateMarginRequest::order() const {
  // @@protoc_insertion_point(field_get:api.EstimateMarginRequest.order)
  return _internal_order();
}
inline void EstimateMarginRequest::unsafe_arena_set_allocated_order(
    ::vega::Order* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.EstimateMarginRequest.order)
}
inline ::vega::Order* EstimateMarginRequest::release_order() {

  ::vega::Order* temp = order_;
  order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Order* EstimateMarginRequest::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:api.EstimateMarginRequest.order)

  ::vega::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::vega::Order* EstimateMarginRequest::_internal_mutable_order() {

  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Order>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::vega::Order* EstimateMarginRequest::mutable_order() {
  // @@protoc_insertion_point(field_mutable:api.EstimateMarginRequest.order)
  return _internal_mutable_order();
}
inline void EstimateMarginRequest::set_allocated_order(::vega::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order)->GetArena();
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }

  } else {

  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:api.EstimateMarginRequest.order)
}

// -------------------------------------------------------------------

// EstimateMarginResponse

// .vega.MarginLevels marginLevels = 2 [json_name = "marginLevels"];
inline bool EstimateMarginResponse::_internal_has_marginlevels() const {
  return this != internal_default_instance() && marginlevels_ != nullptr;
}
inline bool EstimateMarginResponse::has_marginlevels() const {
  return _internal_has_marginlevels();
}
inline const ::vega::MarginLevels& EstimateMarginResponse::_internal_marginlevels() const {
  const ::vega::MarginLevels* p = marginlevels_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::MarginLevels&>(
      ::vega::_MarginLevels_default_instance_);
}
inline const ::vega::MarginLevels& EstimateMarginResponse::marginlevels() const {
  // @@protoc_insertion_point(field_get:api.EstimateMarginResponse.marginLevels)
  return _internal_marginlevels();
}
inline void EstimateMarginResponse::unsafe_arena_set_allocated_marginlevels(
    ::vega::MarginLevels* marginlevels) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(marginlevels_);
  }
  marginlevels_ = marginlevels;
  if (marginlevels) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.EstimateMarginResponse.marginLevels)
}
inline ::vega::MarginLevels* EstimateMarginResponse::release_marginlevels() {

  ::vega::MarginLevels* temp = marginlevels_;
  marginlevels_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::MarginLevels* EstimateMarginResponse::unsafe_arena_release_marginlevels() {
  // @@protoc_insertion_point(field_release:api.EstimateMarginResponse.marginLevels)

  ::vega::MarginLevels* temp = marginlevels_;
  marginlevels_ = nullptr;
  return temp;
}
inline ::vega::MarginLevels* EstimateMarginResponse::_internal_mutable_marginlevels() {

  if (marginlevels_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::MarginLevels>(GetArena());
    marginlevels_ = p;
  }
  return marginlevels_;
}
inline ::vega::MarginLevels* EstimateMarginResponse::mutable_marginlevels() {
  // @@protoc_insertion_point(field_mutable:api.EstimateMarginResponse.marginLevels)
  return _internal_mutable_marginlevels();
}
inline void EstimateMarginResponse::set_allocated_marginlevels(::vega::MarginLevels* marginlevels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(marginlevels_);
  }
  if (marginlevels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(marginlevels)->GetArena();
    if (message_arena != submessage_arena) {
      marginlevels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marginlevels, submessage_arena);
    }

  } else {

  }
  marginlevels_ = marginlevels;
  // @@protoc_insertion_point(field_set_allocated:api.EstimateMarginResponse.marginLevels)
}

// -------------------------------------------------------------------

// ObserveEventsRequest

// repeated .vega.BusEventType type = 1 [json_name = "type"];
inline int ObserveEventsRequest::_internal_type_size() const {
  return type_.size();
}
inline int ObserveEventsRequest::type_size() const {
  return _internal_type_size();
}
inline void ObserveEventsRequest::clear_type() {
  type_.Clear();
}
inline ::vega::BusEventType ObserveEventsRequest::_internal_type(int index) const {
  return static_cast< ::vega::BusEventType >(type_.Get(index));
}
inline ::vega::BusEventType ObserveEventsRequest::type(int index) const {
  // @@protoc_insertion_point(field_get:api.ObserveEventsRequest.type)
  return _internal_type(index);
}
inline void ObserveEventsRequest::set_type(int index, ::vega::BusEventType value) {
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.ObserveEventsRequest.type)
}
inline void ObserveEventsRequest::_internal_add_type(::vega::BusEventType value) {
  type_.Add(value);
}
inline void ObserveEventsRequest::add_type(::vega::BusEventType value) {
  // @@protoc_insertion_point(field_add:api.ObserveEventsRequest.type)
  _internal_add_type(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ObserveEventsRequest::type() const {
  // @@protoc_insertion_point(field_list:api.ObserveEventsRequest.type)
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ObserveEventsRequest::_internal_mutable_type() {
  return &type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ObserveEventsRequest::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:api.ObserveEventsRequest.type)
  return _internal_mutable_type();
}

// string marketID = 2 [json_name = "marketID"];
inline void ObserveEventsRequest::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& ObserveEventsRequest::marketid() const {
  // @@protoc_insertion_point(field_get:api.ObserveEventsRequest.marketID)
  return _internal_marketid();
}
inline void ObserveEventsRequest::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:api.ObserveEventsRequest.marketID)
}
inline std::string* ObserveEventsRequest::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:api.ObserveEventsRequest.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& ObserveEventsRequest::_internal_marketid() const {
  return marketid_.Get();
}
inline void ObserveEventsRequest::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObserveEventsRequest::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ObserveEventsRequest.marketID)
}
inline void ObserveEventsRequest::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.ObserveEventsRequest.marketID)
}
inline void ObserveEventsRequest::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ObserveEventsRequest.marketID)
}
inline std::string* ObserveEventsRequest::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObserveEventsRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:api.ObserveEventsRequest.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObserveEventsRequest::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ObserveEventsRequest.marketID)
}

// string partyID = 3 [json_name = "partyID"];
inline void ObserveEventsRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& ObserveEventsRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.ObserveEventsRequest.partyID)
  return _internal_partyid();
}
inline void ObserveEventsRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.ObserveEventsRequest.partyID)
}
inline std::string* ObserveEventsRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.ObserveEventsRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& ObserveEventsRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void ObserveEventsRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ObserveEventsRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ObserveEventsRequest.partyID)
}
inline void ObserveEventsRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.ObserveEventsRequest.partyID)
}
inline void ObserveEventsRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ObserveEventsRequest.partyID)
}
inline std::string* ObserveEventsRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ObserveEventsRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.ObserveEventsRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObserveEventsRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ObserveEventsRequest.partyID)
}

// int64 batchSize = 4 [json_name = "batchSize"];
inline void ObserveEventsRequest::clear_batchsize() {
  batchsize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ObserveEventsRequest::_internal_batchsize() const {
  return batchsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ObserveEventsRequest::batchsize() const {
  // @@protoc_insertion_point(field_get:api.ObserveEventsRequest.batchSize)
  return _internal_batchsize();
}
inline void ObserveEventsRequest::_internal_set_batchsize(::PROTOBUF_NAMESPACE_ID::int64 value) {

  batchsize_ = value;
}
inline void ObserveEventsRequest::set_batchsize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_batchsize(value);
  // @@protoc_insertion_point(field_set:api.ObserveEventsRequest.batchSize)
}

// -------------------------------------------------------------------

// ObserveEventsResponse

// repeated .vega.BusEvent events = 1 [json_name = "events"];
inline int ObserveEventsResponse::_internal_events_size() const {
  return events_.size();
}
inline int ObserveEventsResponse::events_size() const {
  return _internal_events_size();
}
inline ::vega::BusEvent* ObserveEventsResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:api.ObserveEventsResponse.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::BusEvent >*
ObserveEventsResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:api.ObserveEventsResponse.events)
  return &events_;
}
inline const ::vega::BusEvent& ObserveEventsResponse::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::vega::BusEvent& ObserveEventsResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:api.ObserveEventsResponse.events)
  return _internal_events(index);
}
inline ::vega::BusEvent* ObserveEventsResponse::_internal_add_events() {
  return events_.Add();
}
inline ::vega::BusEvent* ObserveEventsResponse::add_events() {
  // @@protoc_insertion_point(field_add:api.ObserveEventsResponse.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::BusEvent >&
ObserveEventsResponse::events() const {
  // @@protoc_insertion_point(field_list:api.ObserveEventsResponse.events)
  return events_;
}

// -------------------------------------------------------------------

// WithdrawalsRequest

// string partyID = 1 [json_name = "partyID", (.validator.field) = {
inline void WithdrawalsRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& WithdrawalsRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.WithdrawalsRequest.partyID)
  return _internal_partyid();
}
inline void WithdrawalsRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.WithdrawalsRequest.partyID)
}
inline std::string* WithdrawalsRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.WithdrawalsRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& WithdrawalsRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void WithdrawalsRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WithdrawalsRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.WithdrawalsRequest.partyID)
}
inline void WithdrawalsRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.WithdrawalsRequest.partyID)
}
inline void WithdrawalsRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.WithdrawalsRequest.partyID)
}
inline std::string* WithdrawalsRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WithdrawalsRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.WithdrawalsRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WithdrawalsRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.WithdrawalsRequest.partyID)
}

// -------------------------------------------------------------------

// WithdrawalsResponse

// repeated .vega.Withdrawal withdrawals = 1 [json_name = "withdrawals"];
inline int WithdrawalsResponse::_internal_withdrawals_size() const {
  return withdrawals_.size();
}
inline int WithdrawalsResponse::withdrawals_size() const {
  return _internal_withdrawals_size();
}
inline ::vega::Withdrawal* WithdrawalsResponse::mutable_withdrawals(int index) {
  // @@protoc_insertion_point(field_mutable:api.WithdrawalsResponse.withdrawals)
  return withdrawals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Withdrawal >*
WithdrawalsResponse::mutable_withdrawals() {
  // @@protoc_insertion_point(field_mutable_list:api.WithdrawalsResponse.withdrawals)
  return &withdrawals_;
}
inline const ::vega::Withdrawal& WithdrawalsResponse::_internal_withdrawals(int index) const {
  return withdrawals_.Get(index);
}
inline const ::vega::Withdrawal& WithdrawalsResponse::withdrawals(int index) const {
  // @@protoc_insertion_point(field_get:api.WithdrawalsResponse.withdrawals)
  return _internal_withdrawals(index);
}
inline ::vega::Withdrawal* WithdrawalsResponse::_internal_add_withdrawals() {
  return withdrawals_.Add();
}
inline ::vega::Withdrawal* WithdrawalsResponse::add_withdrawals() {
  // @@protoc_insertion_point(field_add:api.WithdrawalsResponse.withdrawals)
  return _internal_add_withdrawals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Withdrawal >&
WithdrawalsResponse::withdrawals() const {
  // @@protoc_insertion_point(field_list:api.WithdrawalsResponse.withdrawals)
  return withdrawals_;
}

// -------------------------------------------------------------------

// WithdrawalRequest

// string ID = 1 [json_name = "ID", (.validator.field) = {
inline void WithdrawalRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& WithdrawalRequest::id() const {
  // @@protoc_insertion_point(field_get:api.WithdrawalRequest.ID)
  return _internal_id();
}
inline void WithdrawalRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api.WithdrawalRequest.ID)
}
inline std::string* WithdrawalRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:api.WithdrawalRequest.ID)
  return _internal_mutable_id();
}
inline const std::string& WithdrawalRequest::_internal_id() const {
  return id_.Get();
}
inline void WithdrawalRequest::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WithdrawalRequest::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.WithdrawalRequest.ID)
}
inline void WithdrawalRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.WithdrawalRequest.ID)
}
inline void WithdrawalRequest::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.WithdrawalRequest.ID)
}
inline std::string* WithdrawalRequest::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WithdrawalRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.WithdrawalRequest.ID)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WithdrawalRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.WithdrawalRequest.ID)
}

// -------------------------------------------------------------------

// WithdrawalResponse

// .vega.Withdrawal withdrawal = 1 [json_name = "withdrawal"];
inline bool WithdrawalResponse::_internal_has_withdrawal() const {
  return this != internal_default_instance() && withdrawal_ != nullptr;
}
inline bool WithdrawalResponse::has_withdrawal() const {
  return _internal_has_withdrawal();
}
inline const ::vega::Withdrawal& WithdrawalResponse::_internal_withdrawal() const {
  const ::vega::Withdrawal* p = withdrawal_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Withdrawal&>(
      ::vega::_Withdrawal_default_instance_);
}
inline const ::vega::Withdrawal& WithdrawalResponse::withdrawal() const {
  // @@protoc_insertion_point(field_get:api.WithdrawalResponse.withdrawal)
  return _internal_withdrawal();
}
inline void WithdrawalResponse::unsafe_arena_set_allocated_withdrawal(
    ::vega::Withdrawal* withdrawal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdrawal_);
  }
  withdrawal_ = withdrawal;
  if (withdrawal) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.WithdrawalResponse.withdrawal)
}
inline ::vega::Withdrawal* WithdrawalResponse::release_withdrawal() {

  ::vega::Withdrawal* temp = withdrawal_;
  withdrawal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Withdrawal* WithdrawalResponse::unsafe_arena_release_withdrawal() {
  // @@protoc_insertion_point(field_release:api.WithdrawalResponse.withdrawal)

  ::vega::Withdrawal* temp = withdrawal_;
  withdrawal_ = nullptr;
  return temp;
}
inline ::vega::Withdrawal* WithdrawalResponse::_internal_mutable_withdrawal() {

  if (withdrawal_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Withdrawal>(GetArena());
    withdrawal_ = p;
  }
  return withdrawal_;
}
inline ::vega::Withdrawal* WithdrawalResponse::mutable_withdrawal() {
  // @@protoc_insertion_point(field_mutable:api.WithdrawalResponse.withdrawal)
  return _internal_mutable_withdrawal();
}
inline void WithdrawalResponse::set_allocated_withdrawal(::vega::Withdrawal* withdrawal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdrawal_);
  }
  if (withdrawal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdrawal)->GetArena();
    if (message_arena != submessage_arena) {
      withdrawal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdrawal, submessage_arena);
    }

  } else {

  }
  withdrawal_ = withdrawal;
  // @@protoc_insertion_point(field_set_allocated:api.WithdrawalResponse.withdrawal)
}

// -------------------------------------------------------------------

// ERC20WithdrawalApprovalRequest

// string withdrawalID = 1 [json_name = "withdrawalID", (.validator.field) = {
inline void ERC20WithdrawalApprovalRequest::clear_withdrawalid() {
  withdrawalid_.ClearToEmpty();
}
inline const std::string& ERC20WithdrawalApprovalRequest::withdrawalid() const {
  // @@protoc_insertion_point(field_get:api.ERC20WithdrawalApprovalRequest.withdrawalID)
  return _internal_withdrawalid();
}
inline void ERC20WithdrawalApprovalRequest::set_withdrawalid(const std::string& value) {
  _internal_set_withdrawalid(value);
  // @@protoc_insertion_point(field_set:api.ERC20WithdrawalApprovalRequest.withdrawalID)
}
inline std::string* ERC20WithdrawalApprovalRequest::mutable_withdrawalid() {
  // @@protoc_insertion_point(field_mutable:api.ERC20WithdrawalApprovalRequest.withdrawalID)
  return _internal_mutable_withdrawalid();
}
inline const std::string& ERC20WithdrawalApprovalRequest::_internal_withdrawalid() const {
  return withdrawalid_.Get();
}
inline void ERC20WithdrawalApprovalRequest::_internal_set_withdrawalid(const std::string& value) {

  withdrawalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20WithdrawalApprovalRequest::set_withdrawalid(std::string&& value) {

  withdrawalid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ERC20WithdrawalApprovalRequest.withdrawalID)
}
inline void ERC20WithdrawalApprovalRequest::set_withdrawalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  withdrawalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.ERC20WithdrawalApprovalRequest.withdrawalID)
}
inline void ERC20WithdrawalApprovalRequest::set_withdrawalid(const char* value,
    size_t size) {

  withdrawalid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ERC20WithdrawalApprovalRequest.withdrawalID)
}
inline std::string* ERC20WithdrawalApprovalRequest::_internal_mutable_withdrawalid() {

  return withdrawalid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20WithdrawalApprovalRequest::release_withdrawalid() {
  // @@protoc_insertion_point(field_release:api.ERC20WithdrawalApprovalRequest.withdrawalID)
  return withdrawalid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20WithdrawalApprovalRequest::set_allocated_withdrawalid(std::string* withdrawalid) {
  if (withdrawalid != nullptr) {

  } else {

  }
  withdrawalid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), withdrawalid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ERC20WithdrawalApprovalRequest.withdrawalID)
}

// -------------------------------------------------------------------

// ERC20WithdrawalApprovalResponse

// string assetSource = 1 [json_name = "assetSource"];
inline void ERC20WithdrawalApprovalResponse::clear_assetsource() {
  assetsource_.ClearToEmpty();
}
inline const std::string& ERC20WithdrawalApprovalResponse::assetsource() const {
  // @@protoc_insertion_point(field_get:api.ERC20WithdrawalApprovalResponse.assetSource)
  return _internal_assetsource();
}
inline void ERC20WithdrawalApprovalResponse::set_assetsource(const std::string& value) {
  _internal_set_assetsource(value);
  // @@protoc_insertion_point(field_set:api.ERC20WithdrawalApprovalResponse.assetSource)
}
inline std::string* ERC20WithdrawalApprovalResponse::mutable_assetsource() {
  // @@protoc_insertion_point(field_mutable:api.ERC20WithdrawalApprovalResponse.assetSource)
  return _internal_mutable_assetsource();
}
inline const std::string& ERC20WithdrawalApprovalResponse::_internal_assetsource() const {
  return assetsource_.Get();
}
inline void ERC20WithdrawalApprovalResponse::_internal_set_assetsource(const std::string& value) {

  assetsource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_assetsource(std::string&& value) {

  assetsource_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ERC20WithdrawalApprovalResponse.assetSource)
}
inline void ERC20WithdrawalApprovalResponse::set_assetsource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  assetsource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.ERC20WithdrawalApprovalResponse.assetSource)
}
inline void ERC20WithdrawalApprovalResponse::set_assetsource(const char* value,
    size_t size) {

  assetsource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ERC20WithdrawalApprovalResponse.assetSource)
}
inline std::string* ERC20WithdrawalApprovalResponse::_internal_mutable_assetsource() {

  return assetsource_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20WithdrawalApprovalResponse::release_assetsource() {
  // @@protoc_insertion_point(field_release:api.ERC20WithdrawalApprovalResponse.assetSource)
  return assetsource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_allocated_assetsource(std::string* assetsource) {
  if (assetsource != nullptr) {

  } else {

  }
  assetsource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assetsource,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ERC20WithdrawalApprovalResponse.assetSource)
}

// string amount = 2 [json_name = "amount"];
inline void ERC20WithdrawalApprovalResponse::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& ERC20WithdrawalApprovalResponse::amount() const {
  // @@protoc_insertion_point(field_get:api.ERC20WithdrawalApprovalResponse.amount)
  return _internal_amount();
}
inline void ERC20WithdrawalApprovalResponse::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:api.ERC20WithdrawalApprovalResponse.amount)
}
inline std::string* ERC20WithdrawalApprovalResponse::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:api.ERC20WithdrawalApprovalResponse.amount)
  return _internal_mutable_amount();
}
inline const std::string& ERC20WithdrawalApprovalResponse::_internal_amount() const {
  return amount_.Get();
}
inline void ERC20WithdrawalApprovalResponse::_internal_set_amount(const std::string& value) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_amount(std::string&& value) {

  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ERC20WithdrawalApprovalResponse.amount)
}
inline void ERC20WithdrawalApprovalResponse::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.ERC20WithdrawalApprovalResponse.amount)
}
inline void ERC20WithdrawalApprovalResponse::set_amount(const char* value,
    size_t size) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ERC20WithdrawalApprovalResponse.amount)
}
inline std::string* ERC20WithdrawalApprovalResponse::_internal_mutable_amount() {

  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20WithdrawalApprovalResponse::release_amount() {
  // @@protoc_insertion_point(field_release:api.ERC20WithdrawalApprovalResponse.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {

  } else {

  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ERC20WithdrawalApprovalResponse.amount)
}

// int64 expiry = 3 [json_name = "expiry"];
inline void ERC20WithdrawalApprovalResponse::clear_expiry() {
  expiry_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ERC20WithdrawalApprovalResponse::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ERC20WithdrawalApprovalResponse::expiry() const {
  // @@protoc_insertion_point(field_get:api.ERC20WithdrawalApprovalResponse.expiry)
  return _internal_expiry();
}
inline void ERC20WithdrawalApprovalResponse::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {

  expiry_ = value;
}
inline void ERC20WithdrawalApprovalResponse::set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:api.ERC20WithdrawalApprovalResponse.expiry)
}

// string nonce = 4 [json_name = "nonce"];
inline void ERC20WithdrawalApprovalResponse::clear_nonce() {
  nonce_.ClearToEmpty();
}
inline const std::string& ERC20WithdrawalApprovalResponse::nonce() const {
  // @@protoc_insertion_point(field_get:api.ERC20WithdrawalApprovalResponse.nonce)
  return _internal_nonce();
}
inline void ERC20WithdrawalApprovalResponse::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:api.ERC20WithdrawalApprovalResponse.nonce)
}
inline std::string* ERC20WithdrawalApprovalResponse::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:api.ERC20WithdrawalApprovalResponse.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& ERC20WithdrawalApprovalResponse::_internal_nonce() const {
  return nonce_.Get();
}
inline void ERC20WithdrawalApprovalResponse::_internal_set_nonce(const std::string& value) {

  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_nonce(std::string&& value) {

  nonce_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ERC20WithdrawalApprovalResponse.nonce)
}
inline void ERC20WithdrawalApprovalResponse::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.ERC20WithdrawalApprovalResponse.nonce)
}
inline void ERC20WithdrawalApprovalResponse::set_nonce(const char* value,
    size_t size) {

  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ERC20WithdrawalApprovalResponse.nonce)
}
inline std::string* ERC20WithdrawalApprovalResponse::_internal_mutable_nonce() {

  return nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20WithdrawalApprovalResponse::release_nonce() {
  // @@protoc_insertion_point(field_release:api.ERC20WithdrawalApprovalResponse.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {

  } else {

  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ERC20WithdrawalApprovalResponse.nonce)
}

// string signatures = 5 [json_name = "signatures"];
inline void ERC20WithdrawalApprovalResponse::clear_signatures() {
  signatures_.ClearToEmpty();
}
inline const std::string& ERC20WithdrawalApprovalResponse::signatures() const {
  // @@protoc_insertion_point(field_get:api.ERC20WithdrawalApprovalResponse.signatures)
  return _internal_signatures();
}
inline void ERC20WithdrawalApprovalResponse::set_signatures(const std::string& value) {
  _internal_set_signatures(value);
  // @@protoc_insertion_point(field_set:api.ERC20WithdrawalApprovalResponse.signatures)
}
inline std::string* ERC20WithdrawalApprovalResponse::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable:api.ERC20WithdrawalApprovalResponse.signatures)
  return _internal_mutable_signatures();
}
inline const std::string& ERC20WithdrawalApprovalResponse::_internal_signatures() const {
  return signatures_.Get();
}
inline void ERC20WithdrawalApprovalResponse::_internal_set_signatures(const std::string& value) {

  signatures_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_signatures(std::string&& value) {

  signatures_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.ERC20WithdrawalApprovalResponse.signatures)
}
inline void ERC20WithdrawalApprovalResponse::set_signatures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  signatures_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.ERC20WithdrawalApprovalResponse.signatures)
}
inline void ERC20WithdrawalApprovalResponse::set_signatures(const char* value,
    size_t size) {

  signatures_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.ERC20WithdrawalApprovalResponse.signatures)
}
inline std::string* ERC20WithdrawalApprovalResponse::_internal_mutable_signatures() {

  return signatures_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20WithdrawalApprovalResponse::release_signatures() {
  // @@protoc_insertion_point(field_release:api.ERC20WithdrawalApprovalResponse.signatures)
  return signatures_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20WithdrawalApprovalResponse::set_allocated_signatures(std::string* signatures) {
  if (signatures != nullptr) {

  } else {

  }
  signatures_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signatures,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.ERC20WithdrawalApprovalResponse.signatures)
}

// -------------------------------------------------------------------

// DepositsRequest

// string partyID = 1 [json_name = "partyID", (.validator.field) = {
inline void DepositsRequest::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& DepositsRequest::partyid() const {
  // @@protoc_insertion_point(field_get:api.DepositsRequest.partyID)
  return _internal_partyid();
}
inline void DepositsRequest::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:api.DepositsRequest.partyID)
}
inline std::string* DepositsRequest::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:api.DepositsRequest.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& DepositsRequest::_internal_partyid() const {
  return partyid_.Get();
}
inline void DepositsRequest::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DepositsRequest::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DepositsRequest.partyID)
}
inline void DepositsRequest::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.DepositsRequest.partyID)
}
inline void DepositsRequest::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DepositsRequest.partyID)
}
inline std::string* DepositsRequest::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DepositsRequest::release_partyid() {
  // @@protoc_insertion_point(field_release:api.DepositsRequest.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepositsRequest::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DepositsRequest.partyID)
}

// -------------------------------------------------------------------

// DepositsResponse

// repeated .vega.Deposit deposits = 1 [json_name = "deposits"];
inline int DepositsResponse::_internal_deposits_size() const {
  return deposits_.size();
}
inline int DepositsResponse::deposits_size() const {
  return _internal_deposits_size();
}
inline ::vega::Deposit* DepositsResponse::mutable_deposits(int index) {
  // @@protoc_insertion_point(field_mutable:api.DepositsResponse.deposits)
  return deposits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Deposit >*
DepositsResponse::mutable_deposits() {
  // @@protoc_insertion_point(field_mutable_list:api.DepositsResponse.deposits)
  return &deposits_;
}
inline const ::vega::Deposit& DepositsResponse::_internal_deposits(int index) const {
  return deposits_.Get(index);
}
inline const ::vega::Deposit& DepositsResponse::deposits(int index) const {
  // @@protoc_insertion_point(field_get:api.DepositsResponse.deposits)
  return _internal_deposits(index);
}
inline ::vega::Deposit* DepositsResponse::_internal_add_deposits() {
  return deposits_.Add();
}
inline ::vega::Deposit* DepositsResponse::add_deposits() {
  // @@protoc_insertion_point(field_add:api.DepositsResponse.deposits)
  return _internal_add_deposits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Deposit >&
DepositsResponse::deposits() const {
  // @@protoc_insertion_point(field_list:api.DepositsResponse.deposits)
  return deposits_;
}

// -------------------------------------------------------------------

// DepositRequest

// string ID = 1 [json_name = "ID", (.validator.field) = {
inline void DepositRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DepositRequest::id() const {
  // @@protoc_insertion_point(field_get:api.DepositRequest.ID)
  return _internal_id();
}
inline void DepositRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api.DepositRequest.ID)
}
inline std::string* DepositRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:api.DepositRequest.ID)
  return _internal_mutable_id();
}
inline const std::string& DepositRequest::_internal_id() const {
  return id_.Get();
}
inline void DepositRequest::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DepositRequest::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.DepositRequest.ID)
}
inline void DepositRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.DepositRequest.ID)
}
inline void DepositRequest::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.DepositRequest.ID)
}
inline std::string* DepositRequest::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DepositRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.DepositRequest.ID)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepositRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.DepositRequest.ID)
}

// -------------------------------------------------------------------

// DepositResponse

// .vega.Deposit deposit = 1 [json_name = "deposit"];
inline bool DepositResponse::_internal_has_deposit() const {
  return this != internal_default_instance() && deposit_ != nullptr;
}
inline bool DepositResponse::has_deposit() const {
  return _internal_has_deposit();
}
inline const ::vega::Deposit& DepositResponse::_internal_deposit() const {
  const ::vega::Deposit* p = deposit_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Deposit&>(
      ::vega::_Deposit_default_instance_);
}
inline const ::vega::Deposit& DepositResponse::deposit() const {
  // @@protoc_insertion_point(field_get:api.DepositResponse.deposit)
  return _internal_deposit();
}
inline void DepositResponse::unsafe_arena_set_allocated_deposit(
    ::vega::Deposit* deposit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deposit_);
  }
  deposit_ = deposit;
  if (deposit) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.DepositResponse.deposit)
}
inline ::vega::Deposit* DepositResponse::release_deposit() {

  ::vega::Deposit* temp = deposit_;
  deposit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Deposit* DepositResponse::unsafe_arena_release_deposit() {
  // @@protoc_insertion_point(field_release:api.DepositResponse.deposit)

  ::vega::Deposit* temp = deposit_;
  deposit_ = nullptr;
  return temp;
}
inline ::vega::Deposit* DepositResponse::_internal_mutable_deposit() {

  if (deposit_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Deposit>(GetArena());
    deposit_ = p;
  }
  return deposit_;
}
inline ::vega::Deposit* DepositResponse::mutable_deposit() {
  // @@protoc_insertion_point(field_mutable:api.DepositResponse.deposit)
  return _internal_mutable_deposit();
}
inline void DepositResponse::set_allocated_deposit(::vega::Deposit* deposit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deposit_);
  }
  if (deposit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deposit)->GetArena();
    if (message_arena != submessage_arena) {
      deposit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposit, submessage_arena);
    }

  } else {

  }
  deposit_ = deposit;
  // @@protoc_insertion_point(field_set_allocated:api.DepositResponse.deposit)
}

// -------------------------------------------------------------------

// NetworkParametersRequest

// -------------------------------------------------------------------

// NetworkParametersResponse

// repeated .vega.NetworkParameter networkParameters = 1 [json_name = "networkParameters"];
inline int NetworkParametersResponse::_internal_networkparameters_size() const {
  return networkparameters_.size();
}
inline int NetworkParametersResponse::networkparameters_size() const {
  return _internal_networkparameters_size();
}
inline ::vega::NetworkParameter* NetworkParametersResponse::mutable_networkparameters(int index) {
  // @@protoc_insertion_point(field_mutable:api.NetworkParametersResponse.networkParameters)
  return networkparameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >*
NetworkParametersResponse::mutable_networkparameters() {
  // @@protoc_insertion_point(field_mutable_list:api.NetworkParametersResponse.networkParameters)
  return &networkparameters_;
}
inline const ::vega::NetworkParameter& NetworkParametersResponse::_internal_networkparameters(int index) const {
  return networkparameters_.Get(index);
}
inline const ::vega::NetworkParameter& NetworkParametersResponse::networkparameters(int index) const {
  // @@protoc_insertion_point(field_get:api.NetworkParametersResponse.networkParameters)
  return _internal_networkparameters(index);
}
inline ::vega::NetworkParameter* NetworkParametersResponse::_internal_add_networkparameters() {
  return networkparameters_.Add();
}
inline ::vega::NetworkParameter* NetworkParametersResponse::add_networkparameters() {
  // @@protoc_insertion_point(field_add:api.NetworkParametersResponse.networkParameters)
  return _internal_add_networkparameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::NetworkParameter >&
NetworkParametersResponse::networkparameters() const {
  // @@protoc_insertion_point(field_list:api.NetworkParametersResponse.networkParameters)
  return networkparameters_;
}

// -------------------------------------------------------------------

// LiquidityProvisionsRequest

// string market = 1 [json_name = "market"];
inline void LiquidityProvisionsRequest::clear_market() {
  market_.ClearToEmpty();
}
inline const std::string& LiquidityProvisionsRequest::market() const {
  // @@protoc_insertion_point(field_get:api.LiquidityProvisionsRequest.market)
  return _internal_market();
}
inline void LiquidityProvisionsRequest::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:api.LiquidityProvisionsRequest.market)
}
inline std::string* LiquidityProvisionsRequest::mutable_market() {
  // @@protoc_insertion_point(field_mutable:api.LiquidityProvisionsRequest.market)
  return _internal_mutable_market();
}
inline const std::string& LiquidityProvisionsRequest::_internal_market() const {
  return market_.Get();
}
inline void LiquidityProvisionsRequest::_internal_set_market(const std::string& value) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvisionsRequest::set_market(std::string&& value) {

  market_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.LiquidityProvisionsRequest.market)
}
inline void LiquidityProvisionsRequest::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.LiquidityProvisionsRequest.market)
}
inline void LiquidityProvisionsRequest::set_market(const char* value,
    size_t size) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.LiquidityProvisionsRequest.market)
}
inline std::string* LiquidityProvisionsRequest::_internal_mutable_market() {

  return market_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvisionsRequest::release_market() {
  // @@protoc_insertion_point(field_release:api.LiquidityProvisionsRequest.market)
  return market_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvisionsRequest::set_allocated_market(std::string* market) {
  if (market != nullptr) {

  } else {

  }
  market_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.LiquidityProvisionsRequest.market)
}

// string party = 2 [json_name = "party"];
inline void LiquidityProvisionsRequest::clear_party() {
  party_.ClearToEmpty();
}
inline const std::string& LiquidityProvisionsRequest::party() const {
  // @@protoc_insertion_point(field_get:api.LiquidityProvisionsRequest.party)
  return _internal_party();
}
inline void LiquidityProvisionsRequest::set_party(const std::string& value) {
  _internal_set_party(value);
  // @@protoc_insertion_point(field_set:api.LiquidityProvisionsRequest.party)
}
inline std::string* LiquidityProvisionsRequest::mutable_party() {
  // @@protoc_insertion_point(field_mutable:api.LiquidityProvisionsRequest.party)
  return _internal_mutable_party();
}
inline const std::string& LiquidityProvisionsRequest::_internal_party() const {
  return party_.Get();
}
inline void LiquidityProvisionsRequest::_internal_set_party(const std::string& value) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvisionsRequest::set_party(std::string&& value) {

  party_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.LiquidityProvisionsRequest.party)
}
inline void LiquidityProvisionsRequest::set_party(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:api.LiquidityProvisionsRequest.party)
}
inline void LiquidityProvisionsRequest::set_party(const char* value,
    size_t size) {

  party_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.LiquidityProvisionsRequest.party)
}
inline std::string* LiquidityProvisionsRequest::_internal_mutable_party() {

  return party_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvisionsRequest::release_party() {
  // @@protoc_insertion_point(field_release:api.LiquidityProvisionsRequest.party)
  return party_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvisionsRequest::set_allocated_party(std::string* party) {
  if (party != nullptr) {

  } else {

  }
  party_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.LiquidityProvisionsRequest.party)
}

// -------------------------------------------------------------------

// LiquidityProvisionsResponse

// repeated .vega.LiquidityProvision liquidityProvisions = 1 [json_name = "liquidityProvisions"];
inline int LiquidityProvisionsResponse::_internal_liquidityprovisions_size() const {
  return liquidityprovisions_.size();
}
inline int LiquidityProvisionsResponse::liquidityprovisions_size() const {
  return _internal_liquidityprovisions_size();
}
inline ::vega::LiquidityProvision* LiquidityProvisionsResponse::mutable_liquidityprovisions(int index) {
  // @@protoc_insertion_point(field_mutable:api.LiquidityProvisionsResponse.liquidityProvisions)
  return liquidityprovisions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityProvision >*
LiquidityProvisionsResponse::mutable_liquidityprovisions() {
  // @@protoc_insertion_point(field_mutable_list:api.LiquidityProvisionsResponse.liquidityProvisions)
  return &liquidityprovisions_;
}
inline const ::vega::LiquidityProvision& LiquidityProvisionsResponse::_internal_liquidityprovisions(int index) const {
  return liquidityprovisions_.Get(index);
}
inline const ::vega::LiquidityProvision& LiquidityProvisionsResponse::liquidityprovisions(int index) const {
  // @@protoc_insertion_point(field_get:api.LiquidityProvisionsResponse.liquidityProvisions)
  return _internal_liquidityprovisions(index);
}
inline ::vega::LiquidityProvision* LiquidityProvisionsResponse::_internal_add_liquidityprovisions() {
  return liquidityprovisions_.Add();
}
inline ::vega::LiquidityProvision* LiquidityProvisionsResponse::add_liquidityprovisions() {
  // @@protoc_insertion_point(field_add:api.LiquidityProvisionsResponse.liquidityProvisions)
  return _internal_add_liquidityprovisions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityProvision >&
LiquidityProvisionsResponse::liquidityprovisions() const {
  // @@protoc_insertion_point(field_list:api.LiquidityProvisionsResponse.liquidityProvisions)
  return liquidityprovisions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::api::SubmitTransactionRequest_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::SubmitTransactionRequest_Type>() {
  return ::api::SubmitTransactionRequest_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_2ftrading_2eproto
