// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vega.proto

#include "vega.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Erc20WithdrawExt_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fee_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinancialAmount_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LedgerEntry_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiquidityOrder_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityOrderReference_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Order_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeggedOrder_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Price_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceLevel_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PriceMonitoringBounds_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_markets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceMonitoringTrigger_markets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RiskFactor_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RiskResult_RiskFactorsEntry_DoNotUse_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signature_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trade_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferBalance_vega_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vega_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawExt_vega_2eproto;
namespace vega {
class PriceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Price> _instance;
} _Price_default_instance_;
class TimestampDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Timestamp> _instance;
} _Timestamp_default_instance_;
class PartyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Party> _instance;
} _Party_default_instance_;
class RiskFactorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RiskFactor> _instance;
} _RiskFactor_default_instance_;
class RiskResult_RiskFactorsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RiskResult_RiskFactorsEntry_DoNotUse> _instance;
} _RiskResult_RiskFactorsEntry_DoNotUse_default_instance_;
class RiskResult_PredictedNextRiskFactorsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RiskResult_PredictedNextRiskFactorsEntry_DoNotUse> _instance;
} _RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_default_instance_;
class RiskResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RiskResult> _instance;
} _RiskResult_default_instance_;
class PeggedOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeggedOrder> _instance;
} _PeggedOrder_default_instance_;
class OrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Order> _instance;
} _Order_default_instance_;
class OrderCancellationConfirmationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderCancellationConfirmation> _instance;
} _OrderCancellationConfirmation_default_instance_;
class OrderConfirmationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderConfirmation> _instance;
} _OrderConfirmation_default_instance_;
class AuctionIndicativeStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuctionIndicativeState> _instance;
} _AuctionIndicativeState_default_instance_;
class TradeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trade> _instance;
} _Trade_default_instance_;
class FeeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fee> _instance;
} _Fee_default_instance_;
class TradeSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradeSet> _instance;
} _TradeSet_default_instance_;
class CandleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Candle> _instance;
} _Candle_default_instance_;
class PriceLevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceLevel> _instance;
} _PriceLevel_default_instance_;
class MarketDepthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDepth> _instance;
} _MarketDepth_default_instance_;
class MarketDepthUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDepthUpdate> _instance;
} _MarketDepthUpdate_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class PositionTradeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionTrade> _instance;
} _PositionTrade_default_instance_;
class StatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Statistics> _instance;
} _Statistics_default_instance_;
class DepositDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Deposit> _instance;
} _Deposit_default_instance_;
class WithdrawalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Withdrawal> _instance;
} _Withdrawal_default_instance_;
class WithdrawSubmissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawSubmission> _instance;
} _WithdrawSubmission_default_instance_;
class WithdrawExtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithdrawExt> _instance;
} _WithdrawExt_default_instance_;
class Erc20WithdrawExtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Erc20WithdrawExt> _instance;
} _Erc20WithdrawExt_default_instance_;
class OrderAmendmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderAmendment> _instance;
} _OrderAmendment_default_instance_;
class OrderSubmissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderSubmission> _instance;
} _OrderSubmission_default_instance_;
class OrderCancellationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderCancellation> _instance;
} _OrderCancellation_default_instance_;
class NodeRegistrationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeRegistration> _instance;
} _NodeRegistration_default_instance_;
class NodeVoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeVote> _instance;
} _NodeVote_default_instance_;
class AccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account> _instance;
} _Account_default_instance_;
class FinancialAmountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FinancialAmount> _instance;
} _FinancialAmount_default_instance_;
class TransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transfer> _instance;
} _Transfer_default_instance_;
class TransferRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferRequest> _instance;
} _TransferRequest_default_instance_;
class LedgerEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LedgerEntry> _instance;
} _LedgerEntry_default_instance_;
class TransferBalanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferBalance> _instance;
} _TransferBalance_default_instance_;
class TransferResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferResponse> _instance;
} _TransferResponse_default_instance_;
class MarginLevelsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarginLevels> _instance;
} _MarginLevels_default_instance_;
class MarketDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketData> _instance;
} _MarketData_default_instance_;
class PriceMonitoringBoundsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceMonitoringBounds> _instance;
} _PriceMonitoringBounds_default_instance_;
class ErrorDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorDetail> _instance;
} _ErrorDetail_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class SignatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signature> _instance;
} _Signature_default_instance_;
class SignedBundleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignedBundle> _instance;
} _SignedBundle_default_instance_;
class NodeSignatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeSignature> _instance;
} _NodeSignature_default_instance_;
class NetworkParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkParameter> _instance;
} _NetworkParameter_default_instance_;
class LiquidityOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidityOrder> _instance;
} _LiquidityOrder_default_instance_;
class LiquidityProvisionSubmissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidityProvisionSubmission> _instance;
} _LiquidityProvisionSubmission_default_instance_;
class LiquidityOrderReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidityOrderReference> _instance;
} _LiquidityOrderReference_default_instance_;
class LiquidityProvisionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidityProvision> _instance;
} _LiquidityProvision_default_instance_;
class EthereumConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EthereumConfig> _instance;
} _EthereumConfig_default_instance_;
}  // namespace vega
static void InitDefaultsscc_info_Account_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Account_default_instance_;
    new (ptr) ::vega::Account();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Account_vega_2eproto}, {}};

static void InitDefaultsscc_info_AuctionIndicativeState_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_AuctionIndicativeState_default_instance_;
    new (ptr) ::vega::AuctionIndicativeState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuctionIndicativeState_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuctionIndicativeState_vega_2eproto}, {}};

static void InitDefaultsscc_info_Candle_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Candle_default_instance_;
    new (ptr) ::vega::Candle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Candle_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Candle_vega_2eproto}, {}};

static void InitDefaultsscc_info_Deposit_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Deposit_default_instance_;
    new (ptr) ::vega::Deposit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Deposit_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Deposit_vega_2eproto}, {}};

static void InitDefaultsscc_info_Erc20WithdrawExt_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Erc20WithdrawExt_default_instance_;
    new (ptr) ::vega::Erc20WithdrawExt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Erc20WithdrawExt_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Erc20WithdrawExt_vega_2eproto}, {}};

static void InitDefaultsscc_info_ErrorDetail_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ErrorDetail_default_instance_;
    new (ptr) ::vega::ErrorDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorDetail_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErrorDetail_vega_2eproto}, {}};

static void InitDefaultsscc_info_EthereumConfig_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_EthereumConfig_default_instance_;
    new (ptr) ::vega::EthereumConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EthereumConfig_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EthereumConfig_vega_2eproto}, {}};

static void InitDefaultsscc_info_Fee_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Fee_default_instance_;
    new (ptr) ::vega::Fee();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fee_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fee_vega_2eproto}, {}};

static void InitDefaultsscc_info_FinancialAmount_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_FinancialAmount_default_instance_;
    new (ptr) ::vega::FinancialAmount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinancialAmount_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FinancialAmount_vega_2eproto}, {}};

static void InitDefaultsscc_info_LedgerEntry_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LedgerEntry_default_instance_;
    new (ptr) ::vega::LedgerEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LedgerEntry_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LedgerEntry_vega_2eproto}, {}};

static void InitDefaultsscc_info_LiquidityOrder_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LiquidityOrder_default_instance_;
    new (ptr) ::vega::LiquidityOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LiquidityOrder_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LiquidityOrder_vega_2eproto}, {}};

static void InitDefaultsscc_info_LiquidityOrderReference_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LiquidityOrderReference_default_instance_;
    new (ptr) ::vega::LiquidityOrderReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityOrderReference_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LiquidityOrderReference_vega_2eproto}, {
      &scc_info_LiquidityOrder_vega_2eproto.base,}};

static void InitDefaultsscc_info_LiquidityProvision_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LiquidityProvision_default_instance_;
    new (ptr) ::vega::LiquidityProvision();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityProvision_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LiquidityProvision_vega_2eproto}, {
      &scc_info_LiquidityOrderReference_vega_2eproto.base,}};

static void InitDefaultsscc_info_LiquidityProvisionSubmission_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LiquidityProvisionSubmission_default_instance_;
    new (ptr) ::vega::LiquidityProvisionSubmission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidityProvisionSubmission_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LiquidityProvisionSubmission_vega_2eproto}, {
      &scc_info_LiquidityOrder_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarginLevels_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarginLevels_default_instance_;
    new (ptr) ::vega::MarginLevels();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarginLevels_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarginLevels_vega_2eproto}, {}};

static void InitDefaultsscc_info_MarketData_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarketData_default_instance_;
    new (ptr) ::vega::MarketData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketData_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketData_vega_2eproto}, {
      &scc_info_PriceMonitoringBounds_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketDepth_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarketDepth_default_instance_;
    new (ptr) ::vega::MarketDepth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDepth_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketDepth_vega_2eproto}, {
      &scc_info_PriceLevel_vega_2eproto.base,}};

static void InitDefaultsscc_info_MarketDepthUpdate_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_MarketDepthUpdate_default_instance_;
    new (ptr) ::vega::MarketDepthUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDepthUpdate_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketDepthUpdate_vega_2eproto}, {
      &scc_info_PriceLevel_vega_2eproto.base,}};

static void InitDefaultsscc_info_NetworkParameter_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NetworkParameter_default_instance_;
    new (ptr) ::vega::NetworkParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkParameter_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkParameter_vega_2eproto}, {}};

static void InitDefaultsscc_info_NodeRegistration_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NodeRegistration_default_instance_;
    new (ptr) ::vega::NodeRegistration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeRegistration_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeRegistration_vega_2eproto}, {}};

static void InitDefaultsscc_info_NodeSignature_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NodeSignature_default_instance_;
    new (ptr) ::vega::NodeSignature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeSignature_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeSignature_vega_2eproto}, {}};

static void InitDefaultsscc_info_NodeVote_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_NodeVote_default_instance_;
    new (ptr) ::vega::NodeVote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeVote_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeVote_vega_2eproto}, {}};

static void InitDefaultsscc_info_Order_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Order_default_instance_;
    new (ptr) ::vega::Order();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Order_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Order_vega_2eproto}, {
      &scc_info_PeggedOrder_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrderAmendment_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_OrderAmendment_default_instance_;
    new (ptr) ::vega::OrderAmendment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OrderAmendment_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_OrderAmendment_vega_2eproto}, {
      &scc_info_Price_vega_2eproto.base,
      &scc_info_Timestamp_vega_2eproto.base,
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_OrderCancellation_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_OrderCancellation_default_instance_;
    new (ptr) ::vega::OrderCancellation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderCancellation_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderCancellation_vega_2eproto}, {}};

static void InitDefaultsscc_info_OrderCancellationConfirmation_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_OrderCancellationConfirmation_default_instance_;
    new (ptr) ::vega::OrderCancellationConfirmation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderCancellationConfirmation_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderCancellationConfirmation_vega_2eproto}, {
      &scc_info_Order_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrderConfirmation_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_OrderConfirmation_default_instance_;
    new (ptr) ::vega::OrderConfirmation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OrderConfirmation_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OrderConfirmation_vega_2eproto}, {
      &scc_info_Order_vega_2eproto.base,
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_OrderSubmission_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_OrderSubmission_default_instance_;
    new (ptr) ::vega::OrderSubmission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderSubmission_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderSubmission_vega_2eproto}, {
      &scc_info_PeggedOrder_vega_2eproto.base,}};

static void InitDefaultsscc_info_Party_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Party_default_instance_;
    new (ptr) ::vega::Party();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Party_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Party_vega_2eproto}, {}};

static void InitDefaultsscc_info_PeggedOrder_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PeggedOrder_default_instance_;
    new (ptr) ::vega::PeggedOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeggedOrder_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeggedOrder_vega_2eproto}, {}};

static void InitDefaultsscc_info_Position_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Position_default_instance_;
    new (ptr) ::vega::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Position_vega_2eproto}, {}};

static void InitDefaultsscc_info_PositionTrade_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PositionTrade_default_instance_;
    new (ptr) ::vega::PositionTrade();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionTrade_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PositionTrade_vega_2eproto}, {}};

static void InitDefaultsscc_info_Price_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Price_default_instance_;
    new (ptr) ::vega::Price();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Price_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Price_vega_2eproto}, {}};

static void InitDefaultsscc_info_PriceLevel_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PriceLevel_default_instance_;
    new (ptr) ::vega::PriceLevel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceLevel_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PriceLevel_vega_2eproto}, {}};

static void InitDefaultsscc_info_PriceMonitoringBounds_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PriceMonitoringBounds_default_instance_;
    new (ptr) ::vega::PriceMonitoringBounds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PriceMonitoringBounds_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PriceMonitoringBounds_vega_2eproto}, {
      &scc_info_PriceMonitoringTrigger_markets_2eproto.base,}};

static void InitDefaultsscc_info_RiskFactor_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RiskFactor_default_instance_;
    new (ptr) ::vega::RiskFactor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RiskFactor_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RiskFactor_vega_2eproto}, {}};

static void InitDefaultsscc_info_RiskResult_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RiskResult_default_instance_;
    new (ptr) ::vega::RiskResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RiskResult_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RiskResult_vega_2eproto}, {
      &scc_info_RiskResult_RiskFactorsEntry_DoNotUse_vega_2eproto.base,
      &scc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_vega_2eproto.base,}};

static void InitDefaultsscc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_default_instance_;
    new (ptr) ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_vega_2eproto}, {
      &scc_info_RiskFactor_vega_2eproto.base,}};

static void InitDefaultsscc_info_RiskResult_RiskFactorsEntry_DoNotUse_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RiskResult_RiskFactorsEntry_DoNotUse_default_instance_;
    new (ptr) ::vega::RiskResult_RiskFactorsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RiskResult_RiskFactorsEntry_DoNotUse_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RiskResult_RiskFactorsEntry_DoNotUse_vega_2eproto}, {
      &scc_info_RiskFactor_vega_2eproto.base,}};

static void InitDefaultsscc_info_Signature_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Signature_default_instance_;
    new (ptr) ::vega::Signature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signature_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Signature_vega_2eproto}, {}};

static void InitDefaultsscc_info_SignedBundle_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_SignedBundle_default_instance_;
    new (ptr) ::vega::SignedBundle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignedBundle_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SignedBundle_vega_2eproto}, {
      &scc_info_Signature_vega_2eproto.base,}};

static void InitDefaultsscc_info_Statistics_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Statistics_default_instance_;
    new (ptr) ::vega::Statistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Statistics_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Statistics_vega_2eproto}, {}};

static void InitDefaultsscc_info_Timestamp_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Timestamp_default_instance_;
    new (ptr) ::vega::Timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Timestamp_vega_2eproto}, {}};

static void InitDefaultsscc_info_Trade_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Trade_default_instance_;
    new (ptr) ::vega::Trade();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trade_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Trade_vega_2eproto}, {
      &scc_info_Fee_vega_2eproto.base,}};

static void InitDefaultsscc_info_TradeSet_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TradeSet_default_instance_;
    new (ptr) ::vega::TradeSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradeSet_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradeSet_vega_2eproto}, {
      &scc_info_Trade_vega_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Transaction_default_instance_;
    new (ptr) ::vega::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transaction_vega_2eproto}, {}};

static void InitDefaultsscc_info_Transfer_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Transfer_default_instance_;
    new (ptr) ::vega::Transfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transfer_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Transfer_vega_2eproto}, {
      &scc_info_FinancialAmount_vega_2eproto.base,}};

static void InitDefaultsscc_info_TransferBalance_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TransferBalance_default_instance_;
    new (ptr) ::vega::TransferBalance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferBalance_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransferBalance_vega_2eproto}, {
      &scc_info_Account_vega_2eproto.base,}};

static void InitDefaultsscc_info_TransferRequest_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TransferRequest_default_instance_;
    new (ptr) ::vega::TransferRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferRequest_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransferRequest_vega_2eproto}, {
      &scc_info_Account_vega_2eproto.base,}};

static void InitDefaultsscc_info_TransferResponse_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TransferResponse_default_instance_;
    new (ptr) ::vega::TransferResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransferResponse_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TransferResponse_vega_2eproto}, {
      &scc_info_LedgerEntry_vega_2eproto.base,
      &scc_info_TransferBalance_vega_2eproto.base,}};

static void InitDefaultsscc_info_WithdrawExt_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_WithdrawExt_default_instance_;
    new (ptr) ::vega::WithdrawExt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawExt_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WithdrawExt_vega_2eproto}, {
      &scc_info_Erc20WithdrawExt_vega_2eproto.base,}};

static void InitDefaultsscc_info_WithdrawSubmission_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_WithdrawSubmission_default_instance_;
    new (ptr) ::vega::WithdrawSubmission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithdrawSubmission_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WithdrawSubmission_vega_2eproto}, {
      &scc_info_WithdrawExt_vega_2eproto.base,}};

static void InitDefaultsscc_info_Withdrawal_vega_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Withdrawal_default_instance_;
    new (ptr) ::vega::Withdrawal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Withdrawal_vega_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Withdrawal_vega_2eproto}, {
      &scc_info_WithdrawExt_vega_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vega_2eproto[53];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vega_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vega_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vega_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Price, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Price, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Timestamp, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Party, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Party, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::RiskFactor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RiskFactor, market_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskFactor, short__),
  PROTOBUF_FIELD_OFFSET(::vega::RiskFactor, long__),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_RiskFactorsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_RiskFactorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_RiskFactorsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_RiskFactorsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult, updatedtimestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult, riskfactors_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult, nextupdatetimestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::RiskResult, predictednextriskfactors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PeggedOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PeggedOrder, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::PeggedOrder, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Order, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, side_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, price_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, size_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, remaining_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, timeinforce_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, type_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, createdat_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, status_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, expiresat_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, reason_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, updatedat_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, version_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, batchid_),
  PROTOBUF_FIELD_OFFSET(::vega::Order, peggedorder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::OrderCancellationConfirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::OrderCancellationConfirmation, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::OrderConfirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::OrderConfirmation, order_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderConfirmation, trades_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderConfirmation, passiveordersaffected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, indicativeprice_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, indicativevolume_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, auctionstart_),
  PROTOBUF_FIELD_OFFSET(::vega::AuctionIndicativeState, auctionend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Trade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Trade, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, price_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, size_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, buyer_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, seller_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, aggressor_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, buyorder_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, sellorder_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, type_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, buyerfee_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, sellerfee_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, buyerauctionbatch_),
  PROTOBUF_FIELD_OFFSET(::vega::Trade, sellerauctionbatch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Fee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Fee, makerfee_),
  PROTOBUF_FIELD_OFFSET(::vega::Fee, infrastructurefee_),
  PROTOBUF_FIELD_OFFSET(::vega::Fee, liquidityfee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TradeSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TradeSet, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Candle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Candle, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, datetime_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, high_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, low_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, open_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, close_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, volume_),
  PROTOBUF_FIELD_OFFSET(::vega::Candle, interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PriceLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PriceLevel, price_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceLevel, numberoforders_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceLevel, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepth, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepth, buy_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepth, sell_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepth, sequencenumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepthUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepthUpdate, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepthUpdate, buy_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepthUpdate, sell_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketDepthUpdate, sequencenumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Position, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, openvolume_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, realisedpnl_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, unrealisedpnl_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, averageentryprice_),
  PROTOBUF_FIELD_OFFSET(::vega::Position, updatedat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PositionTrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PositionTrade, volume_),
  PROTOBUF_FIELD_OFFSET(::vega::PositionTrade, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, blockheight_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, backloglength_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, totalpeers_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, genesistime_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, currenttime_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, vegatime_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, status_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, txperblock_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, averagetxbytes_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, averageordersperblock_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, tradespersecond_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, orderspersecond_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, totalmarkets_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, totalamendorder_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, totalcancelorder_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, totalcreateorder_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, totalorders_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, totaltrades_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, ordersubscriptions_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, tradesubscriptions_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, candlesubscriptions_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, marketdepthsubscriptions_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, positionssubscriptions_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, accountsubscriptions_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, marketdatasubscriptions_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, appversionhash_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, appversion_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, chainversion_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, blockduration_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, uptime_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, chainid_),
  PROTOBUF_FIELD_OFFSET(::vega::Statistics, marketdepthupdatessubscriptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, status_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, txhash_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, creditedtimestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Deposit, createdtimestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, status_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, ref_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, expiry_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, txhash_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, createdtimestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, withdrawntimestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::Withdrawal, ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawSubmission, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawSubmission, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawSubmission, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawSubmission, ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawExt, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawExt, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::WithdrawExt, ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Erc20WithdrawExt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Erc20WithdrawExt, receiveraddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, orderid_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, price_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, sizedelta_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, expiresat_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, timeinforce_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, peggedoffset_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderAmendment, peggedreference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, id_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, price_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, size_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, side_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, timeinforce_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, expiresat_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, type_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderSubmission, peggedorder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::OrderCancellation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::OrderCancellation, orderid_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderCancellation, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::OrderCancellation, partyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NodeRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NodeRegistration, pubkey_),
  PROTOBUF_FIELD_OFFSET(::vega::NodeRegistration, chainpubkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NodeVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NodeVote, pubkey_),
  PROTOBUF_FIELD_OFFSET(::vega::NodeVote, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Account, id_),
  PROTOBUF_FIELD_OFFSET(::vega::Account, owner_),
  PROTOBUF_FIELD_OFFSET(::vega::Account, balance_),
  PROTOBUF_FIELD_OFFSET(::vega::Account, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::Account, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::Account, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::FinancialAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::FinancialAmount, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::FinancialAmount, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Transfer, owner_),
  PROTOBUF_FIELD_OFFSET(::vega::Transfer, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::Transfer, type_),
  PROTOBUF_FIELD_OFFSET(::vega::Transfer, minamount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, fromaccount_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, toaccount_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, minamount_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferRequest, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, fromaccount_),
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, toaccount_),
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, amount_),
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, type_),
  PROTOBUF_FIELD_OFFSET(::vega::LedgerEntry, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TransferBalance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TransferBalance, account_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferBalance, balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TransferResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::TransferResponse, transfers_),
  PROTOBUF_FIELD_OFFSET(::vega::TransferResponse, balances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, maintenancemargin_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, searchlevel_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, initialmargin_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, collateralreleaselevel_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, asset_),
  PROTOBUF_FIELD_OFFSET(::vega::MarginLevels, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, markprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, bestbidprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, bestbidvolume_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, bestofferprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, bestoffervolume_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, beststaticbidprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, beststaticbidvolume_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, beststaticofferprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, beststaticoffervolume_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, midprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, staticmidprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, market_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, openinterest_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, auctionend_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, auctionstart_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, indicativeprice_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, indicativevolume_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, markettradingmode_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, trigger_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, targetstake_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, suppliedstake_),
  PROTOBUF_FIELD_OFFSET(::vega::MarketData, pricemonitoringbounds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringBounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringBounds, minvalidprice_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringBounds, maxvalidprice_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringBounds, trigger_),
  PROTOBUF_FIELD_OFFSET(::vega::PriceMonitoringBounds, referenceprice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ErrorDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ErrorDetail, code_),
  PROTOBUF_FIELD_OFFSET(::vega::ErrorDetail, message_),
  PROTOBUF_FIELD_OFFSET(::vega::ErrorDetail, inner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::Transaction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Transaction, inputdata_),
  PROTOBUF_FIELD_OFFSET(::vega::Transaction, nonce_),
  PROTOBUF_FIELD_OFFSET(::vega::Transaction, blockheight_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::Transaction, from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Signature, sig_),
  PROTOBUF_FIELD_OFFSET(::vega::Signature, algo_),
  PROTOBUF_FIELD_OFFSET(::vega::Signature, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::SignedBundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::SignedBundle, tx_),
  PROTOBUF_FIELD_OFFSET(::vega::SignedBundle, sig_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NodeSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NodeSignature, id_),
  PROTOBUF_FIELD_OFFSET(::vega::NodeSignature, sig_),
  PROTOBUF_FIELD_OFFSET(::vega::NodeSignature, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::NetworkParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::NetworkParameter, key_),
  PROTOBUF_FIELD_OFFSET(::vega::NetworkParameter, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrder, reference_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrder, proportion_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrder, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvisionSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvisionSubmission, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvisionSubmission, commitmentamount_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvisionSubmission, fee_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvisionSubmission, sells_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvisionSubmission, buys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrderReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrderReference, orderid_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityOrderReference, liquidityorder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, id_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, partyid_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, createdat_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, updatedat_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, marketid_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, commitmentamount_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, fee_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, sells_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, buys_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, version_),
  PROTOBUF_FIELD_OFFSET(::vega::LiquidityProvision, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::EthereumConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::EthereumConfig, networkid_),
  PROTOBUF_FIELD_OFFSET(::vega::EthereumConfig, chainid_),
  PROTOBUF_FIELD_OFFSET(::vega::EthereumConfig, bridgeaddress_),
  PROTOBUF_FIELD_OFFSET(::vega::EthereumConfig, confirmations_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::Price)},
  { 6, -1, sizeof(::vega::Timestamp)},
  { 12, -1, sizeof(::vega::Party)},
  { 18, -1, sizeof(::vega::RiskFactor)},
  { 26, 33, sizeof(::vega::RiskResult_RiskFactorsEntry_DoNotUse)},
  { 35, 42, sizeof(::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse)},
  { 44, -1, sizeof(::vega::RiskResult)},
  { 53, -1, sizeof(::vega::PeggedOrder)},
  { 60, -1, sizeof(::vega::Order)},
  { 83, -1, sizeof(::vega::OrderCancellationConfirmation)},
  { 89, -1, sizeof(::vega::OrderConfirmation)},
  { 97, -1, sizeof(::vega::AuctionIndicativeState)},
  { 107, -1, sizeof(::vega::Trade)},
  { 127, -1, sizeof(::vega::Fee)},
  { 135, -1, sizeof(::vega::TradeSet)},
  { 141, -1, sizeof(::vega::Candle)},
  { 154, -1, sizeof(::vega::PriceLevel)},
  { 162, -1, sizeof(::vega::MarketDepth)},
  { 171, -1, sizeof(::vega::MarketDepthUpdate)},
  { 180, -1, sizeof(::vega::Position)},
  { 192, -1, sizeof(::vega::PositionTrade)},
  { 199, -1, sizeof(::vega::Statistics)},
  { 236, -1, sizeof(::vega::Deposit)},
  { 249, -1, sizeof(::vega::Withdrawal)},
  { 265, -1, sizeof(::vega::WithdrawSubmission)},
  { 274, -1, sizeof(::vega::WithdrawExt)},
  { 281, -1, sizeof(::vega::Erc20WithdrawExt)},
  { 287, -1, sizeof(::vega::OrderAmendment)},
  { 301, -1, sizeof(::vega::OrderSubmission)},
  { 317, -1, sizeof(::vega::OrderCancellation)},
  { 325, -1, sizeof(::vega::NodeRegistration)},
  { 332, -1, sizeof(::vega::NodeVote)},
  { 339, -1, sizeof(::vega::Account)},
  { 350, -1, sizeof(::vega::FinancialAmount)},
  { 357, -1, sizeof(::vega::Transfer)},
  { 366, -1, sizeof(::vega::TransferRequest)},
  { 377, -1, sizeof(::vega::LedgerEntry)},
  { 388, -1, sizeof(::vega::TransferBalance)},
  { 395, -1, sizeof(::vega::TransferResponse)},
  { 402, -1, sizeof(::vega::MarginLevels)},
  { 415, -1, sizeof(::vega::MarketData)},
  { 443, -1, sizeof(::vega::PriceMonitoringBounds)},
  { 452, -1, sizeof(::vega::ErrorDetail)},
  { 460, -1, sizeof(::vega::Transaction)},
  { 471, -1, sizeof(::vega::Signature)},
  { 479, -1, sizeof(::vega::SignedBundle)},
  { 486, -1, sizeof(::vega::NodeSignature)},
  { 494, -1, sizeof(::vega::NetworkParameter)},
  { 501, -1, sizeof(::vega::LiquidityOrder)},
  { 509, -1, sizeof(::vega::LiquidityProvisionSubmission)},
  { 519, -1, sizeof(::vega::LiquidityOrderReference)},
  { 526, -1, sizeof(::vega::LiquidityProvision)},
  { 542, -1, sizeof(::vega::EthereumConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Price_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Timestamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Party_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_RiskFactor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_RiskResult_RiskFactorsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_RiskResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_PeggedOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_OrderCancellationConfirmation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_OrderConfirmation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_AuctionIndicativeState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Trade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Fee_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_TradeSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Candle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_PriceLevel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_MarketDepth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_MarketDepthUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_PositionTrade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Statistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Deposit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Withdrawal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_WithdrawSubmission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_WithdrawExt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Erc20WithdrawExt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_OrderAmendment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_OrderSubmission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_OrderCancellation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_NodeRegistration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_NodeVote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_FinancialAmount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_TransferRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_LedgerEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_TransferBalance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_TransferResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_MarginLevels_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_MarketData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_PriceMonitoringBounds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ErrorDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Signature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_SignedBundle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_NodeSignature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_NetworkParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_LiquidityOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_LiquidityProvisionSubmission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_LiquidityOrderReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_LiquidityProvision_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_EthereumConfig_default_instance_),
};

const char descriptor_table_protodef_vega_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nvega.proto\022\004vega\0326github.com/mwitkow/g"
  "o-proto-validators/validator.proto\032\036goog"
  "le/protobuf/wrappers.proto\032\rmarkets.prot"
  "o\"\035\n\005Price\022\024\n\005value\030\001 \001(\004R\005value\"!\n\tTime"
  "stamp\022\024\n\005value\030\001 \001(\003R\005value\"\037\n\005Party\022\026\n\002"
  "id\030\001 \001(\tB\006\342\337\037\002 \001R\002id\"N\n\nRiskFactor\022\026\n\006ma"
  "rket\030\001 \001(\tR\006market\022\024\n\005short\030\002 \001(\001R\005short"
  "\022\022\n\004long\030\003 \001(\001R\004long\"\314\003\n\nRiskResult\022*\n\020u"
  "pdatedTimestamp\030\001 \001(\003R\020updatedTimestamp\022"
  "C\n\013riskFactors\030\002 \003(\0132!.vega.RiskResult.R"
  "iskFactorsEntryR\013riskFactors\0220\n\023nextUpda"
  "teTimestamp\030\003 \001(\003R\023nextUpdateTimestamp\022j"
  "\n\030predictedNextRiskFactors\030\004 \003(\0132..vega."
  "RiskResult.PredictedNextRiskFactorsEntry"
  "R\030predictedNextRiskFactors\032P\n\020RiskFactor"
  "sEntry\022\020\n\003key\030\001 \001(\tR\003key\022&\n\005value\030\002 \001(\0132"
  "\020.vega.RiskFactorR\005value:\0028\001\032]\n\035Predicte"
  "dNextRiskFactorsEntry\022\020\n\003key\030\001 \001(\tR\003key\022"
  "&\n\005value\030\002 \001(\0132\020.vega.RiskFactorR\005value:"
  "\0028\001\"Z\n\013PeggedOrder\0223\n\treference\030\001 \001(\0162\025."
  "vega.PeggedReferenceR\treference\022\026\n\006offse"
  "t\030\002 \001(\003R\006offset\"\330\007\n\005Order\022\016\n\002id\030\001 \001(\tR\002i"
  "d\022\032\n\010marketID\030\002 \001(\tR\010marketID\022\030\n\007partyID"
  "\030\003 \001(\tR\007partyID\022\036\n\004side\030\004 \001(\0162\n.vega.Sid"
  "eR\004side\022\024\n\005price\030\005 \001(\004R\005price\022\022\n\004size\030\006 "
  "\001(\004R\004size\022\034\n\tremaining\030\007 \001(\004R\tremaining\022"
  "9\n\013timeInForce\030\010 \001(\0162\027.vega.Order.TimeIn"
  "ForceR\013timeInForce\022$\n\004type\030\t \001(\0162\020.vega."
  "Order.TypeR\004type\022\034\n\tcreatedAt\030\n \001(\003R\tcre"
  "atedAt\022*\n\006status\030\013 \001(\0162\022.vega.Order.Stat"
  "usR\006status\022\034\n\texpiresAt\030\014 \001(\003R\texpiresAt"
  "\022\034\n\treference\030\r \001(\tR\treference\022(\n\006reason"
  "\030\016 \001(\0162\020.vega.OrderErrorR\006reason\022\034\n\tupda"
  "tedAt\030\017 \001(\003R\tupdatedAt\022\030\n\007version\030\020 \001(\004R"
  "\007version\022\030\n\007batchID\030\021 \001(\004R\007batchID\0223\n\013pe"
  "ggedOrder\030\022 \001(\0132\021.vega.PeggedOrderR\013pegg"
  "edOrder\"p\n\013TimeInForce\022\023\n\017TIF_UNSPECIFIE"
  "D\020\000\022\013\n\007TIF_GTC\020\001\022\013\n\007TIF_GTT\020\002\022\013\n\007TIF_IOC"
  "\020\003\022\013\n\007TIF_FOK\020\004\022\013\n\007TIF_GFA\020\005\022\013\n\007TIF_GFN\020"
  "\006\"O\n\004Type\022\024\n\020TYPE_UNSPECIFIED\020\000\022\016\n\nTYPE_"
  "LIMIT\020\001\022\017\n\013TYPE_MARKET\020\002\022\020\n\014TYPE_NETWORK"
  "\020\003\"\305\001\n\006Status\022\022\n\016STATUS_INVALID\020\000\022\021\n\rSTA"
  "TUS_ACTIVE\020\001\022\022\n\016STATUS_EXPIRED\020\002\022\024\n\020STAT"
  "US_CANCELLED\020\003\022\022\n\016STATUS_STOPPED\020\004\022\021\n\rST"
  "ATUS_FILLED\020\005\022\023\n\017STATUS_REJECTED\020\006\022\033\n\027ST"
  "ATUS_PARTIALLY_FILLED\020\007\022\021\n\rSTATUS_PARKED"
  "\020\010\"B\n\035OrderCancellationConfirmation\022!\n\005o"
  "rder\030\001 \001(\0132\013.vega.OrderR\005order\"\236\001\n\021Order"
  "Confirmation\022!\n\005order\030\001 \001(\0132\013.vega.Order"
  "R\005order\022#\n\006trades\030\002 \003(\0132\013.vega.TradeR\006tr"
  "ades\022A\n\025passiveOrdersAffected\030\003 \003(\0132\013.ve"
  "ga.OrderR\025passiveOrdersAffected\"\316\001\n\026Auct"
  "ionIndicativeState\022\032\n\010marketID\030\001 \001(\tR\010ma"
  "rketID\022(\n\017indicativePrice\030\002 \001(\004R\017indicat"
  "ivePrice\022*\n\020indicativeVolume\030\003 \001(\004R\020indi"
  "cativeVolume\022\"\n\014auctionStart\030\004 \001(\003R\014auct"
  "ionStart\022\036\n\nauctionEnd\030\005 \001(\003R\nauctionEnd"
  "\"\322\004\n\005Trade\022\016\n\002id\030\001 \001(\tR\002id\022\032\n\010marketID\030\002"
  " \001(\tR\010marketID\022\024\n\005price\030\003 \001(\004R\005price\022\022\n\004"
  "size\030\004 \001(\004R\004size\022\024\n\005buyer\030\005 \001(\tR\005buyer\022\026"
  "\n\006seller\030\006 \001(\tR\006seller\022(\n\taggressor\030\007 \001("
  "\0162\n.vega.SideR\taggressor\022\032\n\010buyOrder\030\010 \001"
  "(\tR\010buyOrder\022\034\n\tsellOrder\030\t \001(\tR\tsellOrd"
  "er\022\034\n\ttimestamp\030\n \001(\003R\ttimestamp\022$\n\004type"
  "\030\013 \001(\0162\020.vega.Trade.TypeR\004type\022%\n\010buyerF"
  "ee\030\014 \001(\0132\t.vega.FeeR\010buyerFee\022\'\n\tsellerF"
  "ee\030\r \001(\0132\t.vega.FeeR\tsellerFee\022,\n\021buyerA"
  "uctionBatch\030\016 \001(\004R\021buyerAuctionBatch\022.\n\022"
  "sellerAuctionBatch\030\017 \001(\004R\022sellerAuctionB"
  "atch\"o\n\004Type\022\024\n\020TYPE_UNSPECIFIED\020\000\022\020\n\014TY"
  "PE_DEFAULT\020\001\022\037\n\033TYPE_NETWORK_CLOSE_OUT_G"
  "OOD\020\002\022\036\n\032TYPE_NETWORK_CLOSE_OUT_BAD\020\003\"s\n"
  "\003Fee\022\032\n\010makerFee\030\001 \001(\004R\010makerFee\022,\n\021infr"
  "astructureFee\030\002 \001(\004R\021infrastructureFee\022\""
  "\n\014liquidityFee\030\003 \001(\004R\014liquidityFee\"/\n\010Tr"
  "adeSet\022#\n\006trades\030\001 \003(\0132\013.vega.TradeR\006tra"
  "des\"\326\001\n\006Candle\022\034\n\ttimestamp\030\001 \001(\003R\ttimes"
  "tamp\022\032\n\010datetime\030\002 \001(\tR\010datetime\022\022\n\004high"
  "\030\003 \001(\004R\004high\022\020\n\003low\030\004 \001(\004R\003low\022\022\n\004open\030\005"
  " \001(\004R\004open\022\024\n\005close\030\006 \001(\004R\005close\022\026\n\006volu"
  "me\030\007 \001(\004R\006volume\022*\n\010interval\030\010 \001(\0162\016.veg"
  "a.IntervalR\010interval\"b\n\nPriceLevel\022\024\n\005pr"
  "ice\030\001 \001(\004R\005price\022&\n\016numberOfOrders\030\002 \001(\004"
  "R\016numberOfOrders\022\026\n\006volume\030\003 \001(\004R\006volume"
  "\"\233\001\n\013MarketDepth\022\032\n\010marketID\030\001 \001(\tR\010mark"
  "etID\022\"\n\003buy\030\002 \003(\0132\020.vega.PriceLevelR\003buy"
  "\022$\n\004sell\030\003 \003(\0132\020.vega.PriceLevelR\004sell\022&"
  "\n\016sequenceNumber\030\004 \001(\004R\016sequenceNumber\"\241"
  "\001\n\021MarketDepthUpdate\022\032\n\010marketID\030\001 \001(\tR\010"
  "marketID\022\"\n\003buy\030\002 \003(\0132\020.vega.PriceLevelR"
  "\003buy\022$\n\004sell\030\003 \003(\0132\020.vega.PriceLevelR\004se"
  "ll\022&\n\016sequenceNumber\030\004 \001(\004R\016sequenceNumb"
  "er\"\364\001\n\010Position\022\032\n\010marketID\030\001 \001(\tR\010marke"
  "tID\022\030\n\007partyID\030\002 \001(\tR\007partyID\022\036\n\nopenVol"
  "ume\030\003 \001(\003R\nopenVolume\022 \n\013realisedPNL\030\004 \001"
  "(\003R\013realisedPNL\022$\n\runrealisedPNL\030\005 \001(\003R\r"
  "unrealisedPNL\022,\n\021averageEntryPrice\030\006 \001(\004"
  "R\021averageEntryPrice\022\034\n\tupdatedAt\030\007 \001(\003R\t"
  "updatedAt\"=\n\rPositionTrade\022\026\n\006volume\030\001 \001"
  "(\003R\006volume\022\024\n\005price\030\002 \001(\004R\005price\"\275\n\n\nSta"
  "tistics\022 \n\013blockHeight\030\001 \001(\004R\013blockHeigh"
  "t\022$\n\rbacklogLength\030\002 \001(\004R\rbacklogLength\022"
  "\036\n\ntotalPeers\030\003 \001(\004R\ntotalPeers\022 \n\013genes"
  "isTime\030\004 \001(\tR\013genesisTime\022 \n\013currentTime"
  "\030\005 \001(\tR\013currentTime\022\032\n\010vegaTime\030\006 \001(\tR\010v"
  "egaTime\022)\n\006status\030\007 \001(\0162\021.vega.ChainStat"
  "usR\006status\022\036\n\ntxPerBlock\030\010 \001(\004R\ntxPerBlo"
  "ck\022&\n\016averageTxBytes\030\t \001(\004R\016averageTxByt"
  "es\0224\n\025averageOrdersPerBlock\030\n \001(\004R\025avera"
  "geOrdersPerBlock\022(\n\017tradesPerSecond\030\013 \001("
  "\004R\017tradesPerSecond\022(\n\017ordersPerSecond\030\014 "
  "\001(\004R\017ordersPerSecond\022\"\n\014totalMarkets\030\r \001"
  "(\004R\014totalMarkets\022(\n\017totalAmendOrder\030\020 \001("
  "\004R\017totalAmendOrder\022*\n\020totalCancelOrder\030\021"
  " \001(\004R\020totalCancelOrder\022*\n\020totalCreateOrd"
  "er\030\022 \001(\004R\020totalCreateOrder\022 \n\013totalOrder"
  "s\030\023 \001(\004R\013totalOrders\022 \n\013totalTrades\030\024 \001("
  "\004R\013totalTrades\022.\n\022orderSubscriptions\030\025 \001"
  "(\rR\022orderSubscriptions\022.\n\022tradeSubscript"
  "ions\030\026 \001(\rR\022tradeSubscriptions\0220\n\023candle"
  "Subscriptions\030\027 \001(\rR\023candleSubscriptions"
  "\022:\n\030marketDepthSubscriptions\030\030 \001(\rR\030mark"
  "etDepthSubscriptions\0226\n\026positionsSubscri"
  "ptions\030\031 \001(\rR\026positionsSubscriptions\0222\n\024"
  "accountSubscriptions\030\032 \001(\rR\024accountSubsc"
  "riptions\0228\n\027marketDataSubscriptions\030\033 \001("
  "\rR\027marketDataSubscriptions\022&\n\016appVersion"
  "Hash\030\034 \001(\tR\016appVersionHash\022\036\n\nappVersion"
  "\030\035 \001(\tR\nappVersion\022\"\n\014chainVersion\030\036 \001(\t"
  "R\014chainVersion\022$\n\rblockDuration\030\037 \001(\004R\rb"
  "lockDuration\022\026\n\006uptime\030  \001(\tR\006uptime\022\030\n\007"
  "chainID\030! \001(\tR\007chainID\022H\n\037marketDepthUpd"
  "atesSubscriptions\030\" \001(\rR\037marketDepthUpda"
  "tesSubscriptions\"\200\003\n\007Deposit\022\016\n\002id\030\001 \001(\t"
  "R\002id\022,\n\006status\030\002 \001(\0162\024.vega.Deposit.Stat"
  "usR\006status\022\030\n\007partyID\030\003 \001(\tR\007partyID\022\024\n\005"
  "asset\030\004 \001(\tR\005asset\022\026\n\006amount\030\005 \001(\tR\006amou"
  "nt\022\026\n\006txHash\030\006 \001(\tR\006txHash\022,\n\021creditedTi"
  "mestamp\030\007 \001(\003R\021creditedTimestamp\022*\n\020crea"
  "tedTimestamp\030\010 \001(\003R\020createdTimestamp\"}\n\006"
  "Status\022\036\n\032DEPOSIT_STATUS_UNSPECIFIED\020\000\022\027"
  "\n\023DEPOSIT_STATUS_OPEN\020\001\022\034\n\030DEPOSIT_STATU"
  "S_CANCELLED\020\002\022\034\n\030DEPOSIT_STATUS_FINALIZE"
  "D\020\003\"\344\003\n\nWithdrawal\022\016\n\002id\030\001 \001(\tR\002id\022\030\n\007pa"
  "rtyID\030\002 \001(\tR\007partyID\022\026\n\006amount\030\003 \001(\004R\006am"
  "ount\022\024\n\005asset\030\004 \001(\tR\005asset\022/\n\006status\030\005 \001"
  "(\0162\027.vega.Withdrawal.StatusR\006status\022\020\n\003r"
  "ef\030\006 \001(\tR\003ref\022\026\n\006expiry\030\007 \001(\003R\006expiry\022\026\n"
  "\006txHash\030\010 \001(\tR\006txHash\022*\n\020createdTimestam"
  "p\030\t \001(\003R\020createdTimestamp\022.\n\022withdrawnTi"
  "mestamp\030\n \001(\003R\022withdrawnTimestamp\022#\n\003ext"
  "\030\013 \001(\0132\021.vega.WithdrawExtR\003ext\"\211\001\n\006Statu"
  "s\022!\n\035WITHDRAWAL_STATUS_UNSPECIFIED\020\000\022\032\n\026"
  "WITHDRAWAL_STATUS_OPEN\020\001\022\037\n\033WITHDRAWAL_S"
  "TATUS_CANCELLED\020\002\022\037\n\033WITHDRAWAL_STATUS_F"
  "INALIZED\020\003\"\201\001\n\022WithdrawSubmission\022\030\n\007par"
  "tyID\030\001 \001(\tR\007partyID\022\026\n\006amount\030\002 \001(\004R\006amo"
  "unt\022\024\n\005asset\030\003 \001(\tR\005asset\022#\n\003ext\030\004 \001(\0132\021"
  ".vega.WithdrawExtR\003ext\"D\n\013WithdrawExt\022.\n"
  "\005erc20\030\001 \001(\0132\026.vega.Erc20WithdrawExtH\000R\005"
  "erc20B\005\n\003ext\"<\n\020Erc20WithdrawExt\022(\n\017rece"
  "iverAddress\030\001 \001(\tR\017receiverAddress\"\235\003\n\016O"
  "rderAmendment\022 \n\007orderID\030\001 \001(\tB\006\342\337\037\002X\001R\007"
  "orderID\022 \n\007partyID\030\002 \001(\tB\006\342\337\037\002X\001R\007partyI"
  "D\022\032\n\010marketID\030\003 \001(\tR\010marketID\022!\n\005price\030\004"
  " \001(\0132\013.vega.PriceR\005price\022\034\n\tsizeDelta\030\005 "
  "\001(\003R\tsizeDelta\022-\n\texpiresAt\030\006 \001(\0132\017.vega"
  ".TimestampR\texpiresAt\0229\n\013timeInForce\030\007 \001"
  "(\0162\027.vega.Order.TimeInForceR\013timeInForce"
  "\022\?\n\014peggedOffset\030\010 \001(\0132\033.google.protobuf"
  ".Int64ValueR\014peggedOffset\022\?\n\017peggedRefer"
  "ence\030\t \001(\0162\025.vega.PeggedReferenceR\017pegge"
  "dReference\"\256\003\n\017OrderSubmission\022\026\n\002id\030\001 \001"
  "(\tB\006\342\337\037\002X\000R\002id\022\"\n\010marketID\030\002 \001(\tB\006\342\337\037\002X\001"
  "R\010marketID\022 \n\007partyID\030\003 \001(\tB\006\342\337\037\002X\001R\007par"
  "tyID\022\024\n\005price\030\004 \001(\004R\005price\022\032\n\004size\030\005 \001(\004"
  "B\006\342\337\037\002\020\000R\004size\022\'\n\004side\030\006 \001(\0162\n.vega.Side"
  "B\007\342\337\037\003\210\001\001R\004side\022B\n\013timeInForce\030\007 \001(\0162\027.v"
  "ega.Order.TimeInForceB\007\342\337\037\003\210\001\001R\013timeInFo"
  "rce\022\034\n\texpiresAt\030\010 \001(\003R\texpiresAt\022-\n\004typ"
  "e\030\t \001(\0162\020.vega.Order.TypeB\007\342\337\037\003\210\001\001R\004type"
  "\022\034\n\treference\030\n \001(\tR\treference\0223\n\013pegged"
  "Order\030\013 \001(\0132\021.vega.PeggedOrderR\013peggedOr"
  "der\"k\n\021OrderCancellation\022\030\n\007orderID\030\001 \001("
  "\tR\007orderID\022\032\n\010marketID\030\002 \001(\tR\010marketID\022 "
  "\n\007partyID\030\003 \001(\tB\006\342\337\037\002X\001R\007partyID\"\\\n\020Node"
  "Registration\022\036\n\006pubKey\030\001 \001(\014B\006\342\337\037\002X\001R\006pu"
  "bKey\022(\n\013chainPubKey\030\002 \001(\014B\006\342\337\037\002X\001R\013chain"
  "PubKey\"P\n\010NodeVote\022\036\n\006pubKey\030\001 \001(\014B\006\342\337\037\002"
  "X\001R\006pubKey\022$\n\treference\030\002 \001(\tB\006\342\337\037\002X\001R\tr"
  "eference\"\242\001\n\007Account\022\016\n\002id\030\001 \001(\tR\002id\022\024\n\005"
  "owner\030\002 \001(\tR\005owner\022\030\n\007balance\030\003 \001(\004R\007bal"
  "ance\022\024\n\005asset\030\004 \001(\tR\005asset\022\032\n\010marketID\030\005"
  " \001(\tR\010marketID\022%\n\004type\030\006 \001(\0162\021.vega.Acco"
  "untTypeR\004type\"\?\n\017FinancialAmount\022\026\n\006amou"
  "nt\030\001 \001(\003R\006amount\022\024\n\005asset\030\002 \001(\tR\005asset\"\225"
  "\001\n\010Transfer\022\024\n\005owner\030\001 \001(\tR\005owner\022-\n\006amo"
  "unt\030\002 \001(\0132\025.vega.FinancialAmountR\006amount"
  "\022&\n\004type\030\003 \001(\0162\022.vega.TransferTypeR\004type"
  "\022\034\n\tminAmount\030\004 \001(\003R\tminAmount\"\331\001\n\017Trans"
  "ferRequest\022/\n\013fromAccount\030\001 \003(\0132\r.vega.A"
  "ccountR\013fromAccount\022+\n\ttoAccount\030\002 \003(\0132\r"
  ".vega.AccountR\ttoAccount\022\026\n\006amount\030\003 \001(\004"
  "R\006amount\022\034\n\tminAmount\030\004 \001(\004R\tminAmount\022\024"
  "\n\005asset\030\005 \001(\tR\005asset\022\034\n\treference\030\006 \001(\tR"
  "\treference\"\265\001\n\013LedgerEntry\022 \n\013fromAccoun"
  "t\030\001 \001(\tR\013fromAccount\022\034\n\ttoAccount\030\002 \001(\tR"
  "\ttoAccount\022\026\n\006amount\030\003 \001(\004R\006amount\022\034\n\tre"
  "ference\030\004 \001(\tR\treference\022\022\n\004type\030\005 \001(\tR\004"
  "type\022\034\n\ttimestamp\030\006 \001(\003R\ttimestamp\"T\n\017Tr"
  "ansferBalance\022\'\n\007account\030\001 \001(\0132\r.vega.Ac"
  "countR\007account\022\030\n\007balance\030\002 \001(\004R\007balance"
  "\"v\n\020TransferResponse\022/\n\ttransfers\030\001 \003(\0132"
  "\021.vega.LedgerEntryR\ttransfers\0221\n\010balance"
  "s\030\002 \003(\0132\025.vega.TransferBalanceR\010balances"
  "\"\246\002\n\014MarginLevels\022,\n\021maintenanceMargin\030\001"
  " \001(\004R\021maintenanceMargin\022 \n\013searchLevel\030\002"
  " \001(\004R\013searchLevel\022$\n\rinitialMargin\030\003 \001(\004"
  "R\rinitialMargin\0226\n\026collateralReleaseLeve"
  "l\030\004 \001(\004R\026collateralReleaseLevel\022\030\n\007party"
  "ID\030\005 \001(\tR\007partyID\022\032\n\010marketID\030\006 \001(\tR\010mar"
  "ketID\022\024\n\005asset\030\007 \001(\tR\005asset\022\034\n\ttimestamp"
  "\030\010 \001(\003R\ttimestamp\"\335\007\n\nMarketData\022\034\n\tmark"
  "Price\030\001 \001(\004R\tmarkPrice\022\"\n\014bestBidPrice\030\002"
  " \001(\004R\014bestBidPrice\022$\n\rbestBidVolume\030\003 \001("
  "\004R\rbestBidVolume\022&\n\016bestOfferPrice\030\004 \001(\004"
  "R\016bestOfferPrice\022(\n\017bestOfferVolume\030\005 \001("
  "\004R\017bestOfferVolume\022.\n\022bestStaticBidPrice"
  "\030\006 \001(\004R\022bestStaticBidPrice\0220\n\023bestStatic"
  "BidVolume\030\007 \001(\004R\023bestStaticBidVolume\0222\n\024"
  "bestStaticOfferPrice\030\010 \001(\004R\024bestStaticOf"
  "ferPrice\0224\n\025bestStaticOfferVolume\030\t \001(\004R"
  "\025bestStaticOfferVolume\022\032\n\010midPrice\030\n \001(\004"
  "R\010midPrice\022&\n\016staticMidPrice\030\013 \001(\004R\016stat"
  "icMidPrice\022\026\n\006market\030\014 \001(\tR\006market\022\034\n\tti"
  "mestamp\030\r \001(\003R\ttimestamp\022\"\n\014openInterest"
  "\030\016 \001(\004R\014openInterest\022\036\n\nauctionEnd\030\017 \001(\003"
  "R\nauctionEnd\022\"\n\014auctionStart\030\020 \001(\003R\014auct"
  "ionStart\022(\n\017indicativePrice\030\021 \001(\004R\017indic"
  "ativePrice\022*\n\020indicativeVolume\030\022 \001(\004R\020in"
  "dicativeVolume\022F\n\021marketTradingMode\030\023 \001("
  "\0162\030.vega.Market.TradingModeR\021marketTradi"
  "ngMode\022.\n\007trigger\030\024 \001(\0162\024.vega.AuctionTr"
  "iggerR\007trigger\022 \n\013targetStake\030\025 \001(\tR\013tar"
  "getStake\022$\n\rsuppliedStake\030\026 \001(\tR\rsupplie"
  "dStake\022Q\n\025priceMonitoringBounds\030\027 \003(\0132\033."
  "vega.PriceMonitoringBoundsR\025priceMonitor"
  "ingBounds\"\303\001\n\025PriceMonitoringBounds\022$\n\rm"
  "inValidPrice\030\001 \001(\004R\rminValidPrice\022$\n\rmax"
  "ValidPrice\030\002 \001(\004R\rmaxValidPrice\0226\n\007trigg"
  "er\030\003 \001(\0132\034.vega.PriceMonitoringTriggerR\007"
  "trigger\022&\n\016referencePrice\030\004 \001(\001R\016referen"
  "cePrice\"Q\n\013ErrorDetail\022\022\n\004code\030\001 \001(\005R\004co"
  "de\022\030\n\007message\030\002 \001(\tR\007message\022\024\n\005inner\030\003 "
  "\001(\tR\005inner\"\243\001\n\013Transaction\022\034\n\tinputData\030"
  "\001 \001(\014R\tinputData\022\024\n\005nonce\030\002 \001(\004R\005nonce\022 "
  "\n\013blockHeight\030\003 \001(\004R\013blockHeight\022\033\n\007addr"
  "ess\030\351\007 \001(\014H\000R\007address\022\031\n\006pubKey\030\352\007 \001(\014H\000"
  "R\006pubKeyB\006\n\004from\"K\n\tSignature\022\020\n\003sig\030\001 \001"
  "(\014R\003sig\022\022\n\004algo\030\002 \001(\tR\004algo\022\030\n\007version\030\003"
  " \001(\004R\007version\"A\n\014SignedBundle\022\016\n\002tx\030\001 \001("
  "\014R\002tx\022!\n\003sig\030\002 \001(\0132\017.vega.SignatureR\003sig"
  "\"^\n\rNodeSignature\022\016\n\002ID\030\001 \001(\tR\002ID\022\020\n\003sig"
  "\030\002 \001(\014R\003sig\022+\n\004kind\030\003 \001(\0162\027.vega.NodeSig"
  "natureKindR\004kind\":\n\020NetworkParameter\022\020\n\003"
  "Key\030\001 \001(\tR\003Key\022\024\n\005Value\030\002 \001(\tR\005Value\"}\n\016"
  "LiquidityOrder\0223\n\treference\030\001 \001(\0162\025.vega"
  ".PeggedReferenceR\treference\022\036\n\nproportio"
  "n\030\002 \001(\rR\nproportion\022\026\n\006offset\030\003 \001(\003R\006off"
  "set\"\326\001\n\034LiquidityProvisionSubmission\022\"\n\010"
  "marketID\030\001 \001(\tB\006\342\337\037\002X\001R\010marketID\022*\n\020comm"
  "itmentAmount\030\002 \001(\004R\020commitmentAmount\022\020\n\003"
  "fee\030\003 \001(\tR\003fee\022*\n\005Sells\030\004 \003(\0132\024.vega.Liq"
  "uidityOrderR\005Sells\022(\n\004Buys\030\005 \003(\0132\024.vega."
  "LiquidityOrderR\004Buys\"q\n\027LiquidityOrderRe"
  "ference\022\030\n\007orderID\030\001 \001(\tR\007orderID\022<\n\016liq"
  "uidityOrder\030\002 \001(\0132\024.vega.LiquidityOrderR"
  "\016liquidityOrder\"\360\004\n\022LiquidityProvision\022\016"
  "\n\002id\030\001 \001(\tR\002id\022\030\n\007partyID\030\002 \001(\tR\007partyID"
  "\022\034\n\tcreatedAt\030\003 \001(\003R\tcreatedAt\022\034\n\tupdate"
  "dAt\030\004 \001(\003R\tupdatedAt\022\"\n\010marketID\030\005 \001(\tB\006"
  "\342\337\037\002X\001R\010marketID\022*\n\020commitmentAmount\030\006 \001"
  "(\004R\020commitmentAmount\022\020\n\003fee\030\007 \001(\tR\003fee\0223"
  "\n\005sells\030\010 \003(\0132\035.vega.LiquidityOrderRefer"
  "enceR\005sells\0221\n\004buys\030\t \003(\0132\035.vega.Liquidi"
  "tyOrderReferenceR\004buys\022\030\n\007version\030\n \001(\tR"
  "\007version\0227\n\006status\030\013 \001(\0162\037.vega.Liquidit"
  "yProvision.StatusR\006status\"\326\001\n\006Status\022*\n&"
  "LIQUIDITY_PROVISION_STATUS_UNSPECIFIED\020\000"
  "\022%\n!LIQUIDITY_PROVISION_STATUS_ACTIVE\020\001\022"
  "&\n\"LIQUIDITY_PROVISION_STATUS_STOPPED\020\002\022"
  "(\n$LIQUIDITY_PROVISION_STATUS_CANCELLED\020"
  "\003\022\'\n#LIQUIDITY_PROVISION_STATUS_REJECTED"
  "\020\004\"\224\001\n\016EthereumConfig\022\034\n\tnetworkId\030\001 \001(\t"
  "R\tnetworkId\022\030\n\007chainId\030\002 \001(\tR\007chainId\022$\n"
  "\rbridgeAddress\030\003 \001(\tR\rbridgeAddress\022$\n\rc"
  "onfirmations\030\004 \001(\rR\rconfirmations*9\n\004Sid"
  "e\022\024\n\020SIDE_UNSPECIFIED\020\000\022\014\n\010SIDE_BUY\020\001\022\r\n"
  "\tSIDE_SELL\020\002*\230\001\n\010Interval\022\030\n\024INTERVAL_UN"
  "SPECIFIED\020\000\022\020\n\014INTERVAL_I1M\020<\022\021\n\014INTERVA"
  "L_I5M\020\254\002\022\022\n\rINTERVAL_I15M\020\204\007\022\021\n\014INTERVAL"
  "_I1H\020\220\034\022\022\n\014INTERVAL_I6H\020\340\250\001\022\022\n\014INTERVAL_"
  "I1D\020\200\243\005*\243\001\n\016AuctionTrigger\022\037\n\033AUCTION_TR"
  "IGGER_UNSPECIFIED\020\000\022\031\n\025AUCTION_TRIGGER_B"
  "ATCH\020\001\022\033\n\027AUCTION_TRIGGER_OPENING\020\002\022\031\n\025A"
  "UCTION_TRIGGER_PRICE\020\003\022\035\n\031AUCTION_TRIGGE"
  "R_LIQUIDITY\020\004*\213\001\n\017PeggedReference\022 \n\034PEG"
  "GED_REFERENCE_UNSPECIFIED\020\000\022\030\n\024PEGGED_RE"
  "FERENCE_MID\020\001\022\035\n\031PEGGED_REFERENCE_BEST_B"
  "ID\020\002\022\035\n\031PEGGED_REFERENCE_BEST_ASK\020\003*\267\017\n\n"
  "OrderError\022\024\n\020ORDER_ERROR_NONE\020\000\022!\n\035ORDE"
  "R_ERROR_INVALID_MARKET_ID\020\001\022 \n\034ORDER_ERR"
  "OR_INVALID_ORDER_ID\020\002\022\037\n\033ORDER_ERROR_OUT"
  "_OF_SEQUENCE\020\003\022&\n\"ORDER_ERROR_INVALID_RE"
  "MAINING_SIZE\020\004\022\034\n\030ORDER_ERROR_TIME_FAILU"
  "RE\020\005\022\037\n\033ORDER_ERROR_REMOVAL_FAILURE\020\006\022+\n"
  "\'ORDER_ERROR_INVALID_EXPIRATION_DATETIME"
  "\020\007\022\'\n#ORDER_ERROR_INVALID_ORDER_REFERENC"
  "E\020\010\022 \n\034ORDER_ERROR_EDIT_NOT_ALLOWED\020\t\022\035\n"
  "\031ORDER_ERROR_AMEND_FAILURE\020\n\022\031\n\025ORDER_ER"
  "ROR_NOT_FOUND\020\013\022 \n\034ORDER_ERROR_INVALID_P"
  "ARTY_ID\020\014\022\035\n\031ORDER_ERROR_MARKET_CLOSED\020\r"
  "\022#\n\037ORDER_ERROR_MARGIN_CHECK_FAILED\020\016\022\'\n"
  "#ORDER_ERROR_MISSING_GENERAL_ACCOUNT\020\017\022\036"
  "\n\032ORDER_ERROR_INTERNAL_ERROR\020\020\022\034\n\030ORDER_"
  "ERROR_INVALID_SIZE\020\021\022#\n\037ORDER_ERROR_INVA"
  "LID_PERSISTENCE\020\022\022\034\n\030ORDER_ERROR_INVALID"
  "_TYPE\020\023\022\034\n\030ORDER_ERROR_SELF_TRADING\020\024\022.\n"
  "*ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_F"
  "EES\020\025\022%\n!ORDER_ERROR_INCORRECT_MARKET_TY"
  "PE\020\026\022%\n!ORDER_ERROR_INVALID_TIME_IN_FORC"
  "E\020\027\022+\n\'ORDER_ERROR_GFN_ORDER_DURING_AN_A"
  "UCTION\020\030\0223\n/ORDER_ERROR_GFA_ORDER_DURING"
  "_CONTINUOUS_TRADING\020\031\0224\n0ORDER_ERROR_CAN"
  "NOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT\020\032\022)\n%O"
  "RDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT\020\033\022,"
  "\n(ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRY"
  "AT\020\034\022*\n&ORDER_ERROR_CANNOT_AMEND_TO_FOK_"
  "OR_IOC\020\035\022*\n&ORDER_ERROR_CANNOT_AMEND_TO_"
  "GFA_OR_GFN\020\036\022,\n(ORDER_ERROR_CANNOT_AMEND"
  "_FROM_GFA_OR_GFN\020\037\0224\n0ORDER_ERROR_CANNOT"
  "_SEND_IOC_ORDER_DURING_AUCTION\020 \0224\n0ORDE"
  "R_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUC"
  "TION\020!\022#\n\037ORDER_ERROR_MUST_BE_LIMIT_ORDE"
  "R\020\"\022\"\n\036ORDER_ERROR_MUST_BE_GTT_OR_GTC\020#\022"
  "\'\n#ORDER_ERROR_WITHOUT_REFERENCE_PRICE\020$"
  "\0223\n/ORDER_ERROR_BUY_CANNOT_REFERENCE_BES"
  "T_ASK_PRICE\020%\0224\n0ORDER_ERROR_OFFSET_MUST"
  "_BE_LESS_OR_EQUAL_TO_ZERO\020&\022-\n)ORDER_ERR"
  "OR_OFFSET_MUST_BE_LESS_THAN_ZERO\020\'\0227\n3OR"
  "DER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUA"
  "L_TO_ZERO\020(\0224\n0ORDER_ERROR_SELL_CANNOT_R"
  "EFERENCE_BEST_BID_PRICE\020)\0220\n,ORDER_ERROR"
  "_OFFSET_MUST_BE_GREATER_THAN_ZERO\020*\022*\n&O"
  "RDER_ERROR_INSUFFICIENT_ASSET_BALANCE\020+\022"
  "E\nAORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER"
  "_DETAILS_ON_NON_PEGGED_ORDER\020,\022.\n*ORDER_"
  "ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER\020-\0225"
  "\n1ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_P"
  "EGGED_ORDER\020.*\202\001\n\013ChainStatus\022\034\n\030CHAIN_S"
  "TATUS_UNSPECIFIED\020\000\022\035\n\031CHAIN_STATUS_DISC"
  "ONNECTED\020\001\022\032\n\026CHAIN_STATUS_REPLAYING\020\002\022\032"
  "\n\026CHAIN_STATUS_CONNECTED\020\003*\315\002\n\013AccountTy"
  "pe\022\034\n\030ACCOUNT_TYPE_UNSPECIFIED\020\000\022\032\n\026ACCO"
  "UNT_TYPE_INSURANCE\020\001\022\033\n\027ACCOUNT_TYPE_SET"
  "TLEMENT\020\002\022\027\n\023ACCOUNT_TYPE_MARGIN\020\003\022\030\n\024AC"
  "COUNT_TYPE_GENERAL\020\004\022$\n ACCOUNT_TYPE_FEE"
  "S_INFRASTRUCTURE\020\005\022\037\n\033ACCOUNT_TYPE_FEES_"
  "LIQUIDITY\020\006\022\033\n\027ACCOUNT_TYPE_FEES_MAKER\020\007"
  "\022\036\n\032ACCOUNT_TYPE_LOCK_WITHDRAW\020\010\022\025\n\021ACCO"
  "UNT_TYPE_BOND\020\t\022\031\n\025ACCOUNT_TYPE_EXTERNAL"
  "\020\n*\265\004\n\014TransferType\022\035\n\031TRANSFER_TYPE_UNS"
  "PECIFIED\020\000\022\026\n\022TRANSFER_TYPE_LOSS\020\001\022\025\n\021TR"
  "ANSFER_TYPE_WIN\020\002\022\027\n\023TRANSFER_TYPE_CLOSE"
  "\020\003\022\032\n\026TRANSFER_TYPE_MTM_LOSS\020\004\022\031\n\025TRANSF"
  "ER_TYPE_MTM_WIN\020\005\022\034\n\030TRANSFER_TYPE_MARGI"
  "N_LOW\020\006\022\035\n\031TRANSFER_TYPE_MARGIN_HIGH\020\007\022$"
  "\n TRANSFER_TYPE_MARGIN_CONFISCATED\020\010\022\037\n\033"
  "TRANSFER_TYPE_MAKER_FEE_PAY\020\t\022#\n\037TRANSFE"
  "R_TYPE_MAKER_FEE_RECEIVE\020\n\022(\n$TRANSFER_T"
  "YPE_INFRASTRUCTURE_FEE_PAY\020\013\022#\n\037TRANSFER"
  "_TYPE_LIQUIDITY_FEE_PAY\020\014\022\032\n\026TRANSFER_TY"
  "PE_BOND_LOW\020\r\022\033\n\027TRANSFER_TYPE_BOND_HIGH"
  "\020\016\022\037\n\033TRANSFER_TYPE_WITHDRAW_LOCK\020\017\022\032\n\026T"
  "RANSFER_TYPE_WITHDRAW\020\020\022\031\n\025TRANSFER_TYPE"
  "_DEPOSIT\020\021*\205\001\n\021NodeSignatureKind\022#\n\037NODE"
  "_SIGNATURE_KIND_UNSPECIFIED\020\000\022!\n\035NODE_SI"
  "GNATURE_KIND_ASSET_NEW\020\001\022(\n$NODE_SIGNATU"
  "RE_KIND_ASSET_WITHDRAWAL\020\002B7\n\024io.vegapro"
  "tocol.vegaZ\037code.vegaprotocol.io/vega/pr"
  "otob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vega_2eproto_deps[3] = {
  &::descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_markets_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vega_2eproto_sccs[53] = {
  &scc_info_Account_vega_2eproto.base,
  &scc_info_AuctionIndicativeState_vega_2eproto.base,
  &scc_info_Candle_vega_2eproto.base,
  &scc_info_Deposit_vega_2eproto.base,
  &scc_info_Erc20WithdrawExt_vega_2eproto.base,
  &scc_info_ErrorDetail_vega_2eproto.base,
  &scc_info_EthereumConfig_vega_2eproto.base,
  &scc_info_Fee_vega_2eproto.base,
  &scc_info_FinancialAmount_vega_2eproto.base,
  &scc_info_LedgerEntry_vega_2eproto.base,
  &scc_info_LiquidityOrder_vega_2eproto.base,
  &scc_info_LiquidityOrderReference_vega_2eproto.base,
  &scc_info_LiquidityProvision_vega_2eproto.base,
  &scc_info_LiquidityProvisionSubmission_vega_2eproto.base,
  &scc_info_MarginLevels_vega_2eproto.base,
  &scc_info_MarketData_vega_2eproto.base,
  &scc_info_MarketDepth_vega_2eproto.base,
  &scc_info_MarketDepthUpdate_vega_2eproto.base,
  &scc_info_NetworkParameter_vega_2eproto.base,
  &scc_info_NodeRegistration_vega_2eproto.base,
  &scc_info_NodeSignature_vega_2eproto.base,
  &scc_info_NodeVote_vega_2eproto.base,
  &scc_info_Order_vega_2eproto.base,
  &scc_info_OrderAmendment_vega_2eproto.base,
  &scc_info_OrderCancellation_vega_2eproto.base,
  &scc_info_OrderCancellationConfirmation_vega_2eproto.base,
  &scc_info_OrderConfirmation_vega_2eproto.base,
  &scc_info_OrderSubmission_vega_2eproto.base,
  &scc_info_Party_vega_2eproto.base,
  &scc_info_PeggedOrder_vega_2eproto.base,
  &scc_info_Position_vega_2eproto.base,
  &scc_info_PositionTrade_vega_2eproto.base,
  &scc_info_Price_vega_2eproto.base,
  &scc_info_PriceLevel_vega_2eproto.base,
  &scc_info_PriceMonitoringBounds_vega_2eproto.base,
  &scc_info_RiskFactor_vega_2eproto.base,
  &scc_info_RiskResult_vega_2eproto.base,
  &scc_info_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_vega_2eproto.base,
  &scc_info_RiskResult_RiskFactorsEntry_DoNotUse_vega_2eproto.base,
  &scc_info_Signature_vega_2eproto.base,
  &scc_info_SignedBundle_vega_2eproto.base,
  &scc_info_Statistics_vega_2eproto.base,
  &scc_info_Timestamp_vega_2eproto.base,
  &scc_info_Trade_vega_2eproto.base,
  &scc_info_TradeSet_vega_2eproto.base,
  &scc_info_Transaction_vega_2eproto.base,
  &scc_info_Transfer_vega_2eproto.base,
  &scc_info_TransferBalance_vega_2eproto.base,
  &scc_info_TransferRequest_vega_2eproto.base,
  &scc_info_TransferResponse_vega_2eproto.base,
  &scc_info_WithdrawExt_vega_2eproto.base,
  &scc_info_WithdrawSubmission_vega_2eproto.base,
  &scc_info_Withdrawal_vega_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vega_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vega_2eproto = {
  false, false, descriptor_table_protodef_vega_2eproto, "vega.proto", 15611,
  &descriptor_table_vega_2eproto_once, descriptor_table_vega_2eproto_sccs, descriptor_table_vega_2eproto_deps, 53, 3,
  schemas, file_default_instances, TableStruct_vega_2eproto::offsets,
  file_level_metadata_vega_2eproto, 53, file_level_enum_descriptors_vega_2eproto, file_level_service_descriptors_vega_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vega_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vega_2eproto)), true);
namespace vega {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_TimeInForce_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[0];
}
bool Order_TimeInForce_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Order_TimeInForce Order::TIF_UNSPECIFIED;
constexpr Order_TimeInForce Order::TIF_GTC;
constexpr Order_TimeInForce Order::TIF_GTT;
constexpr Order_TimeInForce Order::TIF_IOC;
constexpr Order_TimeInForce Order::TIF_FOK;
constexpr Order_TimeInForce Order::TIF_GFA;
constexpr Order_TimeInForce Order::TIF_GFN;
constexpr Order_TimeInForce Order::TimeInForce_MIN;
constexpr Order_TimeInForce Order::TimeInForce_MAX;
constexpr int Order::TimeInForce_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[1];
}
bool Order_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Order_Type Order::TYPE_UNSPECIFIED;
constexpr Order_Type Order::TYPE_LIMIT;
constexpr Order_Type Order::TYPE_MARKET;
constexpr Order_Type Order::TYPE_NETWORK;
constexpr Order_Type Order::Type_MIN;
constexpr Order_Type Order::Type_MAX;
constexpr int Order::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[2];
}
bool Order_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Order_Status Order::STATUS_INVALID;
constexpr Order_Status Order::STATUS_ACTIVE;
constexpr Order_Status Order::STATUS_EXPIRED;
constexpr Order_Status Order::STATUS_CANCELLED;
constexpr Order_Status Order::STATUS_STOPPED;
constexpr Order_Status Order::STATUS_FILLED;
constexpr Order_Status Order::STATUS_REJECTED;
constexpr Order_Status Order::STATUS_PARTIALLY_FILLED;
constexpr Order_Status Order::STATUS_PARKED;
constexpr Order_Status Order::Status_MIN;
constexpr Order_Status Order::Status_MAX;
constexpr int Order::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Trade_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[3];
}
bool Trade_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Trade_Type Trade::TYPE_UNSPECIFIED;
constexpr Trade_Type Trade::TYPE_DEFAULT;
constexpr Trade_Type Trade::TYPE_NETWORK_CLOSE_OUT_GOOD;
constexpr Trade_Type Trade::TYPE_NETWORK_CLOSE_OUT_BAD;
constexpr Trade_Type Trade::Type_MIN;
constexpr Trade_Type Trade::Type_MAX;
constexpr int Trade::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Deposit_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[4];
}
bool Deposit_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Deposit_Status Deposit::DEPOSIT_STATUS_UNSPECIFIED;
constexpr Deposit_Status Deposit::DEPOSIT_STATUS_OPEN;
constexpr Deposit_Status Deposit::DEPOSIT_STATUS_CANCELLED;
constexpr Deposit_Status Deposit::DEPOSIT_STATUS_FINALIZED;
constexpr Deposit_Status Deposit::Status_MIN;
constexpr Deposit_Status Deposit::Status_MAX;
constexpr int Deposit::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Withdrawal_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[5];
}
bool Withdrawal_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Withdrawal_Status Withdrawal::WITHDRAWAL_STATUS_UNSPECIFIED;
constexpr Withdrawal_Status Withdrawal::WITHDRAWAL_STATUS_OPEN;
constexpr Withdrawal_Status Withdrawal::WITHDRAWAL_STATUS_CANCELLED;
constexpr Withdrawal_Status Withdrawal::WITHDRAWAL_STATUS_FINALIZED;
constexpr Withdrawal_Status Withdrawal::Status_MIN;
constexpr Withdrawal_Status Withdrawal::Status_MAX;
constexpr int Withdrawal::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LiquidityProvision_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[6];
}
bool LiquidityProvision_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LiquidityProvision_Status LiquidityProvision::LIQUIDITY_PROVISION_STATUS_UNSPECIFIED;
constexpr LiquidityProvision_Status LiquidityProvision::LIQUIDITY_PROVISION_STATUS_ACTIVE;
constexpr LiquidityProvision_Status LiquidityProvision::LIQUIDITY_PROVISION_STATUS_STOPPED;
constexpr LiquidityProvision_Status LiquidityProvision::LIQUIDITY_PROVISION_STATUS_CANCELLED;
constexpr LiquidityProvision_Status LiquidityProvision::LIQUIDITY_PROVISION_STATUS_REJECTED;
constexpr LiquidityProvision_Status LiquidityProvision::Status_MIN;
constexpr LiquidityProvision_Status LiquidityProvision::Status_MAX;
constexpr int LiquidityProvision::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Side_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[7];
}
bool Side_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Interval_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[8];
}
bool Interval_IsValid(int value) {
  switch (value) {
    case 0:
    case 60:
    case 300:
    case 900:
    case 3600:
    case 21600:
    case 86400:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuctionTrigger_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[9];
}
bool AuctionTrigger_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeggedReference_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[10];
}
bool PeggedReference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[11];
}
bool OrderError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChainStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[12];
}
bool ChainStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[13];
}
bool AccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransferType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[14];
}
bool TransferType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeSignatureKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vega_2eproto);
  return file_level_enum_descriptors_vega_2eproto[15];
}
bool NodeSignatureKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Price::_Internal {
 public:
};

Price::Price(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Price)
}
Price::Price(const Price& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:vega.Price)
}

void Price::SharedCtor() {
  value_ = PROTOBUF_ULONGLONG(0);
}

Price::~Price() {
  // @@protoc_insertion_point(destructor:vega.Price)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Price::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Price::ArenaDtor(void* object) {
  Price* _this = reinterpret_cast< Price* >(object);
  (void)_this;
}
void Price::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Price::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Price& Price::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Price_vega_2eproto.base);
  return *internal_default_instance();
}


void Price::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Price)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Price::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Price::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Price)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [json_name = "value"];
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Price)
  return target;
}

size_t Price::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Price)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [json_name = "value"];
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Price::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Price)
  GOOGLE_DCHECK_NE(&from, this);
  const Price* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Price>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Price)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Price)
    MergeFrom(*source);
  }
}

void Price::MergeFrom(const Price& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Price)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Price::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Price)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Price::CopyFrom(const Price& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Price)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Price::IsInitialized() const {
  return true;
}

void Price::InternalSwap(Price* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Price::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Timestamp::_Internal {
 public:
};

Timestamp::Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:vega.Timestamp)
}

void Timestamp::SharedCtor() {
  value_ = PROTOBUF_LONGLONG(0);
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:vega.Timestamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Timestamp::ArenaDtor(void* object) {
  Timestamp* _this = reinterpret_cast< Timestamp* >(object);
  (void)_this;
}
void Timestamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Timestamp& Timestamp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Timestamp_vega_2eproto.base);
  return *internal_default_instance();
}


void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Timestamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1 [json_name = "value"];
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Timestamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1 [json_name = "value"];
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timestamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Timestamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Timestamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Timestamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Timestamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Timestamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Party::_Internal {
 public:
};

Party::Party(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Party)
}
Party::Party(const Party& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.Party)
}

void Party::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Party_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Party::~Party() {
  // @@protoc_insertion_point(destructor:vega.Party)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Party::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Party::ArenaDtor(void* object) {
  Party* _this = reinterpret_cast< Party* >(object);
  (void)_this;
}
void Party::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Party::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Party& Party::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Party_vega_2eproto.base);
  return *internal_default_instance();
}


void Party::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Party)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Party::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Party.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Party::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Party)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Party.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Party)
  return target;
}

size_t Party::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Party)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Party::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Party)
  GOOGLE_DCHECK_NE(&from, this);
  const Party* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Party>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Party)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Party)
    MergeFrom(*source);
  }
}

void Party::MergeFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Party)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void Party::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Party::CopyFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Party::IsInitialized() const {
  return true;
}

void Party::InternalSwap(Party* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Party::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RiskFactor::_Internal {
 public:
};

RiskFactor::RiskFactor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.RiskFactor)
}
RiskFactor::RiskFactor(const RiskFactor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market(), 
      GetArena());
  }
  ::memcpy(&short__, &from.short__,
    static_cast<size_t>(reinterpret_cast<char*>(&long__) -
    reinterpret_cast<char*>(&short__)) + sizeof(long__));
  // @@protoc_insertion_point(copy_constructor:vega.RiskFactor)
}

void RiskFactor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RiskFactor_vega_2eproto.base);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&short__) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&long__) -
      reinterpret_cast<char*>(&short__)) + sizeof(long__));
}

RiskFactor::~RiskFactor() {
  // @@protoc_insertion_point(destructor:vega.RiskFactor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RiskFactor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RiskFactor::ArenaDtor(void* object) {
  RiskFactor* _this = reinterpret_cast< RiskFactor* >(object);
  (void)_this;
}
void RiskFactor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RiskFactor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RiskFactor& RiskFactor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RiskFactor_vega_2eproto.base);
  return *internal_default_instance();
}


void RiskFactor::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.RiskFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_.ClearToEmpty();
  ::memset(&short__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&long__) -
      reinterpret_cast<char*>(&short__)) + sizeof(long__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RiskFactor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.RiskFactor.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double short = 2 [json_name = "short"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          short__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double long = 3 [json_name = "long"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          long__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RiskFactor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.RiskFactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market = 1 [json_name = "market"];
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.RiskFactor.market");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market(), target);
  }

  // double short = 2 [json_name = "short"];
  if (!(this->short_() <= 0 && this->short_() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_short_(), target);
  }

  // double long = 3 [json_name = "long"];
  if (!(this->long_() <= 0 && this->long_() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_long_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.RiskFactor)
  return target;
}

size_t RiskFactor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.RiskFactor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market = 1 [json_name = "market"];
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // double short = 2 [json_name = "short"];
  if (!(this->short_() <= 0 && this->short_() >= 0)) {
    total_size += 1 + 8;
  }

  // double long = 3 [json_name = "long"];
  if (!(this->long_() <= 0 && this->long_() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RiskFactor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.RiskFactor)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskFactor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RiskFactor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.RiskFactor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.RiskFactor)
    MergeFrom(*source);
  }
}

void RiskFactor::MergeFrom(const RiskFactor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.RiskFactor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market().size() > 0) {
    _internal_set_market(from._internal_market());
  }
  if (!(from.short_() <= 0 && from.short_() >= 0)) {
    _internal_set_short_(from._internal_short_());
  }
  if (!(from.long_() <= 0 && from.long_() >= 0)) {
    _internal_set_long_(from._internal_long_());
  }
}

void RiskFactor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.RiskFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskFactor::CopyFrom(const RiskFactor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.RiskFactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskFactor::IsInitialized() const {
  return true;
}

void RiskFactor::InternalSwap(RiskFactor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RiskFactor, long__)
      + sizeof(RiskFactor::long__)
      - PROTOBUF_FIELD_OFFSET(RiskFactor, short__)>(
          reinterpret_cast<char*>(&short__),
          reinterpret_cast<char*>(&other->short__));
}

::PROTOBUF_NAMESPACE_ID::Metadata RiskFactor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RiskResult_RiskFactorsEntry_DoNotUse::RiskResult_RiskFactorsEntry_DoNotUse() {}
RiskResult_RiskFactorsEntry_DoNotUse::RiskResult_RiskFactorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RiskResult_RiskFactorsEntry_DoNotUse::MergeFrom(const RiskResult_RiskFactorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RiskResult_RiskFactorsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RiskResult_RiskFactorsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse() {}
RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::MergeFrom(const RiskResult_PredictedNextRiskFactorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class RiskResult::_Internal {
 public:
};

RiskResult::RiskResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  riskfactors_(arena),
  predictednextriskfactors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.RiskResult)
}
RiskResult::RiskResult(const RiskResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  riskfactors_.MergeFrom(from.riskfactors_);
  predictednextriskfactors_.MergeFrom(from.predictednextriskfactors_);
  ::memcpy(&updatedtimestamp_, &from.updatedtimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&nextupdatetimestamp_) -
    reinterpret_cast<char*>(&updatedtimestamp_)) + sizeof(nextupdatetimestamp_));
  // @@protoc_insertion_point(copy_constructor:vega.RiskResult)
}

void RiskResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RiskResult_vega_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&updatedtimestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nextupdatetimestamp_) -
      reinterpret_cast<char*>(&updatedtimestamp_)) + sizeof(nextupdatetimestamp_));
}

RiskResult::~RiskResult() {
  // @@protoc_insertion_point(destructor:vega.RiskResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RiskResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RiskResult::ArenaDtor(void* object) {
  RiskResult* _this = reinterpret_cast< RiskResult* >(object);
  (void)_this;
}
void RiskResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RiskResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RiskResult& RiskResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RiskResult_vega_2eproto.base);
  return *internal_default_instance();
}


void RiskResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.RiskResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  riskfactors_.Clear();
  predictednextriskfactors_.Clear();
  ::memset(&updatedtimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nextupdatetimestamp_) -
      reinterpret_cast<char*>(&updatedtimestamp_)) + sizeof(nextupdatetimestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RiskResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 updatedTimestamp = 1 [json_name = "updatedTimestamp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          updatedtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .vega.RiskFactor> riskFactors = 2 [json_name = "riskFactors"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&riskfactors_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 nextUpdateTimestamp = 3 [json_name = "nextUpdateTimestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nextupdatetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .vega.RiskFactor> predictedNextRiskFactors = 4 [json_name = "predictedNextRiskFactors"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&predictednextriskfactors_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RiskResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.RiskResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 updatedTimestamp = 1 [json_name = "updatedTimestamp"];
  if (this->updatedtimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_updatedtimestamp(), target);
  }

  // map<string, .vega.RiskFactor> riskFactors = 2 [json_name = "riskFactors"];
  if (!this->_internal_riskfactors().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vega.RiskResult.RiskFactorsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_riskfactors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_riskfactors().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_iterator
          it = this->_internal_riskfactors().begin();
          it != this->_internal_riskfactors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RiskResult_RiskFactorsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_iterator
          it = this->_internal_riskfactors().begin();
          it != this->_internal_riskfactors().end(); ++it) {
        target = RiskResult_RiskFactorsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 nextUpdateTimestamp = 3 [json_name = "nextUpdateTimestamp"];
  if (this->nextupdatetimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_nextupdatetimestamp(), target);
  }

  // map<string, .vega.RiskFactor> predictedNextRiskFactors = 4 [json_name = "predictedNextRiskFactors"];
  if (!this->_internal_predictednextriskfactors().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "vega.RiskResult.PredictedNextRiskFactorsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_predictednextriskfactors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_predictednextriskfactors().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_iterator
          it = this->_internal_predictednextriskfactors().begin();
          it != this->_internal_predictednextriskfactors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_iterator
          it = this->_internal_predictednextriskfactors().begin();
          it != this->_internal_predictednextriskfactors().end(); ++it) {
        target = RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.RiskResult)
  return target;
}

size_t RiskResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.RiskResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .vega.RiskFactor> riskFactors = 2 [json_name = "riskFactors"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_riskfactors_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_iterator
      it = this->_internal_riskfactors().begin();
      it != this->_internal_riskfactors().end(); ++it) {
    total_size += RiskResult_RiskFactorsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .vega.RiskFactor> predictedNextRiskFactors = 4 [json_name = "predictedNextRiskFactors"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_predictednextriskfactors_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >::const_iterator
      it = this->_internal_predictednextriskfactors().begin();
      it != this->_internal_predictednextriskfactors().end(); ++it) {
    total_size += RiskResult_PredictedNextRiskFactorsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 updatedTimestamp = 1 [json_name = "updatedTimestamp"];
  if (this->updatedtimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updatedtimestamp());
  }

  // int64 nextUpdateTimestamp = 3 [json_name = "nextUpdateTimestamp"];
  if (this->nextupdatetimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_nextupdatetimestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RiskResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.RiskResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RiskResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.RiskResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.RiskResult)
    MergeFrom(*source);
  }
}

void RiskResult::MergeFrom(const RiskResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.RiskResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  riskfactors_.MergeFrom(from.riskfactors_);
  predictednextriskfactors_.MergeFrom(from.predictednextriskfactors_);
  if (from.updatedtimestamp() != 0) {
    _internal_set_updatedtimestamp(from._internal_updatedtimestamp());
  }
  if (from.nextupdatetimestamp() != 0) {
    _internal_set_nextupdatetimestamp(from._internal_nextupdatetimestamp());
  }
}

void RiskResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.RiskResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskResult::CopyFrom(const RiskResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.RiskResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskResult::IsInitialized() const {
  return true;
}

void RiskResult::InternalSwap(RiskResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  riskfactors_.Swap(&other->riskfactors_);
  predictednextriskfactors_.Swap(&other->predictednextriskfactors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RiskResult, nextupdatetimestamp_)
      + sizeof(RiskResult::nextupdatetimestamp_)
      - PROTOBUF_FIELD_OFFSET(RiskResult, updatedtimestamp_)>(
          reinterpret_cast<char*>(&updatedtimestamp_),
          reinterpret_cast<char*>(&other->updatedtimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RiskResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PeggedOrder::_Internal {
 public:
};

PeggedOrder::PeggedOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.PeggedOrder)
}
PeggedOrder::PeggedOrder(const PeggedOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&reference_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(reference_));
  // @@protoc_insertion_point(copy_constructor:vega.PeggedOrder)
}

void PeggedOrder::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reference_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(reference_));
}

PeggedOrder::~PeggedOrder() {
  // @@protoc_insertion_point(destructor:vega.PeggedOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeggedOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PeggedOrder::ArenaDtor(void* object) {
  PeggedOrder* _this = reinterpret_cast< PeggedOrder* >(object);
  (void)_this;
}
void PeggedOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeggedOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeggedOrder& PeggedOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeggedOrder_vega_2eproto.base);
  return *internal_default_instance();
}


void PeggedOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PeggedOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(reference_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeggedOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.PeggedReference reference = 1 [json_name = "reference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reference(static_cast<::vega::PeggedReference>(val));
        } else goto handle_unusual;
        continue;
      // int64 offset = 2 [json_name = "offset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeggedOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PeggedOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.PeggedReference reference = 1 [json_name = "reference"];
  if (this->reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reference(), target);
  }

  // int64 offset = 2 [json_name = "offset"];
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PeggedOrder)
  return target;
}

size_t PeggedOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PeggedOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 2 [json_name = "offset"];
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // .vega.PeggedReference reference = 1 [json_name = "reference"];
  if (this->reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeggedOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PeggedOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const PeggedOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeggedOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PeggedOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PeggedOrder)
    MergeFrom(*source);
  }
}

void PeggedOrder::MergeFrom(const PeggedOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PeggedOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.reference() != 0) {
    _internal_set_reference(from._internal_reference());
  }
}

void PeggedOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PeggedOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeggedOrder::CopyFrom(const PeggedOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PeggedOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeggedOrder::IsInitialized() const {
  return true;
}

void PeggedOrder::InternalSwap(PeggedOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeggedOrder, reference_)
      + sizeof(PeggedOrder::reference_)
      - PROTOBUF_FIELD_OFFSET(PeggedOrder, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeggedOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Order::_Internal {
 public:
  static const ::vega::PeggedOrder& peggedorder(const Order* msg);
};

const ::vega::PeggedOrder&
Order::_Internal::peggedorder(const Order* msg) {
  return *msg->peggedorder_;
}
Order::Order(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Order)
}
Order::Order(const Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(), 
      GetArena());
  }
  if (from._internal_has_peggedorder()) {
    peggedorder_ = new ::vega::PeggedOrder(*from.peggedorder_);
  } else {
    peggedorder_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&price_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:vega.Order)
}

void Order::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Order_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&peggedorder_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&peggedorder_)) + sizeof(reason_));
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:vega.Order)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Order::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peggedorder_;
}

void Order::ArenaDtor(void* object) {
  Order* _this = reinterpret_cast< Order* >(object);
  (void)_this;
}
void Order::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Order& Order::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Order_vega_2eproto.base);
  return *internal_default_instance();
}


void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  marketid_.ClearToEmpty();
  partyid_.ClearToEmpty();
  reference_.ClearToEmpty();
  if (GetArena() == nullptr && peggedorder_ != nullptr) {
    delete peggedorder_;
  }
  peggedorder_ = nullptr;
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&price_)) + sizeof(reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Order.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketID = 2 [json_name = "marketID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Order.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partyID = 3 [json_name = "partyID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Order.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Side side = 4 [json_name = "side"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::vega::Side>(val));
        } else goto handle_unusual;
        continue;
      // uint64 price = 5 [json_name = "price"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 6 [json_name = "size"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 remaining = 7 [json_name = "remaining"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Order.TimeInForce timeInForce = 8 [json_name = "timeInForce"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_timeinforce(static_cast<::vega::Order_TimeInForce>(val));
        } else goto handle_unusual;
        continue;
      // .vega.Order.Type type = 9 [json_name = "type"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::Order_Type>(val));
        } else goto handle_unusual;
        continue;
      // int64 createdAt = 10 [json_name = "createdAt"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          createdat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Order.Status status = 11 [json_name = "status"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::vega::Order_Status>(val));
        } else goto handle_unusual;
        continue;
      // int64 expiresAt = 12 [json_name = "expiresAt"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          expiresat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 13 [json_name = "reference"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Order.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.OrderError reason = 14 [json_name = "reason"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::vega::OrderError>(val));
        } else goto handle_unusual;
        continue;
      // int64 updatedAt = 15 [json_name = "updatedAt"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 version = 16 [json_name = "version"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 batchID = 17 [json_name = "batchID"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          batchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.PeggedOrder peggedOrder = 18 [json_name = "peggedOrder"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_peggedorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Order::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Order.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Order.marketID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_marketid(), target);
  }

  // string partyID = 3 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Order.partyID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_partyid(), target);
  }

  // .vega.Side side = 4 [json_name = "side"];
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_side(), target);
  }

  // uint64 price = 5 [json_name = "price"];
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_price(), target);
  }

  // uint64 size = 6 [json_name = "size"];
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_size(), target);
  }

  // uint64 remaining = 7 [json_name = "remaining"];
  if (this->remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_remaining(), target);
  }

  // .vega.Order.TimeInForce timeInForce = 8 [json_name = "timeInForce"];
  if (this->timeinforce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_timeinforce(), target);
  }

  // .vega.Order.Type type = 9 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_type(), target);
  }

  // int64 createdAt = 10 [json_name = "createdAt"];
  if (this->createdat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_createdat(), target);
  }

  // .vega.Order.Status status = 11 [json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_status(), target);
  }

  // int64 expiresAt = 12 [json_name = "expiresAt"];
  if (this->expiresat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_expiresat(), target);
  }

  // string reference = 13 [json_name = "reference"];
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Order.reference");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_reference(), target);
  }

  // .vega.OrderError reason = 14 [json_name = "reason"];
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_reason(), target);
  }

  // int64 updatedAt = 15 [json_name = "updatedAt"];
  if (this->updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_updatedat(), target);
  }

  // uint64 version = 16 [json_name = "version"];
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_version(), target);
  }

  // uint64 batchID = 17 [json_name = "batchID"];
  if (this->batchid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_batchid(), target);
  }

  // .vega.PeggedOrder peggedOrder = 18 [json_name = "peggedOrder"];
  if (this->has_peggedorder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::peggedorder(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Order)
  return target;
}

size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Order)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // string partyID = 3 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string reference = 13 [json_name = "reference"];
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // .vega.PeggedOrder peggedOrder = 18 [json_name = "peggedOrder"];
  if (this->has_peggedorder()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peggedorder_);
  }

  // uint64 price = 5 [json_name = "price"];
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 size = 6 [json_name = "size"];
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // .vega.Side side = 4 [json_name = "side"];
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // .vega.Order.TimeInForce timeInForce = 8 [json_name = "timeInForce"];
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timeinforce());
  }

  // uint64 remaining = 7 [json_name = "remaining"];
  if (this->remaining() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_remaining());
  }

  // int64 createdAt = 10 [json_name = "createdAt"];
  if (this->createdat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createdat());
  }

  // .vega.Order.Type type = 9 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .vega.Order.Status status = 11 [json_name = "status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int64 expiresAt = 12 [json_name = "expiresAt"];
  if (this->expiresat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiresat());
  }

  // int64 updatedAt = 15 [json_name = "updatedAt"];
  if (this->updatedat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updatedat());
  }

  // uint64 version = 16 [json_name = "version"];
  if (this->version() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }

  // uint64 batchID = 17 [json_name = "batchID"];
  if (this->batchid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_batchid());
  }

  // .vega.OrderError reason = 14 [json_name = "reason"];
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Order::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Order)
  GOOGLE_DCHECK_NE(&from, this);
  const Order* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Order>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Order)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Order)
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
  if (from.has_peggedorder()) {
    _internal_mutable_peggedorder()->::vega::PeggedOrder::MergeFrom(from._internal_peggedorder());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.timeinforce() != 0) {
    _internal_set_timeinforce(from._internal_timeinforce());
  }
  if (from.remaining() != 0) {
    _internal_set_remaining(from._internal_remaining());
  }
  if (from.createdat() != 0) {
    _internal_set_createdat(from._internal_createdat());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.expiresat() != 0) {
    _internal_set_expiresat(from._internal_expiresat());
  }
  if (from.updatedat() != 0) {
    _internal_set_updatedat(from._internal_updatedat());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.batchid() != 0) {
    _internal_set_batchid(from._internal_batchid());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void Order::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  return true;
}

void Order::InternalSwap(Order* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Order, reason_)
      + sizeof(Order::reason_)
      - PROTOBUF_FIELD_OFFSET(Order, peggedorder_)>(
          reinterpret_cast<char*>(&peggedorder_),
          reinterpret_cast<char*>(&other->peggedorder_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Order::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderCancellationConfirmation::_Internal {
 public:
  static const ::vega::Order& order(const OrderCancellationConfirmation* msg);
};

const ::vega::Order&
OrderCancellationConfirmation::_Internal::order(const OrderCancellationConfirmation* msg) {
  return *msg->order_;
}
OrderCancellationConfirmation::OrderCancellationConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.OrderCancellationConfirmation)
}
OrderCancellationConfirmation::OrderCancellationConfirmation(const OrderCancellationConfirmation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.OrderCancellationConfirmation)
}

void OrderCancellationConfirmation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderCancellationConfirmation_vega_2eproto.base);
  order_ = nullptr;
}

OrderCancellationConfirmation::~OrderCancellationConfirmation() {
  // @@protoc_insertion_point(destructor:vega.OrderCancellationConfirmation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderCancellationConfirmation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_;
}

void OrderCancellationConfirmation::ArenaDtor(void* object) {
  OrderCancellationConfirmation* _this = reinterpret_cast< OrderCancellationConfirmation* >(object);
  (void)_this;
}
void OrderCancellationConfirmation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderCancellationConfirmation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderCancellationConfirmation& OrderCancellationConfirmation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderCancellationConfirmation_vega_2eproto.base);
  return *internal_default_instance();
}


void OrderCancellationConfirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.OrderCancellationConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderCancellationConfirmation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1 [json_name = "order"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderCancellationConfirmation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.OrderCancellationConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.OrderCancellationConfirmation)
  return target;
}

size_t OrderCancellationConfirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.OrderCancellationConfirmation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderCancellationConfirmation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.OrderCancellationConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderCancellationConfirmation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderCancellationConfirmation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.OrderCancellationConfirmation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.OrderCancellationConfirmation)
    MergeFrom(*source);
  }
}

void OrderCancellationConfirmation::MergeFrom(const OrderCancellationConfirmation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.OrderCancellationConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::vega::Order::MergeFrom(from._internal_order());
  }
}

void OrderCancellationConfirmation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.OrderCancellationConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCancellationConfirmation::CopyFrom(const OrderCancellationConfirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.OrderCancellationConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCancellationConfirmation::IsInitialized() const {
  return true;
}

void OrderCancellationConfirmation::InternalSwap(OrderCancellationConfirmation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderCancellationConfirmation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderConfirmation::_Internal {
 public:
  static const ::vega::Order& order(const OrderConfirmation* msg);
};

const ::vega::Order&
OrderConfirmation::_Internal::order(const OrderConfirmation* msg) {
  return *msg->order_;
}
OrderConfirmation::OrderConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trades_(arena),
  passiveordersaffected_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.OrderConfirmation)
}
OrderConfirmation::OrderConfirmation(const OrderConfirmation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trades_(from.trades_),
      passiveordersaffected_(from.passiveordersaffected_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::vega::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.OrderConfirmation)
}

void OrderConfirmation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderConfirmation_vega_2eproto.base);
  order_ = nullptr;
}

OrderConfirmation::~OrderConfirmation() {
  // @@protoc_insertion_point(destructor:vega.OrderConfirmation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderConfirmation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_;
}

void OrderConfirmation::ArenaDtor(void* object) {
  OrderConfirmation* _this = reinterpret_cast< OrderConfirmation* >(object);
  (void)_this;
}
void OrderConfirmation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderConfirmation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderConfirmation& OrderConfirmation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderConfirmation_vega_2eproto.base);
  return *internal_default_instance();
}


void OrderConfirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.OrderConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  passiveordersaffected_.Clear();
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderConfirmation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Order order = 1 [json_name = "order"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.Trade trades = 2 [json_name = "trades"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.Order passiveOrdersAffected = 3 [json_name = "passiveOrdersAffected"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_passiveordersaffected(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderConfirmation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.OrderConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  // repeated .vega.Trade trades = 2 [json_name = "trades"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_trades(i), target, stream);
  }

  // repeated .vega.Order passiveOrdersAffected = 3 [json_name = "passiveOrdersAffected"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_passiveordersaffected_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_passiveordersaffected(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.OrderConfirmation)
  return target;
}

size_t OrderConfirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.OrderConfirmation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 2 [json_name = "trades"];
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.Order passiveOrdersAffected = 3 [json_name = "passiveOrdersAffected"];
  total_size += 1UL * this->_internal_passiveordersaffected_size();
  for (const auto& msg : this->passiveordersaffected_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vega.Order order = 1 [json_name = "order"];
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderConfirmation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.OrderConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderConfirmation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderConfirmation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.OrderConfirmation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.OrderConfirmation)
    MergeFrom(*source);
  }
}

void OrderConfirmation::MergeFrom(const OrderConfirmation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.OrderConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
  passiveordersaffected_.MergeFrom(from.passiveordersaffected_);
  if (from.has_order()) {
    _internal_mutable_order()->::vega::Order::MergeFrom(from._internal_order());
  }
}

void OrderConfirmation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.OrderConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderConfirmation::CopyFrom(const OrderConfirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.OrderConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderConfirmation::IsInitialized() const {
  return true;
}

void OrderConfirmation::InternalSwap(OrderConfirmation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trades_.InternalSwap(&other->trades_);
  passiveordersaffected_.InternalSwap(&other->passiveordersaffected_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderConfirmation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AuctionIndicativeState::_Internal {
 public:
};

AuctionIndicativeState::AuctionIndicativeState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.AuctionIndicativeState)
}
AuctionIndicativeState::AuctionIndicativeState(const AuctionIndicativeState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  ::memcpy(&indicativeprice_, &from.indicativeprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&auctionend_) -
    reinterpret_cast<char*>(&indicativeprice_)) + sizeof(auctionend_));
  // @@protoc_insertion_point(copy_constructor:vega.AuctionIndicativeState)
}

void AuctionIndicativeState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuctionIndicativeState_vega_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&indicativeprice_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&auctionend_) -
      reinterpret_cast<char*>(&indicativeprice_)) + sizeof(auctionend_));
}

AuctionIndicativeState::~AuctionIndicativeState() {
  // @@protoc_insertion_point(destructor:vega.AuctionIndicativeState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuctionIndicativeState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuctionIndicativeState::ArenaDtor(void* object) {
  AuctionIndicativeState* _this = reinterpret_cast< AuctionIndicativeState* >(object);
  (void)_this;
}
void AuctionIndicativeState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuctionIndicativeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuctionIndicativeState& AuctionIndicativeState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuctionIndicativeState_vega_2eproto.base);
  return *internal_default_instance();
}


void AuctionIndicativeState::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.AuctionIndicativeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  ::memset(&indicativeprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auctionend_) -
      reinterpret_cast<char*>(&indicativeprice_)) + sizeof(auctionend_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuctionIndicativeState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.AuctionIndicativeState.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 indicativePrice = 2 [json_name = "indicativePrice"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          indicativeprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 indicativeVolume = 3 [json_name = "indicativeVolume"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          indicativevolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 auctionStart = 4 [json_name = "auctionStart"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          auctionstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 auctionEnd = 5 [json_name = "auctionEnd"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          auctionend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuctionIndicativeState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.AuctionIndicativeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.AuctionIndicativeState.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // uint64 indicativePrice = 2 [json_name = "indicativePrice"];
  if (this->indicativeprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_indicativeprice(), target);
  }

  // uint64 indicativeVolume = 3 [json_name = "indicativeVolume"];
  if (this->indicativevolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_indicativevolume(), target);
  }

  // int64 auctionStart = 4 [json_name = "auctionStart"];
  if (this->auctionstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_auctionstart(), target);
  }

  // int64 auctionEnd = 5 [json_name = "auctionEnd"];
  if (this->auctionend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_auctionend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.AuctionIndicativeState)
  return target;
}

size_t AuctionIndicativeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.AuctionIndicativeState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // uint64 indicativePrice = 2 [json_name = "indicativePrice"];
  if (this->indicativeprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_indicativeprice());
  }

  // uint64 indicativeVolume = 3 [json_name = "indicativeVolume"];
  if (this->indicativevolume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_indicativevolume());
  }

  // int64 auctionStart = 4 [json_name = "auctionStart"];
  if (this->auctionstart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auctionstart());
  }

  // int64 auctionEnd = 5 [json_name = "auctionEnd"];
  if (this->auctionend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auctionend());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuctionIndicativeState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.AuctionIndicativeState)
  GOOGLE_DCHECK_NE(&from, this);
  const AuctionIndicativeState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuctionIndicativeState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.AuctionIndicativeState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.AuctionIndicativeState)
    MergeFrom(*source);
  }
}

void AuctionIndicativeState::MergeFrom(const AuctionIndicativeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.AuctionIndicativeState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.indicativeprice() != 0) {
    _internal_set_indicativeprice(from._internal_indicativeprice());
  }
  if (from.indicativevolume() != 0) {
    _internal_set_indicativevolume(from._internal_indicativevolume());
  }
  if (from.auctionstart() != 0) {
    _internal_set_auctionstart(from._internal_auctionstart());
  }
  if (from.auctionend() != 0) {
    _internal_set_auctionend(from._internal_auctionend());
  }
}

void AuctionIndicativeState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.AuctionIndicativeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionIndicativeState::CopyFrom(const AuctionIndicativeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.AuctionIndicativeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionIndicativeState::IsInitialized() const {
  return true;
}

void AuctionIndicativeState::InternalSwap(AuctionIndicativeState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuctionIndicativeState, auctionend_)
      + sizeof(AuctionIndicativeState::auctionend_)
      - PROTOBUF_FIELD_OFFSET(AuctionIndicativeState, indicativeprice_)>(
          reinterpret_cast<char*>(&indicativeprice_),
          reinterpret_cast<char*>(&other->indicativeprice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuctionIndicativeState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Trade::_Internal {
 public:
  static const ::vega::Fee& buyerfee(const Trade* msg);
  static const ::vega::Fee& sellerfee(const Trade* msg);
};

const ::vega::Fee&
Trade::_Internal::buyerfee(const Trade* msg) {
  return *msg->buyerfee_;
}
const ::vega::Fee&
Trade::_Internal::sellerfee(const Trade* msg) {
  return *msg->sellerfee_;
}
Trade::Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Trade)
}
Trade::Trade(const Trade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  buyer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buyer().empty()) {
    buyer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buyer(), 
      GetArena());
  }
  seller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_seller().empty()) {
    seller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_seller(), 
      GetArena());
  }
  buyorder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buyorder().empty()) {
    buyorder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buyorder(), 
      GetArena());
  }
  sellorder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sellorder().empty()) {
    sellorder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sellorder(), 
      GetArena());
  }
  if (from._internal_has_buyerfee()) {
    buyerfee_ = new ::vega::Fee(*from.buyerfee_);
  } else {
    buyerfee_ = nullptr;
  }
  if (from._internal_has_sellerfee()) {
    sellerfee_ = new ::vega::Fee(*from.sellerfee_);
  } else {
    sellerfee_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&sellerauctionbatch_) -
    reinterpret_cast<char*>(&price_)) + sizeof(sellerauctionbatch_));
  // @@protoc_insertion_point(copy_constructor:vega.Trade)
}

void Trade::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trade_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buyer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buyorder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sellorder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&buyerfee_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sellerauctionbatch_) -
      reinterpret_cast<char*>(&buyerfee_)) + sizeof(sellerauctionbatch_));
}

Trade::~Trade() {
  // @@protoc_insertion_point(destructor:vega.Trade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buyer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buyorder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sellorder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete buyerfee_;
  if (this != internal_default_instance()) delete sellerfee_;
}

void Trade::ArenaDtor(void* object) {
  Trade* _this = reinterpret_cast< Trade* >(object);
  (void)_this;
}
void Trade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trade& Trade::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trade_vega_2eproto.base);
  return *internal_default_instance();
}


void Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Trade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  marketid_.ClearToEmpty();
  buyer_.ClearToEmpty();
  seller_.ClearToEmpty();
  buyorder_.ClearToEmpty();
  sellorder_.ClearToEmpty();
  if (GetArena() == nullptr && buyerfee_ != nullptr) {
    delete buyerfee_;
  }
  buyerfee_ = nullptr;
  if (GetArena() == nullptr && sellerfee_ != nullptr) {
    delete sellerfee_;
  }
  sellerfee_ = nullptr;
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sellerauctionbatch_) -
      reinterpret_cast<char*>(&price_)) + sizeof(sellerauctionbatch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Trade.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketID = 2 [json_name = "marketID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Trade.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 price = 3 [json_name = "price"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 4 [json_name = "size"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buyer = 5 [json_name = "buyer"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_buyer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Trade.buyer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string seller = 6 [json_name = "seller"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_seller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Trade.seller"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Side aggressor = 7 [json_name = "aggressor"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggressor(static_cast<::vega::Side>(val));
        } else goto handle_unusual;
        continue;
      // string buyOrder = 8 [json_name = "buyOrder"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_buyorder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Trade.buyOrder"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sellOrder = 9 [json_name = "sellOrder"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_sellorder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Trade.sellOrder"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 10 [json_name = "timestamp"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Trade.Type type = 11 [json_name = "type"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::Trade_Type>(val));
        } else goto handle_unusual;
        continue;
      // .vega.Fee buyerFee = 12 [json_name = "buyerFee"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_buyerfee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Fee sellerFee = 13 [json_name = "sellerFee"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sellerfee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 buyerAuctionBatch = 14 [json_name = "buyerAuctionBatch"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          buyerauctionbatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sellerAuctionBatch = 15 [json_name = "sellerAuctionBatch"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          sellerauctionbatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Trade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.marketID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_marketid(), target);
  }

  // uint64 price = 3 [json_name = "price"];
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_price(), target);
  }

  // uint64 size = 4 [json_name = "size"];
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_size(), target);
  }

  // string buyer = 5 [json_name = "buyer"];
  if (this->buyer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buyer().data(), static_cast<int>(this->_internal_buyer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.buyer");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_buyer(), target);
  }

  // string seller = 6 [json_name = "seller"];
  if (this->seller().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_seller().data(), static_cast<int>(this->_internal_seller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.seller");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_seller(), target);
  }

  // .vega.Side aggressor = 7 [json_name = "aggressor"];
  if (this->aggressor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_aggressor(), target);
  }

  // string buyOrder = 8 [json_name = "buyOrder"];
  if (this->buyorder().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buyorder().data(), static_cast<int>(this->_internal_buyorder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.buyOrder");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_buyorder(), target);
  }

  // string sellOrder = 9 [json_name = "sellOrder"];
  if (this->sellorder().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sellorder().data(), static_cast<int>(this->_internal_sellorder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Trade.sellOrder");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sellorder(), target);
  }

  // int64 timestamp = 10 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_timestamp(), target);
  }

  // .vega.Trade.Type type = 11 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_type(), target);
  }

  // .vega.Fee buyerFee = 12 [json_name = "buyerFee"];
  if (this->has_buyerfee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::buyerfee(this), target, stream);
  }

  // .vega.Fee sellerFee = 13 [json_name = "sellerFee"];
  if (this->has_sellerfee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::sellerfee(this), target, stream);
  }

  // uint64 buyerAuctionBatch = 14 [json_name = "buyerAuctionBatch"];
  if (this->buyerauctionbatch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_buyerauctionbatch(), target);
  }

  // uint64 sellerAuctionBatch = 15 [json_name = "sellerAuctionBatch"];
  if (this->sellerauctionbatch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_sellerauctionbatch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Trade)
  return target;
}

size_t Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Trade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // string buyer = 5 [json_name = "buyer"];
  if (this->buyer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buyer());
  }

  // string seller = 6 [json_name = "seller"];
  if (this->seller().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_seller());
  }

  // string buyOrder = 8 [json_name = "buyOrder"];
  if (this->buyorder().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buyorder());
  }

  // string sellOrder = 9 [json_name = "sellOrder"];
  if (this->sellorder().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sellorder());
  }

  // .vega.Fee buyerFee = 12 [json_name = "buyerFee"];
  if (this->has_buyerfee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buyerfee_);
  }

  // .vega.Fee sellerFee = 13 [json_name = "sellerFee"];
  if (this->has_sellerfee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sellerfee_);
  }

  // uint64 price = 3 [json_name = "price"];
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 size = 4 [json_name = "size"];
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // .vega.Side aggressor = 7 [json_name = "aggressor"];
  if (this->aggressor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggressor());
  }

  // .vega.Trade.Type type = 11 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int64 timestamp = 10 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // uint64 buyerAuctionBatch = 14 [json_name = "buyerAuctionBatch"];
  if (this->buyerauctionbatch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_buyerauctionbatch());
  }

  // uint64 sellerAuctionBatch = 15 [json_name = "sellerAuctionBatch"];
  if (this->sellerauctionbatch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sellerauctionbatch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  const Trade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Trade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Trade)
    MergeFrom(*source);
  }
}

void Trade::MergeFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.buyer().size() > 0) {
    _internal_set_buyer(from._internal_buyer());
  }
  if (from.seller().size() > 0) {
    _internal_set_seller(from._internal_seller());
  }
  if (from.buyorder().size() > 0) {
    _internal_set_buyorder(from._internal_buyorder());
  }
  if (from.sellorder().size() > 0) {
    _internal_set_sellorder(from._internal_sellorder());
  }
  if (from.has_buyerfee()) {
    _internal_mutable_buyerfee()->::vega::Fee::MergeFrom(from._internal_buyerfee());
  }
  if (from.has_sellerfee()) {
    _internal_mutable_sellerfee()->::vega::Fee::MergeFrom(from._internal_sellerfee());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.aggressor() != 0) {
    _internal_set_aggressor(from._internal_aggressor());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.buyerauctionbatch() != 0) {
    _internal_set_buyerauctionbatch(from._internal_buyerauctionbatch());
  }
  if (from.sellerauctionbatch() != 0) {
    _internal_set_sellerauctionbatch(from._internal_sellerauctionbatch());
  }
}

void Trade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trade::CopyFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trade::IsInitialized() const {
  return true;
}

void Trade::InternalSwap(Trade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  buyer_.Swap(&other->buyer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  seller_.Swap(&other->seller_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  buyorder_.Swap(&other->buyorder_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sellorder_.Swap(&other->sellorder_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trade, sellerauctionbatch_)
      + sizeof(Trade::sellerauctionbatch_)
      - PROTOBUF_FIELD_OFFSET(Trade, buyerfee_)>(
          reinterpret_cast<char*>(&buyerfee_),
          reinterpret_cast<char*>(&other->buyerfee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Fee::_Internal {
 public:
};

Fee::Fee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Fee)
}
Fee::Fee(const Fee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&makerfee_, &from.makerfee_,
    static_cast<size_t>(reinterpret_cast<char*>(&liquidityfee_) -
    reinterpret_cast<char*>(&makerfee_)) + sizeof(liquidityfee_));
  // @@protoc_insertion_point(copy_constructor:vega.Fee)
}

void Fee::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&makerfee_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&liquidityfee_) -
      reinterpret_cast<char*>(&makerfee_)) + sizeof(liquidityfee_));
}

Fee::~Fee() {
  // @@protoc_insertion_point(destructor:vega.Fee)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Fee::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Fee::ArenaDtor(void* object) {
  Fee* _this = reinterpret_cast< Fee* >(object);
  (void)_this;
}
void Fee::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fee& Fee::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fee_vega_2eproto.base);
  return *internal_default_instance();
}


void Fee::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Fee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&makerfee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&liquidityfee_) -
      reinterpret_cast<char*>(&makerfee_)) + sizeof(liquidityfee_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 makerFee = 1 [json_name = "makerFee"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          makerfee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 infrastructureFee = 2 [json_name = "infrastructureFee"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          infrastructurefee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 liquidityFee = 3 [json_name = "liquidityFee"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          liquidityfee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fee::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Fee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 makerFee = 1 [json_name = "makerFee"];
  if (this->makerfee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_makerfee(), target);
  }

  // uint64 infrastructureFee = 2 [json_name = "infrastructureFee"];
  if (this->infrastructurefee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_infrastructurefee(), target);
  }

  // uint64 liquidityFee = 3 [json_name = "liquidityFee"];
  if (this->liquidityfee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_liquidityfee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Fee)
  return target;
}

size_t Fee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Fee)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 makerFee = 1 [json_name = "makerFee"];
  if (this->makerfee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_makerfee());
  }

  // uint64 infrastructureFee = 2 [json_name = "infrastructureFee"];
  if (this->infrastructurefee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_infrastructurefee());
  }

  // uint64 liquidityFee = 3 [json_name = "liquidityFee"];
  if (this->liquidityfee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_liquidityfee());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fee::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Fee)
  GOOGLE_DCHECK_NE(&from, this);
  const Fee* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Fee)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Fee)
    MergeFrom(*source);
  }
}

void Fee::MergeFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Fee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.makerfee() != 0) {
    _internal_set_makerfee(from._internal_makerfee());
  }
  if (from.infrastructurefee() != 0) {
    _internal_set_infrastructurefee(from._internal_infrastructurefee());
  }
  if (from.liquidityfee() != 0) {
    _internal_set_liquidityfee(from._internal_liquidityfee());
  }
}

void Fee::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Fee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fee::CopyFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Fee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fee::IsInitialized() const {
  return true;
}

void Fee::InternalSwap(Fee* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fee, liquidityfee_)
      + sizeof(Fee::liquidityfee_)
      - PROTOBUF_FIELD_OFFSET(Fee, makerfee_)>(
          reinterpret_cast<char*>(&makerfee_),
          reinterpret_cast<char*>(&other->makerfee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fee::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TradeSet::_Internal {
 public:
};

TradeSet::TradeSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trades_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.TradeSet)
}
TradeSet::TradeSet(const TradeSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.TradeSet)
}

void TradeSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradeSet_vega_2eproto.base);
}

TradeSet::~TradeSet() {
  // @@protoc_insertion_point(destructor:vega.TradeSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TradeSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TradeSet::ArenaDtor(void* object) {
  TradeSet* _this = reinterpret_cast< TradeSet* >(object);
  (void)_this;
}
void TradeSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TradeSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeSet& TradeSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradeSet_vega_2eproto.base);
  return *internal_default_instance();
}


void TradeSet::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TradeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Trade trades = 1 [json_name = "trades"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradeSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TradeSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trades(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TradeSet)
  return target;
}

size_t TradeSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TradeSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TradeSet)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradeSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TradeSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TradeSet)
    MergeFrom(*source);
  }
}

void TradeSet::MergeFrom(const TradeSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TradeSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void TradeSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TradeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeSet::CopyFrom(const TradeSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TradeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeSet::IsInitialized() const {
  return true;
}

void TradeSet::InternalSwap(TradeSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trades_.InternalSwap(&other->trades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Candle::_Internal {
 public:
};

Candle::Candle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Candle)
}
Candle::Candle(const Candle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_datetime().empty()) {
    datetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_datetime(), 
      GetArena());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:vega.Candle)
}

void Candle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Candle_vega_2eproto.base);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(interval_));
}

Candle::~Candle() {
  // @@protoc_insertion_point(destructor:vega.Candle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Candle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Candle::ArenaDtor(void* object) {
  Candle* _this = reinterpret_cast< Candle* >(object);
  (void)_this;
}
void Candle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Candle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Candle& Candle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Candle_vega_2eproto.base);
  return *internal_default_instance();
}


void Candle::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Candle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datetime_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Candle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1 [json_name = "timestamp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string datetime = 2 [json_name = "datetime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_datetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Candle.datetime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 high = 3 [json_name = "high"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 low = 4 [json_name = "low"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 open = 5 [json_name = "open"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 close = 6 [json_name = "close"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volume = 7 [json_name = "volume"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Interval interval = 8 [json_name = "interval"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interval(static_cast<::vega::Interval>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Candle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Candle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string datetime = 2 [json_name = "datetime"];
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_datetime().data(), static_cast<int>(this->_internal_datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Candle.datetime");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_datetime(), target);
  }

  // uint64 high = 3 [json_name = "high"];
  if (this->high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_high(), target);
  }

  // uint64 low = 4 [json_name = "low"];
  if (this->low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_low(), target);
  }

  // uint64 open = 5 [json_name = "open"];
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_open(), target);
  }

  // uint64 close = 6 [json_name = "close"];
  if (this->close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_close(), target);
  }

  // uint64 volume = 7 [json_name = "volume"];
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_volume(), target);
  }

  // .vega.Interval interval = 8 [json_name = "interval"];
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Candle)
  return target;
}

size_t Candle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Candle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string datetime = 2 [json_name = "datetime"];
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datetime());
  }

  // int64 timestamp = 1 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // uint64 high = 3 [json_name = "high"];
  if (this->high() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_high());
  }

  // uint64 low = 4 [json_name = "low"];
  if (this->low() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_low());
  }

  // uint64 open = 5 [json_name = "open"];
  if (this->open() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_open());
  }

  // uint64 close = 6 [json_name = "close"];
  if (this->close() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_close());
  }

  // uint64 volume = 7 [json_name = "volume"];
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volume());
  }

  // .vega.Interval interval = 8 [json_name = "interval"];
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Candle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Candle)
  GOOGLE_DCHECK_NE(&from, this);
  const Candle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Candle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Candle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Candle)
    MergeFrom(*source);
  }
}

void Candle::MergeFrom(const Candle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Candle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datetime().size() > 0) {
    _internal_set_datetime(from._internal_datetime());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from.low() != 0) {
    _internal_set_low(from._internal_low());
  }
  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.close() != 0) {
    _internal_set_close(from._internal_close());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
}

void Candle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Candle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candle::CopyFrom(const Candle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Candle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candle::IsInitialized() const {
  return true;
}

void Candle::InternalSwap(Candle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Candle, interval_)
      + sizeof(Candle::interval_)
      - PROTOBUF_FIELD_OFFSET(Candle, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Candle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PriceLevel::_Internal {
 public:
};

PriceLevel::PriceLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.PriceLevel)
}
PriceLevel::PriceLevel(const PriceLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&price_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:vega.PriceLevel)
}

void PriceLevel::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&price_)) + sizeof(volume_));
}

PriceLevel::~PriceLevel() {
  // @@protoc_insertion_point(destructor:vega.PriceLevel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PriceLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PriceLevel::ArenaDtor(void* object) {
  PriceLevel* _this = reinterpret_cast< PriceLevel* >(object);
  (void)_this;
}
void PriceLevel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceLevel& PriceLevel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriceLevel_vega_2eproto.base);
  return *internal_default_instance();
}


void PriceLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PriceLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&price_)) + sizeof(volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 price = 1 [json_name = "price"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 numberOfOrders = 2 [json_name = "numberOfOrders"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          numberoforders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volume = 3 [json_name = "volume"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceLevel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PriceLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 price = 1 [json_name = "price"];
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_price(), target);
  }

  // uint64 numberOfOrders = 2 [json_name = "numberOfOrders"];
  if (this->numberoforders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_numberoforders(), target);
  }

  // uint64 volume = 3 [json_name = "volume"];
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PriceLevel)
  return target;
}

size_t PriceLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PriceLevel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 price = 1 [json_name = "price"];
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 numberOfOrders = 2 [json_name = "numberOfOrders"];
  if (this->numberoforders() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_numberoforders());
  }

  // uint64 volume = 3 [json_name = "volume"];
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PriceLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriceLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PriceLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PriceLevel)
    MergeFrom(*source);
  }
}

void PriceLevel::MergeFrom(const PriceLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PriceLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.numberoforders() != 0) {
    _internal_set_numberoforders(from._internal_numberoforders());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
}

void PriceLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PriceLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceLevel::CopyFrom(const PriceLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PriceLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceLevel::IsInitialized() const {
  return true;
}

void PriceLevel::InternalSwap(PriceLevel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriceLevel, volume_)
      + sizeof(PriceLevel::volume_)
      - PROTOBUF_FIELD_OFFSET(PriceLevel, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceLevel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDepth::_Internal {
 public:
};

MarketDepth::MarketDepth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buy_(arena),
  sell_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.MarketDepth)
}
MarketDepth::MarketDepth(const MarketDepth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buy_(from.buy_),
      sell_(from.sell_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  sequencenumber_ = from.sequencenumber_;
  // @@protoc_insertion_point(copy_constructor:vega.MarketDepth)
}

void MarketDepth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDepth_vega_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequencenumber_ = PROTOBUF_ULONGLONG(0);
}

MarketDepth::~MarketDepth() {
  // @@protoc_insertion_point(destructor:vega.MarketDepth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDepth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketDepth::ArenaDtor(void* object) {
  MarketDepth* _this = reinterpret_cast< MarketDepth* >(object);
  (void)_this;
}
void MarketDepth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDepth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepth& MarketDepth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDepth_vega_2eproto.base);
  return *internal_default_instance();
}


void MarketDepth::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarketDepth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_.Clear();
  sell_.Clear();
  marketid_.ClearToEmpty();
  sequencenumber_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarketDepth.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 sequenceNumber = 4 [json_name = "sequenceNumber"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sequencenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDepth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarketDepth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarketDepth.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_buy(i), target, stream);
  }

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sell_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sell(i), target, stream);
  }

  // uint64 sequenceNumber = 4 [json_name = "sequenceNumber"];
  if (this->sequencenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sequencenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarketDepth)
  return target;
}

size_t MarketDepth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarketDepth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  total_size += 1UL * this->_internal_buy_size();
  for (const auto& msg : this->buy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  total_size += 1UL * this->_internal_sell_size();
  for (const auto& msg : this->sell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // uint64 sequenceNumber = 4 [json_name = "sequenceNumber"];
  if (this->sequencenumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequencenumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarketDepth)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDepth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarketDepth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarketDepth)
    MergeFrom(*source);
  }
}

void MarketDepth::MergeFrom(const MarketDepth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarketDepth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_.MergeFrom(from.buy_);
  sell_.MergeFrom(from.sell_);
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.sequencenumber() != 0) {
    _internal_set_sequencenumber(from._internal_sequencenumber());
  }
}

void MarketDepth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarketDepth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepth::CopyFrom(const MarketDepth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarketDepth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepth::IsInitialized() const {
  return true;
}

void MarketDepth::InternalSwap(MarketDepth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buy_.InternalSwap(&other->buy_);
  sell_.InternalSwap(&other->sell_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sequencenumber_, other->sequencenumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketDepthUpdate::_Internal {
 public:
};

MarketDepthUpdate::MarketDepthUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buy_(arena),
  sell_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.MarketDepthUpdate)
}
MarketDepthUpdate::MarketDepthUpdate(const MarketDepthUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buy_(from.buy_),
      sell_(from.sell_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  sequencenumber_ = from.sequencenumber_;
  // @@protoc_insertion_point(copy_constructor:vega.MarketDepthUpdate)
}

void MarketDepthUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDepthUpdate_vega_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequencenumber_ = PROTOBUF_ULONGLONG(0);
}

MarketDepthUpdate::~MarketDepthUpdate() {
  // @@protoc_insertion_point(destructor:vega.MarketDepthUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDepthUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthUpdate::ArenaDtor(void* object) {
  MarketDepthUpdate* _this = reinterpret_cast< MarketDepthUpdate* >(object);
  (void)_this;
}
void MarketDepthUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDepthUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDepthUpdate& MarketDepthUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDepthUpdate_vega_2eproto.base);
  return *internal_default_instance();
}


void MarketDepthUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarketDepthUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_.Clear();
  sell_.Clear();
  marketid_.ClearToEmpty();
  sequencenumber_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarketDepthUpdate.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 sequenceNumber = 4 [json_name = "sequenceNumber"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sequencenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDepthUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarketDepthUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarketDepthUpdate.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_buy(i), target, stream);
  }

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sell_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sell(i), target, stream);
  }

  // uint64 sequenceNumber = 4 [json_name = "sequenceNumber"];
  if (this->sequencenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sequencenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarketDepthUpdate)
  return target;
}

size_t MarketDepthUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarketDepthUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  total_size += 1UL * this->_internal_buy_size();
  for (const auto& msg : this->buy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  total_size += 1UL * this->_internal_sell_size();
  for (const auto& msg : this->sell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // uint64 sequenceNumber = 4 [json_name = "sequenceNumber"];
  if (this->sequencenumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequencenumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarketDepthUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDepthUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarketDepthUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarketDepthUpdate)
    MergeFrom(*source);
  }
}

void MarketDepthUpdate::MergeFrom(const MarketDepthUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarketDepthUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buy_.MergeFrom(from.buy_);
  sell_.MergeFrom(from.sell_);
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.sequencenumber() != 0) {
    _internal_set_sequencenumber(from._internal_sequencenumber());
  }
}

void MarketDepthUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarketDepthUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdate::CopyFrom(const MarketDepthUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarketDepthUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdate::IsInitialized() const {
  return true;
}

void MarketDepthUpdate::InternalSwap(MarketDepthUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buy_.InternalSwap(&other->buy_);
  sell_.InternalSwap(&other->sell_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sequencenumber_, other->sequencenumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  ::memcpy(&openvolume_, &from.openvolume_,
    static_cast<size_t>(reinterpret_cast<char*>(&updatedat_) -
    reinterpret_cast<char*>(&openvolume_)) + sizeof(updatedat_));
  // @@protoc_insertion_point(copy_constructor:vega.Position)
}

void Position::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Position_vega_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&openvolume_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&updatedat_) -
      reinterpret_cast<char*>(&openvolume_)) + sizeof(updatedat_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:vega.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_vega_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.ClearToEmpty();
  partyid_.ClearToEmpty();
  ::memset(&openvolume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updatedat_) -
      reinterpret_cast<char*>(&openvolume_)) + sizeof(updatedat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Position.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partyID = 2 [json_name = "partyID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Position.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 openVolume = 3 [json_name = "openVolume"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          openvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 realisedPNL = 4 [json_name = "realisedPNL"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          realisedpnl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unrealisedPNL = 5 [json_name = "unrealisedPNL"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          unrealisedpnl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 averageEntryPrice = 6 [json_name = "averageEntryPrice"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          averageentryprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 updatedAt = 7 [json_name = "updatedAt"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Position.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // string partyID = 2 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Position.partyID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partyid(), target);
  }

  // int64 openVolume = 3 [json_name = "openVolume"];
  if (this->openvolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_openvolume(), target);
  }

  // int64 realisedPNL = 4 [json_name = "realisedPNL"];
  if (this->realisedpnl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_realisedpnl(), target);
  }

  // int64 unrealisedPNL = 5 [json_name = "unrealisedPNL"];
  if (this->unrealisedpnl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_unrealisedpnl(), target);
  }

  // uint64 averageEntryPrice = 6 [json_name = "averageEntryPrice"];
  if (this->averageentryprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_averageentryprice(), target);
  }

  // int64 updatedAt = 7 [json_name = "updatedAt"];
  if (this->updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_updatedat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // string partyID = 2 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // int64 openVolume = 3 [json_name = "openVolume"];
  if (this->openvolume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_openvolume());
  }

  // int64 realisedPNL = 4 [json_name = "realisedPNL"];
  if (this->realisedpnl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_realisedpnl());
  }

  // int64 unrealisedPNL = 5 [json_name = "unrealisedPNL"];
  if (this->unrealisedpnl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unrealisedpnl());
  }

  // uint64 averageEntryPrice = 6 [json_name = "averageEntryPrice"];
  if (this->averageentryprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_averageentryprice());
  }

  // int64 updatedAt = 7 [json_name = "updatedAt"];
  if (this->updatedat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updatedat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.openvolume() != 0) {
    _internal_set_openvolume(from._internal_openvolume());
  }
  if (from.realisedpnl() != 0) {
    _internal_set_realisedpnl(from._internal_realisedpnl());
  }
  if (from.unrealisedpnl() != 0) {
    _internal_set_unrealisedpnl(from._internal_unrealisedpnl());
  }
  if (from.averageentryprice() != 0) {
    _internal_set_averageentryprice(from._internal_averageentryprice());
  }
  if (from.updatedat() != 0) {
    _internal_set_updatedat(from._internal_updatedat());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, updatedat_)
      + sizeof(Position::updatedat_)
      - PROTOBUF_FIELD_OFFSET(Position, openvolume_)>(
          reinterpret_cast<char*>(&openvolume_),
          reinterpret_cast<char*>(&other->openvolume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionTrade::_Internal {
 public:
};

PositionTrade::PositionTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.PositionTrade)
}
PositionTrade::PositionTrade(const PositionTrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:vega.PositionTrade)
}

void PositionTrade::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(price_));
}

PositionTrade::~PositionTrade() {
  // @@protoc_insertion_point(destructor:vega.PositionTrade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionTrade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PositionTrade::ArenaDtor(void* object) {
  PositionTrade* _this = reinterpret_cast< PositionTrade* >(object);
  (void)_this;
}
void PositionTrade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionTrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionTrade& PositionTrade::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionTrade_vega_2eproto.base);
  return *internal_default_instance();
}


void PositionTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PositionTrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionTrade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 volume = 1 [json_name = "volume"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 price = 2 [json_name = "price"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionTrade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PositionTrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 volume = 1 [json_name = "volume"];
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_volume(), target);
  }

  // uint64 price = 2 [json_name = "price"];
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PositionTrade)
  return target;
}

size_t PositionTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PositionTrade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 volume = 1 [json_name = "volume"];
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  // uint64 price = 2 [json_name = "price"];
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionTrade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PositionTrade)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionTrade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionTrade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PositionTrade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PositionTrade)
    MergeFrom(*source);
  }
}

void PositionTrade::MergeFrom(const PositionTrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PositionTrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
}

void PositionTrade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PositionTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionTrade::CopyFrom(const PositionTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PositionTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionTrade::IsInitialized() const {
  return true;
}

void PositionTrade::InternalSwap(PositionTrade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionTrade, price_)
      + sizeof(PositionTrade::price_)
      - PROTOBUF_FIELD_OFFSET(PositionTrade, volume_)>(
          reinterpret_cast<char*>(&volume_),
          reinterpret_cast<char*>(&other->volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionTrade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Statistics::_Internal {
 public:
};

Statistics::Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Statistics)
}
Statistics::Statistics(const Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  genesistime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_genesistime().empty()) {
    genesistime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_genesistime(), 
      GetArena());
  }
  currenttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currenttime().empty()) {
    currenttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currenttime(), 
      GetArena());
  }
  vegatime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vegatime().empty()) {
    vegatime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vegatime(), 
      GetArena());
  }
  appversionhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appversionhash().empty()) {
    appversionhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appversionhash(), 
      GetArena());
  }
  appversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appversion().empty()) {
    appversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appversion(), 
      GetArena());
  }
  chainversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chainversion().empty()) {
    chainversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chainversion(), 
      GetArena());
  }
  uptime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uptime().empty()) {
    uptime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uptime(), 
      GetArena());
  }
  chainid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chainid().empty()) {
    chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chainid(), 
      GetArena());
  }
  ::memcpy(&blockheight_, &from.blockheight_,
    static_cast<size_t>(reinterpret_cast<char*>(&marketdepthupdatessubscriptions_) -
    reinterpret_cast<char*>(&blockheight_)) + sizeof(marketdepthupdatessubscriptions_));
  // @@protoc_insertion_point(copy_constructor:vega.Statistics)
}

void Statistics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Statistics_vega_2eproto.base);
  genesistime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currenttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vegatime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appversionhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chainversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uptime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chainid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&blockheight_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&marketdepthupdatessubscriptions_) -
      reinterpret_cast<char*>(&blockheight_)) + sizeof(marketdepthupdatessubscriptions_));
}

Statistics::~Statistics() {
  // @@protoc_insertion_point(destructor:vega.Statistics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Statistics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  genesistime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currenttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vegatime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appversionhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chainversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uptime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chainid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Statistics::ArenaDtor(void* object) {
  Statistics* _this = reinterpret_cast< Statistics* >(object);
  (void)_this;
}
void Statistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Statistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Statistics& Statistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Statistics_vega_2eproto.base);
  return *internal_default_instance();
}


void Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  genesistime_.ClearToEmpty();
  currenttime_.ClearToEmpty();
  vegatime_.ClearToEmpty();
  appversionhash_.ClearToEmpty();
  appversion_.ClearToEmpty();
  chainversion_.ClearToEmpty();
  uptime_.ClearToEmpty();
  chainid_.ClearToEmpty();
  ::memset(&blockheight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketdepthupdatessubscriptions_) -
      reinterpret_cast<char*>(&blockheight_)) + sizeof(marketdepthupdatessubscriptions_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Statistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 blockHeight = 1 [json_name = "blockHeight"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blockheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 backlogLength = 2 [json_name = "backlogLength"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          backloglength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 totalPeers = 3 [json_name = "totalPeers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          totalpeers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string genesisTime = 4 [json_name = "genesisTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_genesistime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Statistics.genesisTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string currentTime = 5 [json_name = "currentTime"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_currenttime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Statistics.currentTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vegaTime = 6 [json_name = "vegaTime"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_vegatime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Statistics.vegaTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ChainStatus status = 7 [json_name = "status"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::vega::ChainStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint64 txPerBlock = 8 [json_name = "txPerBlock"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          txperblock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 averageTxBytes = 9 [json_name = "averageTxBytes"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          averagetxbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 averageOrdersPerBlock = 10 [json_name = "averageOrdersPerBlock"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          averageordersperblock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tradesPerSecond = 11 [json_name = "tradesPerSecond"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          tradespersecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ordersPerSecond = 12 [json_name = "ordersPerSecond"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          orderspersecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 totalMarkets = 13 [json_name = "totalMarkets"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          totalmarkets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 totalAmendOrder = 16 [json_name = "totalAmendOrder"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          totalamendorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 totalCancelOrder = 17 [json_name = "totalCancelOrder"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          totalcancelorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 totalCreateOrder = 18 [json_name = "totalCreateOrder"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          totalcreateorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 totalOrders = 19 [json_name = "totalOrders"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          totalorders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 totalTrades = 20 [json_name = "totalTrades"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          totaltrades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 orderSubscriptions = 21 [json_name = "orderSubscriptions"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ordersubscriptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tradeSubscriptions = 22 [json_name = "tradeSubscriptions"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          tradesubscriptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 candleSubscriptions = 23 [json_name = "candleSubscriptions"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          candlesubscriptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 marketDepthSubscriptions = 24 [json_name = "marketDepthSubscriptions"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          marketdepthsubscriptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 positionsSubscriptions = 25 [json_name = "positionsSubscriptions"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          positionssubscriptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 accountSubscriptions = 26 [json_name = "accountSubscriptions"];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          accountsubscriptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 marketDataSubscriptions = 27 [json_name = "marketDataSubscriptions"];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          marketdatasubscriptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appVersionHash = 28 [json_name = "appVersionHash"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_appversionhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Statistics.appVersionHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appVersion = 29 [json_name = "appVersion"];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_appversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Statistics.appVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chainVersion = 30 [json_name = "chainVersion"];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_chainversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Statistics.chainVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 blockDuration = 31 [json_name = "blockDuration"];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          blockduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uptime = 32 [json_name = "uptime"];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_uptime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Statistics.uptime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chainID = 33 [json_name = "chainID"];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chainid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Statistics.chainID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 marketDepthUpdatesSubscriptions = 34 [json_name = "marketDepthUpdatesSubscriptions"];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          marketdepthupdatessubscriptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Statistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blockHeight = 1 [json_name = "blockHeight"];
  if (this->blockheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_blockheight(), target);
  }

  // uint64 backlogLength = 2 [json_name = "backlogLength"];
  if (this->backloglength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_backloglength(), target);
  }

  // uint64 totalPeers = 3 [json_name = "totalPeers"];
  if (this->totalpeers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_totalpeers(), target);
  }

  // string genesisTime = 4 [json_name = "genesisTime"];
  if (this->genesistime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_genesistime().data(), static_cast<int>(this->_internal_genesistime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.genesisTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_genesistime(), target);
  }

  // string currentTime = 5 [json_name = "currentTime"];
  if (this->currenttime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currenttime().data(), static_cast<int>(this->_internal_currenttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.currentTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_currenttime(), target);
  }

  // string vegaTime = 6 [json_name = "vegaTime"];
  if (this->vegatime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vegatime().data(), static_cast<int>(this->_internal_vegatime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.vegaTime");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_vegatime(), target);
  }

  // .vega.ChainStatus status = 7 [json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_status(), target);
  }

  // uint64 txPerBlock = 8 [json_name = "txPerBlock"];
  if (this->txperblock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_txperblock(), target);
  }

  // uint64 averageTxBytes = 9 [json_name = "averageTxBytes"];
  if (this->averagetxbytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_averagetxbytes(), target);
  }

  // uint64 averageOrdersPerBlock = 10 [json_name = "averageOrdersPerBlock"];
  if (this->averageordersperblock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_averageordersperblock(), target);
  }

  // uint64 tradesPerSecond = 11 [json_name = "tradesPerSecond"];
  if (this->tradespersecond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_tradespersecond(), target);
  }

  // uint64 ordersPerSecond = 12 [json_name = "ordersPerSecond"];
  if (this->orderspersecond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_orderspersecond(), target);
  }

  // uint64 totalMarkets = 13 [json_name = "totalMarkets"];
  if (this->totalmarkets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_totalmarkets(), target);
  }

  // uint64 totalAmendOrder = 16 [json_name = "totalAmendOrder"];
  if (this->totalamendorder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_totalamendorder(), target);
  }

  // uint64 totalCancelOrder = 17 [json_name = "totalCancelOrder"];
  if (this->totalcancelorder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_totalcancelorder(), target);
  }

  // uint64 totalCreateOrder = 18 [json_name = "totalCreateOrder"];
  if (this->totalcreateorder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_totalcreateorder(), target);
  }

  // uint64 totalOrders = 19 [json_name = "totalOrders"];
  if (this->totalorders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_totalorders(), target);
  }

  // uint64 totalTrades = 20 [json_name = "totalTrades"];
  if (this->totaltrades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_totaltrades(), target);
  }

  // uint32 orderSubscriptions = 21 [json_name = "orderSubscriptions"];
  if (this->ordersubscriptions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_ordersubscriptions(), target);
  }

  // uint32 tradeSubscriptions = 22 [json_name = "tradeSubscriptions"];
  if (this->tradesubscriptions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_tradesubscriptions(), target);
  }

  // uint32 candleSubscriptions = 23 [json_name = "candleSubscriptions"];
  if (this->candlesubscriptions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_candlesubscriptions(), target);
  }

  // uint32 marketDepthSubscriptions = 24 [json_name = "marketDepthSubscriptions"];
  if (this->marketdepthsubscriptions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_marketdepthsubscriptions(), target);
  }

  // uint32 positionsSubscriptions = 25 [json_name = "positionsSubscriptions"];
  if (this->positionssubscriptions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_positionssubscriptions(), target);
  }

  // uint32 accountSubscriptions = 26 [json_name = "accountSubscriptions"];
  if (this->accountsubscriptions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_accountsubscriptions(), target);
  }

  // uint32 marketDataSubscriptions = 27 [json_name = "marketDataSubscriptions"];
  if (this->marketdatasubscriptions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_marketdatasubscriptions(), target);
  }

  // string appVersionHash = 28 [json_name = "appVersionHash"];
  if (this->appversionhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appversionhash().data(), static_cast<int>(this->_internal_appversionhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.appVersionHash");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_appversionhash(), target);
  }

  // string appVersion = 29 [json_name = "appVersion"];
  if (this->appversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appversion().data(), static_cast<int>(this->_internal_appversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.appVersion");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_appversion(), target);
  }

  // string chainVersion = 30 [json_name = "chainVersion"];
  if (this->chainversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chainversion().data(), static_cast<int>(this->_internal_chainversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.chainVersion");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_chainversion(), target);
  }

  // uint64 blockDuration = 31 [json_name = "blockDuration"];
  if (this->blockduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(31, this->_internal_blockduration(), target);
  }

  // string uptime = 32 [json_name = "uptime"];
  if (this->uptime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uptime().data(), static_cast<int>(this->_internal_uptime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.uptime");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_uptime(), target);
  }

  // string chainID = 33 [json_name = "chainID"];
  if (this->chainid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chainid().data(), static_cast<int>(this->_internal_chainid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Statistics.chainID");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_chainid(), target);
  }

  // uint32 marketDepthUpdatesSubscriptions = 34 [json_name = "marketDepthUpdatesSubscriptions"];
  if (this->marketdepthupdatessubscriptions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_marketdepthupdatessubscriptions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Statistics)
  return target;
}

size_t Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Statistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string genesisTime = 4 [json_name = "genesisTime"];
  if (this->genesistime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_genesistime());
  }

  // string currentTime = 5 [json_name = "currentTime"];
  if (this->currenttime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currenttime());
  }

  // string vegaTime = 6 [json_name = "vegaTime"];
  if (this->vegatime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vegatime());
  }

  // string appVersionHash = 28 [json_name = "appVersionHash"];
  if (this->appversionhash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appversionhash());
  }

  // string appVersion = 29 [json_name = "appVersion"];
  if (this->appversion().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appversion());
  }

  // string chainVersion = 30 [json_name = "chainVersion"];
  if (this->chainversion().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chainversion());
  }

  // string uptime = 32 [json_name = "uptime"];
  if (this->uptime().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uptime());
  }

  // string chainID = 33 [json_name = "chainID"];
  if (this->chainid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chainid());
  }

  // uint64 blockHeight = 1 [json_name = "blockHeight"];
  if (this->blockheight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blockheight());
  }

  // uint64 backlogLength = 2 [json_name = "backlogLength"];
  if (this->backloglength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_backloglength());
  }

  // uint64 totalPeers = 3 [json_name = "totalPeers"];
  if (this->totalpeers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_totalpeers());
  }

  // uint64 txPerBlock = 8 [json_name = "txPerBlock"];
  if (this->txperblock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_txperblock());
  }

  // uint64 averageTxBytes = 9 [json_name = "averageTxBytes"];
  if (this->averagetxbytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_averagetxbytes());
  }

  // uint64 averageOrdersPerBlock = 10 [json_name = "averageOrdersPerBlock"];
  if (this->averageordersperblock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_averageordersperblock());
  }

  // uint64 tradesPerSecond = 11 [json_name = "tradesPerSecond"];
  if (this->tradespersecond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tradespersecond());
  }

  // uint64 ordersPerSecond = 12 [json_name = "ordersPerSecond"];
  if (this->orderspersecond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_orderspersecond());
  }

  // uint64 totalMarkets = 13 [json_name = "totalMarkets"];
  if (this->totalmarkets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_totalmarkets());
  }

  // .vega.ChainStatus status = 7 [json_name = "status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // uint32 orderSubscriptions = 21 [json_name = "orderSubscriptions"];
  if (this->ordersubscriptions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ordersubscriptions());
  }

  // uint64 totalAmendOrder = 16 [json_name = "totalAmendOrder"];
  if (this->totalamendorder() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_totalamendorder());
  }

  // uint64 totalCancelOrder = 17 [json_name = "totalCancelOrder"];
  if (this->totalcancelorder() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_totalcancelorder());
  }

  // uint64 totalCreateOrder = 18 [json_name = "totalCreateOrder"];
  if (this->totalcreateorder() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_totalcreateorder());
  }

  // uint64 totalOrders = 19 [json_name = "totalOrders"];
  if (this->totalorders() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_totalorders());
  }

  // uint64 totalTrades = 20 [json_name = "totalTrades"];
  if (this->totaltrades() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_totaltrades());
  }

  // uint32 tradeSubscriptions = 22 [json_name = "tradeSubscriptions"];
  if (this->tradesubscriptions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tradesubscriptions());
  }

  // uint32 candleSubscriptions = 23 [json_name = "candleSubscriptions"];
  if (this->candlesubscriptions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_candlesubscriptions());
  }

  // uint32 marketDepthSubscriptions = 24 [json_name = "marketDepthSubscriptions"];
  if (this->marketdepthsubscriptions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_marketdepthsubscriptions());
  }

  // uint32 positionsSubscriptions = 25 [json_name = "positionsSubscriptions"];
  if (this->positionssubscriptions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_positionssubscriptions());
  }

  // uint32 accountSubscriptions = 26 [json_name = "accountSubscriptions"];
  if (this->accountsubscriptions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accountsubscriptions());
  }

  // uint32 marketDataSubscriptions = 27 [json_name = "marketDataSubscriptions"];
  if (this->marketdatasubscriptions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_marketdatasubscriptions());
  }

  // uint64 blockDuration = 31 [json_name = "blockDuration"];
  if (this->blockduration() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blockduration());
  }

  // uint32 marketDepthUpdatesSubscriptions = 34 [json_name = "marketDepthUpdatesSubscriptions"];
  if (this->marketdepthupdatessubscriptions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_marketdepthupdatessubscriptions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Statistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  const Statistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Statistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Statistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Statistics)
    MergeFrom(*source);
  }
}

void Statistics::MergeFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.genesistime().size() > 0) {
    _internal_set_genesistime(from._internal_genesistime());
  }
  if (from.currenttime().size() > 0) {
    _internal_set_currenttime(from._internal_currenttime());
  }
  if (from.vegatime().size() > 0) {
    _internal_set_vegatime(from._internal_vegatime());
  }
  if (from.appversionhash().size() > 0) {
    _internal_set_appversionhash(from._internal_appversionhash());
  }
  if (from.appversion().size() > 0) {
    _internal_set_appversion(from._internal_appversion());
  }
  if (from.chainversion().size() > 0) {
    _internal_set_chainversion(from._internal_chainversion());
  }
  if (from.uptime().size() > 0) {
    _internal_set_uptime(from._internal_uptime());
  }
  if (from.chainid().size() > 0) {
    _internal_set_chainid(from._internal_chainid());
  }
  if (from.blockheight() != 0) {
    _internal_set_blockheight(from._internal_blockheight());
  }
  if (from.backloglength() != 0) {
    _internal_set_backloglength(from._internal_backloglength());
  }
  if (from.totalpeers() != 0) {
    _internal_set_totalpeers(from._internal_totalpeers());
  }
  if (from.txperblock() != 0) {
    _internal_set_txperblock(from._internal_txperblock());
  }
  if (from.averagetxbytes() != 0) {
    _internal_set_averagetxbytes(from._internal_averagetxbytes());
  }
  if (from.averageordersperblock() != 0) {
    _internal_set_averageordersperblock(from._internal_averageordersperblock());
  }
  if (from.tradespersecond() != 0) {
    _internal_set_tradespersecond(from._internal_tradespersecond());
  }
  if (from.orderspersecond() != 0) {
    _internal_set_orderspersecond(from._internal_orderspersecond());
  }
  if (from.totalmarkets() != 0) {
    _internal_set_totalmarkets(from._internal_totalmarkets());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.ordersubscriptions() != 0) {
    _internal_set_ordersubscriptions(from._internal_ordersubscriptions());
  }
  if (from.totalamendorder() != 0) {
    _internal_set_totalamendorder(from._internal_totalamendorder());
  }
  if (from.totalcancelorder() != 0) {
    _internal_set_totalcancelorder(from._internal_totalcancelorder());
  }
  if (from.totalcreateorder() != 0) {
    _internal_set_totalcreateorder(from._internal_totalcreateorder());
  }
  if (from.totalorders() != 0) {
    _internal_set_totalorders(from._internal_totalorders());
  }
  if (from.totaltrades() != 0) {
    _internal_set_totaltrades(from._internal_totaltrades());
  }
  if (from.tradesubscriptions() != 0) {
    _internal_set_tradesubscriptions(from._internal_tradesubscriptions());
  }
  if (from.candlesubscriptions() != 0) {
    _internal_set_candlesubscriptions(from._internal_candlesubscriptions());
  }
  if (from.marketdepthsubscriptions() != 0) {
    _internal_set_marketdepthsubscriptions(from._internal_marketdepthsubscriptions());
  }
  if (from.positionssubscriptions() != 0) {
    _internal_set_positionssubscriptions(from._internal_positionssubscriptions());
  }
  if (from.accountsubscriptions() != 0) {
    _internal_set_accountsubscriptions(from._internal_accountsubscriptions());
  }
  if (from.marketdatasubscriptions() != 0) {
    _internal_set_marketdatasubscriptions(from._internal_marketdatasubscriptions());
  }
  if (from.blockduration() != 0) {
    _internal_set_blockduration(from._internal_blockduration());
  }
  if (from.marketdepthupdatessubscriptions() != 0) {
    _internal_set_marketdepthupdatessubscriptions(from._internal_marketdepthupdatessubscriptions());
  }
}

void Statistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistics::CopyFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistics::IsInitialized() const {
  return true;
}

void Statistics::InternalSwap(Statistics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  genesistime_.Swap(&other->genesistime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  currenttime_.Swap(&other->currenttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vegatime_.Swap(&other->vegatime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  appversionhash_.Swap(&other->appversionhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  appversion_.Swap(&other->appversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chainversion_.Swap(&other->chainversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uptime_.Swap(&other->uptime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chainid_.Swap(&other->chainid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Statistics, marketdepthupdatessubscriptions_)
      + sizeof(Statistics::marketdepthupdatessubscriptions_)
      - PROTOBUF_FIELD_OFFSET(Statistics, blockheight_)>(
          reinterpret_cast<char*>(&blockheight_),
          reinterpret_cast<char*>(&other->blockheight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Deposit::_Internal {
 public:
};

Deposit::Deposit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Deposit)
}
Deposit::Deposit(const Deposit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  txhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txhash().empty()) {
    txhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_txhash(), 
      GetArena());
  }
  ::memcpy(&creditedtimestamp_, &from.creditedtimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&creditedtimestamp_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:vega.Deposit)
}

void Deposit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Deposit_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&creditedtimestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&creditedtimestamp_)) + sizeof(status_));
}

Deposit::~Deposit() {
  // @@protoc_insertion_point(destructor:vega.Deposit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Deposit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Deposit::ArenaDtor(void* object) {
  Deposit* _this = reinterpret_cast< Deposit* >(object);
  (void)_this;
}
void Deposit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Deposit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Deposit& Deposit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Deposit_vega_2eproto.base);
  return *internal_default_instance();
}


void Deposit::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Deposit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  partyid_.ClearToEmpty();
  asset_.ClearToEmpty();
  amount_.ClearToEmpty();
  txhash_.ClearToEmpty();
  ::memset(&creditedtimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&creditedtimestamp_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Deposit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Deposit.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Deposit.Status status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::vega::Deposit_Status>(val));
        } else goto handle_unusual;
        continue;
      // string partyID = 3 [json_name = "partyID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Deposit.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 4 [json_name = "asset"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Deposit.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 5 [json_name = "amount"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Deposit.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string txHash = 6 [json_name = "txHash"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_txhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Deposit.txHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 creditedTimestamp = 7 [json_name = "creditedTimestamp"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          creditedtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createdTimestamp = 8 [json_name = "createdTimestamp"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          createdtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Deposit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Deposit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .vega.Deposit.Status status = 2 [json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // string partyID = 3 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.partyID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_partyid(), target);
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.asset");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_asset(), target);
  }

  // string amount = 5 [json_name = "amount"];
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.amount");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_amount(), target);
  }

  // string txHash = 6 [json_name = "txHash"];
  if (this->txhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_txhash().data(), static_cast<int>(this->_internal_txhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Deposit.txHash");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_txhash(), target);
  }

  // int64 creditedTimestamp = 7 [json_name = "creditedTimestamp"];
  if (this->creditedtimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_creditedtimestamp(), target);
  }

  // int64 createdTimestamp = 8 [json_name = "createdTimestamp"];
  if (this->createdtimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_createdtimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Deposit)
  return target;
}

size_t Deposit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Deposit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string partyID = 3 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // string amount = 5 [json_name = "amount"];
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string txHash = 6 [json_name = "txHash"];
  if (this->txhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_txhash());
  }

  // int64 creditedTimestamp = 7 [json_name = "creditedTimestamp"];
  if (this->creditedtimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_creditedtimestamp());
  }

  // int64 createdTimestamp = 8 [json_name = "createdTimestamp"];
  if (this->createdtimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createdtimestamp());
  }

  // .vega.Deposit.Status status = 2 [json_name = "status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deposit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Deposit)
  GOOGLE_DCHECK_NE(&from, this);
  const Deposit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Deposit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Deposit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Deposit)
    MergeFrom(*source);
  }
}

void Deposit::MergeFrom(const Deposit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Deposit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.txhash().size() > 0) {
    _internal_set_txhash(from._internal_txhash());
  }
  if (from.creditedtimestamp() != 0) {
    _internal_set_creditedtimestamp(from._internal_creditedtimestamp());
  }
  if (from.createdtimestamp() != 0) {
    _internal_set_createdtimestamp(from._internal_createdtimestamp());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Deposit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Deposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deposit::CopyFrom(const Deposit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Deposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deposit::IsInitialized() const {
  return true;
}

void Deposit::InternalSwap(Deposit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txhash_.Swap(&other->txhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Deposit, status_)
      + sizeof(Deposit::status_)
      - PROTOBUF_FIELD_OFFSET(Deposit, creditedtimestamp_)>(
          reinterpret_cast<char*>(&creditedtimestamp_),
          reinterpret_cast<char*>(&other->creditedtimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Deposit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Withdrawal::_Internal {
 public:
  static const ::vega::WithdrawExt& ext(const Withdrawal* msg);
};

const ::vega::WithdrawExt&
Withdrawal::_Internal::ext(const Withdrawal* msg) {
  return *msg->ext_;
}
Withdrawal::Withdrawal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Withdrawal)
}
Withdrawal::Withdrawal(const Withdrawal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(), 
      GetArena());
  }
  ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ref().empty()) {
    ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ref(), 
      GetArena());
  }
  txhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txhash().empty()) {
    txhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_txhash(), 
      GetArena());
  }
  if (from._internal_has_ext()) {
    ext_ = new ::vega::WithdrawExt(*from.ext_);
  } else {
    ext_ = nullptr;
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:vega.Withdrawal)
}

void Withdrawal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Withdrawal_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ext_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&ext_)) + sizeof(status_));
}

Withdrawal::~Withdrawal() {
  // @@protoc_insertion_point(destructor:vega.Withdrawal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Withdrawal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_;
}

void Withdrawal::ArenaDtor(void* object) {
  Withdrawal* _this = reinterpret_cast< Withdrawal* >(object);
  (void)_this;
}
void Withdrawal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Withdrawal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Withdrawal& Withdrawal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Withdrawal_vega_2eproto.base);
  return *internal_default_instance();
}


void Withdrawal::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Withdrawal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  partyid_.ClearToEmpty();
  asset_.ClearToEmpty();
  ref_.ClearToEmpty();
  txhash_.ClearToEmpty();
  if (GetArena() == nullptr && ext_ != nullptr) {
    delete ext_;
  }
  ext_ = nullptr;
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Withdrawal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Withdrawal.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partyID = 2 [json_name = "partyID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Withdrawal.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 4 [json_name = "asset"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Withdrawal.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Withdrawal.Status status = 5 [json_name = "status"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::vega::Withdrawal_Status>(val));
        } else goto handle_unusual;
        continue;
      // string ref = 6 [json_name = "ref"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Withdrawal.ref"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiry = 7 [json_name = "expiry"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string txHash = 8 [json_name = "txHash"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_txhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Withdrawal.txHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createdTimestamp = 9 [json_name = "createdTimestamp"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          createdtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 withdrawnTimestamp = 10 [json_name = "withdrawnTimestamp"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          withdrawntimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.WithdrawExt ext = 11 [json_name = "ext"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Withdrawal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Withdrawal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string partyID = 2 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.partyID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partyid(), target);
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.asset");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_asset(), target);
  }

  // .vega.Withdrawal.Status status = 5 [json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // string ref = 6 [json_name = "ref"];
  if (this->ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ref().data(), static_cast<int>(this->_internal_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.ref");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ref(), target);
  }

  // int64 expiry = 7 [json_name = "expiry"];
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_expiry(), target);
  }

  // string txHash = 8 [json_name = "txHash"];
  if (this->txhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_txhash().data(), static_cast<int>(this->_internal_txhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Withdrawal.txHash");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_txhash(), target);
  }

  // int64 createdTimestamp = 9 [json_name = "createdTimestamp"];
  if (this->createdtimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_createdtimestamp(), target);
  }

  // int64 withdrawnTimestamp = 10 [json_name = "withdrawnTimestamp"];
  if (this->withdrawntimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_withdrawntimestamp(), target);
  }

  // .vega.WithdrawExt ext = 11 [json_name = "ext"];
  if (this->has_ext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::ext(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Withdrawal)
  return target;
}

size_t Withdrawal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Withdrawal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string partyID = 2 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // string ref = 6 [json_name = "ref"];
  if (this->ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ref());
  }

  // string txHash = 8 [json_name = "txHash"];
  if (this->txhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_txhash());
  }

  // .vega.WithdrawExt ext = 11 [json_name = "ext"];
  if (this->has_ext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ext_);
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  // int64 expiry = 7 [json_name = "expiry"];
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiry());
  }

  // int64 createdTimestamp = 9 [json_name = "createdTimestamp"];
  if (this->createdtimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createdtimestamp());
  }

  // int64 withdrawnTimestamp = 10 [json_name = "withdrawnTimestamp"];
  if (this->withdrawntimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_withdrawntimestamp());
  }

  // .vega.Withdrawal.Status status = 5 [json_name = "status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Withdrawal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Withdrawal)
  GOOGLE_DCHECK_NE(&from, this);
  const Withdrawal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Withdrawal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Withdrawal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Withdrawal)
    MergeFrom(*source);
  }
}

void Withdrawal::MergeFrom(const Withdrawal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Withdrawal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.ref().size() > 0) {
    _internal_set_ref(from._internal_ref());
  }
  if (from.txhash().size() > 0) {
    _internal_set_txhash(from._internal_txhash());
  }
  if (from.has_ext()) {
    _internal_mutable_ext()->::vega::WithdrawExt::MergeFrom(from._internal_ext());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
  if (from.createdtimestamp() != 0) {
    _internal_set_createdtimestamp(from._internal_createdtimestamp());
  }
  if (from.withdrawntimestamp() != 0) {
    _internal_set_withdrawntimestamp(from._internal_withdrawntimestamp());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Withdrawal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Withdrawal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Withdrawal::CopyFrom(const Withdrawal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Withdrawal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Withdrawal::IsInitialized() const {
  return true;
}

void Withdrawal::InternalSwap(Withdrawal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ref_.Swap(&other->ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txhash_.Swap(&other->txhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Withdrawal, status_)
      + sizeof(Withdrawal::status_)
      - PROTOBUF_FIELD_OFFSET(Withdrawal, ext_)>(
          reinterpret_cast<char*>(&ext_),
          reinterpret_cast<char*>(&other->ext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Withdrawal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawSubmission::_Internal {
 public:
  static const ::vega::WithdrawExt& ext(const WithdrawSubmission* msg);
};

const ::vega::WithdrawExt&
WithdrawSubmission::_Internal::ext(const WithdrawSubmission* msg) {
  return *msg->ext_;
}
WithdrawSubmission::WithdrawSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.WithdrawSubmission)
}
WithdrawSubmission::WithdrawSubmission(const WithdrawSubmission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(), 
      GetArena());
  }
  if (from._internal_has_ext()) {
    ext_ = new ::vega::WithdrawExt(*from.ext_);
  } else {
    ext_ = nullptr;
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:vega.WithdrawSubmission)
}

void WithdrawSubmission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawSubmission_vega_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ext_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&ext_)) + sizeof(amount_));
}

WithdrawSubmission::~WithdrawSubmission() {
  // @@protoc_insertion_point(destructor:vega.WithdrawSubmission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawSubmission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_;
}

void WithdrawSubmission::ArenaDtor(void* object) {
  WithdrawSubmission* _this = reinterpret_cast< WithdrawSubmission* >(object);
  (void)_this;
}
void WithdrawSubmission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawSubmission& WithdrawSubmission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawSubmission_vega_2eproto.base);
  return *internal_default_instance();
}


void WithdrawSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.WithdrawSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  asset_.ClearToEmpty();
  if (GetArena() == nullptr && ext_ != nullptr) {
    delete ext_;
  }
  ext_ = nullptr;
  amount_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawSubmission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string partyID = 1 [json_name = "partyID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.WithdrawSubmission.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 3 [json_name = "asset"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.WithdrawSubmission.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.WithdrawExt ext = 4 [json_name = "ext"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawSubmission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.WithdrawSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.WithdrawSubmission.partyID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partyid(), target);
  }

  // uint64 amount = 2 [json_name = "amount"];
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount(), target);
  }

  // string asset = 3 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.WithdrawSubmission.asset");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_asset(), target);
  }

  // .vega.WithdrawExt ext = 4 [json_name = "ext"];
  if (this->has_ext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ext(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.WithdrawSubmission)
  return target;
}

size_t WithdrawSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.WithdrawSubmission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 1 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string asset = 3 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // .vega.WithdrawExt ext = 4 [json_name = "ext"];
  if (this->has_ext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ext_);
  }

  // uint64 amount = 2 [json_name = "amount"];
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawSubmission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.WithdrawSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawSubmission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.WithdrawSubmission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.WithdrawSubmission)
    MergeFrom(*source);
  }
}

void WithdrawSubmission::MergeFrom(const WithdrawSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.WithdrawSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.has_ext()) {
    _internal_mutable_ext()->::vega::WithdrawExt::MergeFrom(from._internal_ext());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void WithdrawSubmission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.WithdrawSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawSubmission::CopyFrom(const WithdrawSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.WithdrawSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawSubmission::IsInitialized() const {
  return true;
}

void WithdrawSubmission::InternalSwap(WithdrawSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WithdrawSubmission, amount_)
      + sizeof(WithdrawSubmission::amount_)
      - PROTOBUF_FIELD_OFFSET(WithdrawSubmission, ext_)>(
          reinterpret_cast<char*>(&ext_),
          reinterpret_cast<char*>(&other->ext_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawSubmission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WithdrawExt::_Internal {
 public:
  static const ::vega::Erc20WithdrawExt& erc20(const WithdrawExt* msg);
};

const ::vega::Erc20WithdrawExt&
WithdrawExt::_Internal::erc20(const WithdrawExt* msg) {
  return *msg->ext_.erc20_;
}
void WithdrawExt::set_allocated_erc20(::vega::Erc20WithdrawExt* erc20) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ext();
  if (erc20) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(erc20);
    if (message_arena != submessage_arena) {
      erc20 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erc20, submessage_arena);
    }
    set_has_erc20();
    ext_.erc20_ = erc20;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.WithdrawExt.erc20)
}
WithdrawExt::WithdrawExt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.WithdrawExt)
}
WithdrawExt::WithdrawExt(const WithdrawExt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_ext();
  switch (from.ext_case()) {
    case kErc20: {
      _internal_mutable_erc20()->::vega::Erc20WithdrawExt::MergeFrom(from._internal_erc20());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.WithdrawExt)
}

void WithdrawExt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithdrawExt_vega_2eproto.base);
  clear_has_ext();
}

WithdrawExt::~WithdrawExt() {
  // @@protoc_insertion_point(destructor:vega.WithdrawExt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithdrawExt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_ext()) {
    clear_ext();
  }
}

void WithdrawExt::ArenaDtor(void* object) {
  WithdrawExt* _this = reinterpret_cast< WithdrawExt* >(object);
  (void)_this;
}
void WithdrawExt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithdrawExt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithdrawExt& WithdrawExt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithdrawExt_vega_2eproto.base);
  return *internal_default_instance();
}


void WithdrawExt::clear_ext() {
// @@protoc_insertion_point(one_of_clear_start:vega.WithdrawExt)
  switch (ext_case()) {
    case kErc20: {
      if (GetArena() == nullptr) {
        delete ext_.erc20_;
      }
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXT_NOT_SET;
}


void WithdrawExt::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.WithdrawExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ext();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithdrawExt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Erc20WithdrawExt erc20 = 1 [json_name = "erc20"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_erc20(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithdrawExt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.WithdrawExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Erc20WithdrawExt erc20 = 1 [json_name = "erc20"];
  if (_internal_has_erc20()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::erc20(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.WithdrawExt)
  return target;
}

size_t WithdrawExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.WithdrawExt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ext_case()) {
    // .vega.Erc20WithdrawExt erc20 = 1 [json_name = "erc20"];
    case kErc20: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_.erc20_);
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithdrawExt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.WithdrawExt)
  GOOGLE_DCHECK_NE(&from, this);
  const WithdrawExt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithdrawExt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.WithdrawExt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.WithdrawExt)
    MergeFrom(*source);
  }
}

void WithdrawExt::MergeFrom(const WithdrawExt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.WithdrawExt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ext_case()) {
    case kErc20: {
      _internal_mutable_erc20()->::vega::Erc20WithdrawExt::MergeFrom(from._internal_erc20());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
}

void WithdrawExt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.WithdrawExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawExt::CopyFrom(const WithdrawExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.WithdrawExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawExt::IsInitialized() const {
  return true;
}

void WithdrawExt::InternalSwap(WithdrawExt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ext_, other->ext_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WithdrawExt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Erc20WithdrawExt::_Internal {
 public:
};

Erc20WithdrawExt::Erc20WithdrawExt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Erc20WithdrawExt)
}
Erc20WithdrawExt::Erc20WithdrawExt(const Erc20WithdrawExt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  receiveraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiveraddress().empty()) {
    receiveraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiveraddress(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.Erc20WithdrawExt)
}

void Erc20WithdrawExt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Erc20WithdrawExt_vega_2eproto.base);
  receiveraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Erc20WithdrawExt::~Erc20WithdrawExt() {
  // @@protoc_insertion_point(destructor:vega.Erc20WithdrawExt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Erc20WithdrawExt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  receiveraddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Erc20WithdrawExt::ArenaDtor(void* object) {
  Erc20WithdrawExt* _this = reinterpret_cast< Erc20WithdrawExt* >(object);
  (void)_this;
}
void Erc20WithdrawExt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Erc20WithdrawExt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Erc20WithdrawExt& Erc20WithdrawExt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Erc20WithdrawExt_vega_2eproto.base);
  return *internal_default_instance();
}


void Erc20WithdrawExt::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Erc20WithdrawExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiveraddress_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Erc20WithdrawExt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string receiverAddress = 1 [json_name = "receiverAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_receiveraddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Erc20WithdrawExt.receiverAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Erc20WithdrawExt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Erc20WithdrawExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string receiverAddress = 1 [json_name = "receiverAddress"];
  if (this->receiveraddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiveraddress().data(), static_cast<int>(this->_internal_receiveraddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Erc20WithdrawExt.receiverAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_receiveraddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Erc20WithdrawExt)
  return target;
}

size_t Erc20WithdrawExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Erc20WithdrawExt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string receiverAddress = 1 [json_name = "receiverAddress"];
  if (this->receiveraddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiveraddress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Erc20WithdrawExt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Erc20WithdrawExt)
  GOOGLE_DCHECK_NE(&from, this);
  const Erc20WithdrawExt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Erc20WithdrawExt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Erc20WithdrawExt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Erc20WithdrawExt)
    MergeFrom(*source);
  }
}

void Erc20WithdrawExt::MergeFrom(const Erc20WithdrawExt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Erc20WithdrawExt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receiveraddress().size() > 0) {
    _internal_set_receiveraddress(from._internal_receiveraddress());
  }
}

void Erc20WithdrawExt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Erc20WithdrawExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Erc20WithdrawExt::CopyFrom(const Erc20WithdrawExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Erc20WithdrawExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erc20WithdrawExt::IsInitialized() const {
  return true;
}

void Erc20WithdrawExt::InternalSwap(Erc20WithdrawExt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  receiveraddress_.Swap(&other->receiveraddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Erc20WithdrawExt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderAmendment::_Internal {
 public:
  static const ::vega::Price& price(const OrderAmendment* msg);
  static const ::vega::Timestamp& expiresat(const OrderAmendment* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& peggedoffset(const OrderAmendment* msg);
};

const ::vega::Price&
OrderAmendment::_Internal::price(const OrderAmendment* msg) {
  return *msg->price_;
}
const ::vega::Timestamp&
OrderAmendment::_Internal::expiresat(const OrderAmendment* msg) {
  return *msg->expiresat_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
OrderAmendment::_Internal::peggedoffset(const OrderAmendment* msg) {
  return *msg->peggedoffset_;
}
void OrderAmendment::clear_peggedoffset() {
  if (GetArena() == nullptr && peggedoffset_ != nullptr) {
    delete peggedoffset_;
  }
  peggedoffset_ = nullptr;
}
OrderAmendment::OrderAmendment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.OrderAmendment)
}
OrderAmendment::OrderAmendment(const OrderAmendment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_orderid(), 
      GetArena());
  }
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  if (from._internal_has_price()) {
    price_ = new ::vega::Price(*from.price_);
  } else {
    price_ = nullptr;
  }
  if (from._internal_has_expiresat()) {
    expiresat_ = new ::vega::Timestamp(*from.expiresat_);
  } else {
    expiresat_ = nullptr;
  }
  if (from._internal_has_peggedoffset()) {
    peggedoffset_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.peggedoffset_);
  } else {
    peggedoffset_ = nullptr;
  }
  ::memcpy(&sizedelta_, &from.sizedelta_,
    static_cast<size_t>(reinterpret_cast<char*>(&peggedreference_) -
    reinterpret_cast<char*>(&sizedelta_)) + sizeof(peggedreference_));
  // @@protoc_insertion_point(copy_constructor:vega.OrderAmendment)
}

void OrderAmendment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderAmendment_vega_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&peggedreference_) -
      reinterpret_cast<char*>(&price_)) + sizeof(peggedreference_));
}

OrderAmendment::~OrderAmendment() {
  // @@protoc_insertion_point(destructor:vega.OrderAmendment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderAmendment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete price_;
  if (this != internal_default_instance()) delete expiresat_;
  if (this != internal_default_instance()) delete peggedoffset_;
}

void OrderAmendment::ArenaDtor(void* object) {
  OrderAmendment* _this = reinterpret_cast< OrderAmendment* >(object);
  (void)_this;
}
void OrderAmendment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderAmendment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderAmendment& OrderAmendment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderAmendment_vega_2eproto.base);
  return *internal_default_instance();
}


void OrderAmendment::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.OrderAmendment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmpty();
  partyid_.ClearToEmpty();
  marketid_.ClearToEmpty();
  if (GetArena() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
  if (GetArena() == nullptr && expiresat_ != nullptr) {
    delete expiresat_;
  }
  expiresat_ = nullptr;
  if (GetArena() == nullptr && peggedoffset_ != nullptr) {
    delete peggedoffset_;
  }
  peggedoffset_ = nullptr;
  ::memset(&sizedelta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peggedreference_) -
      reinterpret_cast<char*>(&sizedelta_)) + sizeof(peggedreference_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderAmendment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderID = 1 [json_name = "orderID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.OrderAmendment.orderID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partyID = 2 [json_name = "partyID", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.OrderAmendment.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketID = 3 [json_name = "marketID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.OrderAmendment.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Price price = 4 [json_name = "price"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sizeDelta = 5 [json_name = "sizeDelta"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sizedelta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Timestamp expiresAt = 6 [json_name = "expiresAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiresat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Order.TimeInForce timeInForce = 7 [json_name = "timeInForce"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_timeinforce(static_cast<::vega::Order_TimeInForce>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value peggedOffset = 8 [json_name = "peggedOffset"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_peggedoffset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.PeggedReference peggedReference = 9 [json_name = "peggedReference"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_peggedreference(static_cast<::vega::PeggedReference>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderAmendment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.OrderAmendment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1 [json_name = "orderID", (.validator.field) = {
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.OrderAmendment.orderID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  // string partyID = 2 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.OrderAmendment.partyID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partyid(), target);
  }

  // string marketID = 3 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.OrderAmendment.marketID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_marketid(), target);
  }

  // .vega.Price price = 4 [json_name = "price"];
  if (this->has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::price(this), target, stream);
  }

  // int64 sizeDelta = 5 [json_name = "sizeDelta"];
  if (this->sizedelta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_sizedelta(), target);
  }

  // .vega.Timestamp expiresAt = 6 [json_name = "expiresAt"];
  if (this->has_expiresat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::expiresat(this), target, stream);
  }

  // .vega.Order.TimeInForce timeInForce = 7 [json_name = "timeInForce"];
  if (this->timeinforce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_timeinforce(), target);
  }

  // .google.protobuf.Int64Value peggedOffset = 8 [json_name = "peggedOffset"];
  if (this->has_peggedoffset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::peggedoffset(this), target, stream);
  }

  // .vega.PeggedReference peggedReference = 9 [json_name = "peggedReference"];
  if (this->peggedreference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_peggedreference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.OrderAmendment)
  return target;
}

size_t OrderAmendment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.OrderAmendment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderID = 1 [json_name = "orderID", (.validator.field) = {
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // string partyID = 2 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string marketID = 3 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // .vega.Price price = 4 [json_name = "price"];
  if (this->has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_);
  }

  // .vega.Timestamp expiresAt = 6 [json_name = "expiresAt"];
  if (this->has_expiresat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiresat_);
  }

  // .google.protobuf.Int64Value peggedOffset = 8 [json_name = "peggedOffset"];
  if (this->has_peggedoffset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peggedoffset_);
  }

  // int64 sizeDelta = 5 [json_name = "sizeDelta"];
  if (this->sizedelta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sizedelta());
  }

  // .vega.Order.TimeInForce timeInForce = 7 [json_name = "timeInForce"];
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timeinforce());
  }

  // .vega.PeggedReference peggedReference = 9 [json_name = "peggedReference"];
  if (this->peggedreference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_peggedreference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderAmendment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.OrderAmendment)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderAmendment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderAmendment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.OrderAmendment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.OrderAmendment)
    MergeFrom(*source);
  }
}

void OrderAmendment::MergeFrom(const OrderAmendment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.OrderAmendment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.has_price()) {
    _internal_mutable_price()->::vega::Price::MergeFrom(from._internal_price());
  }
  if (from.has_expiresat()) {
    _internal_mutable_expiresat()->::vega::Timestamp::MergeFrom(from._internal_expiresat());
  }
  if (from.has_peggedoffset()) {
    _internal_mutable_peggedoffset()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_peggedoffset());
  }
  if (from.sizedelta() != 0) {
    _internal_set_sizedelta(from._internal_sizedelta());
  }
  if (from.timeinforce() != 0) {
    _internal_set_timeinforce(from._internal_timeinforce());
  }
  if (from.peggedreference() != 0) {
    _internal_set_peggedreference(from._internal_peggedreference());
  }
}

void OrderAmendment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.OrderAmendment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderAmendment::CopyFrom(const OrderAmendment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.OrderAmendment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderAmendment::IsInitialized() const {
  return true;
}

void OrderAmendment::InternalSwap(OrderAmendment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderAmendment, peggedreference_)
      + sizeof(OrderAmendment::peggedreference_)
      - PROTOBUF_FIELD_OFFSET(OrderAmendment, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderAmendment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderSubmission::_Internal {
 public:
  static const ::vega::PeggedOrder& peggedorder(const OrderSubmission* msg);
};

const ::vega::PeggedOrder&
OrderSubmission::_Internal::peggedorder(const OrderSubmission* msg) {
  return *msg->peggedorder_;
}
OrderSubmission::OrderSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.OrderSubmission)
}
OrderSubmission::OrderSubmission(const OrderSubmission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(), 
      GetArena());
  }
  if (from._internal_has_peggedorder()) {
    peggedorder_ = new ::vega::PeggedOrder(*from.peggedorder_);
  } else {
    peggedorder_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&price_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:vega.OrderSubmission)
}

void OrderSubmission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderSubmission_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&peggedorder_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&peggedorder_)) + sizeof(type_));
}

OrderSubmission::~OrderSubmission() {
  // @@protoc_insertion_point(destructor:vega.OrderSubmission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderSubmission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peggedorder_;
}

void OrderSubmission::ArenaDtor(void* object) {
  OrderSubmission* _this = reinterpret_cast< OrderSubmission* >(object);
  (void)_this;
}
void OrderSubmission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderSubmission& OrderSubmission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderSubmission_vega_2eproto.base);
  return *internal_default_instance();
}


void OrderSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.OrderSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  marketid_.ClearToEmpty();
  partyid_.ClearToEmpty();
  reference_.ClearToEmpty();
  if (GetArena() == nullptr && peggedorder_ != nullptr) {
    delete peggedorder_;
  }
  peggedorder_ = nullptr;
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&price_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderSubmission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.OrderSubmission.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketID = 2 [json_name = "marketID", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.OrderSubmission.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partyID = 3 [json_name = "partyID", (.validator.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.OrderSubmission.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 price = 4 [json_name = "price"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 5 [json_name = "size", (.validator.field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Side side = 6 [json_name = "side", (.validator.field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::vega::Side>(val));
        } else goto handle_unusual;
        continue;
      // .vega.Order.TimeInForce timeInForce = 7 [json_name = "timeInForce", (.validator.field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_timeinforce(static_cast<::vega::Order_TimeInForce>(val));
        } else goto handle_unusual;
        continue;
      // int64 expiresAt = 8 [json_name = "expiresAt"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          expiresat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Order.Type type = 9 [json_name = "type", (.validator.field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::Order_Type>(val));
        } else goto handle_unusual;
        continue;
      // string reference = 10 [json_name = "reference"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.OrderSubmission.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.PeggedOrder peggedOrder = 11 [json_name = "peggedOrder"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_peggedorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderSubmission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.OrderSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.OrderSubmission.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string marketID = 2 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.OrderSubmission.marketID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_marketid(), target);
  }

  // string partyID = 3 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.OrderSubmission.partyID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_partyid(), target);
  }

  // uint64 price = 4 [json_name = "price"];
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_price(), target);
  }

  // uint64 size = 5 [json_name = "size", (.validator.field) = {
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_size(), target);
  }

  // .vega.Side side = 6 [json_name = "side", (.validator.field) = {
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_side(), target);
  }

  // .vega.Order.TimeInForce timeInForce = 7 [json_name = "timeInForce", (.validator.field) = {
  if (this->timeinforce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_timeinforce(), target);
  }

  // int64 expiresAt = 8 [json_name = "expiresAt"];
  if (this->expiresat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_expiresat(), target);
  }

  // .vega.Order.Type type = 9 [json_name = "type", (.validator.field) = {
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_type(), target);
  }

  // string reference = 10 [json_name = "reference"];
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.OrderSubmission.reference");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_reference(), target);
  }

  // .vega.PeggedOrder peggedOrder = 11 [json_name = "peggedOrder"];
  if (this->has_peggedorder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::peggedorder(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.OrderSubmission)
  return target;
}

size_t OrderSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.OrderSubmission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id", (.validator.field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string marketID = 2 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // string partyID = 3 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string reference = 10 [json_name = "reference"];
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // .vega.PeggedOrder peggedOrder = 11 [json_name = "peggedOrder"];
  if (this->has_peggedorder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peggedorder_);
  }

  // uint64 price = 4 [json_name = "price"];
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_price());
  }

  // uint64 size = 5 [json_name = "size", (.validator.field) = {
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // .vega.Side side = 6 [json_name = "side", (.validator.field) = {
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  // .vega.Order.TimeInForce timeInForce = 7 [json_name = "timeInForce", (.validator.field) = {
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timeinforce());
  }

  // int64 expiresAt = 8 [json_name = "expiresAt"];
  if (this->expiresat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiresat());
  }

  // .vega.Order.Type type = 9 [json_name = "type", (.validator.field) = {
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderSubmission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.OrderSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderSubmission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.OrderSubmission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.OrderSubmission)
    MergeFrom(*source);
  }
}

void OrderSubmission::MergeFrom(const OrderSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.OrderSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
  if (from.has_peggedorder()) {
    _internal_mutable_peggedorder()->::vega::PeggedOrder::MergeFrom(from._internal_peggedorder());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
  if (from.timeinforce() != 0) {
    _internal_set_timeinforce(from._internal_timeinforce());
  }
  if (from.expiresat() != 0) {
    _internal_set_expiresat(from._internal_expiresat());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void OrderSubmission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.OrderSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderSubmission::CopyFrom(const OrderSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.OrderSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderSubmission::IsInitialized() const {
  return true;
}

void OrderSubmission::InternalSwap(OrderSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderSubmission, type_)
      + sizeof(OrderSubmission::type_)
      - PROTOBUF_FIELD_OFFSET(OrderSubmission, peggedorder_)>(
          reinterpret_cast<char*>(&peggedorder_),
          reinterpret_cast<char*>(&other->peggedorder_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderSubmission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrderCancellation::_Internal {
 public:
};

OrderCancellation::OrderCancellation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.OrderCancellation)
}
OrderCancellation::OrderCancellation(const OrderCancellation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_orderid(), 
      GetArena());
  }
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.OrderCancellation)
}

void OrderCancellation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderCancellation_vega_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OrderCancellation::~OrderCancellation() {
  // @@protoc_insertion_point(destructor:vega.OrderCancellation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderCancellation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderCancellation::ArenaDtor(void* object) {
  OrderCancellation* _this = reinterpret_cast< OrderCancellation* >(object);
  (void)_this;
}
void OrderCancellation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderCancellation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderCancellation& OrderCancellation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderCancellation_vega_2eproto.base);
  return *internal_default_instance();
}


void OrderCancellation::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.OrderCancellation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmpty();
  marketid_.ClearToEmpty();
  partyid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderCancellation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderID = 1 [json_name = "orderID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.OrderCancellation.orderID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketID = 2 [json_name = "marketID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.OrderCancellation.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partyID = 3 [json_name = "partyID", (.validator.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.OrderCancellation.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderCancellation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.OrderCancellation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1 [json_name = "orderID"];
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.OrderCancellation.orderID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.OrderCancellation.marketID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_marketid(), target);
  }

  // string partyID = 3 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.OrderCancellation.partyID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_partyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.OrderCancellation)
  return target;
}

size_t OrderCancellation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.OrderCancellation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderID = 1 [json_name = "orderID"];
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // string marketID = 2 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // string partyID = 3 [json_name = "partyID", (.validator.field) = {
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderCancellation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.OrderCancellation)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderCancellation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderCancellation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.OrderCancellation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.OrderCancellation)
    MergeFrom(*source);
  }
}

void OrderCancellation::MergeFrom(const OrderCancellation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.OrderCancellation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
}

void OrderCancellation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.OrderCancellation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCancellation::CopyFrom(const OrderCancellation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.OrderCancellation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCancellation::IsInitialized() const {
  return true;
}

void OrderCancellation::InternalSwap(OrderCancellation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderCancellation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeRegistration::_Internal {
 public:
};

NodeRegistration::NodeRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.NodeRegistration)
}
NodeRegistration::NodeRegistration(const NodeRegistration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pubkey(), 
      GetArena());
  }
  chainpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chainpubkey().empty()) {
    chainpubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chainpubkey(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.NodeRegistration)
}

void NodeRegistration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeRegistration_vega_2eproto.base);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chainpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NodeRegistration::~NodeRegistration() {
  // @@protoc_insertion_point(destructor:vega.NodeRegistration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeRegistration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chainpubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeRegistration::ArenaDtor(void* object) {
  NodeRegistration* _this = reinterpret_cast< NodeRegistration* >(object);
  (void)_this;
}
void NodeRegistration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeRegistration& NodeRegistration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeRegistration_vega_2eproto.base);
  return *internal_default_instance();
}


void NodeRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NodeRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_.ClearToEmpty();
  chainpubkey_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeRegistration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes pubKey = 1 [json_name = "pubKey", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chainPubKey = 2 [json_name = "chainPubKey", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chainpubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeRegistration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NodeRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pubKey = 1 [json_name = "pubKey", (.validator.field) = {
  if (this->pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pubkey(), target);
  }

  // bytes chainPubKey = 2 [json_name = "chainPubKey", (.validator.field) = {
  if (this->chainpubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chainpubkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NodeRegistration)
  return target;
}

size_t NodeRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NodeRegistration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pubKey = 1 [json_name = "pubKey", (.validator.field) = {
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey());
  }

  // bytes chainPubKey = 2 [json_name = "chainPubKey", (.validator.field) = {
  if (this->chainpubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chainpubkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeRegistration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NodeRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeRegistration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeRegistration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NodeRegistration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NodeRegistration)
    MergeFrom(*source);
  }
}

void NodeRegistration::MergeFrom(const NodeRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NodeRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey().size() > 0) {
    _internal_set_pubkey(from._internal_pubkey());
  }
  if (from.chainpubkey().size() > 0) {
    _internal_set_chainpubkey(from._internal_chainpubkey());
  }
}

void NodeRegistration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NodeRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRegistration::CopyFrom(const NodeRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NodeRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRegistration::IsInitialized() const {
  return true;
}

void NodeRegistration::InternalSwap(NodeRegistration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chainpubkey_.Swap(&other->chainpubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeRegistration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeVote::_Internal {
 public:
};

NodeVote::NodeVote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.NodeVote)
}
NodeVote::NodeVote(const NodeVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pubkey(), 
      GetArena());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.NodeVote)
}

void NodeVote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeVote_vega_2eproto.base);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NodeVote::~NodeVote() {
  // @@protoc_insertion_point(destructor:vega.NodeVote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeVote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeVote::ArenaDtor(void* object) {
  NodeVote* _this = reinterpret_cast< NodeVote* >(object);
  (void)_this;
}
void NodeVote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeVote& NodeVote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeVote_vega_2eproto.base);
  return *internal_default_instance();
}


void NodeVote::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NodeVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_.ClearToEmpty();
  reference_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeVote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes pubKey = 1 [json_name = "pubKey", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 2 [json_name = "reference", (.validator.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.NodeVote.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeVote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NodeVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pubKey = 1 [json_name = "pubKey", (.validator.field) = {
  if (this->pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pubkey(), target);
  }

  // string reference = 2 [json_name = "reference", (.validator.field) = {
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.NodeVote.reference");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NodeVote)
  return target;
}

size_t NodeVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NodeVote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pubKey = 1 [json_name = "pubKey", (.validator.field) = {
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey());
  }

  // string reference = 2 [json_name = "reference", (.validator.field) = {
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeVote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NodeVote)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeVote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeVote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NodeVote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NodeVote)
    MergeFrom(*source);
  }
}

void NodeVote::MergeFrom(const NodeVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NodeVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey().size() > 0) {
    _internal_set_pubkey(from._internal_pubkey());
  }
  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
}

void NodeVote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NodeVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeVote::CopyFrom(const NodeVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NodeVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeVote::IsInitialized() const {
  return true;
}

void NodeVote::InternalSwap(NodeVote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeVote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Account::_Internal {
 public:
};

Account::Account(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Account)
}
Account::Account(const Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(), 
      GetArena());
  }
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  ::memcpy(&balance_, &from.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:vega.Account)
}

void Account::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Account_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&balance_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(type_));
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:vega.Account)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Account::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Account::ArenaDtor(void* object) {
  Account* _this = reinterpret_cast< Account* >(object);
  (void)_this;
}
void Account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Account& Account::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Account_vega_2eproto.base);
  return *internal_default_instance();
}


void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  owner_.ClearToEmpty();
  asset_.ClearToEmpty();
  marketid_.ClearToEmpty();
  ::memset(&balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Account.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner = 2 [json_name = "owner"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Account.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 balance = 3 [json_name = "balance"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 4 [json_name = "asset"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Account.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketID = 5 [json_name = "marketID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Account.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.AccountType type = 6 [json_name = "type"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::AccountType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Account.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string owner = 2 [json_name = "owner"];
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Account.owner");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner(), target);
  }

  // uint64 balance = 3 [json_name = "balance"];
  if (this->balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_balance(), target);
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Account.asset");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_asset(), target);
  }

  // string marketID = 5 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Account.marketID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_marketid(), target);
  }

  // .vega.AccountType type = 6 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string owner = 2 [json_name = "owner"];
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string asset = 4 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // string marketID = 5 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // uint64 balance = 3 [json_name = "balance"];
  if (this->balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_balance());
  }

  // .vega.AccountType type = 6 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Account::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const Account* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Account>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Account)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.owner().size() > 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Account::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::InternalSwap(Account* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Account, type_)
      + sizeof(Account::type_)
      - PROTOBUF_FIELD_OFFSET(Account, balance_)>(
          reinterpret_cast<char*>(&balance_),
          reinterpret_cast<char*>(&other->balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Account::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FinancialAmount::_Internal {
 public:
};

FinancialAmount::FinancialAmount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.FinancialAmount)
}
FinancialAmount::FinancialAmount(const FinancialAmount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(), 
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:vega.FinancialAmount)
}

void FinancialAmount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FinancialAmount_vega_2eproto.base);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

FinancialAmount::~FinancialAmount() {
  // @@protoc_insertion_point(destructor:vega.FinancialAmount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FinancialAmount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FinancialAmount::ArenaDtor(void* object) {
  FinancialAmount* _this = reinterpret_cast< FinancialAmount* >(object);
  (void)_this;
}
void FinancialAmount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FinancialAmount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinancialAmount& FinancialAmount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FinancialAmount_vega_2eproto.base);
  return *internal_default_instance();
}


void FinancialAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.FinancialAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_.ClearToEmpty();
  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FinancialAmount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 amount = 1 [json_name = "amount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 2 [json_name = "asset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.FinancialAmount.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinancialAmount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.FinancialAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 amount = 1 [json_name = "amount"];
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_amount(), target);
  }

  // string asset = 2 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.FinancialAmount.asset");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_asset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.FinancialAmount)
  return target;
}

size_t FinancialAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.FinancialAmount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset = 2 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // int64 amount = 1 [json_name = "amount"];
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinancialAmount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.FinancialAmount)
  GOOGLE_DCHECK_NE(&from, this);
  const FinancialAmount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FinancialAmount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.FinancialAmount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.FinancialAmount)
    MergeFrom(*source);
  }
}

void FinancialAmount::MergeFrom(const FinancialAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.FinancialAmount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void FinancialAmount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.FinancialAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinancialAmount::CopyFrom(const FinancialAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.FinancialAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinancialAmount::IsInitialized() const {
  return true;
}

void FinancialAmount::InternalSwap(FinancialAmount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FinancialAmount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transfer::_Internal {
 public:
  static const ::vega::FinancialAmount& amount(const Transfer* msg);
};

const ::vega::FinancialAmount&
Transfer::_Internal::amount(const Transfer* msg) {
  return *msg->amount_;
}
Transfer::Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Transfer)
}
Transfer::Transfer(const Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArena());
  }
  if (from._internal_has_amount()) {
    amount_ = new ::vega::FinancialAmount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  ::memcpy(&minamount_, &from.minamount_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&minamount_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:vega.Transfer)
}

void Transfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transfer_vega_2eproto.base);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(type_));
}

Transfer::~Transfer() {
  // @@protoc_insertion_point(destructor:vega.Transfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void Transfer::ArenaDtor(void* object) {
  Transfer* _this = reinterpret_cast< Transfer* >(object);
  (void)_this;
}
void Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transfer& Transfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transfer_vega_2eproto.base);
  return *internal_default_instance();
}


void Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  ::memset(&minamount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&minamount_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string owner = 1 [json_name = "owner"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Transfer.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.FinancialAmount amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.TransferType type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::TransferType>(val));
        } else goto handle_unusual;
        continue;
      // int64 minAmount = 4 [json_name = "minAmount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          minamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner = 1 [json_name = "owner"];
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Transfer.owner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // .vega.FinancialAmount amount = 2 [json_name = "amount"];
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::amount(this), target, stream);
  }

  // .vega.TransferType type = 3 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // int64 minAmount = 4 [json_name = "minAmount"];
  if (this->minamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_minamount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Transfer)
  return target;
}

size_t Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Transfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 1 [json_name = "owner"];
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // .vega.FinancialAmount amount = 2 [json_name = "amount"];
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // int64 minAmount = 4 [json_name = "minAmount"];
  if (this->minamount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_minamount());
  }

  // .vega.TransferType type = 3 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const Transfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Transfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Transfer)
    MergeFrom(*source);
  }
}

void Transfer::MergeFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner().size() > 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::vega::FinancialAmount::MergeFrom(from._internal_amount());
  }
  if (from.minamount() != 0) {
    _internal_set_minamount(from._internal_minamount());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Transfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transfer::CopyFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transfer::IsInitialized() const {
  return true;
}

void Transfer::InternalSwap(Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transfer, type_)
      + sizeof(Transfer::type_)
      - PROTOBUF_FIELD_OFFSET(Transfer, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferRequest::_Internal {
 public:
};

TransferRequest::TransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fromaccount_(arena),
  toaccount_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.TransferRequest)
}
TransferRequest::TransferRequest(const TransferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fromaccount_(from.fromaccount_),
      toaccount_(from.toaccount_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(), 
      GetArena());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(), 
      GetArena());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&minamount_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(minamount_));
  // @@protoc_insertion_point(copy_constructor:vega.TransferRequest)
}

void TransferRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferRequest_vega_2eproto.base);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&minamount_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(minamount_));
}

TransferRequest::~TransferRequest() {
  // @@protoc_insertion_point(destructor:vega.TransferRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferRequest::ArenaDtor(void* object) {
  TransferRequest* _this = reinterpret_cast< TransferRequest* >(object);
  (void)_this;
}
void TransferRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferRequest& TransferRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferRequest_vega_2eproto.base);
  return *internal_default_instance();
}


void TransferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TransferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fromaccount_.Clear();
  toaccount_.Clear();
  asset_.ClearToEmpty();
  reference_.ClearToEmpty();
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minamount_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(minamount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Account fromAccount = 1 [json_name = "fromAccount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fromaccount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.Account toAccount = 2 [json_name = "toAccount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_toaccount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 minAmount = 4 [json_name = "minAmount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          minamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 5 [json_name = "asset"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.TransferRequest.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 6 [json_name = "reference"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.TransferRequest.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TransferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Account fromAccount = 1 [json_name = "fromAccount"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fromaccount_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fromaccount(i), target, stream);
  }

  // repeated .vega.Account toAccount = 2 [json_name = "toAccount"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_toaccount_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_toaccount(i), target, stream);
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  // uint64 minAmount = 4 [json_name = "minAmount"];
  if (this->minamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_minamount(), target);
  }

  // string asset = 5 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.TransferRequest.asset");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_asset(), target);
  }

  // string reference = 6 [json_name = "reference"];
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.TransferRequest.reference");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TransferRequest)
  return target;
}

size_t TransferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TransferRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Account fromAccount = 1 [json_name = "fromAccount"];
  total_size += 1UL * this->_internal_fromaccount_size();
  for (const auto& msg : this->fromaccount_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.Account toAccount = 2 [json_name = "toAccount"];
  total_size += 1UL * this->_internal_toaccount_size();
  for (const auto& msg : this->toaccount_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string asset = 5 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // string reference = 6 [json_name = "reference"];
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  // uint64 minAmount = 4 [json_name = "minAmount"];
  if (this->minamount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_minamount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TransferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TransferRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TransferRequest)
    MergeFrom(*source);
  }
}

void TransferRequest::MergeFrom(const TransferRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TransferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fromaccount_.MergeFrom(from.fromaccount_);
  toaccount_.MergeFrom(from.toaccount_);
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.minamount() != 0) {
    _internal_set_minamount(from._internal_minamount());
  }
}

void TransferRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TransferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferRequest::CopyFrom(const TransferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TransferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferRequest::IsInitialized() const {
  return true;
}

void TransferRequest::InternalSwap(TransferRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fromaccount_.InternalSwap(&other->fromaccount_);
  toaccount_.InternalSwap(&other->toaccount_);
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferRequest, minamount_)
      + sizeof(TransferRequest::minamount_)
      - PROTOBUF_FIELD_OFFSET(TransferRequest, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LedgerEntry::_Internal {
 public:
};

LedgerEntry::LedgerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.LedgerEntry)
}
LedgerEntry::LedgerEntry(const LedgerEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fromaccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fromaccount().empty()) {
    fromaccount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fromaccount(), 
      GetArena());
  }
  toaccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_toaccount().empty()) {
    toaccount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_toaccount(), 
      GetArena());
  }
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference(), 
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:vega.LedgerEntry)
}

void LedgerEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LedgerEntry_vega_2eproto.base);
  fromaccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toaccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(timestamp_));
}

LedgerEntry::~LedgerEntry() {
  // @@protoc_insertion_point(destructor:vega.LedgerEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LedgerEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fromaccount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toaccount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LedgerEntry::ArenaDtor(void* object) {
  LedgerEntry* _this = reinterpret_cast< LedgerEntry* >(object);
  (void)_this;
}
void LedgerEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LedgerEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LedgerEntry& LedgerEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LedgerEntry_vega_2eproto.base);
  return *internal_default_instance();
}


void LedgerEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LedgerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fromaccount_.ClearToEmpty();
  toaccount_.ClearToEmpty();
  reference_.ClearToEmpty();
  type_.ClearToEmpty();
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LedgerEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fromAccount = 1 [json_name = "fromAccount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fromaccount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LedgerEntry.fromAccount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string toAccount = 2 [json_name = "toAccount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_toaccount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LedgerEntry.toAccount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 4 [json_name = "reference"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LedgerEntry.reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 5 [json_name = "type"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LedgerEntry.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 6 [json_name = "timestamp"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LedgerEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LedgerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fromAccount = 1 [json_name = "fromAccount"];
  if (this->fromaccount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fromaccount().data(), static_cast<int>(this->_internal_fromaccount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.fromAccount");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fromaccount(), target);
  }

  // string toAccount = 2 [json_name = "toAccount"];
  if (this->toaccount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_toaccount().data(), static_cast<int>(this->_internal_toaccount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.toAccount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_toaccount(), target);
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  // string reference = 4 [json_name = "reference"];
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.reference");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reference(), target);
  }

  // string type = 5 [json_name = "type"];
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LedgerEntry.type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_type(), target);
  }

  // int64 timestamp = 6 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LedgerEntry)
  return target;
}

size_t LedgerEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LedgerEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fromAccount = 1 [json_name = "fromAccount"];
  if (this->fromaccount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fromaccount());
  }

  // string toAccount = 2 [json_name = "toAccount"];
  if (this->toaccount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_toaccount());
  }

  // string reference = 4 [json_name = "reference"];
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // string type = 5 [json_name = "type"];
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint64 amount = 3 [json_name = "amount"];
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  // int64 timestamp = 6 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LedgerEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LedgerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LedgerEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LedgerEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LedgerEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LedgerEntry)
    MergeFrom(*source);
  }
}

void LedgerEntry::MergeFrom(const LedgerEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LedgerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fromaccount().size() > 0) {
    _internal_set_fromaccount(from._internal_fromaccount());
  }
  if (from.toaccount().size() > 0) {
    _internal_set_toaccount(from._internal_toaccount());
  }
  if (from.reference().size() > 0) {
    _internal_set_reference(from._internal_reference());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void LedgerEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LedgerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedgerEntry::CopyFrom(const LedgerEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LedgerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedgerEntry::IsInitialized() const {
  return true;
}

void LedgerEntry::InternalSwap(LedgerEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fromaccount_.Swap(&other->fromaccount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  toaccount_.Swap(&other->toaccount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LedgerEntry, timestamp_)
      + sizeof(LedgerEntry::timestamp_)
      - PROTOBUF_FIELD_OFFSET(LedgerEntry, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LedgerEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferBalance::_Internal {
 public:
  static const ::vega::Account& account(const TransferBalance* msg);
};

const ::vega::Account&
TransferBalance::_Internal::account(const TransferBalance* msg) {
  return *msg->account_;
}
TransferBalance::TransferBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.TransferBalance)
}
TransferBalance::TransferBalance(const TransferBalance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::vega::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  balance_ = from.balance_;
  // @@protoc_insertion_point(copy_constructor:vega.TransferBalance)
}

void TransferBalance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferBalance_vega_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&account_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&balance_) -
      reinterpret_cast<char*>(&account_)) + sizeof(balance_));
}

TransferBalance::~TransferBalance() {
  // @@protoc_insertion_point(destructor:vega.TransferBalance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferBalance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete account_;
}

void TransferBalance::ArenaDtor(void* object) {
  TransferBalance* _this = reinterpret_cast< TransferBalance* >(object);
  (void)_this;
}
void TransferBalance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferBalance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferBalance& TransferBalance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferBalance_vega_2eproto.base);
  return *internal_default_instance();
}


void TransferBalance::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TransferBalance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  balance_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferBalance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Account account = 1 [json_name = "account"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 balance = 2 [json_name = "balance"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferBalance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TransferBalance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Account account = 1 [json_name = "account"];
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // uint64 balance = 2 [json_name = "balance"];
  if (this->balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TransferBalance)
  return target;
}

size_t TransferBalance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TransferBalance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Account account = 1 [json_name = "account"];
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // uint64 balance = 2 [json_name = "balance"];
  if (this->balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferBalance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TransferBalance)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferBalance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferBalance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TransferBalance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TransferBalance)
    MergeFrom(*source);
  }
}

void TransferBalance::MergeFrom(const TransferBalance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TransferBalance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    _internal_mutable_account()->::vega::Account::MergeFrom(from._internal_account());
  }
  if (from.balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
}

void TransferBalance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TransferBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferBalance::CopyFrom(const TransferBalance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TransferBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferBalance::IsInitialized() const {
  return true;
}

void TransferBalance::InternalSwap(TransferBalance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferBalance, balance_)
      + sizeof(TransferBalance::balance_)
      - PROTOBUF_FIELD_OFFSET(TransferBalance, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferBalance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferResponse::_Internal {
 public:
};

TransferResponse::TransferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transfers_(arena),
  balances_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.TransferResponse)
}
TransferResponse::TransferResponse(const TransferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transfers_(from.transfers_),
      balances_(from.balances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.TransferResponse)
}

void TransferResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferResponse_vega_2eproto.base);
}

TransferResponse::~TransferResponse() {
  // @@protoc_insertion_point(destructor:vega.TransferResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransferResponse::ArenaDtor(void* object) {
  TransferResponse* _this = reinterpret_cast< TransferResponse* >(object);
  (void)_this;
}
void TransferResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferResponse& TransferResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferResponse_vega_2eproto.base);
  return *internal_default_instance();
}


void TransferResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TransferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transfers_.Clear();
  balances_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.LedgerEntry transfers = 1 [json_name = "transfers"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transfers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.TransferBalance balances = 2 [json_name = "balances"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TransferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.LedgerEntry transfers = 1 [json_name = "transfers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transfers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transfers(i), target, stream);
  }

  // repeated .vega.TransferBalance balances = 2 [json_name = "balances"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_balances_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_balances(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TransferResponse)
  return target;
}

size_t TransferResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TransferResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.LedgerEntry transfers = 1 [json_name = "transfers"];
  total_size += 1UL * this->_internal_transfers_size();
  for (const auto& msg : this->transfers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.TransferBalance balances = 2 [json_name = "balances"];
  total_size += 1UL * this->_internal_balances_size();
  for (const auto& msg : this->balances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TransferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TransferResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TransferResponse)
    MergeFrom(*source);
  }
}

void TransferResponse::MergeFrom(const TransferResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TransferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transfers_.MergeFrom(from.transfers_);
  balances_.MergeFrom(from.balances_);
}

void TransferResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TransferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferResponse::CopyFrom(const TransferResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TransferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferResponse::IsInitialized() const {
  return true;
}

void TransferResponse::InternalSwap(TransferResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transfers_.InternalSwap(&other->transfers_);
  balances_.InternalSwap(&other->balances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarginLevels::_Internal {
 public:
};

MarginLevels::MarginLevels(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.MarginLevels)
}
MarginLevels::MarginLevels(const MarginLevels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(), 
      GetArena());
  }
  ::memcpy(&maintenancemargin_, &from.maintenancemargin_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&maintenancemargin_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:vega.MarginLevels)
}

void MarginLevels::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarginLevels_vega_2eproto.base);
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&maintenancemargin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&maintenancemargin_)) + sizeof(timestamp_));
}

MarginLevels::~MarginLevels() {
  // @@protoc_insertion_point(destructor:vega.MarginLevels)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarginLevels::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarginLevels::ArenaDtor(void* object) {
  MarginLevels* _this = reinterpret_cast< MarginLevels* >(object);
  (void)_this;
}
void MarginLevels::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarginLevels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginLevels& MarginLevels::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarginLevels_vega_2eproto.base);
  return *internal_default_instance();
}


void MarginLevels::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarginLevels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partyid_.ClearToEmpty();
  marketid_.ClearToEmpty();
  asset_.ClearToEmpty();
  ::memset(&maintenancemargin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&maintenancemargin_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarginLevels::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 maintenanceMargin = 1 [json_name = "maintenanceMargin"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          maintenancemargin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 searchLevel = 2 [json_name = "searchLevel"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          searchlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 initialMargin = 3 [json_name = "initialMargin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          initialmargin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 collateralReleaseLevel = 4 [json_name = "collateralReleaseLevel"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          collateralreleaselevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partyID = 5 [json_name = "partyID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarginLevels.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketID = 6 [json_name = "marketID"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarginLevels.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset = 7 [json_name = "asset"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarginLevels.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 8 [json_name = "timestamp"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarginLevels::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarginLevels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 maintenanceMargin = 1 [json_name = "maintenanceMargin"];
  if (this->maintenancemargin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_maintenancemargin(), target);
  }

  // uint64 searchLevel = 2 [json_name = "searchLevel"];
  if (this->searchlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_searchlevel(), target);
  }

  // uint64 initialMargin = 3 [json_name = "initialMargin"];
  if (this->initialmargin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_initialmargin(), target);
  }

  // uint64 collateralReleaseLevel = 4 [json_name = "collateralReleaseLevel"];
  if (this->collateralreleaselevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_collateralreleaselevel(), target);
  }

  // string partyID = 5 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarginLevels.partyID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_partyid(), target);
  }

  // string marketID = 6 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarginLevels.marketID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_marketid(), target);
  }

  // string asset = 7 [json_name = "asset"];
  if (this->asset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarginLevels.asset");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_asset(), target);
  }

  // int64 timestamp = 8 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarginLevels)
  return target;
}

size_t MarginLevels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarginLevels)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partyID = 5 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string marketID = 6 [json_name = "marketID"];
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // string asset = 7 [json_name = "asset"];
  if (this->asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // uint64 maintenanceMargin = 1 [json_name = "maintenanceMargin"];
  if (this->maintenancemargin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_maintenancemargin());
  }

  // uint64 searchLevel = 2 [json_name = "searchLevel"];
  if (this->searchlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_searchlevel());
  }

  // uint64 initialMargin = 3 [json_name = "initialMargin"];
  if (this->initialmargin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_initialmargin());
  }

  // uint64 collateralReleaseLevel = 4 [json_name = "collateralReleaseLevel"];
  if (this->collateralreleaselevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_collateralreleaselevel());
  }

  // int64 timestamp = 8 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginLevels::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarginLevels)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginLevels* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarginLevels>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarginLevels)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarginLevels)
    MergeFrom(*source);
  }
}

void MarginLevels::MergeFrom(const MarginLevels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarginLevels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.asset().size() > 0) {
    _internal_set_asset(from._internal_asset());
  }
  if (from.maintenancemargin() != 0) {
    _internal_set_maintenancemargin(from._internal_maintenancemargin());
  }
  if (from.searchlevel() != 0) {
    _internal_set_searchlevel(from._internal_searchlevel());
  }
  if (from.initialmargin() != 0) {
    _internal_set_initialmargin(from._internal_initialmargin());
  }
  if (from.collateralreleaselevel() != 0) {
    _internal_set_collateralreleaselevel(from._internal_collateralreleaselevel());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void MarginLevels::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarginLevels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginLevels::CopyFrom(const MarginLevels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarginLevels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginLevels::IsInitialized() const {
  return true;
}

void MarginLevels::InternalSwap(MarginLevels* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_.Swap(&other->asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarginLevels, timestamp_)
      + sizeof(MarginLevels::timestamp_)
      - PROTOBUF_FIELD_OFFSET(MarginLevels, maintenancemargin_)>(
          reinterpret_cast<char*>(&maintenancemargin_),
          reinterpret_cast<char*>(&other->maintenancemargin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarginLevels::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MarketData::_Internal {
 public:
};

MarketData::MarketData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pricemonitoringbounds_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.MarketData)
}
MarketData::MarketData(const MarketData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pricemonitoringbounds_(from.pricemonitoringbounds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market(), 
      GetArena());
  }
  targetstake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_targetstake().empty()) {
    targetstake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_targetstake(), 
      GetArena());
  }
  suppliedstake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suppliedstake().empty()) {
    suppliedstake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_suppliedstake(), 
      GetArena());
  }
  ::memcpy(&markprice_, &from.markprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&trigger_) -
    reinterpret_cast<char*>(&markprice_)) + sizeof(trigger_));
  // @@protoc_insertion_point(copy_constructor:vega.MarketData)
}

void MarketData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketData_vega_2eproto.base);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetstake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suppliedstake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&markprice_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&trigger_) -
      reinterpret_cast<char*>(&markprice_)) + sizeof(trigger_));
}

MarketData::~MarketData() {
  // @@protoc_insertion_point(destructor:vega.MarketData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetstake_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suppliedstake_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketData::ArenaDtor(void* object) {
  MarketData* _this = reinterpret_cast< MarketData* >(object);
  (void)_this;
}
void MarketData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketData& MarketData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketData_vega_2eproto.base);
  return *internal_default_instance();
}


void MarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.MarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pricemonitoringbounds_.Clear();
  market_.ClearToEmpty();
  targetstake_.ClearToEmpty();
  suppliedstake_.ClearToEmpty();
  ::memset(&markprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_) -
      reinterpret_cast<char*>(&markprice_)) + sizeof(trigger_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 markPrice = 1 [json_name = "markPrice"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          markprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bestBidPrice = 2 [json_name = "bestBidPrice"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bestbidprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bestBidVolume = 3 [json_name = "bestBidVolume"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bestbidvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bestOfferPrice = 4 [json_name = "bestOfferPrice"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bestofferprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bestOfferVolume = 5 [json_name = "bestOfferVolume"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bestoffervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bestStaticBidPrice = 6 [json_name = "bestStaticBidPrice"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          beststaticbidprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bestStaticBidVolume = 7 [json_name = "bestStaticBidVolume"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          beststaticbidvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bestStaticOfferPrice = 8 [json_name = "bestStaticOfferPrice"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          beststaticofferprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bestStaticOfferVolume = 9 [json_name = "bestStaticOfferVolume"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          beststaticoffervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 midPrice = 10 [json_name = "midPrice"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          midprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 staticMidPrice = 11 [json_name = "staticMidPrice"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          staticmidprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string market = 12 [json_name = "market"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarketData.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 13 [json_name = "timestamp"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 openInterest = 14 [json_name = "openInterest"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          openinterest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 auctionEnd = 15 [json_name = "auctionEnd"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          auctionend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 auctionStart = 16 [json_name = "auctionStart"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          auctionstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 indicativePrice = 17 [json_name = "indicativePrice"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          indicativeprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 indicativeVolume = 18 [json_name = "indicativeVolume"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          indicativevolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Market.TradingMode marketTradingMode = 19 [json_name = "marketTradingMode"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_markettradingmode(static_cast<::vega::Market_TradingMode>(val));
        } else goto handle_unusual;
        continue;
      // .vega.AuctionTrigger trigger = 20 [json_name = "trigger"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trigger(static_cast<::vega::AuctionTrigger>(val));
        } else goto handle_unusual;
        continue;
      // string targetStake = 21 [json_name = "targetStake"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_targetstake();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarketData.targetStake"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string suppliedStake = 22 [json_name = "suppliedStake"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_suppliedstake();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.MarketData.suppliedStake"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.PriceMonitoringBounds priceMonitoringBounds = 23 [json_name = "priceMonitoringBounds"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pricemonitoringbounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.MarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 markPrice = 1 [json_name = "markPrice"];
  if (this->markprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_markprice(), target);
  }

  // uint64 bestBidPrice = 2 [json_name = "bestBidPrice"];
  if (this->bestbidprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bestbidprice(), target);
  }

  // uint64 bestBidVolume = 3 [json_name = "bestBidVolume"];
  if (this->bestbidvolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_bestbidvolume(), target);
  }

  // uint64 bestOfferPrice = 4 [json_name = "bestOfferPrice"];
  if (this->bestofferprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_bestofferprice(), target);
  }

  // uint64 bestOfferVolume = 5 [json_name = "bestOfferVolume"];
  if (this->bestoffervolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_bestoffervolume(), target);
  }

  // uint64 bestStaticBidPrice = 6 [json_name = "bestStaticBidPrice"];
  if (this->beststaticbidprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_beststaticbidprice(), target);
  }

  // uint64 bestStaticBidVolume = 7 [json_name = "bestStaticBidVolume"];
  if (this->beststaticbidvolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_beststaticbidvolume(), target);
  }

  // uint64 bestStaticOfferPrice = 8 [json_name = "bestStaticOfferPrice"];
  if (this->beststaticofferprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_beststaticofferprice(), target);
  }

  // uint64 bestStaticOfferVolume = 9 [json_name = "bestStaticOfferVolume"];
  if (this->beststaticoffervolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_beststaticoffervolume(), target);
  }

  // uint64 midPrice = 10 [json_name = "midPrice"];
  if (this->midprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_midprice(), target);
  }

  // uint64 staticMidPrice = 11 [json_name = "staticMidPrice"];
  if (this->staticmidprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_staticmidprice(), target);
  }

  // string market = 12 [json_name = "market"];
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarketData.market");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_market(), target);
  }

  // int64 timestamp = 13 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_timestamp(), target);
  }

  // uint64 openInterest = 14 [json_name = "openInterest"];
  if (this->openinterest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_openinterest(), target);
  }

  // int64 auctionEnd = 15 [json_name = "auctionEnd"];
  if (this->auctionend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_auctionend(), target);
  }

  // int64 auctionStart = 16 [json_name = "auctionStart"];
  if (this->auctionstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_auctionstart(), target);
  }

  // uint64 indicativePrice = 17 [json_name = "indicativePrice"];
  if (this->indicativeprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_indicativeprice(), target);
  }

  // uint64 indicativeVolume = 18 [json_name = "indicativeVolume"];
  if (this->indicativevolume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_indicativevolume(), target);
  }

  // .vega.Market.TradingMode marketTradingMode = 19 [json_name = "marketTradingMode"];
  if (this->markettradingmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_markettradingmode(), target);
  }

  // .vega.AuctionTrigger trigger = 20 [json_name = "trigger"];
  if (this->trigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_trigger(), target);
  }

  // string targetStake = 21 [json_name = "targetStake"];
  if (this->targetstake().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetstake().data(), static_cast<int>(this->_internal_targetstake().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarketData.targetStake");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_targetstake(), target);
  }

  // string suppliedStake = 22 [json_name = "suppliedStake"];
  if (this->suppliedstake().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_suppliedstake().data(), static_cast<int>(this->_internal_suppliedstake().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.MarketData.suppliedStake");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_suppliedstake(), target);
  }

  // repeated .vega.PriceMonitoringBounds priceMonitoringBounds = 23 [json_name = "priceMonitoringBounds"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pricemonitoringbounds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_pricemonitoringbounds(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.MarketData)
  return target;
}

size_t MarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.MarketData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.PriceMonitoringBounds priceMonitoringBounds = 23 [json_name = "priceMonitoringBounds"];
  total_size += 2UL * this->_internal_pricemonitoringbounds_size();
  for (const auto& msg : this->pricemonitoringbounds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market = 12 [json_name = "market"];
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // string targetStake = 21 [json_name = "targetStake"];
  if (this->targetstake().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetstake());
  }

  // string suppliedStake = 22 [json_name = "suppliedStake"];
  if (this->suppliedstake().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_suppliedstake());
  }

  // uint64 markPrice = 1 [json_name = "markPrice"];
  if (this->markprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_markprice());
  }

  // uint64 bestBidPrice = 2 [json_name = "bestBidPrice"];
  if (this->bestbidprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bestbidprice());
  }

  // uint64 bestBidVolume = 3 [json_name = "bestBidVolume"];
  if (this->bestbidvolume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bestbidvolume());
  }

  // uint64 bestOfferPrice = 4 [json_name = "bestOfferPrice"];
  if (this->bestofferprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bestofferprice());
  }

  // uint64 bestOfferVolume = 5 [json_name = "bestOfferVolume"];
  if (this->bestoffervolume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bestoffervolume());
  }

  // uint64 bestStaticBidPrice = 6 [json_name = "bestStaticBidPrice"];
  if (this->beststaticbidprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_beststaticbidprice());
  }

  // uint64 bestStaticBidVolume = 7 [json_name = "bestStaticBidVolume"];
  if (this->beststaticbidvolume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_beststaticbidvolume());
  }

  // uint64 bestStaticOfferPrice = 8 [json_name = "bestStaticOfferPrice"];
  if (this->beststaticofferprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_beststaticofferprice());
  }

  // uint64 bestStaticOfferVolume = 9 [json_name = "bestStaticOfferVolume"];
  if (this->beststaticoffervolume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_beststaticoffervolume());
  }

  // uint64 midPrice = 10 [json_name = "midPrice"];
  if (this->midprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_midprice());
  }

  // uint64 staticMidPrice = 11 [json_name = "staticMidPrice"];
  if (this->staticmidprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_staticmidprice());
  }

  // int64 timestamp = 13 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // uint64 openInterest = 14 [json_name = "openInterest"];
  if (this->openinterest() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_openinterest());
  }

  // int64 auctionEnd = 15 [json_name = "auctionEnd"];
  if (this->auctionend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auctionend());
  }

  // int64 auctionStart = 16 [json_name = "auctionStart"];
  if (this->auctionstart() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auctionstart());
  }

  // uint64 indicativePrice = 17 [json_name = "indicativePrice"];
  if (this->indicativeprice() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_indicativeprice());
  }

  // uint64 indicativeVolume = 18 [json_name = "indicativeVolume"];
  if (this->indicativevolume() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_indicativevolume());
  }

  // .vega.Market.TradingMode marketTradingMode = 19 [json_name = "marketTradingMode"];
  if (this->markettradingmode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_markettradingmode());
  }

  // .vega.AuctionTrigger trigger = 20 [json_name = "trigger"];
  if (this->trigger() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trigger());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.MarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.MarketData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.MarketData)
    MergeFrom(*source);
  }
}

void MarketData::MergeFrom(const MarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.MarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pricemonitoringbounds_.MergeFrom(from.pricemonitoringbounds_);
  if (from.market().size() > 0) {
    _internal_set_market(from._internal_market());
  }
  if (from.targetstake().size() > 0) {
    _internal_set_targetstake(from._internal_targetstake());
  }
  if (from.suppliedstake().size() > 0) {
    _internal_set_suppliedstake(from._internal_suppliedstake());
  }
  if (from.markprice() != 0) {
    _internal_set_markprice(from._internal_markprice());
  }
  if (from.bestbidprice() != 0) {
    _internal_set_bestbidprice(from._internal_bestbidprice());
  }
  if (from.bestbidvolume() != 0) {
    _internal_set_bestbidvolume(from._internal_bestbidvolume());
  }
  if (from.bestofferprice() != 0) {
    _internal_set_bestofferprice(from._internal_bestofferprice());
  }
  if (from.bestoffervolume() != 0) {
    _internal_set_bestoffervolume(from._internal_bestoffervolume());
  }
  if (from.beststaticbidprice() != 0) {
    _internal_set_beststaticbidprice(from._internal_beststaticbidprice());
  }
  if (from.beststaticbidvolume() != 0) {
    _internal_set_beststaticbidvolume(from._internal_beststaticbidvolume());
  }
  if (from.beststaticofferprice() != 0) {
    _internal_set_beststaticofferprice(from._internal_beststaticofferprice());
  }
  if (from.beststaticoffervolume() != 0) {
    _internal_set_beststaticoffervolume(from._internal_beststaticoffervolume());
  }
  if (from.midprice() != 0) {
    _internal_set_midprice(from._internal_midprice());
  }
  if (from.staticmidprice() != 0) {
    _internal_set_staticmidprice(from._internal_staticmidprice());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.openinterest() != 0) {
    _internal_set_openinterest(from._internal_openinterest());
  }
  if (from.auctionend() != 0) {
    _internal_set_auctionend(from._internal_auctionend());
  }
  if (from.auctionstart() != 0) {
    _internal_set_auctionstart(from._internal_auctionstart());
  }
  if (from.indicativeprice() != 0) {
    _internal_set_indicativeprice(from._internal_indicativeprice());
  }
  if (from.indicativevolume() != 0) {
    _internal_set_indicativevolume(from._internal_indicativevolume());
  }
  if (from.markettradingmode() != 0) {
    _internal_set_markettradingmode(from._internal_markettradingmode());
  }
  if (from.trigger() != 0) {
    _internal_set_trigger(from._internal_trigger());
  }
}

void MarketData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.MarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketData::CopyFrom(const MarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.MarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketData::IsInitialized() const {
  return true;
}

void MarketData::InternalSwap(MarketData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pricemonitoringbounds_.InternalSwap(&other->pricemonitoringbounds_);
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetstake_.Swap(&other->targetstake_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  suppliedstake_.Swap(&other->suppliedstake_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketData, trigger_)
      + sizeof(MarketData::trigger_)
      - PROTOBUF_FIELD_OFFSET(MarketData, markprice_)>(
          reinterpret_cast<char*>(&markprice_),
          reinterpret_cast<char*>(&other->markprice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PriceMonitoringBounds::_Internal {
 public:
  static const ::vega::PriceMonitoringTrigger& trigger(const PriceMonitoringBounds* msg);
};

const ::vega::PriceMonitoringTrigger&
PriceMonitoringBounds::_Internal::trigger(const PriceMonitoringBounds* msg) {
  return *msg->trigger_;
}
void PriceMonitoringBounds::clear_trigger() {
  if (GetArena() == nullptr && trigger_ != nullptr) {
    delete trigger_;
  }
  trigger_ = nullptr;
}
PriceMonitoringBounds::PriceMonitoringBounds(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.PriceMonitoringBounds)
}
PriceMonitoringBounds::PriceMonitoringBounds(const PriceMonitoringBounds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trigger()) {
    trigger_ = new ::vega::PriceMonitoringTrigger(*from.trigger_);
  } else {
    trigger_ = nullptr;
  }
  ::memcpy(&minvalidprice_, &from.minvalidprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&referenceprice_) -
    reinterpret_cast<char*>(&minvalidprice_)) + sizeof(referenceprice_));
  // @@protoc_insertion_point(copy_constructor:vega.PriceMonitoringBounds)
}

void PriceMonitoringBounds::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PriceMonitoringBounds_vega_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&referenceprice_) -
      reinterpret_cast<char*>(&trigger_)) + sizeof(referenceprice_));
}

PriceMonitoringBounds::~PriceMonitoringBounds() {
  // @@protoc_insertion_point(destructor:vega.PriceMonitoringBounds)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PriceMonitoringBounds::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete trigger_;
}

void PriceMonitoringBounds::ArenaDtor(void* object) {
  PriceMonitoringBounds* _this = reinterpret_cast< PriceMonitoringBounds* >(object);
  (void)_this;
}
void PriceMonitoringBounds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceMonitoringBounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceMonitoringBounds& PriceMonitoringBounds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriceMonitoringBounds_vega_2eproto.base);
  return *internal_default_instance();
}


void PriceMonitoringBounds::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PriceMonitoringBounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && trigger_ != nullptr) {
    delete trigger_;
  }
  trigger_ = nullptr;
  ::memset(&minvalidprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&referenceprice_) -
      reinterpret_cast<char*>(&minvalidprice_)) + sizeof(referenceprice_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceMonitoringBounds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 minValidPrice = 1 [json_name = "minValidPrice"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          minvalidprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 maxValidPrice = 2 [json_name = "maxValidPrice"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxvalidprice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.PriceMonitoringTrigger trigger = 3 [json_name = "trigger"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double referencePrice = 4 [json_name = "referencePrice"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          referenceprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceMonitoringBounds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PriceMonitoringBounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 minValidPrice = 1 [json_name = "minValidPrice"];
  if (this->minvalidprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_minvalidprice(), target);
  }

  // uint64 maxValidPrice = 2 [json_name = "maxValidPrice"];
  if (this->maxvalidprice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_maxvalidprice(), target);
  }

  // .vega.PriceMonitoringTrigger trigger = 3 [json_name = "trigger"];
  if (this->has_trigger()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trigger(this), target, stream);
  }

  // double referencePrice = 4 [json_name = "referencePrice"];
  if (!(this->referenceprice() <= 0 && this->referenceprice() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_referenceprice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PriceMonitoringBounds)
  return target;
}

size_t PriceMonitoringBounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PriceMonitoringBounds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.PriceMonitoringTrigger trigger = 3 [json_name = "trigger"];
  if (this->has_trigger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trigger_);
  }

  // uint64 minValidPrice = 1 [json_name = "minValidPrice"];
  if (this->minvalidprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_minvalidprice());
  }

  // uint64 maxValidPrice = 2 [json_name = "maxValidPrice"];
  if (this->maxvalidprice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_maxvalidprice());
  }

  // double referencePrice = 4 [json_name = "referencePrice"];
  if (!(this->referenceprice() <= 0 && this->referenceprice() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceMonitoringBounds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PriceMonitoringBounds)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceMonitoringBounds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriceMonitoringBounds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PriceMonitoringBounds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PriceMonitoringBounds)
    MergeFrom(*source);
  }
}

void PriceMonitoringBounds::MergeFrom(const PriceMonitoringBounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PriceMonitoringBounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trigger()) {
    _internal_mutable_trigger()->::vega::PriceMonitoringTrigger::MergeFrom(from._internal_trigger());
  }
  if (from.minvalidprice() != 0) {
    _internal_set_minvalidprice(from._internal_minvalidprice());
  }
  if (from.maxvalidprice() != 0) {
    _internal_set_maxvalidprice(from._internal_maxvalidprice());
  }
  if (!(from.referenceprice() <= 0 && from.referenceprice() >= 0)) {
    _internal_set_referenceprice(from._internal_referenceprice());
  }
}

void PriceMonitoringBounds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PriceMonitoringBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceMonitoringBounds::CopyFrom(const PriceMonitoringBounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PriceMonitoringBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceMonitoringBounds::IsInitialized() const {
  return true;
}

void PriceMonitoringBounds::InternalSwap(PriceMonitoringBounds* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriceMonitoringBounds, referenceprice_)
      + sizeof(PriceMonitoringBounds::referenceprice_)
      - PROTOBUF_FIELD_OFFSET(PriceMonitoringBounds, trigger_)>(
          reinterpret_cast<char*>(&trigger_),
          reinterpret_cast<char*>(&other->trigger_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceMonitoringBounds::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ErrorDetail::_Internal {
 public:
};

ErrorDetail::ErrorDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ErrorDetail)
}
ErrorDetail::ErrorDetail(const ErrorDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  inner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inner().empty()) {
    inner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_inner(), 
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:vega.ErrorDetail)
}

void ErrorDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErrorDetail_vega_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

ErrorDetail::~ErrorDetail() {
  // @@protoc_insertion_point(destructor:vega.ErrorDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErrorDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorDetail::ArenaDtor(void* object) {
  ErrorDetail* _this = reinterpret_cast< ErrorDetail* >(object);
  (void)_this;
}
void ErrorDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorDetail& ErrorDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorDetail_vega_2eproto.base);
  return *internal_default_instance();
}


void ErrorDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ErrorDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  inner_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1 [json_name = "code"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ErrorDetail.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inner = 3 [json_name = "inner"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_inner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ErrorDetail.inner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ErrorDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1 [json_name = "code"];
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2 [json_name = "message"];
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ErrorDetail.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string inner = 3 [json_name = "inner"];
  if (this->inner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inner().data(), static_cast<int>(this->_internal_inner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ErrorDetail.inner");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_inner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ErrorDetail)
  return target;
}

size_t ErrorDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ErrorDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2 [json_name = "message"];
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string inner = 3 [json_name = "inner"];
  if (this->inner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inner());
  }

  // int32 code = 1 [json_name = "code"];
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ErrorDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ErrorDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ErrorDetail)
    MergeFrom(*source);
  }
}

void ErrorDetail::MergeFrom(const ErrorDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ErrorDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.inner().size() > 0) {
    _internal_set_inner(from._internal_inner());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ErrorDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ErrorDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorDetail::CopyFrom(const ErrorDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ErrorDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorDetail::IsInitialized() const {
  return true;
}

void ErrorDetail::InternalSwap(ErrorDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inner_.Swap(&other->inner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction::_Internal {
 public:
};

Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inputdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inputdata().empty()) {
    inputdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_inputdata(), 
      GetArena());
  }
  ::memcpy(&nonce_, &from.nonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&blockheight_) -
    reinterpret_cast<char*>(&nonce_)) + sizeof(blockheight_));
  clear_has_from();
  switch (from.from_case()) {
    case kAddress: {
      _internal_set_address(from._internal_address());
      break;
    }
    case kPubKey: {
      _internal_set_pubkey(from._internal_pubkey());
      break;
    }
    case FROM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_vega_2eproto.base);
  inputdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&blockheight_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(blockheight_));
  clear_has_from();
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:vega.Transaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  inputdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_from()) {
    clear_from();
  }
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_vega_2eproto.base);
  return *internal_default_instance();
}


void Transaction::clear_from() {
// @@protoc_insertion_point(one_of_clear_start:vega.Transaction)
  switch (from_case()) {
    case kAddress: {
      from_.address_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kPubKey: {
      from_.pubkey_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case FROM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FROM_NOT_SET;
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputdata_.ClearToEmpty();
  ::memset(&nonce_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blockheight_) -
      reinterpret_cast<char*>(&nonce_)) + sizeof(blockheight_));
  clear_from();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes inputData = 1 [json_name = "inputData"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_inputdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 2 [json_name = "nonce"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 blockHeight = 3 [json_name = "blockHeight"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blockheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes address = 1001 [json_name = "address"];
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pubKey = 1002 [json_name = "pubKey"];
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes inputData = 1 [json_name = "inputData"];
  if (this->inputdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_inputdata(), target);
  }

  // uint64 nonce = 2 [json_name = "nonce"];
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nonce(), target);
  }

  // uint64 blockHeight = 3 [json_name = "blockHeight"];
  if (this->blockheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_blockheight(), target);
  }

  // bytes address = 1001 [json_name = "address"];
  if (_internal_has_address()) {
    target = stream->WriteBytesMaybeAliased(
        1001, this->_internal_address(), target);
  }

  // bytes pubKey = 1002 [json_name = "pubKey"];
  if (_internal_has_pubkey()) {
    target = stream->WriteBytesMaybeAliased(
        1002, this->_internal_pubkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes inputData = 1 [json_name = "inputData"];
  if (this->inputdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_inputdata());
  }

  // uint64 nonce = 2 [json_name = "nonce"];
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  // uint64 blockHeight = 3 [json_name = "blockHeight"];
  if (this->blockheight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blockheight());
  }

  switch (from_case()) {
    // bytes address = 1001 [json_name = "address"];
    case kAddress: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_address());
      break;
    }
    // bytes pubKey = 1002 [json_name = "pubKey"];
    case kPubKey: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pubkey());
      break;
    }
    case FROM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inputdata().size() > 0) {
    _internal_set_inputdata(from._internal_inputdata());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.blockheight() != 0) {
    _internal_set_blockheight(from._internal_blockheight());
  }
  switch (from.from_case()) {
    case kAddress: {
      _internal_set_address(from._internal_address());
      break;
    }
    case kPubKey: {
      _internal_set_pubkey(from._internal_pubkey());
      break;
    }
    case FROM_NOT_SET: {
      break;
    }
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inputdata_.Swap(&other->inputdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction, blockheight_)
      + sizeof(Transaction::blockheight_)
      - PROTOBUF_FIELD_OFFSET(Transaction, nonce_)>(
          reinterpret_cast<char*>(&nonce_),
          reinterpret_cast<char*>(&other->nonce_));
  swap(from_, other->from_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Signature::_Internal {
 public:
};

Signature::Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Signature)
}
Signature::Signature(const Signature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sig().empty()) {
    sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sig(), 
      GetArena());
  }
  algo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_algo().empty()) {
    algo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_algo(), 
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:vega.Signature)
}

void Signature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Signature_vega_2eproto.base);
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = PROTOBUF_ULONGLONG(0);
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:vega.Signature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Signature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Signature::ArenaDtor(void* object) {
  Signature* _this = reinterpret_cast< Signature* >(object);
  (void)_this;
}
void Signature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Signature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signature& Signature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signature_vega_2eproto.base);
  return *internal_default_instance();
}


void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sig_.ClearToEmpty();
  algo_.ClearToEmpty();
  version_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes sig = 1 [json_name = "sig"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string algo = 2 [json_name = "algo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_algo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Signature.algo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 version = 3 [json_name = "version"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sig = 1 [json_name = "sig"];
  if (this->sig().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sig(), target);
  }

  // string algo = 2 [json_name = "algo"];
  if (this->algo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_algo().data(), static_cast<int>(this->_internal_algo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Signature.algo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_algo(), target);
  }

  // uint64 version = 3 [json_name = "version"];
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Signature)
  return target;
}

size_t Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Signature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sig = 1 [json_name = "sig"];
  if (this->sig().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sig());
  }

  // string algo = 2 [json_name = "algo"];
  if (this->algo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_algo());
  }

  // uint64 version = 3 [json_name = "version"];
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  const Signature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Signature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Signature)
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sig().size() > 0) {
    _internal_set_sig(from._internal_sig());
  }
  if (from.algo().size() > 0) {
    _internal_set_algo(from._internal_algo());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void Signature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  return true;
}

void Signature::InternalSwap(Signature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sig_.Swap(&other->sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  algo_.Swap(&other->algo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignedBundle::_Internal {
 public:
  static const ::vega::Signature& sig(const SignedBundle* msg);
};

const ::vega::Signature&
SignedBundle::_Internal::sig(const SignedBundle* msg) {
  return *msg->sig_;
}
SignedBundle::SignedBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.SignedBundle)
}
SignedBundle::SignedBundle(const SignedBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx().empty()) {
    tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx(), 
      GetArena());
  }
  if (from._internal_has_sig()) {
    sig_ = new ::vega::Signature(*from.sig_);
  } else {
    sig_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.SignedBundle)
}

void SignedBundle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignedBundle_vega_2eproto.base);
  tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sig_ = nullptr;
}

SignedBundle::~SignedBundle() {
  // @@protoc_insertion_point(destructor:vega.SignedBundle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignedBundle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sig_;
}

void SignedBundle::ArenaDtor(void* object) {
  SignedBundle* _this = reinterpret_cast< SignedBundle* >(object);
  (void)_this;
}
void SignedBundle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignedBundle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignedBundle& SignedBundle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignedBundle_vega_2eproto.base);
  return *internal_default_instance();
}


void SignedBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.SignedBundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.ClearToEmpty();
  if (GetArena() == nullptr && sig_ != nullptr) {
    delete sig_;
  }
  sig_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignedBundle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes tx = 1 [json_name = "tx"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Signature sig = 2 [json_name = "sig"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignedBundle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.SignedBundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1 [json_name = "tx"];
  if (this->tx().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx(), target);
  }

  // .vega.Signature sig = 2 [json_name = "sig"];
  if (this->has_sig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sig(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.SignedBundle)
  return target;
}

size_t SignedBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.SignedBundle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 1 [json_name = "tx"];
  if (this->tx().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  // .vega.Signature sig = 2 [json_name = "sig"];
  if (this->has_sig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sig_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignedBundle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.SignedBundle)
  GOOGLE_DCHECK_NE(&from, this);
  const SignedBundle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignedBundle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.SignedBundle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.SignedBundle)
    MergeFrom(*source);
  }
}

void SignedBundle::MergeFrom(const SignedBundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.SignedBundle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx().size() > 0) {
    _internal_set_tx(from._internal_tx());
  }
  if (from.has_sig()) {
    _internal_mutable_sig()->::vega::Signature::MergeFrom(from._internal_sig());
  }
}

void SignedBundle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.SignedBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedBundle::CopyFrom(const SignedBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.SignedBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedBundle::IsInitialized() const {
  return true;
}

void SignedBundle::InternalSwap(SignedBundle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_.Swap(&other->tx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sig_, other->sig_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedBundle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeSignature::_Internal {
 public:
};

NodeSignature::NodeSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.NodeSignature)
}
NodeSignature::NodeSignature(const NodeSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sig().empty()) {
    sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sig(), 
      GetArena());
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:vega.NodeSignature)
}

void NodeSignature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeSignature_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_ = 0;
}

NodeSignature::~NodeSignature() {
  // @@protoc_insertion_point(destructor:vega.NodeSignature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeSignature::ArenaDtor(void* object) {
  NodeSignature* _this = reinterpret_cast< NodeSignature* >(object);
  (void)_this;
}
void NodeSignature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeSignature& NodeSignature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeSignature_vega_2eproto.base);
  return *internal_default_instance();
}


void NodeSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NodeSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  sig_.ClearToEmpty();
  kind_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeSignature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ID = 1 [json_name = "ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.NodeSignature.ID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sig = 2 [json_name = "sig"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.NodeSignatureKind kind = 3 [json_name = "kind"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::vega::NodeSignatureKind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeSignature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NodeSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1 [json_name = "ID"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.NodeSignature.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes sig = 2 [json_name = "sig"];
  if (this->sig().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sig(), target);
  }

  // .vega.NodeSignatureKind kind = 3 [json_name = "kind"];
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NodeSignature)
  return target;
}

size_t NodeSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NodeSignature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1 [json_name = "ID"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes sig = 2 [json_name = "sig"];
  if (this->sig().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sig());
  }

  // .vega.NodeSignatureKind kind = 3 [json_name = "kind"];
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeSignature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NodeSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeSignature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeSignature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NodeSignature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NodeSignature)
    MergeFrom(*source);
  }
}

void NodeSignature::MergeFrom(const NodeSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NodeSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.sig().size() > 0) {
    _internal_set_sig(from._internal_sig());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
}

void NodeSignature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NodeSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeSignature::CopyFrom(const NodeSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NodeSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeSignature::IsInitialized() const {
  return true;
}

void NodeSignature::InternalSwap(NodeSignature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sig_.Swap(&other->sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeSignature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetworkParameter::_Internal {
 public:
};

NetworkParameter::NetworkParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.NetworkParameter)
}
NetworkParameter::NetworkParameter(const NetworkParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.NetworkParameter)
}

void NetworkParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkParameter_vega_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NetworkParameter::~NetworkParameter() {
  // @@protoc_insertion_point(destructor:vega.NetworkParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkParameter::ArenaDtor(void* object) {
  NetworkParameter* _this = reinterpret_cast< NetworkParameter* >(object);
  (void)_this;
}
void NetworkParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkParameter& NetworkParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkParameter_vega_2eproto.base);
  return *internal_default_instance();
}


void NetworkParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.NetworkParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Key = 1 [json_name = "Key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.NetworkParameter.Key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Value = 2 [json_name = "Value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.NetworkParameter.Value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.NetworkParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Key = 1 [json_name = "Key"];
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.NetworkParameter.Key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string Value = 2 [json_name = "Value"];
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.NetworkParameter.Value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.NetworkParameter)
  return target;
}

size_t NetworkParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.NetworkParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Key = 1 [json_name = "Key"];
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string Value = 2 [json_name = "Value"];
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.NetworkParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.NetworkParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.NetworkParameter)
    MergeFrom(*source);
  }
}

void NetworkParameter::MergeFrom(const NetworkParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.NetworkParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void NetworkParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.NetworkParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkParameter::CopyFrom(const NetworkParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.NetworkParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParameter::IsInitialized() const {
  return true;
}

void NetworkParameter::InternalSwap(NetworkParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidityOrder::_Internal {
 public:
};

LiquidityOrder::LiquidityOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.LiquidityOrder)
}
LiquidityOrder::LiquidityOrder(const LiquidityOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reference_, &from.reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&reference_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:vega.LiquidityOrder)
}

void LiquidityOrder::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reference_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&reference_)) + sizeof(offset_));
}

LiquidityOrder::~LiquidityOrder() {
  // @@protoc_insertion_point(destructor:vega.LiquidityOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidityOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LiquidityOrder::ArenaDtor(void* object) {
  LiquidityOrder* _this = reinterpret_cast< LiquidityOrder* >(object);
  (void)_this;
}
void LiquidityOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidityOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityOrder& LiquidityOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidityOrder_vega_2eproto.base);
  return *internal_default_instance();
}


void LiquidityOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LiquidityOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&reference_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidityOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.PeggedReference reference = 1 [json_name = "reference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reference(static_cast<::vega::PeggedReference>(val));
        } else goto handle_unusual;
        continue;
      // uint32 proportion = 2 [json_name = "proportion"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          proportion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 3 [json_name = "offset"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidityOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LiquidityOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.PeggedReference reference = 1 [json_name = "reference"];
  if (this->reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reference(), target);
  }

  // uint32 proportion = 2 [json_name = "proportion"];
  if (this->proportion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_proportion(), target);
  }

  // int64 offset = 3 [json_name = "offset"];
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LiquidityOrder)
  return target;
}

size_t LiquidityOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LiquidityOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.PeggedReference reference = 1 [json_name = "reference"];
  if (this->reference() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reference());
  }

  // uint32 proportion = 2 [json_name = "proportion"];
  if (this->proportion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_proportion());
  }

  // int64 offset = 3 [json_name = "offset"];
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LiquidityOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidityOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LiquidityOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LiquidityOrder)
    MergeFrom(*source);
  }
}

void LiquidityOrder::MergeFrom(const LiquidityOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LiquidityOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference() != 0) {
    _internal_set_reference(from._internal_reference());
  }
  if (from.proportion() != 0) {
    _internal_set_proportion(from._internal_proportion());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void LiquidityOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LiquidityOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityOrder::CopyFrom(const LiquidityOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LiquidityOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityOrder::IsInitialized() const {
  return true;
}

void LiquidityOrder::InternalSwap(LiquidityOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiquidityOrder, offset_)
      + sizeof(LiquidityOrder::offset_)
      - PROTOBUF_FIELD_OFFSET(LiquidityOrder, reference_)>(
          reinterpret_cast<char*>(&reference_),
          reinterpret_cast<char*>(&other->reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidityOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidityProvisionSubmission::_Internal {
 public:
};

LiquidityProvisionSubmission::LiquidityProvisionSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sells_(arena),
  buys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.LiquidityProvisionSubmission)
}
LiquidityProvisionSubmission::LiquidityProvisionSubmission(const LiquidityProvisionSubmission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sells_(from.sells_),
      buys_(from.buys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fee().empty()) {
    fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fee(), 
      GetArena());
  }
  commitmentamount_ = from.commitmentamount_;
  // @@protoc_insertion_point(copy_constructor:vega.LiquidityProvisionSubmission)
}

void LiquidityProvisionSubmission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidityProvisionSubmission_vega_2eproto.base);
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commitmentamount_ = PROTOBUF_ULONGLONG(0);
}

LiquidityProvisionSubmission::~LiquidityProvisionSubmission() {
  // @@protoc_insertion_point(destructor:vega.LiquidityProvisionSubmission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidityProvisionSubmission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LiquidityProvisionSubmission::ArenaDtor(void* object) {
  LiquidityProvisionSubmission* _this = reinterpret_cast< LiquidityProvisionSubmission* >(object);
  (void)_this;
}
void LiquidityProvisionSubmission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidityProvisionSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityProvisionSubmission& LiquidityProvisionSubmission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidityProvisionSubmission_vega_2eproto.base);
  return *internal_default_instance();
}


void LiquidityProvisionSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LiquidityProvisionSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sells_.Clear();
  buys_.Clear();
  marketid_.ClearToEmpty();
  fee_.ClearToEmpty();
  commitmentamount_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidityProvisionSubmission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string marketID = 1 [json_name = "marketID", (.validator.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProvisionSubmission.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commitmentAmount = 2 [json_name = "commitmentAmount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          commitmentamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fee = 3 [json_name = "fee"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProvisionSubmission.fee"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.LiquidityOrder Sells = 4 [json_name = "Sells"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.LiquidityOrder Buys = 5 [json_name = "Buys"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidityProvisionSubmission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LiquidityProvisionSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvisionSubmission.marketID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_marketid(), target);
  }

  // uint64 commitmentAmount = 2 [json_name = "commitmentAmount"];
  if (this->commitmentamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_commitmentamount(), target);
  }

  // string fee = 3 [json_name = "fee"];
  if (this->fee().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fee().data(), static_cast<int>(this->_internal_fee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvisionSubmission.fee");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fee(), target);
  }

  // repeated .vega.LiquidityOrder Sells = 4 [json_name = "Sells"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_sells(i), target, stream);
  }

  // repeated .vega.LiquidityOrder Buys = 5 [json_name = "Buys"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_buys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LiquidityProvisionSubmission)
  return target;
}

size_t LiquidityProvisionSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LiquidityProvisionSubmission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.LiquidityOrder Sells = 4 [json_name = "Sells"];
  total_size += 1UL * this->_internal_sells_size();
  for (const auto& msg : this->sells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.LiquidityOrder Buys = 5 [json_name = "Buys"];
  total_size += 1UL * this->_internal_buys_size();
  for (const auto& msg : this->buys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // string fee = 3 [json_name = "fee"];
  if (this->fee().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fee());
  }

  // uint64 commitmentAmount = 2 [json_name = "commitmentAmount"];
  if (this->commitmentamount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commitmentamount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityProvisionSubmission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LiquidityProvisionSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityProvisionSubmission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidityProvisionSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LiquidityProvisionSubmission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LiquidityProvisionSubmission)
    MergeFrom(*source);
  }
}

void LiquidityProvisionSubmission::MergeFrom(const LiquidityProvisionSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LiquidityProvisionSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sells_.MergeFrom(from.sells_);
  buys_.MergeFrom(from.buys_);
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.fee().size() > 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.commitmentamount() != 0) {
    _internal_set_commitmentamount(from._internal_commitmentamount());
  }
}

void LiquidityProvisionSubmission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LiquidityProvisionSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityProvisionSubmission::CopyFrom(const LiquidityProvisionSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LiquidityProvisionSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityProvisionSubmission::IsInitialized() const {
  return true;
}

void LiquidityProvisionSubmission::InternalSwap(LiquidityProvisionSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sells_.InternalSwap(&other->sells_);
  buys_.InternalSwap(&other->buys_);
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fee_.Swap(&other->fee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(commitmentamount_, other->commitmentamount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidityProvisionSubmission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidityOrderReference::_Internal {
 public:
  static const ::vega::LiquidityOrder& liquidityorder(const LiquidityOrderReference* msg);
};

const ::vega::LiquidityOrder&
LiquidityOrderReference::_Internal::liquidityorder(const LiquidityOrderReference* msg) {
  return *msg->liquidityorder_;
}
LiquidityOrderReference::LiquidityOrderReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.LiquidityOrderReference)
}
LiquidityOrderReference::LiquidityOrderReference(const LiquidityOrderReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_orderid(), 
      GetArena());
  }
  if (from._internal_has_liquidityorder()) {
    liquidityorder_ = new ::vega::LiquidityOrder(*from.liquidityorder_);
  } else {
    liquidityorder_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.LiquidityOrderReference)
}

void LiquidityOrderReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidityOrderReference_vega_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  liquidityorder_ = nullptr;
}

LiquidityOrderReference::~LiquidityOrderReference() {
  // @@protoc_insertion_point(destructor:vega.LiquidityOrderReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidityOrderReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete liquidityorder_;
}

void LiquidityOrderReference::ArenaDtor(void* object) {
  LiquidityOrderReference* _this = reinterpret_cast< LiquidityOrderReference* >(object);
  (void)_this;
}
void LiquidityOrderReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidityOrderReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityOrderReference& LiquidityOrderReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidityOrderReference_vega_2eproto.base);
  return *internal_default_instance();
}


void LiquidityOrderReference::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LiquidityOrderReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmpty();
  if (GetArena() == nullptr && liquidityorder_ != nullptr) {
    delete liquidityorder_;
  }
  liquidityorder_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidityOrderReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderID = 1 [json_name = "orderID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityOrderReference.orderID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.LiquidityOrder liquidityOrder = 2 [json_name = "liquidityOrder"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_liquidityorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidityOrderReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LiquidityOrderReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderID = 1 [json_name = "orderID"];
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityOrderReference.orderID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  // .vega.LiquidityOrder liquidityOrder = 2 [json_name = "liquidityOrder"];
  if (this->has_liquidityorder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::liquidityorder(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LiquidityOrderReference)
  return target;
}

size_t LiquidityOrderReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LiquidityOrderReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderID = 1 [json_name = "orderID"];
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // .vega.LiquidityOrder liquidityOrder = 2 [json_name = "liquidityOrder"];
  if (this->has_liquidityorder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *liquidityorder_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityOrderReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LiquidityOrderReference)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityOrderReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidityOrderReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LiquidityOrderReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LiquidityOrderReference)
    MergeFrom(*source);
  }
}

void LiquidityOrderReference::MergeFrom(const LiquidityOrderReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LiquidityOrderReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from.has_liquidityorder()) {
    _internal_mutable_liquidityorder()->::vega::LiquidityOrder::MergeFrom(from._internal_liquidityorder());
  }
}

void LiquidityOrderReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LiquidityOrderReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityOrderReference::CopyFrom(const LiquidityOrderReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LiquidityOrderReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityOrderReference::IsInitialized() const {
  return true;
}

void LiquidityOrderReference::InternalSwap(LiquidityOrderReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(liquidityorder_, other->liquidityorder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidityOrderReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidityProvision::_Internal {
 public:
};

LiquidityProvision::LiquidityProvision(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sells_(arena),
  buys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.LiquidityProvision)
}
LiquidityProvision::LiquidityProvision(const LiquidityProvision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sells_(from.sells_),
      buys_(from.buys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_partyid().empty()) {
    partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partyid(), 
      GetArena());
  }
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_marketid().empty()) {
    marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_marketid(), 
      GetArena());
  }
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fee().empty()) {
    fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fee(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  ::memcpy(&createdat_, &from.createdat_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&createdat_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:vega.LiquidityProvision)
}

void LiquidityProvision::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidityProvision_vega_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&createdat_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&createdat_)) + sizeof(status_));
}

LiquidityProvision::~LiquidityProvision() {
  // @@protoc_insertion_point(destructor:vega.LiquidityProvision)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidityProvision::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marketid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LiquidityProvision::ArenaDtor(void* object) {
  LiquidityProvision* _this = reinterpret_cast< LiquidityProvision* >(object);
  (void)_this;
}
void LiquidityProvision::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidityProvision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidityProvision& LiquidityProvision::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidityProvision_vega_2eproto.base);
  return *internal_default_instance();
}


void LiquidityProvision::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LiquidityProvision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sells_.Clear();
  buys_.Clear();
  id_.ClearToEmpty();
  partyid_.ClearToEmpty();
  marketid_.ClearToEmpty();
  fee_.ClearToEmpty();
  version_.ClearToEmpty();
  ::memset(&createdat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&createdat_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidityProvision::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProvision.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string partyID = 2 [json_name = "partyID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_partyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProvision.partyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createdAt = 3 [json_name = "createdAt"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          createdat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 updatedAt = 4 [json_name = "updatedAt"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          updatedat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string marketID = 5 [json_name = "marketID", (.validator.field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_marketid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProvision.marketID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commitmentAmount = 6 [json_name = "commitmentAmount"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          commitmentamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fee = 7 [json_name = "fee"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_fee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProvision.fee"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.LiquidityOrderReference sells = 8 [json_name = "sells"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vega.LiquidityOrderReference buys = 9 [json_name = "buys"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // string version = 10 [json_name = "version"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.LiquidityProvision.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.LiquidityProvision.Status status = 11 [json_name = "status"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::vega::LiquidityProvision_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidityProvision::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LiquidityProvision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string partyID = 2 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partyid().data(), static_cast<int>(this->_internal_partyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.partyID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partyid(), target);
  }

  // int64 createdAt = 3 [json_name = "createdAt"];
  if (this->createdat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_createdat(), target);
  }

  // int64 updatedAt = 4 [json_name = "updatedAt"];
  if (this->updatedat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_updatedat(), target);
  }

  // string marketID = 5 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_marketid().data(), static_cast<int>(this->_internal_marketid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.marketID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_marketid(), target);
  }

  // uint64 commitmentAmount = 6 [json_name = "commitmentAmount"];
  if (this->commitmentamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_commitmentamount(), target);
  }

  // string fee = 7 [json_name = "fee"];
  if (this->fee().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fee().data(), static_cast<int>(this->_internal_fee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.fee");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_fee(), target);
  }

  // repeated .vega.LiquidityOrderReference sells = 8 [json_name = "sells"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_sells(i), target, stream);
  }

  // repeated .vega.LiquidityOrderReference buys = 9 [json_name = "buys"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_buys(i), target, stream);
  }

  // string version = 10 [json_name = "version"];
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.LiquidityProvision.version");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_version(), target);
  }

  // .vega.LiquidityProvision.Status status = 11 [json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LiquidityProvision)
  return target;
}

size_t LiquidityProvision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LiquidityProvision)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.LiquidityOrderReference sells = 8 [json_name = "sells"];
  total_size += 1UL * this->_internal_sells_size();
  for (const auto& msg : this->sells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vega.LiquidityOrderReference buys = 9 [json_name = "buys"];
  total_size += 1UL * this->_internal_buys_size();
  for (const auto& msg : this->buys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string partyID = 2 [json_name = "partyID"];
  if (this->partyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partyid());
  }

  // string marketID = 5 [json_name = "marketID", (.validator.field) = {
  if (this->marketid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_marketid());
  }

  // string fee = 7 [json_name = "fee"];
  if (this->fee().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fee());
  }

  // string version = 10 [json_name = "version"];
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // int64 createdAt = 3 [json_name = "createdAt"];
  if (this->createdat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createdat());
  }

  // int64 updatedAt = 4 [json_name = "updatedAt"];
  if (this->updatedat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_updatedat());
  }

  // uint64 commitmentAmount = 6 [json_name = "commitmentAmount"];
  if (this->commitmentamount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commitmentamount());
  }

  // .vega.LiquidityProvision.Status status = 11 [json_name = "status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidityProvision::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LiquidityProvision)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidityProvision* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidityProvision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LiquidityProvision)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LiquidityProvision)
    MergeFrom(*source);
  }
}

void LiquidityProvision::MergeFrom(const LiquidityProvision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LiquidityProvision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sells_.MergeFrom(from.sells_);
  buys_.MergeFrom(from.buys_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.partyid().size() > 0) {
    _internal_set_partyid(from._internal_partyid());
  }
  if (from.marketid().size() > 0) {
    _internal_set_marketid(from._internal_marketid());
  }
  if (from.fee().size() > 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.createdat() != 0) {
    _internal_set_createdat(from._internal_createdat());
  }
  if (from.updatedat() != 0) {
    _internal_set_updatedat(from._internal_updatedat());
  }
  if (from.commitmentamount() != 0) {
    _internal_set_commitmentamount(from._internal_commitmentamount());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void LiquidityProvision::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LiquidityProvision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidityProvision::CopyFrom(const LiquidityProvision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LiquidityProvision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityProvision::IsInitialized() const {
  return true;
}

void LiquidityProvision::InternalSwap(LiquidityProvision* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sells_.InternalSwap(&other->sells_);
  buys_.InternalSwap(&other->buys_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  partyid_.Swap(&other->partyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  marketid_.Swap(&other->marketid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fee_.Swap(&other->fee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiquidityProvision, status_)
      + sizeof(LiquidityProvision::status_)
      - PROTOBUF_FIELD_OFFSET(LiquidityProvision, createdat_)>(
          reinterpret_cast<char*>(&createdat_),
          reinterpret_cast<char*>(&other->createdat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidityProvision::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EthereumConfig::_Internal {
 public:
};

EthereumConfig::EthereumConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.EthereumConfig)
}
EthereumConfig::EthereumConfig(const EthereumConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  networkid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_networkid().empty()) {
    networkid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_networkid(), 
      GetArena());
  }
  chainid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chainid().empty()) {
    chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chainid(), 
      GetArena());
  }
  bridgeaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bridgeaddress().empty()) {
    bridgeaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bridgeaddress(), 
      GetArena());
  }
  confirmations_ = from.confirmations_;
  // @@protoc_insertion_point(copy_constructor:vega.EthereumConfig)
}

void EthereumConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EthereumConfig_vega_2eproto.base);
  networkid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chainid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bridgeaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  confirmations_ = 0u;
}

EthereumConfig::~EthereumConfig() {
  // @@protoc_insertion_point(destructor:vega.EthereumConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EthereumConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  networkid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chainid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bridgeaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EthereumConfig::ArenaDtor(void* object) {
  EthereumConfig* _this = reinterpret_cast< EthereumConfig* >(object);
  (void)_this;
}
void EthereumConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EthereumConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EthereumConfig& EthereumConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EthereumConfig_vega_2eproto.base);
  return *internal_default_instance();
}


void EthereumConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.EthereumConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networkid_.ClearToEmpty();
  chainid_.ClearToEmpty();
  bridgeaddress_.ClearToEmpty();
  confirmations_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EthereumConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string networkId = 1 [json_name = "networkId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_networkid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.EthereumConfig.networkId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chainId = 2 [json_name = "chainId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chainid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.EthereumConfig.chainId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bridgeAddress = 3 [json_name = "bridgeAddress"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bridgeaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.EthereumConfig.bridgeAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 confirmations = 4 [json_name = "confirmations"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          confirmations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EthereumConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.EthereumConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string networkId = 1 [json_name = "networkId"];
  if (this->networkid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_networkid().data(), static_cast<int>(this->_internal_networkid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.EthereumConfig.networkId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_networkid(), target);
  }

  // string chainId = 2 [json_name = "chainId"];
  if (this->chainid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chainid().data(), static_cast<int>(this->_internal_chainid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.EthereumConfig.chainId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chainid(), target);
  }

  // string bridgeAddress = 3 [json_name = "bridgeAddress"];
  if (this->bridgeaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bridgeaddress().data(), static_cast<int>(this->_internal_bridgeaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.EthereumConfig.bridgeAddress");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bridgeaddress(), target);
  }

  // uint32 confirmations = 4 [json_name = "confirmations"];
  if (this->confirmations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_confirmations(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.EthereumConfig)
  return target;
}

size_t EthereumConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.EthereumConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string networkId = 1 [json_name = "networkId"];
  if (this->networkid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_networkid());
  }

  // string chainId = 2 [json_name = "chainId"];
  if (this->chainid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chainid());
  }

  // string bridgeAddress = 3 [json_name = "bridgeAddress"];
  if (this->bridgeaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bridgeaddress());
  }

  // uint32 confirmations = 4 [json_name = "confirmations"];
  if (this->confirmations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_confirmations());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EthereumConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.EthereumConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EthereumConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EthereumConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.EthereumConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.EthereumConfig)
    MergeFrom(*source);
  }
}

void EthereumConfig::MergeFrom(const EthereumConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.EthereumConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.networkid().size() > 0) {
    _internal_set_networkid(from._internal_networkid());
  }
  if (from.chainid().size() > 0) {
    _internal_set_chainid(from._internal_chainid());
  }
  if (from.bridgeaddress().size() > 0) {
    _internal_set_bridgeaddress(from._internal_bridgeaddress());
  }
  if (from.confirmations() != 0) {
    _internal_set_confirmations(from._internal_confirmations());
  }
}

void EthereumConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.EthereumConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EthereumConfig::CopyFrom(const EthereumConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.EthereumConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EthereumConfig::IsInitialized() const {
  return true;
}

void EthereumConfig::InternalSwap(EthereumConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  networkid_.Swap(&other->networkid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chainid_.Swap(&other->chainid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bridgeaddress_.Swap(&other->bridgeaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(confirmations_, other->confirmations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EthereumConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vega::Price* Arena::CreateMaybeMessage< ::vega::Price >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Price >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Timestamp* Arena::CreateMaybeMessage< ::vega::Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Party* Arena::CreateMaybeMessage< ::vega::Party >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Party >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RiskFactor* Arena::CreateMaybeMessage< ::vega::RiskFactor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::RiskFactor >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RiskResult_RiskFactorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vega::RiskResult_RiskFactorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::RiskResult_RiskFactorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RiskResult* Arena::CreateMaybeMessage< ::vega::RiskResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::RiskResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PeggedOrder* Arena::CreateMaybeMessage< ::vega::PeggedOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::PeggedOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Order* Arena::CreateMaybeMessage< ::vega::Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Order >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::OrderCancellationConfirmation* Arena::CreateMaybeMessage< ::vega::OrderCancellationConfirmation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::OrderCancellationConfirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::OrderConfirmation* Arena::CreateMaybeMessage< ::vega::OrderConfirmation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::OrderConfirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::AuctionIndicativeState* Arena::CreateMaybeMessage< ::vega::AuctionIndicativeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::AuctionIndicativeState >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Trade* Arena::CreateMaybeMessage< ::vega::Trade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Trade >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Fee* Arena::CreateMaybeMessage< ::vega::Fee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Fee >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TradeSet* Arena::CreateMaybeMessage< ::vega::TradeSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::TradeSet >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Candle* Arena::CreateMaybeMessage< ::vega::Candle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Candle >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PriceLevel* Arena::CreateMaybeMessage< ::vega::PriceLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::PriceLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::MarketDepth* Arena::CreateMaybeMessage< ::vega::MarketDepth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::MarketDepth >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::MarketDepthUpdate* Arena::CreateMaybeMessage< ::vega::MarketDepthUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::MarketDepthUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Position* Arena::CreateMaybeMessage< ::vega::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PositionTrade* Arena::CreateMaybeMessage< ::vega::PositionTrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::PositionTrade >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Statistics* Arena::CreateMaybeMessage< ::vega::Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Deposit* Arena::CreateMaybeMessage< ::vega::Deposit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Deposit >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Withdrawal* Arena::CreateMaybeMessage< ::vega::Withdrawal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Withdrawal >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::WithdrawSubmission* Arena::CreateMaybeMessage< ::vega::WithdrawSubmission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::WithdrawSubmission >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::WithdrawExt* Arena::CreateMaybeMessage< ::vega::WithdrawExt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::WithdrawExt >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Erc20WithdrawExt* Arena::CreateMaybeMessage< ::vega::Erc20WithdrawExt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Erc20WithdrawExt >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::OrderAmendment* Arena::CreateMaybeMessage< ::vega::OrderAmendment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::OrderAmendment >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::OrderSubmission* Arena::CreateMaybeMessage< ::vega::OrderSubmission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::OrderSubmission >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::OrderCancellation* Arena::CreateMaybeMessage< ::vega::OrderCancellation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::OrderCancellation >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NodeRegistration* Arena::CreateMaybeMessage< ::vega::NodeRegistration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::NodeRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NodeVote* Arena::CreateMaybeMessage< ::vega::NodeVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::NodeVote >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Account* Arena::CreateMaybeMessage< ::vega::Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Account >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::FinancialAmount* Arena::CreateMaybeMessage< ::vega::FinancialAmount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::FinancialAmount >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Transfer* Arena::CreateMaybeMessage< ::vega::Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TransferRequest* Arena::CreateMaybeMessage< ::vega::TransferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::TransferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LedgerEntry* Arena::CreateMaybeMessage< ::vega::LedgerEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::LedgerEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TransferBalance* Arena::CreateMaybeMessage< ::vega::TransferBalance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::TransferBalance >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::TransferResponse* Arena::CreateMaybeMessage< ::vega::TransferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::TransferResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::MarginLevels* Arena::CreateMaybeMessage< ::vega::MarginLevels >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::MarginLevels >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::MarketData* Arena::CreateMaybeMessage< ::vega::MarketData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::MarketData >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PriceMonitoringBounds* Arena::CreateMaybeMessage< ::vega::PriceMonitoringBounds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::PriceMonitoringBounds >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ErrorDetail* Arena::CreateMaybeMessage< ::vega::ErrorDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ErrorDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Transaction* Arena::CreateMaybeMessage< ::vega::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Signature* Arena::CreateMaybeMessage< ::vega::Signature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Signature >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::SignedBundle* Arena::CreateMaybeMessage< ::vega::SignedBundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::SignedBundle >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NodeSignature* Arena::CreateMaybeMessage< ::vega::NodeSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::NodeSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::NetworkParameter* Arena::CreateMaybeMessage< ::vega::NetworkParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::NetworkParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LiquidityOrder* Arena::CreateMaybeMessage< ::vega::LiquidityOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::LiquidityOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LiquidityProvisionSubmission* Arena::CreateMaybeMessage< ::vega::LiquidityProvisionSubmission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::LiquidityProvisionSubmission >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LiquidityOrderReference* Arena::CreateMaybeMessage< ::vega::LiquidityOrderReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::LiquidityOrderReference >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LiquidityProvision* Arena::CreateMaybeMessage< ::vega::LiquidityProvision >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::LiquidityProvision >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::EthereumConfig* Arena::CreateMaybeMessage< ::vega::EthereumConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::EthereumConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
