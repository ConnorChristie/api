// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tm/replay.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tm_2freplay_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tm_2freplay_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tm_2freplay_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tm_2freplay_2eproto;
namespace tm {
class BlockParams;
class BlockParamsDefaultTypeInternal;
extern BlockParamsDefaultTypeInternal _BlockParams_default_instance_;
class ConsensusParams;
class ConsensusParamsDefaultTypeInternal;
extern ConsensusParamsDefaultTypeInternal _ConsensusParams_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventAttribute;
class EventAttributeDefaultTypeInternal;
extern EventAttributeDefaultTypeInternal _EventAttribute_default_instance_;
class Evidence;
class EvidenceDefaultTypeInternal;
extern EvidenceDefaultTypeInternal _Evidence_default_instance_;
class EvidenceParams;
class EvidenceParamsDefaultTypeInternal;
extern EvidenceParamsDefaultTypeInternal _EvidenceParams_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class LastCommitInfo;
class LastCommitInfoDefaultTypeInternal;
extern LastCommitInfoDefaultTypeInternal _LastCommitInfo_default_instance_;
class PublicKey;
class PublicKeyDefaultTypeInternal;
extern PublicKeyDefaultTypeInternal _PublicKey_default_instance_;
class RequestBeginBlock;
class RequestBeginBlockDefaultTypeInternal;
extern RequestBeginBlockDefaultTypeInternal _RequestBeginBlock_default_instance_;
class RequestDeliverTx;
class RequestDeliverTxDefaultTypeInternal;
extern RequestDeliverTxDefaultTypeInternal _RequestDeliverTx_default_instance_;
class RequestInitChain;
class RequestInitChainDefaultTypeInternal;
extern RequestInitChainDefaultTypeInternal _RequestInitChain_default_instance_;
class ResponseBeginBlock;
class ResponseBeginBlockDefaultTypeInternal;
extern ResponseBeginBlockDefaultTypeInternal _ResponseBeginBlock_default_instance_;
class ResponseDeliverTx;
class ResponseDeliverTxDefaultTypeInternal;
extern ResponseDeliverTxDefaultTypeInternal _ResponseDeliverTx_default_instance_;
class ResponseInitChain;
class ResponseInitChainDefaultTypeInternal;
extern ResponseInitChainDefaultTypeInternal _ResponseInitChain_default_instance_;
class TmEvent;
class TmEventDefaultTypeInternal;
extern TmEventDefaultTypeInternal _TmEvent_default_instance_;
class Validator;
class ValidatorDefaultTypeInternal;
extern ValidatorDefaultTypeInternal _Validator_default_instance_;
class ValidatorParams;
class ValidatorParamsDefaultTypeInternal;
extern ValidatorParamsDefaultTypeInternal _ValidatorParams_default_instance_;
class ValidatorUpdate;
class ValidatorUpdateDefaultTypeInternal;
extern ValidatorUpdateDefaultTypeInternal _ValidatorUpdate_default_instance_;
class VersionParams;
class VersionParamsDefaultTypeInternal;
extern VersionParamsDefaultTypeInternal _VersionParams_default_instance_;
class VoteInfo;
class VoteInfoDefaultTypeInternal;
extern VoteInfoDefaultTypeInternal _VoteInfo_default_instance_;
}  // namespace tm
PROTOBUF_NAMESPACE_OPEN
template<> ::tm::BlockParams* Arena::CreateMaybeMessage<::tm::BlockParams>(Arena*);
template<> ::tm::ConsensusParams* Arena::CreateMaybeMessage<::tm::ConsensusParams>(Arena*);
template<> ::tm::Event* Arena::CreateMaybeMessage<::tm::Event>(Arena*);
template<> ::tm::EventAttribute* Arena::CreateMaybeMessage<::tm::EventAttribute>(Arena*);
template<> ::tm::Evidence* Arena::CreateMaybeMessage<::tm::Evidence>(Arena*);
template<> ::tm::EvidenceParams* Arena::CreateMaybeMessage<::tm::EvidenceParams>(Arena*);
template<> ::tm::Header* Arena::CreateMaybeMessage<::tm::Header>(Arena*);
template<> ::tm::LastCommitInfo* Arena::CreateMaybeMessage<::tm::LastCommitInfo>(Arena*);
template<> ::tm::PublicKey* Arena::CreateMaybeMessage<::tm::PublicKey>(Arena*);
template<> ::tm::RequestBeginBlock* Arena::CreateMaybeMessage<::tm::RequestBeginBlock>(Arena*);
template<> ::tm::RequestDeliverTx* Arena::CreateMaybeMessage<::tm::RequestDeliverTx>(Arena*);
template<> ::tm::RequestInitChain* Arena::CreateMaybeMessage<::tm::RequestInitChain>(Arena*);
template<> ::tm::ResponseBeginBlock* Arena::CreateMaybeMessage<::tm::ResponseBeginBlock>(Arena*);
template<> ::tm::ResponseDeliverTx* Arena::CreateMaybeMessage<::tm::ResponseDeliverTx>(Arena*);
template<> ::tm::ResponseInitChain* Arena::CreateMaybeMessage<::tm::ResponseInitChain>(Arena*);
template<> ::tm::TmEvent* Arena::CreateMaybeMessage<::tm::TmEvent>(Arena*);
template<> ::tm::Validator* Arena::CreateMaybeMessage<::tm::Validator>(Arena*);
template<> ::tm::ValidatorParams* Arena::CreateMaybeMessage<::tm::ValidatorParams>(Arena*);
template<> ::tm::ValidatorUpdate* Arena::CreateMaybeMessage<::tm::ValidatorUpdate>(Arena*);
template<> ::tm::VersionParams* Arena::CreateMaybeMessage<::tm::VersionParams>(Arena*);
template<> ::tm::VoteInfo* Arena::CreateMaybeMessage<::tm::VoteInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tm {

enum EvidenceType : int {
  UNKNOWN = 0,
  DUPLICATE_VOTE = 1,
  LIGHT_CLIENT_ATTACK = 2,
  EvidenceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EvidenceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EvidenceType_IsValid(int value);
constexpr EvidenceType EvidenceType_MIN = UNKNOWN;
constexpr EvidenceType EvidenceType_MAX = LIGHT_CLIENT_ATTACK;
constexpr int EvidenceType_ARRAYSIZE = EvidenceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EvidenceType_descriptor();
template<typename T>
inline const std::string& EvidenceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EvidenceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EvidenceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EvidenceType_descriptor(), enum_t_value);
}
inline bool EvidenceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EvidenceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EvidenceType>(
    EvidenceType_descriptor(), name, value);
}
// ===================================================================

class TmEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.TmEvent) */ {
 public:
  inline TmEvent() : TmEvent(nullptr) {}
  virtual ~TmEvent();

  TmEvent(const TmEvent& from);
  TmEvent(TmEvent&& from) noexcept
    : TmEvent() {
    *this = ::std::move(from);
  }

  inline TmEvent& operator=(const TmEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmEvent& operator=(TmEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TmEvent& default_instance();

  enum ActionCase {
    kReqInitChain = 1,
    kResInitChain = 2,
    kReqDeliverTx = 3,
    kResDeliverTx = 4,
    kReqBeginBlock = 5,
    kResBeginBlock = 6,
    ACTION_NOT_SET = 0,
  };

  static inline const TmEvent* internal_default_instance() {
    return reinterpret_cast<const TmEvent*>(
               &_TmEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TmEvent& a, TmEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TmEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TmEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TmEvent* New() const final {
    return CreateMaybeMessage<TmEvent>(nullptr);
  }

  TmEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TmEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TmEvent& from);
  void MergeFrom(const TmEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.TmEvent";
  }
  protected:
  explicit TmEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqInitChainFieldNumber = 1,
    kResInitChainFieldNumber = 2,
    kReqDeliverTxFieldNumber = 3,
    kResDeliverTxFieldNumber = 4,
    kReqBeginBlockFieldNumber = 5,
    kResBeginBlockFieldNumber = 6,
  };
  // .tm.RequestInitChain req_init_chain = 1 [json_name = "reqInitChain"];
  bool has_req_init_chain() const;
  private:
  bool _internal_has_req_init_chain() const;
  public:
  void clear_req_init_chain();
  const ::tm::RequestInitChain& req_init_chain() const;
  ::tm::RequestInitChain* release_req_init_chain();
  ::tm::RequestInitChain* mutable_req_init_chain();
  void set_allocated_req_init_chain(::tm::RequestInitChain* req_init_chain);
  private:
  const ::tm::RequestInitChain& _internal_req_init_chain() const;
  ::tm::RequestInitChain* _internal_mutable_req_init_chain();
  public:
  void unsafe_arena_set_allocated_req_init_chain(
      ::tm::RequestInitChain* req_init_chain);
  ::tm::RequestInitChain* unsafe_arena_release_req_init_chain();

  // .tm.ResponseInitChain res_init_chain = 2 [json_name = "resInitChain"];
  bool has_res_init_chain() const;
  private:
  bool _internal_has_res_init_chain() const;
  public:
  void clear_res_init_chain();
  const ::tm::ResponseInitChain& res_init_chain() const;
  ::tm::ResponseInitChain* release_res_init_chain();
  ::tm::ResponseInitChain* mutable_res_init_chain();
  void set_allocated_res_init_chain(::tm::ResponseInitChain* res_init_chain);
  private:
  const ::tm::ResponseInitChain& _internal_res_init_chain() const;
  ::tm::ResponseInitChain* _internal_mutable_res_init_chain();
  public:
  void unsafe_arena_set_allocated_res_init_chain(
      ::tm::ResponseInitChain* res_init_chain);
  ::tm::ResponseInitChain* unsafe_arena_release_res_init_chain();

  // .tm.RequestDeliverTx req_deliver_tx = 3 [json_name = "reqDeliverTx"];
  bool has_req_deliver_tx() const;
  private:
  bool _internal_has_req_deliver_tx() const;
  public:
  void clear_req_deliver_tx();
  const ::tm::RequestDeliverTx& req_deliver_tx() const;
  ::tm::RequestDeliverTx* release_req_deliver_tx();
  ::tm::RequestDeliverTx* mutable_req_deliver_tx();
  void set_allocated_req_deliver_tx(::tm::RequestDeliverTx* req_deliver_tx);
  private:
  const ::tm::RequestDeliverTx& _internal_req_deliver_tx() const;
  ::tm::RequestDeliverTx* _internal_mutable_req_deliver_tx();
  public:
  void unsafe_arena_set_allocated_req_deliver_tx(
      ::tm::RequestDeliverTx* req_deliver_tx);
  ::tm::RequestDeliverTx* unsafe_arena_release_req_deliver_tx();

  // .tm.ResponseDeliverTx res_deliver_tx = 4 [json_name = "resDeliverTx"];
  bool has_res_deliver_tx() const;
  private:
  bool _internal_has_res_deliver_tx() const;
  public:
  void clear_res_deliver_tx();
  const ::tm::ResponseDeliverTx& res_deliver_tx() const;
  ::tm::ResponseDeliverTx* release_res_deliver_tx();
  ::tm::ResponseDeliverTx* mutable_res_deliver_tx();
  void set_allocated_res_deliver_tx(::tm::ResponseDeliverTx* res_deliver_tx);
  private:
  const ::tm::ResponseDeliverTx& _internal_res_deliver_tx() const;
  ::tm::ResponseDeliverTx* _internal_mutable_res_deliver_tx();
  public:
  void unsafe_arena_set_allocated_res_deliver_tx(
      ::tm::ResponseDeliverTx* res_deliver_tx);
  ::tm::ResponseDeliverTx* unsafe_arena_release_res_deliver_tx();

  // .tm.RequestBeginBlock req_begin_block = 5 [json_name = "reqBeginBlock"];
  bool has_req_begin_block() const;
  private:
  bool _internal_has_req_begin_block() const;
  public:
  void clear_req_begin_block();
  const ::tm::RequestBeginBlock& req_begin_block() const;
  ::tm::RequestBeginBlock* release_req_begin_block();
  ::tm::RequestBeginBlock* mutable_req_begin_block();
  void set_allocated_req_begin_block(::tm::RequestBeginBlock* req_begin_block);
  private:
  const ::tm::RequestBeginBlock& _internal_req_begin_block() const;
  ::tm::RequestBeginBlock* _internal_mutable_req_begin_block();
  public:
  void unsafe_arena_set_allocated_req_begin_block(
      ::tm::RequestBeginBlock* req_begin_block);
  ::tm::RequestBeginBlock* unsafe_arena_release_req_begin_block();

  // .tm.ResponseBeginBlock res_begin_block = 6 [json_name = "resBeginBlock"];
  bool has_res_begin_block() const;
  private:
  bool _internal_has_res_begin_block() const;
  public:
  void clear_res_begin_block();
  const ::tm::ResponseBeginBlock& res_begin_block() const;
  ::tm::ResponseBeginBlock* release_res_begin_block();
  ::tm::ResponseBeginBlock* mutable_res_begin_block();
  void set_allocated_res_begin_block(::tm::ResponseBeginBlock* res_begin_block);
  private:
  const ::tm::ResponseBeginBlock& _internal_res_begin_block() const;
  ::tm::ResponseBeginBlock* _internal_mutable_res_begin_block();
  public:
  void unsafe_arena_set_allocated_res_begin_block(
      ::tm::ResponseBeginBlock* res_begin_block);
  ::tm::ResponseBeginBlock* unsafe_arena_release_res_begin_block();

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:tm.TmEvent)
 private:
  class _Internal;
  void set_has_req_init_chain();
  void set_has_res_init_chain();
  void set_has_req_deliver_tx();
  void set_has_res_deliver_tx();
  void set_has_req_begin_block();
  void set_has_res_begin_block();

  inline bool has_action() const;
  inline void clear_has_action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ActionUnion {
    ActionUnion() {}
    ::tm::RequestInitChain* req_init_chain_;
    ::tm::ResponseInitChain* res_init_chain_;
    ::tm::RequestDeliverTx* req_deliver_tx_;
    ::tm::ResponseDeliverTx* res_deliver_tx_;
    ::tm::RequestBeginBlock* req_begin_block_;
    ::tm::ResponseBeginBlock* res_begin_block_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class RequestInitChain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.RequestInitChain) */ {
 public:
  inline RequestInitChain() : RequestInitChain(nullptr) {}
  virtual ~RequestInitChain();

  RequestInitChain(const RequestInitChain& from);
  RequestInitChain(RequestInitChain&& from) noexcept
    : RequestInitChain() {
    *this = ::std::move(from);
  }

  inline RequestInitChain& operator=(const RequestInitChain& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestInitChain& operator=(RequestInitChain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestInitChain& default_instance();

  static inline const RequestInitChain* internal_default_instance() {
    return reinterpret_cast<const RequestInitChain*>(
               &_RequestInitChain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestInitChain& a, RequestInitChain& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestInitChain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestInitChain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestInitChain* New() const final {
    return CreateMaybeMessage<RequestInitChain>(nullptr);
  }

  RequestInitChain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestInitChain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestInitChain& from);
  void MergeFrom(const RequestInitChain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestInitChain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.RequestInitChain";
  }
  protected:
  explicit RequestInitChain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorsFieldNumber = 4,
    kChainIdFieldNumber = 2,
    kAppStateBytesFieldNumber = 5,
    kConsensusParamsFieldNumber = 3,
    kTimeFieldNumber = 1,
    kInitialHeightFieldNumber = 6,
  };
  // repeated .tm.ValidatorUpdate validators = 4 [json_name = "validators"];
  int validators_size() const;
  private:
  int _internal_validators_size() const;
  public:
  void clear_validators();
  ::tm::ValidatorUpdate* mutable_validators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::ValidatorUpdate >*
      mutable_validators();
  private:
  const ::tm::ValidatorUpdate& _internal_validators(int index) const;
  ::tm::ValidatorUpdate* _internal_add_validators();
  public:
  const ::tm::ValidatorUpdate& validators(int index) const;
  ::tm::ValidatorUpdate* add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::ValidatorUpdate >&
      validators() const;

  // string chain_id = 2 [json_name = "chainId"];
  void clear_chain_id();
  const std::string& chain_id() const;
  void set_chain_id(const std::string& value);
  void set_chain_id(std::string&& value);
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  std::string* mutable_chain_id();
  std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // bytes app_state_bytes = 5 [json_name = "appStateBytes"];
  void clear_app_state_bytes();
  const std::string& app_state_bytes() const;
  void set_app_state_bytes(const std::string& value);
  void set_app_state_bytes(std::string&& value);
  void set_app_state_bytes(const char* value);
  void set_app_state_bytes(const void* value, size_t size);
  std::string* mutable_app_state_bytes();
  std::string* release_app_state_bytes();
  void set_allocated_app_state_bytes(std::string* app_state_bytes);
  private:
  const std::string& _internal_app_state_bytes() const;
  void _internal_set_app_state_bytes(const std::string& value);
  std::string* _internal_mutable_app_state_bytes();
  public:

  // .tm.ConsensusParams consensus_params = 3 [json_name = "consensusParams"];
  bool has_consensus_params() const;
  private:
  bool _internal_has_consensus_params() const;
  public:
  void clear_consensus_params();
  const ::tm::ConsensusParams& consensus_params() const;
  ::tm::ConsensusParams* release_consensus_params();
  ::tm::ConsensusParams* mutable_consensus_params();
  void set_allocated_consensus_params(::tm::ConsensusParams* consensus_params);
  private:
  const ::tm::ConsensusParams& _internal_consensus_params() const;
  ::tm::ConsensusParams* _internal_mutable_consensus_params();
  public:
  void unsafe_arena_set_allocated_consensus_params(
      ::tm::ConsensusParams* consensus_params);
  ::tm::ConsensusParams* unsafe_arena_release_consensus_params();

  // int64 time = 1 [json_name = "time"];
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 initial_height = 6 [json_name = "initialHeight"];
  void clear_initial_height();
  ::PROTOBUF_NAMESPACE_ID::int64 initial_height() const;
  void set_initial_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_initial_height() const;
  void _internal_set_initial_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:tm.RequestInitChain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::ValidatorUpdate > validators_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_state_bytes_;
  ::tm::ConsensusParams* consensus_params_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 initial_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class RequestBeginBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.RequestBeginBlock) */ {
 public:
  inline RequestBeginBlock() : RequestBeginBlock(nullptr) {}
  virtual ~RequestBeginBlock();

  RequestBeginBlock(const RequestBeginBlock& from);
  RequestBeginBlock(RequestBeginBlock&& from) noexcept
    : RequestBeginBlock() {
    *this = ::std::move(from);
  }

  inline RequestBeginBlock& operator=(const RequestBeginBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestBeginBlock& operator=(RequestBeginBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestBeginBlock& default_instance();

  static inline const RequestBeginBlock* internal_default_instance() {
    return reinterpret_cast<const RequestBeginBlock*>(
               &_RequestBeginBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestBeginBlock& a, RequestBeginBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestBeginBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestBeginBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestBeginBlock* New() const final {
    return CreateMaybeMessage<RequestBeginBlock>(nullptr);
  }

  RequestBeginBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestBeginBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestBeginBlock& from);
  void MergeFrom(const RequestBeginBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestBeginBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.RequestBeginBlock";
  }
  protected:
  explicit RequestBeginBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kByzantineValidatorsFieldNumber = 4,
    kHashFieldNumber = 1,
    kHeaderFieldNumber = 2,
    kLastCommitInfoFieldNumber = 3,
  };
  // repeated .tm.Evidence byzantine_validators = 4 [json_name = "byzantineValidators"];
  int byzantine_validators_size() const;
  private:
  int _internal_byzantine_validators_size() const;
  public:
  void clear_byzantine_validators();
  ::tm::Evidence* mutable_byzantine_validators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::Evidence >*
      mutable_byzantine_validators();
  private:
  const ::tm::Evidence& _internal_byzantine_validators(int index) const;
  ::tm::Evidence* _internal_add_byzantine_validators();
  public:
  const ::tm::Evidence& byzantine_validators(int index) const;
  ::tm::Evidence* add_byzantine_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::Evidence >&
      byzantine_validators() const;

  // bytes hash = 1 [json_name = "hash"];
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // .tm.Header header = 2 [json_name = "header"];
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::tm::Header& header() const;
  ::tm::Header* release_header();
  ::tm::Header* mutable_header();
  void set_allocated_header(::tm::Header* header);
  private:
  const ::tm::Header& _internal_header() const;
  ::tm::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::tm::Header* header);
  ::tm::Header* unsafe_arena_release_header();

  // .tm.LastCommitInfo last_commit_info = 3 [json_name = "lastCommitInfo"];
  bool has_last_commit_info() const;
  private:
  bool _internal_has_last_commit_info() const;
  public:
  void clear_last_commit_info();
  const ::tm::LastCommitInfo& last_commit_info() const;
  ::tm::LastCommitInfo* release_last_commit_info();
  ::tm::LastCommitInfo* mutable_last_commit_info();
  void set_allocated_last_commit_info(::tm::LastCommitInfo* last_commit_info);
  private:
  const ::tm::LastCommitInfo& _internal_last_commit_info() const;
  ::tm::LastCommitInfo* _internal_mutable_last_commit_info();
  public:
  void unsafe_arena_set_allocated_last_commit_info(
      ::tm::LastCommitInfo* last_commit_info);
  ::tm::LastCommitInfo* unsafe_arena_release_last_commit_info();

  // @@protoc_insertion_point(class_scope:tm.RequestBeginBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::Evidence > byzantine_validators_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::tm::Header* header_;
  ::tm::LastCommitInfo* last_commit_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class RequestDeliverTx PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.RequestDeliverTx) */ {
 public:
  inline RequestDeliverTx() : RequestDeliverTx(nullptr) {}
  virtual ~RequestDeliverTx();

  RequestDeliverTx(const RequestDeliverTx& from);
  RequestDeliverTx(RequestDeliverTx&& from) noexcept
    : RequestDeliverTx() {
    *this = ::std::move(from);
  }

  inline RequestDeliverTx& operator=(const RequestDeliverTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestDeliverTx& operator=(RequestDeliverTx&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestDeliverTx& default_instance();

  static inline const RequestDeliverTx* internal_default_instance() {
    return reinterpret_cast<const RequestDeliverTx*>(
               &_RequestDeliverTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestDeliverTx& a, RequestDeliverTx& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestDeliverTx* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestDeliverTx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestDeliverTx* New() const final {
    return CreateMaybeMessage<RequestDeliverTx>(nullptr);
  }

  RequestDeliverTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestDeliverTx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestDeliverTx& from);
  void MergeFrom(const RequestDeliverTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestDeliverTx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.RequestDeliverTx";
  }
  protected:
  explicit RequestDeliverTx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
  };
  // bytes tx = 1 [json_name = "tx"];
  void clear_tx();
  const std::string& tx() const;
  void set_tx(const std::string& value);
  void set_tx(std::string&& value);
  void set_tx(const char* value);
  void set_tx(const void* value, size_t size);
  std::string* mutable_tx();
  std::string* release_tx();
  void set_allocated_tx(std::string* tx);
  private:
  const std::string& _internal_tx() const;
  void _internal_set_tx(const std::string& value);
  std::string* _internal_mutable_tx();
  public:

  // @@protoc_insertion_point(class_scope:tm.RequestDeliverTx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class ResponseInitChain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.ResponseInitChain) */ {
 public:
  inline ResponseInitChain() : ResponseInitChain(nullptr) {}
  virtual ~ResponseInitChain();

  ResponseInitChain(const ResponseInitChain& from);
  ResponseInitChain(ResponseInitChain&& from) noexcept
    : ResponseInitChain() {
    *this = ::std::move(from);
  }

  inline ResponseInitChain& operator=(const ResponseInitChain& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseInitChain& operator=(ResponseInitChain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseInitChain& default_instance();

  static inline const ResponseInitChain* internal_default_instance() {
    return reinterpret_cast<const ResponseInitChain*>(
               &_ResponseInitChain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResponseInitChain& a, ResponseInitChain& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseInitChain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseInitChain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseInitChain* New() const final {
    return CreateMaybeMessage<ResponseInitChain>(nullptr);
  }

  ResponseInitChain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseInitChain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseInitChain& from);
  void MergeFrom(const ResponseInitChain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseInitChain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.ResponseInitChain";
  }
  protected:
  explicit ResponseInitChain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorsFieldNumber = 2,
    kAppHashFieldNumber = 3,
    kConsensusParamsFieldNumber = 1,
  };
  // repeated .tm.ValidatorUpdate validators = 2 [json_name = "validators"];
  int validators_size() const;
  private:
  int _internal_validators_size() const;
  public:
  void clear_validators();
  ::tm::ValidatorUpdate* mutable_validators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::ValidatorUpdate >*
      mutable_validators();
  private:
  const ::tm::ValidatorUpdate& _internal_validators(int index) const;
  ::tm::ValidatorUpdate* _internal_add_validators();
  public:
  const ::tm::ValidatorUpdate& validators(int index) const;
  ::tm::ValidatorUpdate* add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::ValidatorUpdate >&
      validators() const;

  // bytes app_hash = 3 [json_name = "appHash"];
  void clear_app_hash();
  const std::string& app_hash() const;
  void set_app_hash(const std::string& value);
  void set_app_hash(std::string&& value);
  void set_app_hash(const char* value);
  void set_app_hash(const void* value, size_t size);
  std::string* mutable_app_hash();
  std::string* release_app_hash();
  void set_allocated_app_hash(std::string* app_hash);
  private:
  const std::string& _internal_app_hash() const;
  void _internal_set_app_hash(const std::string& value);
  std::string* _internal_mutable_app_hash();
  public:

  // .tm.ConsensusParams consensus_params = 1 [json_name = "consensusParams"];
  bool has_consensus_params() const;
  private:
  bool _internal_has_consensus_params() const;
  public:
  void clear_consensus_params();
  const ::tm::ConsensusParams& consensus_params() const;
  ::tm::ConsensusParams* release_consensus_params();
  ::tm::ConsensusParams* mutable_consensus_params();
  void set_allocated_consensus_params(::tm::ConsensusParams* consensus_params);
  private:
  const ::tm::ConsensusParams& _internal_consensus_params() const;
  ::tm::ConsensusParams* _internal_mutable_consensus_params();
  public:
  void unsafe_arena_set_allocated_consensus_params(
      ::tm::ConsensusParams* consensus_params);
  ::tm::ConsensusParams* unsafe_arena_release_consensus_params();

  // @@protoc_insertion_point(class_scope:tm.ResponseInitChain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::ValidatorUpdate > validators_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_hash_;
  ::tm::ConsensusParams* consensus_params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class ResponseBeginBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.ResponseBeginBlock) */ {
 public:
  inline ResponseBeginBlock() : ResponseBeginBlock(nullptr) {}
  virtual ~ResponseBeginBlock();

  ResponseBeginBlock(const ResponseBeginBlock& from);
  ResponseBeginBlock(ResponseBeginBlock&& from) noexcept
    : ResponseBeginBlock() {
    *this = ::std::move(from);
  }

  inline ResponseBeginBlock& operator=(const ResponseBeginBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseBeginBlock& operator=(ResponseBeginBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseBeginBlock& default_instance();

  static inline const ResponseBeginBlock* internal_default_instance() {
    return reinterpret_cast<const ResponseBeginBlock*>(
               &_ResponseBeginBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResponseBeginBlock& a, ResponseBeginBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseBeginBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseBeginBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseBeginBlock* New() const final {
    return CreateMaybeMessage<ResponseBeginBlock>(nullptr);
  }

  ResponseBeginBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseBeginBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseBeginBlock& from);
  void MergeFrom(const ResponseBeginBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseBeginBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.ResponseBeginBlock";
  }
  protected:
  explicit ResponseBeginBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .tm.Event events = 1 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::tm::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::Event >*
      mutable_events();
  private:
  const ::tm::Event& _internal_events(int index) const;
  ::tm::Event* _internal_add_events();
  public:
  const ::tm::Event& events(int index) const;
  ::tm::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::Event >&
      events() const;

  // @@protoc_insertion_point(class_scope:tm.ResponseBeginBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::Event > events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class ResponseDeliverTx PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.ResponseDeliverTx) */ {
 public:
  inline ResponseDeliverTx() : ResponseDeliverTx(nullptr) {}
  virtual ~ResponseDeliverTx();

  ResponseDeliverTx(const ResponseDeliverTx& from);
  ResponseDeliverTx(ResponseDeliverTx&& from) noexcept
    : ResponseDeliverTx() {
    *this = ::std::move(from);
  }

  inline ResponseDeliverTx& operator=(const ResponseDeliverTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseDeliverTx& operator=(ResponseDeliverTx&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseDeliverTx& default_instance();

  static inline const ResponseDeliverTx* internal_default_instance() {
    return reinterpret_cast<const ResponseDeliverTx*>(
               &_ResponseDeliverTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResponseDeliverTx& a, ResponseDeliverTx& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseDeliverTx* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseDeliverTx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseDeliverTx* New() const final {
    return CreateMaybeMessage<ResponseDeliverTx>(nullptr);
  }

  ResponseDeliverTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseDeliverTx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseDeliverTx& from);
  void MergeFrom(const ResponseDeliverTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseDeliverTx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.ResponseDeliverTx";
  }
  protected:
  explicit ResponseDeliverTx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 7,
    kDataFieldNumber = 2,
    kLogFieldNumber = 3,
    kInfoFieldNumber = 4,
    kCodespaceFieldNumber = 8,
    kGasWantedFieldNumber = 5,
    kGasUsedFieldNumber = 6,
    kCodeFieldNumber = 1,
  };
  // repeated .tm.Event events = 7 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::tm::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::Event >*
      mutable_events();
  private:
  const ::tm::Event& _internal_events(int index) const;
  ::tm::Event* _internal_add_events();
  public:
  const ::tm::Event& events(int index) const;
  ::tm::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::Event >&
      events() const;

  // bytes data = 2 [json_name = "data"];
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string log = 3 [json_name = "log"];
  void clear_log();
  const std::string& log() const;
  void set_log(const std::string& value);
  void set_log(std::string&& value);
  void set_log(const char* value);
  void set_log(const char* value, size_t size);
  std::string* mutable_log();
  std::string* release_log();
  void set_allocated_log(std::string* log);
  private:
  const std::string& _internal_log() const;
  void _internal_set_log(const std::string& value);
  std::string* _internal_mutable_log();
  public:

  // string info = 4 [json_name = "info"];
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // string codespace = 8 [json_name = "codespace"];
  void clear_codespace();
  const std::string& codespace() const;
  void set_codespace(const std::string& value);
  void set_codespace(std::string&& value);
  void set_codespace(const char* value);
  void set_codespace(const char* value, size_t size);
  std::string* mutable_codespace();
  std::string* release_codespace();
  void set_allocated_codespace(std::string* codespace);
  private:
  const std::string& _internal_codespace() const;
  void _internal_set_codespace(const std::string& value);
  std::string* _internal_mutable_codespace();
  public:

  // int64 gas_wanted = 5 [json_name = "gasWanted"];
  void clear_gas_wanted();
  ::PROTOBUF_NAMESPACE_ID::int64 gas_wanted() const;
  void set_gas_wanted(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gas_wanted() const;
  void _internal_set_gas_wanted(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 gas_used = 6 [json_name = "gasUsed"];
  void clear_gas_used();
  ::PROTOBUF_NAMESPACE_ID::int64 gas_used() const;
  void set_gas_used(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gas_used() const;
  void _internal_set_gas_used(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 code = 1 [json_name = "code"];
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tm.ResponseDeliverTx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::Event > events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codespace_;
  ::PROTOBUF_NAMESPACE_ID::int64 gas_wanted_;
  ::PROTOBUF_NAMESPACE_ID::int64 gas_used_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .tm.EventAttribute attributes = 2 [json_name = "attributes"];
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::tm::EventAttribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::EventAttribute >*
      mutable_attributes();
  private:
  const ::tm::EventAttribute& _internal_attributes(int index) const;
  ::tm::EventAttribute* _internal_add_attributes();
  public:
  const ::tm::EventAttribute& attributes(int index) const;
  ::tm::EventAttribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::EventAttribute >&
      attributes() const;

  // string type = 1 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:tm.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::EventAttribute > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class EventAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.EventAttribute) */ {
 public:
  inline EventAttribute() : EventAttribute(nullptr) {}
  virtual ~EventAttribute();

  EventAttribute(const EventAttribute& from);
  EventAttribute(EventAttribute&& from) noexcept
    : EventAttribute() {
    *this = ::std::move(from);
  }

  inline EventAttribute& operator=(const EventAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventAttribute& operator=(EventAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventAttribute& default_instance();

  static inline const EventAttribute* internal_default_instance() {
    return reinterpret_cast<const EventAttribute*>(
               &_EventAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EventAttribute& a, EventAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(EventAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventAttribute* New() const final {
    return CreateMaybeMessage<EventAttribute>(nullptr);
  }

  EventAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventAttribute& from);
  void MergeFrom(const EventAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.EventAttribute";
  }
  protected:
  explicit EventAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // bytes key = 1 [json_name = "key"];
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool index = 3 [json_name = "index"];
  void clear_index();
  bool index() const;
  void set_index(bool value);
  private:
  bool _internal_index() const;
  void _internal_set_index(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tm.EventAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class ValidatorUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.ValidatorUpdate) */ {
 public:
  inline ValidatorUpdate() : ValidatorUpdate(nullptr) {}
  virtual ~ValidatorUpdate();

  ValidatorUpdate(const ValidatorUpdate& from);
  ValidatorUpdate(ValidatorUpdate&& from) noexcept
    : ValidatorUpdate() {
    *this = ::std::move(from);
  }

  inline ValidatorUpdate& operator=(const ValidatorUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorUpdate& operator=(ValidatorUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidatorUpdate& default_instance();

  static inline const ValidatorUpdate* internal_default_instance() {
    return reinterpret_cast<const ValidatorUpdate*>(
               &_ValidatorUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ValidatorUpdate& a, ValidatorUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidatorUpdate* New() const final {
    return CreateMaybeMessage<ValidatorUpdate>(nullptr);
  }

  ValidatorUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatorUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidatorUpdate& from);
  void MergeFrom(const ValidatorUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.ValidatorUpdate";
  }
  protected:
  explicit ValidatorUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyFieldNumber = 1,
    kPowerFieldNumber = 2,
  };
  // .tm.PublicKey pub_key = 1 [json_name = "pubKey"];
  bool has_pub_key() const;
  private:
  bool _internal_has_pub_key() const;
  public:
  void clear_pub_key();
  const ::tm::PublicKey& pub_key() const;
  ::tm::PublicKey* release_pub_key();
  ::tm::PublicKey* mutable_pub_key();
  void set_allocated_pub_key(::tm::PublicKey* pub_key);
  private:
  const ::tm::PublicKey& _internal_pub_key() const;
  ::tm::PublicKey* _internal_mutable_pub_key();
  public:
  void unsafe_arena_set_allocated_pub_key(
      ::tm::PublicKey* pub_key);
  ::tm::PublicKey* unsafe_arena_release_pub_key();

  // int64 power = 2 [json_name = "power"];
  void clear_power();
  ::PROTOBUF_NAMESPACE_ID::int64 power() const;
  void set_power(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_power() const;
  void _internal_set_power(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:tm.ValidatorUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tm::PublicKey* pub_key_;
  ::PROTOBUF_NAMESPACE_ID::int64 power_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class ConsensusParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.ConsensusParams) */ {
 public:
  inline ConsensusParams() : ConsensusParams(nullptr) {}
  virtual ~ConsensusParams();

  ConsensusParams(const ConsensusParams& from);
  ConsensusParams(ConsensusParams&& from) noexcept
    : ConsensusParams() {
    *this = ::std::move(from);
  }

  inline ConsensusParams& operator=(const ConsensusParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusParams& operator=(ConsensusParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusParams& default_instance();

  static inline const ConsensusParams* internal_default_instance() {
    return reinterpret_cast<const ConsensusParams*>(
               &_ConsensusParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ConsensusParams& a, ConsensusParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsensusParams* New() const final {
    return CreateMaybeMessage<ConsensusParams>(nullptr);
  }

  ConsensusParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusParams& from);
  void MergeFrom(const ConsensusParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.ConsensusParams";
  }
  protected:
  explicit ConsensusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
    kEvidenceFieldNumber = 2,
    kValidatorFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  // .tm.BlockParams block = 1 [json_name = "block"];
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::tm::BlockParams& block() const;
  ::tm::BlockParams* release_block();
  ::tm::BlockParams* mutable_block();
  void set_allocated_block(::tm::BlockParams* block);
  private:
  const ::tm::BlockParams& _internal_block() const;
  ::tm::BlockParams* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::tm::BlockParams* block);
  ::tm::BlockParams* unsafe_arena_release_block();

  // .tm.EvidenceParams evidence = 2 [json_name = "evidence"];
  bool has_evidence() const;
  private:
  bool _internal_has_evidence() const;
  public:
  void clear_evidence();
  const ::tm::EvidenceParams& evidence() const;
  ::tm::EvidenceParams* release_evidence();
  ::tm::EvidenceParams* mutable_evidence();
  void set_allocated_evidence(::tm::EvidenceParams* evidence);
  private:
  const ::tm::EvidenceParams& _internal_evidence() const;
  ::tm::EvidenceParams* _internal_mutable_evidence();
  public:
  void unsafe_arena_set_allocated_evidence(
      ::tm::EvidenceParams* evidence);
  ::tm::EvidenceParams* unsafe_arena_release_evidence();

  // .tm.ValidatorParams validator = 3 [json_name = "validator"];
  bool has_validator() const;
  private:
  bool _internal_has_validator() const;
  public:
  void clear_validator();
  const ::tm::ValidatorParams& validator() const;
  ::tm::ValidatorParams* release_validator();
  ::tm::ValidatorParams* mutable_validator();
  void set_allocated_validator(::tm::ValidatorParams* validator);
  private:
  const ::tm::ValidatorParams& _internal_validator() const;
  ::tm::ValidatorParams* _internal_mutable_validator();
  public:
  void unsafe_arena_set_allocated_validator(
      ::tm::ValidatorParams* validator);
  ::tm::ValidatorParams* unsafe_arena_release_validator();

  // .tm.VersionParams version = 4 [json_name = "version"];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::tm::VersionParams& version() const;
  ::tm::VersionParams* release_version();
  ::tm::VersionParams* mutable_version();
  void set_allocated_version(::tm::VersionParams* version);
  private:
  const ::tm::VersionParams& _internal_version() const;
  ::tm::VersionParams* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::tm::VersionParams* version);
  ::tm::VersionParams* unsafe_arena_release_version();

  // @@protoc_insertion_point(class_scope:tm.ConsensusParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tm::BlockParams* block_;
  ::tm::EvidenceParams* evidence_;
  ::tm::ValidatorParams* validator_;
  ::tm::VersionParams* version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class BlockParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.BlockParams) */ {
 public:
  inline BlockParams() : BlockParams(nullptr) {}
  virtual ~BlockParams();

  BlockParams(const BlockParams& from);
  BlockParams(BlockParams&& from) noexcept
    : BlockParams() {
    *this = ::std::move(from);
  }

  inline BlockParams& operator=(const BlockParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockParams& operator=(BlockParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockParams& default_instance();

  static inline const BlockParams* internal_default_instance() {
    return reinterpret_cast<const BlockParams*>(
               &_BlockParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BlockParams& a, BlockParams& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockParams* New() const final {
    return CreateMaybeMessage<BlockParams>(nullptr);
  }

  BlockParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockParams& from);
  void MergeFrom(const BlockParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.BlockParams";
  }
  protected:
  explicit BlockParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxBytesFieldNumber = 1,
    kMaxGasFieldNumber = 2,
  };
  // int64 max_bytes = 1 [json_name = "maxBytes"];
  void clear_max_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 max_bytes() const;
  void set_max_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_bytes() const;
  void _internal_set_max_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_gas = 2 [json_name = "maxGas"];
  void clear_max_gas();
  ::PROTOBUF_NAMESPACE_ID::int64 max_gas() const;
  void set_max_gas(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_gas() const;
  void _internal_set_max_gas(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:tm.BlockParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_gas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class Evidence PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.Evidence) */ {
 public:
  inline Evidence() : Evidence(nullptr) {}
  virtual ~Evidence();

  Evidence(const Evidence& from);
  Evidence(Evidence&& from) noexcept
    : Evidence() {
    *this = ::std::move(from);
  }

  inline Evidence& operator=(const Evidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Evidence& operator=(Evidence&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Evidence& default_instance();

  static inline const Evidence* internal_default_instance() {
    return reinterpret_cast<const Evidence*>(
               &_Evidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Evidence& a, Evidence& b) {
    a.Swap(&b);
  }
  inline void Swap(Evidence* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Evidence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Evidence* New() const final {
    return CreateMaybeMessage<Evidence>(nullptr);
  }

  Evidence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Evidence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Evidence& from);
  void MergeFrom(const Evidence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Evidence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.Evidence";
  }
  protected:
  explicit Evidence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorFieldNumber = 2,
    kHeightFieldNumber = 3,
    kTimeFieldNumber = 4,
    kTotalVotingPowerFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // .tm.Validator validator = 2 [json_name = "validator"];
  bool has_validator() const;
  private:
  bool _internal_has_validator() const;
  public:
  void clear_validator();
  const ::tm::Validator& validator() const;
  ::tm::Validator* release_validator();
  ::tm::Validator* mutable_validator();
  void set_allocated_validator(::tm::Validator* validator);
  private:
  const ::tm::Validator& _internal_validator() const;
  ::tm::Validator* _internal_mutable_validator();
  public:
  void unsafe_arena_set_allocated_validator(
      ::tm::Validator* validator);
  ::tm::Validator* unsafe_arena_release_validator();

  // int64 height = 3 [json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 time = 4 [json_name = "time"];
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_voting_power = 5 [json_name = "totalVotingPower"];
  void clear_total_voting_power();
  ::PROTOBUF_NAMESPACE_ID::int64 total_voting_power() const;
  void set_total_voting_power(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_voting_power() const;
  void _internal_set_total_voting_power(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .tm.EvidenceType type = 1 [json_name = "type"];
  void clear_type();
  ::tm::EvidenceType type() const;
  void set_type(::tm::EvidenceType value);
  private:
  ::tm::EvidenceType _internal_type() const;
  void _internal_set_type(::tm::EvidenceType value);
  public:

  // @@protoc_insertion_point(class_scope:tm.Evidence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tm::Validator* validator_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_voting_power_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class Validator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.Validator) */ {
 public:
  inline Validator() : Validator(nullptr) {}
  virtual ~Validator();

  Validator(const Validator& from);
  Validator(Validator&& from) noexcept
    : Validator() {
    *this = ::std::move(from);
  }

  inline Validator& operator=(const Validator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Validator& operator=(Validator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Validator& default_instance();

  static inline const Validator* internal_default_instance() {
    return reinterpret_cast<const Validator*>(
               &_Validator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Validator& a, Validator& b) {
    a.Swap(&b);
  }
  inline void Swap(Validator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Validator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Validator* New() const final {
    return CreateMaybeMessage<Validator>(nullptr);
  }

  Validator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Validator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Validator& from);
  void MergeFrom(const Validator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Validator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.Validator";
  }
  protected:
  explicit Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPowerFieldNumber = 3,
  };
  // bytes address = 1 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int64 power = 3 [json_name = "power"];
  void clear_power();
  ::PROTOBUF_NAMESPACE_ID::int64 power() const;
  void set_power(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_power() const;
  void _internal_set_power(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:tm.Validator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::int64 power_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class LastCommitInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.LastCommitInfo) */ {
 public:
  inline LastCommitInfo() : LastCommitInfo(nullptr) {}
  virtual ~LastCommitInfo();

  LastCommitInfo(const LastCommitInfo& from);
  LastCommitInfo(LastCommitInfo&& from) noexcept
    : LastCommitInfo() {
    *this = ::std::move(from);
  }

  inline LastCommitInfo& operator=(const LastCommitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastCommitInfo& operator=(LastCommitInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LastCommitInfo& default_instance();

  static inline const LastCommitInfo* internal_default_instance() {
    return reinterpret_cast<const LastCommitInfo*>(
               &_LastCommitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LastCommitInfo& a, LastCommitInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LastCommitInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastCommitInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LastCommitInfo* New() const final {
    return CreateMaybeMessage<LastCommitInfo>(nullptr);
  }

  LastCommitInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LastCommitInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LastCommitInfo& from);
  void MergeFrom(const LastCommitInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastCommitInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.LastCommitInfo";
  }
  protected:
  explicit LastCommitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 2,
    kRoundFieldNumber = 1,
  };
  // repeated .tm.VoteInfo votes = 2 [json_name = "votes"];
  int votes_size() const;
  private:
  int _internal_votes_size() const;
  public:
  void clear_votes();
  ::tm::VoteInfo* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::VoteInfo >*
      mutable_votes();
  private:
  const ::tm::VoteInfo& _internal_votes(int index) const;
  ::tm::VoteInfo* _internal_add_votes();
  public:
  const ::tm::VoteInfo& votes(int index) const;
  ::tm::VoteInfo* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::VoteInfo >&
      votes() const;

  // int32 round = 1 [json_name = "round"];
  void clear_round();
  ::PROTOBUF_NAMESPACE_ID::int32 round() const;
  void set_round(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_round() const;
  void _internal_set_round(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tm.LastCommitInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::VoteInfo > votes_;
  ::PROTOBUF_NAMESPACE_ID::int32 round_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class VoteInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.VoteInfo) */ {
 public:
  inline VoteInfo() : VoteInfo(nullptr) {}
  virtual ~VoteInfo();

  VoteInfo(const VoteInfo& from);
  VoteInfo(VoteInfo&& from) noexcept
    : VoteInfo() {
    *this = ::std::move(from);
  }

  inline VoteInfo& operator=(const VoteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteInfo& operator=(VoteInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoteInfo& default_instance();

  static inline const VoteInfo* internal_default_instance() {
    return reinterpret_cast<const VoteInfo*>(
               &_VoteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(VoteInfo& a, VoteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VoteInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoteInfo* New() const final {
    return CreateMaybeMessage<VoteInfo>(nullptr);
  }

  VoteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoteInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoteInfo& from);
  void MergeFrom(const VoteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.VoteInfo";
  }
  protected:
  explicit VoteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorFieldNumber = 1,
    kSignedLastBlockFieldNumber = 2,
  };
  // .tm.Validator validator = 1 [json_name = "validator"];
  bool has_validator() const;
  private:
  bool _internal_has_validator() const;
  public:
  void clear_validator();
  const ::tm::Validator& validator() const;
  ::tm::Validator* release_validator();
  ::tm::Validator* mutable_validator();
  void set_allocated_validator(::tm::Validator* validator);
  private:
  const ::tm::Validator& _internal_validator() const;
  ::tm::Validator* _internal_mutable_validator();
  public:
  void unsafe_arena_set_allocated_validator(
      ::tm::Validator* validator);
  ::tm::Validator* unsafe_arena_release_validator();

  // bool signed_last_block = 2 [json_name = "signedLastBlock"];
  void clear_signed_last_block();
  bool signed_last_block() const;
  void set_signed_last_block(bool value);
  private:
  bool _internal_signed_last_block() const;
  void _internal_set_signed_last_block(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tm.VoteInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tm::Validator* validator_;
  bool signed_last_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class EvidenceParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.EvidenceParams) */ {
 public:
  inline EvidenceParams() : EvidenceParams(nullptr) {}
  virtual ~EvidenceParams();

  EvidenceParams(const EvidenceParams& from);
  EvidenceParams(EvidenceParams&& from) noexcept
    : EvidenceParams() {
    *this = ::std::move(from);
  }

  inline EvidenceParams& operator=(const EvidenceParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvidenceParams& operator=(EvidenceParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EvidenceParams& default_instance();

  static inline const EvidenceParams* internal_default_instance() {
    return reinterpret_cast<const EvidenceParams*>(
               &_EvidenceParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(EvidenceParams& a, EvidenceParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EvidenceParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvidenceParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EvidenceParams* New() const final {
    return CreateMaybeMessage<EvidenceParams>(nullptr);
  }

  EvidenceParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EvidenceParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EvidenceParams& from);
  void MergeFrom(const EvidenceParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvidenceParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.EvidenceParams";
  }
  protected:
  explicit EvidenceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxAgeNumBlocksFieldNumber = 1,
    kMaxAgeDurationFieldNumber = 2,
    kMaxNumFieldNumber = 3,
  };
  // int64 max_age_num_blocks = 1 [json_name = "maxAgeNumBlocks"];
  void clear_max_age_num_blocks();
  ::PROTOBUF_NAMESPACE_ID::int64 max_age_num_blocks() const;
  void set_max_age_num_blocks(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_age_num_blocks() const;
  void _internal_set_max_age_num_blocks(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_age_duration = 2 [json_name = "maxAgeDuration"];
  void clear_max_age_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 max_age_duration() const;
  void set_max_age_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_age_duration() const;
  void _internal_set_max_age_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 max_num = 3 [json_name = "maxNum"];
  void clear_max_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_num() const;
  void set_max_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_num() const;
  void _internal_set_max_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tm.EvidenceParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_age_num_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_age_duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class ValidatorParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.ValidatorParams) */ {
 public:
  inline ValidatorParams() : ValidatorParams(nullptr) {}
  virtual ~ValidatorParams();

  ValidatorParams(const ValidatorParams& from);
  ValidatorParams(ValidatorParams&& from) noexcept
    : ValidatorParams() {
    *this = ::std::move(from);
  }

  inline ValidatorParams& operator=(const ValidatorParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorParams& operator=(ValidatorParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidatorParams& default_instance();

  static inline const ValidatorParams* internal_default_instance() {
    return reinterpret_cast<const ValidatorParams*>(
               &_ValidatorParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ValidatorParams& a, ValidatorParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidatorParams* New() const final {
    return CreateMaybeMessage<ValidatorParams>(nullptr);
  }

  ValidatorParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatorParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidatorParams& from);
  void MergeFrom(const ValidatorParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.ValidatorParams";
  }
  protected:
  explicit ValidatorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyTypesFieldNumber = 1,
  };
  // repeated string pub_key_types = 1 [json_name = "pubKeyTypes"];
  int pub_key_types_size() const;
  private:
  int _internal_pub_key_types_size() const;
  public:
  void clear_pub_key_types();
  const std::string& pub_key_types(int index) const;
  std::string* mutable_pub_key_types(int index);
  void set_pub_key_types(int index, const std::string& value);
  void set_pub_key_types(int index, std::string&& value);
  void set_pub_key_types(int index, const char* value);
  void set_pub_key_types(int index, const char* value, size_t size);
  std::string* add_pub_key_types();
  void add_pub_key_types(const std::string& value);
  void add_pub_key_types(std::string&& value);
  void add_pub_key_types(const char* value);
  void add_pub_key_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pub_key_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pub_key_types();
  private:
  const std::string& _internal_pub_key_types(int index) const;
  std::string* _internal_add_pub_key_types();
  public:

  // @@protoc_insertion_point(class_scope:tm.ValidatorParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pub_key_types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class VersionParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.VersionParams) */ {
 public:
  inline VersionParams() : VersionParams(nullptr) {}
  virtual ~VersionParams();

  VersionParams(const VersionParams& from);
  VersionParams(VersionParams&& from) noexcept
    : VersionParams() {
    *this = ::std::move(from);
  }

  inline VersionParams& operator=(const VersionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionParams& operator=(VersionParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionParams& default_instance();

  static inline const VersionParams* internal_default_instance() {
    return reinterpret_cast<const VersionParams*>(
               &_VersionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(VersionParams& a, VersionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionParams* New() const final {
    return CreateMaybeMessage<VersionParams>(nullptr);
  }

  VersionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionParams& from);
  void MergeFrom(const VersionParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.VersionParams";
  }
  protected:
  explicit VersionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppVersionFieldNumber = 1,
  };
  // uint64 app_version = 1 [json_name = "appVersion"];
  void clear_app_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 app_version() const;
  void set_app_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_app_version() const;
  void _internal_set_app_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:tm.VersionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 app_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIdFieldNumber = 1,
    kHeightFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // string chain_id = 1 [json_name = "chainId"];
  void clear_chain_id();
  const std::string& chain_id() const;
  void set_chain_id(const std::string& value);
  void set_chain_id(std::string&& value);
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  std::string* mutable_chain_id();
  std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // int64 height = 2 [json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 time = 3 [json_name = "time"];
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:tm.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// -------------------------------------------------------------------

class PublicKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tm.PublicKey) */ {
 public:
  inline PublicKey() : PublicKey(nullptr) {}
  virtual ~PublicKey();

  PublicKey(const PublicKey& from);
  PublicKey(PublicKey&& from) noexcept
    : PublicKey() {
    *this = ::std::move(from);
  }

  inline PublicKey& operator=(const PublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicKey& operator=(PublicKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublicKey& default_instance();

  enum SumCase {
    kEd25519 = 1,
    SUM_NOT_SET = 0,
  };

  static inline const PublicKey* internal_default_instance() {
    return reinterpret_cast<const PublicKey*>(
               &_PublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PublicKey& a, PublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublicKey* New() const final {
    return CreateMaybeMessage<PublicKey>(nullptr);
  }

  PublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublicKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublicKey& from);
  void MergeFrom(const PublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tm.PublicKey";
  }
  protected:
  explicit PublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tm_2freplay_2eproto);
    return ::descriptor_table_tm_2freplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEd25519FieldNumber = 1,
  };
  // bytes ed25519 = 1 [json_name = "ed25519"];
  private:
  bool _internal_has_ed25519() const;
  public:
  void clear_ed25519();
  const std::string& ed25519() const;
  void set_ed25519(const std::string& value);
  void set_ed25519(std::string&& value);
  void set_ed25519(const char* value);
  void set_ed25519(const void* value, size_t size);
  std::string* mutable_ed25519();
  std::string* release_ed25519();
  void set_allocated_ed25519(std::string* ed25519);
  private:
  const std::string& _internal_ed25519() const;
  void _internal_set_ed25519(const std::string& value);
  std::string* _internal_mutable_ed25519();
  public:

  void clear_sum();
  SumCase sum_case() const;
  // @@protoc_insertion_point(class_scope:tm.PublicKey)
 private:
  class _Internal;
  void set_has_ed25519();

  inline bool has_sum() const;
  inline void clear_has_sum();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SumUnion {
    SumUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ed25519_;
  } sum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tm_2freplay_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TmEvent

// .tm.RequestInitChain req_init_chain = 1 [json_name = "reqInitChain"];
inline bool TmEvent::_internal_has_req_init_chain() const {
  return action_case() == kReqInitChain;
}
inline bool TmEvent::has_req_init_chain() const {
  return _internal_has_req_init_chain();
}
inline void TmEvent::set_has_req_init_chain() {
  _oneof_case_[0] = kReqInitChain;
}
inline void TmEvent::clear_req_init_chain() {
  if (_internal_has_req_init_chain()) {
    if (GetArena() == nullptr) {
      delete action_.req_init_chain_;
    }
    clear_has_action();
  }
}
inline ::tm::RequestInitChain* TmEvent::release_req_init_chain() {
  // @@protoc_insertion_point(field_release:tm.TmEvent.req_init_chain)
  if (_internal_has_req_init_chain()) {
    clear_has_action();
      ::tm::RequestInitChain* temp = action_.req_init_chain_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.req_init_chain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tm::RequestInitChain& TmEvent::_internal_req_init_chain() const {
  return _internal_has_req_init_chain()
      ? *action_.req_init_chain_
      : reinterpret_cast< ::tm::RequestInitChain&>(::tm::_RequestInitChain_default_instance_);
}
inline const ::tm::RequestInitChain& TmEvent::req_init_chain() const {
  // @@protoc_insertion_point(field_get:tm.TmEvent.req_init_chain)
  return _internal_req_init_chain();
}
inline ::tm::RequestInitChain* TmEvent::unsafe_arena_release_req_init_chain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tm.TmEvent.req_init_chain)
  if (_internal_has_req_init_chain()) {
    clear_has_action();
    ::tm::RequestInitChain* temp = action_.req_init_chain_;
    action_.req_init_chain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TmEvent::unsafe_arena_set_allocated_req_init_chain(::tm::RequestInitChain* req_init_chain) {
  clear_action();
  if (req_init_chain) {
    set_has_req_init_chain();
    action_.req_init_chain_ = req_init_chain;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.TmEvent.req_init_chain)
}
inline ::tm::RequestInitChain* TmEvent::_internal_mutable_req_init_chain() {
  if (!_internal_has_req_init_chain()) {
    clear_action();
    set_has_req_init_chain();
    action_.req_init_chain_ = CreateMaybeMessage< ::tm::RequestInitChain >(GetArena());
  }
  return action_.req_init_chain_;
}
inline ::tm::RequestInitChain* TmEvent::mutable_req_init_chain() {
  // @@protoc_insertion_point(field_mutable:tm.TmEvent.req_init_chain)
  return _internal_mutable_req_init_chain();
}

// .tm.ResponseInitChain res_init_chain = 2 [json_name = "resInitChain"];
inline bool TmEvent::_internal_has_res_init_chain() const {
  return action_case() == kResInitChain;
}
inline bool TmEvent::has_res_init_chain() const {
  return _internal_has_res_init_chain();
}
inline void TmEvent::set_has_res_init_chain() {
  _oneof_case_[0] = kResInitChain;
}
inline void TmEvent::clear_res_init_chain() {
  if (_internal_has_res_init_chain()) {
    if (GetArena() == nullptr) {
      delete action_.res_init_chain_;
    }
    clear_has_action();
  }
}
inline ::tm::ResponseInitChain* TmEvent::release_res_init_chain() {
  // @@protoc_insertion_point(field_release:tm.TmEvent.res_init_chain)
  if (_internal_has_res_init_chain()) {
    clear_has_action();
      ::tm::ResponseInitChain* temp = action_.res_init_chain_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.res_init_chain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tm::ResponseInitChain& TmEvent::_internal_res_init_chain() const {
  return _internal_has_res_init_chain()
      ? *action_.res_init_chain_
      : reinterpret_cast< ::tm::ResponseInitChain&>(::tm::_ResponseInitChain_default_instance_);
}
inline const ::tm::ResponseInitChain& TmEvent::res_init_chain() const {
  // @@protoc_insertion_point(field_get:tm.TmEvent.res_init_chain)
  return _internal_res_init_chain();
}
inline ::tm::ResponseInitChain* TmEvent::unsafe_arena_release_res_init_chain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tm.TmEvent.res_init_chain)
  if (_internal_has_res_init_chain()) {
    clear_has_action();
    ::tm::ResponseInitChain* temp = action_.res_init_chain_;
    action_.res_init_chain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TmEvent::unsafe_arena_set_allocated_res_init_chain(::tm::ResponseInitChain* res_init_chain) {
  clear_action();
  if (res_init_chain) {
    set_has_res_init_chain();
    action_.res_init_chain_ = res_init_chain;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.TmEvent.res_init_chain)
}
inline ::tm::ResponseInitChain* TmEvent::_internal_mutable_res_init_chain() {
  if (!_internal_has_res_init_chain()) {
    clear_action();
    set_has_res_init_chain();
    action_.res_init_chain_ = CreateMaybeMessage< ::tm::ResponseInitChain >(GetArena());
  }
  return action_.res_init_chain_;
}
inline ::tm::ResponseInitChain* TmEvent::mutable_res_init_chain() {
  // @@protoc_insertion_point(field_mutable:tm.TmEvent.res_init_chain)
  return _internal_mutable_res_init_chain();
}

// .tm.RequestDeliverTx req_deliver_tx = 3 [json_name = "reqDeliverTx"];
inline bool TmEvent::_internal_has_req_deliver_tx() const {
  return action_case() == kReqDeliverTx;
}
inline bool TmEvent::has_req_deliver_tx() const {
  return _internal_has_req_deliver_tx();
}
inline void TmEvent::set_has_req_deliver_tx() {
  _oneof_case_[0] = kReqDeliverTx;
}
inline void TmEvent::clear_req_deliver_tx() {
  if (_internal_has_req_deliver_tx()) {
    if (GetArena() == nullptr) {
      delete action_.req_deliver_tx_;
    }
    clear_has_action();
  }
}
inline ::tm::RequestDeliverTx* TmEvent::release_req_deliver_tx() {
  // @@protoc_insertion_point(field_release:tm.TmEvent.req_deliver_tx)
  if (_internal_has_req_deliver_tx()) {
    clear_has_action();
      ::tm::RequestDeliverTx* temp = action_.req_deliver_tx_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.req_deliver_tx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tm::RequestDeliverTx& TmEvent::_internal_req_deliver_tx() const {
  return _internal_has_req_deliver_tx()
      ? *action_.req_deliver_tx_
      : reinterpret_cast< ::tm::RequestDeliverTx&>(::tm::_RequestDeliverTx_default_instance_);
}
inline const ::tm::RequestDeliverTx& TmEvent::req_deliver_tx() const {
  // @@protoc_insertion_point(field_get:tm.TmEvent.req_deliver_tx)
  return _internal_req_deliver_tx();
}
inline ::tm::RequestDeliverTx* TmEvent::unsafe_arena_release_req_deliver_tx() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tm.TmEvent.req_deliver_tx)
  if (_internal_has_req_deliver_tx()) {
    clear_has_action();
    ::tm::RequestDeliverTx* temp = action_.req_deliver_tx_;
    action_.req_deliver_tx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TmEvent::unsafe_arena_set_allocated_req_deliver_tx(::tm::RequestDeliverTx* req_deliver_tx) {
  clear_action();
  if (req_deliver_tx) {
    set_has_req_deliver_tx();
    action_.req_deliver_tx_ = req_deliver_tx;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.TmEvent.req_deliver_tx)
}
inline ::tm::RequestDeliverTx* TmEvent::_internal_mutable_req_deliver_tx() {
  if (!_internal_has_req_deliver_tx()) {
    clear_action();
    set_has_req_deliver_tx();
    action_.req_deliver_tx_ = CreateMaybeMessage< ::tm::RequestDeliverTx >(GetArena());
  }
  return action_.req_deliver_tx_;
}
inline ::tm::RequestDeliverTx* TmEvent::mutable_req_deliver_tx() {
  // @@protoc_insertion_point(field_mutable:tm.TmEvent.req_deliver_tx)
  return _internal_mutable_req_deliver_tx();
}

// .tm.ResponseDeliverTx res_deliver_tx = 4 [json_name = "resDeliverTx"];
inline bool TmEvent::_internal_has_res_deliver_tx() const {
  return action_case() == kResDeliverTx;
}
inline bool TmEvent::has_res_deliver_tx() const {
  return _internal_has_res_deliver_tx();
}
inline void TmEvent::set_has_res_deliver_tx() {
  _oneof_case_[0] = kResDeliverTx;
}
inline void TmEvent::clear_res_deliver_tx() {
  if (_internal_has_res_deliver_tx()) {
    if (GetArena() == nullptr) {
      delete action_.res_deliver_tx_;
    }
    clear_has_action();
  }
}
inline ::tm::ResponseDeliverTx* TmEvent::release_res_deliver_tx() {
  // @@protoc_insertion_point(field_release:tm.TmEvent.res_deliver_tx)
  if (_internal_has_res_deliver_tx()) {
    clear_has_action();
      ::tm::ResponseDeliverTx* temp = action_.res_deliver_tx_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.res_deliver_tx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tm::ResponseDeliverTx& TmEvent::_internal_res_deliver_tx() const {
  return _internal_has_res_deliver_tx()
      ? *action_.res_deliver_tx_
      : reinterpret_cast< ::tm::ResponseDeliverTx&>(::tm::_ResponseDeliverTx_default_instance_);
}
inline const ::tm::ResponseDeliverTx& TmEvent::res_deliver_tx() const {
  // @@protoc_insertion_point(field_get:tm.TmEvent.res_deliver_tx)
  return _internal_res_deliver_tx();
}
inline ::tm::ResponseDeliverTx* TmEvent::unsafe_arena_release_res_deliver_tx() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tm.TmEvent.res_deliver_tx)
  if (_internal_has_res_deliver_tx()) {
    clear_has_action();
    ::tm::ResponseDeliverTx* temp = action_.res_deliver_tx_;
    action_.res_deliver_tx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TmEvent::unsafe_arena_set_allocated_res_deliver_tx(::tm::ResponseDeliverTx* res_deliver_tx) {
  clear_action();
  if (res_deliver_tx) {
    set_has_res_deliver_tx();
    action_.res_deliver_tx_ = res_deliver_tx;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.TmEvent.res_deliver_tx)
}
inline ::tm::ResponseDeliverTx* TmEvent::_internal_mutable_res_deliver_tx() {
  if (!_internal_has_res_deliver_tx()) {
    clear_action();
    set_has_res_deliver_tx();
    action_.res_deliver_tx_ = CreateMaybeMessage< ::tm::ResponseDeliverTx >(GetArena());
  }
  return action_.res_deliver_tx_;
}
inline ::tm::ResponseDeliverTx* TmEvent::mutable_res_deliver_tx() {
  // @@protoc_insertion_point(field_mutable:tm.TmEvent.res_deliver_tx)
  return _internal_mutable_res_deliver_tx();
}

// .tm.RequestBeginBlock req_begin_block = 5 [json_name = "reqBeginBlock"];
inline bool TmEvent::_internal_has_req_begin_block() const {
  return action_case() == kReqBeginBlock;
}
inline bool TmEvent::has_req_begin_block() const {
  return _internal_has_req_begin_block();
}
inline void TmEvent::set_has_req_begin_block() {
  _oneof_case_[0] = kReqBeginBlock;
}
inline void TmEvent::clear_req_begin_block() {
  if (_internal_has_req_begin_block()) {
    if (GetArena() == nullptr) {
      delete action_.req_begin_block_;
    }
    clear_has_action();
  }
}
inline ::tm::RequestBeginBlock* TmEvent::release_req_begin_block() {
  // @@protoc_insertion_point(field_release:tm.TmEvent.req_begin_block)
  if (_internal_has_req_begin_block()) {
    clear_has_action();
      ::tm::RequestBeginBlock* temp = action_.req_begin_block_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.req_begin_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tm::RequestBeginBlock& TmEvent::_internal_req_begin_block() const {
  return _internal_has_req_begin_block()
      ? *action_.req_begin_block_
      : reinterpret_cast< ::tm::RequestBeginBlock&>(::tm::_RequestBeginBlock_default_instance_);
}
inline const ::tm::RequestBeginBlock& TmEvent::req_begin_block() const {
  // @@protoc_insertion_point(field_get:tm.TmEvent.req_begin_block)
  return _internal_req_begin_block();
}
inline ::tm::RequestBeginBlock* TmEvent::unsafe_arena_release_req_begin_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tm.TmEvent.req_begin_block)
  if (_internal_has_req_begin_block()) {
    clear_has_action();
    ::tm::RequestBeginBlock* temp = action_.req_begin_block_;
    action_.req_begin_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TmEvent::unsafe_arena_set_allocated_req_begin_block(::tm::RequestBeginBlock* req_begin_block) {
  clear_action();
  if (req_begin_block) {
    set_has_req_begin_block();
    action_.req_begin_block_ = req_begin_block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.TmEvent.req_begin_block)
}
inline ::tm::RequestBeginBlock* TmEvent::_internal_mutable_req_begin_block() {
  if (!_internal_has_req_begin_block()) {
    clear_action();
    set_has_req_begin_block();
    action_.req_begin_block_ = CreateMaybeMessage< ::tm::RequestBeginBlock >(GetArena());
  }
  return action_.req_begin_block_;
}
inline ::tm::RequestBeginBlock* TmEvent::mutable_req_begin_block() {
  // @@protoc_insertion_point(field_mutable:tm.TmEvent.req_begin_block)
  return _internal_mutable_req_begin_block();
}

// .tm.ResponseBeginBlock res_begin_block = 6 [json_name = "resBeginBlock"];
inline bool TmEvent::_internal_has_res_begin_block() const {
  return action_case() == kResBeginBlock;
}
inline bool TmEvent::has_res_begin_block() const {
  return _internal_has_res_begin_block();
}
inline void TmEvent::set_has_res_begin_block() {
  _oneof_case_[0] = kResBeginBlock;
}
inline void TmEvent::clear_res_begin_block() {
  if (_internal_has_res_begin_block()) {
    if (GetArena() == nullptr) {
      delete action_.res_begin_block_;
    }
    clear_has_action();
  }
}
inline ::tm::ResponseBeginBlock* TmEvent::release_res_begin_block() {
  // @@protoc_insertion_point(field_release:tm.TmEvent.res_begin_block)
  if (_internal_has_res_begin_block()) {
    clear_has_action();
      ::tm::ResponseBeginBlock* temp = action_.res_begin_block_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.res_begin_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tm::ResponseBeginBlock& TmEvent::_internal_res_begin_block() const {
  return _internal_has_res_begin_block()
      ? *action_.res_begin_block_
      : reinterpret_cast< ::tm::ResponseBeginBlock&>(::tm::_ResponseBeginBlock_default_instance_);
}
inline const ::tm::ResponseBeginBlock& TmEvent::res_begin_block() const {
  // @@protoc_insertion_point(field_get:tm.TmEvent.res_begin_block)
  return _internal_res_begin_block();
}
inline ::tm::ResponseBeginBlock* TmEvent::unsafe_arena_release_res_begin_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tm.TmEvent.res_begin_block)
  if (_internal_has_res_begin_block()) {
    clear_has_action();
    ::tm::ResponseBeginBlock* temp = action_.res_begin_block_;
    action_.res_begin_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TmEvent::unsafe_arena_set_allocated_res_begin_block(::tm::ResponseBeginBlock* res_begin_block) {
  clear_action();
  if (res_begin_block) {
    set_has_res_begin_block();
    action_.res_begin_block_ = res_begin_block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.TmEvent.res_begin_block)
}
inline ::tm::ResponseBeginBlock* TmEvent::_internal_mutable_res_begin_block() {
  if (!_internal_has_res_begin_block()) {
    clear_action();
    set_has_res_begin_block();
    action_.res_begin_block_ = CreateMaybeMessage< ::tm::ResponseBeginBlock >(GetArena());
  }
  return action_.res_begin_block_;
}
inline ::tm::ResponseBeginBlock* TmEvent::mutable_res_begin_block() {
  // @@protoc_insertion_point(field_mutable:tm.TmEvent.res_begin_block)
  return _internal_mutable_res_begin_block();
}

inline bool TmEvent::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void TmEvent::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline TmEvent::ActionCase TmEvent::action_case() const {
  return TmEvent::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RequestInitChain

// int64 time = 1 [json_name = "time"];
inline void RequestInitChain::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestInitChain::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestInitChain::time() const {
  // @@protoc_insertion_point(field_get:tm.RequestInitChain.time)
  return _internal_time();
}
inline void RequestInitChain::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {

  time_ = value;
}
inline void RequestInitChain::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:tm.RequestInitChain.time)
}

// string chain_id = 2 [json_name = "chainId"];
inline void RequestInitChain::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& RequestInitChain::chain_id() const {
  // @@protoc_insertion_point(field_get:tm.RequestInitChain.chain_id)
  return _internal_chain_id();
}
inline void RequestInitChain::set_chain_id(const std::string& value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:tm.RequestInitChain.chain_id)
}
inline std::string* RequestInitChain::mutable_chain_id() {
  // @@protoc_insertion_point(field_mutable:tm.RequestInitChain.chain_id)
  return _internal_mutable_chain_id();
}
inline const std::string& RequestInitChain::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void RequestInitChain::_internal_set_chain_id(const std::string& value) {

  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestInitChain::set_chain_id(std::string&& value) {

  chain_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tm.RequestInitChain.chain_id)
}
inline void RequestInitChain::set_chain_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tm.RequestInitChain.chain_id)
}
inline void RequestInitChain::set_chain_id(const char* value,
    size_t size) {

  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tm.RequestInitChain.chain_id)
}
inline std::string* RequestInitChain::_internal_mutable_chain_id() {

  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestInitChain::release_chain_id() {
  // @@protoc_insertion_point(field_release:tm.RequestInitChain.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestInitChain::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {

  } else {

  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tm.RequestInitChain.chain_id)
}

// .tm.ConsensusParams consensus_params = 3 [json_name = "consensusParams"];
inline bool RequestInitChain::_internal_has_consensus_params() const {
  return this != internal_default_instance() && consensus_params_ != nullptr;
}
inline bool RequestInitChain::has_consensus_params() const {
  return _internal_has_consensus_params();
}
inline void RequestInitChain::clear_consensus_params() {
  if (GetArena() == nullptr && consensus_params_ != nullptr) {
    delete consensus_params_;
  }
  consensus_params_ = nullptr;
}
inline const ::tm::ConsensusParams& RequestInitChain::_internal_consensus_params() const {
  const ::tm::ConsensusParams* p = consensus_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::tm::ConsensusParams&>(
      ::tm::_ConsensusParams_default_instance_);
}
inline const ::tm::ConsensusParams& RequestInitChain::consensus_params() const {
  // @@protoc_insertion_point(field_get:tm.RequestInitChain.consensus_params)
  return _internal_consensus_params();
}
inline void RequestInitChain::unsafe_arena_set_allocated_consensus_params(
    ::tm::ConsensusParams* consensus_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_params_);
  }
  consensus_params_ = consensus_params;
  if (consensus_params) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.RequestInitChain.consensus_params)
}
inline ::tm::ConsensusParams* RequestInitChain::release_consensus_params() {

  ::tm::ConsensusParams* temp = consensus_params_;
  consensus_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tm::ConsensusParams* RequestInitChain::unsafe_arena_release_consensus_params() {
  // @@protoc_insertion_point(field_release:tm.RequestInitChain.consensus_params)

  ::tm::ConsensusParams* temp = consensus_params_;
  consensus_params_ = nullptr;
  return temp;
}
inline ::tm::ConsensusParams* RequestInitChain::_internal_mutable_consensus_params() {

  if (consensus_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::tm::ConsensusParams>(GetArena());
    consensus_params_ = p;
  }
  return consensus_params_;
}
inline ::tm::ConsensusParams* RequestInitChain::mutable_consensus_params() {
  // @@protoc_insertion_point(field_mutable:tm.RequestInitChain.consensus_params)
  return _internal_mutable_consensus_params();
}
inline void RequestInitChain::set_allocated_consensus_params(::tm::ConsensusParams* consensus_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete consensus_params_;
  }
  if (consensus_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(consensus_params);
    if (message_arena != submessage_arena) {
      consensus_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus_params, submessage_arena);
    }

  } else {

  }
  consensus_params_ = consensus_params;
  // @@protoc_insertion_point(field_set_allocated:tm.RequestInitChain.consensus_params)
}

// repeated .tm.ValidatorUpdate validators = 4 [json_name = "validators"];
inline int RequestInitChain::_internal_validators_size() const {
  return validators_.size();
}
inline int RequestInitChain::validators_size() const {
  return _internal_validators_size();
}
inline void RequestInitChain::clear_validators() {
  validators_.Clear();
}
inline ::tm::ValidatorUpdate* RequestInitChain::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:tm.RequestInitChain.validators)
  return validators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::ValidatorUpdate >*
RequestInitChain::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:tm.RequestInitChain.validators)
  return &validators_;
}
inline const ::tm::ValidatorUpdate& RequestInitChain::_internal_validators(int index) const {
  return validators_.Get(index);
}
inline const ::tm::ValidatorUpdate& RequestInitChain::validators(int index) const {
  // @@protoc_insertion_point(field_get:tm.RequestInitChain.validators)
  return _internal_validators(index);
}
inline ::tm::ValidatorUpdate* RequestInitChain::_internal_add_validators() {
  return validators_.Add();
}
inline ::tm::ValidatorUpdate* RequestInitChain::add_validators() {
  // @@protoc_insertion_point(field_add:tm.RequestInitChain.validators)
  return _internal_add_validators();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::ValidatorUpdate >&
RequestInitChain::validators() const {
  // @@protoc_insertion_point(field_list:tm.RequestInitChain.validators)
  return validators_;
}

// bytes app_state_bytes = 5 [json_name = "appStateBytes"];
inline void RequestInitChain::clear_app_state_bytes() {
  app_state_bytes_.ClearToEmpty();
}
inline const std::string& RequestInitChain::app_state_bytes() const {
  // @@protoc_insertion_point(field_get:tm.RequestInitChain.app_state_bytes)
  return _internal_app_state_bytes();
}
inline void RequestInitChain::set_app_state_bytes(const std::string& value) {
  _internal_set_app_state_bytes(value);
  // @@protoc_insertion_point(field_set:tm.RequestInitChain.app_state_bytes)
}
inline std::string* RequestInitChain::mutable_app_state_bytes() {
  // @@protoc_insertion_point(field_mutable:tm.RequestInitChain.app_state_bytes)
  return _internal_mutable_app_state_bytes();
}
inline const std::string& RequestInitChain::_internal_app_state_bytes() const {
  return app_state_bytes_.Get();
}
inline void RequestInitChain::_internal_set_app_state_bytes(const std::string& value) {

  app_state_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestInitChain::set_app_state_bytes(std::string&& value) {

  app_state_bytes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tm.RequestInitChain.app_state_bytes)
}
inline void RequestInitChain::set_app_state_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  app_state_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tm.RequestInitChain.app_state_bytes)
}
inline void RequestInitChain::set_app_state_bytes(const void* value,
    size_t size) {

  app_state_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tm.RequestInitChain.app_state_bytes)
}
inline std::string* RequestInitChain::_internal_mutable_app_state_bytes() {

  return app_state_bytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestInitChain::release_app_state_bytes() {
  // @@protoc_insertion_point(field_release:tm.RequestInitChain.app_state_bytes)
  return app_state_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestInitChain::set_allocated_app_state_bytes(std::string* app_state_bytes) {
  if (app_state_bytes != nullptr) {

  } else {

  }
  app_state_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_state_bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tm.RequestInitChain.app_state_bytes)
}

// int64 initial_height = 6 [json_name = "initialHeight"];
inline void RequestInitChain::clear_initial_height() {
  initial_height_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestInitChain::_internal_initial_height() const {
  return initial_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestInitChain::initial_height() const {
  // @@protoc_insertion_point(field_get:tm.RequestInitChain.initial_height)
  return _internal_initial_height();
}
inline void RequestInitChain::_internal_set_initial_height(::PROTOBUF_NAMESPACE_ID::int64 value) {

  initial_height_ = value;
}
inline void RequestInitChain::set_initial_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_initial_height(value);
  // @@protoc_insertion_point(field_set:tm.RequestInitChain.initial_height)
}

// -------------------------------------------------------------------

// RequestBeginBlock

// bytes hash = 1 [json_name = "hash"];
inline void RequestBeginBlock::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& RequestBeginBlock::hash() const {
  // @@protoc_insertion_point(field_get:tm.RequestBeginBlock.hash)
  return _internal_hash();
}
inline void RequestBeginBlock::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:tm.RequestBeginBlock.hash)
}
inline std::string* RequestBeginBlock::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:tm.RequestBeginBlock.hash)
  return _internal_mutable_hash();
}
inline const std::string& RequestBeginBlock::_internal_hash() const {
  return hash_.Get();
}
inline void RequestBeginBlock::_internal_set_hash(const std::string& value) {

  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestBeginBlock::set_hash(std::string&& value) {

  hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tm.RequestBeginBlock.hash)
}
inline void RequestBeginBlock::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tm.RequestBeginBlock.hash)
}
inline void RequestBeginBlock::set_hash(const void* value,
    size_t size) {

  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tm.RequestBeginBlock.hash)
}
inline std::string* RequestBeginBlock::_internal_mutable_hash() {

  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestBeginBlock::release_hash() {
  // @@protoc_insertion_point(field_release:tm.RequestBeginBlock.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestBeginBlock::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {

  } else {

  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tm.RequestBeginBlock.hash)
}

// .tm.Header header = 2 [json_name = "header"];
inline bool RequestBeginBlock::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RequestBeginBlock::has_header() const {
  return _internal_has_header();
}
inline void RequestBeginBlock::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::tm::Header& RequestBeginBlock::_internal_header() const {
  const ::tm::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::tm::Header&>(
      ::tm::_Header_default_instance_);
}
inline const ::tm::Header& RequestBeginBlock::header() const {
  // @@protoc_insertion_point(field_get:tm.RequestBeginBlock.header)
  return _internal_header();
}
inline void RequestBeginBlock::unsafe_arena_set_allocated_header(
    ::tm::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.RequestBeginBlock.header)
}
inline ::tm::Header* RequestBeginBlock::release_header() {

  ::tm::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tm::Header* RequestBeginBlock::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:tm.RequestBeginBlock.header)

  ::tm::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::tm::Header* RequestBeginBlock::_internal_mutable_header() {

  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::tm::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::tm::Header* RequestBeginBlock::mutable_header() {
  // @@protoc_insertion_point(field_mutable:tm.RequestBeginBlock.header)
  return _internal_mutable_header();
}
inline void RequestBeginBlock::set_allocated_header(::tm::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }

  } else {

  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tm.RequestBeginBlock.header)
}

// .tm.LastCommitInfo last_commit_info = 3 [json_name = "lastCommitInfo"];
inline bool RequestBeginBlock::_internal_has_last_commit_info() const {
  return this != internal_default_instance() && last_commit_info_ != nullptr;
}
inline bool RequestBeginBlock::has_last_commit_info() const {
  return _internal_has_last_commit_info();
}
inline void RequestBeginBlock::clear_last_commit_info() {
  if (GetArena() == nullptr && last_commit_info_ != nullptr) {
    delete last_commit_info_;
  }
  last_commit_info_ = nullptr;
}
inline const ::tm::LastCommitInfo& RequestBeginBlock::_internal_last_commit_info() const {
  const ::tm::LastCommitInfo* p = last_commit_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::tm::LastCommitInfo&>(
      ::tm::_LastCommitInfo_default_instance_);
}
inline const ::tm::LastCommitInfo& RequestBeginBlock::last_commit_info() const {
  // @@protoc_insertion_point(field_get:tm.RequestBeginBlock.last_commit_info)
  return _internal_last_commit_info();
}
inline void RequestBeginBlock::unsafe_arena_set_allocated_last_commit_info(
    ::tm::LastCommitInfo* last_commit_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_commit_info_);
  }
  last_commit_info_ = last_commit_info;
  if (last_commit_info) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.RequestBeginBlock.last_commit_info)
}
inline ::tm::LastCommitInfo* RequestBeginBlock::release_last_commit_info() {

  ::tm::LastCommitInfo* temp = last_commit_info_;
  last_commit_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tm::LastCommitInfo* RequestBeginBlock::unsafe_arena_release_last_commit_info() {
  // @@protoc_insertion_point(field_release:tm.RequestBeginBlock.last_commit_info)

  ::tm::LastCommitInfo* temp = last_commit_info_;
  last_commit_info_ = nullptr;
  return temp;
}
inline ::tm::LastCommitInfo* RequestBeginBlock::_internal_mutable_last_commit_info() {

  if (last_commit_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::tm::LastCommitInfo>(GetArena());
    last_commit_info_ = p;
  }
  return last_commit_info_;
}
inline ::tm::LastCommitInfo* RequestBeginBlock::mutable_last_commit_info() {
  // @@protoc_insertion_point(field_mutable:tm.RequestBeginBlock.last_commit_info)
  return _internal_mutable_last_commit_info();
}
inline void RequestBeginBlock::set_allocated_last_commit_info(::tm::LastCommitInfo* last_commit_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete last_commit_info_;
  }
  if (last_commit_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(last_commit_info);
    if (message_arena != submessage_arena) {
      last_commit_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_commit_info, submessage_arena);
    }

  } else {

  }
  last_commit_info_ = last_commit_info;
  // @@protoc_insertion_point(field_set_allocated:tm.RequestBeginBlock.last_commit_info)
}

// repeated .tm.Evidence byzantine_validators = 4 [json_name = "byzantineValidators"];
inline int RequestBeginBlock::_internal_byzantine_validators_size() const {
  return byzantine_validators_.size();
}
inline int RequestBeginBlock::byzantine_validators_size() const {
  return _internal_byzantine_validators_size();
}
inline void RequestBeginBlock::clear_byzantine_validators() {
  byzantine_validators_.Clear();
}
inline ::tm::Evidence* RequestBeginBlock::mutable_byzantine_validators(int index) {
  // @@protoc_insertion_point(field_mutable:tm.RequestBeginBlock.byzantine_validators)
  return byzantine_validators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::Evidence >*
RequestBeginBlock::mutable_byzantine_validators() {
  // @@protoc_insertion_point(field_mutable_list:tm.RequestBeginBlock.byzantine_validators)
  return &byzantine_validators_;
}
inline const ::tm::Evidence& RequestBeginBlock::_internal_byzantine_validators(int index) const {
  return byzantine_validators_.Get(index);
}
inline const ::tm::Evidence& RequestBeginBlock::byzantine_validators(int index) const {
  // @@protoc_insertion_point(field_get:tm.RequestBeginBlock.byzantine_validators)
  return _internal_byzantine_validators(index);
}
inline ::tm::Evidence* RequestBeginBlock::_internal_add_byzantine_validators() {
  return byzantine_validators_.Add();
}
inline ::tm::Evidence* RequestBeginBlock::add_byzantine_validators() {
  // @@protoc_insertion_point(field_add:tm.RequestBeginBlock.byzantine_validators)
  return _internal_add_byzantine_validators();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::Evidence >&
RequestBeginBlock::byzantine_validators() const {
  // @@protoc_insertion_point(field_list:tm.RequestBeginBlock.byzantine_validators)
  return byzantine_validators_;
}

// -------------------------------------------------------------------

// RequestDeliverTx

// bytes tx = 1 [json_name = "tx"];
inline void RequestDeliverTx::clear_tx() {
  tx_.ClearToEmpty();
}
inline const std::string& RequestDeliverTx::tx() const {
  // @@protoc_insertion_point(field_get:tm.RequestDeliverTx.tx)
  return _internal_tx();
}
inline void RequestDeliverTx::set_tx(const std::string& value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:tm.RequestDeliverTx.tx)
}
inline std::string* RequestDeliverTx::mutable_tx() {
  // @@protoc_insertion_point(field_mutable:tm.RequestDeliverTx.tx)
  return _internal_mutable_tx();
}
inline const std::string& RequestDeliverTx::_internal_tx() const {
  return tx_.Get();
}
inline void RequestDeliverTx::_internal_set_tx(const std::string& value) {

  tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestDeliverTx::set_tx(std::string&& value) {

  tx_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tm.RequestDeliverTx.tx)
}
inline void RequestDeliverTx::set_tx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tm.RequestDeliverTx.tx)
}
inline void RequestDeliverTx::set_tx(const void* value,
    size_t size) {

  tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tm.RequestDeliverTx.tx)
}
inline std::string* RequestDeliverTx::_internal_mutable_tx() {

  return tx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestDeliverTx::release_tx() {
  // @@protoc_insertion_point(field_release:tm.RequestDeliverTx.tx)
  return tx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestDeliverTx::set_allocated_tx(std::string* tx) {
  if (tx != nullptr) {

  } else {

  }
  tx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tm.RequestDeliverTx.tx)
}

// -------------------------------------------------------------------

// ResponseInitChain

// .tm.ConsensusParams consensus_params = 1 [json_name = "consensusParams"];
inline bool ResponseInitChain::_internal_has_consensus_params() const {
  return this != internal_default_instance() && consensus_params_ != nullptr;
}
inline bool ResponseInitChain::has_consensus_params() const {
  return _internal_has_consensus_params();
}
inline void ResponseInitChain::clear_consensus_params() {
  if (GetArena() == nullptr && consensus_params_ != nullptr) {
    delete consensus_params_;
  }
  consensus_params_ = nullptr;
}
inline const ::tm::ConsensusParams& ResponseInitChain::_internal_consensus_params() const {
  const ::tm::ConsensusParams* p = consensus_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::tm::ConsensusParams&>(
      ::tm::_ConsensusParams_default_instance_);
}
inline const ::tm::ConsensusParams& ResponseInitChain::consensus_params() const {
  // @@protoc_insertion_point(field_get:tm.ResponseInitChain.consensus_params)
  return _internal_consensus_params();
}
inline void ResponseInitChain::unsafe_arena_set_allocated_consensus_params(
    ::tm::ConsensusParams* consensus_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_params_);
  }
  consensus_params_ = consensus_params;
  if (consensus_params) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.ResponseInitChain.consensus_params)
}
inline ::tm::ConsensusParams* ResponseInitChain::release_consensus_params() {

  ::tm::ConsensusParams* temp = consensus_params_;
  consensus_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tm::ConsensusParams* ResponseInitChain::unsafe_arena_release_consensus_params() {
  // @@protoc_insertion_point(field_release:tm.ResponseInitChain.consensus_params)

  ::tm::ConsensusParams* temp = consensus_params_;
  consensus_params_ = nullptr;
  return temp;
}
inline ::tm::ConsensusParams* ResponseInitChain::_internal_mutable_consensus_params() {

  if (consensus_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::tm::ConsensusParams>(GetArena());
    consensus_params_ = p;
  }
  return consensus_params_;
}
inline ::tm::ConsensusParams* ResponseInitChain::mutable_consensus_params() {
  // @@protoc_insertion_point(field_mutable:tm.ResponseInitChain.consensus_params)
  return _internal_mutable_consensus_params();
}
inline void ResponseInitChain::set_allocated_consensus_params(::tm::ConsensusParams* consensus_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete consensus_params_;
  }
  if (consensus_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(consensus_params);
    if (message_arena != submessage_arena) {
      consensus_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus_params, submessage_arena);
    }

  } else {

  }
  consensus_params_ = consensus_params;
  // @@protoc_insertion_point(field_set_allocated:tm.ResponseInitChain.consensus_params)
}

// repeated .tm.ValidatorUpdate validators = 2 [json_name = "validators"];
inline int ResponseInitChain::_internal_validators_size() const {
  return validators_.size();
}
inline int ResponseInitChain::validators_size() const {
  return _internal_validators_size();
}
inline void ResponseInitChain::clear_validators() {
  validators_.Clear();
}
inline ::tm::ValidatorUpdate* ResponseInitChain::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:tm.ResponseInitChain.validators)
  return validators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::ValidatorUpdate >*
ResponseInitChain::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:tm.ResponseInitChain.validators)
  return &validators_;
}
inline const ::tm::ValidatorUpdate& ResponseInitChain::_internal_validators(int index) const {
  return validators_.Get(index);
}
inline const ::tm::ValidatorUpdate& ResponseInitChain::validators(int index) const {
  // @@protoc_insertion_point(field_get:tm.ResponseInitChain.validators)
  return _internal_validators(index);
}
inline ::tm::ValidatorUpdate* ResponseInitChain::_internal_add_validators() {
  return validators_.Add();
}
inline ::tm::ValidatorUpdate* ResponseInitChain::add_validators() {
  // @@protoc_insertion_point(field_add:tm.ResponseInitChain.validators)
  return _internal_add_validators();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::ValidatorUpdate >&
ResponseInitChain::validators() const {
  // @@protoc_insertion_point(field_list:tm.ResponseInitChain.validators)
  return validators_;
}

// bytes app_hash = 3 [json_name = "appHash"];
inline void ResponseInitChain::clear_app_hash() {
  app_hash_.ClearToEmpty();
}
inline const std::string& ResponseInitChain::app_hash() const {
  // @@protoc_insertion_point(field_get:tm.ResponseInitChain.app_hash)
  return _internal_app_hash();
}
inline void ResponseInitChain::set_app_hash(const std::string& value) {
  _internal_set_app_hash(value);
  // @@protoc_insertion_point(field_set:tm.ResponseInitChain.app_hash)
}
inline std::string* ResponseInitChain::mutable_app_hash() {
  // @@protoc_insertion_point(field_mutable:tm.ResponseInitChain.app_hash)
  return _internal_mutable_app_hash();
}
inline const std::string& ResponseInitChain::_internal_app_hash() const {
  return app_hash_.Get();
}
inline void ResponseInitChain::_internal_set_app_hash(const std::string& value) {

  app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResponseInitChain::set_app_hash(std::string&& value) {

  app_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tm.ResponseInitChain.app_hash)
}
inline void ResponseInitChain::set_app_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tm.ResponseInitChain.app_hash)
}
inline void ResponseInitChain::set_app_hash(const void* value,
    size_t size) {

  app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tm.ResponseInitChain.app_hash)
}
inline std::string* ResponseInitChain::_internal_mutable_app_hash() {

  return app_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResponseInitChain::release_app_hash() {
  // @@protoc_insertion_point(field_release:tm.ResponseInitChain.app_hash)
  return app_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponseInitChain::set_allocated_app_hash(std::string* app_hash) {
  if (app_hash != nullptr) {

  } else {

  }
  app_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tm.ResponseInitChain.app_hash)
}

// -------------------------------------------------------------------

// ResponseBeginBlock

// repeated .tm.Event events = 1 [json_name = "events"];
inline int ResponseBeginBlock::_internal_events_size() const {
  return events_.size();
}
inline int ResponseBeginBlock::events_size() const {
  return _internal_events_size();
}
inline void ResponseBeginBlock::clear_events() {
  events_.Clear();
}
inline ::tm::Event* ResponseBeginBlock::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:tm.ResponseBeginBlock.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::Event >*
ResponseBeginBlock::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:tm.ResponseBeginBlock.events)
  return &events_;
}
inline const ::tm::Event& ResponseBeginBlock::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::tm::Event& ResponseBeginBlock::events(int index) const {
  // @@protoc_insertion_point(field_get:tm.ResponseBeginBlock.events)
  return _internal_events(index);
}
inline ::tm::Event* ResponseBeginBlock::_internal_add_events() {
  return events_.Add();
}
inline ::tm::Event* ResponseBeginBlock::add_events() {
  // @@protoc_insertion_point(field_add:tm.ResponseBeginBlock.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::Event >&
ResponseBeginBlock::events() const {
  // @@protoc_insertion_point(field_list:tm.ResponseBeginBlock.events)
  return events_;
}

// -------------------------------------------------------------------

// ResponseDeliverTx

// uint32 code = 1 [json_name = "code"];
inline void ResponseDeliverTx::clear_code() {
  code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResponseDeliverTx::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResponseDeliverTx::code() const {
  // @@protoc_insertion_point(field_get:tm.ResponseDeliverTx.code)
  return _internal_code();
}
inline void ResponseDeliverTx::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  code_ = value;
}
inline void ResponseDeliverTx::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:tm.ResponseDeliverTx.code)
}

// bytes data = 2 [json_name = "data"];
inline void ResponseDeliverTx::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ResponseDeliverTx::data() const {
  // @@protoc_insertion_point(field_get:tm.ResponseDeliverTx.data)
  return _internal_data();
}
inline void ResponseDeliverTx::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:tm.ResponseDeliverTx.data)
}
inline std::string* ResponseDeliverTx::mutable_data() {
  // @@protoc_insertion_point(field_mutable:tm.ResponseDeliverTx.data)
  return _internal_mutable_data();
}
inline const std::string& ResponseDeliverTx::_internal_data() const {
  return data_.Get();
}
inline void ResponseDeliverTx::_internal_set_data(const std::string& value) {

  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResponseDeliverTx::set_data(std::string&& value) {

  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tm.ResponseDeliverTx.data)
}
inline void ResponseDeliverTx::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tm.ResponseDeliverTx.data)
}
inline void ResponseDeliverTx::set_data(const void* value,
    size_t size) {

  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tm.ResponseDeliverTx.data)
}
inline std::string* ResponseDeliverTx::_internal_mutable_data() {

  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResponseDeliverTx::release_data() {
  // @@protoc_insertion_point(field_release:tm.ResponseDeliverTx.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponseDeliverTx::set_allocated_data(std::string* data) {
  if (data != nullptr) {

  } else {

  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tm.ResponseDeliverTx.data)
}

// string log = 3 [json_name = "log"];
inline void ResponseDeliverTx::clear_log() {
  log_.ClearToEmpty();
}
inline const std::string& ResponseDeliverTx::log() const {
  // @@protoc_insertion_point(field_get:tm.ResponseDeliverTx.log)
  return _internal_log();
}
inline void ResponseDeliverTx::set_log(const std::string& value) {
  _internal_set_log(value);
  // @@protoc_insertion_point(field_set:tm.ResponseDeliverTx.log)
}
inline std::string* ResponseDeliverTx::mutable_log() {
  // @@protoc_insertion_point(field_mutable:tm.ResponseDeliverTx.log)
  return _internal_mutable_log();
}
inline const std::string& ResponseDeliverTx::_internal_log() const {
  return log_.Get();
}
inline void ResponseDeliverTx::_internal_set_log(const std::string& value) {

  log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResponseDeliverTx::set_log(std::string&& value) {

  log_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tm.ResponseDeliverTx.log)
}
inline void ResponseDeliverTx::set_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tm.ResponseDeliverTx.log)
}
inline void ResponseDeliverTx::set_log(const char* value,
    size_t size) {

  log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tm.ResponseDeliverTx.log)
}
inline std::string* ResponseDeliverTx::_internal_mutable_log() {

  return log_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResponseDeliverTx::release_log() {
  // @@protoc_insertion_point(field_release:tm.ResponseDeliverTx.log)
  return log_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponseDeliverTx::set_allocated_log(std::string* log) {
  if (log != nullptr) {

  } else {

  }
  log_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tm.ResponseDeliverTx.log)
}

// string info = 4 [json_name = "info"];
inline void ResponseDeliverTx::clear_info() {
  info_.ClearToEmpty();
}
inline const std::string& ResponseDeliverTx::info() const {
  // @@protoc_insertion_point(field_get:tm.ResponseDeliverTx.info)
  return _internal_info();
}
inline void ResponseDeliverTx::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:tm.ResponseDeliverTx.info)
}
inline std::string* ResponseDeliverTx::mutable_info() {
  // @@protoc_insertion_point(field_mutable:tm.ResponseDeliverTx.info)
  return _internal_mutable_info();
}
inline const std::string& ResponseDeliverTx::_internal_info() const {
  return info_.Get();
}
inline void ResponseDeliverTx::_internal_set_info(const std::string& value) {

  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResponseDeliverTx::set_info(std::string&& value) {

  info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tm.ResponseDeliverTx.info)
}
inline void ResponseDeliverTx::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tm.ResponseDeliverTx.info)
}
inline void ResponseDeliverTx::set_info(const char* value,
    size_t size) {

  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tm.ResponseDeliverTx.info)
}
inline std::string* ResponseDeliverTx::_internal_mutable_info() {

  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResponseDeliverTx::release_info() {
  // @@protoc_insertion_point(field_release:tm.ResponseDeliverTx.info)
  return info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponseDeliverTx::set_allocated_info(std::string* info) {
  if (info != nullptr) {

  } else {

  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tm.ResponseDeliverTx.info)
}

// int64 gas_wanted = 5 [json_name = "gasWanted"];
inline void ResponseDeliverTx::clear_gas_wanted() {
  gas_wanted_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseDeliverTx::_internal_gas_wanted() const {
  return gas_wanted_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseDeliverTx::gas_wanted() const {
  // @@protoc_insertion_point(field_get:tm.ResponseDeliverTx.gas_wanted)
  return _internal_gas_wanted();
}
inline void ResponseDeliverTx::_internal_set_gas_wanted(::PROTOBUF_NAMESPACE_ID::int64 value) {

  gas_wanted_ = value;
}
inline void ResponseDeliverTx::set_gas_wanted(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gas_wanted(value);
  // @@protoc_insertion_point(field_set:tm.ResponseDeliverTx.gas_wanted)
}

// int64 gas_used = 6 [json_name = "gasUsed"];
inline void ResponseDeliverTx::clear_gas_used() {
  gas_used_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseDeliverTx::_internal_gas_used() const {
  return gas_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseDeliverTx::gas_used() const {
  // @@protoc_insertion_point(field_get:tm.ResponseDeliverTx.gas_used)
  return _internal_gas_used();
}
inline void ResponseDeliverTx::_internal_set_gas_used(::PROTOBUF_NAMESPACE_ID::int64 value) {

  gas_used_ = value;
}
inline void ResponseDeliverTx::set_gas_used(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gas_used(value);
  // @@protoc_insertion_point(field_set:tm.ResponseDeliverTx.gas_used)
}

// repeated .tm.Event events = 7 [json_name = "events"];
inline int ResponseDeliverTx::_internal_events_size() const {
  return events_.size();
}
inline int ResponseDeliverTx::events_size() const {
  return _internal_events_size();
}
inline void ResponseDeliverTx::clear_events() {
  events_.Clear();
}
inline ::tm::Event* ResponseDeliverTx::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:tm.ResponseDeliverTx.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::Event >*
ResponseDeliverTx::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:tm.ResponseDeliverTx.events)
  return &events_;
}
inline const ::tm::Event& ResponseDeliverTx::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::tm::Event& ResponseDeliverTx::events(int index) const {
  // @@protoc_insertion_point(field_get:tm.ResponseDeliverTx.events)
  return _internal_events(index);
}
inline ::tm::Event* ResponseDeliverTx::_internal_add_events() {
  return events_.Add();
}
inline ::tm::Event* ResponseDeliverTx::add_events() {
  // @@protoc_insertion_point(field_add:tm.ResponseDeliverTx.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::Event >&
ResponseDeliverTx::events() const {
  // @@protoc_insertion_point(field_list:tm.ResponseDeliverTx.events)
  return events_;
}

// string codespace = 8 [json_name = "codespace"];
inline void ResponseDeliverTx::clear_codespace() {
  codespace_.ClearToEmpty();
}
inline const std::string& ResponseDeliverTx::codespace() const {
  // @@protoc_insertion_point(field_get:tm.ResponseDeliverTx.codespace)
  return _internal_codespace();
}
inline void ResponseDeliverTx::set_codespace(const std::string& value) {
  _internal_set_codespace(value);
  // @@protoc_insertion_point(field_set:tm.ResponseDeliverTx.codespace)
}
inline std::string* ResponseDeliverTx::mutable_codespace() {
  // @@protoc_insertion_point(field_mutable:tm.ResponseDeliverTx.codespace)
  return _internal_mutable_codespace();
}
inline const std::string& ResponseDeliverTx::_internal_codespace() const {
  return codespace_.Get();
}
inline void ResponseDeliverTx::_internal_set_codespace(const std::string& value) {

  codespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResponseDeliverTx::set_codespace(std::string&& value) {

  codespace_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tm.ResponseDeliverTx.codespace)
}
inline void ResponseDeliverTx::set_codespace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  codespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tm.ResponseDeliverTx.codespace)
}
inline void ResponseDeliverTx::set_codespace(const char* value,
    size_t size) {

  codespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tm.ResponseDeliverTx.codespace)
}
inline std::string* ResponseDeliverTx::_internal_mutable_codespace() {

  return codespace_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResponseDeliverTx::release_codespace() {
  // @@protoc_insertion_point(field_release:tm.ResponseDeliverTx.codespace)
  return codespace_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponseDeliverTx::set_allocated_codespace(std::string* codespace) {
  if (codespace != nullptr) {

  } else {

  }
  codespace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codespace,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tm.ResponseDeliverTx.codespace)
}

// -------------------------------------------------------------------

// Event

// string type = 1 [json_name = "type"];
inline void Event::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Event::type() const {
  // @@protoc_insertion_point(field_get:tm.Event.type)
  return _internal_type();
}
inline void Event::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tm.Event.type)
}
inline std::string* Event::mutable_type() {
  // @@protoc_insertion_point(field_mutable:tm.Event.type)
  return _internal_mutable_type();
}
inline const std::string& Event::_internal_type() const {
  return type_.Get();
}
inline void Event::_internal_set_type(const std::string& value) {

  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Event::set_type(std::string&& value) {

  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tm.Event.type)
}
inline void Event::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tm.Event.type)
}
inline void Event::set_type(const char* value,
    size_t size) {

  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tm.Event.type)
}
inline std::string* Event::_internal_mutable_type() {

  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Event::release_type() {
  // @@protoc_insertion_point(field_release:tm.Event.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event::set_allocated_type(std::string* type) {
  if (type != nullptr) {

  } else {

  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tm.Event.type)
}

// repeated .tm.EventAttribute attributes = 2 [json_name = "attributes"];
inline int Event::_internal_attributes_size() const {
  return attributes_.size();
}
inline int Event::attributes_size() const {
  return _internal_attributes_size();
}
inline void Event::clear_attributes() {
  attributes_.Clear();
}
inline ::tm::EventAttribute* Event::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:tm.Event.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::EventAttribute >*
Event::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:tm.Event.attributes)
  return &attributes_;
}
inline const ::tm::EventAttribute& Event::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::tm::EventAttribute& Event::attributes(int index) const {
  // @@protoc_insertion_point(field_get:tm.Event.attributes)
  return _internal_attributes(index);
}
inline ::tm::EventAttribute* Event::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::tm::EventAttribute* Event::add_attributes() {
  // @@protoc_insertion_point(field_add:tm.Event.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::EventAttribute >&
Event::attributes() const {
  // @@protoc_insertion_point(field_list:tm.Event.attributes)
  return attributes_;
}

// -------------------------------------------------------------------

// EventAttribute

// bytes key = 1 [json_name = "key"];
inline void EventAttribute::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& EventAttribute::key() const {
  // @@protoc_insertion_point(field_get:tm.EventAttribute.key)
  return _internal_key();
}
inline void EventAttribute::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:tm.EventAttribute.key)
}
inline std::string* EventAttribute::mutable_key() {
  // @@protoc_insertion_point(field_mutable:tm.EventAttribute.key)
  return _internal_mutable_key();
}
inline const std::string& EventAttribute::_internal_key() const {
  return key_.Get();
}
inline void EventAttribute::_internal_set_key(const std::string& value) {

  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EventAttribute::set_key(std::string&& value) {

  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tm.EventAttribute.key)
}
inline void EventAttribute::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tm.EventAttribute.key)
}
inline void EventAttribute::set_key(const void* value,
    size_t size) {

  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tm.EventAttribute.key)
}
inline std::string* EventAttribute::_internal_mutable_key() {

  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EventAttribute::release_key() {
  // @@protoc_insertion_point(field_release:tm.EventAttribute.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventAttribute::set_allocated_key(std::string* key) {
  if (key != nullptr) {

  } else {

  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tm.EventAttribute.key)
}

// bytes value = 2 [json_name = "value"];
inline void EventAttribute::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& EventAttribute::value() const {
  // @@protoc_insertion_point(field_get:tm.EventAttribute.value)
  return _internal_value();
}
inline void EventAttribute::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:tm.EventAttribute.value)
}
inline std::string* EventAttribute::mutable_value() {
  // @@protoc_insertion_point(field_mutable:tm.EventAttribute.value)
  return _internal_mutable_value();
}
inline const std::string& EventAttribute::_internal_value() const {
  return value_.Get();
}
inline void EventAttribute::_internal_set_value(const std::string& value) {

  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EventAttribute::set_value(std::string&& value) {

  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tm.EventAttribute.value)
}
inline void EventAttribute::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tm.EventAttribute.value)
}
inline void EventAttribute::set_value(const void* value,
    size_t size) {

  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tm.EventAttribute.value)
}
inline std::string* EventAttribute::_internal_mutable_value() {

  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EventAttribute::release_value() {
  // @@protoc_insertion_point(field_release:tm.EventAttribute.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventAttribute::set_allocated_value(std::string* value) {
  if (value != nullptr) {

  } else {

  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tm.EventAttribute.value)
}

// bool index = 3 [json_name = "index"];
inline void EventAttribute::clear_index() {
  index_ = false;
}
inline bool EventAttribute::_internal_index() const {
  return index_;
}
inline bool EventAttribute::index() const {
  // @@protoc_insertion_point(field_get:tm.EventAttribute.index)
  return _internal_index();
}
inline void EventAttribute::_internal_set_index(bool value) {

  index_ = value;
}
inline void EventAttribute::set_index(bool value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tm.EventAttribute.index)
}

// -------------------------------------------------------------------

// ValidatorUpdate

// .tm.PublicKey pub_key = 1 [json_name = "pubKey"];
inline bool ValidatorUpdate::_internal_has_pub_key() const {
  return this != internal_default_instance() && pub_key_ != nullptr;
}
inline bool ValidatorUpdate::has_pub_key() const {
  return _internal_has_pub_key();
}
inline void ValidatorUpdate::clear_pub_key() {
  if (GetArena() == nullptr && pub_key_ != nullptr) {
    delete pub_key_;
  }
  pub_key_ = nullptr;
}
inline const ::tm::PublicKey& ValidatorUpdate::_internal_pub_key() const {
  const ::tm::PublicKey* p = pub_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::tm::PublicKey&>(
      ::tm::_PublicKey_default_instance_);
}
inline const ::tm::PublicKey& ValidatorUpdate::pub_key() const {
  // @@protoc_insertion_point(field_get:tm.ValidatorUpdate.pub_key)
  return _internal_pub_key();
}
inline void ValidatorUpdate::unsafe_arena_set_allocated_pub_key(
    ::tm::PublicKey* pub_key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub_key_);
  }
  pub_key_ = pub_key;
  if (pub_key) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.ValidatorUpdate.pub_key)
}
inline ::tm::PublicKey* ValidatorUpdate::release_pub_key() {

  ::tm::PublicKey* temp = pub_key_;
  pub_key_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tm::PublicKey* ValidatorUpdate::unsafe_arena_release_pub_key() {
  // @@protoc_insertion_point(field_release:tm.ValidatorUpdate.pub_key)

  ::tm::PublicKey* temp = pub_key_;
  pub_key_ = nullptr;
  return temp;
}
inline ::tm::PublicKey* ValidatorUpdate::_internal_mutable_pub_key() {

  if (pub_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::tm::PublicKey>(GetArena());
    pub_key_ = p;
  }
  return pub_key_;
}
inline ::tm::PublicKey* ValidatorUpdate::mutable_pub_key() {
  // @@protoc_insertion_point(field_mutable:tm.ValidatorUpdate.pub_key)
  return _internal_mutable_pub_key();
}
inline void ValidatorUpdate::set_allocated_pub_key(::tm::PublicKey* pub_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pub_key_;
  }
  if (pub_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pub_key);
    if (message_arena != submessage_arena) {
      pub_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pub_key, submessage_arena);
    }

  } else {

  }
  pub_key_ = pub_key;
  // @@protoc_insertion_point(field_set_allocated:tm.ValidatorUpdate.pub_key)
}

// int64 power = 2 [json_name = "power"];
inline void ValidatorUpdate::clear_power() {
  power_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValidatorUpdate::_internal_power() const {
  return power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValidatorUpdate::power() const {
  // @@protoc_insertion_point(field_get:tm.ValidatorUpdate.power)
  return _internal_power();
}
inline void ValidatorUpdate::_internal_set_power(::PROTOBUF_NAMESPACE_ID::int64 value) {

  power_ = value;
}
inline void ValidatorUpdate::set_power(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:tm.ValidatorUpdate.power)
}

// -------------------------------------------------------------------

// ConsensusParams

// .tm.BlockParams block = 1 [json_name = "block"];
inline bool ConsensusParams::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool ConsensusParams::has_block() const {
  return _internal_has_block();
}
inline void ConsensusParams::clear_block() {
  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::tm::BlockParams& ConsensusParams::_internal_block() const {
  const ::tm::BlockParams* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tm::BlockParams&>(
      ::tm::_BlockParams_default_instance_);
}
inline const ::tm::BlockParams& ConsensusParams::block() const {
  // @@protoc_insertion_point(field_get:tm.ConsensusParams.block)
  return _internal_block();
}
inline void ConsensusParams::unsafe_arena_set_allocated_block(
    ::tm::BlockParams* block) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.ConsensusParams.block)
}
inline ::tm::BlockParams* ConsensusParams::release_block() {

  ::tm::BlockParams* temp = block_;
  block_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tm::BlockParams* ConsensusParams::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:tm.ConsensusParams.block)

  ::tm::BlockParams* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::tm::BlockParams* ConsensusParams::_internal_mutable_block() {

  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tm::BlockParams>(GetArena());
    block_ = p;
  }
  return block_;
}
inline ::tm::BlockParams* ConsensusParams::mutable_block() {
  // @@protoc_insertion_point(field_mutable:tm.ConsensusParams.block)
  return _internal_mutable_block();
}
inline void ConsensusParams::set_allocated_block(::tm::BlockParams* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }

  } else {

  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:tm.ConsensusParams.block)
}

// .tm.EvidenceParams evidence = 2 [json_name = "evidence"];
inline bool ConsensusParams::_internal_has_evidence() const {
  return this != internal_default_instance() && evidence_ != nullptr;
}
inline bool ConsensusParams::has_evidence() const {
  return _internal_has_evidence();
}
inline void ConsensusParams::clear_evidence() {
  if (GetArena() == nullptr && evidence_ != nullptr) {
    delete evidence_;
  }
  evidence_ = nullptr;
}
inline const ::tm::EvidenceParams& ConsensusParams::_internal_evidence() const {
  const ::tm::EvidenceParams* p = evidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::tm::EvidenceParams&>(
      ::tm::_EvidenceParams_default_instance_);
}
inline const ::tm::EvidenceParams& ConsensusParams::evidence() const {
  // @@protoc_insertion_point(field_get:tm.ConsensusParams.evidence)
  return _internal_evidence();
}
inline void ConsensusParams::unsafe_arena_set_allocated_evidence(
    ::tm::EvidenceParams* evidence) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evidence_);
  }
  evidence_ = evidence;
  if (evidence) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.ConsensusParams.evidence)
}
inline ::tm::EvidenceParams* ConsensusParams::release_evidence() {

  ::tm::EvidenceParams* temp = evidence_;
  evidence_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tm::EvidenceParams* ConsensusParams::unsafe_arena_release_evidence() {
  // @@protoc_insertion_point(field_release:tm.ConsensusParams.evidence)

  ::tm::EvidenceParams* temp = evidence_;
  evidence_ = nullptr;
  return temp;
}
inline ::tm::EvidenceParams* ConsensusParams::_internal_mutable_evidence() {

  if (evidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::tm::EvidenceParams>(GetArena());
    evidence_ = p;
  }
  return evidence_;
}
inline ::tm::EvidenceParams* ConsensusParams::mutable_evidence() {
  // @@protoc_insertion_point(field_mutable:tm.ConsensusParams.evidence)
  return _internal_mutable_evidence();
}
inline void ConsensusParams::set_allocated_evidence(::tm::EvidenceParams* evidence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete evidence_;
  }
  if (evidence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(evidence);
    if (message_arena != submessage_arena) {
      evidence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, evidence, submessage_arena);
    }

  } else {

  }
  evidence_ = evidence;
  // @@protoc_insertion_point(field_set_allocated:tm.ConsensusParams.evidence)
}

// .tm.ValidatorParams validator = 3 [json_name = "validator"];
inline bool ConsensusParams::_internal_has_validator() const {
  return this != internal_default_instance() && validator_ != nullptr;
}
inline bool ConsensusParams::has_validator() const {
  return _internal_has_validator();
}
inline void ConsensusParams::clear_validator() {
  if (GetArena() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
}
inline const ::tm::ValidatorParams& ConsensusParams::_internal_validator() const {
  const ::tm::ValidatorParams* p = validator_;
  return p != nullptr ? *p : reinterpret_cast<const ::tm::ValidatorParams&>(
      ::tm::_ValidatorParams_default_instance_);
}
inline const ::tm::ValidatorParams& ConsensusParams::validator() const {
  // @@protoc_insertion_point(field_get:tm.ConsensusParams.validator)
  return _internal_validator();
}
inline void ConsensusParams::unsafe_arena_set_allocated_validator(
    ::tm::ValidatorParams* validator) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validator_);
  }
  validator_ = validator;
  if (validator) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.ConsensusParams.validator)
}
inline ::tm::ValidatorParams* ConsensusParams::release_validator() {

  ::tm::ValidatorParams* temp = validator_;
  validator_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tm::ValidatorParams* ConsensusParams::unsafe_arena_release_validator() {
  // @@protoc_insertion_point(field_release:tm.ConsensusParams.validator)

  ::tm::ValidatorParams* temp = validator_;
  validator_ = nullptr;
  return temp;
}
inline ::tm::ValidatorParams* ConsensusParams::_internal_mutable_validator() {

  if (validator_ == nullptr) {
    auto* p = CreateMaybeMessage<::tm::ValidatorParams>(GetArena());
    validator_ = p;
  }
  return validator_;
}
inline ::tm::ValidatorParams* ConsensusParams::mutable_validator() {
  // @@protoc_insertion_point(field_mutable:tm.ConsensusParams.validator)
  return _internal_mutable_validator();
}
inline void ConsensusParams::set_allocated_validator(::tm::ValidatorParams* validator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete validator_;
  }
  if (validator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(validator);
    if (message_arena != submessage_arena) {
      validator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator, submessage_arena);
    }

  } else {

  }
  validator_ = validator;
  // @@protoc_insertion_point(field_set_allocated:tm.ConsensusParams.validator)
}

// .tm.VersionParams version = 4 [json_name = "version"];
inline bool ConsensusParams::_internal_has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline bool ConsensusParams::has_version() const {
  return _internal_has_version();
}
inline void ConsensusParams::clear_version() {
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
inline const ::tm::VersionParams& ConsensusParams::_internal_version() const {
  const ::tm::VersionParams* p = version_;
  return p != nullptr ? *p : reinterpret_cast<const ::tm::VersionParams&>(
      ::tm::_VersionParams_default_instance_);
}
inline const ::tm::VersionParams& ConsensusParams::version() const {
  // @@protoc_insertion_point(field_get:tm.ConsensusParams.version)
  return _internal_version();
}
inline void ConsensusParams::unsafe_arena_set_allocated_version(
    ::tm::VersionParams* version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  version_ = version;
  if (version) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.ConsensusParams.version)
}
inline ::tm::VersionParams* ConsensusParams::release_version() {

  ::tm::VersionParams* temp = version_;
  version_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tm::VersionParams* ConsensusParams::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:tm.ConsensusParams.version)

  ::tm::VersionParams* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::tm::VersionParams* ConsensusParams::_internal_mutable_version() {

  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::tm::VersionParams>(GetArena());
    version_ = p;
  }
  return version_;
}
inline ::tm::VersionParams* ConsensusParams::mutable_version() {
  // @@protoc_insertion_point(field_mutable:tm.ConsensusParams.version)
  return _internal_mutable_version();
}
inline void ConsensusParams::set_allocated_version(::tm::VersionParams* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }

  } else {

  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:tm.ConsensusParams.version)
}

// -------------------------------------------------------------------

// BlockParams

// int64 max_bytes = 1 [json_name = "maxBytes"];
inline void BlockParams::clear_max_bytes() {
  max_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockParams::_internal_max_bytes() const {
  return max_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockParams::max_bytes() const {
  // @@protoc_insertion_point(field_get:tm.BlockParams.max_bytes)
  return _internal_max_bytes();
}
inline void BlockParams::_internal_set_max_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {

  max_bytes_ = value;
}
inline void BlockParams::set_max_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_bytes(value);
  // @@protoc_insertion_point(field_set:tm.BlockParams.max_bytes)
}

// int64 max_gas = 2 [json_name = "maxGas"];
inline void BlockParams::clear_max_gas() {
  max_gas_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockParams::_internal_max_gas() const {
  return max_gas_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockParams::max_gas() const {
  // @@protoc_insertion_point(field_get:tm.BlockParams.max_gas)
  return _internal_max_gas();
}
inline void BlockParams::_internal_set_max_gas(::PROTOBUF_NAMESPACE_ID::int64 value) {

  max_gas_ = value;
}
inline void BlockParams::set_max_gas(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_gas(value);
  // @@protoc_insertion_point(field_set:tm.BlockParams.max_gas)
}

// -------------------------------------------------------------------

// Evidence

// .tm.EvidenceType type = 1 [json_name = "type"];
inline void Evidence::clear_type() {
  type_ = 0;
}
inline ::tm::EvidenceType Evidence::_internal_type() const {
  return static_cast< ::tm::EvidenceType >(type_);
}
inline ::tm::EvidenceType Evidence::type() const {
  // @@protoc_insertion_point(field_get:tm.Evidence.type)
  return _internal_type();
}
inline void Evidence::_internal_set_type(::tm::EvidenceType value) {

  type_ = value;
}
inline void Evidence::set_type(::tm::EvidenceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tm.Evidence.type)
}

// .tm.Validator validator = 2 [json_name = "validator"];
inline bool Evidence::_internal_has_validator() const {
  return this != internal_default_instance() && validator_ != nullptr;
}
inline bool Evidence::has_validator() const {
  return _internal_has_validator();
}
inline void Evidence::clear_validator() {
  if (GetArena() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
}
inline const ::tm::Validator& Evidence::_internal_validator() const {
  const ::tm::Validator* p = validator_;
  return p != nullptr ? *p : reinterpret_cast<const ::tm::Validator&>(
      ::tm::_Validator_default_instance_);
}
inline const ::tm::Validator& Evidence::validator() const {
  // @@protoc_insertion_point(field_get:tm.Evidence.validator)
  return _internal_validator();
}
inline void Evidence::unsafe_arena_set_allocated_validator(
    ::tm::Validator* validator) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validator_);
  }
  validator_ = validator;
  if (validator) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.Evidence.validator)
}
inline ::tm::Validator* Evidence::release_validator() {

  ::tm::Validator* temp = validator_;
  validator_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tm::Validator* Evidence::unsafe_arena_release_validator() {
  // @@protoc_insertion_point(field_release:tm.Evidence.validator)

  ::tm::Validator* temp = validator_;
  validator_ = nullptr;
  return temp;
}
inline ::tm::Validator* Evidence::_internal_mutable_validator() {

  if (validator_ == nullptr) {
    auto* p = CreateMaybeMessage<::tm::Validator>(GetArena());
    validator_ = p;
  }
  return validator_;
}
inline ::tm::Validator* Evidence::mutable_validator() {
  // @@protoc_insertion_point(field_mutable:tm.Evidence.validator)
  return _internal_mutable_validator();
}
inline void Evidence::set_allocated_validator(::tm::Validator* validator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete validator_;
  }
  if (validator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(validator);
    if (message_arena != submessage_arena) {
      validator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator, submessage_arena);
    }

  } else {

  }
  validator_ = validator;
  // @@protoc_insertion_point(field_set_allocated:tm.Evidence.validator)
}

// int64 height = 3 [json_name = "height"];
inline void Evidence::clear_height() {
  height_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Evidence::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Evidence::height() const {
  // @@protoc_insertion_point(field_get:tm.Evidence.height)
  return _internal_height();
}
inline void Evidence::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {

  height_ = value;
}
inline void Evidence::set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tm.Evidence.height)
}

// int64 time = 4 [json_name = "time"];
inline void Evidence::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Evidence::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Evidence::time() const {
  // @@protoc_insertion_point(field_get:tm.Evidence.time)
  return _internal_time();
}
inline void Evidence::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {

  time_ = value;
}
inline void Evidence::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:tm.Evidence.time)
}

// int64 total_voting_power = 5 [json_name = "totalVotingPower"];
inline void Evidence::clear_total_voting_power() {
  total_voting_power_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Evidence::_internal_total_voting_power() const {
  return total_voting_power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Evidence::total_voting_power() const {
  // @@protoc_insertion_point(field_get:tm.Evidence.total_voting_power)
  return _internal_total_voting_power();
}
inline void Evidence::_internal_set_total_voting_power(::PROTOBUF_NAMESPACE_ID::int64 value) {

  total_voting_power_ = value;
}
inline void Evidence::set_total_voting_power(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_voting_power(value);
  // @@protoc_insertion_point(field_set:tm.Evidence.total_voting_power)
}

// -------------------------------------------------------------------

// Validator

// bytes address = 1 [json_name = "address"];
inline void Validator::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& Validator::address() const {
  // @@protoc_insertion_point(field_get:tm.Validator.address)
  return _internal_address();
}
inline void Validator::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:tm.Validator.address)
}
inline std::string* Validator::mutable_address() {
  // @@protoc_insertion_point(field_mutable:tm.Validator.address)
  return _internal_mutable_address();
}
inline const std::string& Validator::_internal_address() const {
  return address_.Get();
}
inline void Validator::_internal_set_address(const std::string& value) {

  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Validator::set_address(std::string&& value) {

  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tm.Validator.address)
}
inline void Validator::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tm.Validator.address)
}
inline void Validator::set_address(const void* value,
    size_t size) {

  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tm.Validator.address)
}
inline std::string* Validator::_internal_mutable_address() {

  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Validator::release_address() {
  // @@protoc_insertion_point(field_release:tm.Validator.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Validator::set_allocated_address(std::string* address) {
  if (address != nullptr) {

  } else {

  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tm.Validator.address)
}

// int64 power = 3 [json_name = "power"];
inline void Validator::clear_power() {
  power_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Validator::_internal_power() const {
  return power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Validator::power() const {
  // @@protoc_insertion_point(field_get:tm.Validator.power)
  return _internal_power();
}
inline void Validator::_internal_set_power(::PROTOBUF_NAMESPACE_ID::int64 value) {

  power_ = value;
}
inline void Validator::set_power(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:tm.Validator.power)
}

// -------------------------------------------------------------------

// LastCommitInfo

// int32 round = 1 [json_name = "round"];
inline void LastCommitInfo::clear_round() {
  round_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LastCommitInfo::_internal_round() const {
  return round_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LastCommitInfo::round() const {
  // @@protoc_insertion_point(field_get:tm.LastCommitInfo.round)
  return _internal_round();
}
inline void LastCommitInfo::_internal_set_round(::PROTOBUF_NAMESPACE_ID::int32 value) {

  round_ = value;
}
inline void LastCommitInfo::set_round(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:tm.LastCommitInfo.round)
}

// repeated .tm.VoteInfo votes = 2 [json_name = "votes"];
inline int LastCommitInfo::_internal_votes_size() const {
  return votes_.size();
}
inline int LastCommitInfo::votes_size() const {
  return _internal_votes_size();
}
inline void LastCommitInfo::clear_votes() {
  votes_.Clear();
}
inline ::tm::VoteInfo* LastCommitInfo::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:tm.LastCommitInfo.votes)
  return votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::VoteInfo >*
LastCommitInfo::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:tm.LastCommitInfo.votes)
  return &votes_;
}
inline const ::tm::VoteInfo& LastCommitInfo::_internal_votes(int index) const {
  return votes_.Get(index);
}
inline const ::tm::VoteInfo& LastCommitInfo::votes(int index) const {
  // @@protoc_insertion_point(field_get:tm.LastCommitInfo.votes)
  return _internal_votes(index);
}
inline ::tm::VoteInfo* LastCommitInfo::_internal_add_votes() {
  return votes_.Add();
}
inline ::tm::VoteInfo* LastCommitInfo::add_votes() {
  // @@protoc_insertion_point(field_add:tm.LastCommitInfo.votes)
  return _internal_add_votes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tm::VoteInfo >&
LastCommitInfo::votes() const {
  // @@protoc_insertion_point(field_list:tm.LastCommitInfo.votes)
  return votes_;
}

// -------------------------------------------------------------------

// VoteInfo

// .tm.Validator validator = 1 [json_name = "validator"];
inline bool VoteInfo::_internal_has_validator() const {
  return this != internal_default_instance() && validator_ != nullptr;
}
inline bool VoteInfo::has_validator() const {
  return _internal_has_validator();
}
inline void VoteInfo::clear_validator() {
  if (GetArena() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
}
inline const ::tm::Validator& VoteInfo::_internal_validator() const {
  const ::tm::Validator* p = validator_;
  return p != nullptr ? *p : reinterpret_cast<const ::tm::Validator&>(
      ::tm::_Validator_default_instance_);
}
inline const ::tm::Validator& VoteInfo::validator() const {
  // @@protoc_insertion_point(field_get:tm.VoteInfo.validator)
  return _internal_validator();
}
inline void VoteInfo::unsafe_arena_set_allocated_validator(
    ::tm::Validator* validator) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validator_);
  }
  validator_ = validator;
  if (validator) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tm.VoteInfo.validator)
}
inline ::tm::Validator* VoteInfo::release_validator() {

  ::tm::Validator* temp = validator_;
  validator_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tm::Validator* VoteInfo::unsafe_arena_release_validator() {
  // @@protoc_insertion_point(field_release:tm.VoteInfo.validator)

  ::tm::Validator* temp = validator_;
  validator_ = nullptr;
  return temp;
}
inline ::tm::Validator* VoteInfo::_internal_mutable_validator() {

  if (validator_ == nullptr) {
    auto* p = CreateMaybeMessage<::tm::Validator>(GetArena());
    validator_ = p;
  }
  return validator_;
}
inline ::tm::Validator* VoteInfo::mutable_validator() {
  // @@protoc_insertion_point(field_mutable:tm.VoteInfo.validator)
  return _internal_mutable_validator();
}
inline void VoteInfo::set_allocated_validator(::tm::Validator* validator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete validator_;
  }
  if (validator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(validator);
    if (message_arena != submessage_arena) {
      validator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator, submessage_arena);
    }

  } else {

  }
  validator_ = validator;
  // @@protoc_insertion_point(field_set_allocated:tm.VoteInfo.validator)
}

// bool signed_last_block = 2 [json_name = "signedLastBlock"];
inline void VoteInfo::clear_signed_last_block() {
  signed_last_block_ = false;
}
inline bool VoteInfo::_internal_signed_last_block() const {
  return signed_last_block_;
}
inline bool VoteInfo::signed_last_block() const {
  // @@protoc_insertion_point(field_get:tm.VoteInfo.signed_last_block)
  return _internal_signed_last_block();
}
inline void VoteInfo::_internal_set_signed_last_block(bool value) {

  signed_last_block_ = value;
}
inline void VoteInfo::set_signed_last_block(bool value) {
  _internal_set_signed_last_block(value);
  // @@protoc_insertion_point(field_set:tm.VoteInfo.signed_last_block)
}

// -------------------------------------------------------------------

// EvidenceParams

// int64 max_age_num_blocks = 1 [json_name = "maxAgeNumBlocks"];
inline void EvidenceParams::clear_max_age_num_blocks() {
  max_age_num_blocks_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EvidenceParams::_internal_max_age_num_blocks() const {
  return max_age_num_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EvidenceParams::max_age_num_blocks() const {
  // @@protoc_insertion_point(field_get:tm.EvidenceParams.max_age_num_blocks)
  return _internal_max_age_num_blocks();
}
inline void EvidenceParams::_internal_set_max_age_num_blocks(::PROTOBUF_NAMESPACE_ID::int64 value) {

  max_age_num_blocks_ = value;
}
inline void EvidenceParams::set_max_age_num_blocks(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_age_num_blocks(value);
  // @@protoc_insertion_point(field_set:tm.EvidenceParams.max_age_num_blocks)
}

// int64 max_age_duration = 2 [json_name = "maxAgeDuration"];
inline void EvidenceParams::clear_max_age_duration() {
  max_age_duration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EvidenceParams::_internal_max_age_duration() const {
  return max_age_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EvidenceParams::max_age_duration() const {
  // @@protoc_insertion_point(field_get:tm.EvidenceParams.max_age_duration)
  return _internal_max_age_duration();
}
inline void EvidenceParams::_internal_set_max_age_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {

  max_age_duration_ = value;
}
inline void EvidenceParams::set_max_age_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_age_duration(value);
  // @@protoc_insertion_point(field_set:tm.EvidenceParams.max_age_duration)
}

// uint32 max_num = 3 [json_name = "maxNum"];
inline void EvidenceParams::clear_max_num() {
  max_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EvidenceParams::_internal_max_num() const {
  return max_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EvidenceParams::max_num() const {
  // @@protoc_insertion_point(field_get:tm.EvidenceParams.max_num)
  return _internal_max_num();
}
inline void EvidenceParams::_internal_set_max_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  max_num_ = value;
}
inline void EvidenceParams::set_max_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_num(value);
  // @@protoc_insertion_point(field_set:tm.EvidenceParams.max_num)
}

// -------------------------------------------------------------------

// ValidatorParams

// repeated string pub_key_types = 1 [json_name = "pubKeyTypes"];
inline int ValidatorParams::_internal_pub_key_types_size() const {
  return pub_key_types_.size();
}
inline int ValidatorParams::pub_key_types_size() const {
  return _internal_pub_key_types_size();
}
inline void ValidatorParams::clear_pub_key_types() {
  pub_key_types_.Clear();
}
inline std::string* ValidatorParams::add_pub_key_types() {
  // @@protoc_insertion_point(field_add_mutable:tm.ValidatorParams.pub_key_types)
  return _internal_add_pub_key_types();
}
inline const std::string& ValidatorParams::_internal_pub_key_types(int index) const {
  return pub_key_types_.Get(index);
}
inline const std::string& ValidatorParams::pub_key_types(int index) const {
  // @@protoc_insertion_point(field_get:tm.ValidatorParams.pub_key_types)
  return _internal_pub_key_types(index);
}
inline std::string* ValidatorParams::mutable_pub_key_types(int index) {
  // @@protoc_insertion_point(field_mutable:tm.ValidatorParams.pub_key_types)
  return pub_key_types_.Mutable(index);
}
inline void ValidatorParams::set_pub_key_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tm.ValidatorParams.pub_key_types)
  pub_key_types_.Mutable(index)->assign(value);
}
inline void ValidatorParams::set_pub_key_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tm.ValidatorParams.pub_key_types)
  pub_key_types_.Mutable(index)->assign(std::move(value));
}
inline void ValidatorParams::set_pub_key_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pub_key_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tm.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::set_pub_key_types(int index, const char* value, size_t size) {
  pub_key_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tm.ValidatorParams.pub_key_types)
}
inline std::string* ValidatorParams::_internal_add_pub_key_types() {
  return pub_key_types_.Add();
}
inline void ValidatorParams::add_pub_key_types(const std::string& value) {
  pub_key_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tm.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::add_pub_key_types(std::string&& value) {
  pub_key_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tm.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::add_pub_key_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pub_key_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tm.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::add_pub_key_types(const char* value, size_t size) {
  pub_key_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tm.ValidatorParams.pub_key_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ValidatorParams::pub_key_types() const {
  // @@protoc_insertion_point(field_list:tm.ValidatorParams.pub_key_types)
  return pub_key_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ValidatorParams::mutable_pub_key_types() {
  // @@protoc_insertion_point(field_mutable_list:tm.ValidatorParams.pub_key_types)
  return &pub_key_types_;
}

// -------------------------------------------------------------------

// VersionParams

// uint64 app_version = 1 [json_name = "appVersion"];
inline void VersionParams::clear_app_version() {
  app_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VersionParams::_internal_app_version() const {
  return app_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VersionParams::app_version() const {
  // @@protoc_insertion_point(field_get:tm.VersionParams.app_version)
  return _internal_app_version();
}
inline void VersionParams::_internal_set_app_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  app_version_ = value;
}
inline void VersionParams::set_app_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_app_version(value);
  // @@protoc_insertion_point(field_set:tm.VersionParams.app_version)
}

// -------------------------------------------------------------------

// Header

// string chain_id = 1 [json_name = "chainId"];
inline void Header::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& Header::chain_id() const {
  // @@protoc_insertion_point(field_get:tm.Header.chain_id)
  return _internal_chain_id();
}
inline void Header::set_chain_id(const std::string& value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:tm.Header.chain_id)
}
inline std::string* Header::mutable_chain_id() {
  // @@protoc_insertion_point(field_mutable:tm.Header.chain_id)
  return _internal_mutable_chain_id();
}
inline const std::string& Header::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void Header::_internal_set_chain_id(const std::string& value) {

  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Header::set_chain_id(std::string&& value) {

  chain_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tm.Header.chain_id)
}
inline void Header::set_chain_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tm.Header.chain_id)
}
inline void Header::set_chain_id(const char* value,
    size_t size) {

  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tm.Header.chain_id)
}
inline std::string* Header::_internal_mutable_chain_id() {

  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Header::release_chain_id() {
  // @@protoc_insertion_point(field_release:tm.Header.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {

  } else {

  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tm.Header.chain_id)
}

// int64 height = 2 [json_name = "height"];
inline void Header::clear_height() {
  height_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Header::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Header::height() const {
  // @@protoc_insertion_point(field_get:tm.Header.height)
  return _internal_height();
}
inline void Header::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {

  height_ = value;
}
inline void Header::set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tm.Header.height)
}

// int64 time = 3 [json_name = "time"];
inline void Header::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Header::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Header::time() const {
  // @@protoc_insertion_point(field_get:tm.Header.time)
  return _internal_time();
}
inline void Header::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {

  time_ = value;
}
inline void Header::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:tm.Header.time)
}

// -------------------------------------------------------------------

// PublicKey

// bytes ed25519 = 1 [json_name = "ed25519"];
inline bool PublicKey::_internal_has_ed25519() const {
  return sum_case() == kEd25519;
}
inline void PublicKey::set_has_ed25519() {
  _oneof_case_[0] = kEd25519;
}
inline void PublicKey::clear_ed25519() {
  if (_internal_has_ed25519()) {
    sum_.ed25519_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_sum();
  }
}
inline const std::string& PublicKey::ed25519() const {
  // @@protoc_insertion_point(field_get:tm.PublicKey.ed25519)
  return _internal_ed25519();
}
inline void PublicKey::set_ed25519(const std::string& value) {
  _internal_set_ed25519(value);
  // @@protoc_insertion_point(field_set:tm.PublicKey.ed25519)
}
inline std::string* PublicKey::mutable_ed25519() {
  // @@protoc_insertion_point(field_mutable:tm.PublicKey.ed25519)
  return _internal_mutable_ed25519();
}
inline const std::string& PublicKey::_internal_ed25519() const {
  if (_internal_has_ed25519()) {
    return sum_.ed25519_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PublicKey::_internal_set_ed25519(const std::string& value) {
  if (!_internal_has_ed25519()) {
    clear_sum();
    set_has_ed25519();
    sum_.ed25519_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  sum_.ed25519_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublicKey::set_ed25519(std::string&& value) {
  // @@protoc_insertion_point(field_set:tm.PublicKey.ed25519)
  if (!_internal_has_ed25519()) {
    clear_sum();
    set_has_ed25519();
    sum_.ed25519_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  sum_.ed25519_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tm.PublicKey.ed25519)
}
inline void PublicKey::set_ed25519(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_ed25519()) {
    clear_sum();
    set_has_ed25519();
    sum_.ed25519_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  sum_.ed25519_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tm.PublicKey.ed25519)
}
inline void PublicKey::set_ed25519(const void* value,
                             size_t size) {
  if (!_internal_has_ed25519()) {
    clear_sum();
    set_has_ed25519();
    sum_.ed25519_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  sum_.ed25519_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:tm.PublicKey.ed25519)
}
inline std::string* PublicKey::_internal_mutable_ed25519() {
  if (!_internal_has_ed25519()) {
    clear_sum();
    set_has_ed25519();
    sum_.ed25519_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return sum_.ed25519_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublicKey::release_ed25519() {
  // @@protoc_insertion_point(field_release:tm.PublicKey.ed25519)
  if (_internal_has_ed25519()) {
    clear_has_sum();
    return sum_.ed25519_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PublicKey::set_allocated_ed25519(std::string* ed25519) {
  if (has_sum()) {
    clear_sum();
  }
  if (ed25519 != nullptr) {
    set_has_ed25519();
    sum_.ed25519_.UnsafeSetDefault(ed25519);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(ed25519);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:tm.PublicKey.ed25519)
}

inline bool PublicKey::has_sum() const {
  return sum_case() != SUM_NOT_SET;
}
inline void PublicKey::clear_has_sum() {
  _oneof_case_[0] = SUM_NOT_SET;
}
inline PublicKey::SumCase PublicKey::sum_case() const {
  return PublicKey::SumCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tm::EvidenceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tm::EvidenceType>() {
  return ::tm::EvidenceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tm_2freplay_2eproto
