// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tm/replay.proto

#include "tm/replay.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockParams_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ConsensusParams_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventAttribute_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Evidence_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EvidenceParams_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LastCommitInfo_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicKey_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RequestBeginBlock_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestDeliverTx_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RequestInitChain_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseBeginBlock_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseDeliverTx_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResponseInitChain_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Validator_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidatorParams_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidatorUpdate_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionParams_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VoteInfo_tm_2freplay_2eproto;
namespace vega {
class TmEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TmEvent> _instance;
} _TmEvent_default_instance_;
class RequestInitChainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestInitChain> _instance;
} _RequestInitChain_default_instance_;
class RequestBeginBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestBeginBlock> _instance;
} _RequestBeginBlock_default_instance_;
class RequestDeliverTxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestDeliverTx> _instance;
} _RequestDeliverTx_default_instance_;
class ResponseInitChainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseInitChain> _instance;
} _ResponseInitChain_default_instance_;
class ResponseBeginBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseBeginBlock> _instance;
} _ResponseBeginBlock_default_instance_;
class ResponseDeliverTxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseDeliverTx> _instance;
} _ResponseDeliverTx_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
} _Event_default_instance_;
class EventAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventAttribute> _instance;
} _EventAttribute_default_instance_;
class ValidatorUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidatorUpdate> _instance;
} _ValidatorUpdate_default_instance_;
class ConsensusParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusParams> _instance;
} _ConsensusParams_default_instance_;
class BlockParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockParams> _instance;
} _BlockParams_default_instance_;
class EvidenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Evidence> _instance;
} _Evidence_default_instance_;
class ValidatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Validator> _instance;
} _Validator_default_instance_;
class LastCommitInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LastCommitInfo> _instance;
} _LastCommitInfo_default_instance_;
class VoteInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoteInfo> _instance;
} _VoteInfo_default_instance_;
class EvidenceParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EvidenceParams> _instance;
} _EvidenceParams_default_instance_;
class ValidatorParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidatorParams> _instance;
} _ValidatorParams_default_instance_;
class VersionParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionParams> _instance;
} _VersionParams_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
class PublicKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublicKey> _instance;
} _PublicKey_default_instance_;
}  // namespace vega
static void InitDefaultsscc_info_BlockParams_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_BlockParams_default_instance_;
    new (ptr) ::vega::BlockParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockParams_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockParams_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusParams_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ConsensusParams_default_instance_;
    new (ptr) ::vega::ConsensusParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ConsensusParams_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ConsensusParams_tm_2freplay_2eproto}, {
      &scc_info_BlockParams_tm_2freplay_2eproto.base,
      &scc_info_EvidenceParams_tm_2freplay_2eproto.base,
      &scc_info_ValidatorParams_tm_2freplay_2eproto.base,
      &scc_info_VersionParams_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_Event_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Event_default_instance_;
    new (ptr) ::vega::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Event_tm_2freplay_2eproto}, {
      &scc_info_EventAttribute_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_EventAttribute_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_EventAttribute_default_instance_;
    new (ptr) ::vega::EventAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventAttribute_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EventAttribute_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_Evidence_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Evidence_default_instance_;
    new (ptr) ::vega::Evidence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Evidence_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Evidence_tm_2freplay_2eproto}, {
      &scc_info_Validator_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_EvidenceParams_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_EvidenceParams_default_instance_;
    new (ptr) ::vega::EvidenceParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EvidenceParams_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EvidenceParams_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_Header_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Header_default_instance_;
    new (ptr) ::vega::Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Header_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_LastCommitInfo_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_LastCommitInfo_default_instance_;
    new (ptr) ::vega::LastCommitInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LastCommitInfo_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LastCommitInfo_tm_2freplay_2eproto}, {
      &scc_info_VoteInfo_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_PublicKey_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_PublicKey_default_instance_;
    new (ptr) ::vega::PublicKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicKey_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PublicKey_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_RequestBeginBlock_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RequestBeginBlock_default_instance_;
    new (ptr) ::vega::RequestBeginBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RequestBeginBlock_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RequestBeginBlock_tm_2freplay_2eproto}, {
      &scc_info_Header_tm_2freplay_2eproto.base,
      &scc_info_LastCommitInfo_tm_2freplay_2eproto.base,
      &scc_info_Evidence_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_RequestDeliverTx_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RequestDeliverTx_default_instance_;
    new (ptr) ::vega::RequestDeliverTx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestDeliverTx_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestDeliverTx_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_RequestInitChain_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_RequestInitChain_default_instance_;
    new (ptr) ::vega::RequestInitChain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RequestInitChain_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RequestInitChain_tm_2freplay_2eproto}, {
      &scc_info_ConsensusParams_tm_2freplay_2eproto.base,
      &scc_info_ValidatorUpdate_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_ResponseBeginBlock_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ResponseBeginBlock_default_instance_;
    new (ptr) ::vega::ResponseBeginBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseBeginBlock_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResponseBeginBlock_tm_2freplay_2eproto}, {
      &scc_info_Event_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_ResponseDeliverTx_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ResponseDeliverTx_default_instance_;
    new (ptr) ::vega::ResponseDeliverTx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseDeliverTx_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResponseDeliverTx_tm_2freplay_2eproto}, {
      &scc_info_Event_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_ResponseInitChain_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ResponseInitChain_default_instance_;
    new (ptr) ::vega::ResponseInitChain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResponseInitChain_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResponseInitChain_tm_2freplay_2eproto}, {
      &scc_info_ConsensusParams_tm_2freplay_2eproto.base,
      &scc_info_ValidatorUpdate_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_TmEvent_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_TmEvent_default_instance_;
    new (ptr) ::vega::TmEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TmEvent_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_TmEvent_tm_2freplay_2eproto}, {
      &scc_info_RequestInitChain_tm_2freplay_2eproto.base,
      &scc_info_ResponseInitChain_tm_2freplay_2eproto.base,
      &scc_info_RequestDeliverTx_tm_2freplay_2eproto.base,
      &scc_info_ResponseDeliverTx_tm_2freplay_2eproto.base,
      &scc_info_RequestBeginBlock_tm_2freplay_2eproto.base,
      &scc_info_ResponseBeginBlock_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_Validator_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_Validator_default_instance_;
    new (ptr) ::vega::Validator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Validator_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Validator_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_ValidatorParams_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ValidatorParams_default_instance_;
    new (ptr) ::vega::ValidatorParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidatorParams_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValidatorParams_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_ValidatorUpdate_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_ValidatorUpdate_default_instance_;
    new (ptr) ::vega::ValidatorUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidatorUpdate_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValidatorUpdate_tm_2freplay_2eproto}, {
      &scc_info_PublicKey_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_VersionParams_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_VersionParams_default_instance_;
    new (ptr) ::vega::VersionParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionParams_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VersionParams_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_VoteInfo_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vega::_VoteInfo_default_instance_;
    new (ptr) ::vega::VoteInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VoteInfo_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VoteInfo_tm_2freplay_2eproto}, {
      &scc_info_Validator_tm_2freplay_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tm_2freplay_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tm_2freplay_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tm_2freplay_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tm_2freplay_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::TmEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::TmEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::TmEvent, Action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::RequestInitChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RequestInitChain, time_),
  PROTOBUF_FIELD_OFFSET(::vega::RequestInitChain, chainid_),
  PROTOBUF_FIELD_OFFSET(::vega::RequestInitChain, consensusparams_),
  PROTOBUF_FIELD_OFFSET(::vega::RequestInitChain, validators_),
  PROTOBUF_FIELD_OFFSET(::vega::RequestInitChain, appstatebytes_),
  PROTOBUF_FIELD_OFFSET(::vega::RequestInitChain, initialheight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::RequestBeginBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RequestBeginBlock, hash_),
  PROTOBUF_FIELD_OFFSET(::vega::RequestBeginBlock, header_),
  PROTOBUF_FIELD_OFFSET(::vega::RequestBeginBlock, lastcommitinfo_),
  PROTOBUF_FIELD_OFFSET(::vega::RequestBeginBlock, byzantinevalidators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::RequestDeliverTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::RequestDeliverTx, tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ResponseInitChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ResponseInitChain, consensusparams_),
  PROTOBUF_FIELD_OFFSET(::vega::ResponseInitChain, validators_),
  PROTOBUF_FIELD_OFFSET(::vega::ResponseInitChain, apphash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ResponseBeginBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ResponseBeginBlock, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ResponseDeliverTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ResponseDeliverTx, code_),
  PROTOBUF_FIELD_OFFSET(::vega::ResponseDeliverTx, data_),
  PROTOBUF_FIELD_OFFSET(::vega::ResponseDeliverTx, log_),
  PROTOBUF_FIELD_OFFSET(::vega::ResponseDeliverTx, info_),
  PROTOBUF_FIELD_OFFSET(::vega::ResponseDeliverTx, gaswanted_),
  PROTOBUF_FIELD_OFFSET(::vega::ResponseDeliverTx, gasused_),
  PROTOBUF_FIELD_OFFSET(::vega::ResponseDeliverTx, events_),
  PROTOBUF_FIELD_OFFSET(::vega::ResponseDeliverTx, codespace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Event, type_),
  PROTOBUF_FIELD_OFFSET(::vega::Event, attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::EventAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::EventAttribute, key_),
  PROTOBUF_FIELD_OFFSET(::vega::EventAttribute, value_),
  PROTOBUF_FIELD_OFFSET(::vega::EventAttribute, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ValidatorUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ValidatorUpdate, pub_key_),
  PROTOBUF_FIELD_OFFSET(::vega::ValidatorUpdate, power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ConsensusParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ConsensusParams, block_),
  PROTOBUF_FIELD_OFFSET(::vega::ConsensusParams, evidence_),
  PROTOBUF_FIELD_OFFSET(::vega::ConsensusParams, validator_),
  PROTOBUF_FIELD_OFFSET(::vega::ConsensusParams, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::BlockParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::BlockParams, maxbytes_),
  PROTOBUF_FIELD_OFFSET(::vega::BlockParams, maxgas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Evidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Evidence, type_),
  PROTOBUF_FIELD_OFFSET(::vega::Evidence, validator_),
  PROTOBUF_FIELD_OFFSET(::vega::Evidence, height_),
  PROTOBUF_FIELD_OFFSET(::vega::Evidence, time_),
  PROTOBUF_FIELD_OFFSET(::vega::Evidence, totalvotingpower_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Validator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Validator, address_),
  PROTOBUF_FIELD_OFFSET(::vega::Validator, power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::LastCommitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::LastCommitInfo, round_),
  PROTOBUF_FIELD_OFFSET(::vega::LastCommitInfo, votes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::VoteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::VoteInfo, validator_),
  PROTOBUF_FIELD_OFFSET(::vega::VoteInfo, signedlastblock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::EvidenceParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::EvidenceParams, maxagenumblocks_),
  PROTOBUF_FIELD_OFFSET(::vega::EvidenceParams, maxageduration_),
  PROTOBUF_FIELD_OFFSET(::vega::EvidenceParams, max_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::ValidatorParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::ValidatorParams, pubkeytypes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::VersionParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::VersionParams, appversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vega::Header, chainid_),
  PROTOBUF_FIELD_OFFSET(::vega::Header, height_),
  PROTOBUF_FIELD_OFFSET(::vega::Header, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vega::PublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::vega::PublicKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::vega::PublicKey, sum_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vega::TmEvent)},
  { 12, -1, sizeof(::vega::RequestInitChain)},
  { 23, -1, sizeof(::vega::RequestBeginBlock)},
  { 32, -1, sizeof(::vega::RequestDeliverTx)},
  { 38, -1, sizeof(::vega::ResponseInitChain)},
  { 46, -1, sizeof(::vega::ResponseBeginBlock)},
  { 52, -1, sizeof(::vega::ResponseDeliverTx)},
  { 65, -1, sizeof(::vega::Event)},
  { 72, -1, sizeof(::vega::EventAttribute)},
  { 80, -1, sizeof(::vega::ValidatorUpdate)},
  { 87, -1, sizeof(::vega::ConsensusParams)},
  { 96, -1, sizeof(::vega::BlockParams)},
  { 103, -1, sizeof(::vega::Evidence)},
  { 113, -1, sizeof(::vega::Validator)},
  { 120, -1, sizeof(::vega::LastCommitInfo)},
  { 127, -1, sizeof(::vega::VoteInfo)},
  { 134, -1, sizeof(::vega::EvidenceParams)},
  { 142, -1, sizeof(::vega::ValidatorParams)},
  { 148, -1, sizeof(::vega::VersionParams)},
  { 154, -1, sizeof(::vega::Header)},
  { 162, -1, sizeof(::vega::PublicKey)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_TmEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_RequestInitChain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_RequestBeginBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_RequestDeliverTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ResponseInitChain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ResponseBeginBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ResponseDeliverTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_EventAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ValidatorUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ConsensusParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_BlockParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Evidence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Validator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_LastCommitInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_VoteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_EvidenceParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_ValidatorParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_VersionParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vega::_PublicKey_default_instance_),
};

const char descriptor_table_protodef_tm_2freplay_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017tm/replay.proto\022\004vega\"\220\003\n\007TmEvent\022<\n\014r"
  "eqInitChain\030\001 \001(\0132\026.vega.RequestInitChai"
  "nH\000R\014reqInitChain\022=\n\014resInitChain\030\002 \001(\0132"
  "\027.vega.ResponseInitChainH\000R\014resInitChain"
  "\022<\n\014reqDeliverTx\030\003 \001(\0132\026.vega.RequestDel"
  "iverTxH\000R\014reqDeliverTx\022=\n\014resDeliverTx\030\004"
  " \001(\0132\027.vega.ResponseDeliverTxH\000R\014resDeli"
  "verTx\022\?\n\rreqBeginBlock\030\005 \001(\0132\027.vega.Requ"
  "estBeginBlockH\000R\rreqBeginBlock\022@\n\rresBeg"
  "inBlock\030\006 \001(\0132\030.vega.ResponseBeginBlockH"
  "\000R\rresBeginBlockB\010\n\006Action\"\204\002\n\020RequestIn"
  "itChain\022\022\n\004time\030\001 \001(\003R\004time\022\030\n\007chainID\030\002"
  " \001(\tR\007chainID\022\?\n\017consensusParams\030\003 \001(\0132\025"
  ".vega.ConsensusParamsR\017consensusParams\0225"
  "\n\nvalidators\030\004 \003(\0132\025.vega.ValidatorUpdat"
  "eR\nvalidators\022$\n\rappStateBytes\030\005 \001(\014R\rap"
  "pStateBytes\022$\n\rinitialHeight\030\006 \001(\003R\rinit"
  "ialHeight\"\315\001\n\021RequestBeginBlock\022\022\n\004hash\030"
  "\001 \001(\014R\004hash\022$\n\006header\030\002 \001(\0132\014.vega.Heade"
  "rR\006header\022<\n\016lastCommitInfo\030\003 \001(\0132\024.vega"
  ".LastCommitInfoR\016lastCommitInfo\022@\n\023byzan"
  "tineValidators\030\004 \003(\0132\016.vega.EvidenceR\023by"
  "zantineValidators\"\"\n\020RequestDeliverTx\022\016\n"
  "\002tx\030\001 \001(\014R\002tx\"\245\001\n\021ResponseInitChain\022\?\n\017c"
  "onsensusParams\030\001 \001(\0132\025.vega.ConsensusPar"
  "amsR\017consensusParams\0225\n\nvalidators\030\002 \003(\013"
  "2\025.vega.ValidatorUpdateR\nvalidators\022\030\n\007a"
  "ppHash\030\003 \001(\014R\007appHash\"9\n\022ResponseBeginBl"
  "ock\022#\n\006events\030\001 \003(\0132\013.vega.EventR\006events"
  "\"\334\001\n\021ResponseDeliverTx\022\022\n\004code\030\001 \001(\rR\004co"
  "de\022\022\n\004data\030\002 \001(\014R\004data\022\020\n\003log\030\003 \001(\tR\003log"
  "\022\022\n\004info\030\004 \001(\tR\004info\022\034\n\tgasWanted\030\005 \001(\003R"
  "\tgasWanted\022\030\n\007gasUsed\030\006 \001(\003R\007gasUsed\022#\n\006"
  "events\030\007 \003(\0132\013.vega.EventR\006events\022\034\n\tcod"
  "espace\030\010 \001(\tR\tcodespace\"Q\n\005Event\022\022\n\004type"
  "\030\001 \001(\tR\004type\0224\n\nattributes\030\002 \003(\0132\024.vega."
  "EventAttributeR\nattributes\"N\n\016EventAttri"
  "bute\022\020\n\003key\030\001 \001(\014R\003key\022\024\n\005value\030\002 \001(\014R\005v"
  "alue\022\024\n\005index\030\003 \001(\010R\005index\"Q\n\017ValidatorU"
  "pdate\022(\n\007pub_key\030\001 \001(\0132\017.vega.PublicKeyR"
  "\006pubKey\022\024\n\005power\030\002 \001(\003R\005power\"\320\001\n\017Consen"
  "susParams\022\'\n\005block\030\001 \001(\0132\021.vega.BlockPar"
  "amsR\005block\0220\n\010evidence\030\002 \001(\0132\024.vega.Evid"
  "enceParamsR\010evidence\0223\n\tvalidator\030\003 \001(\0132"
  "\025.vega.ValidatorParamsR\tvalidator\022-\n\007ver"
  "sion\030\004 \001(\0132\023.vega.VersionParamsR\007version"
  "\"A\n\013BlockParams\022\032\n\010maxBytes\030\001 \001(\003R\010maxBy"
  "tes\022\026\n\006maxGas\030\002 \001(\003R\006maxGas\"\271\001\n\010Evidence"
  "\022&\n\004type\030\001 \001(\0162\022.vega.EvidenceTypeR\004type"
  "\022-\n\tvalidator\030\002 \001(\0132\017.vega.ValidatorR\tva"
  "lidator\022\026\n\006height\030\003 \001(\003R\006height\022\022\n\004time\030"
  "\004 \001(\003R\004time\022*\n\020totalVotingPower\030\005 \001(\003R\020t"
  "otalVotingPower\";\n\tValidator\022\030\n\007address\030"
  "\001 \001(\014R\007address\022\024\n\005power\030\003 \001(\003R\005power\"L\n\016"
  "LastCommitInfo\022\024\n\005round\030\001 \001(\005R\005round\022$\n\005"
  "votes\030\002 \003(\0132\016.vega.VoteInfoR\005votes\"c\n\010Vo"
  "teInfo\022-\n\tvalidator\030\001 \001(\0132\017.vega.Validat"
  "orR\tvalidator\022(\n\017signedLastBlock\030\002 \001(\010R\017"
  "signedLastBlock\"{\n\016EvidenceParams\022(\n\017max"
  "AgeNumBlocks\030\001 \001(\003R\017maxAgeNumBlocks\022&\n\016m"
  "axAgeDuration\030\002 \001(\003R\016maxAgeDuration\022\027\n\007m"
  "ax_num\030\003 \001(\rR\006maxNum\"3\n\017ValidatorParams\022"
  " \n\013pubKeyTypes\030\001 \003(\tR\013pubKeyTypes\"/\n\rVer"
  "sionParams\022\036\n\nappVersion\030\001 \001(\004R\nappVersi"
  "on\"N\n\006Header\022\030\n\007chainId\030\001 \001(\tR\007chainId\022\026"
  "\n\006height\030\002 \001(\003R\006height\022\022\n\004time\030\003 \001(\003R\004ti"
  "me\".\n\tPublicKey\022\032\n\007ed25519\030\001 \001(\014H\000R\007ed25"
  "519B\005\n\003sum*H\n\014EvidenceType\022\013\n\007UNKNOWN\020\000\022"
  "\022\n\016DUPLICATE_VOTE\020\001\022\027\n\023LIGHT_CLIENT_ATTA"
  "CK\020\002B7\n\027io.vegaprotocol.vega.tmZ\034code.ve"
  "gaprotocol.io/vega/tmb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tm_2freplay_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tm_2freplay_2eproto_sccs[21] = {
  &scc_info_BlockParams_tm_2freplay_2eproto.base,
  &scc_info_ConsensusParams_tm_2freplay_2eproto.base,
  &scc_info_Event_tm_2freplay_2eproto.base,
  &scc_info_EventAttribute_tm_2freplay_2eproto.base,
  &scc_info_Evidence_tm_2freplay_2eproto.base,
  &scc_info_EvidenceParams_tm_2freplay_2eproto.base,
  &scc_info_Header_tm_2freplay_2eproto.base,
  &scc_info_LastCommitInfo_tm_2freplay_2eproto.base,
  &scc_info_PublicKey_tm_2freplay_2eproto.base,
  &scc_info_RequestBeginBlock_tm_2freplay_2eproto.base,
  &scc_info_RequestDeliverTx_tm_2freplay_2eproto.base,
  &scc_info_RequestInitChain_tm_2freplay_2eproto.base,
  &scc_info_ResponseBeginBlock_tm_2freplay_2eproto.base,
  &scc_info_ResponseDeliverTx_tm_2freplay_2eproto.base,
  &scc_info_ResponseInitChain_tm_2freplay_2eproto.base,
  &scc_info_TmEvent_tm_2freplay_2eproto.base,
  &scc_info_Validator_tm_2freplay_2eproto.base,
  &scc_info_ValidatorParams_tm_2freplay_2eproto.base,
  &scc_info_ValidatorUpdate_tm_2freplay_2eproto.base,
  &scc_info_VersionParams_tm_2freplay_2eproto.base,
  &scc_info_VoteInfo_tm_2freplay_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tm_2freplay_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tm_2freplay_2eproto = {
  false, false, descriptor_table_protodef_tm_2freplay_2eproto, "tm/replay.proto", 2829,
  &descriptor_table_tm_2freplay_2eproto_once, descriptor_table_tm_2freplay_2eproto_sccs, descriptor_table_tm_2freplay_2eproto_deps, 21, 0,
  schemas, file_default_instances, TableStruct_tm_2freplay_2eproto::offsets,
  file_level_metadata_tm_2freplay_2eproto, 21, file_level_enum_descriptors_tm_2freplay_2eproto, file_level_service_descriptors_tm_2freplay_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tm_2freplay_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tm_2freplay_2eproto)), true);
namespace vega {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EvidenceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tm_2freplay_2eproto);
  return file_level_enum_descriptors_tm_2freplay_2eproto[0];
}
bool EvidenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TmEvent::_Internal {
 public:
  static const ::vega::RequestInitChain& reqinitchain(const TmEvent* msg);
  static const ::vega::ResponseInitChain& resinitchain(const TmEvent* msg);
  static const ::vega::RequestDeliverTx& reqdelivertx(const TmEvent* msg);
  static const ::vega::ResponseDeliverTx& resdelivertx(const TmEvent* msg);
  static const ::vega::RequestBeginBlock& reqbeginblock(const TmEvent* msg);
  static const ::vega::ResponseBeginBlock& resbeginblock(const TmEvent* msg);
};

const ::vega::RequestInitChain&
TmEvent::_Internal::reqinitchain(const TmEvent* msg) {
  return *msg->Action_.reqinitchain_;
}
const ::vega::ResponseInitChain&
TmEvent::_Internal::resinitchain(const TmEvent* msg) {
  return *msg->Action_.resinitchain_;
}
const ::vega::RequestDeliverTx&
TmEvent::_Internal::reqdelivertx(const TmEvent* msg) {
  return *msg->Action_.reqdelivertx_;
}
const ::vega::ResponseDeliverTx&
TmEvent::_Internal::resdelivertx(const TmEvent* msg) {
  return *msg->Action_.resdelivertx_;
}
const ::vega::RequestBeginBlock&
TmEvent::_Internal::reqbeginblock(const TmEvent* msg) {
  return *msg->Action_.reqbeginblock_;
}
const ::vega::ResponseBeginBlock&
TmEvent::_Internal::resbeginblock(const TmEvent* msg) {
  return *msg->Action_.resbeginblock_;
}
void TmEvent::set_allocated_reqinitchain(::vega::RequestInitChain* reqinitchain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (reqinitchain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqinitchain);
    if (message_arena != submessage_arena) {
      reqinitchain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqinitchain, submessage_arena);
    }
    set_has_reqinitchain();
    Action_.reqinitchain_ = reqinitchain;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.TmEvent.reqInitChain)
}
void TmEvent::set_allocated_resinitchain(::vega::ResponseInitChain* resinitchain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (resinitchain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resinitchain);
    if (message_arena != submessage_arena) {
      resinitchain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resinitchain, submessage_arena);
    }
    set_has_resinitchain();
    Action_.resinitchain_ = resinitchain;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.TmEvent.resInitChain)
}
void TmEvent::set_allocated_reqdelivertx(::vega::RequestDeliverTx* reqdelivertx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (reqdelivertx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqdelivertx);
    if (message_arena != submessage_arena) {
      reqdelivertx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqdelivertx, submessage_arena);
    }
    set_has_reqdelivertx();
    Action_.reqdelivertx_ = reqdelivertx;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.TmEvent.reqDeliverTx)
}
void TmEvent::set_allocated_resdelivertx(::vega::ResponseDeliverTx* resdelivertx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (resdelivertx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resdelivertx);
    if (message_arena != submessage_arena) {
      resdelivertx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resdelivertx, submessage_arena);
    }
    set_has_resdelivertx();
    Action_.resdelivertx_ = resdelivertx;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.TmEvent.resDeliverTx)
}
void TmEvent::set_allocated_reqbeginblock(::vega::RequestBeginBlock* reqbeginblock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (reqbeginblock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reqbeginblock);
    if (message_arena != submessage_arena) {
      reqbeginblock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqbeginblock, submessage_arena);
    }
    set_has_reqbeginblock();
    Action_.reqbeginblock_ = reqbeginblock;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.TmEvent.reqBeginBlock)
}
void TmEvent::set_allocated_resbeginblock(::vega::ResponseBeginBlock* resbeginblock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (resbeginblock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resbeginblock);
    if (message_arena != submessage_arena) {
      resbeginblock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resbeginblock, submessage_arena);
    }
    set_has_resbeginblock();
    Action_.resbeginblock_ = resbeginblock;
  }
  // @@protoc_insertion_point(field_set_allocated:vega.TmEvent.resBeginBlock)
}
TmEvent::TmEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.TmEvent)
}
TmEvent::TmEvent(const TmEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Action();
  switch (from.Action_case()) {
    case kReqInitChain: {
      _internal_mutable_reqinitchain()->::vega::RequestInitChain::MergeFrom(from._internal_reqinitchain());
      break;
    }
    case kResInitChain: {
      _internal_mutable_resinitchain()->::vega::ResponseInitChain::MergeFrom(from._internal_resinitchain());
      break;
    }
    case kReqDeliverTx: {
      _internal_mutable_reqdelivertx()->::vega::RequestDeliverTx::MergeFrom(from._internal_reqdelivertx());
      break;
    }
    case kResDeliverTx: {
      _internal_mutable_resdelivertx()->::vega::ResponseDeliverTx::MergeFrom(from._internal_resdelivertx());
      break;
    }
    case kReqBeginBlock: {
      _internal_mutable_reqbeginblock()->::vega::RequestBeginBlock::MergeFrom(from._internal_reqbeginblock());
      break;
    }
    case kResBeginBlock: {
      _internal_mutable_resbeginblock()->::vega::ResponseBeginBlock::MergeFrom(from._internal_resbeginblock());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.TmEvent)
}

void TmEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TmEvent_tm_2freplay_2eproto.base);
  clear_has_Action();
}

TmEvent::~TmEvent() {
  // @@protoc_insertion_point(destructor:vega.TmEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TmEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Action()) {
    clear_Action();
  }
}

void TmEvent::ArenaDtor(void* object) {
  TmEvent* _this = reinterpret_cast< TmEvent* >(object);
  (void)_this;
}
void TmEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TmEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TmEvent& TmEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TmEvent_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void TmEvent::clear_Action() {
// @@protoc_insertion_point(one_of_clear_start:vega.TmEvent)
  switch (Action_case()) {
    case kReqInitChain: {
      if (GetArena() == nullptr) {
        delete Action_.reqinitchain_;
      }
      break;
    }
    case kResInitChain: {
      if (GetArena() == nullptr) {
        delete Action_.resinitchain_;
      }
      break;
    }
    case kReqDeliverTx: {
      if (GetArena() == nullptr) {
        delete Action_.reqdelivertx_;
      }
      break;
    }
    case kResDeliverTx: {
      if (GetArena() == nullptr) {
        delete Action_.resdelivertx_;
      }
      break;
    }
    case kReqBeginBlock: {
      if (GetArena() == nullptr) {
        delete Action_.reqbeginblock_;
      }
      break;
    }
    case kResBeginBlock: {
      if (GetArena() == nullptr) {
        delete Action_.resbeginblock_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void TmEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.TmEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TmEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.RequestInitChain reqInitChain = 1 [json_name = "reqInitChain"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqinitchain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ResponseInitChain resInitChain = 2 [json_name = "resInitChain"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resinitchain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.RequestDeliverTx reqDeliverTx = 3 [json_name = "reqDeliverTx"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqdelivertx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ResponseDeliverTx resDeliverTx = 4 [json_name = "resDeliverTx"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resdelivertx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.RequestBeginBlock reqBeginBlock = 5 [json_name = "reqBeginBlock"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqbeginblock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ResponseBeginBlock resBeginBlock = 6 [json_name = "resBeginBlock"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_resbeginblock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TmEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.TmEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.RequestInitChain reqInitChain = 1 [json_name = "reqInitChain"];
  if (_internal_has_reqinitchain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reqinitchain(this), target, stream);
  }

  // .vega.ResponseInitChain resInitChain = 2 [json_name = "resInitChain"];
  if (_internal_has_resinitchain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::resinitchain(this), target, stream);
  }

  // .vega.RequestDeliverTx reqDeliverTx = 3 [json_name = "reqDeliverTx"];
  if (_internal_has_reqdelivertx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reqdelivertx(this), target, stream);
  }

  // .vega.ResponseDeliverTx resDeliverTx = 4 [json_name = "resDeliverTx"];
  if (_internal_has_resdelivertx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::resdelivertx(this), target, stream);
  }

  // .vega.RequestBeginBlock reqBeginBlock = 5 [json_name = "reqBeginBlock"];
  if (_internal_has_reqbeginblock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reqbeginblock(this), target, stream);
  }

  // .vega.ResponseBeginBlock resBeginBlock = 6 [json_name = "resBeginBlock"];
  if (_internal_has_resbeginblock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::resbeginblock(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.TmEvent)
  return target;
}

size_t TmEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.TmEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Action_case()) {
    // .vega.RequestInitChain reqInitChain = 1 [json_name = "reqInitChain"];
    case kReqInitChain: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.reqinitchain_);
      break;
    }
    // .vega.ResponseInitChain resInitChain = 2 [json_name = "resInitChain"];
    case kResInitChain: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.resinitchain_);
      break;
    }
    // .vega.RequestDeliverTx reqDeliverTx = 3 [json_name = "reqDeliverTx"];
    case kReqDeliverTx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.reqdelivertx_);
      break;
    }
    // .vega.ResponseDeliverTx resDeliverTx = 4 [json_name = "resDeliverTx"];
    case kResDeliverTx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.resdelivertx_);
      break;
    }
    // .vega.RequestBeginBlock reqBeginBlock = 5 [json_name = "reqBeginBlock"];
    case kReqBeginBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.reqbeginblock_);
      break;
    }
    // .vega.ResponseBeginBlock resBeginBlock = 6 [json_name = "resBeginBlock"];
    case kResBeginBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.resbeginblock_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TmEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.TmEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TmEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TmEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.TmEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.TmEvent)
    MergeFrom(*source);
  }
}

void TmEvent::MergeFrom(const TmEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.TmEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Action_case()) {
    case kReqInitChain: {
      _internal_mutable_reqinitchain()->::vega::RequestInitChain::MergeFrom(from._internal_reqinitchain());
      break;
    }
    case kResInitChain: {
      _internal_mutable_resinitchain()->::vega::ResponseInitChain::MergeFrom(from._internal_resinitchain());
      break;
    }
    case kReqDeliverTx: {
      _internal_mutable_reqdelivertx()->::vega::RequestDeliverTx::MergeFrom(from._internal_reqdelivertx());
      break;
    }
    case kResDeliverTx: {
      _internal_mutable_resdelivertx()->::vega::ResponseDeliverTx::MergeFrom(from._internal_resdelivertx());
      break;
    }
    case kReqBeginBlock: {
      _internal_mutable_reqbeginblock()->::vega::RequestBeginBlock::MergeFrom(from._internal_reqbeginblock());
      break;
    }
    case kResBeginBlock: {
      _internal_mutable_resbeginblock()->::vega::ResponseBeginBlock::MergeFrom(from._internal_resbeginblock());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void TmEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.TmEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmEvent::CopyFrom(const TmEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.TmEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmEvent::IsInitialized() const {
  return true;
}

void TmEvent::InternalSwap(TmEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(Action_, other->Action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TmEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestInitChain::_Internal {
 public:
  static const ::vega::ConsensusParams& consensusparams(const RequestInitChain* msg);
};

const ::vega::ConsensusParams&
RequestInitChain::_Internal::consensusparams(const RequestInitChain* msg) {
  return *msg->consensusparams_;
}
RequestInitChain::RequestInitChain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  validators_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.RequestInitChain)
}
RequestInitChain::RequestInitChain(const RequestInitChain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validators_(from.validators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chainid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chainid().empty()) {
    chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chainid(), 
      GetArena());
  }
  appstatebytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appstatebytes().empty()) {
    appstatebytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appstatebytes(), 
      GetArena());
  }
  if (from._internal_has_consensusparams()) {
    consensusparams_ = new ::vega::ConsensusParams(*from.consensusparams_);
  } else {
    consensusparams_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&initialheight_) -
    reinterpret_cast<char*>(&time_)) + sizeof(initialheight_));
  // @@protoc_insertion_point(copy_constructor:vega.RequestInitChain)
}

void RequestInitChain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestInitChain_tm_2freplay_2eproto.base);
  chainid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appstatebytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&consensusparams_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&initialheight_) -
      reinterpret_cast<char*>(&consensusparams_)) + sizeof(initialheight_));
}

RequestInitChain::~RequestInitChain() {
  // @@protoc_insertion_point(destructor:vega.RequestInitChain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestInitChain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chainid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appstatebytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete consensusparams_;
}

void RequestInitChain::ArenaDtor(void* object) {
  RequestInitChain* _this = reinterpret_cast< RequestInitChain* >(object);
  (void)_this;
}
void RequestInitChain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestInitChain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestInitChain& RequestInitChain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestInitChain_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void RequestInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.RequestInitChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validators_.Clear();
  chainid_.ClearToEmpty();
  appstatebytes_.ClearToEmpty();
  if (GetArena() == nullptr && consensusparams_ != nullptr) {
    delete consensusparams_;
  }
  consensusparams_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initialheight_) -
      reinterpret_cast<char*>(&time_)) + sizeof(initialheight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestInitChain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1 [json_name = "time"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chainID = 2 [json_name = "chainID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chainid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.RequestInitChain.chainID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ConsensusParams consensusParams = 3 [json_name = "consensusParams"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensusparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.ValidatorUpdate validators = 4 [json_name = "validators"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes appStateBytes = 5 [json_name = "appStateBytes"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_appstatebytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 initialHeight = 6 [json_name = "initialHeight"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          initialheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestInitChain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.RequestInitChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1 [json_name = "time"];
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // string chainID = 2 [json_name = "chainID"];
  if (this->chainid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chainid().data(), static_cast<int>(this->_internal_chainid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.RequestInitChain.chainID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chainid(), target);
  }

  // .vega.ConsensusParams consensusParams = 3 [json_name = "consensusParams"];
  if (this->has_consensusparams()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::consensusparams(this), target, stream);
  }

  // repeated .vega.ValidatorUpdate validators = 4 [json_name = "validators"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_validators(i), target, stream);
  }

  // bytes appStateBytes = 5 [json_name = "appStateBytes"];
  if (this->appstatebytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_appstatebytes(), target);
  }

  // int64 initialHeight = 6 [json_name = "initialHeight"];
  if (this->initialheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_initialheight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.RequestInitChain)
  return target;
}

size_t RequestInitChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.RequestInitChain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.ValidatorUpdate validators = 4 [json_name = "validators"];
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string chainID = 2 [json_name = "chainID"];
  if (this->chainid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chainid());
  }

  // bytes appStateBytes = 5 [json_name = "appStateBytes"];
  if (this->appstatebytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_appstatebytes());
  }

  // .vega.ConsensusParams consensusParams = 3 [json_name = "consensusParams"];
  if (this->has_consensusparams()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consensusparams_);
  }

  // int64 time = 1 [json_name = "time"];
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 initialHeight = 6 [json_name = "initialHeight"];
  if (this->initialheight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_initialheight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestInitChain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.RequestInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestInitChain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestInitChain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.RequestInitChain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.RequestInitChain)
    MergeFrom(*source);
  }
}

void RequestInitChain::MergeFrom(const RequestInitChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.RequestInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validators_.MergeFrom(from.validators_);
  if (from.chainid().size() > 0) {
    _internal_set_chainid(from._internal_chainid());
  }
  if (from.appstatebytes().size() > 0) {
    _internal_set_appstatebytes(from._internal_appstatebytes());
  }
  if (from.has_consensusparams()) {
    _internal_mutable_consensusparams()->::vega::ConsensusParams::MergeFrom(from._internal_consensusparams());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.initialheight() != 0) {
    _internal_set_initialheight(from._internal_initialheight());
  }
}

void RequestInitChain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.RequestInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInitChain::CopyFrom(const RequestInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.RequestInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInitChain::IsInitialized() const {
  return true;
}

void RequestInitChain::InternalSwap(RequestInitChain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  validators_.InternalSwap(&other->validators_);
  chainid_.Swap(&other->chainid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  appstatebytes_.Swap(&other->appstatebytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestInitChain, initialheight_)
      + sizeof(RequestInitChain::initialheight_)
      - PROTOBUF_FIELD_OFFSET(RequestInitChain, consensusparams_)>(
          reinterpret_cast<char*>(&consensusparams_),
          reinterpret_cast<char*>(&other->consensusparams_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestInitChain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestBeginBlock::_Internal {
 public:
  static const ::vega::Header& header(const RequestBeginBlock* msg);
  static const ::vega::LastCommitInfo& lastcommitinfo(const RequestBeginBlock* msg);
};

const ::vega::Header&
RequestBeginBlock::_Internal::header(const RequestBeginBlock* msg) {
  return *msg->header_;
}
const ::vega::LastCommitInfo&
RequestBeginBlock::_Internal::lastcommitinfo(const RequestBeginBlock* msg) {
  return *msg->lastcommitinfo_;
}
RequestBeginBlock::RequestBeginBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  byzantinevalidators_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.RequestBeginBlock)
}
RequestBeginBlock::RequestBeginBlock(const RequestBeginBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      byzantinevalidators_(from.byzantinevalidators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::vega::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lastcommitinfo()) {
    lastcommitinfo_ = new ::vega::LastCommitInfo(*from.lastcommitinfo_);
  } else {
    lastcommitinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.RequestBeginBlock)
}

void RequestBeginBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestBeginBlock_tm_2freplay_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lastcommitinfo_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lastcommitinfo_));
}

RequestBeginBlock::~RequestBeginBlock() {
  // @@protoc_insertion_point(destructor:vega.RequestBeginBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestBeginBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lastcommitinfo_;
}

void RequestBeginBlock::ArenaDtor(void* object) {
  RequestBeginBlock* _this = reinterpret_cast< RequestBeginBlock* >(object);
  (void)_this;
}
void RequestBeginBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestBeginBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestBeginBlock& RequestBeginBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestBeginBlock_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void RequestBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.RequestBeginBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  byzantinevalidators_.Clear();
  hash_.ClearToEmpty();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lastcommitinfo_ != nullptr) {
    delete lastcommitinfo_;
  }
  lastcommitinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBeginBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1 [json_name = "hash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.Header header = 2 [json_name = "header"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.LastCommitInfo lastCommitInfo = 3 [json_name = "lastCommitInfo"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lastcommitinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.Evidence byzantineValidators = 4 [json_name = "byzantineValidators"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_byzantinevalidators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestBeginBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.RequestBeginBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1 [json_name = "hash"];
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // .vega.Header header = 2 [json_name = "header"];
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header(this), target, stream);
  }

  // .vega.LastCommitInfo lastCommitInfo = 3 [json_name = "lastCommitInfo"];
  if (this->has_lastcommitinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lastcommitinfo(this), target, stream);
  }

  // repeated .vega.Evidence byzantineValidators = 4 [json_name = "byzantineValidators"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_byzantinevalidators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_byzantinevalidators(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.RequestBeginBlock)
  return target;
}

size_t RequestBeginBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.RequestBeginBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Evidence byzantineValidators = 4 [json_name = "byzantineValidators"];
  total_size += 1UL * this->_internal_byzantinevalidators_size();
  for (const auto& msg : this->byzantinevalidators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes hash = 1 [json_name = "hash"];
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // .vega.Header header = 2 [json_name = "header"];
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .vega.LastCommitInfo lastCommitInfo = 3 [json_name = "lastCommitInfo"];
  if (this->has_lastcommitinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lastcommitinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestBeginBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.RequestBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestBeginBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestBeginBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.RequestBeginBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.RequestBeginBlock)
    MergeFrom(*source);
  }
}

void RequestBeginBlock::MergeFrom(const RequestBeginBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.RequestBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  byzantinevalidators_.MergeFrom(from.byzantinevalidators_);
  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::vega::Header::MergeFrom(from._internal_header());
  }
  if (from.has_lastcommitinfo()) {
    _internal_mutable_lastcommitinfo()->::vega::LastCommitInfo::MergeFrom(from._internal_lastcommitinfo());
  }
}

void RequestBeginBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.RequestBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBeginBlock::CopyFrom(const RequestBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.RequestBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBeginBlock::IsInitialized() const {
  return true;
}

void RequestBeginBlock::InternalSwap(RequestBeginBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  byzantinevalidators_.InternalSwap(&other->byzantinevalidators_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestBeginBlock, lastcommitinfo_)
      + sizeof(RequestBeginBlock::lastcommitinfo_)
      - PROTOBUF_FIELD_OFFSET(RequestBeginBlock, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBeginBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestDeliverTx::_Internal {
 public:
};

RequestDeliverTx::RequestDeliverTx(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.RequestDeliverTx)
}
RequestDeliverTx::RequestDeliverTx(const RequestDeliverTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx().empty()) {
    tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.RequestDeliverTx)
}

void RequestDeliverTx::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestDeliverTx_tm_2freplay_2eproto.base);
  tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequestDeliverTx::~RequestDeliverTx() {
  // @@protoc_insertion_point(destructor:vega.RequestDeliverTx)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestDeliverTx::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestDeliverTx::ArenaDtor(void* object) {
  RequestDeliverTx* _this = reinterpret_cast< RequestDeliverTx* >(object);
  (void)_this;
}
void RequestDeliverTx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestDeliverTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestDeliverTx& RequestDeliverTx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestDeliverTx_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void RequestDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.RequestDeliverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestDeliverTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes tx = 1 [json_name = "tx"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestDeliverTx::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.RequestDeliverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1 [json_name = "tx"];
  if (this->tx().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.RequestDeliverTx)
  return target;
}

size_t RequestDeliverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.RequestDeliverTx)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 1 [json_name = "tx"];
  if (this->tx().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestDeliverTx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.RequestDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestDeliverTx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestDeliverTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.RequestDeliverTx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.RequestDeliverTx)
    MergeFrom(*source);
  }
}

void RequestDeliverTx::MergeFrom(const RequestDeliverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.RequestDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx().size() > 0) {
    _internal_set_tx(from._internal_tx());
  }
}

void RequestDeliverTx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.RequestDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDeliverTx::CopyFrom(const RequestDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.RequestDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDeliverTx::IsInitialized() const {
  return true;
}

void RequestDeliverTx::InternalSwap(RequestDeliverTx* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_.Swap(&other->tx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestDeliverTx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResponseInitChain::_Internal {
 public:
  static const ::vega::ConsensusParams& consensusparams(const ResponseInitChain* msg);
};

const ::vega::ConsensusParams&
ResponseInitChain::_Internal::consensusparams(const ResponseInitChain* msg) {
  return *msg->consensusparams_;
}
ResponseInitChain::ResponseInitChain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  validators_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ResponseInitChain)
}
ResponseInitChain::ResponseInitChain(const ResponseInitChain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validators_(from.validators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  apphash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_apphash().empty()) {
    apphash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_apphash(), 
      GetArena());
  }
  if (from._internal_has_consensusparams()) {
    consensusparams_ = new ::vega::ConsensusParams(*from.consensusparams_);
  } else {
    consensusparams_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.ResponseInitChain)
}

void ResponseInitChain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseInitChain_tm_2freplay_2eproto.base);
  apphash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consensusparams_ = nullptr;
}

ResponseInitChain::~ResponseInitChain() {
  // @@protoc_insertion_point(destructor:vega.ResponseInitChain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseInitChain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  apphash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete consensusparams_;
}

void ResponseInitChain::ArenaDtor(void* object) {
  ResponseInitChain* _this = reinterpret_cast< ResponseInitChain* >(object);
  (void)_this;
}
void ResponseInitChain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseInitChain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseInitChain& ResponseInitChain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseInitChain_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void ResponseInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ResponseInitChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validators_.Clear();
  apphash_.ClearToEmpty();
  if (GetArena() == nullptr && consensusparams_ != nullptr) {
    delete consensusparams_;
  }
  consensusparams_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseInitChain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.ConsensusParams consensusParams = 1 [json_name = "consensusParams"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensusparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.ValidatorUpdate validators = 2 [json_name = "validators"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes appHash = 3 [json_name = "appHash"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_apphash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseInitChain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ResponseInitChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.ConsensusParams consensusParams = 1 [json_name = "consensusParams"];
  if (this->has_consensusparams()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::consensusparams(this), target, stream);
  }

  // repeated .vega.ValidatorUpdate validators = 2 [json_name = "validators"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_validators(i), target, stream);
  }

  // bytes appHash = 3 [json_name = "appHash"];
  if (this->apphash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_apphash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ResponseInitChain)
  return target;
}

size_t ResponseInitChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ResponseInitChain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.ValidatorUpdate validators = 2 [json_name = "validators"];
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes appHash = 3 [json_name = "appHash"];
  if (this->apphash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_apphash());
  }

  // .vega.ConsensusParams consensusParams = 1 [json_name = "consensusParams"];
  if (this->has_consensusparams()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consensusparams_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseInitChain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ResponseInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseInitChain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseInitChain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ResponseInitChain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ResponseInitChain)
    MergeFrom(*source);
  }
}

void ResponseInitChain::MergeFrom(const ResponseInitChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ResponseInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validators_.MergeFrom(from.validators_);
  if (from.apphash().size() > 0) {
    _internal_set_apphash(from._internal_apphash());
  }
  if (from.has_consensusparams()) {
    _internal_mutable_consensusparams()->::vega::ConsensusParams::MergeFrom(from._internal_consensusparams());
  }
}

void ResponseInitChain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ResponseInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseInitChain::CopyFrom(const ResponseInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ResponseInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseInitChain::IsInitialized() const {
  return true;
}

void ResponseInitChain::InternalSwap(ResponseInitChain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  validators_.InternalSwap(&other->validators_);
  apphash_.Swap(&other->apphash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(consensusparams_, other->consensusparams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseInitChain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResponseBeginBlock::_Internal {
 public:
};

ResponseBeginBlock::ResponseBeginBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ResponseBeginBlock)
}
ResponseBeginBlock::ResponseBeginBlock(const ResponseBeginBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.ResponseBeginBlock)
}

void ResponseBeginBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseBeginBlock_tm_2freplay_2eproto.base);
}

ResponseBeginBlock::~ResponseBeginBlock() {
  // @@protoc_insertion_point(destructor:vega.ResponseBeginBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseBeginBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResponseBeginBlock::ArenaDtor(void* object) {
  ResponseBeginBlock* _this = reinterpret_cast< ResponseBeginBlock* >(object);
  (void)_this;
}
void ResponseBeginBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseBeginBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseBeginBlock& ResponseBeginBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseBeginBlock_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void ResponseBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ResponseBeginBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseBeginBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .vega.Event events = 1 [json_name = "events"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseBeginBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ResponseBeginBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vega.Event events = 1 [json_name = "events"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ResponseBeginBlock)
  return target;
}

size_t ResponseBeginBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ResponseBeginBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Event events = 1 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseBeginBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ResponseBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseBeginBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseBeginBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ResponseBeginBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ResponseBeginBlock)
    MergeFrom(*source);
  }
}

void ResponseBeginBlock::MergeFrom(const ResponseBeginBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ResponseBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void ResponseBeginBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ResponseBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBeginBlock::CopyFrom(const ResponseBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ResponseBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBeginBlock::IsInitialized() const {
  return true;
}

void ResponseBeginBlock::InternalSwap(ResponseBeginBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseBeginBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResponseDeliverTx::_Internal {
 public:
};

ResponseDeliverTx::ResponseDeliverTx(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ResponseDeliverTx)
}
ResponseDeliverTx::ResponseDeliverTx(const ResponseDeliverTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log().empty()) {
    log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log(), 
      GetArena());
  }
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArena());
  }
  codespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_codespace().empty()) {
    codespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_codespace(), 
      GetArena());
  }
  ::memcpy(&gaswanted_, &from.gaswanted_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gaswanted_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:vega.ResponseDeliverTx)
}

void ResponseDeliverTx::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseDeliverTx_tm_2freplay_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gaswanted_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&gaswanted_)) + sizeof(code_));
}

ResponseDeliverTx::~ResponseDeliverTx() {
  // @@protoc_insertion_point(destructor:vega.ResponseDeliverTx)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseDeliverTx::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseDeliverTx::ArenaDtor(void* object) {
  ResponseDeliverTx* _this = reinterpret_cast< ResponseDeliverTx* >(object);
  (void)_this;
}
void ResponseDeliverTx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseDeliverTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseDeliverTx& ResponseDeliverTx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseDeliverTx_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void ResponseDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ResponseDeliverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  data_.ClearToEmpty();
  log_.ClearToEmpty();
  info_.ClearToEmpty();
  codespace_.ClearToEmpty();
  ::memset(&gaswanted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&gaswanted_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseDeliverTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 code = 1 [json_name = "code"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string log = 3 [json_name = "log"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ResponseDeliverTx.log"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 4 [json_name = "info"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ResponseDeliverTx.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gasWanted = 5 [json_name = "gasWanted"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gaswanted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gasUsed = 6 [json_name = "gasUsed"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gasused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.Event events = 7 [json_name = "events"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string codespace = 8 [json_name = "codespace"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_codespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ResponseDeliverTx.codespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseDeliverTx::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ResponseDeliverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1 [json_name = "code"];
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // bytes data = 2 [json_name = "data"];
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // string log = 3 [json_name = "log"];
  if (this->log().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ResponseDeliverTx.log");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_log(), target);
  }

  // string info = 4 [json_name = "info"];
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ResponseDeliverTx.info");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_info(), target);
  }

  // int64 gasWanted = 5 [json_name = "gasWanted"];
  if (this->gaswanted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_gaswanted(), target);
  }

  // int64 gasUsed = 6 [json_name = "gasUsed"];
  if (this->gasused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_gasused(), target);
  }

  // repeated .vega.Event events = 7 [json_name = "events"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_events(i), target, stream);
  }

  // string codespace = 8 [json_name = "codespace"];
  if (this->codespace().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codespace().data(), static_cast<int>(this->_internal_codespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ResponseDeliverTx.codespace");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_codespace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ResponseDeliverTx)
  return target;
}

size_t ResponseDeliverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ResponseDeliverTx)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.Event events = 7 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 2 [json_name = "data"];
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string log = 3 [json_name = "log"];
  if (this->log().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // string info = 4 [json_name = "info"];
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // string codespace = 8 [json_name = "codespace"];
  if (this->codespace().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codespace());
  }

  // int64 gasWanted = 5 [json_name = "gasWanted"];
  if (this->gaswanted() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gaswanted());
  }

  // int64 gasUsed = 6 [json_name = "gasUsed"];
  if (this->gasused() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gasused());
  }

  // uint32 code = 1 [json_name = "code"];
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseDeliverTx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ResponseDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseDeliverTx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseDeliverTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ResponseDeliverTx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ResponseDeliverTx)
    MergeFrom(*source);
  }
}

void ResponseDeliverTx::MergeFrom(const ResponseDeliverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ResponseDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.log().size() > 0) {
    _internal_set_log(from._internal_log());
  }
  if (from.info().size() > 0) {
    _internal_set_info(from._internal_info());
  }
  if (from.codespace().size() > 0) {
    _internal_set_codespace(from._internal_codespace());
  }
  if (from.gaswanted() != 0) {
    _internal_set_gaswanted(from._internal_gaswanted());
  }
  if (from.gasused() != 0) {
    _internal_set_gasused(from._internal_gasused());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ResponseDeliverTx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ResponseDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseDeliverTx::CopyFrom(const ResponseDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ResponseDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDeliverTx::IsInitialized() const {
  return true;
}

void ResponseDeliverTx::InternalSwap(ResponseDeliverTx* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  log_.Swap(&other->log_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  codespace_.Swap(&other->codespace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseDeliverTx, code_)
      + sizeof(ResponseDeliverTx::code_)
      - PROTOBUF_FIELD_OFFSET(ResponseDeliverTx, gaswanted_)>(
          reinterpret_cast<char*>(&gaswanted_),
          reinterpret_cast<char*>(&other->gaswanted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseDeliverTx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Event::_Internal {
 public:
};

Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:vega.Event)
}

void Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_tm_2freplay_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:vega.Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Event.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.EventAttribute attributes = 2 [json_name = "attributes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1 [json_name = "type"];
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Event.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated .vega.EventAttribute attributes = 2 [json_name = "attributes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_attributes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.EventAttribute attributes = 2 [json_name = "attributes"];
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string type = 1 [json_name = "type"];
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attributes_.InternalSwap(&other->attributes_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventAttribute::_Internal {
 public:
};

EventAttribute::EventAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.EventAttribute)
}
EventAttribute::EventAttribute(const EventAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:vega.EventAttribute)
}

void EventAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventAttribute_tm_2freplay_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = false;
}

EventAttribute::~EventAttribute() {
  // @@protoc_insertion_point(destructor:vega.EventAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventAttribute::ArenaDtor(void* object) {
  EventAttribute* _this = reinterpret_cast< EventAttribute* >(object);
  (void)_this;
}
void EventAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventAttribute& EventAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventAttribute_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void EventAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.EventAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  index_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1 [json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool index = 3 [json_name = "index"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.EventAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2 [json_name = "value"];
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // bool index = 3 [json_name = "index"];
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.EventAttribute)
  return target;
}

size_t EventAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.EventAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2 [json_name = "value"];
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bool index = 3 [json_name = "index"];
  if (this->index() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.EventAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const EventAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.EventAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.EventAttribute)
    MergeFrom(*source);
  }
}

void EventAttribute::MergeFrom(const EventAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.EventAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void EventAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.EventAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventAttribute::CopyFrom(const EventAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.EventAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventAttribute::IsInitialized() const {
  return true;
}

void EventAttribute::InternalSwap(EventAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidatorUpdate::_Internal {
 public:
  static const ::vega::PublicKey& pub_key(const ValidatorUpdate* msg);
};

const ::vega::PublicKey&
ValidatorUpdate::_Internal::pub_key(const ValidatorUpdate* msg) {
  return *msg->pub_key_;
}
ValidatorUpdate::ValidatorUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ValidatorUpdate)
}
ValidatorUpdate::ValidatorUpdate(const ValidatorUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pub_key()) {
    pub_key_ = new ::vega::PublicKey(*from.pub_key_);
  } else {
    pub_key_ = nullptr;
  }
  power_ = from.power_;
  // @@protoc_insertion_point(copy_constructor:vega.ValidatorUpdate)
}

void ValidatorUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidatorUpdate_tm_2freplay_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pub_key_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&power_) -
      reinterpret_cast<char*>(&pub_key_)) + sizeof(power_));
}

ValidatorUpdate::~ValidatorUpdate() {
  // @@protoc_insertion_point(destructor:vega.ValidatorUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidatorUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pub_key_;
}

void ValidatorUpdate::ArenaDtor(void* object) {
  ValidatorUpdate* _this = reinterpret_cast< ValidatorUpdate* >(object);
  (void)_this;
}
void ValidatorUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatorUpdate& ValidatorUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidatorUpdate_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void ValidatorUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ValidatorUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pub_key_ != nullptr) {
    delete pub_key_;
  }
  pub_key_ = nullptr;
  power_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.PublicKey pub_key = 1 [json_name = "pubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 power = 2 [json_name = "power"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatorUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ValidatorUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.PublicKey pub_key = 1 [json_name = "pubKey"];
  if (this->has_pub_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pub_key(this), target, stream);
  }

  // int64 power = 2 [json_name = "power"];
  if (this->power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ValidatorUpdate)
  return target;
}

size_t ValidatorUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ValidatorUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.PublicKey pub_key = 1 [json_name = "pubKey"];
  if (this->has_pub_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pub_key_);
  }

  // int64 power = 2 [json_name = "power"];
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_power());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatorUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ValidatorUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatorUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidatorUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ValidatorUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ValidatorUpdate)
    MergeFrom(*source);
  }
}

void ValidatorUpdate::MergeFrom(const ValidatorUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ValidatorUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pub_key()) {
    _internal_mutable_pub_key()->::vega::PublicKey::MergeFrom(from._internal_pub_key());
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
}

void ValidatorUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ValidatorUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatorUpdate::CopyFrom(const ValidatorUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ValidatorUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorUpdate::IsInitialized() const {
  return true;
}

void ValidatorUpdate::InternalSwap(ValidatorUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidatorUpdate, power_)
      + sizeof(ValidatorUpdate::power_)
      - PROTOBUF_FIELD_OFFSET(ValidatorUpdate, pub_key_)>(
          reinterpret_cast<char*>(&pub_key_),
          reinterpret_cast<char*>(&other->pub_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConsensusParams::_Internal {
 public:
  static const ::vega::BlockParams& block(const ConsensusParams* msg);
  static const ::vega::EvidenceParams& evidence(const ConsensusParams* msg);
  static const ::vega::ValidatorParams& validator(const ConsensusParams* msg);
  static const ::vega::VersionParams& version(const ConsensusParams* msg);
};

const ::vega::BlockParams&
ConsensusParams::_Internal::block(const ConsensusParams* msg) {
  return *msg->block_;
}
const ::vega::EvidenceParams&
ConsensusParams::_Internal::evidence(const ConsensusParams* msg) {
  return *msg->evidence_;
}
const ::vega::ValidatorParams&
ConsensusParams::_Internal::validator(const ConsensusParams* msg) {
  return *msg->validator_;
}
const ::vega::VersionParams&
ConsensusParams::_Internal::version(const ConsensusParams* msg) {
  return *msg->version_;
}
ConsensusParams::ConsensusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ConsensusParams)
}
ConsensusParams::ConsensusParams(const ConsensusParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::vega::BlockParams(*from.block_);
  } else {
    block_ = nullptr;
  }
  if (from._internal_has_evidence()) {
    evidence_ = new ::vega::EvidenceParams(*from.evidence_);
  } else {
    evidence_ = nullptr;
  }
  if (from._internal_has_validator()) {
    validator_ = new ::vega::ValidatorParams(*from.validator_);
  } else {
    validator_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::vega::VersionParams(*from.version_);
  } else {
    version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vega.ConsensusParams)
}

void ConsensusParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusParams_tm_2freplay_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&block_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&block_)) + sizeof(version_));
}

ConsensusParams::~ConsensusParams() {
  // @@protoc_insertion_point(destructor:vega.ConsensusParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConsensusParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete block_;
  if (this != internal_default_instance()) delete evidence_;
  if (this != internal_default_instance()) delete validator_;
  if (this != internal_default_instance()) delete version_;
}

void ConsensusParams::ArenaDtor(void* object) {
  ConsensusParams* _this = reinterpret_cast< ConsensusParams* >(object);
  (void)_this;
}
void ConsensusParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsensusParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusParams& ConsensusParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusParams_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void ConsensusParams::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ConsensusParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  if (GetArena() == nullptr && evidence_ != nullptr) {
    delete evidence_;
  }
  evidence_ = nullptr;
  if (GetArena() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.BlockParams block = 1 [json_name = "block"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.EvidenceParams evidence = 2 [json_name = "evidence"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_evidence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.ValidatorParams validator = 3 [json_name = "validator"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vega.VersionParams version = 4 [json_name = "version"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ConsensusParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.BlockParams block = 1 [json_name = "block"];
  if (this->has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  // .vega.EvidenceParams evidence = 2 [json_name = "evidence"];
  if (this->has_evidence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::evidence(this), target, stream);
  }

  // .vega.ValidatorParams validator = 3 [json_name = "validator"];
  if (this->has_validator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::validator(this), target, stream);
  }

  // .vega.VersionParams version = 4 [json_name = "version"];
  if (this->has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ConsensusParams)
  return target;
}

size_t ConsensusParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ConsensusParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.BlockParams block = 1 [json_name = "block"];
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // .vega.EvidenceParams evidence = 2 [json_name = "evidence"];
  if (this->has_evidence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *evidence_);
  }

  // .vega.ValidatorParams validator = 3 [json_name = "validator"];
  if (this->has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_);
  }

  // .vega.VersionParams version = 4 [json_name = "version"];
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ConsensusParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ConsensusParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ConsensusParams)
    MergeFrom(*source);
  }
}

void ConsensusParams::MergeFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ConsensusParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    _internal_mutable_block()->::vega::BlockParams::MergeFrom(from._internal_block());
  }
  if (from.has_evidence()) {
    _internal_mutable_evidence()->::vega::EvidenceParams::MergeFrom(from._internal_evidence());
  }
  if (from.has_validator()) {
    _internal_mutable_validator()->::vega::ValidatorParams::MergeFrom(from._internal_validator());
  }
  if (from.has_version()) {
    _internal_mutable_version()->::vega::VersionParams::MergeFrom(from._internal_version());
  }
}

void ConsensusParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ConsensusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusParams::CopyFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ConsensusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusParams::IsInitialized() const {
  return true;
}

void ConsensusParams::InternalSwap(ConsensusParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsensusParams, version_)
      + sizeof(ConsensusParams::version_)
      - PROTOBUF_FIELD_OFFSET(ConsensusParams, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockParams::_Internal {
 public:
};

BlockParams::BlockParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.BlockParams)
}
BlockParams::BlockParams(const BlockParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&maxbytes_, &from.maxbytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxgas_) -
    reinterpret_cast<char*>(&maxbytes_)) + sizeof(maxgas_));
  // @@protoc_insertion_point(copy_constructor:vega.BlockParams)
}

void BlockParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&maxbytes_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&maxgas_) -
      reinterpret_cast<char*>(&maxbytes_)) + sizeof(maxgas_));
}

BlockParams::~BlockParams() {
  // @@protoc_insertion_point(destructor:vega.BlockParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlockParams::ArenaDtor(void* object) {
  BlockParams* _this = reinterpret_cast< BlockParams* >(object);
  (void)_this;
}
void BlockParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockParams& BlockParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockParams_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void BlockParams::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.BlockParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&maxbytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxgas_) -
      reinterpret_cast<char*>(&maxbytes_)) + sizeof(maxgas_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 maxBytes = 1 [json_name = "maxBytes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          maxbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 maxGas = 2 [json_name = "maxGas"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxgas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.BlockParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 maxBytes = 1 [json_name = "maxBytes"];
  if (this->maxbytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_maxbytes(), target);
  }

  // int64 maxGas = 2 [json_name = "maxGas"];
  if (this->maxgas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_maxgas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.BlockParams)
  return target;
}

size_t BlockParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.BlockParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 maxBytes = 1 [json_name = "maxBytes"];
  if (this->maxbytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxbytes());
  }

  // int64 maxGas = 2 [json_name = "maxGas"];
  if (this->maxgas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxgas());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.BlockParams)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.BlockParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.BlockParams)
    MergeFrom(*source);
  }
}

void BlockParams::MergeFrom(const BlockParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.BlockParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maxbytes() != 0) {
    _internal_set_maxbytes(from._internal_maxbytes());
  }
  if (from.maxgas() != 0) {
    _internal_set_maxgas(from._internal_maxgas());
  }
}

void BlockParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.BlockParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockParams::CopyFrom(const BlockParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.BlockParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockParams::IsInitialized() const {
  return true;
}

void BlockParams::InternalSwap(BlockParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockParams, maxgas_)
      + sizeof(BlockParams::maxgas_)
      - PROTOBUF_FIELD_OFFSET(BlockParams, maxbytes_)>(
          reinterpret_cast<char*>(&maxbytes_),
          reinterpret_cast<char*>(&other->maxbytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Evidence::_Internal {
 public:
  static const ::vega::Validator& validator(const Evidence* msg);
};

const ::vega::Validator&
Evidence::_Internal::validator(const Evidence* msg) {
  return *msg->validator_;
}
Evidence::Evidence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Evidence)
}
Evidence::Evidence(const Evidence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_validator()) {
    validator_ = new ::vega::Validator(*from.validator_);
  } else {
    validator_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&height_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:vega.Evidence)
}

void Evidence::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Evidence_tm_2freplay_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&validator_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&validator_)) + sizeof(type_));
}

Evidence::~Evidence() {
  // @@protoc_insertion_point(destructor:vega.Evidence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Evidence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete validator_;
}

void Evidence::ArenaDtor(void* object) {
  Evidence* _this = reinterpret_cast< Evidence* >(object);
  (void)_this;
}
void Evidence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Evidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Evidence& Evidence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Evidence_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void Evidence::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Evidence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&height_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Evidence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.EvidenceType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vega::EvidenceType>(val));
        } else goto handle_unusual;
        continue;
      // .vega.Validator validator = 2 [json_name = "validator"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 height = 3 [json_name = "height"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 4 [json_name = "time"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 totalVotingPower = 5 [json_name = "totalVotingPower"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          totalvotingpower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Evidence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Evidence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.EvidenceType type = 1 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .vega.Validator validator = 2 [json_name = "validator"];
  if (this->has_validator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::validator(this), target, stream);
  }

  // int64 height = 3 [json_name = "height"];
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_height(), target);
  }

  // int64 time = 4 [json_name = "time"];
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time(), target);
  }

  // int64 totalVotingPower = 5 [json_name = "totalVotingPower"];
  if (this->totalvotingpower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_totalvotingpower(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Evidence)
  return target;
}

size_t Evidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Evidence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Validator validator = 2 [json_name = "validator"];
  if (this->has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_);
  }

  // int64 height = 3 [json_name = "height"];
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_height());
  }

  // int64 time = 4 [json_name = "time"];
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 totalVotingPower = 5 [json_name = "totalVotingPower"];
  if (this->totalvotingpower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_totalvotingpower());
  }

  // .vega.EvidenceType type = 1 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Evidence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Evidence)
  GOOGLE_DCHECK_NE(&from, this);
  const Evidence* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Evidence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Evidence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Evidence)
    MergeFrom(*source);
  }
}

void Evidence::MergeFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Evidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_validator()) {
    _internal_mutable_validator()->::vega::Validator::MergeFrom(from._internal_validator());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.totalvotingpower() != 0) {
    _internal_set_totalvotingpower(from._internal_totalvotingpower());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Evidence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Evidence::CopyFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Evidence::IsInitialized() const {
  return true;
}

void Evidence::InternalSwap(Evidence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Evidence, type_)
      + sizeof(Evidence::type_)
      - PROTOBUF_FIELD_OFFSET(Evidence, validator_)>(
          reinterpret_cast<char*>(&validator_),
          reinterpret_cast<char*>(&other->validator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Evidence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Validator::_Internal {
 public:
};

Validator::Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Validator)
}
Validator::Validator(const Validator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArena());
  }
  power_ = from.power_;
  // @@protoc_insertion_point(copy_constructor:vega.Validator)
}

void Validator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Validator_tm_2freplay_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  power_ = PROTOBUF_LONGLONG(0);
}

Validator::~Validator() {
  // @@protoc_insertion_point(destructor:vega.Validator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Validator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Validator::ArenaDtor(void* object) {
  Validator* _this = reinterpret_cast< Validator* >(object);
  (void)_this;
}
void Validator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Validator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Validator& Validator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Validator_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Validator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  power_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Validator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 power = 3 [json_name = "power"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Validator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Validator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1 [json_name = "address"];
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // int64 power = 3 [json_name = "power"];
  if (this->power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Validator)
  return target;
}

size_t Validator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Validator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1 [json_name = "address"];
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // int64 power = 3 [json_name = "power"];
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_power());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Validator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Validator)
  GOOGLE_DCHECK_NE(&from, this);
  const Validator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Validator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Validator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Validator)
    MergeFrom(*source);
  }
}

void Validator::MergeFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Validator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
}

void Validator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Validator::CopyFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validator::IsInitialized() const {
  return true;
}

void Validator::InternalSwap(Validator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(power_, other->power_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Validator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LastCommitInfo::_Internal {
 public:
};

LastCommitInfo::LastCommitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  votes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.LastCommitInfo)
}
LastCommitInfo::LastCommitInfo(const LastCommitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  round_ = from.round_;
  // @@protoc_insertion_point(copy_constructor:vega.LastCommitInfo)
}

void LastCommitInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LastCommitInfo_tm_2freplay_2eproto.base);
  round_ = 0;
}

LastCommitInfo::~LastCommitInfo() {
  // @@protoc_insertion_point(destructor:vega.LastCommitInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LastCommitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LastCommitInfo::ArenaDtor(void* object) {
  LastCommitInfo* _this = reinterpret_cast< LastCommitInfo* >(object);
  (void)_this;
}
void LastCommitInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LastCommitInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LastCommitInfo& LastCommitInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LastCommitInfo_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void LastCommitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.LastCommitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  round_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastCommitInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 round = 1 [json_name = "round"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vega.VoteInfo votes = 2 [json_name = "votes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LastCommitInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.LastCommitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 round = 1 [json_name = "round"];
  if (this->round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_round(), target);
  }

  // repeated .vega.VoteInfo votes = 2 [json_name = "votes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_votes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.LastCommitInfo)
  return target;
}

size_t LastCommitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.LastCommitInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vega.VoteInfo votes = 2 [json_name = "votes"];
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 round = 1 [json_name = "round"];
  if (this->round() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_round());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LastCommitInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.LastCommitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LastCommitInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LastCommitInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.LastCommitInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.LastCommitInfo)
    MergeFrom(*source);
  }
}

void LastCommitInfo::MergeFrom(const LastCommitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.LastCommitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
  if (from.round() != 0) {
    _internal_set_round(from._internal_round());
  }
}

void LastCommitInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.LastCommitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastCommitInfo::CopyFrom(const LastCommitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.LastCommitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastCommitInfo::IsInitialized() const {
  return true;
}

void LastCommitInfo::InternalSwap(LastCommitInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  votes_.InternalSwap(&other->votes_);
  swap(round_, other->round_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LastCommitInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoteInfo::_Internal {
 public:
  static const ::vega::Validator& validator(const VoteInfo* msg);
};

const ::vega::Validator&
VoteInfo::_Internal::validator(const VoteInfo* msg) {
  return *msg->validator_;
}
VoteInfo::VoteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.VoteInfo)
}
VoteInfo::VoteInfo(const VoteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_validator()) {
    validator_ = new ::vega::Validator(*from.validator_);
  } else {
    validator_ = nullptr;
  }
  signedlastblock_ = from.signedlastblock_;
  // @@protoc_insertion_point(copy_constructor:vega.VoteInfo)
}

void VoteInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoteInfo_tm_2freplay_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&validator_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&signedlastblock_) -
      reinterpret_cast<char*>(&validator_)) + sizeof(signedlastblock_));
}

VoteInfo::~VoteInfo() {
  // @@protoc_insertion_point(destructor:vega.VoteInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete validator_;
}

void VoteInfo::ArenaDtor(void* object) {
  VoteInfo* _this = reinterpret_cast< VoteInfo* >(object);
  (void)_this;
}
void VoteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteInfo& VoteInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoteInfo_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void VoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.VoteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
  signedlastblock_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vega.Validator validator = 1 [json_name = "validator"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool signedLastBlock = 2 [json_name = "signedLastBlock"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          signedlastblock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.VoteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vega.Validator validator = 1 [json_name = "validator"];
  if (this->has_validator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::validator(this), target, stream);
  }

  // bool signedLastBlock = 2 [json_name = "signedLastBlock"];
  if (this->signedlastblock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_signedlastblock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.VoteInfo)
  return target;
}

size_t VoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.VoteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vega.Validator validator = 1 [json_name = "validator"];
  if (this->has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_);
  }

  // bool signedLastBlock = 2 [json_name = "signedLastBlock"];
  if (this->signedlastblock() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.VoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.VoteInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.VoteInfo)
    MergeFrom(*source);
  }
}

void VoteInfo::MergeFrom(const VoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.VoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_validator()) {
    _internal_mutable_validator()->::vega::Validator::MergeFrom(from._internal_validator());
  }
  if (from.signedlastblock() != 0) {
    _internal_set_signedlastblock(from._internal_signedlastblock());
  }
}

void VoteInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.VoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteInfo::CopyFrom(const VoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.VoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteInfo::IsInitialized() const {
  return true;
}

void VoteInfo::InternalSwap(VoteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteInfo, signedlastblock_)
      + sizeof(VoteInfo::signedlastblock_)
      - PROTOBUF_FIELD_OFFSET(VoteInfo, validator_)>(
          reinterpret_cast<char*>(&validator_),
          reinterpret_cast<char*>(&other->validator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EvidenceParams::_Internal {
 public:
};

EvidenceParams::EvidenceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.EvidenceParams)
}
EvidenceParams::EvidenceParams(const EvidenceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&maxagenumblocks_, &from.maxagenumblocks_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_num_) -
    reinterpret_cast<char*>(&maxagenumblocks_)) + sizeof(max_num_));
  // @@protoc_insertion_point(copy_constructor:vega.EvidenceParams)
}

void EvidenceParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&maxagenumblocks_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_num_) -
      reinterpret_cast<char*>(&maxagenumblocks_)) + sizeof(max_num_));
}

EvidenceParams::~EvidenceParams() {
  // @@protoc_insertion_point(destructor:vega.EvidenceParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EvidenceParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EvidenceParams::ArenaDtor(void* object) {
  EvidenceParams* _this = reinterpret_cast< EvidenceParams* >(object);
  (void)_this;
}
void EvidenceParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvidenceParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EvidenceParams& EvidenceParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EvidenceParams_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void EvidenceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.EvidenceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&maxagenumblocks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_) -
      reinterpret_cast<char*>(&maxagenumblocks_)) + sizeof(max_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvidenceParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 maxAgeNumBlocks = 1 [json_name = "maxAgeNumBlocks"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          maxagenumblocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 maxAgeDuration = 2 [json_name = "maxAgeDuration"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxageduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_num = 3 [json_name = "maxNum"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EvidenceParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.EvidenceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 maxAgeNumBlocks = 1 [json_name = "maxAgeNumBlocks"];
  if (this->maxagenumblocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_maxagenumblocks(), target);
  }

  // int64 maxAgeDuration = 2 [json_name = "maxAgeDuration"];
  if (this->maxageduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_maxageduration(), target);
  }

  // uint32 max_num = 3 [json_name = "maxNum"];
  if (this->max_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.EvidenceParams)
  return target;
}

size_t EvidenceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.EvidenceParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 maxAgeNumBlocks = 1 [json_name = "maxAgeNumBlocks"];
  if (this->maxagenumblocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxagenumblocks());
  }

  // int64 maxAgeDuration = 2 [json_name = "maxAgeDuration"];
  if (this->maxageduration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maxageduration());
  }

  // uint32 max_num = 3 [json_name = "maxNum"];
  if (this->max_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvidenceParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.EvidenceParams)
  GOOGLE_DCHECK_NE(&from, this);
  const EvidenceParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EvidenceParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.EvidenceParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.EvidenceParams)
    MergeFrom(*source);
  }
}

void EvidenceParams::MergeFrom(const EvidenceParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.EvidenceParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maxagenumblocks() != 0) {
    _internal_set_maxagenumblocks(from._internal_maxagenumblocks());
  }
  if (from.maxageduration() != 0) {
    _internal_set_maxageduration(from._internal_maxageduration());
  }
  if (from.max_num() != 0) {
    _internal_set_max_num(from._internal_max_num());
  }
}

void EvidenceParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.EvidenceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvidenceParams::CopyFrom(const EvidenceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.EvidenceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvidenceParams::IsInitialized() const {
  return true;
}

void EvidenceParams::InternalSwap(EvidenceParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvidenceParams, max_num_)
      + sizeof(EvidenceParams::max_num_)
      - PROTOBUF_FIELD_OFFSET(EvidenceParams, maxagenumblocks_)>(
          reinterpret_cast<char*>(&maxagenumblocks_),
          reinterpret_cast<char*>(&other->maxagenumblocks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvidenceParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidatorParams::_Internal {
 public:
};

ValidatorParams::ValidatorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pubkeytypes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.ValidatorParams)
}
ValidatorParams::ValidatorParams(const ValidatorParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pubkeytypes_(from.pubkeytypes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vega.ValidatorParams)
}

void ValidatorParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidatorParams_tm_2freplay_2eproto.base);
}

ValidatorParams::~ValidatorParams() {
  // @@protoc_insertion_point(destructor:vega.ValidatorParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidatorParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ValidatorParams::ArenaDtor(void* object) {
  ValidatorParams* _this = reinterpret_cast< ValidatorParams* >(object);
  (void)_this;
}
void ValidatorParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatorParams& ValidatorParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidatorParams_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void ValidatorParams::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.ValidatorParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkeytypes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string pubKeyTypes = 1 [json_name = "pubKeyTypes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pubkeytypes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.ValidatorParams.pubKeyTypes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatorParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.ValidatorParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pubKeyTypes = 1 [json_name = "pubKeyTypes"];
  for (int i = 0, n = this->_internal_pubkeytypes_size(); i < n; i++) {
    const auto& s = this->_internal_pubkeytypes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.ValidatorParams.pubKeyTypes");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.ValidatorParams)
  return target;
}

size_t ValidatorParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.ValidatorParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pubKeyTypes = 1 [json_name = "pubKeyTypes"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pubkeytypes_.size());
  for (int i = 0, n = pubkeytypes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pubkeytypes_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatorParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.ValidatorParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatorParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidatorParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.ValidatorParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.ValidatorParams)
    MergeFrom(*source);
  }
}

void ValidatorParams::MergeFrom(const ValidatorParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.ValidatorParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pubkeytypes_.MergeFrom(from.pubkeytypes_);
}

void ValidatorParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.ValidatorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatorParams::CopyFrom(const ValidatorParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.ValidatorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorParams::IsInitialized() const {
  return true;
}

void ValidatorParams::InternalSwap(ValidatorParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pubkeytypes_.InternalSwap(&other->pubkeytypes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VersionParams::_Internal {
 public:
};

VersionParams::VersionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.VersionParams)
}
VersionParams::VersionParams(const VersionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appversion_ = from.appversion_;
  // @@protoc_insertion_point(copy_constructor:vega.VersionParams)
}

void VersionParams::SharedCtor() {
  appversion_ = PROTOBUF_ULONGLONG(0);
}

VersionParams::~VersionParams() {
  // @@protoc_insertion_point(destructor:vega.VersionParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VersionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VersionParams::ArenaDtor(void* object) {
  VersionParams* _this = reinterpret_cast< VersionParams* >(object);
  (void)_this;
}
void VersionParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionParams& VersionParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionParams_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void VersionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.VersionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appversion_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 appVersion = 1 [json_name = "appVersion"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          appversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.VersionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 appVersion = 1 [json_name = "appVersion"];
  if (this->appversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_appversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.VersionParams)
  return target;
}

size_t VersionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.VersionParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 appVersion = 1 [json_name = "appVersion"];
  if (this->appversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_appversion());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.VersionParams)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.VersionParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.VersionParams)
    MergeFrom(*source);
  }
}

void VersionParams::MergeFrom(const VersionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.VersionParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.appversion() != 0) {
    _internal_set_appversion(from._internal_appversion());
  }
}

void VersionParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.VersionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionParams::CopyFrom(const VersionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.VersionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionParams::IsInitialized() const {
  return true;
}

void VersionParams::InternalSwap(VersionParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(appversion_, other->appversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Header::_Internal {
 public:
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chainid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chainid().empty()) {
    chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chainid(), 
      GetArena());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&height_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:vega.Header)
}

void Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Header_tm_2freplay_2eproto.base);
  chainid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&height_)) + sizeof(time_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:vega.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chainid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Header_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chainid_.ClearToEmpty();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&height_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string chainId = 1 [json_name = "chainId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chainid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vega.Header.chainId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 3 [json_name = "time"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string chainId = 1 [json_name = "chainId"];
  if (this->chainid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chainid().data(), static_cast<int>(this->_internal_chainid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vega.Header.chainId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chainid(), target);
  }

  // int64 height = 2 [json_name = "height"];
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_height(), target);
  }

  // int64 time = 3 [json_name = "time"];
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chainId = 1 [json_name = "chainId"];
  if (this->chainid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chainid());
  }

  // int64 height = 2 [json_name = "height"];
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_height());
  }

  // int64 time = 3 [json_name = "time"];
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chainid().size() > 0) {
    _internal_set_chainid(from._internal_chainid());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chainid_.Swap(&other->chainid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, time_)
      + sizeof(Header::time_)
      - PROTOBUF_FIELD_OFFSET(Header, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PublicKey::_Internal {
 public:
};

PublicKey::PublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vega.PublicKey)
}
PublicKey::PublicKey(const PublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kEd25519: {
      _internal_set_ed25519(from._internal_ed25519());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vega.PublicKey)
}

void PublicKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublicKey_tm_2freplay_2eproto.base);
  clear_has_sum();
}

PublicKey::~PublicKey() {
  // @@protoc_insertion_point(destructor:vega.PublicKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void PublicKey::ArenaDtor(void* object) {
  PublicKey* _this = reinterpret_cast< PublicKey* >(object);
  (void)_this;
}
void PublicKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublicKey& PublicKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublicKey_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void PublicKey::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:vega.PublicKey)
  switch (sum_case()) {
    case kEd25519: {
      sum_.ed25519_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUM_NOT_SET;
}


void PublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:vega.PublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes ed25519 = 1 [json_name = "ed25519"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ed25519();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublicKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vega.PublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ed25519 = 1 [json_name = "ed25519"];
  if (_internal_has_ed25519()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ed25519(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vega.PublicKey)
  return target;
}

size_t PublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vega.PublicKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // bytes ed25519 = 1 [json_name = "ed25519"];
    case kEd25519: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ed25519());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vega.PublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vega.PublicKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vega.PublicKey)
    MergeFrom(*source);
  }
}

void PublicKey::MergeFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vega.PublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kEd25519: {
      _internal_set_ed25519(from._internal_ed25519());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
}

void PublicKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vega.PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicKey::CopyFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vega.PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKey::IsInitialized() const {
  return true;
}

void PublicKey::InternalSwap(PublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sum_, other->sum_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicKey::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vega::TmEvent* Arena::CreateMaybeMessage< ::vega::TmEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::TmEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RequestInitChain* Arena::CreateMaybeMessage< ::vega::RequestInitChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::RequestInitChain >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RequestBeginBlock* Arena::CreateMaybeMessage< ::vega::RequestBeginBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::RequestBeginBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::RequestDeliverTx* Arena::CreateMaybeMessage< ::vega::RequestDeliverTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::RequestDeliverTx >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ResponseInitChain* Arena::CreateMaybeMessage< ::vega::ResponseInitChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ResponseInitChain >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ResponseBeginBlock* Arena::CreateMaybeMessage< ::vega::ResponseBeginBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ResponseBeginBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ResponseDeliverTx* Arena::CreateMaybeMessage< ::vega::ResponseDeliverTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ResponseDeliverTx >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Event* Arena::CreateMaybeMessage< ::vega::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::EventAttribute* Arena::CreateMaybeMessage< ::vega::EventAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::EventAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ValidatorUpdate* Arena::CreateMaybeMessage< ::vega::ValidatorUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ValidatorUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ConsensusParams* Arena::CreateMaybeMessage< ::vega::ConsensusParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ConsensusParams >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::BlockParams* Arena::CreateMaybeMessage< ::vega::BlockParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::BlockParams >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Evidence* Arena::CreateMaybeMessage< ::vega::Evidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Evidence >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Validator* Arena::CreateMaybeMessage< ::vega::Validator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Validator >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::LastCommitInfo* Arena::CreateMaybeMessage< ::vega::LastCommitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::LastCommitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::VoteInfo* Arena::CreateMaybeMessage< ::vega::VoteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::VoteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::EvidenceParams* Arena::CreateMaybeMessage< ::vega::EvidenceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::EvidenceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::ValidatorParams* Arena::CreateMaybeMessage< ::vega::ValidatorParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::ValidatorParams >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::VersionParams* Arena::CreateMaybeMessage< ::vega::VersionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::VersionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::Header* Arena::CreateMaybeMessage< ::vega::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::vega::PublicKey* Arena::CreateMaybeMessage< ::vega::PublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vega::PublicKey >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
