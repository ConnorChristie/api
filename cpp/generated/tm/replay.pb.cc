// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tm/replay.proto

#include "tm/replay.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockParams_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ConsensusParams_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventAttribute_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Evidence_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EvidenceParams_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LastCommitInfo_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicKey_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RequestBeginBlock_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestDeliverTx_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RequestInitChain_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseBeginBlock_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseDeliverTx_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResponseInitChain_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Validator_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidatorParams_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidatorUpdate_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionParams_tm_2freplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tm_2freplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VoteInfo_tm_2freplay_2eproto;
namespace tm {
class TmEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TmEvent> _instance;
} _TmEvent_default_instance_;
class RequestInitChainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestInitChain> _instance;
} _RequestInitChain_default_instance_;
class RequestBeginBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestBeginBlock> _instance;
} _RequestBeginBlock_default_instance_;
class RequestDeliverTxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestDeliverTx> _instance;
} _RequestDeliverTx_default_instance_;
class ResponseInitChainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseInitChain> _instance;
} _ResponseInitChain_default_instance_;
class ResponseBeginBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseBeginBlock> _instance;
} _ResponseBeginBlock_default_instance_;
class ResponseDeliverTxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseDeliverTx> _instance;
} _ResponseDeliverTx_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
} _Event_default_instance_;
class EventAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventAttribute> _instance;
} _EventAttribute_default_instance_;
class ValidatorUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidatorUpdate> _instance;
} _ValidatorUpdate_default_instance_;
class ConsensusParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusParams> _instance;
} _ConsensusParams_default_instance_;
class BlockParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockParams> _instance;
} _BlockParams_default_instance_;
class EvidenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Evidence> _instance;
} _Evidence_default_instance_;
class ValidatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Validator> _instance;
} _Validator_default_instance_;
class LastCommitInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LastCommitInfo> _instance;
} _LastCommitInfo_default_instance_;
class VoteInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoteInfo> _instance;
} _VoteInfo_default_instance_;
class EvidenceParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EvidenceParams> _instance;
} _EvidenceParams_default_instance_;
class ValidatorParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidatorParams> _instance;
} _ValidatorParams_default_instance_;
class VersionParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionParams> _instance;
} _VersionParams_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
class PublicKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublicKey> _instance;
} _PublicKey_default_instance_;
}  // namespace tm
static void InitDefaultsscc_info_BlockParams_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_BlockParams_default_instance_;
    new (ptr) ::tm::BlockParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockParams_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockParams_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_ConsensusParams_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_ConsensusParams_default_instance_;
    new (ptr) ::tm::ConsensusParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ConsensusParams_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ConsensusParams_tm_2freplay_2eproto}, {
      &scc_info_BlockParams_tm_2freplay_2eproto.base,
      &scc_info_EvidenceParams_tm_2freplay_2eproto.base,
      &scc_info_ValidatorParams_tm_2freplay_2eproto.base,
      &scc_info_VersionParams_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_Event_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_Event_default_instance_;
    new (ptr) ::tm::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Event_tm_2freplay_2eproto}, {
      &scc_info_EventAttribute_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_EventAttribute_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_EventAttribute_default_instance_;
    new (ptr) ::tm::EventAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventAttribute_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EventAttribute_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_Evidence_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_Evidence_default_instance_;
    new (ptr) ::tm::Evidence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Evidence_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Evidence_tm_2freplay_2eproto}, {
      &scc_info_Validator_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_EvidenceParams_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_EvidenceParams_default_instance_;
    new (ptr) ::tm::EvidenceParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EvidenceParams_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EvidenceParams_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_Header_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_Header_default_instance_;
    new (ptr) ::tm::Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Header_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_LastCommitInfo_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_LastCommitInfo_default_instance_;
    new (ptr) ::tm::LastCommitInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LastCommitInfo_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LastCommitInfo_tm_2freplay_2eproto}, {
      &scc_info_VoteInfo_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_PublicKey_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_PublicKey_default_instance_;
    new (ptr) ::tm::PublicKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublicKey_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PublicKey_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_RequestBeginBlock_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_RequestBeginBlock_default_instance_;
    new (ptr) ::tm::RequestBeginBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RequestBeginBlock_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RequestBeginBlock_tm_2freplay_2eproto}, {
      &scc_info_Header_tm_2freplay_2eproto.base,
      &scc_info_LastCommitInfo_tm_2freplay_2eproto.base,
      &scc_info_Evidence_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_RequestDeliverTx_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_RequestDeliverTx_default_instance_;
    new (ptr) ::tm::RequestDeliverTx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestDeliverTx_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestDeliverTx_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_RequestInitChain_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_RequestInitChain_default_instance_;
    new (ptr) ::tm::RequestInitChain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RequestInitChain_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RequestInitChain_tm_2freplay_2eproto}, {
      &scc_info_ConsensusParams_tm_2freplay_2eproto.base,
      &scc_info_ValidatorUpdate_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_ResponseBeginBlock_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_ResponseBeginBlock_default_instance_;
    new (ptr) ::tm::ResponseBeginBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseBeginBlock_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResponseBeginBlock_tm_2freplay_2eproto}, {
      &scc_info_Event_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_ResponseDeliverTx_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_ResponseDeliverTx_default_instance_;
    new (ptr) ::tm::ResponseDeliverTx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseDeliverTx_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResponseDeliverTx_tm_2freplay_2eproto}, {
      &scc_info_Event_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_ResponseInitChain_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_ResponseInitChain_default_instance_;
    new (ptr) ::tm::ResponseInitChain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResponseInitChain_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResponseInitChain_tm_2freplay_2eproto}, {
      &scc_info_ConsensusParams_tm_2freplay_2eproto.base,
      &scc_info_ValidatorUpdate_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_TmEvent_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_TmEvent_default_instance_;
    new (ptr) ::tm::TmEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TmEvent_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_TmEvent_tm_2freplay_2eproto}, {
      &scc_info_RequestInitChain_tm_2freplay_2eproto.base,
      &scc_info_ResponseInitChain_tm_2freplay_2eproto.base,
      &scc_info_RequestDeliverTx_tm_2freplay_2eproto.base,
      &scc_info_ResponseDeliverTx_tm_2freplay_2eproto.base,
      &scc_info_RequestBeginBlock_tm_2freplay_2eproto.base,
      &scc_info_ResponseBeginBlock_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_Validator_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_Validator_default_instance_;
    new (ptr) ::tm::Validator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Validator_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Validator_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_ValidatorParams_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_ValidatorParams_default_instance_;
    new (ptr) ::tm::ValidatorParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidatorParams_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValidatorParams_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_ValidatorUpdate_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_ValidatorUpdate_default_instance_;
    new (ptr) ::tm::ValidatorUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidatorUpdate_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValidatorUpdate_tm_2freplay_2eproto}, {
      &scc_info_PublicKey_tm_2freplay_2eproto.base,}};

static void InitDefaultsscc_info_VersionParams_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_VersionParams_default_instance_;
    new (ptr) ::tm::VersionParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionParams_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VersionParams_tm_2freplay_2eproto}, {}};

static void InitDefaultsscc_info_VoteInfo_tm_2freplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tm::_VoteInfo_default_instance_;
    new (ptr) ::tm::VoteInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VoteInfo_tm_2freplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VoteInfo_tm_2freplay_2eproto}, {
      &scc_info_Validator_tm_2freplay_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tm_2freplay_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tm_2freplay_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tm_2freplay_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tm_2freplay_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::TmEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tm::TmEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tm::TmEvent, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::RequestInitChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::RequestInitChain, time_),
  PROTOBUF_FIELD_OFFSET(::tm::RequestInitChain, chain_id_),
  PROTOBUF_FIELD_OFFSET(::tm::RequestInitChain, consensus_params_),
  PROTOBUF_FIELD_OFFSET(::tm::RequestInitChain, validators_),
  PROTOBUF_FIELD_OFFSET(::tm::RequestInitChain, app_state_bytes_),
  PROTOBUF_FIELD_OFFSET(::tm::RequestInitChain, initial_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::RequestBeginBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::RequestBeginBlock, hash_),
  PROTOBUF_FIELD_OFFSET(::tm::RequestBeginBlock, header_),
  PROTOBUF_FIELD_OFFSET(::tm::RequestBeginBlock, last_commit_info_),
  PROTOBUF_FIELD_OFFSET(::tm::RequestBeginBlock, byzantine_validators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::RequestDeliverTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::RequestDeliverTx, tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::ResponseInitChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::ResponseInitChain, consensus_params_),
  PROTOBUF_FIELD_OFFSET(::tm::ResponseInitChain, validators_),
  PROTOBUF_FIELD_OFFSET(::tm::ResponseInitChain, app_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::ResponseBeginBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::ResponseBeginBlock, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::ResponseDeliverTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::ResponseDeliverTx, code_),
  PROTOBUF_FIELD_OFFSET(::tm::ResponseDeliverTx, data_),
  PROTOBUF_FIELD_OFFSET(::tm::ResponseDeliverTx, log_),
  PROTOBUF_FIELD_OFFSET(::tm::ResponseDeliverTx, info_),
  PROTOBUF_FIELD_OFFSET(::tm::ResponseDeliverTx, gas_wanted_),
  PROTOBUF_FIELD_OFFSET(::tm::ResponseDeliverTx, gas_used_),
  PROTOBUF_FIELD_OFFSET(::tm::ResponseDeliverTx, events_),
  PROTOBUF_FIELD_OFFSET(::tm::ResponseDeliverTx, codespace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::Event, type_),
  PROTOBUF_FIELD_OFFSET(::tm::Event, attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::EventAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::EventAttribute, key_),
  PROTOBUF_FIELD_OFFSET(::tm::EventAttribute, value_),
  PROTOBUF_FIELD_OFFSET(::tm::EventAttribute, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::ValidatorUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::ValidatorUpdate, pub_key_),
  PROTOBUF_FIELD_OFFSET(::tm::ValidatorUpdate, power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::ConsensusParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::ConsensusParams, block_),
  PROTOBUF_FIELD_OFFSET(::tm::ConsensusParams, evidence_),
  PROTOBUF_FIELD_OFFSET(::tm::ConsensusParams, validator_),
  PROTOBUF_FIELD_OFFSET(::tm::ConsensusParams, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::BlockParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::BlockParams, max_bytes_),
  PROTOBUF_FIELD_OFFSET(::tm::BlockParams, max_gas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::Evidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::Evidence, type_),
  PROTOBUF_FIELD_OFFSET(::tm::Evidence, validator_),
  PROTOBUF_FIELD_OFFSET(::tm::Evidence, height_),
  PROTOBUF_FIELD_OFFSET(::tm::Evidence, time_),
  PROTOBUF_FIELD_OFFSET(::tm::Evidence, total_voting_power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::Validator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::Validator, address_),
  PROTOBUF_FIELD_OFFSET(::tm::Validator, power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::LastCommitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::LastCommitInfo, round_),
  PROTOBUF_FIELD_OFFSET(::tm::LastCommitInfo, votes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::VoteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::VoteInfo, validator_),
  PROTOBUF_FIELD_OFFSET(::tm::VoteInfo, signed_last_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::EvidenceParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::EvidenceParams, max_age_num_blocks_),
  PROTOBUF_FIELD_OFFSET(::tm::EvidenceParams, max_age_duration_),
  PROTOBUF_FIELD_OFFSET(::tm::EvidenceParams, max_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::ValidatorParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::ValidatorParams, pub_key_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::VersionParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::VersionParams, app_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tm::Header, chain_id_),
  PROTOBUF_FIELD_OFFSET(::tm::Header, height_),
  PROTOBUF_FIELD_OFFSET(::tm::Header, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tm::PublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tm::PublicKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tm::PublicKey, sum_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tm::TmEvent)},
  { 12, -1, sizeof(::tm::RequestInitChain)},
  { 23, -1, sizeof(::tm::RequestBeginBlock)},
  { 32, -1, sizeof(::tm::RequestDeliverTx)},
  { 38, -1, sizeof(::tm::ResponseInitChain)},
  { 46, -1, sizeof(::tm::ResponseBeginBlock)},
  { 52, -1, sizeof(::tm::ResponseDeliverTx)},
  { 65, -1, sizeof(::tm::Event)},
  { 72, -1, sizeof(::tm::EventAttribute)},
  { 80, -1, sizeof(::tm::ValidatorUpdate)},
  { 87, -1, sizeof(::tm::ConsensusParams)},
  { 96, -1, sizeof(::tm::BlockParams)},
  { 103, -1, sizeof(::tm::Evidence)},
  { 113, -1, sizeof(::tm::Validator)},
  { 120, -1, sizeof(::tm::LastCommitInfo)},
  { 127, -1, sizeof(::tm::VoteInfo)},
  { 134, -1, sizeof(::tm::EvidenceParams)},
  { 142, -1, sizeof(::tm::ValidatorParams)},
  { 148, -1, sizeof(::tm::VersionParams)},
  { 154, -1, sizeof(::tm::Header)},
  { 162, -1, sizeof(::tm::PublicKey)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_TmEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_RequestInitChain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_RequestBeginBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_RequestDeliverTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_ResponseInitChain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_ResponseBeginBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_ResponseDeliverTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_EventAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_ValidatorUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_ConsensusParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_BlockParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_Evidence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_Validator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_LastCommitInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_VoteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_EvidenceParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_ValidatorParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_VersionParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tm::_PublicKey_default_instance_),
};

const char descriptor_table_protodef_tm_2freplay_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017tm/replay.proto\022\002tm\"\220\003\n\007TmEvent\022<\n\016req"
  "_init_chain\030\001 \001(\0132\024.tm.RequestInitChainH"
  "\000R\014reqInitChain\022=\n\016res_init_chain\030\002 \001(\0132"
  "\025.tm.ResponseInitChainH\000R\014resInitChain\022<"
  "\n\016req_deliver_tx\030\003 \001(\0132\024.tm.RequestDeliv"
  "erTxH\000R\014reqDeliverTx\022=\n\016res_deliver_tx\030\004"
  " \001(\0132\025.tm.ResponseDeliverTxH\000R\014resDelive"
  "rTx\022\?\n\017req_begin_block\030\005 \001(\0132\025.tm.Reques"
  "tBeginBlockH\000R\rreqBeginBlock\022@\n\017res_begi"
  "n_block\030\006 \001(\0132\026.tm.ResponseBeginBlockH\000R"
  "\rresBeginBlockB\010\n\006action\"\205\002\n\020RequestInit"
  "Chain\022\022\n\004time\030\001 \001(\003R\004time\022\031\n\010chain_id\030\002 "
  "\001(\tR\007chainId\022>\n\020consensus_params\030\003 \001(\0132\023"
  ".tm.ConsensusParamsR\017consensusParams\0223\n\n"
  "validators\030\004 \003(\0132\023.tm.ValidatorUpdateR\nv"
  "alidators\022&\n\017app_state_bytes\030\005 \001(\014R\rappS"
  "tateBytes\022%\n\016initial_height\030\006 \001(\003R\riniti"
  "alHeight\"\312\001\n\021RequestBeginBlock\022\022\n\004hash\030\001"
  " \001(\014R\004hash\022\"\n\006header\030\002 \001(\0132\n.tm.HeaderR\006"
  "header\022<\n\020last_commit_info\030\003 \001(\0132\022.tm.La"
  "stCommitInfoR\016lastCommitInfo\022\?\n\024byzantin"
  "e_validators\030\004 \003(\0132\014.tm.EvidenceR\023byzant"
  "ineValidators\"\"\n\020RequestDeliverTx\022\016\n\002tx\030"
  "\001 \001(\014R\002tx\"\243\001\n\021ResponseInitChain\022>\n\020conse"
  "nsus_params\030\001 \001(\0132\023.tm.ConsensusParamsR\017"
  "consensusParams\0223\n\nvalidators\030\002 \003(\0132\023.tm"
  ".ValidatorUpdateR\nvalidators\022\031\n\010app_hash"
  "\030\003 \001(\014R\007appHash\"7\n\022ResponseBeginBlock\022!\n"
  "\006events\030\001 \003(\0132\t.tm.EventR\006events\"\334\001\n\021Res"
  "ponseDeliverTx\022\022\n\004code\030\001 \001(\rR\004code\022\022\n\004da"
  "ta\030\002 \001(\014R\004data\022\020\n\003log\030\003 \001(\tR\003log\022\022\n\004info"
  "\030\004 \001(\tR\004info\022\035\n\ngas_wanted\030\005 \001(\003R\tgasWan"
  "ted\022\031\n\010gas_used\030\006 \001(\003R\007gasUsed\022!\n\006events"
  "\030\007 \003(\0132\t.tm.EventR\006events\022\034\n\tcodespace\030\010"
  " \001(\tR\tcodespace\"O\n\005Event\022\022\n\004type\030\001 \001(\tR\004"
  "type\0222\n\nattributes\030\002 \003(\0132\022.tm.EventAttri"
  "buteR\nattributes\"N\n\016EventAttribute\022\020\n\003ke"
  "y\030\001 \001(\014R\003key\022\024\n\005value\030\002 \001(\014R\005value\022\024\n\005in"
  "dex\030\003 \001(\010R\005index\"O\n\017ValidatorUpdate\022&\n\007p"
  "ub_key\030\001 \001(\0132\r.tm.PublicKeyR\006pubKey\022\024\n\005p"
  "ower\030\002 \001(\003R\005power\"\310\001\n\017ConsensusParams\022%\n"
  "\005block\030\001 \001(\0132\017.tm.BlockParamsR\005block\022.\n\010"
  "evidence\030\002 \001(\0132\022.tm.EvidenceParamsR\010evid"
  "ence\0221\n\tvalidator\030\003 \001(\0132\023.tm.ValidatorPa"
  "ramsR\tvalidator\022+\n\007version\030\004 \001(\0132\021.tm.Ve"
  "rsionParamsR\007version\"C\n\013BlockParams\022\033\n\tm"
  "ax_bytes\030\001 \001(\003R\010maxBytes\022\027\n\007max_gas\030\002 \001("
  "\003R\006maxGas\"\267\001\n\010Evidence\022$\n\004type\030\001 \001(\0162\020.t"
  "m.EvidenceTypeR\004type\022+\n\tvalidator\030\002 \001(\0132"
  "\r.tm.ValidatorR\tvalidator\022\026\n\006height\030\003 \001("
  "\003R\006height\022\022\n\004time\030\004 \001(\003R\004time\022,\n\022total_v"
  "oting_power\030\005 \001(\003R\020totalVotingPower\";\n\tV"
  "alidator\022\030\n\007address\030\001 \001(\014R\007address\022\024\n\005po"
  "wer\030\003 \001(\003R\005power\"J\n\016LastCommitInfo\022\024\n\005ro"
  "und\030\001 \001(\005R\005round\022\"\n\005votes\030\002 \003(\0132\014.tm.Vot"
  "eInfoR\005votes\"c\n\010VoteInfo\022+\n\tvalidator\030\001 "
  "\001(\0132\r.tm.ValidatorR\tvalidator\022*\n\021signed_"
  "last_block\030\002 \001(\010R\017signedLastBlock\"\200\001\n\016Ev"
  "idenceParams\022+\n\022max_age_num_blocks\030\001 \001(\003"
  "R\017maxAgeNumBlocks\022(\n\020max_age_duration\030\002 "
  "\001(\003R\016maxAgeDuration\022\027\n\007max_num\030\003 \001(\rR\006ma"
  "xNum\"5\n\017ValidatorParams\022\"\n\rpub_key_types"
  "\030\001 \003(\tR\013pubKeyTypes\"0\n\rVersionParams\022\037\n\013"
  "app_version\030\001 \001(\004R\nappVersion\"O\n\006Header\022"
  "\031\n\010chain_id\030\001 \001(\tR\007chainId\022\026\n\006height\030\002 \001"
  "(\003R\006height\022\022\n\004time\030\003 \001(\003R\004time\".\n\tPublic"
  "Key\022\032\n\007ed25519\030\001 \001(\014H\000R\007ed25519B\005\n\003sum*H"
  "\n\014EvidenceType\022\013\n\007UNKNOWN\020\000\022\022\n\016DUPLICATE"
  "_VOTE\020\001\022\027\n\023LIGHT_CLIENT_ATTACK\020\002B7\n\027io.v"
  "egaprotocol.vega.tmZ\034code.vegaprotocol.i"
  "o/vega/tmb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tm_2freplay_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tm_2freplay_2eproto_sccs[21] = {
  &scc_info_BlockParams_tm_2freplay_2eproto.base,
  &scc_info_ConsensusParams_tm_2freplay_2eproto.base,
  &scc_info_Event_tm_2freplay_2eproto.base,
  &scc_info_EventAttribute_tm_2freplay_2eproto.base,
  &scc_info_Evidence_tm_2freplay_2eproto.base,
  &scc_info_EvidenceParams_tm_2freplay_2eproto.base,
  &scc_info_Header_tm_2freplay_2eproto.base,
  &scc_info_LastCommitInfo_tm_2freplay_2eproto.base,
  &scc_info_PublicKey_tm_2freplay_2eproto.base,
  &scc_info_RequestBeginBlock_tm_2freplay_2eproto.base,
  &scc_info_RequestDeliverTx_tm_2freplay_2eproto.base,
  &scc_info_RequestInitChain_tm_2freplay_2eproto.base,
  &scc_info_ResponseBeginBlock_tm_2freplay_2eproto.base,
  &scc_info_ResponseDeliverTx_tm_2freplay_2eproto.base,
  &scc_info_ResponseInitChain_tm_2freplay_2eproto.base,
  &scc_info_TmEvent_tm_2freplay_2eproto.base,
  &scc_info_Validator_tm_2freplay_2eproto.base,
  &scc_info_ValidatorParams_tm_2freplay_2eproto.base,
  &scc_info_ValidatorUpdate_tm_2freplay_2eproto.base,
  &scc_info_VersionParams_tm_2freplay_2eproto.base,
  &scc_info_VoteInfo_tm_2freplay_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tm_2freplay_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tm_2freplay_2eproto = {
  false, false, descriptor_table_protodef_tm_2freplay_2eproto, "tm/replay.proto", 2817,
  &descriptor_table_tm_2freplay_2eproto_once, descriptor_table_tm_2freplay_2eproto_sccs, descriptor_table_tm_2freplay_2eproto_deps, 21, 0,
  schemas, file_default_instances, TableStruct_tm_2freplay_2eproto::offsets,
  file_level_metadata_tm_2freplay_2eproto, 21, file_level_enum_descriptors_tm_2freplay_2eproto, file_level_service_descriptors_tm_2freplay_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tm_2freplay_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tm_2freplay_2eproto)), true);
namespace tm {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EvidenceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tm_2freplay_2eproto);
  return file_level_enum_descriptors_tm_2freplay_2eproto[0];
}
bool EvidenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TmEvent::_Internal {
 public:
  static const ::tm::RequestInitChain& req_init_chain(const TmEvent* msg);
  static const ::tm::ResponseInitChain& res_init_chain(const TmEvent* msg);
  static const ::tm::RequestDeliverTx& req_deliver_tx(const TmEvent* msg);
  static const ::tm::ResponseDeliverTx& res_deliver_tx(const TmEvent* msg);
  static const ::tm::RequestBeginBlock& req_begin_block(const TmEvent* msg);
  static const ::tm::ResponseBeginBlock& res_begin_block(const TmEvent* msg);
};

const ::tm::RequestInitChain&
TmEvent::_Internal::req_init_chain(const TmEvent* msg) {
  return *msg->action_.req_init_chain_;
}
const ::tm::ResponseInitChain&
TmEvent::_Internal::res_init_chain(const TmEvent* msg) {
  return *msg->action_.res_init_chain_;
}
const ::tm::RequestDeliverTx&
TmEvent::_Internal::req_deliver_tx(const TmEvent* msg) {
  return *msg->action_.req_deliver_tx_;
}
const ::tm::ResponseDeliverTx&
TmEvent::_Internal::res_deliver_tx(const TmEvent* msg) {
  return *msg->action_.res_deliver_tx_;
}
const ::tm::RequestBeginBlock&
TmEvent::_Internal::req_begin_block(const TmEvent* msg) {
  return *msg->action_.req_begin_block_;
}
const ::tm::ResponseBeginBlock&
TmEvent::_Internal::res_begin_block(const TmEvent* msg) {
  return *msg->action_.res_begin_block_;
}
void TmEvent::set_allocated_req_init_chain(::tm::RequestInitChain* req_init_chain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (req_init_chain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(req_init_chain);
    if (message_arena != submessage_arena) {
      req_init_chain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req_init_chain, submessage_arena);
    }
    set_has_req_init_chain();
    action_.req_init_chain_ = req_init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:tm.TmEvent.req_init_chain)
}
void TmEvent::set_allocated_res_init_chain(::tm::ResponseInitChain* res_init_chain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (res_init_chain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(res_init_chain);
    if (message_arena != submessage_arena) {
      res_init_chain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, res_init_chain, submessage_arena);
    }
    set_has_res_init_chain();
    action_.res_init_chain_ = res_init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:tm.TmEvent.res_init_chain)
}
void TmEvent::set_allocated_req_deliver_tx(::tm::RequestDeliverTx* req_deliver_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (req_deliver_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(req_deliver_tx);
    if (message_arena != submessage_arena) {
      req_deliver_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req_deliver_tx, submessage_arena);
    }
    set_has_req_deliver_tx();
    action_.req_deliver_tx_ = req_deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:tm.TmEvent.req_deliver_tx)
}
void TmEvent::set_allocated_res_deliver_tx(::tm::ResponseDeliverTx* res_deliver_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (res_deliver_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(res_deliver_tx);
    if (message_arena != submessage_arena) {
      res_deliver_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, res_deliver_tx, submessage_arena);
    }
    set_has_res_deliver_tx();
    action_.res_deliver_tx_ = res_deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:tm.TmEvent.res_deliver_tx)
}
void TmEvent::set_allocated_req_begin_block(::tm::RequestBeginBlock* req_begin_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (req_begin_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(req_begin_block);
    if (message_arena != submessage_arena) {
      req_begin_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req_begin_block, submessage_arena);
    }
    set_has_req_begin_block();
    action_.req_begin_block_ = req_begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:tm.TmEvent.req_begin_block)
}
void TmEvent::set_allocated_res_begin_block(::tm::ResponseBeginBlock* res_begin_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (res_begin_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(res_begin_block);
    if (message_arena != submessage_arena) {
      res_begin_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, res_begin_block, submessage_arena);
    }
    set_has_res_begin_block();
    action_.res_begin_block_ = res_begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:tm.TmEvent.res_begin_block)
}
TmEvent::TmEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.TmEvent)
}
TmEvent::TmEvent(const TmEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kReqInitChain: {
      _internal_mutable_req_init_chain()->::tm::RequestInitChain::MergeFrom(from._internal_req_init_chain());
      break;
    }
    case kResInitChain: {
      _internal_mutable_res_init_chain()->::tm::ResponseInitChain::MergeFrom(from._internal_res_init_chain());
      break;
    }
    case kReqDeliverTx: {
      _internal_mutable_req_deliver_tx()->::tm::RequestDeliverTx::MergeFrom(from._internal_req_deliver_tx());
      break;
    }
    case kResDeliverTx: {
      _internal_mutable_res_deliver_tx()->::tm::ResponseDeliverTx::MergeFrom(from._internal_res_deliver_tx());
      break;
    }
    case kReqBeginBlock: {
      _internal_mutable_req_begin_block()->::tm::RequestBeginBlock::MergeFrom(from._internal_req_begin_block());
      break;
    }
    case kResBeginBlock: {
      _internal_mutable_res_begin_block()->::tm::ResponseBeginBlock::MergeFrom(from._internal_res_begin_block());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tm.TmEvent)
}

void TmEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TmEvent_tm_2freplay_2eproto.base);
  clear_has_action();
}

TmEvent::~TmEvent() {
  // @@protoc_insertion_point(destructor:tm.TmEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TmEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_action()) {
    clear_action();
  }
}

void TmEvent::ArenaDtor(void* object) {
  TmEvent* _this = reinterpret_cast< TmEvent* >(object);
  (void)_this;
}
void TmEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TmEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TmEvent& TmEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TmEvent_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void TmEvent::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:tm.TmEvent)
  switch (action_case()) {
    case kReqInitChain: {
      if (GetArena() == nullptr) {
        delete action_.req_init_chain_;
      }
      break;
    }
    case kResInitChain: {
      if (GetArena() == nullptr) {
        delete action_.res_init_chain_;
      }
      break;
    }
    case kReqDeliverTx: {
      if (GetArena() == nullptr) {
        delete action_.req_deliver_tx_;
      }
      break;
    }
    case kResDeliverTx: {
      if (GetArena() == nullptr) {
        delete action_.res_deliver_tx_;
      }
      break;
    }
    case kReqBeginBlock: {
      if (GetArena() == nullptr) {
        delete action_.req_begin_block_;
      }
      break;
    }
    case kResBeginBlock: {
      if (GetArena() == nullptr) {
        delete action_.res_begin_block_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void TmEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.TmEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TmEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tm.RequestInitChain req_init_chain = 1 [json_name = "reqInitChain"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req_init_chain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tm.ResponseInitChain res_init_chain = 2 [json_name = "resInitChain"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_res_init_chain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tm.RequestDeliverTx req_deliver_tx = 3 [json_name = "reqDeliverTx"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_req_deliver_tx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tm.ResponseDeliverTx res_deliver_tx = 4 [json_name = "resDeliverTx"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_res_deliver_tx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tm.RequestBeginBlock req_begin_block = 5 [json_name = "reqBeginBlock"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_req_begin_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tm.ResponseBeginBlock res_begin_block = 6 [json_name = "resBeginBlock"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_res_begin_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TmEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.TmEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tm.RequestInitChain req_init_chain = 1 [json_name = "reqInitChain"];
  if (_internal_has_req_init_chain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req_init_chain(this), target, stream);
  }

  // .tm.ResponseInitChain res_init_chain = 2 [json_name = "resInitChain"];
  if (_internal_has_res_init_chain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::res_init_chain(this), target, stream);
  }

  // .tm.RequestDeliverTx req_deliver_tx = 3 [json_name = "reqDeliverTx"];
  if (_internal_has_req_deliver_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::req_deliver_tx(this), target, stream);
  }

  // .tm.ResponseDeliverTx res_deliver_tx = 4 [json_name = "resDeliverTx"];
  if (_internal_has_res_deliver_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::res_deliver_tx(this), target, stream);
  }

  // .tm.RequestBeginBlock req_begin_block = 5 [json_name = "reqBeginBlock"];
  if (_internal_has_req_begin_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::req_begin_block(this), target, stream);
  }

  // .tm.ResponseBeginBlock res_begin_block = 6 [json_name = "resBeginBlock"];
  if (_internal_has_res_begin_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::res_begin_block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.TmEvent)
  return target;
}

size_t TmEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.TmEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (action_case()) {
    // .tm.RequestInitChain req_init_chain = 1 [json_name = "reqInitChain"];
    case kReqInitChain: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.req_init_chain_);
      break;
    }
    // .tm.ResponseInitChain res_init_chain = 2 [json_name = "resInitChain"];
    case kResInitChain: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.res_init_chain_);
      break;
    }
    // .tm.RequestDeliverTx req_deliver_tx = 3 [json_name = "reqDeliverTx"];
    case kReqDeliverTx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.req_deliver_tx_);
      break;
    }
    // .tm.ResponseDeliverTx res_deliver_tx = 4 [json_name = "resDeliverTx"];
    case kResDeliverTx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.res_deliver_tx_);
      break;
    }
    // .tm.RequestBeginBlock req_begin_block = 5 [json_name = "reqBeginBlock"];
    case kReqBeginBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.req_begin_block_);
      break;
    }
    // .tm.ResponseBeginBlock res_begin_block = 6 [json_name = "resBeginBlock"];
    case kResBeginBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.res_begin_block_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TmEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.TmEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TmEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TmEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.TmEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.TmEvent)
    MergeFrom(*source);
  }
}

void TmEvent::MergeFrom(const TmEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.TmEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kReqInitChain: {
      _internal_mutable_req_init_chain()->::tm::RequestInitChain::MergeFrom(from._internal_req_init_chain());
      break;
    }
    case kResInitChain: {
      _internal_mutable_res_init_chain()->::tm::ResponseInitChain::MergeFrom(from._internal_res_init_chain());
      break;
    }
    case kReqDeliverTx: {
      _internal_mutable_req_deliver_tx()->::tm::RequestDeliverTx::MergeFrom(from._internal_req_deliver_tx());
      break;
    }
    case kResDeliverTx: {
      _internal_mutable_res_deliver_tx()->::tm::ResponseDeliverTx::MergeFrom(from._internal_res_deliver_tx());
      break;
    }
    case kReqBeginBlock: {
      _internal_mutable_req_begin_block()->::tm::RequestBeginBlock::MergeFrom(from._internal_req_begin_block());
      break;
    }
    case kResBeginBlock: {
      _internal_mutable_res_begin_block()->::tm::ResponseBeginBlock::MergeFrom(from._internal_res_begin_block());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void TmEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.TmEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmEvent::CopyFrom(const TmEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.TmEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmEvent::IsInitialized() const {
  return true;
}

void TmEvent::InternalSwap(TmEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TmEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestInitChain::_Internal {
 public:
  static const ::tm::ConsensusParams& consensus_params(const RequestInitChain* msg);
};

const ::tm::ConsensusParams&
RequestInitChain::_Internal::consensus_params(const RequestInitChain* msg) {
  return *msg->consensus_params_;
}
RequestInitChain::RequestInitChain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  validators_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.RequestInitChain)
}
RequestInitChain::RequestInitChain(const RequestInitChain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validators_(from.validators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(),
      GetArena());
  }
  app_state_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_state_bytes().empty()) {
    app_state_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_state_bytes(),
      GetArena());
  }
  if (from._internal_has_consensus_params()) {
    consensus_params_ = new ::tm::ConsensusParams(*from.consensus_params_);
  } else {
    consensus_params_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&initial_height_) -
    reinterpret_cast<char*>(&time_)) + sizeof(initial_height_));
  // @@protoc_insertion_point(copy_constructor:tm.RequestInitChain)
}

void RequestInitChain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestInitChain_tm_2freplay_2eproto.base);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_state_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&consensus_params_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&initial_height_) -
      reinterpret_cast<char*>(&consensus_params_)) + sizeof(initial_height_));
}

RequestInitChain::~RequestInitChain() {
  // @@protoc_insertion_point(destructor:tm.RequestInitChain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestInitChain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_state_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete consensus_params_;
}

void RequestInitChain::ArenaDtor(void* object) {
  RequestInitChain* _this = reinterpret_cast< RequestInitChain* >(object);
  (void)_this;
}
void RequestInitChain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestInitChain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestInitChain& RequestInitChain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestInitChain_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void RequestInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.RequestInitChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validators_.Clear();
  chain_id_.ClearToEmpty();
  app_state_bytes_.ClearToEmpty();
  if (GetArena() == nullptr && consensus_params_ != nullptr) {
    delete consensus_params_;
  }
  consensus_params_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initial_height_) -
      reinterpret_cast<char*>(&time_)) + sizeof(initial_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestInitChain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1 [json_name = "time"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chain_id = 2 [json_name = "chainId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tm.RequestInitChain.chain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tm.ConsensusParams consensus_params = 3 [json_name = "consensusParams"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tm.ValidatorUpdate validators = 4 [json_name = "validators"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes app_state_bytes = 5 [json_name = "appStateBytes"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_app_state_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 initial_height = 6 [json_name = "initialHeight"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          initial_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestInitChain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.RequestInitChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1 [json_name = "time"];
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // string chain_id = 2 [json_name = "chainId"];
  if (this->chain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tm.RequestInitChain.chain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chain_id(), target);
  }

  // .tm.ConsensusParams consensus_params = 3 [json_name = "consensusParams"];
  if (this->has_consensus_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::consensus_params(this), target, stream);
  }

  // repeated .tm.ValidatorUpdate validators = 4 [json_name = "validators"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_validators(i), target, stream);
  }

  // bytes app_state_bytes = 5 [json_name = "appStateBytes"];
  if (this->app_state_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_app_state_bytes(), target);
  }

  // int64 initial_height = 6 [json_name = "initialHeight"];
  if (this->initial_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_initial_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.RequestInitChain)
  return target;
}

size_t RequestInitChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.RequestInitChain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tm.ValidatorUpdate validators = 4 [json_name = "validators"];
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string chain_id = 2 [json_name = "chainId"];
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // bytes app_state_bytes = 5 [json_name = "appStateBytes"];
  if (this->app_state_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_state_bytes());
  }

  // .tm.ConsensusParams consensus_params = 3 [json_name = "consensusParams"];
  if (this->has_consensus_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consensus_params_);
  }

  // int64 time = 1 [json_name = "time"];
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 initial_height = 6 [json_name = "initialHeight"];
  if (this->initial_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_initial_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestInitChain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.RequestInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestInitChain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestInitChain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.RequestInitChain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.RequestInitChain)
    MergeFrom(*source);
  }
}

void RequestInitChain::MergeFrom(const RequestInitChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.RequestInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validators_.MergeFrom(from.validators_);
  if (from.chain_id().size() > 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.app_state_bytes().size() > 0) {
    _internal_set_app_state_bytes(from._internal_app_state_bytes());
  }
  if (from.has_consensus_params()) {
    _internal_mutable_consensus_params()->::tm::ConsensusParams::MergeFrom(from._internal_consensus_params());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.initial_height() != 0) {
    _internal_set_initial_height(from._internal_initial_height());
  }
}

void RequestInitChain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.RequestInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInitChain::CopyFrom(const RequestInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.RequestInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInitChain::IsInitialized() const {
  return true;
}

void RequestInitChain::InternalSwap(RequestInitChain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  validators_.InternalSwap(&other->validators_);
  chain_id_.Swap(&other->chain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_state_bytes_.Swap(&other->app_state_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestInitChain, initial_height_)
      + sizeof(RequestInitChain::initial_height_)
      - PROTOBUF_FIELD_OFFSET(RequestInitChain, consensus_params_)>(
          reinterpret_cast<char*>(&consensus_params_),
          reinterpret_cast<char*>(&other->consensus_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestInitChain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestBeginBlock::_Internal {
 public:
  static const ::tm::Header& header(const RequestBeginBlock* msg);
  static const ::tm::LastCommitInfo& last_commit_info(const RequestBeginBlock* msg);
};

const ::tm::Header&
RequestBeginBlock::_Internal::header(const RequestBeginBlock* msg) {
  return *msg->header_;
}
const ::tm::LastCommitInfo&
RequestBeginBlock::_Internal::last_commit_info(const RequestBeginBlock* msg) {
  return *msg->last_commit_info_;
}
RequestBeginBlock::RequestBeginBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  byzantine_validators_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.RequestBeginBlock)
}
RequestBeginBlock::RequestBeginBlock(const RequestBeginBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      byzantine_validators_(from.byzantine_validators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::tm::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_last_commit_info()) {
    last_commit_info_ = new ::tm::LastCommitInfo(*from.last_commit_info_);
  } else {
    last_commit_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tm.RequestBeginBlock)
}

void RequestBeginBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestBeginBlock_tm_2freplay_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&last_commit_info_) -
      reinterpret_cast<char*>(&header_)) + sizeof(last_commit_info_));
}

RequestBeginBlock::~RequestBeginBlock() {
  // @@protoc_insertion_point(destructor:tm.RequestBeginBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestBeginBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete last_commit_info_;
}

void RequestBeginBlock::ArenaDtor(void* object) {
  RequestBeginBlock* _this = reinterpret_cast< RequestBeginBlock* >(object);
  (void)_this;
}
void RequestBeginBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestBeginBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestBeginBlock& RequestBeginBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestBeginBlock_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void RequestBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.RequestBeginBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  byzantine_validators_.Clear();
  hash_.ClearToEmpty();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && last_commit_info_ != nullptr) {
    delete last_commit_info_;
  }
  last_commit_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBeginBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1 [json_name = "hash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tm.Header header = 2 [json_name = "header"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tm.LastCommitInfo last_commit_info = 3 [json_name = "lastCommitInfo"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_commit_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tm.Evidence byzantine_validators = 4 [json_name = "byzantineValidators"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_byzantine_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestBeginBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.RequestBeginBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1 [json_name = "hash"];
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // .tm.Header header = 2 [json_name = "header"];
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header(this), target, stream);
  }

  // .tm.LastCommitInfo last_commit_info = 3 [json_name = "lastCommitInfo"];
  if (this->has_last_commit_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::last_commit_info(this), target, stream);
  }

  // repeated .tm.Evidence byzantine_validators = 4 [json_name = "byzantineValidators"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_byzantine_validators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_byzantine_validators(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.RequestBeginBlock)
  return target;
}

size_t RequestBeginBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.RequestBeginBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tm.Evidence byzantine_validators = 4 [json_name = "byzantineValidators"];
  total_size += 1UL * this->_internal_byzantine_validators_size();
  for (const auto& msg : this->byzantine_validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes hash = 1 [json_name = "hash"];
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // .tm.Header header = 2 [json_name = "header"];
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .tm.LastCommitInfo last_commit_info = 3 [json_name = "lastCommitInfo"];
  if (this->has_last_commit_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_commit_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestBeginBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.RequestBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestBeginBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestBeginBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.RequestBeginBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.RequestBeginBlock)
    MergeFrom(*source);
  }
}

void RequestBeginBlock::MergeFrom(const RequestBeginBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.RequestBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  byzantine_validators_.MergeFrom(from.byzantine_validators_);
  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::tm::Header::MergeFrom(from._internal_header());
  }
  if (from.has_last_commit_info()) {
    _internal_mutable_last_commit_info()->::tm::LastCommitInfo::MergeFrom(from._internal_last_commit_info());
  }
}

void RequestBeginBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.RequestBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBeginBlock::CopyFrom(const RequestBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.RequestBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBeginBlock::IsInitialized() const {
  return true;
}

void RequestBeginBlock::InternalSwap(RequestBeginBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  byzantine_validators_.InternalSwap(&other->byzantine_validators_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestBeginBlock, last_commit_info_)
      + sizeof(RequestBeginBlock::last_commit_info_)
      - PROTOBUF_FIELD_OFFSET(RequestBeginBlock, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBeginBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestDeliverTx::_Internal {
 public:
};

RequestDeliverTx::RequestDeliverTx(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.RequestDeliverTx)
}
RequestDeliverTx::RequestDeliverTx(const RequestDeliverTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx().empty()) {
    tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tm.RequestDeliverTx)
}

void RequestDeliverTx::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestDeliverTx_tm_2freplay_2eproto.base);
  tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequestDeliverTx::~RequestDeliverTx() {
  // @@protoc_insertion_point(destructor:tm.RequestDeliverTx)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestDeliverTx::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestDeliverTx::ArenaDtor(void* object) {
  RequestDeliverTx* _this = reinterpret_cast< RequestDeliverTx* >(object);
  (void)_this;
}
void RequestDeliverTx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestDeliverTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestDeliverTx& RequestDeliverTx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestDeliverTx_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void RequestDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.RequestDeliverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestDeliverTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes tx = 1 [json_name = "tx"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestDeliverTx::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.RequestDeliverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1 [json_name = "tx"];
  if (this->tx().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.RequestDeliverTx)
  return target;
}

size_t RequestDeliverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.RequestDeliverTx)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 1 [json_name = "tx"];
  if (this->tx().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestDeliverTx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.RequestDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestDeliverTx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestDeliverTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.RequestDeliverTx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.RequestDeliverTx)
    MergeFrom(*source);
  }
}

void RequestDeliverTx::MergeFrom(const RequestDeliverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.RequestDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx().size() > 0) {
    _internal_set_tx(from._internal_tx());
  }
}

void RequestDeliverTx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.RequestDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDeliverTx::CopyFrom(const RequestDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.RequestDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDeliverTx::IsInitialized() const {
  return true;
}

void RequestDeliverTx::InternalSwap(RequestDeliverTx* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_.Swap(&other->tx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestDeliverTx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResponseInitChain::_Internal {
 public:
  static const ::tm::ConsensusParams& consensus_params(const ResponseInitChain* msg);
};

const ::tm::ConsensusParams&
ResponseInitChain::_Internal::consensus_params(const ResponseInitChain* msg) {
  return *msg->consensus_params_;
}
ResponseInitChain::ResponseInitChain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  validators_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.ResponseInitChain)
}
ResponseInitChain::ResponseInitChain(const ResponseInitChain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validators_(from.validators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_hash().empty()) {
    app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_hash(),
      GetArena());
  }
  if (from._internal_has_consensus_params()) {
    consensus_params_ = new ::tm::ConsensusParams(*from.consensus_params_);
  } else {
    consensus_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tm.ResponseInitChain)
}

void ResponseInitChain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseInitChain_tm_2freplay_2eproto.base);
  app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consensus_params_ = nullptr;
}

ResponseInitChain::~ResponseInitChain() {
  // @@protoc_insertion_point(destructor:tm.ResponseInitChain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseInitChain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  app_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete consensus_params_;
}

void ResponseInitChain::ArenaDtor(void* object) {
  ResponseInitChain* _this = reinterpret_cast< ResponseInitChain* >(object);
  (void)_this;
}
void ResponseInitChain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseInitChain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseInitChain& ResponseInitChain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseInitChain_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void ResponseInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.ResponseInitChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validators_.Clear();
  app_hash_.ClearToEmpty();
  if (GetArena() == nullptr && consensus_params_ != nullptr) {
    delete consensus_params_;
  }
  consensus_params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseInitChain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tm.ConsensusParams consensus_params = 1 [json_name = "consensusParams"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tm.ValidatorUpdate validators = 2 [json_name = "validators"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes app_hash = 3 [json_name = "appHash"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_app_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseInitChain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.ResponseInitChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tm.ConsensusParams consensus_params = 1 [json_name = "consensusParams"];
  if (this->has_consensus_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::consensus_params(this), target, stream);
  }

  // repeated .tm.ValidatorUpdate validators = 2 [json_name = "validators"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_validators(i), target, stream);
  }

  // bytes app_hash = 3 [json_name = "appHash"];
  if (this->app_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_app_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.ResponseInitChain)
  return target;
}

size_t ResponseInitChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.ResponseInitChain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tm.ValidatorUpdate validators = 2 [json_name = "validators"];
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes app_hash = 3 [json_name = "appHash"];
  if (this->app_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_hash());
  }

  // .tm.ConsensusParams consensus_params = 1 [json_name = "consensusParams"];
  if (this->has_consensus_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consensus_params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseInitChain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.ResponseInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseInitChain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseInitChain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.ResponseInitChain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.ResponseInitChain)
    MergeFrom(*source);
  }
}

void ResponseInitChain::MergeFrom(const ResponseInitChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.ResponseInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validators_.MergeFrom(from.validators_);
  if (from.app_hash().size() > 0) {
    _internal_set_app_hash(from._internal_app_hash());
  }
  if (from.has_consensus_params()) {
    _internal_mutable_consensus_params()->::tm::ConsensusParams::MergeFrom(from._internal_consensus_params());
  }
}

void ResponseInitChain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.ResponseInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseInitChain::CopyFrom(const ResponseInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.ResponseInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseInitChain::IsInitialized() const {
  return true;
}

void ResponseInitChain::InternalSwap(ResponseInitChain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  validators_.InternalSwap(&other->validators_);
  app_hash_.Swap(&other->app_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(consensus_params_, other->consensus_params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseInitChain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResponseBeginBlock::_Internal {
 public:
};

ResponseBeginBlock::ResponseBeginBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.ResponseBeginBlock)
}
ResponseBeginBlock::ResponseBeginBlock(const ResponseBeginBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tm.ResponseBeginBlock)
}

void ResponseBeginBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseBeginBlock_tm_2freplay_2eproto.base);
}

ResponseBeginBlock::~ResponseBeginBlock() {
  // @@protoc_insertion_point(destructor:tm.ResponseBeginBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseBeginBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResponseBeginBlock::ArenaDtor(void* object) {
  ResponseBeginBlock* _this = reinterpret_cast< ResponseBeginBlock* >(object);
  (void)_this;
}
void ResponseBeginBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseBeginBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseBeginBlock& ResponseBeginBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseBeginBlock_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void ResponseBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.ResponseBeginBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseBeginBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tm.Event events = 1 [json_name = "events"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseBeginBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.ResponseBeginBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tm.Event events = 1 [json_name = "events"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.ResponseBeginBlock)
  return target;
}

size_t ResponseBeginBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.ResponseBeginBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tm.Event events = 1 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseBeginBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.ResponseBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseBeginBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseBeginBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.ResponseBeginBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.ResponseBeginBlock)
    MergeFrom(*source);
  }
}

void ResponseBeginBlock::MergeFrom(const ResponseBeginBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.ResponseBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void ResponseBeginBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.ResponseBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBeginBlock::CopyFrom(const ResponseBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.ResponseBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBeginBlock::IsInitialized() const {
  return true;
}

void ResponseBeginBlock::InternalSwap(ResponseBeginBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseBeginBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResponseDeliverTx::_Internal {
 public:
};

ResponseDeliverTx::ResponseDeliverTx(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.ResponseDeliverTx)
}
ResponseDeliverTx::ResponseDeliverTx(const ResponseDeliverTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(),
      GetArena());
  }
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log().empty()) {
    log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log(),
      GetArena());
  }
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(),
      GetArena());
  }
  codespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_codespace().empty()) {
    codespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_codespace(),
      GetArena());
  }
  ::memcpy(&gas_wanted_, &from.gas_wanted_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:tm.ResponseDeliverTx)
}

void ResponseDeliverTx::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseDeliverTx_tm_2freplay_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gas_wanted_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
}

ResponseDeliverTx::~ResponseDeliverTx() {
  // @@protoc_insertion_point(destructor:tm.ResponseDeliverTx)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseDeliverTx::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseDeliverTx::ArenaDtor(void* object) {
  ResponseDeliverTx* _this = reinterpret_cast< ResponseDeliverTx* >(object);
  (void)_this;
}
void ResponseDeliverTx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseDeliverTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseDeliverTx& ResponseDeliverTx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseDeliverTx_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void ResponseDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.ResponseDeliverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  data_.ClearToEmpty();
  log_.ClearToEmpty();
  info_.ClearToEmpty();
  codespace_.ClearToEmpty();
  ::memset(&gas_wanted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseDeliverTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 code = 1 [json_name = "code"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string log = 3 [json_name = "log"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tm.ResponseDeliverTx.log"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 4 [json_name = "info"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tm.ResponseDeliverTx.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gas_wanted = 5 [json_name = "gasWanted"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gas_wanted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gas_used = 6 [json_name = "gasUsed"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tm.Event events = 7 [json_name = "events"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string codespace = 8 [json_name = "codespace"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_codespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tm.ResponseDeliverTx.codespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseDeliverTx::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.ResponseDeliverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1 [json_name = "code"];
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // bytes data = 2 [json_name = "data"];
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // string log = 3 [json_name = "log"];
  if (this->log().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tm.ResponseDeliverTx.log");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_log(), target);
  }

  // string info = 4 [json_name = "info"];
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tm.ResponseDeliverTx.info");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_info(), target);
  }

  // int64 gas_wanted = 5 [json_name = "gasWanted"];
  if (this->gas_wanted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_gas_wanted(), target);
  }

  // int64 gas_used = 6 [json_name = "gasUsed"];
  if (this->gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_gas_used(), target);
  }

  // repeated .tm.Event events = 7 [json_name = "events"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_events(i), target, stream);
  }

  // string codespace = 8 [json_name = "codespace"];
  if (this->codespace().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codespace().data(), static_cast<int>(this->_internal_codespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tm.ResponseDeliverTx.codespace");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_codespace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.ResponseDeliverTx)
  return target;
}

size_t ResponseDeliverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.ResponseDeliverTx)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tm.Event events = 7 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 2 [json_name = "data"];
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string log = 3 [json_name = "log"];
  if (this->log().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // string info = 4 [json_name = "info"];
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // string codespace = 8 [json_name = "codespace"];
  if (this->codespace().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codespace());
  }

  // int64 gas_wanted = 5 [json_name = "gasWanted"];
  if (this->gas_wanted() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gas_wanted());
  }

  // int64 gas_used = 6 [json_name = "gasUsed"];
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gas_used());
  }

  // uint32 code = 1 [json_name = "code"];
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseDeliverTx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.ResponseDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseDeliverTx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseDeliverTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.ResponseDeliverTx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.ResponseDeliverTx)
    MergeFrom(*source);
  }
}

void ResponseDeliverTx::MergeFrom(const ResponseDeliverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.ResponseDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.log().size() > 0) {
    _internal_set_log(from._internal_log());
  }
  if (from.info().size() > 0) {
    _internal_set_info(from._internal_info());
  }
  if (from.codespace().size() > 0) {
    _internal_set_codespace(from._internal_codespace());
  }
  if (from.gas_wanted() != 0) {
    _internal_set_gas_wanted(from._internal_gas_wanted());
  }
  if (from.gas_used() != 0) {
    _internal_set_gas_used(from._internal_gas_used());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ResponseDeliverTx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.ResponseDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseDeliverTx::CopyFrom(const ResponseDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.ResponseDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDeliverTx::IsInitialized() const {
  return true;
}

void ResponseDeliverTx::InternalSwap(ResponseDeliverTx* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  log_.Swap(&other->log_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  codespace_.Swap(&other->codespace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseDeliverTx, code_)
      + sizeof(ResponseDeliverTx::code_)
      - PROTOBUF_FIELD_OFFSET(ResponseDeliverTx, gas_wanted_)>(
          reinterpret_cast<char*>(&gas_wanted_),
          reinterpret_cast<char*>(&other->gas_wanted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseDeliverTx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Event::_Internal {
 public:
};

Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tm.Event)
}

void Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_tm_2freplay_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:tm.Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tm.Event.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tm.EventAttribute attributes = 2 [json_name = "attributes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1 [json_name = "type"];
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tm.Event.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated .tm.EventAttribute attributes = 2 [json_name = "attributes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_attributes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tm.EventAttribute attributes = 2 [json_name = "attributes"];
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string type = 1 [json_name = "type"];
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attributes_.InternalSwap(&other->attributes_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventAttribute::_Internal {
 public:
};

EventAttribute::EventAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.EventAttribute)
}
EventAttribute::EventAttribute(const EventAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(),
      GetArena());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:tm.EventAttribute)
}

void EventAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventAttribute_tm_2freplay_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = false;
}

EventAttribute::~EventAttribute() {
  // @@protoc_insertion_point(destructor:tm.EventAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventAttribute::ArenaDtor(void* object) {
  EventAttribute* _this = reinterpret_cast< EventAttribute* >(object);
  (void)_this;
}
void EventAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventAttribute& EventAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventAttribute_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void EventAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.EventAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  index_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1 [json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool index = 3 [json_name = "index"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.EventAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2 [json_name = "value"];
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // bool index = 3 [json_name = "index"];
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.EventAttribute)
  return target;
}

size_t EventAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.EventAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2 [json_name = "value"];
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bool index = 3 [json_name = "index"];
  if (this->index() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.EventAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const EventAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.EventAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.EventAttribute)
    MergeFrom(*source);
  }
}

void EventAttribute::MergeFrom(const EventAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.EventAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void EventAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.EventAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventAttribute::CopyFrom(const EventAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.EventAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventAttribute::IsInitialized() const {
  return true;
}

void EventAttribute::InternalSwap(EventAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidatorUpdate::_Internal {
 public:
  static const ::tm::PublicKey& pub_key(const ValidatorUpdate* msg);
};

const ::tm::PublicKey&
ValidatorUpdate::_Internal::pub_key(const ValidatorUpdate* msg) {
  return *msg->pub_key_;
}
ValidatorUpdate::ValidatorUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.ValidatorUpdate)
}
ValidatorUpdate::ValidatorUpdate(const ValidatorUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pub_key()) {
    pub_key_ = new ::tm::PublicKey(*from.pub_key_);
  } else {
    pub_key_ = nullptr;
  }
  power_ = from.power_;
  // @@protoc_insertion_point(copy_constructor:tm.ValidatorUpdate)
}

void ValidatorUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidatorUpdate_tm_2freplay_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pub_key_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&power_) -
      reinterpret_cast<char*>(&pub_key_)) + sizeof(power_));
}

ValidatorUpdate::~ValidatorUpdate() {
  // @@protoc_insertion_point(destructor:tm.ValidatorUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidatorUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pub_key_;
}

void ValidatorUpdate::ArenaDtor(void* object) {
  ValidatorUpdate* _this = reinterpret_cast< ValidatorUpdate* >(object);
  (void)_this;
}
void ValidatorUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatorUpdate& ValidatorUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidatorUpdate_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void ValidatorUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.ValidatorUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pub_key_ != nullptr) {
    delete pub_key_;
  }
  pub_key_ = nullptr;
  power_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tm.PublicKey pub_key = 1 [json_name = "pubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 power = 2 [json_name = "power"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatorUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.ValidatorUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tm.PublicKey pub_key = 1 [json_name = "pubKey"];
  if (this->has_pub_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pub_key(this), target, stream);
  }

  // int64 power = 2 [json_name = "power"];
  if (this->power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.ValidatorUpdate)
  return target;
}

size_t ValidatorUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.ValidatorUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tm.PublicKey pub_key = 1 [json_name = "pubKey"];
  if (this->has_pub_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pub_key_);
  }

  // int64 power = 2 [json_name = "power"];
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_power());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatorUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.ValidatorUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatorUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidatorUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.ValidatorUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.ValidatorUpdate)
    MergeFrom(*source);
  }
}

void ValidatorUpdate::MergeFrom(const ValidatorUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.ValidatorUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pub_key()) {
    _internal_mutable_pub_key()->::tm::PublicKey::MergeFrom(from._internal_pub_key());
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
}

void ValidatorUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.ValidatorUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatorUpdate::CopyFrom(const ValidatorUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.ValidatorUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorUpdate::IsInitialized() const {
  return true;
}

void ValidatorUpdate::InternalSwap(ValidatorUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidatorUpdate, power_)
      + sizeof(ValidatorUpdate::power_)
      - PROTOBUF_FIELD_OFFSET(ValidatorUpdate, pub_key_)>(
          reinterpret_cast<char*>(&pub_key_),
          reinterpret_cast<char*>(&other->pub_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConsensusParams::_Internal {
 public:
  static const ::tm::BlockParams& block(const ConsensusParams* msg);
  static const ::tm::EvidenceParams& evidence(const ConsensusParams* msg);
  static const ::tm::ValidatorParams& validator(const ConsensusParams* msg);
  static const ::tm::VersionParams& version(const ConsensusParams* msg);
};

const ::tm::BlockParams&
ConsensusParams::_Internal::block(const ConsensusParams* msg) {
  return *msg->block_;
}
const ::tm::EvidenceParams&
ConsensusParams::_Internal::evidence(const ConsensusParams* msg) {
  return *msg->evidence_;
}
const ::tm::ValidatorParams&
ConsensusParams::_Internal::validator(const ConsensusParams* msg) {
  return *msg->validator_;
}
const ::tm::VersionParams&
ConsensusParams::_Internal::version(const ConsensusParams* msg) {
  return *msg->version_;
}
ConsensusParams::ConsensusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.ConsensusParams)
}
ConsensusParams::ConsensusParams(const ConsensusParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::tm::BlockParams(*from.block_);
  } else {
    block_ = nullptr;
  }
  if (from._internal_has_evidence()) {
    evidence_ = new ::tm::EvidenceParams(*from.evidence_);
  } else {
    evidence_ = nullptr;
  }
  if (from._internal_has_validator()) {
    validator_ = new ::tm::ValidatorParams(*from.validator_);
  } else {
    validator_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::tm::VersionParams(*from.version_);
  } else {
    version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tm.ConsensusParams)
}

void ConsensusParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsensusParams_tm_2freplay_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&block_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&block_)) + sizeof(version_));
}

ConsensusParams::~ConsensusParams() {
  // @@protoc_insertion_point(destructor:tm.ConsensusParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConsensusParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete block_;
  if (this != internal_default_instance()) delete evidence_;
  if (this != internal_default_instance()) delete validator_;
  if (this != internal_default_instance()) delete version_;
}

void ConsensusParams::ArenaDtor(void* object) {
  ConsensusParams* _this = reinterpret_cast< ConsensusParams* >(object);
  (void)_this;
}
void ConsensusParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsensusParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusParams& ConsensusParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusParams_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void ConsensusParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.ConsensusParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  if (GetArena() == nullptr && evidence_ != nullptr) {
    delete evidence_;
  }
  evidence_ = nullptr;
  if (GetArena() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tm.BlockParams block = 1 [json_name = "block"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tm.EvidenceParams evidence = 2 [json_name = "evidence"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_evidence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tm.ValidatorParams validator = 3 [json_name = "validator"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tm.VersionParams version = 4 [json_name = "version"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.ConsensusParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tm.BlockParams block = 1 [json_name = "block"];
  if (this->has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  // .tm.EvidenceParams evidence = 2 [json_name = "evidence"];
  if (this->has_evidence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::evidence(this), target, stream);
  }

  // .tm.ValidatorParams validator = 3 [json_name = "validator"];
  if (this->has_validator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::validator(this), target, stream);
  }

  // .tm.VersionParams version = 4 [json_name = "version"];
  if (this->has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.ConsensusParams)
  return target;
}

size_t ConsensusParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.ConsensusParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tm.BlockParams block = 1 [json_name = "block"];
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // .tm.EvidenceParams evidence = 2 [json_name = "evidence"];
  if (this->has_evidence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *evidence_);
  }

  // .tm.ValidatorParams validator = 3 [json_name = "validator"];
  if (this->has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_);
  }

  // .tm.VersionParams version = 4 [json_name = "version"];
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.ConsensusParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.ConsensusParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.ConsensusParams)
    MergeFrom(*source);
  }
}

void ConsensusParams::MergeFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.ConsensusParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    _internal_mutable_block()->::tm::BlockParams::MergeFrom(from._internal_block());
  }
  if (from.has_evidence()) {
    _internal_mutable_evidence()->::tm::EvidenceParams::MergeFrom(from._internal_evidence());
  }
  if (from.has_validator()) {
    _internal_mutable_validator()->::tm::ValidatorParams::MergeFrom(from._internal_validator());
  }
  if (from.has_version()) {
    _internal_mutable_version()->::tm::VersionParams::MergeFrom(from._internal_version());
  }
}

void ConsensusParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.ConsensusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusParams::CopyFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.ConsensusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusParams::IsInitialized() const {
  return true;
}

void ConsensusParams::InternalSwap(ConsensusParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsensusParams, version_)
      + sizeof(ConsensusParams::version_)
      - PROTOBUF_FIELD_OFFSET(ConsensusParams, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockParams::_Internal {
 public:
};

BlockParams::BlockParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.BlockParams)
}
BlockParams::BlockParams(const BlockParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_bytes_, &from.max_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_gas_) -
    reinterpret_cast<char*>(&max_bytes_)) + sizeof(max_gas_));
  // @@protoc_insertion_point(copy_constructor:tm.BlockParams)
}

void BlockParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&max_bytes_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_gas_) -
      reinterpret_cast<char*>(&max_bytes_)) + sizeof(max_gas_));
}

BlockParams::~BlockParams() {
  // @@protoc_insertion_point(destructor:tm.BlockParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlockParams::ArenaDtor(void* object) {
  BlockParams* _this = reinterpret_cast< BlockParams* >(object);
  (void)_this;
}
void BlockParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockParams& BlockParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockParams_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void BlockParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.BlockParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_gas_) -
      reinterpret_cast<char*>(&max_bytes_)) + sizeof(max_gas_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 max_bytes = 1 [json_name = "maxBytes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_gas = 2 [json_name = "maxGas"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.BlockParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_bytes = 1 [json_name = "maxBytes"];
  if (this->max_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_bytes(), target);
  }

  // int64 max_gas = 2 [json_name = "maxGas"];
  if (this->max_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_max_gas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.BlockParams)
  return target;
}

size_t BlockParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.BlockParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_bytes = 1 [json_name = "maxBytes"];
  if (this->max_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_bytes());
  }

  // int64 max_gas = 2 [json_name = "maxGas"];
  if (this->max_gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_gas());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.BlockParams)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.BlockParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.BlockParams)
    MergeFrom(*source);
  }
}

void BlockParams::MergeFrom(const BlockParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.BlockParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_bytes() != 0) {
    _internal_set_max_bytes(from._internal_max_bytes());
  }
  if (from.max_gas() != 0) {
    _internal_set_max_gas(from._internal_max_gas());
  }
}

void BlockParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.BlockParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockParams::CopyFrom(const BlockParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.BlockParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockParams::IsInitialized() const {
  return true;
}

void BlockParams::InternalSwap(BlockParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockParams, max_gas_)
      + sizeof(BlockParams::max_gas_)
      - PROTOBUF_FIELD_OFFSET(BlockParams, max_bytes_)>(
          reinterpret_cast<char*>(&max_bytes_),
          reinterpret_cast<char*>(&other->max_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Evidence::_Internal {
 public:
  static const ::tm::Validator& validator(const Evidence* msg);
};

const ::tm::Validator&
Evidence::_Internal::validator(const Evidence* msg) {
  return *msg->validator_;
}
Evidence::Evidence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.Evidence)
}
Evidence::Evidence(const Evidence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_validator()) {
    validator_ = new ::tm::Validator(*from.validator_);
  } else {
    validator_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&height_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:tm.Evidence)
}

void Evidence::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Evidence_tm_2freplay_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&validator_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&validator_)) + sizeof(type_));
}

Evidence::~Evidence() {
  // @@protoc_insertion_point(destructor:tm.Evidence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Evidence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete validator_;
}

void Evidence::ArenaDtor(void* object) {
  Evidence* _this = reinterpret_cast< Evidence* >(object);
  (void)_this;
}
void Evidence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Evidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Evidence& Evidence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Evidence_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void Evidence::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.Evidence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&height_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Evidence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tm.EvidenceType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tm::EvidenceType>(val));
        } else goto handle_unusual;
        continue;
      // .tm.Validator validator = 2 [json_name = "validator"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 height = 3 [json_name = "height"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 4 [json_name = "time"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_voting_power = 5 [json_name = "totalVotingPower"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_voting_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Evidence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.Evidence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tm.EvidenceType type = 1 [json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .tm.Validator validator = 2 [json_name = "validator"];
  if (this->has_validator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::validator(this), target, stream);
  }

  // int64 height = 3 [json_name = "height"];
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_height(), target);
  }

  // int64 time = 4 [json_name = "time"];
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time(), target);
  }

  // int64 total_voting_power = 5 [json_name = "totalVotingPower"];
  if (this->total_voting_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_total_voting_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.Evidence)
  return target;
}

size_t Evidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.Evidence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tm.Validator validator = 2 [json_name = "validator"];
  if (this->has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_);
  }

  // int64 height = 3 [json_name = "height"];
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_height());
  }

  // int64 time = 4 [json_name = "time"];
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 total_voting_power = 5 [json_name = "totalVotingPower"];
  if (this->total_voting_power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_voting_power());
  }

  // .tm.EvidenceType type = 1 [json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Evidence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.Evidence)
  GOOGLE_DCHECK_NE(&from, this);
  const Evidence* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Evidence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.Evidence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.Evidence)
    MergeFrom(*source);
  }
}

void Evidence::MergeFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.Evidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_validator()) {
    _internal_mutable_validator()->::tm::Validator::MergeFrom(from._internal_validator());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.total_voting_power() != 0) {
    _internal_set_total_voting_power(from._internal_total_voting_power());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Evidence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Evidence::CopyFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Evidence::IsInitialized() const {
  return true;
}

void Evidence::InternalSwap(Evidence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Evidence, type_)
      + sizeof(Evidence::type_)
      - PROTOBUF_FIELD_OFFSET(Evidence, validator_)>(
          reinterpret_cast<char*>(&validator_),
          reinterpret_cast<char*>(&other->validator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Evidence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Validator::_Internal {
 public:
};

Validator::Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.Validator)
}
Validator::Validator(const Validator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(),
      GetArena());
  }
  power_ = from.power_;
  // @@protoc_insertion_point(copy_constructor:tm.Validator)
}

void Validator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Validator_tm_2freplay_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  power_ = PROTOBUF_LONGLONG(0);
}

Validator::~Validator() {
  // @@protoc_insertion_point(destructor:tm.Validator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Validator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Validator::ArenaDtor(void* object) {
  Validator* _this = reinterpret_cast< Validator* >(object);
  (void)_this;
}
void Validator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Validator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Validator& Validator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Validator_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.Validator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  power_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Validator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 power = 3 [json_name = "power"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Validator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.Validator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1 [json_name = "address"];
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // int64 power = 3 [json_name = "power"];
  if (this->power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.Validator)
  return target;
}

size_t Validator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.Validator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1 [json_name = "address"];
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // int64 power = 3 [json_name = "power"];
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_power());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Validator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.Validator)
  GOOGLE_DCHECK_NE(&from, this);
  const Validator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Validator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.Validator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.Validator)
    MergeFrom(*source);
  }
}

void Validator::MergeFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.Validator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
}

void Validator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Validator::CopyFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validator::IsInitialized() const {
  return true;
}

void Validator::InternalSwap(Validator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(power_, other->power_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Validator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LastCommitInfo::_Internal {
 public:
};

LastCommitInfo::LastCommitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  votes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.LastCommitInfo)
}
LastCommitInfo::LastCommitInfo(const LastCommitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  round_ = from.round_;
  // @@protoc_insertion_point(copy_constructor:tm.LastCommitInfo)
}

void LastCommitInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LastCommitInfo_tm_2freplay_2eproto.base);
  round_ = 0;
}

LastCommitInfo::~LastCommitInfo() {
  // @@protoc_insertion_point(destructor:tm.LastCommitInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LastCommitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LastCommitInfo::ArenaDtor(void* object) {
  LastCommitInfo* _this = reinterpret_cast< LastCommitInfo* >(object);
  (void)_this;
}
void LastCommitInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LastCommitInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LastCommitInfo& LastCommitInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LastCommitInfo_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void LastCommitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.LastCommitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  round_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastCommitInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 round = 1 [json_name = "round"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tm.VoteInfo votes = 2 [json_name = "votes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LastCommitInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.LastCommitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 round = 1 [json_name = "round"];
  if (this->round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_round(), target);
  }

  // repeated .tm.VoteInfo votes = 2 [json_name = "votes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_votes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.LastCommitInfo)
  return target;
}

size_t LastCommitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.LastCommitInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tm.VoteInfo votes = 2 [json_name = "votes"];
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 round = 1 [json_name = "round"];
  if (this->round() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_round());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LastCommitInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.LastCommitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LastCommitInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LastCommitInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.LastCommitInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.LastCommitInfo)
    MergeFrom(*source);
  }
}

void LastCommitInfo::MergeFrom(const LastCommitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.LastCommitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
  if (from.round() != 0) {
    _internal_set_round(from._internal_round());
  }
}

void LastCommitInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.LastCommitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastCommitInfo::CopyFrom(const LastCommitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.LastCommitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastCommitInfo::IsInitialized() const {
  return true;
}

void LastCommitInfo::InternalSwap(LastCommitInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  votes_.InternalSwap(&other->votes_);
  swap(round_, other->round_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LastCommitInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoteInfo::_Internal {
 public:
  static const ::tm::Validator& validator(const VoteInfo* msg);
};

const ::tm::Validator&
VoteInfo::_Internal::validator(const VoteInfo* msg) {
  return *msg->validator_;
}
VoteInfo::VoteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.VoteInfo)
}
VoteInfo::VoteInfo(const VoteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_validator()) {
    validator_ = new ::tm::Validator(*from.validator_);
  } else {
    validator_ = nullptr;
  }
  signed_last_block_ = from.signed_last_block_;
  // @@protoc_insertion_point(copy_constructor:tm.VoteInfo)
}

void VoteInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoteInfo_tm_2freplay_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&validator_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&signed_last_block_) -
      reinterpret_cast<char*>(&validator_)) + sizeof(signed_last_block_));
}

VoteInfo::~VoteInfo() {
  // @@protoc_insertion_point(destructor:tm.VoteInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete validator_;
}

void VoteInfo::ArenaDtor(void* object) {
  VoteInfo* _this = reinterpret_cast< VoteInfo* >(object);
  (void)_this;
}
void VoteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteInfo& VoteInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoteInfo_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void VoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.VoteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
  signed_last_block_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tm.Validator validator = 1 [json_name = "validator"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool signed_last_block = 2 [json_name = "signedLastBlock"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          signed_last_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.VoteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tm.Validator validator = 1 [json_name = "validator"];
  if (this->has_validator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::validator(this), target, stream);
  }

  // bool signed_last_block = 2 [json_name = "signedLastBlock"];
  if (this->signed_last_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_signed_last_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.VoteInfo)
  return target;
}

size_t VoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.VoteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tm.Validator validator = 1 [json_name = "validator"];
  if (this->has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_);
  }

  // bool signed_last_block = 2 [json_name = "signedLastBlock"];
  if (this->signed_last_block() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.VoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.VoteInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.VoteInfo)
    MergeFrom(*source);
  }
}

void VoteInfo::MergeFrom(const VoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.VoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_validator()) {
    _internal_mutable_validator()->::tm::Validator::MergeFrom(from._internal_validator());
  }
  if (from.signed_last_block() != 0) {
    _internal_set_signed_last_block(from._internal_signed_last_block());
  }
}

void VoteInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.VoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteInfo::CopyFrom(const VoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.VoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteInfo::IsInitialized() const {
  return true;
}

void VoteInfo::InternalSwap(VoteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteInfo, signed_last_block_)
      + sizeof(VoteInfo::signed_last_block_)
      - PROTOBUF_FIELD_OFFSET(VoteInfo, validator_)>(
          reinterpret_cast<char*>(&validator_),
          reinterpret_cast<char*>(&other->validator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EvidenceParams::_Internal {
 public:
};

EvidenceParams::EvidenceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.EvidenceParams)
}
EvidenceParams::EvidenceParams(const EvidenceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_age_num_blocks_, &from.max_age_num_blocks_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_num_) -
    reinterpret_cast<char*>(&max_age_num_blocks_)) + sizeof(max_num_));
  // @@protoc_insertion_point(copy_constructor:tm.EvidenceParams)
}

void EvidenceParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&max_age_num_blocks_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_num_) -
      reinterpret_cast<char*>(&max_age_num_blocks_)) + sizeof(max_num_));
}

EvidenceParams::~EvidenceParams() {
  // @@protoc_insertion_point(destructor:tm.EvidenceParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EvidenceParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EvidenceParams::ArenaDtor(void* object) {
  EvidenceParams* _this = reinterpret_cast< EvidenceParams* >(object);
  (void)_this;
}
void EvidenceParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EvidenceParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EvidenceParams& EvidenceParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EvidenceParams_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void EvidenceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.EvidenceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_age_num_blocks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_) -
      reinterpret_cast<char*>(&max_age_num_blocks_)) + sizeof(max_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvidenceParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 max_age_num_blocks = 1 [json_name = "maxAgeNumBlocks"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_age_num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_age_duration = 2 [json_name = "maxAgeDuration"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_age_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_num = 3 [json_name = "maxNum"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EvidenceParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.EvidenceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_age_num_blocks = 1 [json_name = "maxAgeNumBlocks"];
  if (this->max_age_num_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_age_num_blocks(), target);
  }

  // int64 max_age_duration = 2 [json_name = "maxAgeDuration"];
  if (this->max_age_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_max_age_duration(), target);
  }

  // uint32 max_num = 3 [json_name = "maxNum"];
  if (this->max_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.EvidenceParams)
  return target;
}

size_t EvidenceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.EvidenceParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_age_num_blocks = 1 [json_name = "maxAgeNumBlocks"];
  if (this->max_age_num_blocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_age_num_blocks());
  }

  // int64 max_age_duration = 2 [json_name = "maxAgeDuration"];
  if (this->max_age_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_age_duration());
  }

  // uint32 max_num = 3 [json_name = "maxNum"];
  if (this->max_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvidenceParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.EvidenceParams)
  GOOGLE_DCHECK_NE(&from, this);
  const EvidenceParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EvidenceParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.EvidenceParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.EvidenceParams)
    MergeFrom(*source);
  }
}

void EvidenceParams::MergeFrom(const EvidenceParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.EvidenceParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_age_num_blocks() != 0) {
    _internal_set_max_age_num_blocks(from._internal_max_age_num_blocks());
  }
  if (from.max_age_duration() != 0) {
    _internal_set_max_age_duration(from._internal_max_age_duration());
  }
  if (from.max_num() != 0) {
    _internal_set_max_num(from._internal_max_num());
  }
}

void EvidenceParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.EvidenceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvidenceParams::CopyFrom(const EvidenceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.EvidenceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvidenceParams::IsInitialized() const {
  return true;
}

void EvidenceParams::InternalSwap(EvidenceParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvidenceParams, max_num_)
      + sizeof(EvidenceParams::max_num_)
      - PROTOBUF_FIELD_OFFSET(EvidenceParams, max_age_num_blocks_)>(
          reinterpret_cast<char*>(&max_age_num_blocks_),
          reinterpret_cast<char*>(&other->max_age_num_blocks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvidenceParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ValidatorParams::_Internal {
 public:
};

ValidatorParams::ValidatorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pub_key_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.ValidatorParams)
}
ValidatorParams::ValidatorParams(const ValidatorParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pub_key_types_(from.pub_key_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tm.ValidatorParams)
}

void ValidatorParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidatorParams_tm_2freplay_2eproto.base);
}

ValidatorParams::~ValidatorParams() {
  // @@protoc_insertion_point(destructor:tm.ValidatorParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidatorParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ValidatorParams::ArenaDtor(void* object) {
  ValidatorParams* _this = reinterpret_cast< ValidatorParams* >(object);
  (void)_this;
}
void ValidatorParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatorParams& ValidatorParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidatorParams_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void ValidatorParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.ValidatorParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string pub_key_types = 1 [json_name = "pubKeyTypes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pub_key_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tm.ValidatorParams.pub_key_types"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatorParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.ValidatorParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pub_key_types = 1 [json_name = "pubKeyTypes"];
  for (int i = 0, n = this->_internal_pub_key_types_size(); i < n; i++) {
    const auto& s = this->_internal_pub_key_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tm.ValidatorParams.pub_key_types");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.ValidatorParams)
  return target;
}

size_t ValidatorParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.ValidatorParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pub_key_types = 1 [json_name = "pubKeyTypes"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pub_key_types_.size());
  for (int i = 0, n = pub_key_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pub_key_types_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatorParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.ValidatorParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatorParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidatorParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.ValidatorParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.ValidatorParams)
    MergeFrom(*source);
  }
}

void ValidatorParams::MergeFrom(const ValidatorParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.ValidatorParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pub_key_types_.MergeFrom(from.pub_key_types_);
}

void ValidatorParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.ValidatorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatorParams::CopyFrom(const ValidatorParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.ValidatorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorParams::IsInitialized() const {
  return true;
}

void ValidatorParams::InternalSwap(ValidatorParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pub_key_types_.InternalSwap(&other->pub_key_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VersionParams::_Internal {
 public:
};

VersionParams::VersionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.VersionParams)
}
VersionParams::VersionParams(const VersionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_version_ = from.app_version_;
  // @@protoc_insertion_point(copy_constructor:tm.VersionParams)
}

void VersionParams::SharedCtor() {
  app_version_ = PROTOBUF_ULONGLONG(0);
}

VersionParams::~VersionParams() {
  // @@protoc_insertion_point(destructor:tm.VersionParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VersionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VersionParams::ArenaDtor(void* object) {
  VersionParams* _this = reinterpret_cast< VersionParams* >(object);
  (void)_this;
}
void VersionParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionParams& VersionParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionParams_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void VersionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.VersionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_version_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 app_version = 1 [json_name = "appVersion"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          app_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.VersionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 app_version = 1 [json_name = "appVersion"];
  if (this->app_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_app_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.VersionParams)
  return target;
}

size_t VersionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.VersionParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 app_version = 1 [json_name = "appVersion"];
  if (this->app_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_app_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.VersionParams)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.VersionParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.VersionParams)
    MergeFrom(*source);
  }
}

void VersionParams::MergeFrom(const VersionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.VersionParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.app_version() != 0) {
    _internal_set_app_version(from._internal_app_version());
  }
}

void VersionParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.VersionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionParams::CopyFrom(const VersionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.VersionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionParams::IsInitialized() const {
  return true;
}

void VersionParams::InternalSwap(VersionParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(app_version_, other->app_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Header::_Internal {
 public:
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(),
      GetArena());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&height_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:tm.Header)
}

void Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Header_tm_2freplay_2eproto.base);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&height_)) + sizeof(time_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:tm.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Header_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&height_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string chain_id = 1 [json_name = "chainId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tm.Header.chain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 3 [json_name = "time"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string chain_id = 1 [json_name = "chainId"];
  if (this->chain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tm.Header.chain_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chain_id(), target);
  }

  // int64 height = 2 [json_name = "height"];
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_height(), target);
  }

  // int64 time = 3 [json_name = "time"];
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 1 [json_name = "chainId"];
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // int64 height = 2 [json_name = "height"];
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_height());
  }

  // int64 time = 3 [json_name = "time"];
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chain_id().size() > 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chain_id_.Swap(&other->chain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, time_)
      + sizeof(Header::time_)
      - PROTOBUF_FIELD_OFFSET(Header, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PublicKey::_Internal {
 public:
};

PublicKey::PublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tm.PublicKey)
}
PublicKey::PublicKey(const PublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kEd25519: {
      _internal_set_ed25519(from._internal_ed25519());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tm.PublicKey)
}

void PublicKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublicKey_tm_2freplay_2eproto.base);
  clear_has_sum();
}

PublicKey::~PublicKey() {
  // @@protoc_insertion_point(destructor:tm.PublicKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void PublicKey::ArenaDtor(void* object) {
  PublicKey* _this = reinterpret_cast< PublicKey* >(object);
  (void)_this;
}
void PublicKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublicKey& PublicKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublicKey_tm_2freplay_2eproto.base);
  return *internal_default_instance();
}


void PublicKey::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tm.PublicKey)
  switch (sum_case()) {
    case kEd25519: {
      sum_.ed25519_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUM_NOT_SET;
}


void PublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:tm.PublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes ed25519 = 1 [json_name = "ed25519"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ed25519();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublicKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tm.PublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ed25519 = 1 [json_name = "ed25519"];
  if (_internal_has_ed25519()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ed25519(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tm.PublicKey)
  return target;
}

size_t PublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tm.PublicKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // bytes ed25519 = 1 [json_name = "ed25519"];
    case kEd25519: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ed25519());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tm.PublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tm.PublicKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tm.PublicKey)
    MergeFrom(*source);
  }
}

void PublicKey::MergeFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tm.PublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kEd25519: {
      _internal_set_ed25519(from._internal_ed25519());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
}

void PublicKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tm.PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicKey::CopyFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tm.PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKey::IsInitialized() const {
  return true;
}

void PublicKey::InternalSwap(PublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sum_, other->sum_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicKey::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tm::TmEvent* Arena::CreateMaybeMessage< ::tm::TmEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::TmEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::RequestInitChain* Arena::CreateMaybeMessage< ::tm::RequestInitChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::RequestInitChain >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::RequestBeginBlock* Arena::CreateMaybeMessage< ::tm::RequestBeginBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::RequestBeginBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::RequestDeliverTx* Arena::CreateMaybeMessage< ::tm::RequestDeliverTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::RequestDeliverTx >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::ResponseInitChain* Arena::CreateMaybeMessage< ::tm::ResponseInitChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::ResponseInitChain >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::ResponseBeginBlock* Arena::CreateMaybeMessage< ::tm::ResponseBeginBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::ResponseBeginBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::ResponseDeliverTx* Arena::CreateMaybeMessage< ::tm::ResponseDeliverTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::ResponseDeliverTx >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::Event* Arena::CreateMaybeMessage< ::tm::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::EventAttribute* Arena::CreateMaybeMessage< ::tm::EventAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::EventAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::ValidatorUpdate* Arena::CreateMaybeMessage< ::tm::ValidatorUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::ValidatorUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::ConsensusParams* Arena::CreateMaybeMessage< ::tm::ConsensusParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::ConsensusParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::BlockParams* Arena::CreateMaybeMessage< ::tm::BlockParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::BlockParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::Evidence* Arena::CreateMaybeMessage< ::tm::Evidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::Evidence >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::Validator* Arena::CreateMaybeMessage< ::tm::Validator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::Validator >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::LastCommitInfo* Arena::CreateMaybeMessage< ::tm::LastCommitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::LastCommitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::VoteInfo* Arena::CreateMaybeMessage< ::tm::VoteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::VoteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::EvidenceParams* Arena::CreateMaybeMessage< ::tm::EvidenceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::EvidenceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::ValidatorParams* Arena::CreateMaybeMessage< ::tm::ValidatorParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::ValidatorParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::VersionParams* Arena::CreateMaybeMessage< ::tm::VersionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::VersionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::Header* Arena::CreateMaybeMessage< ::tm::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::tm::PublicKey* Arena::CreateMaybeMessage< ::tm::PublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tm::PublicKey >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
