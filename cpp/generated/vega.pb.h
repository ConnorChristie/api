// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vega.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vega_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vega_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "github.com/mwitkow/go-proto-validators/validator.pb.h"
#include <google/protobuf/wrappers.pb.h>
#include "markets.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vega_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vega_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[53]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vega_2eproto;
namespace vega {
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class AuctionIndicativeState;
class AuctionIndicativeStateDefaultTypeInternal;
extern AuctionIndicativeStateDefaultTypeInternal _AuctionIndicativeState_default_instance_;
class Candle;
class CandleDefaultTypeInternal;
extern CandleDefaultTypeInternal _Candle_default_instance_;
class Deposit;
class DepositDefaultTypeInternal;
extern DepositDefaultTypeInternal _Deposit_default_instance_;
class Erc20WithdrawExt;
class Erc20WithdrawExtDefaultTypeInternal;
extern Erc20WithdrawExtDefaultTypeInternal _Erc20WithdrawExt_default_instance_;
class ErrorDetail;
class ErrorDetailDefaultTypeInternal;
extern ErrorDetailDefaultTypeInternal _ErrorDetail_default_instance_;
class EthereumConfig;
class EthereumConfigDefaultTypeInternal;
extern EthereumConfigDefaultTypeInternal _EthereumConfig_default_instance_;
class Fee;
class FeeDefaultTypeInternal;
extern FeeDefaultTypeInternal _Fee_default_instance_;
class FinancialAmount;
class FinancialAmountDefaultTypeInternal;
extern FinancialAmountDefaultTypeInternal _FinancialAmount_default_instance_;
class LedgerEntry;
class LedgerEntryDefaultTypeInternal;
extern LedgerEntryDefaultTypeInternal _LedgerEntry_default_instance_;
class LiquidityOrder;
class LiquidityOrderDefaultTypeInternal;
extern LiquidityOrderDefaultTypeInternal _LiquidityOrder_default_instance_;
class LiquidityOrderReference;
class LiquidityOrderReferenceDefaultTypeInternal;
extern LiquidityOrderReferenceDefaultTypeInternal _LiquidityOrderReference_default_instance_;
class LiquidityProvision;
class LiquidityProvisionDefaultTypeInternal;
extern LiquidityProvisionDefaultTypeInternal _LiquidityProvision_default_instance_;
class LiquidityProvisionSubmission;
class LiquidityProvisionSubmissionDefaultTypeInternal;
extern LiquidityProvisionSubmissionDefaultTypeInternal _LiquidityProvisionSubmission_default_instance_;
class MarginLevels;
class MarginLevelsDefaultTypeInternal;
extern MarginLevelsDefaultTypeInternal _MarginLevels_default_instance_;
class MarketData;
class MarketDataDefaultTypeInternal;
extern MarketDataDefaultTypeInternal _MarketData_default_instance_;
class MarketDepth;
class MarketDepthDefaultTypeInternal;
extern MarketDepthDefaultTypeInternal _MarketDepth_default_instance_;
class MarketDepthUpdate;
class MarketDepthUpdateDefaultTypeInternal;
extern MarketDepthUpdateDefaultTypeInternal _MarketDepthUpdate_default_instance_;
class NetworkParameter;
class NetworkParameterDefaultTypeInternal;
extern NetworkParameterDefaultTypeInternal _NetworkParameter_default_instance_;
class NodeRegistration;
class NodeRegistrationDefaultTypeInternal;
extern NodeRegistrationDefaultTypeInternal _NodeRegistration_default_instance_;
class NodeSignature;
class NodeSignatureDefaultTypeInternal;
extern NodeSignatureDefaultTypeInternal _NodeSignature_default_instance_;
class NodeVote;
class NodeVoteDefaultTypeInternal;
extern NodeVoteDefaultTypeInternal _NodeVote_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class OrderAmendment;
class OrderAmendmentDefaultTypeInternal;
extern OrderAmendmentDefaultTypeInternal _OrderAmendment_default_instance_;
class OrderCancellation;
class OrderCancellationDefaultTypeInternal;
extern OrderCancellationDefaultTypeInternal _OrderCancellation_default_instance_;
class OrderCancellationConfirmation;
class OrderCancellationConfirmationDefaultTypeInternal;
extern OrderCancellationConfirmationDefaultTypeInternal _OrderCancellationConfirmation_default_instance_;
class OrderConfirmation;
class OrderConfirmationDefaultTypeInternal;
extern OrderConfirmationDefaultTypeInternal _OrderConfirmation_default_instance_;
class OrderSubmission;
class OrderSubmissionDefaultTypeInternal;
extern OrderSubmissionDefaultTypeInternal _OrderSubmission_default_instance_;
class Party;
class PartyDefaultTypeInternal;
extern PartyDefaultTypeInternal _Party_default_instance_;
class PeggedOrder;
class PeggedOrderDefaultTypeInternal;
extern PeggedOrderDefaultTypeInternal _PeggedOrder_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class PositionTrade;
class PositionTradeDefaultTypeInternal;
extern PositionTradeDefaultTypeInternal _PositionTrade_default_instance_;
class Price;
class PriceDefaultTypeInternal;
extern PriceDefaultTypeInternal _Price_default_instance_;
class PriceLevel;
class PriceLevelDefaultTypeInternal;
extern PriceLevelDefaultTypeInternal _PriceLevel_default_instance_;
class PriceMonitoringBounds;
class PriceMonitoringBoundsDefaultTypeInternal;
extern PriceMonitoringBoundsDefaultTypeInternal _PriceMonitoringBounds_default_instance_;
class RiskFactor;
class RiskFactorDefaultTypeInternal;
extern RiskFactorDefaultTypeInternal _RiskFactor_default_instance_;
class RiskResult;
class RiskResultDefaultTypeInternal;
extern RiskResultDefaultTypeInternal _RiskResult_default_instance_;
class RiskResult_PredictedNextRiskFactorsEntry_DoNotUse;
class RiskResult_PredictedNextRiskFactorsEntry_DoNotUseDefaultTypeInternal;
extern RiskResult_PredictedNextRiskFactorsEntry_DoNotUseDefaultTypeInternal _RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_default_instance_;
class RiskResult_RiskFactorsEntry_DoNotUse;
class RiskResult_RiskFactorsEntry_DoNotUseDefaultTypeInternal;
extern RiskResult_RiskFactorsEntry_DoNotUseDefaultTypeInternal _RiskResult_RiskFactorsEntry_DoNotUse_default_instance_;
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class SignedBundle;
class SignedBundleDefaultTypeInternal;
extern SignedBundleDefaultTypeInternal _SignedBundle_default_instance_;
class Statistics;
class StatisticsDefaultTypeInternal;
extern StatisticsDefaultTypeInternal _Statistics_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class Trade;
class TradeDefaultTypeInternal;
extern TradeDefaultTypeInternal _Trade_default_instance_;
class TradeSet;
class TradeSetDefaultTypeInternal;
extern TradeSetDefaultTypeInternal _TradeSet_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class Transfer;
class TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
class TransferBalance;
class TransferBalanceDefaultTypeInternal;
extern TransferBalanceDefaultTypeInternal _TransferBalance_default_instance_;
class TransferRequest;
class TransferRequestDefaultTypeInternal;
extern TransferRequestDefaultTypeInternal _TransferRequest_default_instance_;
class TransferResponse;
class TransferResponseDefaultTypeInternal;
extern TransferResponseDefaultTypeInternal _TransferResponse_default_instance_;
class WithdrawExt;
class WithdrawExtDefaultTypeInternal;
extern WithdrawExtDefaultTypeInternal _WithdrawExt_default_instance_;
class WithdrawSubmission;
class WithdrawSubmissionDefaultTypeInternal;
extern WithdrawSubmissionDefaultTypeInternal _WithdrawSubmission_default_instance_;
class Withdrawal;
class WithdrawalDefaultTypeInternal;
extern WithdrawalDefaultTypeInternal _Withdrawal_default_instance_;
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> ::vega::Account* Arena::CreateMaybeMessage<::vega::Account>(Arena*);
template<> ::vega::AuctionIndicativeState* Arena::CreateMaybeMessage<::vega::AuctionIndicativeState>(Arena*);
template<> ::vega::Candle* Arena::CreateMaybeMessage<::vega::Candle>(Arena*);
template<> ::vega::Deposit* Arena::CreateMaybeMessage<::vega::Deposit>(Arena*);
template<> ::vega::Erc20WithdrawExt* Arena::CreateMaybeMessage<::vega::Erc20WithdrawExt>(Arena*);
template<> ::vega::ErrorDetail* Arena::CreateMaybeMessage<::vega::ErrorDetail>(Arena*);
template<> ::vega::EthereumConfig* Arena::CreateMaybeMessage<::vega::EthereumConfig>(Arena*);
template<> ::vega::Fee* Arena::CreateMaybeMessage<::vega::Fee>(Arena*);
template<> ::vega::FinancialAmount* Arena::CreateMaybeMessage<::vega::FinancialAmount>(Arena*);
template<> ::vega::LedgerEntry* Arena::CreateMaybeMessage<::vega::LedgerEntry>(Arena*);
template<> ::vega::LiquidityOrder* Arena::CreateMaybeMessage<::vega::LiquidityOrder>(Arena*);
template<> ::vega::LiquidityOrderReference* Arena::CreateMaybeMessage<::vega::LiquidityOrderReference>(Arena*);
template<> ::vega::LiquidityProvision* Arena::CreateMaybeMessage<::vega::LiquidityProvision>(Arena*);
template<> ::vega::LiquidityProvisionSubmission* Arena::CreateMaybeMessage<::vega::LiquidityProvisionSubmission>(Arena*);
template<> ::vega::MarginLevels* Arena::CreateMaybeMessage<::vega::MarginLevels>(Arena*);
template<> ::vega::MarketData* Arena::CreateMaybeMessage<::vega::MarketData>(Arena*);
template<> ::vega::MarketDepth* Arena::CreateMaybeMessage<::vega::MarketDepth>(Arena*);
template<> ::vega::MarketDepthUpdate* Arena::CreateMaybeMessage<::vega::MarketDepthUpdate>(Arena*);
template<> ::vega::NetworkParameter* Arena::CreateMaybeMessage<::vega::NetworkParameter>(Arena*);
template<> ::vega::NodeRegistration* Arena::CreateMaybeMessage<::vega::NodeRegistration>(Arena*);
template<> ::vega::NodeSignature* Arena::CreateMaybeMessage<::vega::NodeSignature>(Arena*);
template<> ::vega::NodeVote* Arena::CreateMaybeMessage<::vega::NodeVote>(Arena*);
template<> ::vega::Order* Arena::CreateMaybeMessage<::vega::Order>(Arena*);
template<> ::vega::OrderAmendment* Arena::CreateMaybeMessage<::vega::OrderAmendment>(Arena*);
template<> ::vega::OrderCancellation* Arena::CreateMaybeMessage<::vega::OrderCancellation>(Arena*);
template<> ::vega::OrderCancellationConfirmation* Arena::CreateMaybeMessage<::vega::OrderCancellationConfirmation>(Arena*);
template<> ::vega::OrderConfirmation* Arena::CreateMaybeMessage<::vega::OrderConfirmation>(Arena*);
template<> ::vega::OrderSubmission* Arena::CreateMaybeMessage<::vega::OrderSubmission>(Arena*);
template<> ::vega::Party* Arena::CreateMaybeMessage<::vega::Party>(Arena*);
template<> ::vega::PeggedOrder* Arena::CreateMaybeMessage<::vega::PeggedOrder>(Arena*);
template<> ::vega::Position* Arena::CreateMaybeMessage<::vega::Position>(Arena*);
template<> ::vega::PositionTrade* Arena::CreateMaybeMessage<::vega::PositionTrade>(Arena*);
template<> ::vega::Price* Arena::CreateMaybeMessage<::vega::Price>(Arena*);
template<> ::vega::PriceLevel* Arena::CreateMaybeMessage<::vega::PriceLevel>(Arena*);
template<> ::vega::PriceMonitoringBounds* Arena::CreateMaybeMessage<::vega::PriceMonitoringBounds>(Arena*);
template<> ::vega::RiskFactor* Arena::CreateMaybeMessage<::vega::RiskFactor>(Arena*);
template<> ::vega::RiskResult* Arena::CreateMaybeMessage<::vega::RiskResult>(Arena*);
template<> ::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse* Arena::CreateMaybeMessage<::vega::RiskResult_PredictedNextRiskFactorsEntry_DoNotUse>(Arena*);
template<> ::vega::RiskResult_RiskFactorsEntry_DoNotUse* Arena::CreateMaybeMessage<::vega::RiskResult_RiskFactorsEntry_DoNotUse>(Arena*);
template<> ::vega::Signature* Arena::CreateMaybeMessage<::vega::Signature>(Arena*);
template<> ::vega::SignedBundle* Arena::CreateMaybeMessage<::vega::SignedBundle>(Arena*);
template<> ::vega::Statistics* Arena::CreateMaybeMessage<::vega::Statistics>(Arena*);
template<> ::vega::Timestamp* Arena::CreateMaybeMessage<::vega::Timestamp>(Arena*);
template<> ::vega::Trade* Arena::CreateMaybeMessage<::vega::Trade>(Arena*);
template<> ::vega::TradeSet* Arena::CreateMaybeMessage<::vega::TradeSet>(Arena*);
template<> ::vega::Transaction* Arena::CreateMaybeMessage<::vega::Transaction>(Arena*);
template<> ::vega::Transfer* Arena::CreateMaybeMessage<::vega::Transfer>(Arena*);
template<> ::vega::TransferBalance* Arena::CreateMaybeMessage<::vega::TransferBalance>(Arena*);
template<> ::vega::TransferRequest* Arena::CreateMaybeMessage<::vega::TransferRequest>(Arena*);
template<> ::vega::TransferResponse* Arena::CreateMaybeMessage<::vega::TransferResponse>(Arena*);
template<> ::vega::WithdrawExt* Arena::CreateMaybeMessage<::vega::WithdrawExt>(Arena*);
template<> ::vega::WithdrawSubmission* Arena::CreateMaybeMessage<::vega::WithdrawSubmission>(Arena*);
template<> ::vega::Withdrawal* Arena::CreateMaybeMessage<::vega::Withdrawal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vega {

enum Order_TimeInForce : int {
  Order_TimeInForce_TIF_UNSPECIFIED = 0,
  Order_TimeInForce_TIF_GTC = 1,
  Order_TimeInForce_TIF_GTT = 2,
  Order_TimeInForce_TIF_IOC = 3,
  Order_TimeInForce_TIF_FOK = 4,
  Order_TimeInForce_TIF_GFA = 5,
  Order_TimeInForce_TIF_GFN = 6,
  Order_TimeInForce_Order_TimeInForce_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Order_TimeInForce_Order_TimeInForce_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Order_TimeInForce_IsValid(int value);
constexpr Order_TimeInForce Order_TimeInForce_TimeInForce_MIN = Order_TimeInForce_TIF_UNSPECIFIED;
constexpr Order_TimeInForce Order_TimeInForce_TimeInForce_MAX = Order_TimeInForce_TIF_GFN;
constexpr int Order_TimeInForce_TimeInForce_ARRAYSIZE = Order_TimeInForce_TimeInForce_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_TimeInForce_descriptor();
template<typename T>
inline const std::string& Order_TimeInForce_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Order_TimeInForce>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Order_TimeInForce_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Order_TimeInForce_descriptor(), enum_t_value);
}
inline bool Order_TimeInForce_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Order_TimeInForce* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Order_TimeInForce>(
    Order_TimeInForce_descriptor(), name, value);
}
enum Order_Type : int {
  Order_Type_TYPE_UNSPECIFIED = 0,
  Order_Type_TYPE_LIMIT = 1,
  Order_Type_TYPE_MARKET = 2,
  Order_Type_TYPE_NETWORK = 3,
  Order_Type_Order_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Order_Type_Order_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Order_Type_IsValid(int value);
constexpr Order_Type Order_Type_Type_MIN = Order_Type_TYPE_UNSPECIFIED;
constexpr Order_Type Order_Type_Type_MAX = Order_Type_TYPE_NETWORK;
constexpr int Order_Type_Type_ARRAYSIZE = Order_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_Type_descriptor();
template<typename T>
inline const std::string& Order_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Order_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Order_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Order_Type_descriptor(), enum_t_value);
}
inline bool Order_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Order_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Order_Type>(
    Order_Type_descriptor(), name, value);
}
enum Order_Status : int {
  Order_Status_STATUS_INVALID = 0,
  Order_Status_STATUS_ACTIVE = 1,
  Order_Status_STATUS_EXPIRED = 2,
  Order_Status_STATUS_CANCELLED = 3,
  Order_Status_STATUS_STOPPED = 4,
  Order_Status_STATUS_FILLED = 5,
  Order_Status_STATUS_REJECTED = 6,
  Order_Status_STATUS_PARTIALLY_FILLED = 7,
  Order_Status_STATUS_PARKED = 8,
  Order_Status_Order_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Order_Status_Order_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Order_Status_IsValid(int value);
constexpr Order_Status Order_Status_Status_MIN = Order_Status_STATUS_INVALID;
constexpr Order_Status Order_Status_Status_MAX = Order_Status_STATUS_PARKED;
constexpr int Order_Status_Status_ARRAYSIZE = Order_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_Status_descriptor();
template<typename T>
inline const std::string& Order_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Order_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Order_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Order_Status_descriptor(), enum_t_value);
}
inline bool Order_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Order_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Order_Status>(
    Order_Status_descriptor(), name, value);
}
enum Trade_Type : int {
  Trade_Type_TYPE_UNSPECIFIED = 0,
  Trade_Type_TYPE_DEFAULT = 1,
  Trade_Type_TYPE_NETWORK_CLOSE_OUT_GOOD = 2,
  Trade_Type_TYPE_NETWORK_CLOSE_OUT_BAD = 3,
  Trade_Type_Trade_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Trade_Type_Trade_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Trade_Type_IsValid(int value);
constexpr Trade_Type Trade_Type_Type_MIN = Trade_Type_TYPE_UNSPECIFIED;
constexpr Trade_Type Trade_Type_Type_MAX = Trade_Type_TYPE_NETWORK_CLOSE_OUT_BAD;
constexpr int Trade_Type_Type_ARRAYSIZE = Trade_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Trade_Type_descriptor();
template<typename T>
inline const std::string& Trade_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Trade_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Trade_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Trade_Type_descriptor(), enum_t_value);
}
inline bool Trade_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Trade_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Trade_Type>(
    Trade_Type_descriptor(), name, value);
}
enum Deposit_Status : int {
  Deposit_Status_DEPOSIT_STATUS_UNSPECIFIED = 0,
  Deposit_Status_DEPOSIT_STATUS_OPEN = 1,
  Deposit_Status_DEPOSIT_STATUS_CANCELLED = 2,
  Deposit_Status_DEPOSIT_STATUS_FINALIZED = 3,
  Deposit_Status_Deposit_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Deposit_Status_Deposit_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Deposit_Status_IsValid(int value);
constexpr Deposit_Status Deposit_Status_Status_MIN = Deposit_Status_DEPOSIT_STATUS_UNSPECIFIED;
constexpr Deposit_Status Deposit_Status_Status_MAX = Deposit_Status_DEPOSIT_STATUS_FINALIZED;
constexpr int Deposit_Status_Status_ARRAYSIZE = Deposit_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Deposit_Status_descriptor();
template<typename T>
inline const std::string& Deposit_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Deposit_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Deposit_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Deposit_Status_descriptor(), enum_t_value);
}
inline bool Deposit_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Deposit_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Deposit_Status>(
    Deposit_Status_descriptor(), name, value);
}
enum Withdrawal_Status : int {
  Withdrawal_Status_WITHDRAWAL_STATUS_UNSPECIFIED = 0,
  Withdrawal_Status_WITHDRAWAL_STATUS_OPEN = 1,
  Withdrawal_Status_WITHDRAWAL_STATUS_CANCELLED = 2,
  Withdrawal_Status_WITHDRAWAL_STATUS_FINALIZED = 3,
  Withdrawal_Status_Withdrawal_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Withdrawal_Status_Withdrawal_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Withdrawal_Status_IsValid(int value);
constexpr Withdrawal_Status Withdrawal_Status_Status_MIN = Withdrawal_Status_WITHDRAWAL_STATUS_UNSPECIFIED;
constexpr Withdrawal_Status Withdrawal_Status_Status_MAX = Withdrawal_Status_WITHDRAWAL_STATUS_FINALIZED;
constexpr int Withdrawal_Status_Status_ARRAYSIZE = Withdrawal_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Withdrawal_Status_descriptor();
template<typename T>
inline const std::string& Withdrawal_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Withdrawal_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Withdrawal_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Withdrawal_Status_descriptor(), enum_t_value);
}
inline bool Withdrawal_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Withdrawal_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Withdrawal_Status>(
    Withdrawal_Status_descriptor(), name, value);
}
enum LiquidityProvision_Status : int {
  LiquidityProvision_Status_LIQUIDITY_PROVISION_STATUS_UNSPECIFIED = 0,
  LiquidityProvision_Status_LIQUIDITY_PROVISION_STATUS_ACTIVE = 1,
  LiquidityProvision_Status_LIQUIDITY_PROVISION_STATUS_STOPPED = 2,
  LiquidityProvision_Status_LIQUIDITY_PROVISION_STATUS_CANCELLED = 3,
  LiquidityProvision_Status_LIQUIDITY_PROVISION_STATUS_REJECTED = 4,
  LiquidityProvision_Status_LiquidityProvision_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LiquidityProvision_Status_LiquidityProvision_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LiquidityProvision_Status_IsValid(int value);
constexpr LiquidityProvision_Status LiquidityProvision_Status_Status_MIN = LiquidityProvision_Status_LIQUIDITY_PROVISION_STATUS_UNSPECIFIED;
constexpr LiquidityProvision_Status LiquidityProvision_Status_Status_MAX = LiquidityProvision_Status_LIQUIDITY_PROVISION_STATUS_REJECTED;
constexpr int LiquidityProvision_Status_Status_ARRAYSIZE = LiquidityProvision_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LiquidityProvision_Status_descriptor();
template<typename T>
inline const std::string& LiquidityProvision_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LiquidityProvision_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LiquidityProvision_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LiquidityProvision_Status_descriptor(), enum_t_value);
}
inline bool LiquidityProvision_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LiquidityProvision_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LiquidityProvision_Status>(
    LiquidityProvision_Status_descriptor(), name, value);
}
enum Side : int {
  SIDE_UNSPECIFIED = 0,
  SIDE_BUY = 1,
  SIDE_SELL = 2,
  Side_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Side_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Side_IsValid(int value);
constexpr Side Side_MIN = SIDE_UNSPECIFIED;
constexpr Side Side_MAX = SIDE_SELL;
constexpr int Side_ARRAYSIZE = Side_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Side_descriptor();
template<typename T>
inline const std::string& Side_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Side>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Side_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Side_descriptor(), enum_t_value);
}
inline bool Side_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Side* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Side>(
    Side_descriptor(), name, value);
}
enum Interval : int {
  INTERVAL_UNSPECIFIED = 0,
  INTERVAL_I1M = 60,
  INTERVAL_I5M = 300,
  INTERVAL_I15M = 900,
  INTERVAL_I1H = 3600,
  INTERVAL_I6H = 21600,
  INTERVAL_I1D = 86400,
  Interval_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Interval_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Interval_IsValid(int value);
constexpr Interval Interval_MIN = INTERVAL_UNSPECIFIED;
constexpr Interval Interval_MAX = INTERVAL_I1D;
constexpr int Interval_ARRAYSIZE = Interval_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Interval_descriptor();
template<typename T>
inline const std::string& Interval_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Interval>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Interval_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Interval_descriptor(), enum_t_value);
}
inline bool Interval_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Interval* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Interval>(
    Interval_descriptor(), name, value);
}
enum AuctionTrigger : int {
  AUCTION_TRIGGER_UNSPECIFIED = 0,
  AUCTION_TRIGGER_BATCH = 1,
  AUCTION_TRIGGER_OPENING = 2,
  AUCTION_TRIGGER_PRICE = 3,
  AUCTION_TRIGGER_LIQUIDITY = 4,
  AuctionTrigger_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AuctionTrigger_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AuctionTrigger_IsValid(int value);
constexpr AuctionTrigger AuctionTrigger_MIN = AUCTION_TRIGGER_UNSPECIFIED;
constexpr AuctionTrigger AuctionTrigger_MAX = AUCTION_TRIGGER_LIQUIDITY;
constexpr int AuctionTrigger_ARRAYSIZE = AuctionTrigger_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuctionTrigger_descriptor();
template<typename T>
inline const std::string& AuctionTrigger_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuctionTrigger>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuctionTrigger_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuctionTrigger_descriptor(), enum_t_value);
}
inline bool AuctionTrigger_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuctionTrigger* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuctionTrigger>(
    AuctionTrigger_descriptor(), name, value);
}
enum PeggedReference : int {
  PEGGED_REFERENCE_UNSPECIFIED = 0,
  PEGGED_REFERENCE_MID = 1,
  PEGGED_REFERENCE_BEST_BID = 2,
  PEGGED_REFERENCE_BEST_ASK = 3,
  PeggedReference_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PeggedReference_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PeggedReference_IsValid(int value);
constexpr PeggedReference PeggedReference_MIN = PEGGED_REFERENCE_UNSPECIFIED;
constexpr PeggedReference PeggedReference_MAX = PEGGED_REFERENCE_BEST_ASK;
constexpr int PeggedReference_ARRAYSIZE = PeggedReference_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeggedReference_descriptor();
template<typename T>
inline const std::string& PeggedReference_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeggedReference>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeggedReference_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeggedReference_descriptor(), enum_t_value);
}
inline bool PeggedReference_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PeggedReference* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeggedReference>(
    PeggedReference_descriptor(), name, value);
}
enum OrderError : int {
  ORDER_ERROR_NONE = 0,
  ORDER_ERROR_INVALID_MARKET_ID = 1,
  ORDER_ERROR_INVALID_ORDER_ID = 2,
  ORDER_ERROR_OUT_OF_SEQUENCE = 3,
  ORDER_ERROR_INVALID_REMAINING_SIZE = 4,
  ORDER_ERROR_TIME_FAILURE = 5,
  ORDER_ERROR_REMOVAL_FAILURE = 6,
  ORDER_ERROR_INVALID_EXPIRATION_DATETIME = 7,
  ORDER_ERROR_INVALID_ORDER_REFERENCE = 8,
  ORDER_ERROR_EDIT_NOT_ALLOWED = 9,
  ORDER_ERROR_AMEND_FAILURE = 10,
  ORDER_ERROR_NOT_FOUND = 11,
  ORDER_ERROR_INVALID_PARTY_ID = 12,
  ORDER_ERROR_MARKET_CLOSED = 13,
  ORDER_ERROR_MARGIN_CHECK_FAILED = 14,
  ORDER_ERROR_MISSING_GENERAL_ACCOUNT = 15,
  ORDER_ERROR_INTERNAL_ERROR = 16,
  ORDER_ERROR_INVALID_SIZE = 17,
  ORDER_ERROR_INVALID_PERSISTENCE = 18,
  ORDER_ERROR_INVALID_TYPE = 19,
  ORDER_ERROR_SELF_TRADING = 20,
  ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES = 21,
  ORDER_ERROR_INCORRECT_MARKET_TYPE = 22,
  ORDER_ERROR_INVALID_TIME_IN_FORCE = 23,
  ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION = 24,
  ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING = 25,
  ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT = 26,
  ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT = 27,
  ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT = 28,
  ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC = 29,
  ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN = 30,
  ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN = 31,
  ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION = 32,
  ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION = 33,
  ORDER_ERROR_MUST_BE_LIMIT_ORDER = 34,
  ORDER_ERROR_MUST_BE_GTT_OR_GTC = 35,
  ORDER_ERROR_WITHOUT_REFERENCE_PRICE = 36,
  ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE = 37,
  ORDER_ERROR_OFFSET_MUST_BE_LESS_OR_EQUAL_TO_ZERO = 38,
  ORDER_ERROR_OFFSET_MUST_BE_LESS_THAN_ZERO = 39,
  ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO = 40,
  ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE = 41,
  ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO = 42,
  ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE = 43,
  ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER = 44,
  ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER = 45,
  ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER = 46,
  OrderError_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderError_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderError_IsValid(int value);
constexpr OrderError OrderError_MIN = ORDER_ERROR_NONE;
constexpr OrderError OrderError_MAX = ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER;
constexpr int OrderError_ARRAYSIZE = OrderError_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderError_descriptor();
template<typename T>
inline const std::string& OrderError_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderError>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderError_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderError_descriptor(), enum_t_value);
}
inline bool OrderError_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderError* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderError>(
    OrderError_descriptor(), name, value);
}
enum ChainStatus : int {
  CHAIN_STATUS_UNSPECIFIED = 0,
  CHAIN_STATUS_DISCONNECTED = 1,
  CHAIN_STATUS_REPLAYING = 2,
  CHAIN_STATUS_CONNECTED = 3,
  ChainStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChainStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChainStatus_IsValid(int value);
constexpr ChainStatus ChainStatus_MIN = CHAIN_STATUS_UNSPECIFIED;
constexpr ChainStatus ChainStatus_MAX = CHAIN_STATUS_CONNECTED;
constexpr int ChainStatus_ARRAYSIZE = ChainStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChainStatus_descriptor();
template<typename T>
inline const std::string& ChainStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChainStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChainStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChainStatus_descriptor(), enum_t_value);
}
inline bool ChainStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChainStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChainStatus>(
    ChainStatus_descriptor(), name, value);
}
enum AccountType : int {
  ACCOUNT_TYPE_UNSPECIFIED = 0,
  ACCOUNT_TYPE_INSURANCE = 1,
  ACCOUNT_TYPE_SETTLEMENT = 2,
  ACCOUNT_TYPE_MARGIN = 3,
  ACCOUNT_TYPE_GENERAL = 4,
  ACCOUNT_TYPE_FEES_INFRASTRUCTURE = 5,
  ACCOUNT_TYPE_FEES_LIQUIDITY = 6,
  ACCOUNT_TYPE_FEES_MAKER = 7,
  ACCOUNT_TYPE_LOCK_WITHDRAW = 8,
  ACCOUNT_TYPE_BOND = 9,
  ACCOUNT_TYPE_EXTERNAL = 10,
  AccountType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AccountType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AccountType_IsValid(int value);
constexpr AccountType AccountType_MIN = ACCOUNT_TYPE_UNSPECIFIED;
constexpr AccountType AccountType_MAX = ACCOUNT_TYPE_EXTERNAL;
constexpr int AccountType_ARRAYSIZE = AccountType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountType_descriptor();
template<typename T>
inline const std::string& AccountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AccountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AccountType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AccountType_descriptor(), enum_t_value);
}
inline bool AccountType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AccountType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AccountType>(
    AccountType_descriptor(), name, value);
}
enum TransferType : int {
  TRANSFER_TYPE_UNSPECIFIED = 0,
  TRANSFER_TYPE_LOSS = 1,
  TRANSFER_TYPE_WIN = 2,
  TRANSFER_TYPE_CLOSE = 3,
  TRANSFER_TYPE_MTM_LOSS = 4,
  TRANSFER_TYPE_MTM_WIN = 5,
  TRANSFER_TYPE_MARGIN_LOW = 6,
  TRANSFER_TYPE_MARGIN_HIGH = 7,
  TRANSFER_TYPE_MARGIN_CONFISCATED = 8,
  TRANSFER_TYPE_MAKER_FEE_PAY = 9,
  TRANSFER_TYPE_MAKER_FEE_RECEIVE = 10,
  TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY = 11,
  TRANSFER_TYPE_LIQUIDITY_FEE_PAY = 12,
  TRANSFER_TYPE_BOND_LOW = 13,
  TRANSFER_TYPE_BOND_HIGH = 14,
  TRANSFER_TYPE_WITHDRAW_LOCK = 15,
  TRANSFER_TYPE_WITHDRAW = 16,
  TRANSFER_TYPE_DEPOSIT = 17,
  TransferType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransferType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransferType_IsValid(int value);
constexpr TransferType TransferType_MIN = TRANSFER_TYPE_UNSPECIFIED;
constexpr TransferType TransferType_MAX = TRANSFER_TYPE_DEPOSIT;
constexpr int TransferType_ARRAYSIZE = TransferType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransferType_descriptor();
template<typename T>
inline const std::string& TransferType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransferType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransferType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransferType_descriptor(), enum_t_value);
}
inline bool TransferType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransferType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransferType>(
    TransferType_descriptor(), name, value);
}
enum NodeSignatureKind : int {
  NODE_SIGNATURE_KIND_UNSPECIFIED = 0,
  NODE_SIGNATURE_KIND_ASSET_NEW = 1,
  NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL = 2,
  NodeSignatureKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NodeSignatureKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NodeSignatureKind_IsValid(int value);
constexpr NodeSignatureKind NodeSignatureKind_MIN = NODE_SIGNATURE_KIND_UNSPECIFIED;
constexpr NodeSignatureKind NodeSignatureKind_MAX = NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL;
constexpr int NodeSignatureKind_ARRAYSIZE = NodeSignatureKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeSignatureKind_descriptor();
template<typename T>
inline const std::string& NodeSignatureKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeSignatureKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeSignatureKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeSignatureKind_descriptor(), enum_t_value);
}
inline bool NodeSignatureKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NodeSignatureKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeSignatureKind>(
    NodeSignatureKind_descriptor(), name, value);
}
// ===================================================================

class Price PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Price) */ {
 public:
  inline Price() : Price(nullptr) {}
  virtual ~Price();

  Price(const Price& from);
  Price(Price&& from) noexcept
    : Price() {
    *this = ::std::move(from);
  }

  inline Price& operator=(const Price& from) {
    CopyFrom(from);
    return *this;
  }
  inline Price& operator=(Price&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Price& default_instance();

  static inline const Price* internal_default_instance() {
    return reinterpret_cast<const Price*>(
               &_Price_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Price& a, Price& b) {
    a.Swap(&b);
  }
  inline void Swap(Price* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Price* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Price* New() const final {
    return CreateMaybeMessage<Price>(nullptr);
  }

  Price* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Price>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Price& from);
  void MergeFrom(const Price& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Price* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Price";
  }
  protected:
  explicit Price(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1 [json_name = "value"];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Price)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Timestamp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Timestamp& default_instance();

  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return CreateMaybeMessage<Timestamp>(nullptr);
  }

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Timestamp";
  }
  protected:
  explicit Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1 [json_name = "value"];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Timestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Party PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Party) */ {
 public:
  inline Party() : Party(nullptr) {}
  virtual ~Party();

  Party(const Party& from);
  Party(Party&& from) noexcept
    : Party() {
    *this = ::std::move(from);
  }

  inline Party& operator=(const Party& from) {
    CopyFrom(from);
    return *this;
  }
  inline Party& operator=(Party&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Party& default_instance();

  static inline const Party* internal_default_instance() {
    return reinterpret_cast<const Party*>(
               &_Party_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Party& a, Party& b) {
    a.Swap(&b);
  }
  inline void Swap(Party* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Party* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Party* New() const final {
    return CreateMaybeMessage<Party>(nullptr);
  }

  Party* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Party>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Party& from);
  void MergeFrom(const Party& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Party* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Party";
  }
  protected:
  explicit Party(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id", (.validator.field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:vega.Party)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class RiskFactor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.RiskFactor) */ {
 public:
  inline RiskFactor() : RiskFactor(nullptr) {}
  virtual ~RiskFactor();

  RiskFactor(const RiskFactor& from);
  RiskFactor(RiskFactor&& from) noexcept
    : RiskFactor() {
    *this = ::std::move(from);
  }

  inline RiskFactor& operator=(const RiskFactor& from) {
    CopyFrom(from);
    return *this;
  }
  inline RiskFactor& operator=(RiskFactor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RiskFactor& default_instance();

  static inline const RiskFactor* internal_default_instance() {
    return reinterpret_cast<const RiskFactor*>(
               &_RiskFactor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RiskFactor& a, RiskFactor& b) {
    a.Swap(&b);
  }
  inline void Swap(RiskFactor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RiskFactor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RiskFactor* New() const final {
    return CreateMaybeMessage<RiskFactor>(nullptr);
  }

  RiskFactor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RiskFactor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RiskFactor& from);
  void MergeFrom(const RiskFactor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RiskFactor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.RiskFactor";
  }
  protected:
  explicit RiskFactor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketFieldNumber = 1,
    kShortFieldNumber = 2,
    kLongFieldNumber = 3,
  };
  // string market = 1 [json_name = "market"];
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // double short = 2 [json_name = "short"];
  void clear_short_();
  double short_() const;
  void set_short_(double value);
  private:
  double _internal_short_() const;
  void _internal_set_short_(double value);
  public:

  // double long = 3 [json_name = "long"];
  void clear_long_();
  double long_() const;
  void set_long_(double value);
  private:
  double _internal_long_() const;
  void _internal_set_long_(double value);
  public:

  // @@protoc_insertion_point(class_scope:vega.RiskFactor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  double short__;
  double long__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class RiskResult_RiskFactorsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RiskResult_RiskFactorsEntry_DoNotUse,
    std::string, ::vega::RiskFactor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RiskResult_RiskFactorsEntry_DoNotUse,
    std::string, ::vega::RiskFactor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RiskResult_RiskFactorsEntry_DoNotUse();
  explicit RiskResult_RiskFactorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RiskResult_RiskFactorsEntry_DoNotUse& other);
  static const RiskResult_RiskFactorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RiskResult_RiskFactorsEntry_DoNotUse*>(&_RiskResult_RiskFactorsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "vega.RiskResult.RiskFactorsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class RiskResult_PredictedNextRiskFactorsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RiskResult_PredictedNextRiskFactorsEntry_DoNotUse,
    std::string, ::vega::RiskFactor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RiskResult_PredictedNextRiskFactorsEntry_DoNotUse,
    std::string, ::vega::RiskFactor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RiskResult_PredictedNextRiskFactorsEntry_DoNotUse();
  explicit RiskResult_PredictedNextRiskFactorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RiskResult_PredictedNextRiskFactorsEntry_DoNotUse& other);
  static const RiskResult_PredictedNextRiskFactorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RiskResult_PredictedNextRiskFactorsEntry_DoNotUse*>(&_RiskResult_PredictedNextRiskFactorsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "vega.RiskResult.PredictedNextRiskFactorsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class RiskResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.RiskResult) */ {
 public:
  inline RiskResult() : RiskResult(nullptr) {}
  virtual ~RiskResult();

  RiskResult(const RiskResult& from);
  RiskResult(RiskResult&& from) noexcept
    : RiskResult() {
    *this = ::std::move(from);
  }

  inline RiskResult& operator=(const RiskResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RiskResult& operator=(RiskResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RiskResult& default_instance();

  static inline const RiskResult* internal_default_instance() {
    return reinterpret_cast<const RiskResult*>(
               &_RiskResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RiskResult& a, RiskResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RiskResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RiskResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RiskResult* New() const final {
    return CreateMaybeMessage<RiskResult>(nullptr);
  }

  RiskResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RiskResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RiskResult& from);
  void MergeFrom(const RiskResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RiskResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.RiskResult";
  }
  protected:
  explicit RiskResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRiskFactorsFieldNumber = 2,
    kPredictedNextRiskFactorsFieldNumber = 4,
    kUpdatedTimestampFieldNumber = 1,
    kNextUpdateTimestampFieldNumber = 3,
  };
  // map<string, .vega.RiskFactor> riskFactors = 2 [json_name = "riskFactors"];
  int riskfactors_size() const;
  private:
  int _internal_riskfactors_size() const;
  public:
  void clear_riskfactors();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
      _internal_riskfactors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
      _internal_mutable_riskfactors();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
      riskfactors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
      mutable_riskfactors();

  // map<string, .vega.RiskFactor> predictedNextRiskFactors = 4 [json_name = "predictedNextRiskFactors"];
  int predictednextriskfactors_size() const;
  private:
  int _internal_predictednextriskfactors_size() const;
  public:
  void clear_predictednextriskfactors();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
      _internal_predictednextriskfactors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
      _internal_mutable_predictednextriskfactors();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
      predictednextriskfactors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
      mutable_predictednextriskfactors();

  // int64 updatedTimestamp = 1 [json_name = "updatedTimestamp"];
  void clear_updatedtimestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 updatedtimestamp() const;
  void set_updatedtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updatedtimestamp() const;
  void _internal_set_updatedtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 nextUpdateTimestamp = 3 [json_name = "nextUpdateTimestamp"];
  void clear_nextupdatetimestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 nextupdatetimestamp() const;
  void set_nextupdatetimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_nextupdatetimestamp() const;
  void _internal_set_nextupdatetimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.RiskResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RiskResult_RiskFactorsEntry_DoNotUse,
      std::string, ::vega::RiskFactor,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> riskfactors_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RiskResult_PredictedNextRiskFactorsEntry_DoNotUse,
      std::string, ::vega::RiskFactor,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> predictednextriskfactors_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatedtimestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 nextupdatetimestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class PeggedOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.PeggedOrder) */ {
 public:
  inline PeggedOrder() : PeggedOrder(nullptr) {}
  virtual ~PeggedOrder();

  PeggedOrder(const PeggedOrder& from);
  PeggedOrder(PeggedOrder&& from) noexcept
    : PeggedOrder() {
    *this = ::std::move(from);
  }

  inline PeggedOrder& operator=(const PeggedOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeggedOrder& operator=(PeggedOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeggedOrder& default_instance();

  static inline const PeggedOrder* internal_default_instance() {
    return reinterpret_cast<const PeggedOrder*>(
               &_PeggedOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PeggedOrder& a, PeggedOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(PeggedOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeggedOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeggedOrder* New() const final {
    return CreateMaybeMessage<PeggedOrder>(nullptr);
  }

  PeggedOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeggedOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeggedOrder& from);
  void MergeFrom(const PeggedOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeggedOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.PeggedOrder";
  }
  protected:
  explicit PeggedOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 2,
    kReferenceFieldNumber = 1,
  };
  // int64 offset = 2 [json_name = "offset"];
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.PeggedReference reference = 1 [json_name = "reference"];
  void clear_reference();
  ::vega::PeggedReference reference() const;
  void set_reference(::vega::PeggedReference value);
  private:
  ::vega::PeggedReference _internal_reference() const;
  void _internal_set_reference(::vega::PeggedReference value);
  public:

  // @@protoc_insertion_point(class_scope:vega.PeggedOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  int reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Order PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Order) */ {
 public:
  inline Order() : Order(nullptr) {}
  virtual ~Order();

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Order& default_instance();

  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Order";
  }
  protected:
  explicit Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Order_TimeInForce TimeInForce;
  static constexpr TimeInForce TIF_UNSPECIFIED =
    Order_TimeInForce_TIF_UNSPECIFIED;
  static constexpr TimeInForce TIF_GTC =
    Order_TimeInForce_TIF_GTC;
  static constexpr TimeInForce TIF_GTT =
    Order_TimeInForce_TIF_GTT;
  static constexpr TimeInForce TIF_IOC =
    Order_TimeInForce_TIF_IOC;
  static constexpr TimeInForce TIF_FOK =
    Order_TimeInForce_TIF_FOK;
  static constexpr TimeInForce TIF_GFA =
    Order_TimeInForce_TIF_GFA;
  static constexpr TimeInForce TIF_GFN =
    Order_TimeInForce_TIF_GFN;
  static inline bool TimeInForce_IsValid(int value) {
    return Order_TimeInForce_IsValid(value);
  }
  static constexpr TimeInForce TimeInForce_MIN =
    Order_TimeInForce_TimeInForce_MIN;
  static constexpr TimeInForce TimeInForce_MAX =
    Order_TimeInForce_TimeInForce_MAX;
  static constexpr int TimeInForce_ARRAYSIZE =
    Order_TimeInForce_TimeInForce_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TimeInForce_descriptor() {
    return Order_TimeInForce_descriptor();
  }
  template<typename T>
  static inline const std::string& TimeInForce_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TimeInForce>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TimeInForce_Name.");
    return Order_TimeInForce_Name(enum_t_value);
  }
  static inline bool TimeInForce_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TimeInForce* value) {
    return Order_TimeInForce_Parse(name, value);
  }

  typedef Order_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    Order_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_LIMIT =
    Order_Type_TYPE_LIMIT;
  static constexpr Type TYPE_MARKET =
    Order_Type_TYPE_MARKET;
  static constexpr Type TYPE_NETWORK =
    Order_Type_TYPE_NETWORK;
  static inline bool Type_IsValid(int value) {
    return Order_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Order_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Order_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Order_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Order_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Order_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Order_Type_Parse(name, value);
  }

  typedef Order_Status Status;
  static constexpr Status STATUS_INVALID =
    Order_Status_STATUS_INVALID;
  static constexpr Status STATUS_ACTIVE =
    Order_Status_STATUS_ACTIVE;
  static constexpr Status STATUS_EXPIRED =
    Order_Status_STATUS_EXPIRED;
  static constexpr Status STATUS_CANCELLED =
    Order_Status_STATUS_CANCELLED;
  static constexpr Status STATUS_STOPPED =
    Order_Status_STATUS_STOPPED;
  static constexpr Status STATUS_FILLED =
    Order_Status_STATUS_FILLED;
  static constexpr Status STATUS_REJECTED =
    Order_Status_STATUS_REJECTED;
  static constexpr Status STATUS_PARTIALLY_FILLED =
    Order_Status_STATUS_PARTIALLY_FILLED;
  static constexpr Status STATUS_PARKED =
    Order_Status_STATUS_PARKED;
  static inline bool Status_IsValid(int value) {
    return Order_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Order_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Order_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Order_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Order_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Order_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return Order_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMarketIDFieldNumber = 2,
    kPartyIDFieldNumber = 3,
    kReferenceFieldNumber = 13,
    kPeggedOrderFieldNumber = 18,
    kPriceFieldNumber = 5,
    kSizeFieldNumber = 6,
    kSideFieldNumber = 4,
    kTimeInForceFieldNumber = 8,
    kRemainingFieldNumber = 7,
    kCreatedAtFieldNumber = 10,
    kTypeFieldNumber = 9,
    kStatusFieldNumber = 11,
    kExpiresAtFieldNumber = 12,
    kUpdatedAtFieldNumber = 15,
    kVersionFieldNumber = 16,
    kBatchIDFieldNumber = 17,
    kReasonFieldNumber = 14,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string marketID = 2 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string partyID = 3 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string reference = 13 [json_name = "reference"];
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // .vega.PeggedOrder peggedOrder = 18 [json_name = "peggedOrder"];
  bool has_peggedorder() const;
  private:
  bool _internal_has_peggedorder() const;
  public:
  void clear_peggedorder();
  const ::vega::PeggedOrder& peggedorder() const;
  ::vega::PeggedOrder* release_peggedorder();
  ::vega::PeggedOrder* mutable_peggedorder();
  void set_allocated_peggedorder(::vega::PeggedOrder* peggedorder);
  private:
  const ::vega::PeggedOrder& _internal_peggedorder() const;
  ::vega::PeggedOrder* _internal_mutable_peggedorder();
  public:
  void unsafe_arena_set_allocated_peggedorder(
      ::vega::PeggedOrder* peggedorder);
  ::vega::PeggedOrder* unsafe_arena_release_peggedorder();

  // uint64 price = 5 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 6 [json_name = "size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.Side side = 4 [json_name = "side"];
  void clear_side();
  ::vega::Side side() const;
  void set_side(::vega::Side value);
  private:
  ::vega::Side _internal_side() const;
  void _internal_set_side(::vega::Side value);
  public:

  // .vega.Order.TimeInForce timeInForce = 8 [json_name = "timeInForce"];
  void clear_timeinforce();
  ::vega::Order_TimeInForce timeinforce() const;
  void set_timeinforce(::vega::Order_TimeInForce value);
  private:
  ::vega::Order_TimeInForce _internal_timeinforce() const;
  void _internal_set_timeinforce(::vega::Order_TimeInForce value);
  public:

  // uint64 remaining = 7 [json_name = "remaining"];
  void clear_remaining();
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining() const;
  void set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_remaining() const;
  void _internal_set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 createdAt = 10 [json_name = "createdAt"];
  void clear_createdat();
  ::PROTOBUF_NAMESPACE_ID::int64 createdat() const;
  void set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createdat() const;
  void _internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.Order.Type type = 9 [json_name = "type"];
  void clear_type();
  ::vega::Order_Type type() const;
  void set_type(::vega::Order_Type value);
  private:
  ::vega::Order_Type _internal_type() const;
  void _internal_set_type(::vega::Order_Type value);
  public:

  // .vega.Order.Status status = 11 [json_name = "status"];
  void clear_status();
  ::vega::Order_Status status() const;
  void set_status(::vega::Order_Status value);
  private:
  ::vega::Order_Status _internal_status() const;
  void _internal_set_status(::vega::Order_Status value);
  public:

  // int64 expiresAt = 12 [json_name = "expiresAt"];
  void clear_expiresat();
  ::PROTOBUF_NAMESPACE_ID::int64 expiresat() const;
  void set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiresat() const;
  void _internal_set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updatedAt = 15 [json_name = "updatedAt"];
  void clear_updatedat();
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat() const;
  void set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updatedat() const;
  void _internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 version = 16 [json_name = "version"];
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 batchID = 17 [json_name = "batchID"];
  void clear_batchid();
  ::PROTOBUF_NAMESPACE_ID::uint64 batchid() const;
  void set_batchid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_batchid() const;
  void _internal_set_batchid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.OrderError reason = 14 [json_name = "reason"];
  void clear_reason();
  ::vega::OrderError reason() const;
  void set_reason(::vega::OrderError value);
  private:
  ::vega::OrderError _internal_reason() const;
  void _internal_set_reason(::vega::OrderError value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::vega::PeggedOrder* peggedorder_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  int side_;
  int timeinforce_;
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining_;
  ::PROTOBUF_NAMESPACE_ID::int64 createdat_;
  int type_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiresat_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 batchid_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class OrderCancellationConfirmation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.OrderCancellationConfirmation) */ {
 public:
  inline OrderCancellationConfirmation() : OrderCancellationConfirmation(nullptr) {}
  virtual ~OrderCancellationConfirmation();

  OrderCancellationConfirmation(const OrderCancellationConfirmation& from);
  OrderCancellationConfirmation(OrderCancellationConfirmation&& from) noexcept
    : OrderCancellationConfirmation() {
    *this = ::std::move(from);
  }

  inline OrderCancellationConfirmation& operator=(const OrderCancellationConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderCancellationConfirmation& operator=(OrderCancellationConfirmation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderCancellationConfirmation& default_instance();

  static inline const OrderCancellationConfirmation* internal_default_instance() {
    return reinterpret_cast<const OrderCancellationConfirmation*>(
               &_OrderCancellationConfirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OrderCancellationConfirmation& a, OrderCancellationConfirmation& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderCancellationConfirmation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderCancellationConfirmation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderCancellationConfirmation* New() const final {
    return CreateMaybeMessage<OrderCancellationConfirmation>(nullptr);
  }

  OrderCancellationConfirmation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderCancellationConfirmation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderCancellationConfirmation& from);
  void MergeFrom(const OrderCancellationConfirmation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderCancellationConfirmation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.OrderCancellationConfirmation";
  }
  protected:
  explicit OrderCancellationConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .vega.Order order = 1 [json_name = "order"];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);
  private:
  const ::vega::Order& _internal_order() const;
  ::vega::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::vega::Order* order);
  ::vega::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:vega.OrderCancellationConfirmation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class OrderConfirmation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.OrderConfirmation) */ {
 public:
  inline OrderConfirmation() : OrderConfirmation(nullptr) {}
  virtual ~OrderConfirmation();

  OrderConfirmation(const OrderConfirmation& from);
  OrderConfirmation(OrderConfirmation&& from) noexcept
    : OrderConfirmation() {
    *this = ::std::move(from);
  }

  inline OrderConfirmation& operator=(const OrderConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderConfirmation& operator=(OrderConfirmation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderConfirmation& default_instance();

  static inline const OrderConfirmation* internal_default_instance() {
    return reinterpret_cast<const OrderConfirmation*>(
               &_OrderConfirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(OrderConfirmation& a, OrderConfirmation& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderConfirmation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderConfirmation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderConfirmation* New() const final {
    return CreateMaybeMessage<OrderConfirmation>(nullptr);
  }

  OrderConfirmation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderConfirmation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderConfirmation& from);
  void MergeFrom(const OrderConfirmation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderConfirmation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.OrderConfirmation";
  }
  protected:
  explicit OrderConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 2,
    kPassiveOrdersAffectedFieldNumber = 3,
    kOrderFieldNumber = 1,
  };
  // repeated .vega.Trade trades = 2 [json_name = "trades"];
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::vega::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
      mutable_trades();
  private:
  const ::vega::Trade& _internal_trades(int index) const;
  ::vega::Trade* _internal_add_trades();
  public:
  const ::vega::Trade& trades(int index) const;
  ::vega::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
      trades() const;

  // repeated .vega.Order passiveOrdersAffected = 3 [json_name = "passiveOrdersAffected"];
  int passiveordersaffected_size() const;
  private:
  int _internal_passiveordersaffected_size() const;
  public:
  void clear_passiveordersaffected();
  ::vega::Order* mutable_passiveordersaffected(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
      mutable_passiveordersaffected();
  private:
  const ::vega::Order& _internal_passiveordersaffected(int index) const;
  ::vega::Order* _internal_add_passiveordersaffected();
  public:
  const ::vega::Order& passiveordersaffected(int index) const;
  ::vega::Order* add_passiveordersaffected();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
      passiveordersaffected() const;

  // .vega.Order order = 1 [json_name = "order"];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);
  private:
  const ::vega::Order& _internal_order() const;
  ::vega::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::vega::Order* order);
  ::vega::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:vega.OrderConfirmation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade > trades_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order > passiveordersaffected_;
  ::vega::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class AuctionIndicativeState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.AuctionIndicativeState) */ {
 public:
  inline AuctionIndicativeState() : AuctionIndicativeState(nullptr) {}
  virtual ~AuctionIndicativeState();

  AuctionIndicativeState(const AuctionIndicativeState& from);
  AuctionIndicativeState(AuctionIndicativeState&& from) noexcept
    : AuctionIndicativeState() {
    *this = ::std::move(from);
  }

  inline AuctionIndicativeState& operator=(const AuctionIndicativeState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuctionIndicativeState& operator=(AuctionIndicativeState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuctionIndicativeState& default_instance();

  static inline const AuctionIndicativeState* internal_default_instance() {
    return reinterpret_cast<const AuctionIndicativeState*>(
               &_AuctionIndicativeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AuctionIndicativeState& a, AuctionIndicativeState& b) {
    a.Swap(&b);
  }
  inline void Swap(AuctionIndicativeState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuctionIndicativeState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuctionIndicativeState* New() const final {
    return CreateMaybeMessage<AuctionIndicativeState>(nullptr);
  }

  AuctionIndicativeState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuctionIndicativeState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuctionIndicativeState& from);
  void MergeFrom(const AuctionIndicativeState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuctionIndicativeState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.AuctionIndicativeState";
  }
  protected:
  explicit AuctionIndicativeState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kIndicativePriceFieldNumber = 2,
    kIndicativeVolumeFieldNumber = 3,
    kAuctionStartFieldNumber = 4,
    kAuctionEndFieldNumber = 5,
  };
  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // uint64 indicativePrice = 2 [json_name = "indicativePrice"];
  void clear_indicativeprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 indicativeprice() const;
  void set_indicativeprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_indicativeprice() const;
  void _internal_set_indicativeprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 indicativeVolume = 3 [json_name = "indicativeVolume"];
  void clear_indicativevolume();
  ::PROTOBUF_NAMESPACE_ID::uint64 indicativevolume() const;
  void set_indicativevolume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_indicativevolume() const;
  void _internal_set_indicativevolume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 auctionStart = 4 [json_name = "auctionStart"];
  void clear_auctionstart();
  ::PROTOBUF_NAMESPACE_ID::int64 auctionstart() const;
  void set_auctionstart(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auctionstart() const;
  void _internal_set_auctionstart(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 auctionEnd = 5 [json_name = "auctionEnd"];
  void clear_auctionend();
  ::PROTOBUF_NAMESPACE_ID::int64 auctionend() const;
  void set_auctionend(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auctionend() const;
  void _internal_set_auctionend(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.AuctionIndicativeState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 indicativeprice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 indicativevolume_;
  ::PROTOBUF_NAMESPACE_ID::int64 auctionstart_;
  ::PROTOBUF_NAMESPACE_ID::int64 auctionend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Trade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Trade) */ {
 public:
  inline Trade() : Trade(nullptr) {}
  virtual ~Trade();

  Trade(const Trade& from);
  Trade(Trade&& from) noexcept
    : Trade() {
    *this = ::std::move(from);
  }

  inline Trade& operator=(const Trade& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trade& operator=(Trade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trade& default_instance();

  static inline const Trade* internal_default_instance() {
    return reinterpret_cast<const Trade*>(
               &_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Trade& a, Trade& b) {
    a.Swap(&b);
  }
  inline void Swap(Trade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trade* New() const final {
    return CreateMaybeMessage<Trade>(nullptr);
  }

  Trade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trade& from);
  void MergeFrom(const Trade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Trade";
  }
  protected:
  explicit Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Trade_Type Type;
  static constexpr Type TYPE_UNSPECIFIED =
    Trade_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_DEFAULT =
    Trade_Type_TYPE_DEFAULT;
  static constexpr Type TYPE_NETWORK_CLOSE_OUT_GOOD =
    Trade_Type_TYPE_NETWORK_CLOSE_OUT_GOOD;
  static constexpr Type TYPE_NETWORK_CLOSE_OUT_BAD =
    Trade_Type_TYPE_NETWORK_CLOSE_OUT_BAD;
  static inline bool Type_IsValid(int value) {
    return Trade_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Trade_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Trade_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Trade_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Trade_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Trade_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Trade_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMarketIDFieldNumber = 2,
    kBuyerFieldNumber = 5,
    kSellerFieldNumber = 6,
    kBuyOrderFieldNumber = 8,
    kSellOrderFieldNumber = 9,
    kBuyerFeeFieldNumber = 12,
    kSellerFeeFieldNumber = 13,
    kPriceFieldNumber = 3,
    kSizeFieldNumber = 4,
    kAggressorFieldNumber = 7,
    kTypeFieldNumber = 11,
    kTimestampFieldNumber = 10,
    kBuyerAuctionBatchFieldNumber = 14,
    kSellerAuctionBatchFieldNumber = 15,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string marketID = 2 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string buyer = 5 [json_name = "buyer"];
  void clear_buyer();
  const std::string& buyer() const;
  void set_buyer(const std::string& value);
  void set_buyer(std::string&& value);
  void set_buyer(const char* value);
  void set_buyer(const char* value, size_t size);
  std::string* mutable_buyer();
  std::string* release_buyer();
  void set_allocated_buyer(std::string* buyer);
  private:
  const std::string& _internal_buyer() const;
  void _internal_set_buyer(const std::string& value);
  std::string* _internal_mutable_buyer();
  public:

  // string seller = 6 [json_name = "seller"];
  void clear_seller();
  const std::string& seller() const;
  void set_seller(const std::string& value);
  void set_seller(std::string&& value);
  void set_seller(const char* value);
  void set_seller(const char* value, size_t size);
  std::string* mutable_seller();
  std::string* release_seller();
  void set_allocated_seller(std::string* seller);
  private:
  const std::string& _internal_seller() const;
  void _internal_set_seller(const std::string& value);
  std::string* _internal_mutable_seller();
  public:

  // string buyOrder = 8 [json_name = "buyOrder"];
  void clear_buyorder();
  const std::string& buyorder() const;
  void set_buyorder(const std::string& value);
  void set_buyorder(std::string&& value);
  void set_buyorder(const char* value);
  void set_buyorder(const char* value, size_t size);
  std::string* mutable_buyorder();
  std::string* release_buyorder();
  void set_allocated_buyorder(std::string* buyorder);
  private:
  const std::string& _internal_buyorder() const;
  void _internal_set_buyorder(const std::string& value);
  std::string* _internal_mutable_buyorder();
  public:

  // string sellOrder = 9 [json_name = "sellOrder"];
  void clear_sellorder();
  const std::string& sellorder() const;
  void set_sellorder(const std::string& value);
  void set_sellorder(std::string&& value);
  void set_sellorder(const char* value);
  void set_sellorder(const char* value, size_t size);
  std::string* mutable_sellorder();
  std::string* release_sellorder();
  void set_allocated_sellorder(std::string* sellorder);
  private:
  const std::string& _internal_sellorder() const;
  void _internal_set_sellorder(const std::string& value);
  std::string* _internal_mutable_sellorder();
  public:

  // .vega.Fee buyerFee = 12 [json_name = "buyerFee"];
  bool has_buyerfee() const;
  private:
  bool _internal_has_buyerfee() const;
  public:
  void clear_buyerfee();
  const ::vega::Fee& buyerfee() const;
  ::vega::Fee* release_buyerfee();
  ::vega::Fee* mutable_buyerfee();
  void set_allocated_buyerfee(::vega::Fee* buyerfee);
  private:
  const ::vega::Fee& _internal_buyerfee() const;
  ::vega::Fee* _internal_mutable_buyerfee();
  public:
  void unsafe_arena_set_allocated_buyerfee(
      ::vega::Fee* buyerfee);
  ::vega::Fee* unsafe_arena_release_buyerfee();

  // .vega.Fee sellerFee = 13 [json_name = "sellerFee"];
  bool has_sellerfee() const;
  private:
  bool _internal_has_sellerfee() const;
  public:
  void clear_sellerfee();
  const ::vega::Fee& sellerfee() const;
  ::vega::Fee* release_sellerfee();
  ::vega::Fee* mutable_sellerfee();
  void set_allocated_sellerfee(::vega::Fee* sellerfee);
  private:
  const ::vega::Fee& _internal_sellerfee() const;
  ::vega::Fee* _internal_mutable_sellerfee();
  public:
  void unsafe_arena_set_allocated_sellerfee(
      ::vega::Fee* sellerfee);
  ::vega::Fee* unsafe_arena_release_sellerfee();

  // uint64 price = 3 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 4 [json_name = "size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.Side aggressor = 7 [json_name = "aggressor"];
  void clear_aggressor();
  ::vega::Side aggressor() const;
  void set_aggressor(::vega::Side value);
  private:
  ::vega::Side _internal_aggressor() const;
  void _internal_set_aggressor(::vega::Side value);
  public:

  // .vega.Trade.Type type = 11 [json_name = "type"];
  void clear_type();
  ::vega::Trade_Type type() const;
  void set_type(::vega::Trade_Type value);
  private:
  ::vega::Trade_Type _internal_type() const;
  void _internal_set_type(::vega::Trade_Type value);
  public:

  // int64 timestamp = 10 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 buyerAuctionBatch = 14 [json_name = "buyerAuctionBatch"];
  void clear_buyerauctionbatch();
  ::PROTOBUF_NAMESPACE_ID::uint64 buyerauctionbatch() const;
  void set_buyerauctionbatch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_buyerauctionbatch() const;
  void _internal_set_buyerauctionbatch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 sellerAuctionBatch = 15 [json_name = "sellerAuctionBatch"];
  void clear_sellerauctionbatch();
  ::PROTOBUF_NAMESPACE_ID::uint64 sellerauctionbatch() const;
  void set_sellerauctionbatch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sellerauctionbatch() const;
  void _internal_set_sellerauctionbatch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Trade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seller_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buyorder_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sellorder_;
  ::vega::Fee* buyerfee_;
  ::vega::Fee* sellerfee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  int aggressor_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 buyerauctionbatch_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sellerauctionbatch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Fee PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Fee) */ {
 public:
  inline Fee() : Fee(nullptr) {}
  virtual ~Fee();

  Fee(const Fee& from);
  Fee(Fee&& from) noexcept
    : Fee() {
    *this = ::std::move(from);
  }

  inline Fee& operator=(const Fee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fee& operator=(Fee&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fee& default_instance();

  static inline const Fee* internal_default_instance() {
    return reinterpret_cast<const Fee*>(
               &_Fee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Fee& a, Fee& b) {
    a.Swap(&b);
  }
  inline void Swap(Fee* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fee* New() const final {
    return CreateMaybeMessage<Fee>(nullptr);
  }

  Fee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fee>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fee& from);
  void MergeFrom(const Fee& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fee* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Fee";
  }
  protected:
  explicit Fee(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMakerFeeFieldNumber = 1,
    kInfrastructureFeeFieldNumber = 2,
    kLiquidityFeeFieldNumber = 3,
  };
  // uint64 makerFee = 1 [json_name = "makerFee"];
  void clear_makerfee();
  ::PROTOBUF_NAMESPACE_ID::uint64 makerfee() const;
  void set_makerfee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_makerfee() const;
  void _internal_set_makerfee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 infrastructureFee = 2 [json_name = "infrastructureFee"];
  void clear_infrastructurefee();
  ::PROTOBUF_NAMESPACE_ID::uint64 infrastructurefee() const;
  void set_infrastructurefee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_infrastructurefee() const;
  void _internal_set_infrastructurefee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 liquidityFee = 3 [json_name = "liquidityFee"];
  void clear_liquidityfee();
  ::PROTOBUF_NAMESPACE_ID::uint64 liquidityfee() const;
  void set_liquidityfee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_liquidityfee() const;
  void _internal_set_liquidityfee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Fee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 makerfee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 infrastructurefee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 liquidityfee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class TradeSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.TradeSet) */ {
 public:
  inline TradeSet() : TradeSet(nullptr) {}
  virtual ~TradeSet();

  TradeSet(const TradeSet& from);
  TradeSet(TradeSet&& from) noexcept
    : TradeSet() {
    *this = ::std::move(from);
  }

  inline TradeSet& operator=(const TradeSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeSet& operator=(TradeSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeSet& default_instance();

  static inline const TradeSet* internal_default_instance() {
    return reinterpret_cast<const TradeSet*>(
               &_TradeSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TradeSet& a, TradeSet& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeSet* New() const final {
    return CreateMaybeMessage<TradeSet>(nullptr);
  }

  TradeSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeSet& from);
  void MergeFrom(const TradeSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.TradeSet";
  }
  protected:
  explicit TradeSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .vega.Trade trades = 1 [json_name = "trades"];
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::vega::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
      mutable_trades();
  private:
  const ::vega::Trade& _internal_trades(int index) const;
  ::vega::Trade* _internal_add_trades();
  public:
  const ::vega::Trade& trades(int index) const;
  ::vega::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:vega.TradeSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade > trades_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Candle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Candle) */ {
 public:
  inline Candle() : Candle(nullptr) {}
  virtual ~Candle();

  Candle(const Candle& from);
  Candle(Candle&& from) noexcept
    : Candle() {
    *this = ::std::move(from);
  }

  inline Candle& operator=(const Candle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Candle& operator=(Candle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Candle& default_instance();

  static inline const Candle* internal_default_instance() {
    return reinterpret_cast<const Candle*>(
               &_Candle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Candle& a, Candle& b) {
    a.Swap(&b);
  }
  inline void Swap(Candle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Candle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Candle* New() const final {
    return CreateMaybeMessage<Candle>(nullptr);
  }

  Candle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Candle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Candle& from);
  void MergeFrom(const Candle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Candle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Candle";
  }
  protected:
  explicit Candle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatetimeFieldNumber = 2,
    kTimestampFieldNumber = 1,
    kHighFieldNumber = 3,
    kLowFieldNumber = 4,
    kOpenFieldNumber = 5,
    kCloseFieldNumber = 6,
    kVolumeFieldNumber = 7,
    kIntervalFieldNumber = 8,
  };
  // string datetime = 2 [json_name = "datetime"];
  void clear_datetime();
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);
  private:
  const std::string& _internal_datetime() const;
  void _internal_set_datetime(const std::string& value);
  std::string* _internal_mutable_datetime();
  public:

  // int64 timestamp = 1 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 high = 3 [json_name = "high"];
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_high() const;
  void _internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 low = 4 [json_name = "low"];
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_low() const;
  void _internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 open = 5 [json_name = "open"];
  void clear_open();
  ::PROTOBUF_NAMESPACE_ID::uint64 open() const;
  void set_open(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_open() const;
  void _internal_set_open(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 close = 6 [json_name = "close"];
  void clear_close();
  ::PROTOBUF_NAMESPACE_ID::uint64 close() const;
  void set_close(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_close() const;
  void _internal_set_close(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 volume = 7 [json_name = "volume"];
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::uint64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.Interval interval = 8 [json_name = "interval"];
  void clear_interval();
  ::vega::Interval interval() const;
  void set_interval(::vega::Interval value);
  private:
  ::vega::Interval _internal_interval() const;
  void _internal_set_interval(::vega::Interval value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Candle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 high_;
  ::PROTOBUF_NAMESPACE_ID::uint64 low_;
  ::PROTOBUF_NAMESPACE_ID::uint64 open_;
  ::PROTOBUF_NAMESPACE_ID::uint64 close_;
  ::PROTOBUF_NAMESPACE_ID::uint64 volume_;
  int interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class PriceLevel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.PriceLevel) */ {
 public:
  inline PriceLevel() : PriceLevel(nullptr) {}
  virtual ~PriceLevel();

  PriceLevel(const PriceLevel& from);
  PriceLevel(PriceLevel&& from) noexcept
    : PriceLevel() {
    *this = ::std::move(from);
  }

  inline PriceLevel& operator=(const PriceLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceLevel& operator=(PriceLevel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriceLevel& default_instance();

  static inline const PriceLevel* internal_default_instance() {
    return reinterpret_cast<const PriceLevel*>(
               &_PriceLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PriceLevel& a, PriceLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceLevel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceLevel* New() const final {
    return CreateMaybeMessage<PriceLevel>(nullptr);
  }

  PriceLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceLevel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriceLevel& from);
  void MergeFrom(const PriceLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceLevel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.PriceLevel";
  }
  protected:
  explicit PriceLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kNumberOfOrdersFieldNumber = 2,
    kVolumeFieldNumber = 3,
  };
  // uint64 price = 1 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 numberOfOrders = 2 [json_name = "numberOfOrders"];
  void clear_numberoforders();
  ::PROTOBUF_NAMESPACE_ID::uint64 numberoforders() const;
  void set_numberoforders(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_numberoforders() const;
  void _internal_set_numberoforders(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 volume = 3 [json_name = "volume"];
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::uint64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.PriceLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 numberoforders_;
  ::PROTOBUF_NAMESPACE_ID::uint64 volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class MarketDepth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.MarketDepth) */ {
 public:
  inline MarketDepth() : MarketDepth(nullptr) {}
  virtual ~MarketDepth();

  MarketDepth(const MarketDepth& from);
  MarketDepth(MarketDepth&& from) noexcept
    : MarketDepth() {
    *this = ::std::move(from);
  }

  inline MarketDepth& operator=(const MarketDepth& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepth& operator=(MarketDepth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDepth& default_instance();

  static inline const MarketDepth* internal_default_instance() {
    return reinterpret_cast<const MarketDepth*>(
               &_MarketDepth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MarketDepth& a, MarketDepth& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDepth* New() const final {
    return CreateMaybeMessage<MarketDepth>(nullptr);
  }

  MarketDepth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDepth& from);
  void MergeFrom(const MarketDepth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.MarketDepth";
  }
  protected:
  explicit MarketDepth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyFieldNumber = 2,
    kSellFieldNumber = 3,
    kMarketIDFieldNumber = 1,
    kSequenceNumberFieldNumber = 4,
  };
  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  int buy_size() const;
  private:
  int _internal_buy_size() const;
  public:
  void clear_buy();
  ::vega::PriceLevel* mutable_buy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_buy();
  private:
  const ::vega::PriceLevel& _internal_buy(int index) const;
  ::vega::PriceLevel* _internal_add_buy();
  public:
  const ::vega::PriceLevel& buy(int index) const;
  ::vega::PriceLevel* add_buy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
      buy() const;

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  int sell_size() const;
  private:
  int _internal_sell_size() const;
  public:
  void clear_sell();
  ::vega::PriceLevel* mutable_sell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_sell();
  private:
  const ::vega::PriceLevel& _internal_sell(int index) const;
  ::vega::PriceLevel* _internal_add_sell();
  public:
  const ::vega::PriceLevel& sell(int index) const;
  ::vega::PriceLevel* add_sell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
      sell() const;

  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // uint64 sequenceNumber = 4 [json_name = "sequenceNumber"];
  void clear_sequencenumber();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequencenumber() const;
  void set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequencenumber() const;
  void _internal_set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.MarketDepth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel > buy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel > sell_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequencenumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class MarketDepthUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.MarketDepthUpdate) */ {
 public:
  inline MarketDepthUpdate() : MarketDepthUpdate(nullptr) {}
  virtual ~MarketDepthUpdate();

  MarketDepthUpdate(const MarketDepthUpdate& from);
  MarketDepthUpdate(MarketDepthUpdate&& from) noexcept
    : MarketDepthUpdate() {
    *this = ::std::move(from);
  }

  inline MarketDepthUpdate& operator=(const MarketDepthUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepthUpdate& operator=(MarketDepthUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDepthUpdate& default_instance();

  static inline const MarketDepthUpdate* internal_default_instance() {
    return reinterpret_cast<const MarketDepthUpdate*>(
               &_MarketDepthUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MarketDepthUpdate& a, MarketDepthUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepthUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepthUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDepthUpdate* New() const final {
    return CreateMaybeMessage<MarketDepthUpdate>(nullptr);
  }

  MarketDepthUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDepthUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDepthUpdate& from);
  void MergeFrom(const MarketDepthUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.MarketDepthUpdate";
  }
  protected:
  explicit MarketDepthUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuyFieldNumber = 2,
    kSellFieldNumber = 3,
    kMarketIDFieldNumber = 1,
    kSequenceNumberFieldNumber = 4,
  };
  // repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
  int buy_size() const;
  private:
  int _internal_buy_size() const;
  public:
  void clear_buy();
  ::vega::PriceLevel* mutable_buy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_buy();
  private:
  const ::vega::PriceLevel& _internal_buy(int index) const;
  ::vega::PriceLevel* _internal_add_buy();
  public:
  const ::vega::PriceLevel& buy(int index) const;
  ::vega::PriceLevel* add_buy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
      buy() const;

  // repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
  int sell_size() const;
  private:
  int _internal_sell_size() const;
  public:
  void clear_sell();
  ::vega::PriceLevel* mutable_sell(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
      mutable_sell();
  private:
  const ::vega::PriceLevel& _internal_sell(int index) const;
  ::vega::PriceLevel* _internal_add_sell();
  public:
  const ::vega::PriceLevel& sell(int index) const;
  ::vega::PriceLevel* add_sell();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
      sell() const;

  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // uint64 sequenceNumber = 4 [json_name = "sequenceNumber"];
  void clear_sequencenumber();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequencenumber() const;
  void set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequencenumber() const;
  void _internal_set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.MarketDepthUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel > buy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel > sell_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequencenumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kPartyIDFieldNumber = 2,
    kOpenVolumeFieldNumber = 3,
    kRealisedPNLFieldNumber = 4,
    kUnrealisedPNLFieldNumber = 5,
    kAverageEntryPriceFieldNumber = 6,
    kUpdatedAtFieldNumber = 7,
  };
  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string partyID = 2 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // int64 openVolume = 3 [json_name = "openVolume"];
  void clear_openvolume();
  ::PROTOBUF_NAMESPACE_ID::int64 openvolume() const;
  void set_openvolume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_openvolume() const;
  void _internal_set_openvolume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 realisedPNL = 4 [json_name = "realisedPNL"];
  void clear_realisedpnl();
  ::PROTOBUF_NAMESPACE_ID::int64 realisedpnl() const;
  void set_realisedpnl(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_realisedpnl() const;
  void _internal_set_realisedpnl(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 unrealisedPNL = 5 [json_name = "unrealisedPNL"];
  void clear_unrealisedpnl();
  ::PROTOBUF_NAMESPACE_ID::int64 unrealisedpnl() const;
  void set_unrealisedpnl(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_unrealisedpnl() const;
  void _internal_set_unrealisedpnl(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 averageEntryPrice = 6 [json_name = "averageEntryPrice"];
  void clear_averageentryprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 averageentryprice() const;
  void set_averageentryprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_averageentryprice() const;
  void _internal_set_averageentryprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 updatedAt = 7 [json_name = "updatedAt"];
  void clear_updatedat();
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat() const;
  void set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updatedat() const;
  void _internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::int64 openvolume_;
  ::PROTOBUF_NAMESPACE_ID::int64 realisedpnl_;
  ::PROTOBUF_NAMESPACE_ID::int64 unrealisedpnl_;
  ::PROTOBUF_NAMESPACE_ID::uint64 averageentryprice_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class PositionTrade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.PositionTrade) */ {
 public:
  inline PositionTrade() : PositionTrade(nullptr) {}
  virtual ~PositionTrade();

  PositionTrade(const PositionTrade& from);
  PositionTrade(PositionTrade&& from) noexcept
    : PositionTrade() {
    *this = ::std::move(from);
  }

  inline PositionTrade& operator=(const PositionTrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionTrade& operator=(PositionTrade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionTrade& default_instance();

  static inline const PositionTrade* internal_default_instance() {
    return reinterpret_cast<const PositionTrade*>(
               &_PositionTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PositionTrade& a, PositionTrade& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionTrade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionTrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionTrade* New() const final {
    return CreateMaybeMessage<PositionTrade>(nullptr);
  }

  PositionTrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionTrade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionTrade& from);
  void MergeFrom(const PositionTrade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionTrade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.PositionTrade";
  }
  protected:
  explicit PositionTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // int64 volume = 1 [json_name = "volume"];
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 price = 2 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.PositionTrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 volume_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Statistics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Statistics) */ {
 public:
  inline Statistics() : Statistics(nullptr) {}
  virtual ~Statistics();

  Statistics(const Statistics& from);
  Statistics(Statistics&& from) noexcept
    : Statistics() {
    *this = ::std::move(from);
  }

  inline Statistics& operator=(const Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Statistics& operator=(Statistics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Statistics& default_instance();

  static inline const Statistics* internal_default_instance() {
    return reinterpret_cast<const Statistics*>(
               &_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Statistics& a, Statistics& b) {
    a.Swap(&b);
  }
  inline void Swap(Statistics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Statistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Statistics* New() const final {
    return CreateMaybeMessage<Statistics>(nullptr);
  }

  Statistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Statistics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Statistics& from);
  void MergeFrom(const Statistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Statistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Statistics";
  }
  protected:
  explicit Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenesisTimeFieldNumber = 4,
    kCurrentTimeFieldNumber = 5,
    kVegaTimeFieldNumber = 6,
    kAppVersionHashFieldNumber = 28,
    kAppVersionFieldNumber = 29,
    kChainVersionFieldNumber = 30,
    kUptimeFieldNumber = 32,
    kChainIDFieldNumber = 33,
    kBlockHeightFieldNumber = 1,
    kBacklogLengthFieldNumber = 2,
    kTotalPeersFieldNumber = 3,
    kTxPerBlockFieldNumber = 8,
    kAverageTxBytesFieldNumber = 9,
    kAverageOrdersPerBlockFieldNumber = 10,
    kTradesPerSecondFieldNumber = 11,
    kOrdersPerSecondFieldNumber = 12,
    kTotalMarketsFieldNumber = 13,
    kStatusFieldNumber = 7,
    kOrderSubscriptionsFieldNumber = 21,
    kTotalAmendOrderFieldNumber = 16,
    kTotalCancelOrderFieldNumber = 17,
    kTotalCreateOrderFieldNumber = 18,
    kTotalOrdersFieldNumber = 19,
    kTotalTradesFieldNumber = 20,
    kTradeSubscriptionsFieldNumber = 22,
    kCandleSubscriptionsFieldNumber = 23,
    kMarketDepthSubscriptionsFieldNumber = 24,
    kPositionsSubscriptionsFieldNumber = 25,
    kAccountSubscriptionsFieldNumber = 26,
    kMarketDataSubscriptionsFieldNumber = 27,
    kBlockDurationFieldNumber = 31,
    kMarketDepthUpdatesSubscriptionsFieldNumber = 34,
  };
  // string genesisTime = 4 [json_name = "genesisTime"];
  void clear_genesistime();
  const std::string& genesistime() const;
  void set_genesistime(const std::string& value);
  void set_genesistime(std::string&& value);
  void set_genesistime(const char* value);
  void set_genesistime(const char* value, size_t size);
  std::string* mutable_genesistime();
  std::string* release_genesistime();
  void set_allocated_genesistime(std::string* genesistime);
  private:
  const std::string& _internal_genesistime() const;
  void _internal_set_genesistime(const std::string& value);
  std::string* _internal_mutable_genesistime();
  public:

  // string currentTime = 5 [json_name = "currentTime"];
  void clear_currenttime();
  const std::string& currenttime() const;
  void set_currenttime(const std::string& value);
  void set_currenttime(std::string&& value);
  void set_currenttime(const char* value);
  void set_currenttime(const char* value, size_t size);
  std::string* mutable_currenttime();
  std::string* release_currenttime();
  void set_allocated_currenttime(std::string* currenttime);
  private:
  const std::string& _internal_currenttime() const;
  void _internal_set_currenttime(const std::string& value);
  std::string* _internal_mutable_currenttime();
  public:

  // string vegaTime = 6 [json_name = "vegaTime"];
  void clear_vegatime();
  const std::string& vegatime() const;
  void set_vegatime(const std::string& value);
  void set_vegatime(std::string&& value);
  void set_vegatime(const char* value);
  void set_vegatime(const char* value, size_t size);
  std::string* mutable_vegatime();
  std::string* release_vegatime();
  void set_allocated_vegatime(std::string* vegatime);
  private:
  const std::string& _internal_vegatime() const;
  void _internal_set_vegatime(const std::string& value);
  std::string* _internal_mutable_vegatime();
  public:

  // string appVersionHash = 28 [json_name = "appVersionHash"];
  void clear_appversionhash();
  const std::string& appversionhash() const;
  void set_appversionhash(const std::string& value);
  void set_appversionhash(std::string&& value);
  void set_appversionhash(const char* value);
  void set_appversionhash(const char* value, size_t size);
  std::string* mutable_appversionhash();
  std::string* release_appversionhash();
  void set_allocated_appversionhash(std::string* appversionhash);
  private:
  const std::string& _internal_appversionhash() const;
  void _internal_set_appversionhash(const std::string& value);
  std::string* _internal_mutable_appversionhash();
  public:

  // string appVersion = 29 [json_name = "appVersion"];
  void clear_appversion();
  const std::string& appversion() const;
  void set_appversion(const std::string& value);
  void set_appversion(std::string&& value);
  void set_appversion(const char* value);
  void set_appversion(const char* value, size_t size);
  std::string* mutable_appversion();
  std::string* release_appversion();
  void set_allocated_appversion(std::string* appversion);
  private:
  const std::string& _internal_appversion() const;
  void _internal_set_appversion(const std::string& value);
  std::string* _internal_mutable_appversion();
  public:

  // string chainVersion = 30 [json_name = "chainVersion"];
  void clear_chainversion();
  const std::string& chainversion() const;
  void set_chainversion(const std::string& value);
  void set_chainversion(std::string&& value);
  void set_chainversion(const char* value);
  void set_chainversion(const char* value, size_t size);
  std::string* mutable_chainversion();
  std::string* release_chainversion();
  void set_allocated_chainversion(std::string* chainversion);
  private:
  const std::string& _internal_chainversion() const;
  void _internal_set_chainversion(const std::string& value);
  std::string* _internal_mutable_chainversion();
  public:

  // string uptime = 32 [json_name = "uptime"];
  void clear_uptime();
  const std::string& uptime() const;
  void set_uptime(const std::string& value);
  void set_uptime(std::string&& value);
  void set_uptime(const char* value);
  void set_uptime(const char* value, size_t size);
  std::string* mutable_uptime();
  std::string* release_uptime();
  void set_allocated_uptime(std::string* uptime);
  private:
  const std::string& _internal_uptime() const;
  void _internal_set_uptime(const std::string& value);
  std::string* _internal_mutable_uptime();
  public:

  // string chainID = 33 [json_name = "chainID"];
  void clear_chainid();
  const std::string& chainid() const;
  void set_chainid(const std::string& value);
  void set_chainid(std::string&& value);
  void set_chainid(const char* value);
  void set_chainid(const char* value, size_t size);
  std::string* mutable_chainid();
  std::string* release_chainid();
  void set_allocated_chainid(std::string* chainid);
  private:
  const std::string& _internal_chainid() const;
  void _internal_set_chainid(const std::string& value);
  std::string* _internal_mutable_chainid();
  public:

  // uint64 blockHeight = 1 [json_name = "blockHeight"];
  void clear_blockheight();
  ::PROTOBUF_NAMESPACE_ID::uint64 blockheight() const;
  void set_blockheight(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blockheight() const;
  void _internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 backlogLength = 2 [json_name = "backlogLength"];
  void clear_backloglength();
  ::PROTOBUF_NAMESPACE_ID::uint64 backloglength() const;
  void set_backloglength(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_backloglength() const;
  void _internal_set_backloglength(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 totalPeers = 3 [json_name = "totalPeers"];
  void clear_totalpeers();
  ::PROTOBUF_NAMESPACE_ID::uint64 totalpeers() const;
  void set_totalpeers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_totalpeers() const;
  void _internal_set_totalpeers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 txPerBlock = 8 [json_name = "txPerBlock"];
  void clear_txperblock();
  ::PROTOBUF_NAMESPACE_ID::uint64 txperblock() const;
  void set_txperblock(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txperblock() const;
  void _internal_set_txperblock(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 averageTxBytes = 9 [json_name = "averageTxBytes"];
  void clear_averagetxbytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 averagetxbytes() const;
  void set_averagetxbytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_averagetxbytes() const;
  void _internal_set_averagetxbytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 averageOrdersPerBlock = 10 [json_name = "averageOrdersPerBlock"];
  void clear_averageordersperblock();
  ::PROTOBUF_NAMESPACE_ID::uint64 averageordersperblock() const;
  void set_averageordersperblock(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_averageordersperblock() const;
  void _internal_set_averageordersperblock(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tradesPerSecond = 11 [json_name = "tradesPerSecond"];
  void clear_tradespersecond();
  ::PROTOBUF_NAMESPACE_ID::uint64 tradespersecond() const;
  void set_tradespersecond(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tradespersecond() const;
  void _internal_set_tradespersecond(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ordersPerSecond = 12 [json_name = "ordersPerSecond"];
  void clear_orderspersecond();
  ::PROTOBUF_NAMESPACE_ID::uint64 orderspersecond() const;
  void set_orderspersecond(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_orderspersecond() const;
  void _internal_set_orderspersecond(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 totalMarkets = 13 [json_name = "totalMarkets"];
  void clear_totalmarkets();
  ::PROTOBUF_NAMESPACE_ID::uint64 totalmarkets() const;
  void set_totalmarkets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_totalmarkets() const;
  void _internal_set_totalmarkets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.ChainStatus status = 7 [json_name = "status"];
  void clear_status();
  ::vega::ChainStatus status() const;
  void set_status(::vega::ChainStatus value);
  private:
  ::vega::ChainStatus _internal_status() const;
  void _internal_set_status(::vega::ChainStatus value);
  public:

  // uint32 orderSubscriptions = 21 [json_name = "orderSubscriptions"];
  void clear_ordersubscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 ordersubscriptions() const;
  void set_ordersubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ordersubscriptions() const;
  void _internal_set_ordersubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 totalAmendOrder = 16 [json_name = "totalAmendOrder"];
  void clear_totalamendorder();
  ::PROTOBUF_NAMESPACE_ID::uint64 totalamendorder() const;
  void set_totalamendorder(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_totalamendorder() const;
  void _internal_set_totalamendorder(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 totalCancelOrder = 17 [json_name = "totalCancelOrder"];
  void clear_totalcancelorder();
  ::PROTOBUF_NAMESPACE_ID::uint64 totalcancelorder() const;
  void set_totalcancelorder(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_totalcancelorder() const;
  void _internal_set_totalcancelorder(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 totalCreateOrder = 18 [json_name = "totalCreateOrder"];
  void clear_totalcreateorder();
  ::PROTOBUF_NAMESPACE_ID::uint64 totalcreateorder() const;
  void set_totalcreateorder(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_totalcreateorder() const;
  void _internal_set_totalcreateorder(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 totalOrders = 19 [json_name = "totalOrders"];
  void clear_totalorders();
  ::PROTOBUF_NAMESPACE_ID::uint64 totalorders() const;
  void set_totalorders(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_totalorders() const;
  void _internal_set_totalorders(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 totalTrades = 20 [json_name = "totalTrades"];
  void clear_totaltrades();
  ::PROTOBUF_NAMESPACE_ID::uint64 totaltrades() const;
  void set_totaltrades(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_totaltrades() const;
  void _internal_set_totaltrades(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 tradeSubscriptions = 22 [json_name = "tradeSubscriptions"];
  void clear_tradesubscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 tradesubscriptions() const;
  void set_tradesubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tradesubscriptions() const;
  void _internal_set_tradesubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 candleSubscriptions = 23 [json_name = "candleSubscriptions"];
  void clear_candlesubscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 candlesubscriptions() const;
  void set_candlesubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_candlesubscriptions() const;
  void _internal_set_candlesubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 marketDepthSubscriptions = 24 [json_name = "marketDepthSubscriptions"];
  void clear_marketdepthsubscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 marketdepthsubscriptions() const;
  void set_marketdepthsubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_marketdepthsubscriptions() const;
  void _internal_set_marketdepthsubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 positionsSubscriptions = 25 [json_name = "positionsSubscriptions"];
  void clear_positionssubscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 positionssubscriptions() const;
  void set_positionssubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_positionssubscriptions() const;
  void _internal_set_positionssubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 accountSubscriptions = 26 [json_name = "accountSubscriptions"];
  void clear_accountsubscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountsubscriptions() const;
  void set_accountsubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountsubscriptions() const;
  void _internal_set_accountsubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 marketDataSubscriptions = 27 [json_name = "marketDataSubscriptions"];
  void clear_marketdatasubscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 marketdatasubscriptions() const;
  void set_marketdatasubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_marketdatasubscriptions() const;
  void _internal_set_marketdatasubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 blockDuration = 31 [json_name = "blockDuration"];
  void clear_blockduration();
  ::PROTOBUF_NAMESPACE_ID::uint64 blockduration() const;
  void set_blockduration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blockduration() const;
  void _internal_set_blockduration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 marketDepthUpdatesSubscriptions = 34 [json_name = "marketDepthUpdatesSubscriptions"];
  void clear_marketdepthupdatessubscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 marketdepthupdatessubscriptions() const;
  void set_marketdepthupdatessubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_marketdepthupdatessubscriptions() const;
  void _internal_set_marketdepthupdatessubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Statistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr genesistime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currenttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vegatime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appversionhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chainversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uptime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chainid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blockheight_;
  ::PROTOBUF_NAMESPACE_ID::uint64 backloglength_;
  ::PROTOBUF_NAMESPACE_ID::uint64 totalpeers_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txperblock_;
  ::PROTOBUF_NAMESPACE_ID::uint64 averagetxbytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 averageordersperblock_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tradespersecond_;
  ::PROTOBUF_NAMESPACE_ID::uint64 orderspersecond_;
  ::PROTOBUF_NAMESPACE_ID::uint64 totalmarkets_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ordersubscriptions_;
  ::PROTOBUF_NAMESPACE_ID::uint64 totalamendorder_;
  ::PROTOBUF_NAMESPACE_ID::uint64 totalcancelorder_;
  ::PROTOBUF_NAMESPACE_ID::uint64 totalcreateorder_;
  ::PROTOBUF_NAMESPACE_ID::uint64 totalorders_;
  ::PROTOBUF_NAMESPACE_ID::uint64 totaltrades_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tradesubscriptions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 candlesubscriptions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 marketdepthsubscriptions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 positionssubscriptions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountsubscriptions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 marketdatasubscriptions_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blockduration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 marketdepthupdatessubscriptions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Deposit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Deposit) */ {
 public:
  inline Deposit() : Deposit(nullptr) {}
  virtual ~Deposit();

  Deposit(const Deposit& from);
  Deposit(Deposit&& from) noexcept
    : Deposit() {
    *this = ::std::move(from);
  }

  inline Deposit& operator=(const Deposit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deposit& operator=(Deposit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Deposit& default_instance();

  static inline const Deposit* internal_default_instance() {
    return reinterpret_cast<const Deposit*>(
               &_Deposit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Deposit& a, Deposit& b) {
    a.Swap(&b);
  }
  inline void Swap(Deposit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Deposit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Deposit* New() const final {
    return CreateMaybeMessage<Deposit>(nullptr);
  }

  Deposit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Deposit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Deposit& from);
  void MergeFrom(const Deposit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deposit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Deposit";
  }
  protected:
  explicit Deposit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Deposit_Status Status;
  static constexpr Status DEPOSIT_STATUS_UNSPECIFIED =
    Deposit_Status_DEPOSIT_STATUS_UNSPECIFIED;
  static constexpr Status DEPOSIT_STATUS_OPEN =
    Deposit_Status_DEPOSIT_STATUS_OPEN;
  static constexpr Status DEPOSIT_STATUS_CANCELLED =
    Deposit_Status_DEPOSIT_STATUS_CANCELLED;
  static constexpr Status DEPOSIT_STATUS_FINALIZED =
    Deposit_Status_DEPOSIT_STATUS_FINALIZED;
  static inline bool Status_IsValid(int value) {
    return Deposit_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Deposit_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Deposit_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Deposit_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Deposit_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Deposit_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return Deposit_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPartyIDFieldNumber = 3,
    kAssetFieldNumber = 4,
    kAmountFieldNumber = 5,
    kTxHashFieldNumber = 6,
    kCreditedTimestampFieldNumber = 7,
    kCreatedTimestampFieldNumber = 8,
    kStatusFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string partyID = 3 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string asset = 4 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // string amount = 5 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string txHash = 6 [json_name = "txHash"];
  void clear_txhash();
  const std::string& txhash() const;
  void set_txhash(const std::string& value);
  void set_txhash(std::string&& value);
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  std::string* mutable_txhash();
  std::string* release_txhash();
  void set_allocated_txhash(std::string* txhash);
  private:
  const std::string& _internal_txhash() const;
  void _internal_set_txhash(const std::string& value);
  std::string* _internal_mutable_txhash();
  public:

  // int64 creditedTimestamp = 7 [json_name = "creditedTimestamp"];
  void clear_creditedtimestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 creditedtimestamp() const;
  void set_creditedtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_creditedtimestamp() const;
  void _internal_set_creditedtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 createdTimestamp = 8 [json_name = "createdTimestamp"];
  void clear_createdtimestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 createdtimestamp() const;
  void set_createdtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createdtimestamp() const;
  void _internal_set_createdtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.Deposit.Status status = 2 [json_name = "status"];
  void clear_status();
  ::vega::Deposit_Status status() const;
  void set_status(::vega::Deposit_Status value);
  private:
  ::vega::Deposit_Status _internal_status() const;
  void _internal_set_status(::vega::Deposit_Status value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Deposit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txhash_;
  ::PROTOBUF_NAMESPACE_ID::int64 creditedtimestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 createdtimestamp_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Withdrawal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Withdrawal) */ {
 public:
  inline Withdrawal() : Withdrawal(nullptr) {}
  virtual ~Withdrawal();

  Withdrawal(const Withdrawal& from);
  Withdrawal(Withdrawal&& from) noexcept
    : Withdrawal() {
    *this = ::std::move(from);
  }

  inline Withdrawal& operator=(const Withdrawal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Withdrawal& operator=(Withdrawal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Withdrawal& default_instance();

  static inline const Withdrawal* internal_default_instance() {
    return reinterpret_cast<const Withdrawal*>(
               &_Withdrawal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Withdrawal& a, Withdrawal& b) {
    a.Swap(&b);
  }
  inline void Swap(Withdrawal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Withdrawal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Withdrawal* New() const final {
    return CreateMaybeMessage<Withdrawal>(nullptr);
  }

  Withdrawal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Withdrawal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Withdrawal& from);
  void MergeFrom(const Withdrawal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Withdrawal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Withdrawal";
  }
  protected:
  explicit Withdrawal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Withdrawal_Status Status;
  static constexpr Status WITHDRAWAL_STATUS_UNSPECIFIED =
    Withdrawal_Status_WITHDRAWAL_STATUS_UNSPECIFIED;
  static constexpr Status WITHDRAWAL_STATUS_OPEN =
    Withdrawal_Status_WITHDRAWAL_STATUS_OPEN;
  static constexpr Status WITHDRAWAL_STATUS_CANCELLED =
    Withdrawal_Status_WITHDRAWAL_STATUS_CANCELLED;
  static constexpr Status WITHDRAWAL_STATUS_FINALIZED =
    Withdrawal_Status_WITHDRAWAL_STATUS_FINALIZED;
  static inline bool Status_IsValid(int value) {
    return Withdrawal_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Withdrawal_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Withdrawal_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Withdrawal_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Withdrawal_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Withdrawal_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return Withdrawal_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPartyIDFieldNumber = 2,
    kAssetFieldNumber = 4,
    kRefFieldNumber = 6,
    kTxHashFieldNumber = 8,
    kExtFieldNumber = 11,
    kAmountFieldNumber = 3,
    kExpiryFieldNumber = 7,
    kCreatedTimestampFieldNumber = 9,
    kWithdrawnTimestampFieldNumber = 10,
    kStatusFieldNumber = 5,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string partyID = 2 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string asset = 4 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // string ref = 6 [json_name = "ref"];
  void clear_ref();
  const std::string& ref() const;
  void set_ref(const std::string& value);
  void set_ref(std::string&& value);
  void set_ref(const char* value);
  void set_ref(const char* value, size_t size);
  std::string* mutable_ref();
  std::string* release_ref();
  void set_allocated_ref(std::string* ref);
  private:
  const std::string& _internal_ref() const;
  void _internal_set_ref(const std::string& value);
  std::string* _internal_mutable_ref();
  public:

  // string txHash = 8 [json_name = "txHash"];
  void clear_txhash();
  const std::string& txhash() const;
  void set_txhash(const std::string& value);
  void set_txhash(std::string&& value);
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  std::string* mutable_txhash();
  std::string* release_txhash();
  void set_allocated_txhash(std::string* txhash);
  private:
  const std::string& _internal_txhash() const;
  void _internal_set_txhash(const std::string& value);
  std::string* _internal_mutable_txhash();
  public:

  // .vega.WithdrawExt ext = 11 [json_name = "ext"];
  bool has_ext() const;
  private:
  bool _internal_has_ext() const;
  public:
  void clear_ext();
  const ::vega::WithdrawExt& ext() const;
  ::vega::WithdrawExt* release_ext();
  ::vega::WithdrawExt* mutable_ext();
  void set_allocated_ext(::vega::WithdrawExt* ext);
  private:
  const ::vega::WithdrawExt& _internal_ext() const;
  ::vega::WithdrawExt* _internal_mutable_ext();
  public:
  void unsafe_arena_set_allocated_ext(
      ::vega::WithdrawExt* ext);
  ::vega::WithdrawExt* unsafe_arena_release_ext();

  // uint64 amount = 3 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 expiry = 7 [json_name = "expiry"];
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::int64 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 createdTimestamp = 9 [json_name = "createdTimestamp"];
  void clear_createdtimestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 createdtimestamp() const;
  void set_createdtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createdtimestamp() const;
  void _internal_set_createdtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 withdrawnTimestamp = 10 [json_name = "withdrawnTimestamp"];
  void clear_withdrawntimestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawntimestamp() const;
  void set_withdrawntimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_withdrawntimestamp() const;
  void _internal_set_withdrawntimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.Withdrawal.Status status = 5 [json_name = "status"];
  void clear_status();
  ::vega::Withdrawal_Status status() const;
  void set_status(::vega::Withdrawal_Status value);
  private:
  ::vega::Withdrawal_Status _internal_status() const;
  void _internal_set_status(::vega::Withdrawal_Status value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Withdrawal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txhash_;
  ::vega::WithdrawExt* ext_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiry_;
  ::PROTOBUF_NAMESPACE_ID::int64 createdtimestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 withdrawntimestamp_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class WithdrawSubmission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.WithdrawSubmission) */ {
 public:
  inline WithdrawSubmission() : WithdrawSubmission(nullptr) {}
  virtual ~WithdrawSubmission();

  WithdrawSubmission(const WithdrawSubmission& from);
  WithdrawSubmission(WithdrawSubmission&& from) noexcept
    : WithdrawSubmission() {
    *this = ::std::move(from);
  }

  inline WithdrawSubmission& operator=(const WithdrawSubmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawSubmission& operator=(WithdrawSubmission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithdrawSubmission& default_instance();

  static inline const WithdrawSubmission* internal_default_instance() {
    return reinterpret_cast<const WithdrawSubmission*>(
               &_WithdrawSubmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(WithdrawSubmission& a, WithdrawSubmission& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawSubmission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawSubmission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithdrawSubmission* New() const final {
    return CreateMaybeMessage<WithdrawSubmission>(nullptr);
  }

  WithdrawSubmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawSubmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithdrawSubmission& from);
  void MergeFrom(const WithdrawSubmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawSubmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.WithdrawSubmission";
  }
  protected:
  explicit WithdrawSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
    kAssetFieldNumber = 3,
    kExtFieldNumber = 4,
    kAmountFieldNumber = 2,
  };
  // string partyID = 1 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string asset = 3 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // .vega.WithdrawExt ext = 4 [json_name = "ext"];
  bool has_ext() const;
  private:
  bool _internal_has_ext() const;
  public:
  void clear_ext();
  const ::vega::WithdrawExt& ext() const;
  ::vega::WithdrawExt* release_ext();
  ::vega::WithdrawExt* mutable_ext();
  void set_allocated_ext(::vega::WithdrawExt* ext);
  private:
  const ::vega::WithdrawExt& _internal_ext() const;
  ::vega::WithdrawExt* _internal_mutable_ext();
  public:
  void unsafe_arena_set_allocated_ext(
      ::vega::WithdrawExt* ext);
  ::vega::WithdrawExt* unsafe_arena_release_ext();

  // uint64 amount = 2 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.WithdrawSubmission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::vega::WithdrawExt* ext_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class WithdrawExt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.WithdrawExt) */ {
 public:
  inline WithdrawExt() : WithdrawExt(nullptr) {}
  virtual ~WithdrawExt();

  WithdrawExt(const WithdrawExt& from);
  WithdrawExt(WithdrawExt&& from) noexcept
    : WithdrawExt() {
    *this = ::std::move(from);
  }

  inline WithdrawExt& operator=(const WithdrawExt& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithdrawExt& operator=(WithdrawExt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithdrawExt& default_instance();

  enum ExtCase {
    kErc20 = 1,
    EXT_NOT_SET = 0,
  };

  static inline const WithdrawExt* internal_default_instance() {
    return reinterpret_cast<const WithdrawExt*>(
               &_WithdrawExt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(WithdrawExt& a, WithdrawExt& b) {
    a.Swap(&b);
  }
  inline void Swap(WithdrawExt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithdrawExt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithdrawExt* New() const final {
    return CreateMaybeMessage<WithdrawExt>(nullptr);
  }

  WithdrawExt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithdrawExt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithdrawExt& from);
  void MergeFrom(const WithdrawExt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithdrawExt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.WithdrawExt";
  }
  protected:
  explicit WithdrawExt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErc20FieldNumber = 1,
  };
  // .vega.Erc20WithdrawExt erc20 = 1 [json_name = "erc20"];
  bool has_erc20() const;
  private:
  bool _internal_has_erc20() const;
  public:
  void clear_erc20();
  const ::vega::Erc20WithdrawExt& erc20() const;
  ::vega::Erc20WithdrawExt* release_erc20();
  ::vega::Erc20WithdrawExt* mutable_erc20();
  void set_allocated_erc20(::vega::Erc20WithdrawExt* erc20);
  private:
  const ::vega::Erc20WithdrawExt& _internal_erc20() const;
  ::vega::Erc20WithdrawExt* _internal_mutable_erc20();
  public:
  void unsafe_arena_set_allocated_erc20(
      ::vega::Erc20WithdrawExt* erc20);
  ::vega::Erc20WithdrawExt* unsafe_arena_release_erc20();

  void clear_ext();
  ExtCase ext_case() const;
  // @@protoc_insertion_point(class_scope:vega.WithdrawExt)
 private:
  class _Internal;
  void set_has_erc20();

  inline bool has_ext() const;
  inline void clear_has_ext();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ExtUnion {
    ExtUnion() {}
    ::vega::Erc20WithdrawExt* erc20_;
  } ext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Erc20WithdrawExt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Erc20WithdrawExt) */ {
 public:
  inline Erc20WithdrawExt() : Erc20WithdrawExt(nullptr) {}
  virtual ~Erc20WithdrawExt();

  Erc20WithdrawExt(const Erc20WithdrawExt& from);
  Erc20WithdrawExt(Erc20WithdrawExt&& from) noexcept
    : Erc20WithdrawExt() {
    *this = ::std::move(from);
  }

  inline Erc20WithdrawExt& operator=(const Erc20WithdrawExt& from) {
    CopyFrom(from);
    return *this;
  }
  inline Erc20WithdrawExt& operator=(Erc20WithdrawExt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Erc20WithdrawExt& default_instance();

  static inline const Erc20WithdrawExt* internal_default_instance() {
    return reinterpret_cast<const Erc20WithdrawExt*>(
               &_Erc20WithdrawExt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Erc20WithdrawExt& a, Erc20WithdrawExt& b) {
    a.Swap(&b);
  }
  inline void Swap(Erc20WithdrawExt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Erc20WithdrawExt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Erc20WithdrawExt* New() const final {
    return CreateMaybeMessage<Erc20WithdrawExt>(nullptr);
  }

  Erc20WithdrawExt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Erc20WithdrawExt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Erc20WithdrawExt& from);
  void MergeFrom(const Erc20WithdrawExt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Erc20WithdrawExt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Erc20WithdrawExt";
  }
  protected:
  explicit Erc20WithdrawExt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiverAddressFieldNumber = 1,
  };
  // string receiverAddress = 1 [json_name = "receiverAddress"];
  void clear_receiveraddress();
  const std::string& receiveraddress() const;
  void set_receiveraddress(const std::string& value);
  void set_receiveraddress(std::string&& value);
  void set_receiveraddress(const char* value);
  void set_receiveraddress(const char* value, size_t size);
  std::string* mutable_receiveraddress();
  std::string* release_receiveraddress();
  void set_allocated_receiveraddress(std::string* receiveraddress);
  private:
  const std::string& _internal_receiveraddress() const;
  void _internal_set_receiveraddress(const std::string& value);
  std::string* _internal_mutable_receiveraddress();
  public:

  // @@protoc_insertion_point(class_scope:vega.Erc20WithdrawExt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiveraddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class OrderAmendment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.OrderAmendment) */ {
 public:
  inline OrderAmendment() : OrderAmendment(nullptr) {}
  virtual ~OrderAmendment();

  OrderAmendment(const OrderAmendment& from);
  OrderAmendment(OrderAmendment&& from) noexcept
    : OrderAmendment() {
    *this = ::std::move(from);
  }

  inline OrderAmendment& operator=(const OrderAmendment& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderAmendment& operator=(OrderAmendment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderAmendment& default_instance();

  static inline const OrderAmendment* internal_default_instance() {
    return reinterpret_cast<const OrderAmendment*>(
               &_OrderAmendment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(OrderAmendment& a, OrderAmendment& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderAmendment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderAmendment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderAmendment* New() const final {
    return CreateMaybeMessage<OrderAmendment>(nullptr);
  }

  OrderAmendment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderAmendment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderAmendment& from);
  void MergeFrom(const OrderAmendment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderAmendment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.OrderAmendment";
  }
  protected:
  explicit OrderAmendment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIDFieldNumber = 1,
    kPartyIDFieldNumber = 2,
    kMarketIDFieldNumber = 3,
    kPriceFieldNumber = 4,
    kExpiresAtFieldNumber = 6,
    kPeggedOffsetFieldNumber = 8,
    kSizeDeltaFieldNumber = 5,
    kTimeInForceFieldNumber = 7,
    kPeggedReferenceFieldNumber = 9,
  };
  // string orderID = 1 [json_name = "orderID", (.validator.field) = {
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // string partyID = 2 [json_name = "partyID", (.validator.field) = {
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string marketID = 3 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // .vega.Price price = 4 [json_name = "price"];
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::vega::Price& price() const;
  ::vega::Price* release_price();
  ::vega::Price* mutable_price();
  void set_allocated_price(::vega::Price* price);
  private:
  const ::vega::Price& _internal_price() const;
  ::vega::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::vega::Price* price);
  ::vega::Price* unsafe_arena_release_price();

  // .vega.Timestamp expiresAt = 6 [json_name = "expiresAt"];
  bool has_expiresat() const;
  private:
  bool _internal_has_expiresat() const;
  public:
  void clear_expiresat();
  const ::vega::Timestamp& expiresat() const;
  ::vega::Timestamp* release_expiresat();
  ::vega::Timestamp* mutable_expiresat();
  void set_allocated_expiresat(::vega::Timestamp* expiresat);
  private:
  const ::vega::Timestamp& _internal_expiresat() const;
  ::vega::Timestamp* _internal_mutable_expiresat();
  public:
  void unsafe_arena_set_allocated_expiresat(
      ::vega::Timestamp* expiresat);
  ::vega::Timestamp* unsafe_arena_release_expiresat();

  // .google.protobuf.Int64Value peggedOffset = 8 [json_name = "peggedOffset"];
  bool has_peggedoffset() const;
  private:
  bool _internal_has_peggedoffset() const;
  public:
  void clear_peggedoffset();
  const PROTOBUF_NAMESPACE_ID::Int64Value& peggedoffset() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* release_peggedoffset();
  PROTOBUF_NAMESPACE_ID::Int64Value* mutable_peggedoffset();
  void set_allocated_peggedoffset(PROTOBUF_NAMESPACE_ID::Int64Value* peggedoffset);
  private:
  const PROTOBUF_NAMESPACE_ID::Int64Value& _internal_peggedoffset() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_peggedoffset();
  public:
  void unsafe_arena_set_allocated_peggedoffset(
      PROTOBUF_NAMESPACE_ID::Int64Value* peggedoffset);
  PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_peggedoffset();

  // int64 sizeDelta = 5 [json_name = "sizeDelta"];
  void clear_sizedelta();
  ::PROTOBUF_NAMESPACE_ID::int64 sizedelta() const;
  void set_sizedelta(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sizedelta() const;
  void _internal_set_sizedelta(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.Order.TimeInForce timeInForce = 7 [json_name = "timeInForce"];
  void clear_timeinforce();
  ::vega::Order_TimeInForce timeinforce() const;
  void set_timeinforce(::vega::Order_TimeInForce value);
  private:
  ::vega::Order_TimeInForce _internal_timeinforce() const;
  void _internal_set_timeinforce(::vega::Order_TimeInForce value);
  public:

  // .vega.PeggedReference peggedReference = 9 [json_name = "peggedReference"];
  void clear_peggedreference();
  ::vega::PeggedReference peggedreference() const;
  void set_peggedreference(::vega::PeggedReference value);
  private:
  ::vega::PeggedReference _internal_peggedreference() const;
  void _internal_set_peggedreference(::vega::PeggedReference value);
  public:

  // @@protoc_insertion_point(class_scope:vega.OrderAmendment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::vega::Price* price_;
  ::vega::Timestamp* expiresat_;
  PROTOBUF_NAMESPACE_ID::Int64Value* peggedoffset_;
  ::PROTOBUF_NAMESPACE_ID::int64 sizedelta_;
  int timeinforce_;
  int peggedreference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class OrderSubmission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.OrderSubmission) */ {
 public:
  inline OrderSubmission() : OrderSubmission(nullptr) {}
  virtual ~OrderSubmission();

  OrderSubmission(const OrderSubmission& from);
  OrderSubmission(OrderSubmission&& from) noexcept
    : OrderSubmission() {
    *this = ::std::move(from);
  }

  inline OrderSubmission& operator=(const OrderSubmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderSubmission& operator=(OrderSubmission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderSubmission& default_instance();

  static inline const OrderSubmission* internal_default_instance() {
    return reinterpret_cast<const OrderSubmission*>(
               &_OrderSubmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(OrderSubmission& a, OrderSubmission& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderSubmission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderSubmission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderSubmission* New() const final {
    return CreateMaybeMessage<OrderSubmission>(nullptr);
  }

  OrderSubmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderSubmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderSubmission& from);
  void MergeFrom(const OrderSubmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderSubmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.OrderSubmission";
  }
  protected:
  explicit OrderSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMarketIDFieldNumber = 2,
    kPartyIDFieldNumber = 3,
    kReferenceFieldNumber = 10,
    kPeggedOrderFieldNumber = 11,
    kPriceFieldNumber = 4,
    kSizeFieldNumber = 5,
    kSideFieldNumber = 6,
    kTimeInForceFieldNumber = 7,
    kExpiresAtFieldNumber = 8,
    kTypeFieldNumber = 9,
  };
  // string id = 1 [json_name = "id", (.validator.field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string marketID = 2 [json_name = "marketID", (.validator.field) = {
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string partyID = 3 [json_name = "partyID", (.validator.field) = {
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string reference = 10 [json_name = "reference"];
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // .vega.PeggedOrder peggedOrder = 11 [json_name = "peggedOrder"];
  bool has_peggedorder() const;
  private:
  bool _internal_has_peggedorder() const;
  public:
  void clear_peggedorder();
  const ::vega::PeggedOrder& peggedorder() const;
  ::vega::PeggedOrder* release_peggedorder();
  ::vega::PeggedOrder* mutable_peggedorder();
  void set_allocated_peggedorder(::vega::PeggedOrder* peggedorder);
  private:
  const ::vega::PeggedOrder& _internal_peggedorder() const;
  ::vega::PeggedOrder* _internal_mutable_peggedorder();
  public:
  void unsafe_arena_set_allocated_peggedorder(
      ::vega::PeggedOrder* peggedorder);
  ::vega::PeggedOrder* unsafe_arena_release_peggedorder();

  // uint64 price = 4 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 5 [json_name = "size", (.validator.field) = {
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.Side side = 6 [json_name = "side", (.validator.field) = {
  void clear_side();
  ::vega::Side side() const;
  void set_side(::vega::Side value);
  private:
  ::vega::Side _internal_side() const;
  void _internal_set_side(::vega::Side value);
  public:

  // .vega.Order.TimeInForce timeInForce = 7 [json_name = "timeInForce", (.validator.field) = {
  void clear_timeinforce();
  ::vega::Order_TimeInForce timeinforce() const;
  void set_timeinforce(::vega::Order_TimeInForce value);
  private:
  ::vega::Order_TimeInForce _internal_timeinforce() const;
  void _internal_set_timeinforce(::vega::Order_TimeInForce value);
  public:

  // int64 expiresAt = 8 [json_name = "expiresAt"];
  void clear_expiresat();
  ::PROTOBUF_NAMESPACE_ID::int64 expiresat() const;
  void set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiresat() const;
  void _internal_set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.Order.Type type = 9 [json_name = "type", (.validator.field) = {
  void clear_type();
  ::vega::Order_Type type() const;
  void set_type(::vega::Order_Type value);
  private:
  ::vega::Order_Type _internal_type() const;
  void _internal_set_type(::vega::Order_Type value);
  public:

  // @@protoc_insertion_point(class_scope:vega.OrderSubmission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::vega::PeggedOrder* peggedorder_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  int side_;
  int timeinforce_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiresat_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class OrderCancellation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.OrderCancellation) */ {
 public:
  inline OrderCancellation() : OrderCancellation(nullptr) {}
  virtual ~OrderCancellation();

  OrderCancellation(const OrderCancellation& from);
  OrderCancellation(OrderCancellation&& from) noexcept
    : OrderCancellation() {
    *this = ::std::move(from);
  }

  inline OrderCancellation& operator=(const OrderCancellation& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderCancellation& operator=(OrderCancellation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderCancellation& default_instance();

  static inline const OrderCancellation* internal_default_instance() {
    return reinterpret_cast<const OrderCancellation*>(
               &_OrderCancellation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(OrderCancellation& a, OrderCancellation& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderCancellation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderCancellation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderCancellation* New() const final {
    return CreateMaybeMessage<OrderCancellation>(nullptr);
  }

  OrderCancellation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderCancellation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderCancellation& from);
  void MergeFrom(const OrderCancellation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderCancellation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.OrderCancellation";
  }
  protected:
  explicit OrderCancellation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIDFieldNumber = 1,
    kMarketIDFieldNumber = 2,
    kPartyIDFieldNumber = 3,
  };
  // string orderID = 1 [json_name = "orderID"];
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // string marketID = 2 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string partyID = 3 [json_name = "partyID", (.validator.field) = {
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // @@protoc_insertion_point(class_scope:vega.OrderCancellation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class NodeRegistration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.NodeRegistration) */ {
 public:
  inline NodeRegistration() : NodeRegistration(nullptr) {}
  virtual ~NodeRegistration();

  NodeRegistration(const NodeRegistration& from);
  NodeRegistration(NodeRegistration&& from) noexcept
    : NodeRegistration() {
    *this = ::std::move(from);
  }

  inline NodeRegistration& operator=(const NodeRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeRegistration& operator=(NodeRegistration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeRegistration& default_instance();

  static inline const NodeRegistration* internal_default_instance() {
    return reinterpret_cast<const NodeRegistration*>(
               &_NodeRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(NodeRegistration& a, NodeRegistration& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeRegistration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeRegistration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeRegistration* New() const final {
    return CreateMaybeMessage<NodeRegistration>(nullptr);
  }

  NodeRegistration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeRegistration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeRegistration& from);
  void MergeFrom(const NodeRegistration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeRegistration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.NodeRegistration";
  }
  protected:
  explicit NodeRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyFieldNumber = 1,
    kChainPubKeyFieldNumber = 2,
  };
  // bytes pubKey = 1 [json_name = "pubKey", (.validator.field) = {
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // bytes chainPubKey = 2 [json_name = "chainPubKey", (.validator.field) = {
  void clear_chainpubkey();
  const std::string& chainpubkey() const;
  void set_chainpubkey(const std::string& value);
  void set_chainpubkey(std::string&& value);
  void set_chainpubkey(const char* value);
  void set_chainpubkey(const void* value, size_t size);
  std::string* mutable_chainpubkey();
  std::string* release_chainpubkey();
  void set_allocated_chainpubkey(std::string* chainpubkey);
  private:
  const std::string& _internal_chainpubkey() const;
  void _internal_set_chainpubkey(const std::string& value);
  std::string* _internal_mutable_chainpubkey();
  public:

  // @@protoc_insertion_point(class_scope:vega.NodeRegistration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chainpubkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class NodeVote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.NodeVote) */ {
 public:
  inline NodeVote() : NodeVote(nullptr) {}
  virtual ~NodeVote();

  NodeVote(const NodeVote& from);
  NodeVote(NodeVote&& from) noexcept
    : NodeVote() {
    *this = ::std::move(from);
  }

  inline NodeVote& operator=(const NodeVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeVote& operator=(NodeVote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeVote& default_instance();

  static inline const NodeVote* internal_default_instance() {
    return reinterpret_cast<const NodeVote*>(
               &_NodeVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(NodeVote& a, NodeVote& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeVote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeVote* New() const final {
    return CreateMaybeMessage<NodeVote>(nullptr);
  }

  NodeVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeVote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeVote& from);
  void MergeFrom(const NodeVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeVote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.NodeVote";
  }
  protected:
  explicit NodeVote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyFieldNumber = 1,
    kReferenceFieldNumber = 2,
  };
  // bytes pubKey = 1 [json_name = "pubKey", (.validator.field) = {
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // string reference = 2 [json_name = "reference", (.validator.field) = {
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // @@protoc_insertion_point(class_scope:vega.NodeVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Account PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  virtual ~Account();

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance();

  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kAssetFieldNumber = 4,
    kMarketIDFieldNumber = 5,
    kBalanceFieldNumber = 3,
    kTypeFieldNumber = 6,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string owner = 2 [json_name = "owner"];
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string asset = 4 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // string marketID = 5 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // uint64 balance = 3 [json_name = "balance"];
  void clear_balance();
  ::PROTOBUF_NAMESPACE_ID::uint64 balance() const;
  void set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_balance() const;
  void _internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.AccountType type = 6 [json_name = "type"];
  void clear_type();
  ::vega::AccountType type() const;
  void set_type(::vega::AccountType value);
  private:
  ::vega::AccountType _internal_type() const;
  void _internal_set_type(::vega::AccountType value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 balance_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class FinancialAmount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.FinancialAmount) */ {
 public:
  inline FinancialAmount() : FinancialAmount(nullptr) {}
  virtual ~FinancialAmount();

  FinancialAmount(const FinancialAmount& from);
  FinancialAmount(FinancialAmount&& from) noexcept
    : FinancialAmount() {
    *this = ::std::move(from);
  }

  inline FinancialAmount& operator=(const FinancialAmount& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinancialAmount& operator=(FinancialAmount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FinancialAmount& default_instance();

  static inline const FinancialAmount* internal_default_instance() {
    return reinterpret_cast<const FinancialAmount*>(
               &_FinancialAmount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(FinancialAmount& a, FinancialAmount& b) {
    a.Swap(&b);
  }
  inline void Swap(FinancialAmount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinancialAmount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FinancialAmount* New() const final {
    return CreateMaybeMessage<FinancialAmount>(nullptr);
  }

  FinancialAmount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FinancialAmount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FinancialAmount& from);
  void MergeFrom(const FinancialAmount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinancialAmount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.FinancialAmount";
  }
  protected:
  explicit FinancialAmount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetFieldNumber = 2,
    kAmountFieldNumber = 1,
  };
  // string asset = 2 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // int64 amount = 1 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.FinancialAmount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Transfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Transfer) */ {
 public:
  inline Transfer() : Transfer(nullptr) {}
  virtual ~Transfer();

  Transfer(const Transfer& from);
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transfer& operator=(Transfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transfer& default_instance();

  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transfer* New() const final {
    return CreateMaybeMessage<Transfer>(nullptr);
  }

  Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transfer& from);
  void MergeFrom(const Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Transfer";
  }
  protected:
  explicit Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kAmountFieldNumber = 2,
    kMinAmountFieldNumber = 4,
    kTypeFieldNumber = 3,
  };
  // string owner = 1 [json_name = "owner"];
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // .vega.FinancialAmount amount = 2 [json_name = "amount"];
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::vega::FinancialAmount& amount() const;
  ::vega::FinancialAmount* release_amount();
  ::vega::FinancialAmount* mutable_amount();
  void set_allocated_amount(::vega::FinancialAmount* amount);
  private:
  const ::vega::FinancialAmount& _internal_amount() const;
  ::vega::FinancialAmount* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::vega::FinancialAmount* amount);
  ::vega::FinancialAmount* unsafe_arena_release_amount();

  // int64 minAmount = 4 [json_name = "minAmount"];
  void clear_minamount();
  ::PROTOBUF_NAMESPACE_ID::int64 minamount() const;
  void set_minamount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_minamount() const;
  void _internal_set_minamount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .vega.TransferType type = 3 [json_name = "type"];
  void clear_type();
  ::vega::TransferType type() const;
  void set_type(::vega::TransferType value);
  private:
  ::vega::TransferType _internal_type() const;
  void _internal_set_type(::vega::TransferType value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::vega::FinancialAmount* amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 minamount_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class TransferRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.TransferRequest) */ {
 public:
  inline TransferRequest() : TransferRequest(nullptr) {}
  virtual ~TransferRequest();

  TransferRequest(const TransferRequest& from);
  TransferRequest(TransferRequest&& from) noexcept
    : TransferRequest() {
    *this = ::std::move(from);
  }

  inline TransferRequest& operator=(const TransferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferRequest& operator=(TransferRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferRequest& default_instance();

  static inline const TransferRequest* internal_default_instance() {
    return reinterpret_cast<const TransferRequest*>(
               &_TransferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(TransferRequest& a, TransferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferRequest* New() const final {
    return CreateMaybeMessage<TransferRequest>(nullptr);
  }

  TransferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferRequest& from);
  void MergeFrom(const TransferRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.TransferRequest";
  }
  protected:
  explicit TransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAccountFieldNumber = 1,
    kToAccountFieldNumber = 2,
    kAssetFieldNumber = 5,
    kReferenceFieldNumber = 6,
    kAmountFieldNumber = 3,
    kMinAmountFieldNumber = 4,
  };
  // repeated .vega.Account fromAccount = 1 [json_name = "fromAccount"];
  int fromaccount_size() const;
  private:
  int _internal_fromaccount_size() const;
  public:
  void clear_fromaccount();
  ::vega::Account* mutable_fromaccount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
      mutable_fromaccount();
  private:
  const ::vega::Account& _internal_fromaccount(int index) const;
  ::vega::Account* _internal_add_fromaccount();
  public:
  const ::vega::Account& fromaccount(int index) const;
  ::vega::Account* add_fromaccount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
      fromaccount() const;

  // repeated .vega.Account toAccount = 2 [json_name = "toAccount"];
  int toaccount_size() const;
  private:
  int _internal_toaccount_size() const;
  public:
  void clear_toaccount();
  ::vega::Account* mutable_toaccount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
      mutable_toaccount();
  private:
  const ::vega::Account& _internal_toaccount(int index) const;
  ::vega::Account* _internal_add_toaccount();
  public:
  const ::vega::Account& toaccount(int index) const;
  ::vega::Account* add_toaccount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
      toaccount() const;

  // string asset = 5 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // string reference = 6 [json_name = "reference"];
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // uint64 amount = 3 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 minAmount = 4 [json_name = "minAmount"];
  void clear_minamount();
  ::PROTOBUF_NAMESPACE_ID::uint64 minamount() const;
  void set_minamount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_minamount() const;
  void _internal_set_minamount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.TransferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account > fromaccount_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account > toaccount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 minamount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class LedgerEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.LedgerEntry) */ {
 public:
  inline LedgerEntry() : LedgerEntry(nullptr) {}
  virtual ~LedgerEntry();

  LedgerEntry(const LedgerEntry& from);
  LedgerEntry(LedgerEntry&& from) noexcept
    : LedgerEntry() {
    *this = ::std::move(from);
  }

  inline LedgerEntry& operator=(const LedgerEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LedgerEntry& operator=(LedgerEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LedgerEntry& default_instance();

  static inline const LedgerEntry* internal_default_instance() {
    return reinterpret_cast<const LedgerEntry*>(
               &_LedgerEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(LedgerEntry& a, LedgerEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LedgerEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LedgerEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LedgerEntry* New() const final {
    return CreateMaybeMessage<LedgerEntry>(nullptr);
  }

  LedgerEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LedgerEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LedgerEntry& from);
  void MergeFrom(const LedgerEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LedgerEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.LedgerEntry";
  }
  protected:
  explicit LedgerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAccountFieldNumber = 1,
    kToAccountFieldNumber = 2,
    kReferenceFieldNumber = 4,
    kTypeFieldNumber = 5,
    kAmountFieldNumber = 3,
    kTimestampFieldNumber = 6,
  };
  // string fromAccount = 1 [json_name = "fromAccount"];
  void clear_fromaccount();
  const std::string& fromaccount() const;
  void set_fromaccount(const std::string& value);
  void set_fromaccount(std::string&& value);
  void set_fromaccount(const char* value);
  void set_fromaccount(const char* value, size_t size);
  std::string* mutable_fromaccount();
  std::string* release_fromaccount();
  void set_allocated_fromaccount(std::string* fromaccount);
  private:
  const std::string& _internal_fromaccount() const;
  void _internal_set_fromaccount(const std::string& value);
  std::string* _internal_mutable_fromaccount();
  public:

  // string toAccount = 2 [json_name = "toAccount"];
  void clear_toaccount();
  const std::string& toaccount() const;
  void set_toaccount(const std::string& value);
  void set_toaccount(std::string&& value);
  void set_toaccount(const char* value);
  void set_toaccount(const char* value, size_t size);
  std::string* mutable_toaccount();
  std::string* release_toaccount();
  void set_allocated_toaccount(std::string* toaccount);
  private:
  const std::string& _internal_toaccount() const;
  void _internal_set_toaccount(const std::string& value);
  std::string* _internal_mutable_toaccount();
  public:

  // string reference = 4 [json_name = "reference"];
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // string type = 5 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint64 amount = 3 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 timestamp = 6 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.LedgerEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromaccount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr toaccount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class TransferBalance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.TransferBalance) */ {
 public:
  inline TransferBalance() : TransferBalance(nullptr) {}
  virtual ~TransferBalance();

  TransferBalance(const TransferBalance& from);
  TransferBalance(TransferBalance&& from) noexcept
    : TransferBalance() {
    *this = ::std::move(from);
  }

  inline TransferBalance& operator=(const TransferBalance& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferBalance& operator=(TransferBalance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferBalance& default_instance();

  static inline const TransferBalance* internal_default_instance() {
    return reinterpret_cast<const TransferBalance*>(
               &_TransferBalance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(TransferBalance& a, TransferBalance& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferBalance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferBalance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferBalance* New() const final {
    return CreateMaybeMessage<TransferBalance>(nullptr);
  }

  TransferBalance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferBalance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferBalance& from);
  void MergeFrom(const TransferBalance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferBalance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.TransferBalance";
  }
  protected:
  explicit TransferBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kBalanceFieldNumber = 2,
  };
  // .vega.Account account = 1 [json_name = "account"];
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::vega::Account& account() const;
  ::vega::Account* release_account();
  ::vega::Account* mutable_account();
  void set_allocated_account(::vega::Account* account);
  private:
  const ::vega::Account& _internal_account() const;
  ::vega::Account* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::vega::Account* account);
  ::vega::Account* unsafe_arena_release_account();

  // uint64 balance = 2 [json_name = "balance"];
  void clear_balance();
  ::PROTOBUF_NAMESPACE_ID::uint64 balance() const;
  void set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_balance() const;
  void _internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.TransferBalance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::Account* account_;
  ::PROTOBUF_NAMESPACE_ID::uint64 balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class TransferResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.TransferResponse) */ {
 public:
  inline TransferResponse() : TransferResponse(nullptr) {}
  virtual ~TransferResponse();

  TransferResponse(const TransferResponse& from);
  TransferResponse(TransferResponse&& from) noexcept
    : TransferResponse() {
    *this = ::std::move(from);
  }

  inline TransferResponse& operator=(const TransferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferResponse& operator=(TransferResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferResponse& default_instance();

  static inline const TransferResponse* internal_default_instance() {
    return reinterpret_cast<const TransferResponse*>(
               &_TransferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(TransferResponse& a, TransferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferResponse* New() const final {
    return CreateMaybeMessage<TransferResponse>(nullptr);
  }

  TransferResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferResponse& from);
  void MergeFrom(const TransferResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.TransferResponse";
  }
  protected:
  explicit TransferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransfersFieldNumber = 1,
    kBalancesFieldNumber = 2,
  };
  // repeated .vega.LedgerEntry transfers = 1 [json_name = "transfers"];
  int transfers_size() const;
  private:
  int _internal_transfers_size() const;
  public:
  void clear_transfers();
  ::vega::LedgerEntry* mutable_transfers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LedgerEntry >*
      mutable_transfers();
  private:
  const ::vega::LedgerEntry& _internal_transfers(int index) const;
  ::vega::LedgerEntry* _internal_add_transfers();
  public:
  const ::vega::LedgerEntry& transfers(int index) const;
  ::vega::LedgerEntry* add_transfers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LedgerEntry >&
      transfers() const;

  // repeated .vega.TransferBalance balances = 2 [json_name = "balances"];
  int balances_size() const;
  private:
  int _internal_balances_size() const;
  public:
  void clear_balances();
  ::vega::TransferBalance* mutable_balances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferBalance >*
      mutable_balances();
  private:
  const ::vega::TransferBalance& _internal_balances(int index) const;
  ::vega::TransferBalance* _internal_add_balances();
  public:
  const ::vega::TransferBalance& balances(int index) const;
  ::vega::TransferBalance* add_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferBalance >&
      balances() const;

  // @@protoc_insertion_point(class_scope:vega.TransferResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LedgerEntry > transfers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferBalance > balances_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class MarginLevels PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.MarginLevels) */ {
 public:
  inline MarginLevels() : MarginLevels(nullptr) {}
  virtual ~MarginLevels();

  MarginLevels(const MarginLevels& from);
  MarginLevels(MarginLevels&& from) noexcept
    : MarginLevels() {
    *this = ::std::move(from);
  }

  inline MarginLevels& operator=(const MarginLevels& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarginLevels& operator=(MarginLevels&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarginLevels& default_instance();

  static inline const MarginLevels* internal_default_instance() {
    return reinterpret_cast<const MarginLevels*>(
               &_MarginLevels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(MarginLevels& a, MarginLevels& b) {
    a.Swap(&b);
  }
  inline void Swap(MarginLevels* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarginLevels* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarginLevels* New() const final {
    return CreateMaybeMessage<MarginLevels>(nullptr);
  }

  MarginLevels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarginLevels>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarginLevels& from);
  void MergeFrom(const MarginLevels& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarginLevels* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.MarginLevels";
  }
  protected:
  explicit MarginLevels(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 5,
    kMarketIDFieldNumber = 6,
    kAssetFieldNumber = 7,
    kMaintenanceMarginFieldNumber = 1,
    kSearchLevelFieldNumber = 2,
    kInitialMarginFieldNumber = 3,
    kCollateralReleaseLevelFieldNumber = 4,
    kTimestampFieldNumber = 8,
  };
  // string partyID = 5 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string marketID = 6 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string asset = 7 [json_name = "asset"];
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // uint64 maintenanceMargin = 1 [json_name = "maintenanceMargin"];
  void clear_maintenancemargin();
  ::PROTOBUF_NAMESPACE_ID::uint64 maintenancemargin() const;
  void set_maintenancemargin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maintenancemargin() const;
  void _internal_set_maintenancemargin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 searchLevel = 2 [json_name = "searchLevel"];
  void clear_searchlevel();
  ::PROTOBUF_NAMESPACE_ID::uint64 searchlevel() const;
  void set_searchlevel(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_searchlevel() const;
  void _internal_set_searchlevel(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 initialMargin = 3 [json_name = "initialMargin"];
  void clear_initialmargin();
  ::PROTOBUF_NAMESPACE_ID::uint64 initialmargin() const;
  void set_initialmargin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_initialmargin() const;
  void _internal_set_initialmargin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 collateralReleaseLevel = 4 [json_name = "collateralReleaseLevel"];
  void clear_collateralreleaselevel();
  ::PROTOBUF_NAMESPACE_ID::uint64 collateralreleaselevel() const;
  void set_collateralreleaselevel(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_collateralreleaselevel() const;
  void _internal_set_collateralreleaselevel(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 timestamp = 8 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.MarginLevels)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maintenancemargin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 searchlevel_;
  ::PROTOBUF_NAMESPACE_ID::uint64 initialmargin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 collateralreleaselevel_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class MarketData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.MarketData) */ {
 public:
  inline MarketData() : MarketData(nullptr) {}
  virtual ~MarketData();

  MarketData(const MarketData& from);
  MarketData(MarketData&& from) noexcept
    : MarketData() {
    *this = ::std::move(from);
  }

  inline MarketData& operator=(const MarketData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketData& operator=(MarketData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketData& default_instance();

  static inline const MarketData* internal_default_instance() {
    return reinterpret_cast<const MarketData*>(
               &_MarketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(MarketData& a, MarketData& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketData* New() const final {
    return CreateMaybeMessage<MarketData>(nullptr);
  }

  MarketData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketData& from);
  void MergeFrom(const MarketData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.MarketData";
  }
  protected:
  explicit MarketData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceMonitoringBoundsFieldNumber = 23,
    kMarketFieldNumber = 12,
    kTargetStakeFieldNumber = 21,
    kSuppliedStakeFieldNumber = 22,
    kMarkPriceFieldNumber = 1,
    kBestBidPriceFieldNumber = 2,
    kBestBidVolumeFieldNumber = 3,
    kBestOfferPriceFieldNumber = 4,
    kBestOfferVolumeFieldNumber = 5,
    kBestStaticBidPriceFieldNumber = 6,
    kBestStaticBidVolumeFieldNumber = 7,
    kBestStaticOfferPriceFieldNumber = 8,
    kBestStaticOfferVolumeFieldNumber = 9,
    kMidPriceFieldNumber = 10,
    kStaticMidPriceFieldNumber = 11,
    kTimestampFieldNumber = 13,
    kOpenInterestFieldNumber = 14,
    kAuctionEndFieldNumber = 15,
    kAuctionStartFieldNumber = 16,
    kIndicativePriceFieldNumber = 17,
    kIndicativeVolumeFieldNumber = 18,
    kMarketTradingModeFieldNumber = 19,
    kTriggerFieldNumber = 20,
  };
  // repeated .vega.PriceMonitoringBounds priceMonitoringBounds = 23 [json_name = "priceMonitoringBounds"];
  int pricemonitoringbounds_size() const;
  private:
  int _internal_pricemonitoringbounds_size() const;
  public:
  void clear_pricemonitoringbounds();
  ::vega::PriceMonitoringBounds* mutable_pricemonitoringbounds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceMonitoringBounds >*
      mutable_pricemonitoringbounds();
  private:
  const ::vega::PriceMonitoringBounds& _internal_pricemonitoringbounds(int index) const;
  ::vega::PriceMonitoringBounds* _internal_add_pricemonitoringbounds();
  public:
  const ::vega::PriceMonitoringBounds& pricemonitoringbounds(int index) const;
  ::vega::PriceMonitoringBounds* add_pricemonitoringbounds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceMonitoringBounds >&
      pricemonitoringbounds() const;

  // string market = 12 [json_name = "market"];
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // string targetStake = 21 [json_name = "targetStake"];
  void clear_targetstake();
  const std::string& targetstake() const;
  void set_targetstake(const std::string& value);
  void set_targetstake(std::string&& value);
  void set_targetstake(const char* value);
  void set_targetstake(const char* value, size_t size);
  std::string* mutable_targetstake();
  std::string* release_targetstake();
  void set_allocated_targetstake(std::string* targetstake);
  private:
  const std::string& _internal_targetstake() const;
  void _internal_set_targetstake(const std::string& value);
  std::string* _internal_mutable_targetstake();
  public:

  // string suppliedStake = 22 [json_name = "suppliedStake"];
  void clear_suppliedstake();
  const std::string& suppliedstake() const;
  void set_suppliedstake(const std::string& value);
  void set_suppliedstake(std::string&& value);
  void set_suppliedstake(const char* value);
  void set_suppliedstake(const char* value, size_t size);
  std::string* mutable_suppliedstake();
  std::string* release_suppliedstake();
  void set_allocated_suppliedstake(std::string* suppliedstake);
  private:
  const std::string& _internal_suppliedstake() const;
  void _internal_set_suppliedstake(const std::string& value);
  std::string* _internal_mutable_suppliedstake();
  public:

  // uint64 markPrice = 1 [json_name = "markPrice"];
  void clear_markprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 markprice() const;
  void set_markprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_markprice() const;
  void _internal_set_markprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bestBidPrice = 2 [json_name = "bestBidPrice"];
  void clear_bestbidprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 bestbidprice() const;
  void set_bestbidprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bestbidprice() const;
  void _internal_set_bestbidprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bestBidVolume = 3 [json_name = "bestBidVolume"];
  void clear_bestbidvolume();
  ::PROTOBUF_NAMESPACE_ID::uint64 bestbidvolume() const;
  void set_bestbidvolume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bestbidvolume() const;
  void _internal_set_bestbidvolume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bestOfferPrice = 4 [json_name = "bestOfferPrice"];
  void clear_bestofferprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 bestofferprice() const;
  void set_bestofferprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bestofferprice() const;
  void _internal_set_bestofferprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bestOfferVolume = 5 [json_name = "bestOfferVolume"];
  void clear_bestoffervolume();
  ::PROTOBUF_NAMESPACE_ID::uint64 bestoffervolume() const;
  void set_bestoffervolume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bestoffervolume() const;
  void _internal_set_bestoffervolume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bestStaticBidPrice = 6 [json_name = "bestStaticBidPrice"];
  void clear_beststaticbidprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 beststaticbidprice() const;
  void set_beststaticbidprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_beststaticbidprice() const;
  void _internal_set_beststaticbidprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bestStaticBidVolume = 7 [json_name = "bestStaticBidVolume"];
  void clear_beststaticbidvolume();
  ::PROTOBUF_NAMESPACE_ID::uint64 beststaticbidvolume() const;
  void set_beststaticbidvolume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_beststaticbidvolume() const;
  void _internal_set_beststaticbidvolume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bestStaticOfferPrice = 8 [json_name = "bestStaticOfferPrice"];
  void clear_beststaticofferprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 beststaticofferprice() const;
  void set_beststaticofferprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_beststaticofferprice() const;
  void _internal_set_beststaticofferprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bestStaticOfferVolume = 9 [json_name = "bestStaticOfferVolume"];
  void clear_beststaticoffervolume();
  ::PROTOBUF_NAMESPACE_ID::uint64 beststaticoffervolume() const;
  void set_beststaticoffervolume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_beststaticoffervolume() const;
  void _internal_set_beststaticoffervolume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 midPrice = 10 [json_name = "midPrice"];
  void clear_midprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 midprice() const;
  void set_midprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_midprice() const;
  void _internal_set_midprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 staticMidPrice = 11 [json_name = "staticMidPrice"];
  void clear_staticmidprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 staticmidprice() const;
  void set_staticmidprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_staticmidprice() const;
  void _internal_set_staticmidprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 timestamp = 13 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 openInterest = 14 [json_name = "openInterest"];
  void clear_openinterest();
  ::PROTOBUF_NAMESPACE_ID::uint64 openinterest() const;
  void set_openinterest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_openinterest() const;
  void _internal_set_openinterest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 auctionEnd = 15 [json_name = "auctionEnd"];
  void clear_auctionend();
  ::PROTOBUF_NAMESPACE_ID::int64 auctionend() const;
  void set_auctionend(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auctionend() const;
  void _internal_set_auctionend(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 auctionStart = 16 [json_name = "auctionStart"];
  void clear_auctionstart();
  ::PROTOBUF_NAMESPACE_ID::int64 auctionstart() const;
  void set_auctionstart(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auctionstart() const;
  void _internal_set_auctionstart(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 indicativePrice = 17 [json_name = "indicativePrice"];
  void clear_indicativeprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 indicativeprice() const;
  void set_indicativeprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_indicativeprice() const;
  void _internal_set_indicativeprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 indicativeVolume = 18 [json_name = "indicativeVolume"];
  void clear_indicativevolume();
  ::PROTOBUF_NAMESPACE_ID::uint64 indicativevolume() const;
  void set_indicativevolume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_indicativevolume() const;
  void _internal_set_indicativevolume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.Market.TradingMode marketTradingMode = 19 [json_name = "marketTradingMode"];
  void clear_markettradingmode();
  ::vega::Market_TradingMode markettradingmode() const;
  void set_markettradingmode(::vega::Market_TradingMode value);
  private:
  ::vega::Market_TradingMode _internal_markettradingmode() const;
  void _internal_set_markettradingmode(::vega::Market_TradingMode value);
  public:

  // .vega.AuctionTrigger trigger = 20 [json_name = "trigger"];
  void clear_trigger();
  ::vega::AuctionTrigger trigger() const;
  void set_trigger(::vega::AuctionTrigger value);
  private:
  ::vega::AuctionTrigger _internal_trigger() const;
  void _internal_set_trigger(::vega::AuctionTrigger value);
  public:

  // @@protoc_insertion_point(class_scope:vega.MarketData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceMonitoringBounds > pricemonitoringbounds_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetstake_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suppliedstake_;
  ::PROTOBUF_NAMESPACE_ID::uint64 markprice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bestbidprice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bestbidvolume_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bestofferprice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bestoffervolume_;
  ::PROTOBUF_NAMESPACE_ID::uint64 beststaticbidprice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 beststaticbidvolume_;
  ::PROTOBUF_NAMESPACE_ID::uint64 beststaticofferprice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 beststaticoffervolume_;
  ::PROTOBUF_NAMESPACE_ID::uint64 midprice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 staticmidprice_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 openinterest_;
  ::PROTOBUF_NAMESPACE_ID::int64 auctionend_;
  ::PROTOBUF_NAMESPACE_ID::int64 auctionstart_;
  ::PROTOBUF_NAMESPACE_ID::uint64 indicativeprice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 indicativevolume_;
  int markettradingmode_;
  int trigger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class PriceMonitoringBounds PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.PriceMonitoringBounds) */ {
 public:
  inline PriceMonitoringBounds() : PriceMonitoringBounds(nullptr) {}
  virtual ~PriceMonitoringBounds();

  PriceMonitoringBounds(const PriceMonitoringBounds& from);
  PriceMonitoringBounds(PriceMonitoringBounds&& from) noexcept
    : PriceMonitoringBounds() {
    *this = ::std::move(from);
  }

  inline PriceMonitoringBounds& operator=(const PriceMonitoringBounds& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceMonitoringBounds& operator=(PriceMonitoringBounds&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriceMonitoringBounds& default_instance();

  static inline const PriceMonitoringBounds* internal_default_instance() {
    return reinterpret_cast<const PriceMonitoringBounds*>(
               &_PriceMonitoringBounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(PriceMonitoringBounds& a, PriceMonitoringBounds& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceMonitoringBounds* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceMonitoringBounds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceMonitoringBounds* New() const final {
    return CreateMaybeMessage<PriceMonitoringBounds>(nullptr);
  }

  PriceMonitoringBounds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceMonitoringBounds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriceMonitoringBounds& from);
  void MergeFrom(const PriceMonitoringBounds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceMonitoringBounds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.PriceMonitoringBounds";
  }
  protected:
  explicit PriceMonitoringBounds(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggerFieldNumber = 3,
    kMinValidPriceFieldNumber = 1,
    kMaxValidPriceFieldNumber = 2,
    kReferencePriceFieldNumber = 4,
  };
  // .vega.PriceMonitoringTrigger trigger = 3 [json_name = "trigger"];
  bool has_trigger() const;
  private:
  bool _internal_has_trigger() const;
  public:
  void clear_trigger();
  const ::vega::PriceMonitoringTrigger& trigger() const;
  ::vega::PriceMonitoringTrigger* release_trigger();
  ::vega::PriceMonitoringTrigger* mutable_trigger();
  void set_allocated_trigger(::vega::PriceMonitoringTrigger* trigger);
  private:
  const ::vega::PriceMonitoringTrigger& _internal_trigger() const;
  ::vega::PriceMonitoringTrigger* _internal_mutable_trigger();
  public:
  void unsafe_arena_set_allocated_trigger(
      ::vega::PriceMonitoringTrigger* trigger);
  ::vega::PriceMonitoringTrigger* unsafe_arena_release_trigger();

  // uint64 minValidPrice = 1 [json_name = "minValidPrice"];
  void clear_minvalidprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 minvalidprice() const;
  void set_minvalidprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_minvalidprice() const;
  void _internal_set_minvalidprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 maxValidPrice = 2 [json_name = "maxValidPrice"];
  void clear_maxvalidprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 maxvalidprice() const;
  void set_maxvalidprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maxvalidprice() const;
  void _internal_set_maxvalidprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double referencePrice = 4 [json_name = "referencePrice"];
  void clear_referenceprice();
  double referenceprice() const;
  void set_referenceprice(double value);
  private:
  double _internal_referenceprice() const;
  void _internal_set_referenceprice(double value);
  public:

  // @@protoc_insertion_point(class_scope:vega.PriceMonitoringBounds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vega::PriceMonitoringTrigger* trigger_;
  ::PROTOBUF_NAMESPACE_ID::uint64 minvalidprice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maxvalidprice_;
  double referenceprice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class ErrorDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.ErrorDetail) */ {
 public:
  inline ErrorDetail() : ErrorDetail(nullptr) {}
  virtual ~ErrorDetail();

  ErrorDetail(const ErrorDetail& from);
  ErrorDetail(ErrorDetail&& from) noexcept
    : ErrorDetail() {
    *this = ::std::move(from);
  }

  inline ErrorDetail& operator=(const ErrorDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorDetail& operator=(ErrorDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorDetail& default_instance();

  static inline const ErrorDetail* internal_default_instance() {
    return reinterpret_cast<const ErrorDetail*>(
               &_ErrorDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ErrorDetail& a, ErrorDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorDetail* New() const final {
    return CreateMaybeMessage<ErrorDetail>(nullptr);
  }

  ErrorDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorDetail& from);
  void MergeFrom(const ErrorDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.ErrorDetail";
  }
  protected:
  explicit ErrorDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kInnerFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string inner = 3 [json_name = "inner"];
  void clear_inner();
  const std::string& inner() const;
  void set_inner(const std::string& value);
  void set_inner(std::string&& value);
  void set_inner(const char* value);
  void set_inner(const char* value, size_t size);
  std::string* mutable_inner();
  std::string* release_inner();
  void set_allocated_inner(std::string* inner);
  private:
  const std::string& _internal_inner() const;
  void _internal_set_inner(const std::string& value);
  std::string* _internal_mutable_inner();
  public:

  // int32 code = 1 [json_name = "code"];
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.ErrorDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inner_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Transaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  enum FromCase {
    kAddress = 1001,
    kPubKey = 1002,
    FROM_NOT_SET = 0,
  };

  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputDataFieldNumber = 1,
    kNonceFieldNumber = 2,
    kBlockHeightFieldNumber = 3,
    kAddressFieldNumber = 1001,
    kPubKeyFieldNumber = 1002,
  };
  // bytes inputData = 1 [json_name = "inputData"];
  void clear_inputdata();
  const std::string& inputdata() const;
  void set_inputdata(const std::string& value);
  void set_inputdata(std::string&& value);
  void set_inputdata(const char* value);
  void set_inputdata(const void* value, size_t size);
  std::string* mutable_inputdata();
  std::string* release_inputdata();
  void set_allocated_inputdata(std::string* inputdata);
  private:
  const std::string& _internal_inputdata() const;
  void _internal_set_inputdata(const std::string& value);
  std::string* _internal_mutable_inputdata();
  public:

  // uint64 nonce = 2 [json_name = "nonce"];
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 blockHeight = 3 [json_name = "blockHeight"];
  void clear_blockheight();
  ::PROTOBUF_NAMESPACE_ID::uint64 blockheight() const;
  void set_blockheight(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blockheight() const;
  void _internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bytes address = 1001 [json_name = "address"];
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bytes pubKey = 1002 [json_name = "pubKey"];
  private:
  bool _internal_has_pubkey() const;
  public:
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  void clear_from();
  FromCase from_case() const;
  // @@protoc_insertion_point(class_scope:vega.Transaction)
 private:
  class _Internal;
  void set_has_address();
  void set_has_pubkey();

  inline bool has_from() const;
  inline void clear_has_from();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputdata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blockheight_;
  union FromUnion {
    FromUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  } from_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class Signature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Signature) */ {
 public:
  inline Signature() : Signature(nullptr) {}
  virtual ~Signature();

  Signature(const Signature& from);
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signature& operator=(Signature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signature& default_instance();

  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }
  inline void Swap(Signature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Signature* New() const final {
    return CreateMaybeMessage<Signature>(nullptr);
  }

  Signature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Signature";
  }
  protected:
  explicit Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSigFieldNumber = 1,
    kAlgoFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // bytes sig = 1 [json_name = "sig"];
  void clear_sig();
  const std::string& sig() const;
  void set_sig(const std::string& value);
  void set_sig(std::string&& value);
  void set_sig(const char* value);
  void set_sig(const void* value, size_t size);
  std::string* mutable_sig();
  std::string* release_sig();
  void set_allocated_sig(std::string* sig);
  private:
  const std::string& _internal_sig() const;
  void _internal_set_sig(const std::string& value);
  std::string* _internal_mutable_sig();
  public:

  // string algo = 2 [json_name = "algo"];
  void clear_algo();
  const std::string& algo() const;
  void set_algo(const std::string& value);
  void set_algo(std::string&& value);
  void set_algo(const char* value);
  void set_algo(const char* value, size_t size);
  std::string* mutable_algo();
  std::string* release_algo();
  void set_allocated_algo(std::string* algo);
  private:
  const std::string& _internal_algo() const;
  void _internal_set_algo(const std::string& value);
  std::string* _internal_mutable_algo();
  public:

  // uint64 version = 3 [json_name = "version"];
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Signature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class SignedBundle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.SignedBundle) */ {
 public:
  inline SignedBundle() : SignedBundle(nullptr) {}
  virtual ~SignedBundle();

  SignedBundle(const SignedBundle& from);
  SignedBundle(SignedBundle&& from) noexcept
    : SignedBundle() {
    *this = ::std::move(from);
  }

  inline SignedBundle& operator=(const SignedBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignedBundle& operator=(SignedBundle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignedBundle& default_instance();

  static inline const SignedBundle* internal_default_instance() {
    return reinterpret_cast<const SignedBundle*>(
               &_SignedBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SignedBundle& a, SignedBundle& b) {
    a.Swap(&b);
  }
  inline void Swap(SignedBundle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignedBundle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignedBundle* New() const final {
    return CreateMaybeMessage<SignedBundle>(nullptr);
  }

  SignedBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignedBundle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignedBundle& from);
  void MergeFrom(const SignedBundle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignedBundle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.SignedBundle";
  }
  protected:
  explicit SignedBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
    kSigFieldNumber = 2,
  };
  // bytes tx = 1 [json_name = "tx"];
  void clear_tx();
  const std::string& tx() const;
  void set_tx(const std::string& value);
  void set_tx(std::string&& value);
  void set_tx(const char* value);
  void set_tx(const void* value, size_t size);
  std::string* mutable_tx();
  std::string* release_tx();
  void set_allocated_tx(std::string* tx);
  private:
  const std::string& _internal_tx() const;
  void _internal_set_tx(const std::string& value);
  std::string* _internal_mutable_tx();
  public:

  // .vega.Signature sig = 2 [json_name = "sig"];
  bool has_sig() const;
  private:
  bool _internal_has_sig() const;
  public:
  void clear_sig();
  const ::vega::Signature& sig() const;
  ::vega::Signature* release_sig();
  ::vega::Signature* mutable_sig();
  void set_allocated_sig(::vega::Signature* sig);
  private:
  const ::vega::Signature& _internal_sig() const;
  ::vega::Signature* _internal_mutable_sig();
  public:
  void unsafe_arena_set_allocated_sig(
      ::vega::Signature* sig);
  ::vega::Signature* unsafe_arena_release_sig();

  // @@protoc_insertion_point(class_scope:vega.SignedBundle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
  ::vega::Signature* sig_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class NodeSignature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.NodeSignature) */ {
 public:
  inline NodeSignature() : NodeSignature(nullptr) {}
  virtual ~NodeSignature();

  NodeSignature(const NodeSignature& from);
  NodeSignature(NodeSignature&& from) noexcept
    : NodeSignature() {
    *this = ::std::move(from);
  }

  inline NodeSignature& operator=(const NodeSignature& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeSignature& operator=(NodeSignature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeSignature& default_instance();

  static inline const NodeSignature* internal_default_instance() {
    return reinterpret_cast<const NodeSignature*>(
               &_NodeSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(NodeSignature& a, NodeSignature& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeSignature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeSignature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeSignature* New() const final {
    return CreateMaybeMessage<NodeSignature>(nullptr);
  }

  NodeSignature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeSignature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeSignature& from);
  void MergeFrom(const NodeSignature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeSignature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.NodeSignature";
  }
  protected:
  explicit NodeSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kSigFieldNumber = 2,
    kKindFieldNumber = 3,
  };
  // string ID = 1 [json_name = "ID"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes sig = 2 [json_name = "sig"];
  void clear_sig();
  const std::string& sig() const;
  void set_sig(const std::string& value);
  void set_sig(std::string&& value);
  void set_sig(const char* value);
  void set_sig(const void* value, size_t size);
  std::string* mutable_sig();
  std::string* release_sig();
  void set_allocated_sig(std::string* sig);
  private:
  const std::string& _internal_sig() const;
  void _internal_set_sig(const std::string& value);
  std::string* _internal_mutable_sig();
  public:

  // .vega.NodeSignatureKind kind = 3 [json_name = "kind"];
  void clear_kind();
  ::vega::NodeSignatureKind kind() const;
  void set_kind(::vega::NodeSignatureKind value);
  private:
  ::vega::NodeSignatureKind _internal_kind() const;
  void _internal_set_kind(::vega::NodeSignatureKind value);
  public:

  // @@protoc_insertion_point(class_scope:vega.NodeSignature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
  int kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class NetworkParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.NetworkParameter) */ {
 public:
  inline NetworkParameter() : NetworkParameter(nullptr) {}
  virtual ~NetworkParameter();

  NetworkParameter(const NetworkParameter& from);
  NetworkParameter(NetworkParameter&& from) noexcept
    : NetworkParameter() {
    *this = ::std::move(from);
  }

  inline NetworkParameter& operator=(const NetworkParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkParameter& operator=(NetworkParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkParameter& default_instance();

  static inline const NetworkParameter* internal_default_instance() {
    return reinterpret_cast<const NetworkParameter*>(
               &_NetworkParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(NetworkParameter& a, NetworkParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkParameter* New() const final {
    return CreateMaybeMessage<NetworkParameter>(nullptr);
  }

  NetworkParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkParameter& from);
  void MergeFrom(const NetworkParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.NetworkParameter";
  }
  protected:
  explicit NetworkParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string Key = 1 [json_name = "Key"];
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string Value = 2 [json_name = "Value"];
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:vega.NetworkParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class LiquidityOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.LiquidityOrder) */ {
 public:
  inline LiquidityOrder() : LiquidityOrder(nullptr) {}
  virtual ~LiquidityOrder();

  LiquidityOrder(const LiquidityOrder& from);
  LiquidityOrder(LiquidityOrder&& from) noexcept
    : LiquidityOrder() {
    *this = ::std::move(from);
  }

  inline LiquidityOrder& operator=(const LiquidityOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidityOrder& operator=(LiquidityOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidityOrder& default_instance();

  static inline const LiquidityOrder* internal_default_instance() {
    return reinterpret_cast<const LiquidityOrder*>(
               &_LiquidityOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(LiquidityOrder& a, LiquidityOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidityOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidityOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidityOrder* New() const final {
    return CreateMaybeMessage<LiquidityOrder>(nullptr);
  }

  LiquidityOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidityOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidityOrder& from);
  void MergeFrom(const LiquidityOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidityOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.LiquidityOrder";
  }
  protected:
  explicit LiquidityOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFieldNumber = 1,
    kProportionFieldNumber = 2,
    kOffsetFieldNumber = 3,
  };
  // .vega.PeggedReference reference = 1 [json_name = "reference"];
  void clear_reference();
  ::vega::PeggedReference reference() const;
  void set_reference(::vega::PeggedReference value);
  private:
  ::vega::PeggedReference _internal_reference() const;
  void _internal_set_reference(::vega::PeggedReference value);
  public:

  // uint32 proportion = 2 [json_name = "proportion"];
  void clear_proportion();
  ::PROTOBUF_NAMESPACE_ID::uint32 proportion() const;
  void set_proportion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_proportion() const;
  void _internal_set_proportion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 offset = 3 [json_name = "offset"];
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.LiquidityOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int reference_;
  ::PROTOBUF_NAMESPACE_ID::uint32 proportion_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class LiquidityProvisionSubmission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.LiquidityProvisionSubmission) */ {
 public:
  inline LiquidityProvisionSubmission() : LiquidityProvisionSubmission(nullptr) {}
  virtual ~LiquidityProvisionSubmission();

  LiquidityProvisionSubmission(const LiquidityProvisionSubmission& from);
  LiquidityProvisionSubmission(LiquidityProvisionSubmission&& from) noexcept
    : LiquidityProvisionSubmission() {
    *this = ::std::move(from);
  }

  inline LiquidityProvisionSubmission& operator=(const LiquidityProvisionSubmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidityProvisionSubmission& operator=(LiquidityProvisionSubmission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidityProvisionSubmission& default_instance();

  static inline const LiquidityProvisionSubmission* internal_default_instance() {
    return reinterpret_cast<const LiquidityProvisionSubmission*>(
               &_LiquidityProvisionSubmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(LiquidityProvisionSubmission& a, LiquidityProvisionSubmission& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidityProvisionSubmission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidityProvisionSubmission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidityProvisionSubmission* New() const final {
    return CreateMaybeMessage<LiquidityProvisionSubmission>(nullptr);
  }

  LiquidityProvisionSubmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidityProvisionSubmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidityProvisionSubmission& from);
  void MergeFrom(const LiquidityProvisionSubmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidityProvisionSubmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.LiquidityProvisionSubmission";
  }
  protected:
  explicit LiquidityProvisionSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSellsFieldNumber = 4,
    kBuysFieldNumber = 5,
    kMarketIDFieldNumber = 1,
    kFeeFieldNumber = 3,
    kCommitmentAmountFieldNumber = 2,
  };
  // repeated .vega.LiquidityOrder Sells = 4 [json_name = "Sells"];
  int sells_size() const;
  private:
  int _internal_sells_size() const;
  public:
  void clear_sells();
  ::vega::LiquidityOrder* mutable_sells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >*
      mutable_sells();
  private:
  const ::vega::LiquidityOrder& _internal_sells(int index) const;
  ::vega::LiquidityOrder* _internal_add_sells();
  public:
  const ::vega::LiquidityOrder& sells(int index) const;
  ::vega::LiquidityOrder* add_sells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >&
      sells() const;

  // repeated .vega.LiquidityOrder Buys = 5 [json_name = "Buys"];
  int buys_size() const;
  private:
  int _internal_buys_size() const;
  public:
  void clear_buys();
  ::vega::LiquidityOrder* mutable_buys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >*
      mutable_buys();
  private:
  const ::vega::LiquidityOrder& _internal_buys(int index) const;
  ::vega::LiquidityOrder* _internal_add_buys();
  public:
  const ::vega::LiquidityOrder& buys(int index) const;
  ::vega::LiquidityOrder* add_buys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >&
      buys() const;

  // string marketID = 1 [json_name = "marketID", (.validator.field) = {
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string fee = 3 [json_name = "fee"];
  void clear_fee();
  const std::string& fee() const;
  void set_fee(const std::string& value);
  void set_fee(std::string&& value);
  void set_fee(const char* value);
  void set_fee(const char* value, size_t size);
  std::string* mutable_fee();
  std::string* release_fee();
  void set_allocated_fee(std::string* fee);
  private:
  const std::string& _internal_fee() const;
  void _internal_set_fee(const std::string& value);
  std::string* _internal_mutable_fee();
  public:

  // uint64 commitmentAmount = 2 [json_name = "commitmentAmount"];
  void clear_commitmentamount();
  ::PROTOBUF_NAMESPACE_ID::uint64 commitmentamount() const;
  void set_commitmentamount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commitmentamount() const;
  void _internal_set_commitmentamount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.LiquidityProvisionSubmission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder > sells_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder > buys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commitmentamount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class LiquidityOrderReference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.LiquidityOrderReference) */ {
 public:
  inline LiquidityOrderReference() : LiquidityOrderReference(nullptr) {}
  virtual ~LiquidityOrderReference();

  LiquidityOrderReference(const LiquidityOrderReference& from);
  LiquidityOrderReference(LiquidityOrderReference&& from) noexcept
    : LiquidityOrderReference() {
    *this = ::std::move(from);
  }

  inline LiquidityOrderReference& operator=(const LiquidityOrderReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidityOrderReference& operator=(LiquidityOrderReference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidityOrderReference& default_instance();

  static inline const LiquidityOrderReference* internal_default_instance() {
    return reinterpret_cast<const LiquidityOrderReference*>(
               &_LiquidityOrderReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(LiquidityOrderReference& a, LiquidityOrderReference& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidityOrderReference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidityOrderReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidityOrderReference* New() const final {
    return CreateMaybeMessage<LiquidityOrderReference>(nullptr);
  }

  LiquidityOrderReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidityOrderReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidityOrderReference& from);
  void MergeFrom(const LiquidityOrderReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidityOrderReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.LiquidityOrderReference";
  }
  protected:
  explicit LiquidityOrderReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIDFieldNumber = 1,
    kLiquidityOrderFieldNumber = 2,
  };
  // string orderID = 1 [json_name = "orderID"];
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // .vega.LiquidityOrder liquidityOrder = 2 [json_name = "liquidityOrder"];
  bool has_liquidityorder() const;
  private:
  bool _internal_has_liquidityorder() const;
  public:
  void clear_liquidityorder();
  const ::vega::LiquidityOrder& liquidityorder() const;
  ::vega::LiquidityOrder* release_liquidityorder();
  ::vega::LiquidityOrder* mutable_liquidityorder();
  void set_allocated_liquidityorder(::vega::LiquidityOrder* liquidityorder);
  private:
  const ::vega::LiquidityOrder& _internal_liquidityorder() const;
  ::vega::LiquidityOrder* _internal_mutable_liquidityorder();
  public:
  void unsafe_arena_set_allocated_liquidityorder(
      ::vega::LiquidityOrder* liquidityorder);
  ::vega::LiquidityOrder* unsafe_arena_release_liquidityorder();

  // @@protoc_insertion_point(class_scope:vega.LiquidityOrderReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::vega::LiquidityOrder* liquidityorder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class LiquidityProvision PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.LiquidityProvision) */ {
 public:
  inline LiquidityProvision() : LiquidityProvision(nullptr) {}
  virtual ~LiquidityProvision();

  LiquidityProvision(const LiquidityProvision& from);
  LiquidityProvision(LiquidityProvision&& from) noexcept
    : LiquidityProvision() {
    *this = ::std::move(from);
  }

  inline LiquidityProvision& operator=(const LiquidityProvision& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidityProvision& operator=(LiquidityProvision&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidityProvision& default_instance();

  static inline const LiquidityProvision* internal_default_instance() {
    return reinterpret_cast<const LiquidityProvision*>(
               &_LiquidityProvision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(LiquidityProvision& a, LiquidityProvision& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidityProvision* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidityProvision* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidityProvision* New() const final {
    return CreateMaybeMessage<LiquidityProvision>(nullptr);
  }

  LiquidityProvision* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidityProvision>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidityProvision& from);
  void MergeFrom(const LiquidityProvision& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidityProvision* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.LiquidityProvision";
  }
  protected:
  explicit LiquidityProvision(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LiquidityProvision_Status Status;
  static constexpr Status LIQUIDITY_PROVISION_STATUS_UNSPECIFIED =
    LiquidityProvision_Status_LIQUIDITY_PROVISION_STATUS_UNSPECIFIED;
  static constexpr Status LIQUIDITY_PROVISION_STATUS_ACTIVE =
    LiquidityProvision_Status_LIQUIDITY_PROVISION_STATUS_ACTIVE;
  static constexpr Status LIQUIDITY_PROVISION_STATUS_STOPPED =
    LiquidityProvision_Status_LIQUIDITY_PROVISION_STATUS_STOPPED;
  static constexpr Status LIQUIDITY_PROVISION_STATUS_CANCELLED =
    LiquidityProvision_Status_LIQUIDITY_PROVISION_STATUS_CANCELLED;
  static constexpr Status LIQUIDITY_PROVISION_STATUS_REJECTED =
    LiquidityProvision_Status_LIQUIDITY_PROVISION_STATUS_REJECTED;
  static inline bool Status_IsValid(int value) {
    return LiquidityProvision_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    LiquidityProvision_Status_Status_MIN;
  static constexpr Status Status_MAX =
    LiquidityProvision_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    LiquidityProvision_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return LiquidityProvision_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return LiquidityProvision_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return LiquidityProvision_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSellsFieldNumber = 8,
    kBuysFieldNumber = 9,
    kIdFieldNumber = 1,
    kPartyIDFieldNumber = 2,
    kMarketIDFieldNumber = 5,
    kFeeFieldNumber = 7,
    kVersionFieldNumber = 10,
    kCreatedAtFieldNumber = 3,
    kUpdatedAtFieldNumber = 4,
    kCommitmentAmountFieldNumber = 6,
    kStatusFieldNumber = 11,
  };
  // repeated .vega.LiquidityOrderReference sells = 8 [json_name = "sells"];
  int sells_size() const;
  private:
  int _internal_sells_size() const;
  public:
  void clear_sells();
  ::vega::LiquidityOrderReference* mutable_sells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >*
      mutable_sells();
  private:
  const ::vega::LiquidityOrderReference& _internal_sells(int index) const;
  ::vega::LiquidityOrderReference* _internal_add_sells();
  public:
  const ::vega::LiquidityOrderReference& sells(int index) const;
  ::vega::LiquidityOrderReference* add_sells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >&
      sells() const;

  // repeated .vega.LiquidityOrderReference buys = 9 [json_name = "buys"];
  int buys_size() const;
  private:
  int _internal_buys_size() const;
  public:
  void clear_buys();
  ::vega::LiquidityOrderReference* mutable_buys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >*
      mutable_buys();
  private:
  const ::vega::LiquidityOrderReference& _internal_buys(int index) const;
  ::vega::LiquidityOrderReference* _internal_add_buys();
  public:
  const ::vega::LiquidityOrderReference& buys(int index) const;
  ::vega::LiquidityOrderReference* add_buys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >&
      buys() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string partyID = 2 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string marketID = 5 [json_name = "marketID", (.validator.field) = {
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string fee = 7 [json_name = "fee"];
  void clear_fee();
  const std::string& fee() const;
  void set_fee(const std::string& value);
  void set_fee(std::string&& value);
  void set_fee(const char* value);
  void set_fee(const char* value, size_t size);
  std::string* mutable_fee();
  std::string* release_fee();
  void set_allocated_fee(std::string* fee);
  private:
  const std::string& _internal_fee() const;
  void _internal_set_fee(const std::string& value);
  std::string* _internal_mutable_fee();
  public:

  // string version = 10 [json_name = "version"];
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // int64 createdAt = 3 [json_name = "createdAt"];
  void clear_createdat();
  ::PROTOBUF_NAMESPACE_ID::int64 createdat() const;
  void set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createdat() const;
  void _internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updatedAt = 4 [json_name = "updatedAt"];
  void clear_updatedat();
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat() const;
  void set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updatedat() const;
  void _internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 commitmentAmount = 6 [json_name = "commitmentAmount"];
  void clear_commitmentamount();
  ::PROTOBUF_NAMESPACE_ID::uint64 commitmentamount() const;
  void set_commitmentamount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commitmentamount() const;
  void _internal_set_commitmentamount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vega.LiquidityProvision.Status status = 11 [json_name = "status"];
  void clear_status();
  ::vega::LiquidityProvision_Status status() const;
  void set_status(::vega::LiquidityProvision_Status value);
  private:
  ::vega::LiquidityProvision_Status _internal_status() const;
  void _internal_set_status(::vega::LiquidityProvision_Status value);
  public:

  // @@protoc_insertion_point(class_scope:vega.LiquidityProvision)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference > sells_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference > buys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::int64 createdat_;
  ::PROTOBUF_NAMESPACE_ID::int64 updatedat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commitmentamount_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// -------------------------------------------------------------------

class EthereumConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.EthereumConfig) */ {
 public:
  inline EthereumConfig() : EthereumConfig(nullptr) {}
  virtual ~EthereumConfig();

  EthereumConfig(const EthereumConfig& from);
  EthereumConfig(EthereumConfig&& from) noexcept
    : EthereumConfig() {
    *this = ::std::move(from);
  }

  inline EthereumConfig& operator=(const EthereumConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EthereumConfig& operator=(EthereumConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EthereumConfig& default_instance();

  static inline const EthereumConfig* internal_default_instance() {
    return reinterpret_cast<const EthereumConfig*>(
               &_EthereumConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(EthereumConfig& a, EthereumConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(EthereumConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EthereumConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EthereumConfig* New() const final {
    return CreateMaybeMessage<EthereumConfig>(nullptr);
  }

  EthereumConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EthereumConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EthereumConfig& from);
  void MergeFrom(const EthereumConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EthereumConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.EthereumConfig";
  }
  protected:
  explicit EthereumConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vega_2eproto);
    return ::descriptor_table_vega_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkIdFieldNumber = 1,
    kChainIdFieldNumber = 2,
    kBridgeAddressFieldNumber = 3,
    kConfirmationsFieldNumber = 4,
  };
  // string networkId = 1 [json_name = "networkId"];
  void clear_networkid();
  const std::string& networkid() const;
  void set_networkid(const std::string& value);
  void set_networkid(std::string&& value);
  void set_networkid(const char* value);
  void set_networkid(const char* value, size_t size);
  std::string* mutable_networkid();
  std::string* release_networkid();
  void set_allocated_networkid(std::string* networkid);
  private:
  const std::string& _internal_networkid() const;
  void _internal_set_networkid(const std::string& value);
  std::string* _internal_mutable_networkid();
  public:

  // string chainId = 2 [json_name = "chainId"];
  void clear_chainid();
  const std::string& chainid() const;
  void set_chainid(const std::string& value);
  void set_chainid(std::string&& value);
  void set_chainid(const char* value);
  void set_chainid(const char* value, size_t size);
  std::string* mutable_chainid();
  std::string* release_chainid();
  void set_allocated_chainid(std::string* chainid);
  private:
  const std::string& _internal_chainid() const;
  void _internal_set_chainid(const std::string& value);
  std::string* _internal_mutable_chainid();
  public:

  // string bridgeAddress = 3 [json_name = "bridgeAddress"];
  void clear_bridgeaddress();
  const std::string& bridgeaddress() const;
  void set_bridgeaddress(const std::string& value);
  void set_bridgeaddress(std::string&& value);
  void set_bridgeaddress(const char* value);
  void set_bridgeaddress(const char* value, size_t size);
  std::string* mutable_bridgeaddress();
  std::string* release_bridgeaddress();
  void set_allocated_bridgeaddress(std::string* bridgeaddress);
  private:
  const std::string& _internal_bridgeaddress() const;
  void _internal_set_bridgeaddress(const std::string& value);
  std::string* _internal_mutable_bridgeaddress();
  public:

  // uint32 confirmations = 4 [json_name = "confirmations"];
  void clear_confirmations();
  ::PROTOBUF_NAMESPACE_ID::uint32 confirmations() const;
  void set_confirmations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_confirmations() const;
  void _internal_set_confirmations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.EthereumConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr networkid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bridgeaddress_;
  ::PROTOBUF_NAMESPACE_ID::uint32 confirmations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vega_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Price

// uint64 value = 1 [json_name = "value"];
inline void Price::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Price::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Price::value() const {
  // @@protoc_insertion_point(field_get:vega.Price.value)
  return _internal_value();
}
inline void Price::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  value_ = value;
}
inline void Price::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:vega.Price.value)
}

// -------------------------------------------------------------------

// Timestamp

// int64 value = 1 [json_name = "value"];
inline void Timestamp::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timestamp::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timestamp::value() const {
  // @@protoc_insertion_point(field_get:vega.Timestamp.value)
  return _internal_value();
}
inline void Timestamp::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {

  value_ = value;
}
inline void Timestamp::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:vega.Timestamp.value)
}

// -------------------------------------------------------------------

// Party

// string id = 1 [json_name = "id", (.validator.field) = {
inline void Party::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Party::id() const {
  // @@protoc_insertion_point(field_get:vega.Party.id)
  return _internal_id();
}
inline void Party::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.Party.id)
}
inline std::string* Party::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.Party.id)
  return _internal_mutable_id();
}
inline const std::string& Party::_internal_id() const {
  return id_.Get();
}
inline void Party::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Party::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Party.id)
}
inline void Party::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Party.id)
}
inline void Party::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Party.id)
}
inline std::string* Party::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Party::release_id() {
  // @@protoc_insertion_point(field_release:vega.Party.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Party::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Party.id)
}

// -------------------------------------------------------------------

// RiskFactor

// string market = 1 [json_name = "market"];
inline void RiskFactor::clear_market() {
  market_.ClearToEmpty();
}
inline const std::string& RiskFactor::market() const {
  // @@protoc_insertion_point(field_get:vega.RiskFactor.market)
  return _internal_market();
}
inline void RiskFactor::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:vega.RiskFactor.market)
}
inline std::string* RiskFactor::mutable_market() {
  // @@protoc_insertion_point(field_mutable:vega.RiskFactor.market)
  return _internal_mutable_market();
}
inline const std::string& RiskFactor::_internal_market() const {
  return market_.Get();
}
inline void RiskFactor::_internal_set_market(const std::string& value) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RiskFactor::set_market(std::string&& value) {

  market_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.RiskFactor.market)
}
inline void RiskFactor::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.RiskFactor.market)
}
inline void RiskFactor::set_market(const char* value,
    size_t size) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.RiskFactor.market)
}
inline std::string* RiskFactor::_internal_mutable_market() {

  return market_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RiskFactor::release_market() {
  // @@protoc_insertion_point(field_release:vega.RiskFactor.market)
  return market_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RiskFactor::set_allocated_market(std::string* market) {
  if (market != nullptr) {

  } else {

  }
  market_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.RiskFactor.market)
}

// double short = 2 [json_name = "short"];
inline void RiskFactor::clear_short_() {
  short__ = 0;
}
inline double RiskFactor::_internal_short_() const {
  return short__;
}
inline double RiskFactor::short_() const {
  // @@protoc_insertion_point(field_get:vega.RiskFactor.short)
  return _internal_short_();
}
inline void RiskFactor::_internal_set_short_(double value) {

  short__ = value;
}
inline void RiskFactor::set_short_(double value) {
  _internal_set_short_(value);
  // @@protoc_insertion_point(field_set:vega.RiskFactor.short)
}

// double long = 3 [json_name = "long"];
inline void RiskFactor::clear_long_() {
  long__ = 0;
}
inline double RiskFactor::_internal_long_() const {
  return long__;
}
inline double RiskFactor::long_() const {
  // @@protoc_insertion_point(field_get:vega.RiskFactor.long)
  return _internal_long_();
}
inline void RiskFactor::_internal_set_long_(double value) {

  long__ = value;
}
inline void RiskFactor::set_long_(double value) {
  _internal_set_long_(value);
  // @@protoc_insertion_point(field_set:vega.RiskFactor.long)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RiskResult

// int64 updatedTimestamp = 1 [json_name = "updatedTimestamp"];
inline void RiskResult::clear_updatedtimestamp() {
  updatedtimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RiskResult::_internal_updatedtimestamp() const {
  return updatedtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RiskResult::updatedtimestamp() const {
  // @@protoc_insertion_point(field_get:vega.RiskResult.updatedTimestamp)
  return _internal_updatedtimestamp();
}
inline void RiskResult::_internal_set_updatedtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  updatedtimestamp_ = value;
}
inline void RiskResult::set_updatedtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updatedtimestamp(value);
  // @@protoc_insertion_point(field_set:vega.RiskResult.updatedTimestamp)
}

// map<string, .vega.RiskFactor> riskFactors = 2 [json_name = "riskFactors"];
inline int RiskResult::_internal_riskfactors_size() const {
  return riskfactors_.size();
}
inline int RiskResult::riskfactors_size() const {
  return _internal_riskfactors_size();
}
inline void RiskResult::clear_riskfactors() {
  riskfactors_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
RiskResult::_internal_riskfactors() const {
  return riskfactors_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
RiskResult::riskfactors() const {
  // @@protoc_insertion_point(field_map:vega.RiskResult.riskFactors)
  return _internal_riskfactors();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
RiskResult::_internal_mutable_riskfactors() {
  return riskfactors_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
RiskResult::mutable_riskfactors() {
  // @@protoc_insertion_point(field_mutable_map:vega.RiskResult.riskFactors)
  return _internal_mutable_riskfactors();
}

// int64 nextUpdateTimestamp = 3 [json_name = "nextUpdateTimestamp"];
inline void RiskResult::clear_nextupdatetimestamp() {
  nextupdatetimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RiskResult::_internal_nextupdatetimestamp() const {
  return nextupdatetimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RiskResult::nextupdatetimestamp() const {
  // @@protoc_insertion_point(field_get:vega.RiskResult.nextUpdateTimestamp)
  return _internal_nextupdatetimestamp();
}
inline void RiskResult::_internal_set_nextupdatetimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  nextupdatetimestamp_ = value;
}
inline void RiskResult::set_nextupdatetimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_nextupdatetimestamp(value);
  // @@protoc_insertion_point(field_set:vega.RiskResult.nextUpdateTimestamp)
}

// map<string, .vega.RiskFactor> predictedNextRiskFactors = 4 [json_name = "predictedNextRiskFactors"];
inline int RiskResult::_internal_predictednextriskfactors_size() const {
  return predictednextriskfactors_.size();
}
inline int RiskResult::predictednextriskfactors_size() const {
  return _internal_predictednextriskfactors_size();
}
inline void RiskResult::clear_predictednextriskfactors() {
  predictednextriskfactors_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
RiskResult::_internal_predictednextriskfactors() const {
  return predictednextriskfactors_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >&
RiskResult::predictednextriskfactors() const {
  // @@protoc_insertion_point(field_map:vega.RiskResult.predictedNextRiskFactors)
  return _internal_predictednextriskfactors();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
RiskResult::_internal_mutable_predictednextriskfactors() {
  return predictednextriskfactors_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::vega::RiskFactor >*
RiskResult::mutable_predictednextriskfactors() {
  // @@protoc_insertion_point(field_mutable_map:vega.RiskResult.predictedNextRiskFactors)
  return _internal_mutable_predictednextriskfactors();
}

// -------------------------------------------------------------------

// PeggedOrder

// .vega.PeggedReference reference = 1 [json_name = "reference"];
inline void PeggedOrder::clear_reference() {
  reference_ = 0;
}
inline ::vega::PeggedReference PeggedOrder::_internal_reference() const {
  return static_cast< ::vega::PeggedReference >(reference_);
}
inline ::vega::PeggedReference PeggedOrder::reference() const {
  // @@protoc_insertion_point(field_get:vega.PeggedOrder.reference)
  return _internal_reference();
}
inline void PeggedOrder::_internal_set_reference(::vega::PeggedReference value) {

  reference_ = value;
}
inline void PeggedOrder::set_reference(::vega::PeggedReference value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.PeggedOrder.reference)
}

// int64 offset = 2 [json_name = "offset"];
inline void PeggedOrder::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PeggedOrder::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PeggedOrder::offset() const {
  // @@protoc_insertion_point(field_get:vega.PeggedOrder.offset)
  return _internal_offset();
}
inline void PeggedOrder::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {

  offset_ = value;
}
inline void PeggedOrder::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:vega.PeggedOrder.offset)
}

// -------------------------------------------------------------------

// Order

// string id = 1 [json_name = "id"];
inline void Order::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Order::id() const {
  // @@protoc_insertion_point(field_get:vega.Order.id)
  return _internal_id();
}
inline void Order::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.Order.id)
}
inline std::string* Order::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.Order.id)
  return _internal_mutable_id();
}
inline const std::string& Order::_internal_id() const {
  return id_.Get();
}
inline void Order::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Order::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Order.id)
}
inline void Order::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Order.id)
}
inline void Order::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Order.id)
}
inline std::string* Order::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Order::release_id() {
  // @@protoc_insertion_point(field_release:vega.Order.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Order.id)
}

// string marketID = 2 [json_name = "marketID"];
inline void Order::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& Order::marketid() const {
  // @@protoc_insertion_point(field_get:vega.Order.marketID)
  return _internal_marketid();
}
inline void Order::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.Order.marketID)
}
inline std::string* Order::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.Order.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& Order::_internal_marketid() const {
  return marketid_.Get();
}
inline void Order::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Order::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Order.marketID)
}
inline void Order::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Order.marketID)
}
inline void Order::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Order.marketID)
}
inline std::string* Order::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Order::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.Order.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Order.marketID)
}

// string partyID = 3 [json_name = "partyID"];
inline void Order::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& Order::partyid() const {
  // @@protoc_insertion_point(field_get:vega.Order.partyID)
  return _internal_partyid();
}
inline void Order::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:vega.Order.partyID)
}
inline std::string* Order::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:vega.Order.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& Order::_internal_partyid() const {
  return partyid_.Get();
}
inline void Order::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Order::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Order.partyID)
}
inline void Order::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Order.partyID)
}
inline void Order::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Order.partyID)
}
inline std::string* Order::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Order::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.Order.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Order.partyID)
}

// .vega.Side side = 4 [json_name = "side"];
inline void Order::clear_side() {
  side_ = 0;
}
inline ::vega::Side Order::_internal_side() const {
  return static_cast< ::vega::Side >(side_);
}
inline ::vega::Side Order::side() const {
  // @@protoc_insertion_point(field_get:vega.Order.side)
  return _internal_side();
}
inline void Order::_internal_set_side(::vega::Side value) {

  side_ = value;
}
inline void Order::set_side(::vega::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:vega.Order.side)
}

// uint64 price = 5 [json_name = "price"];
inline void Order::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::price() const {
  // @@protoc_insertion_point(field_get:vega.Order.price)
  return _internal_price();
}
inline void Order::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void Order::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.Order.price)
}

// uint64 size = 6 [json_name = "size"];
inline void Order::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::size() const {
  // @@protoc_insertion_point(field_get:vega.Order.size)
  return _internal_size();
}
inline void Order::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  size_ = value;
}
inline void Order::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:vega.Order.size)
}

// uint64 remaining = 7 [json_name = "remaining"];
inline void Order::clear_remaining() {
  remaining_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::_internal_remaining() const {
  return remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::remaining() const {
  // @@protoc_insertion_point(field_get:vega.Order.remaining)
  return _internal_remaining();
}
inline void Order::_internal_set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  remaining_ = value;
}
inline void Order::set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_remaining(value);
  // @@protoc_insertion_point(field_set:vega.Order.remaining)
}

// .vega.Order.TimeInForce timeInForce = 8 [json_name = "timeInForce"];
inline void Order::clear_timeinforce() {
  timeinforce_ = 0;
}
inline ::vega::Order_TimeInForce Order::_internal_timeinforce() const {
  return static_cast< ::vega::Order_TimeInForce >(timeinforce_);
}
inline ::vega::Order_TimeInForce Order::timeinforce() const {
  // @@protoc_insertion_point(field_get:vega.Order.timeInForce)
  return _internal_timeinforce();
}
inline void Order::_internal_set_timeinforce(::vega::Order_TimeInForce value) {

  timeinforce_ = value;
}
inline void Order::set_timeinforce(::vega::Order_TimeInForce value) {
  _internal_set_timeinforce(value);
  // @@protoc_insertion_point(field_set:vega.Order.timeInForce)
}

// .vega.Order.Type type = 9 [json_name = "type"];
inline void Order::clear_type() {
  type_ = 0;
}
inline ::vega::Order_Type Order::_internal_type() const {
  return static_cast< ::vega::Order_Type >(type_);
}
inline ::vega::Order_Type Order::type() const {
  // @@protoc_insertion_point(field_get:vega.Order.type)
  return _internal_type();
}
inline void Order::_internal_set_type(::vega::Order_Type value) {

  type_ = value;
}
inline void Order::set_type(::vega::Order_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.Order.type)
}

// int64 createdAt = 10 [json_name = "createdAt"];
inline void Order::clear_createdat() {
  createdat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::_internal_createdat() const {
  return createdat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::createdat() const {
  // @@protoc_insertion_point(field_get:vega.Order.createdAt)
  return _internal_createdat();
}
inline void Order::_internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {

  createdat_ = value;
}
inline void Order::set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:vega.Order.createdAt)
}

// .vega.Order.Status status = 11 [json_name = "status"];
inline void Order::clear_status() {
  status_ = 0;
}
inline ::vega::Order_Status Order::_internal_status() const {
  return static_cast< ::vega::Order_Status >(status_);
}
inline ::vega::Order_Status Order::status() const {
  // @@protoc_insertion_point(field_get:vega.Order.status)
  return _internal_status();
}
inline void Order::_internal_set_status(::vega::Order_Status value) {

  status_ = value;
}
inline void Order::set_status(::vega::Order_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:vega.Order.status)
}

// int64 expiresAt = 12 [json_name = "expiresAt"];
inline void Order::clear_expiresat() {
  expiresat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::_internal_expiresat() const {
  return expiresat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::expiresat() const {
  // @@protoc_insertion_point(field_get:vega.Order.expiresAt)
  return _internal_expiresat();
}
inline void Order::_internal_set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value) {

  expiresat_ = value;
}
inline void Order::set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiresat(value);
  // @@protoc_insertion_point(field_set:vega.Order.expiresAt)
}

// string reference = 13 [json_name = "reference"];
inline void Order::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& Order::reference() const {
  // @@protoc_insertion_point(field_get:vega.Order.reference)
  return _internal_reference();
}
inline void Order::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.Order.reference)
}
inline std::string* Order::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:vega.Order.reference)
  return _internal_mutable_reference();
}
inline const std::string& Order::_internal_reference() const {
  return reference_.Get();
}
inline void Order::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Order::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Order.reference)
}
inline void Order::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Order.reference)
}
inline void Order::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Order.reference)
}
inline std::string* Order::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Order::release_reference() {
  // @@protoc_insertion_point(field_release:vega.Order.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Order.reference)
}

// .vega.OrderError reason = 14 [json_name = "reason"];
inline void Order::clear_reason() {
  reason_ = 0;
}
inline ::vega::OrderError Order::_internal_reason() const {
  return static_cast< ::vega::OrderError >(reason_);
}
inline ::vega::OrderError Order::reason() const {
  // @@protoc_insertion_point(field_get:vega.Order.reason)
  return _internal_reason();
}
inline void Order::_internal_set_reason(::vega::OrderError value) {

  reason_ = value;
}
inline void Order::set_reason(::vega::OrderError value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:vega.Order.reason)
}

// int64 updatedAt = 15 [json_name = "updatedAt"];
inline void Order::clear_updatedat() {
  updatedat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::_internal_updatedat() const {
  return updatedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::updatedat() const {
  // @@protoc_insertion_point(field_get:vega.Order.updatedAt)
  return _internal_updatedat();
}
inline void Order::_internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {

  updatedat_ = value;
}
inline void Order::set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:vega.Order.updatedAt)
}

// uint64 version = 16 [json_name = "version"];
inline void Order::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::version() const {
  // @@protoc_insertion_point(field_get:vega.Order.version)
  return _internal_version();
}
inline void Order::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  version_ = value;
}
inline void Order::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:vega.Order.version)
}

// uint64 batchID = 17 [json_name = "batchID"];
inline void Order::clear_batchid() {
  batchid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::_internal_batchid() const {
  return batchid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::batchid() const {
  // @@protoc_insertion_point(field_get:vega.Order.batchID)
  return _internal_batchid();
}
inline void Order::_internal_set_batchid(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  batchid_ = value;
}
inline void Order::set_batchid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_batchid(value);
  // @@protoc_insertion_point(field_set:vega.Order.batchID)
}

// .vega.PeggedOrder peggedOrder = 18 [json_name = "peggedOrder"];
inline bool Order::_internal_has_peggedorder() const {
  return this != internal_default_instance() && peggedorder_ != nullptr;
}
inline bool Order::has_peggedorder() const {
  return _internal_has_peggedorder();
}
inline void Order::clear_peggedorder() {
  if (GetArena() == nullptr && peggedorder_ != nullptr) {
    delete peggedorder_;
  }
  peggedorder_ = nullptr;
}
inline const ::vega::PeggedOrder& Order::_internal_peggedorder() const {
  const ::vega::PeggedOrder* p = peggedorder_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::PeggedOrder&>(
      ::vega::_PeggedOrder_default_instance_);
}
inline const ::vega::PeggedOrder& Order::peggedorder() const {
  // @@protoc_insertion_point(field_get:vega.Order.peggedOrder)
  return _internal_peggedorder();
}
inline void Order::unsafe_arena_set_allocated_peggedorder(
    ::vega::PeggedOrder* peggedorder) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peggedorder_);
  }
  peggedorder_ = peggedorder;
  if (peggedorder) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Order.peggedOrder)
}
inline ::vega::PeggedOrder* Order::release_peggedorder() {

  ::vega::PeggedOrder* temp = peggedorder_;
  peggedorder_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::PeggedOrder* Order::unsafe_arena_release_peggedorder() {
  // @@protoc_insertion_point(field_release:vega.Order.peggedOrder)

  ::vega::PeggedOrder* temp = peggedorder_;
  peggedorder_ = nullptr;
  return temp;
}
inline ::vega::PeggedOrder* Order::_internal_mutable_peggedorder() {

  if (peggedorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::PeggedOrder>(GetArena());
    peggedorder_ = p;
  }
  return peggedorder_;
}
inline ::vega::PeggedOrder* Order::mutable_peggedorder() {
  // @@protoc_insertion_point(field_mutable:vega.Order.peggedOrder)
  return _internal_mutable_peggedorder();
}
inline void Order::set_allocated_peggedorder(::vega::PeggedOrder* peggedorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete peggedorder_;
  }
  if (peggedorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(peggedorder);
    if (message_arena != submessage_arena) {
      peggedorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peggedorder, submessage_arena);
    }

  } else {

  }
  peggedorder_ = peggedorder;
  // @@protoc_insertion_point(field_set_allocated:vega.Order.peggedOrder)
}

// -------------------------------------------------------------------

// OrderCancellationConfirmation

// .vega.Order order = 1 [json_name = "order"];
inline bool OrderCancellationConfirmation::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool OrderCancellationConfirmation::has_order() const {
  return _internal_has_order();
}
inline void OrderCancellationConfirmation::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
inline const ::vega::Order& OrderCancellationConfirmation::_internal_order() const {
  const ::vega::Order* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Order&>(
      ::vega::_Order_default_instance_);
}
inline const ::vega::Order& OrderCancellationConfirmation::order() const {
  // @@protoc_insertion_point(field_get:vega.OrderCancellationConfirmation.order)
  return _internal_order();
}
inline void OrderCancellationConfirmation::unsafe_arena_set_allocated_order(
    ::vega::Order* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.OrderCancellationConfirmation.order)
}
inline ::vega::Order* OrderCancellationConfirmation::release_order() {

  ::vega::Order* temp = order_;
  order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Order* OrderCancellationConfirmation::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:vega.OrderCancellationConfirmation.order)

  ::vega::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::vega::Order* OrderCancellationConfirmation::_internal_mutable_order() {

  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Order>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::vega::Order* OrderCancellationConfirmation::mutable_order() {
  // @@protoc_insertion_point(field_mutable:vega.OrderCancellationConfirmation.order)
  return _internal_mutable_order();
}
inline void OrderCancellationConfirmation::set_allocated_order(::vega::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(order);
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }

  } else {

  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:vega.OrderCancellationConfirmation.order)
}

// -------------------------------------------------------------------

// OrderConfirmation

// .vega.Order order = 1 [json_name = "order"];
inline bool OrderConfirmation::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool OrderConfirmation::has_order() const {
  return _internal_has_order();
}
inline void OrderConfirmation::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
inline const ::vega::Order& OrderConfirmation::_internal_order() const {
  const ::vega::Order* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Order&>(
      ::vega::_Order_default_instance_);
}
inline const ::vega::Order& OrderConfirmation::order() const {
  // @@protoc_insertion_point(field_get:vega.OrderConfirmation.order)
  return _internal_order();
}
inline void OrderConfirmation::unsafe_arena_set_allocated_order(
    ::vega::Order* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.OrderConfirmation.order)
}
inline ::vega::Order* OrderConfirmation::release_order() {

  ::vega::Order* temp = order_;
  order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Order* OrderConfirmation::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:vega.OrderConfirmation.order)

  ::vega::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::vega::Order* OrderConfirmation::_internal_mutable_order() {

  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Order>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::vega::Order* OrderConfirmation::mutable_order() {
  // @@protoc_insertion_point(field_mutable:vega.OrderConfirmation.order)
  return _internal_mutable_order();
}
inline void OrderConfirmation::set_allocated_order(::vega::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(order);
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }

  } else {

  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:vega.OrderConfirmation.order)
}

// repeated .vega.Trade trades = 2 [json_name = "trades"];
inline int OrderConfirmation::_internal_trades_size() const {
  return trades_.size();
}
inline int OrderConfirmation::trades_size() const {
  return _internal_trades_size();
}
inline void OrderConfirmation::clear_trades() {
  trades_.Clear();
}
inline ::vega::Trade* OrderConfirmation::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:vega.OrderConfirmation.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
OrderConfirmation::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:vega.OrderConfirmation.trades)
  return &trades_;
}
inline const ::vega::Trade& OrderConfirmation::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::vega::Trade& OrderConfirmation::trades(int index) const {
  // @@protoc_insertion_point(field_get:vega.OrderConfirmation.trades)
  return _internal_trades(index);
}
inline ::vega::Trade* OrderConfirmation::_internal_add_trades() {
  return trades_.Add();
}
inline ::vega::Trade* OrderConfirmation::add_trades() {
  // @@protoc_insertion_point(field_add:vega.OrderConfirmation.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
OrderConfirmation::trades() const {
  // @@protoc_insertion_point(field_list:vega.OrderConfirmation.trades)
  return trades_;
}

// repeated .vega.Order passiveOrdersAffected = 3 [json_name = "passiveOrdersAffected"];
inline int OrderConfirmation::_internal_passiveordersaffected_size() const {
  return passiveordersaffected_.size();
}
inline int OrderConfirmation::passiveordersaffected_size() const {
  return _internal_passiveordersaffected_size();
}
inline void OrderConfirmation::clear_passiveordersaffected() {
  passiveordersaffected_.Clear();
}
inline ::vega::Order* OrderConfirmation::mutable_passiveordersaffected(int index) {
  // @@protoc_insertion_point(field_mutable:vega.OrderConfirmation.passiveOrdersAffected)
  return passiveordersaffected_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >*
OrderConfirmation::mutable_passiveordersaffected() {
  // @@protoc_insertion_point(field_mutable_list:vega.OrderConfirmation.passiveOrdersAffected)
  return &passiveordersaffected_;
}
inline const ::vega::Order& OrderConfirmation::_internal_passiveordersaffected(int index) const {
  return passiveordersaffected_.Get(index);
}
inline const ::vega::Order& OrderConfirmation::passiveordersaffected(int index) const {
  // @@protoc_insertion_point(field_get:vega.OrderConfirmation.passiveOrdersAffected)
  return _internal_passiveordersaffected(index);
}
inline ::vega::Order* OrderConfirmation::_internal_add_passiveordersaffected() {
  return passiveordersaffected_.Add();
}
inline ::vega::Order* OrderConfirmation::add_passiveordersaffected() {
  // @@protoc_insertion_point(field_add:vega.OrderConfirmation.passiveOrdersAffected)
  return _internal_add_passiveordersaffected();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Order >&
OrderConfirmation::passiveordersaffected() const {
  // @@protoc_insertion_point(field_list:vega.OrderConfirmation.passiveOrdersAffected)
  return passiveordersaffected_;
}

// -------------------------------------------------------------------

// AuctionIndicativeState

// string marketID = 1 [json_name = "marketID"];
inline void AuctionIndicativeState::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& AuctionIndicativeState::marketid() const {
  // @@protoc_insertion_point(field_get:vega.AuctionIndicativeState.marketID)
  return _internal_marketid();
}
inline void AuctionIndicativeState::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.AuctionIndicativeState.marketID)
}
inline std::string* AuctionIndicativeState::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.AuctionIndicativeState.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& AuctionIndicativeState::_internal_marketid() const {
  return marketid_.Get();
}
inline void AuctionIndicativeState::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuctionIndicativeState::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.AuctionIndicativeState.marketID)
}
inline void AuctionIndicativeState::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.AuctionIndicativeState.marketID)
}
inline void AuctionIndicativeState::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.AuctionIndicativeState.marketID)
}
inline std::string* AuctionIndicativeState::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuctionIndicativeState::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.AuctionIndicativeState.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuctionIndicativeState::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.AuctionIndicativeState.marketID)
}

// uint64 indicativePrice = 2 [json_name = "indicativePrice"];
inline void AuctionIndicativeState::clear_indicativeprice() {
  indicativeprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuctionIndicativeState::_internal_indicativeprice() const {
  return indicativeprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuctionIndicativeState::indicativeprice() const {
  // @@protoc_insertion_point(field_get:vega.AuctionIndicativeState.indicativePrice)
  return _internal_indicativeprice();
}
inline void AuctionIndicativeState::_internal_set_indicativeprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  indicativeprice_ = value;
}
inline void AuctionIndicativeState::set_indicativeprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_indicativeprice(value);
  // @@protoc_insertion_point(field_set:vega.AuctionIndicativeState.indicativePrice)
}

// uint64 indicativeVolume = 3 [json_name = "indicativeVolume"];
inline void AuctionIndicativeState::clear_indicativevolume() {
  indicativevolume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuctionIndicativeState::_internal_indicativevolume() const {
  return indicativevolume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AuctionIndicativeState::indicativevolume() const {
  // @@protoc_insertion_point(field_get:vega.AuctionIndicativeState.indicativeVolume)
  return _internal_indicativevolume();
}
inline void AuctionIndicativeState::_internal_set_indicativevolume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  indicativevolume_ = value;
}
inline void AuctionIndicativeState::set_indicativevolume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_indicativevolume(value);
  // @@protoc_insertion_point(field_set:vega.AuctionIndicativeState.indicativeVolume)
}

// int64 auctionStart = 4 [json_name = "auctionStart"];
inline void AuctionIndicativeState::clear_auctionstart() {
  auctionstart_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionIndicativeState::_internal_auctionstart() const {
  return auctionstart_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionIndicativeState::auctionstart() const {
  // @@protoc_insertion_point(field_get:vega.AuctionIndicativeState.auctionStart)
  return _internal_auctionstart();
}
inline void AuctionIndicativeState::_internal_set_auctionstart(::PROTOBUF_NAMESPACE_ID::int64 value) {

  auctionstart_ = value;
}
inline void AuctionIndicativeState::set_auctionstart(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_auctionstart(value);
  // @@protoc_insertion_point(field_set:vega.AuctionIndicativeState.auctionStart)
}

// int64 auctionEnd = 5 [json_name = "auctionEnd"];
inline void AuctionIndicativeState::clear_auctionend() {
  auctionend_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionIndicativeState::_internal_auctionend() const {
  return auctionend_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionIndicativeState::auctionend() const {
  // @@protoc_insertion_point(field_get:vega.AuctionIndicativeState.auctionEnd)
  return _internal_auctionend();
}
inline void AuctionIndicativeState::_internal_set_auctionend(::PROTOBUF_NAMESPACE_ID::int64 value) {

  auctionend_ = value;
}
inline void AuctionIndicativeState::set_auctionend(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_auctionend(value);
  // @@protoc_insertion_point(field_set:vega.AuctionIndicativeState.auctionEnd)
}

// -------------------------------------------------------------------

// Trade

// string id = 1 [json_name = "id"];
inline void Trade::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Trade::id() const {
  // @@protoc_insertion_point(field_get:vega.Trade.id)
  return _internal_id();
}
inline void Trade::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.Trade.id)
}
inline std::string* Trade::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.id)
  return _internal_mutable_id();
}
inline const std::string& Trade::_internal_id() const {
  return id_.Get();
}
inline void Trade::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.id)
}
inline void Trade::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Trade.id)
}
inline void Trade::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.id)
}
inline std::string* Trade::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_id() {
  // @@protoc_insertion_point(field_release:vega.Trade.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.id)
}

// string marketID = 2 [json_name = "marketID"];
inline void Trade::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& Trade::marketid() const {
  // @@protoc_insertion_point(field_get:vega.Trade.marketID)
  return _internal_marketid();
}
inline void Trade::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.Trade.marketID)
}
inline std::string* Trade::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& Trade::_internal_marketid() const {
  return marketid_.Get();
}
inline void Trade::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.marketID)
}
inline void Trade::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Trade.marketID)
}
inline void Trade::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.marketID)
}
inline std::string* Trade::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.Trade.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.marketID)
}

// uint64 price = 3 [json_name = "price"];
inline void Trade::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::price() const {
  // @@protoc_insertion_point(field_get:vega.Trade.price)
  return _internal_price();
}
inline void Trade::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void Trade::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.Trade.price)
}

// uint64 size = 4 [json_name = "size"];
inline void Trade::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::size() const {
  // @@protoc_insertion_point(field_get:vega.Trade.size)
  return _internal_size();
}
inline void Trade::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  size_ = value;
}
inline void Trade::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:vega.Trade.size)
}

// string buyer = 5 [json_name = "buyer"];
inline void Trade::clear_buyer() {
  buyer_.ClearToEmpty();
}
inline const std::string& Trade::buyer() const {
  // @@protoc_insertion_point(field_get:vega.Trade.buyer)
  return _internal_buyer();
}
inline void Trade::set_buyer(const std::string& value) {
  _internal_set_buyer(value);
  // @@protoc_insertion_point(field_set:vega.Trade.buyer)
}
inline std::string* Trade::mutable_buyer() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.buyer)
  return _internal_mutable_buyer();
}
inline const std::string& Trade::_internal_buyer() const {
  return buyer_.Get();
}
inline void Trade::_internal_set_buyer(const std::string& value) {

  buyer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_buyer(std::string&& value) {

  buyer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.buyer)
}
inline void Trade::set_buyer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  buyer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Trade.buyer)
}
inline void Trade::set_buyer(const char* value,
    size_t size) {

  buyer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.buyer)
}
inline std::string* Trade::_internal_mutable_buyer() {

  return buyer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_buyer() {
  // @@protoc_insertion_point(field_release:vega.Trade.buyer)
  return buyer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_buyer(std::string* buyer) {
  if (buyer != nullptr) {

  } else {

  }
  buyer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.buyer)
}

// string seller = 6 [json_name = "seller"];
inline void Trade::clear_seller() {
  seller_.ClearToEmpty();
}
inline const std::string& Trade::seller() const {
  // @@protoc_insertion_point(field_get:vega.Trade.seller)
  return _internal_seller();
}
inline void Trade::set_seller(const std::string& value) {
  _internal_set_seller(value);
  // @@protoc_insertion_point(field_set:vega.Trade.seller)
}
inline std::string* Trade::mutable_seller() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.seller)
  return _internal_mutable_seller();
}
inline const std::string& Trade::_internal_seller() const {
  return seller_.Get();
}
inline void Trade::_internal_set_seller(const std::string& value) {

  seller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_seller(std::string&& value) {

  seller_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.seller)
}
inline void Trade::set_seller(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  seller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Trade.seller)
}
inline void Trade::set_seller(const char* value,
    size_t size) {

  seller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.seller)
}
inline std::string* Trade::_internal_mutable_seller() {

  return seller_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_seller() {
  // @@protoc_insertion_point(field_release:vega.Trade.seller)
  return seller_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_seller(std::string* seller) {
  if (seller != nullptr) {

  } else {

  }
  seller_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seller,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.seller)
}

// .vega.Side aggressor = 7 [json_name = "aggressor"];
inline void Trade::clear_aggressor() {
  aggressor_ = 0;
}
inline ::vega::Side Trade::_internal_aggressor() const {
  return static_cast< ::vega::Side >(aggressor_);
}
inline ::vega::Side Trade::aggressor() const {
  // @@protoc_insertion_point(field_get:vega.Trade.aggressor)
  return _internal_aggressor();
}
inline void Trade::_internal_set_aggressor(::vega::Side value) {

  aggressor_ = value;
}
inline void Trade::set_aggressor(::vega::Side value) {
  _internal_set_aggressor(value);
  // @@protoc_insertion_point(field_set:vega.Trade.aggressor)
}

// string buyOrder = 8 [json_name = "buyOrder"];
inline void Trade::clear_buyorder() {
  buyorder_.ClearToEmpty();
}
inline const std::string& Trade::buyorder() const {
  // @@protoc_insertion_point(field_get:vega.Trade.buyOrder)
  return _internal_buyorder();
}
inline void Trade::set_buyorder(const std::string& value) {
  _internal_set_buyorder(value);
  // @@protoc_insertion_point(field_set:vega.Trade.buyOrder)
}
inline std::string* Trade::mutable_buyorder() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.buyOrder)
  return _internal_mutable_buyorder();
}
inline const std::string& Trade::_internal_buyorder() const {
  return buyorder_.Get();
}
inline void Trade::_internal_set_buyorder(const std::string& value) {

  buyorder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_buyorder(std::string&& value) {

  buyorder_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.buyOrder)
}
inline void Trade::set_buyorder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  buyorder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Trade.buyOrder)
}
inline void Trade::set_buyorder(const char* value,
    size_t size) {

  buyorder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.buyOrder)
}
inline std::string* Trade::_internal_mutable_buyorder() {

  return buyorder_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_buyorder() {
  // @@protoc_insertion_point(field_release:vega.Trade.buyOrder)
  return buyorder_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_buyorder(std::string* buyorder) {
  if (buyorder != nullptr) {

  } else {

  }
  buyorder_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buyorder,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.buyOrder)
}

// string sellOrder = 9 [json_name = "sellOrder"];
inline void Trade::clear_sellorder() {
  sellorder_.ClearToEmpty();
}
inline const std::string& Trade::sellorder() const {
  // @@protoc_insertion_point(field_get:vega.Trade.sellOrder)
  return _internal_sellorder();
}
inline void Trade::set_sellorder(const std::string& value) {
  _internal_set_sellorder(value);
  // @@protoc_insertion_point(field_set:vega.Trade.sellOrder)
}
inline std::string* Trade::mutable_sellorder() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.sellOrder)
  return _internal_mutable_sellorder();
}
inline const std::string& Trade::_internal_sellorder() const {
  return sellorder_.Get();
}
inline void Trade::_internal_set_sellorder(const std::string& value) {

  sellorder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_sellorder(std::string&& value) {

  sellorder_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Trade.sellOrder)
}
inline void Trade::set_sellorder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  sellorder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Trade.sellOrder)
}
inline void Trade::set_sellorder(const char* value,
    size_t size) {

  sellorder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Trade.sellOrder)
}
inline std::string* Trade::_internal_mutable_sellorder() {

  return sellorder_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_sellorder() {
  // @@protoc_insertion_point(field_release:vega.Trade.sellOrder)
  return sellorder_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_sellorder(std::string* sellorder) {
  if (sellorder != nullptr) {

  } else {

  }
  sellorder_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sellorder,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.sellOrder)
}

// int64 timestamp = 10 [json_name = "timestamp"];
inline void Trade::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Trade::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Trade::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.Trade.timestamp)
  return _internal_timestamp();
}
inline void Trade::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void Trade::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.Trade.timestamp)
}

// .vega.Trade.Type type = 11 [json_name = "type"];
inline void Trade::clear_type() {
  type_ = 0;
}
inline ::vega::Trade_Type Trade::_internal_type() const {
  return static_cast< ::vega::Trade_Type >(type_);
}
inline ::vega::Trade_Type Trade::type() const {
  // @@protoc_insertion_point(field_get:vega.Trade.type)
  return _internal_type();
}
inline void Trade::_internal_set_type(::vega::Trade_Type value) {

  type_ = value;
}
inline void Trade::set_type(::vega::Trade_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.Trade.type)
}

// .vega.Fee buyerFee = 12 [json_name = "buyerFee"];
inline bool Trade::_internal_has_buyerfee() const {
  return this != internal_default_instance() && buyerfee_ != nullptr;
}
inline bool Trade::has_buyerfee() const {
  return _internal_has_buyerfee();
}
inline void Trade::clear_buyerfee() {
  if (GetArena() == nullptr && buyerfee_ != nullptr) {
    delete buyerfee_;
  }
  buyerfee_ = nullptr;
}
inline const ::vega::Fee& Trade::_internal_buyerfee() const {
  const ::vega::Fee* p = buyerfee_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Fee&>(
      ::vega::_Fee_default_instance_);
}
inline const ::vega::Fee& Trade::buyerfee() const {
  // @@protoc_insertion_point(field_get:vega.Trade.buyerFee)
  return _internal_buyerfee();
}
inline void Trade::unsafe_arena_set_allocated_buyerfee(
    ::vega::Fee* buyerfee) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buyerfee_);
  }
  buyerfee_ = buyerfee;
  if (buyerfee) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Trade.buyerFee)
}
inline ::vega::Fee* Trade::release_buyerfee() {

  ::vega::Fee* temp = buyerfee_;
  buyerfee_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Fee* Trade::unsafe_arena_release_buyerfee() {
  // @@protoc_insertion_point(field_release:vega.Trade.buyerFee)

  ::vega::Fee* temp = buyerfee_;
  buyerfee_ = nullptr;
  return temp;
}
inline ::vega::Fee* Trade::_internal_mutable_buyerfee() {

  if (buyerfee_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Fee>(GetArena());
    buyerfee_ = p;
  }
  return buyerfee_;
}
inline ::vega::Fee* Trade::mutable_buyerfee() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.buyerFee)
  return _internal_mutable_buyerfee();
}
inline void Trade::set_allocated_buyerfee(::vega::Fee* buyerfee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete buyerfee_;
  }
  if (buyerfee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(buyerfee);
    if (message_arena != submessage_arena) {
      buyerfee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buyerfee, submessage_arena);
    }

  } else {

  }
  buyerfee_ = buyerfee;
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.buyerFee)
}

// .vega.Fee sellerFee = 13 [json_name = "sellerFee"];
inline bool Trade::_internal_has_sellerfee() const {
  return this != internal_default_instance() && sellerfee_ != nullptr;
}
inline bool Trade::has_sellerfee() const {
  return _internal_has_sellerfee();
}
inline void Trade::clear_sellerfee() {
  if (GetArena() == nullptr && sellerfee_ != nullptr) {
    delete sellerfee_;
  }
  sellerfee_ = nullptr;
}
inline const ::vega::Fee& Trade::_internal_sellerfee() const {
  const ::vega::Fee* p = sellerfee_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Fee&>(
      ::vega::_Fee_default_instance_);
}
inline const ::vega::Fee& Trade::sellerfee() const {
  // @@protoc_insertion_point(field_get:vega.Trade.sellerFee)
  return _internal_sellerfee();
}
inline void Trade::unsafe_arena_set_allocated_sellerfee(
    ::vega::Fee* sellerfee) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sellerfee_);
  }
  sellerfee_ = sellerfee;
  if (sellerfee) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Trade.sellerFee)
}
inline ::vega::Fee* Trade::release_sellerfee() {

  ::vega::Fee* temp = sellerfee_;
  sellerfee_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Fee* Trade::unsafe_arena_release_sellerfee() {
  // @@protoc_insertion_point(field_release:vega.Trade.sellerFee)

  ::vega::Fee* temp = sellerfee_;
  sellerfee_ = nullptr;
  return temp;
}
inline ::vega::Fee* Trade::_internal_mutable_sellerfee() {

  if (sellerfee_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Fee>(GetArena());
    sellerfee_ = p;
  }
  return sellerfee_;
}
inline ::vega::Fee* Trade::mutable_sellerfee() {
  // @@protoc_insertion_point(field_mutable:vega.Trade.sellerFee)
  return _internal_mutable_sellerfee();
}
inline void Trade::set_allocated_sellerfee(::vega::Fee* sellerfee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sellerfee_;
  }
  if (sellerfee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sellerfee);
    if (message_arena != submessage_arena) {
      sellerfee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sellerfee, submessage_arena);
    }

  } else {

  }
  sellerfee_ = sellerfee;
  // @@protoc_insertion_point(field_set_allocated:vega.Trade.sellerFee)
}

// uint64 buyerAuctionBatch = 14 [json_name = "buyerAuctionBatch"];
inline void Trade::clear_buyerauctionbatch() {
  buyerauctionbatch_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::_internal_buyerauctionbatch() const {
  return buyerauctionbatch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::buyerauctionbatch() const {
  // @@protoc_insertion_point(field_get:vega.Trade.buyerAuctionBatch)
  return _internal_buyerauctionbatch();
}
inline void Trade::_internal_set_buyerauctionbatch(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  buyerauctionbatch_ = value;
}
inline void Trade::set_buyerauctionbatch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_buyerauctionbatch(value);
  // @@protoc_insertion_point(field_set:vega.Trade.buyerAuctionBatch)
}

// uint64 sellerAuctionBatch = 15 [json_name = "sellerAuctionBatch"];
inline void Trade::clear_sellerauctionbatch() {
  sellerauctionbatch_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::_internal_sellerauctionbatch() const {
  return sellerauctionbatch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::sellerauctionbatch() const {
  // @@protoc_insertion_point(field_get:vega.Trade.sellerAuctionBatch)
  return _internal_sellerauctionbatch();
}
inline void Trade::_internal_set_sellerauctionbatch(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  sellerauctionbatch_ = value;
}
inline void Trade::set_sellerauctionbatch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sellerauctionbatch(value);
  // @@protoc_insertion_point(field_set:vega.Trade.sellerAuctionBatch)
}

// -------------------------------------------------------------------

// Fee

// uint64 makerFee = 1 [json_name = "makerFee"];
inline void Fee::clear_makerfee() {
  makerfee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fee::_internal_makerfee() const {
  return makerfee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fee::makerfee() const {
  // @@protoc_insertion_point(field_get:vega.Fee.makerFee)
  return _internal_makerfee();
}
inline void Fee::_internal_set_makerfee(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  makerfee_ = value;
}
inline void Fee::set_makerfee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_makerfee(value);
  // @@protoc_insertion_point(field_set:vega.Fee.makerFee)
}

// uint64 infrastructureFee = 2 [json_name = "infrastructureFee"];
inline void Fee::clear_infrastructurefee() {
  infrastructurefee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fee::_internal_infrastructurefee() const {
  return infrastructurefee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fee::infrastructurefee() const {
  // @@protoc_insertion_point(field_get:vega.Fee.infrastructureFee)
  return _internal_infrastructurefee();
}
inline void Fee::_internal_set_infrastructurefee(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  infrastructurefee_ = value;
}
inline void Fee::set_infrastructurefee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_infrastructurefee(value);
  // @@protoc_insertion_point(field_set:vega.Fee.infrastructureFee)
}

// uint64 liquidityFee = 3 [json_name = "liquidityFee"];
inline void Fee::clear_liquidityfee() {
  liquidityfee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fee::_internal_liquidityfee() const {
  return liquidityfee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fee::liquidityfee() const {
  // @@protoc_insertion_point(field_get:vega.Fee.liquidityFee)
  return _internal_liquidityfee();
}
inline void Fee::_internal_set_liquidityfee(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  liquidityfee_ = value;
}
inline void Fee::set_liquidityfee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_liquidityfee(value);
  // @@protoc_insertion_point(field_set:vega.Fee.liquidityFee)
}

// -------------------------------------------------------------------

// TradeSet

// repeated .vega.Trade trades = 1 [json_name = "trades"];
inline int TradeSet::_internal_trades_size() const {
  return trades_.size();
}
inline int TradeSet::trades_size() const {
  return _internal_trades_size();
}
inline void TradeSet::clear_trades() {
  trades_.Clear();
}
inline ::vega::Trade* TradeSet::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TradeSet.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >*
TradeSet::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:vega.TradeSet.trades)
  return &trades_;
}
inline const ::vega::Trade& TradeSet::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::vega::Trade& TradeSet::trades(int index) const {
  // @@protoc_insertion_point(field_get:vega.TradeSet.trades)
  return _internal_trades(index);
}
inline ::vega::Trade* TradeSet::_internal_add_trades() {
  return trades_.Add();
}
inline ::vega::Trade* TradeSet::add_trades() {
  // @@protoc_insertion_point(field_add:vega.TradeSet.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Trade >&
TradeSet::trades() const {
  // @@protoc_insertion_point(field_list:vega.TradeSet.trades)
  return trades_;
}

// -------------------------------------------------------------------

// Candle

// int64 timestamp = 1 [json_name = "timestamp"];
inline void Candle::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Candle::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.Candle.timestamp)
  return _internal_timestamp();
}
inline void Candle::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void Candle::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.Candle.timestamp)
}

// string datetime = 2 [json_name = "datetime"];
inline void Candle::clear_datetime() {
  datetime_.ClearToEmpty();
}
inline const std::string& Candle::datetime() const {
  // @@protoc_insertion_point(field_get:vega.Candle.datetime)
  return _internal_datetime();
}
inline void Candle::set_datetime(const std::string& value) {
  _internal_set_datetime(value);
  // @@protoc_insertion_point(field_set:vega.Candle.datetime)
}
inline std::string* Candle::mutable_datetime() {
  // @@protoc_insertion_point(field_mutable:vega.Candle.datetime)
  return _internal_mutable_datetime();
}
inline const std::string& Candle::_internal_datetime() const {
  return datetime_.Get();
}
inline void Candle::_internal_set_datetime(const std::string& value) {

  datetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Candle::set_datetime(std::string&& value) {

  datetime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Candle.datetime)
}
inline void Candle::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  datetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Candle.datetime)
}
inline void Candle::set_datetime(const char* value,
    size_t size) {

  datetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Candle.datetime)
}
inline std::string* Candle::_internal_mutable_datetime() {

  return datetime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Candle::release_datetime() {
  // @@protoc_insertion_point(field_release:vega.Candle.datetime)
  return datetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Candle::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {

  } else {

  }
  datetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Candle.datetime)
}

// uint64 high = 3 [json_name = "high"];
inline void Candle::clear_high() {
  high_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::_internal_high() const {
  return high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::high() const {
  // @@protoc_insertion_point(field_get:vega.Candle.high)
  return _internal_high();
}
inline void Candle::_internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  high_ = value;
}
inline void Candle::set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:vega.Candle.high)
}

// uint64 low = 4 [json_name = "low"];
inline void Candle::clear_low() {
  low_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::_internal_low() const {
  return low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::low() const {
  // @@protoc_insertion_point(field_get:vega.Candle.low)
  return _internal_low();
}
inline void Candle::_internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  low_ = value;
}
inline void Candle::set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:vega.Candle.low)
}

// uint64 open = 5 [json_name = "open"];
inline void Candle::clear_open() {
  open_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::_internal_open() const {
  return open_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::open() const {
  // @@protoc_insertion_point(field_get:vega.Candle.open)
  return _internal_open();
}
inline void Candle::_internal_set_open(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  open_ = value;
}
inline void Candle::set_open(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:vega.Candle.open)
}

// uint64 close = 6 [json_name = "close"];
inline void Candle::clear_close() {
  close_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::_internal_close() const {
  return close_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::close() const {
  // @@protoc_insertion_point(field_get:vega.Candle.close)
  return _internal_close();
}
inline void Candle::_internal_set_close(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  close_ = value;
}
inline void Candle::set_close(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:vega.Candle.close)
}

// uint64 volume = 7 [json_name = "volume"];
inline void Candle::clear_volume() {
  volume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Candle::volume() const {
  // @@protoc_insertion_point(field_get:vega.Candle.volume)
  return _internal_volume();
}
inline void Candle::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  volume_ = value;
}
inline void Candle::set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:vega.Candle.volume)
}

// .vega.Interval interval = 8 [json_name = "interval"];
inline void Candle::clear_interval() {
  interval_ = 0;
}
inline ::vega::Interval Candle::_internal_interval() const {
  return static_cast< ::vega::Interval >(interval_);
}
inline ::vega::Interval Candle::interval() const {
  // @@protoc_insertion_point(field_get:vega.Candle.interval)
  return _internal_interval();
}
inline void Candle::_internal_set_interval(::vega::Interval value) {

  interval_ = value;
}
inline void Candle::set_interval(::vega::Interval value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:vega.Candle.interval)
}

// -------------------------------------------------------------------

// PriceLevel

// uint64 price = 1 [json_name = "price"];
inline void PriceLevel::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceLevel::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceLevel::price() const {
  // @@protoc_insertion_point(field_get:vega.PriceLevel.price)
  return _internal_price();
}
inline void PriceLevel::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void PriceLevel::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.PriceLevel.price)
}

// uint64 numberOfOrders = 2 [json_name = "numberOfOrders"];
inline void PriceLevel::clear_numberoforders() {
  numberoforders_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceLevel::_internal_numberoforders() const {
  return numberoforders_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceLevel::numberoforders() const {
  // @@protoc_insertion_point(field_get:vega.PriceLevel.numberOfOrders)
  return _internal_numberoforders();
}
inline void PriceLevel::_internal_set_numberoforders(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  numberoforders_ = value;
}
inline void PriceLevel::set_numberoforders(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_numberoforders(value);
  // @@protoc_insertion_point(field_set:vega.PriceLevel.numberOfOrders)
}

// uint64 volume = 3 [json_name = "volume"];
inline void PriceLevel::clear_volume() {
  volume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceLevel::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceLevel::volume() const {
  // @@protoc_insertion_point(field_get:vega.PriceLevel.volume)
  return _internal_volume();
}
inline void PriceLevel::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  volume_ = value;
}
inline void PriceLevel::set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:vega.PriceLevel.volume)
}

// -------------------------------------------------------------------

// MarketDepth

// string marketID = 1 [json_name = "marketID"];
inline void MarketDepth::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& MarketDepth::marketid() const {
  // @@protoc_insertion_point(field_get:vega.MarketDepth.marketID)
  return _internal_marketid();
}
inline void MarketDepth::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.MarketDepth.marketID)
}
inline std::string* MarketDepth::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepth.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& MarketDepth::_internal_marketid() const {
  return marketid_.Get();
}
inline void MarketDepth::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketDepth::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketDepth.marketID)
}
inline void MarketDepth::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarketDepth.marketID)
}
inline void MarketDepth::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarketDepth.marketID)
}
inline std::string* MarketDepth::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketDepth::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.MarketDepth.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDepth::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarketDepth.marketID)
}

// repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
inline int MarketDepth::_internal_buy_size() const {
  return buy_.size();
}
inline int MarketDepth::buy_size() const {
  return _internal_buy_size();
}
inline void MarketDepth::clear_buy() {
  buy_.Clear();
}
inline ::vega::PriceLevel* MarketDepth::mutable_buy(int index) {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepth.buy)
  return buy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepth::mutable_buy() {
  // @@protoc_insertion_point(field_mutable_list:vega.MarketDepth.buy)
  return &buy_;
}
inline const ::vega::PriceLevel& MarketDepth::_internal_buy(int index) const {
  return buy_.Get(index);
}
inline const ::vega::PriceLevel& MarketDepth::buy(int index) const {
  // @@protoc_insertion_point(field_get:vega.MarketDepth.buy)
  return _internal_buy(index);
}
inline ::vega::PriceLevel* MarketDepth::_internal_add_buy() {
  return buy_.Add();
}
inline ::vega::PriceLevel* MarketDepth::add_buy() {
  // @@protoc_insertion_point(field_add:vega.MarketDepth.buy)
  return _internal_add_buy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepth::buy() const {
  // @@protoc_insertion_point(field_list:vega.MarketDepth.buy)
  return buy_;
}

// repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
inline int MarketDepth::_internal_sell_size() const {
  return sell_.size();
}
inline int MarketDepth::sell_size() const {
  return _internal_sell_size();
}
inline void MarketDepth::clear_sell() {
  sell_.Clear();
}
inline ::vega::PriceLevel* MarketDepth::mutable_sell(int index) {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepth.sell)
  return sell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepth::mutable_sell() {
  // @@protoc_insertion_point(field_mutable_list:vega.MarketDepth.sell)
  return &sell_;
}
inline const ::vega::PriceLevel& MarketDepth::_internal_sell(int index) const {
  return sell_.Get(index);
}
inline const ::vega::PriceLevel& MarketDepth::sell(int index) const {
  // @@protoc_insertion_point(field_get:vega.MarketDepth.sell)
  return _internal_sell(index);
}
inline ::vega::PriceLevel* MarketDepth::_internal_add_sell() {
  return sell_.Add();
}
inline ::vega::PriceLevel* MarketDepth::add_sell() {
  // @@protoc_insertion_point(field_add:vega.MarketDepth.sell)
  return _internal_add_sell();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepth::sell() const {
  // @@protoc_insertion_point(field_list:vega.MarketDepth.sell)
  return sell_;
}

// uint64 sequenceNumber = 4 [json_name = "sequenceNumber"];
inline void MarketDepth::clear_sequencenumber() {
  sequencenumber_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepth::_internal_sequencenumber() const {
  return sequencenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepth::sequencenumber() const {
  // @@protoc_insertion_point(field_get:vega.MarketDepth.sequenceNumber)
  return _internal_sequencenumber();
}
inline void MarketDepth::_internal_set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  sequencenumber_ = value;
}
inline void MarketDepth::set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequencenumber(value);
  // @@protoc_insertion_point(field_set:vega.MarketDepth.sequenceNumber)
}

// -------------------------------------------------------------------

// MarketDepthUpdate

// string marketID = 1 [json_name = "marketID"];
inline void MarketDepthUpdate::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& MarketDepthUpdate::marketid() const {
  // @@protoc_insertion_point(field_get:vega.MarketDepthUpdate.marketID)
  return _internal_marketid();
}
inline void MarketDepthUpdate::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.MarketDepthUpdate.marketID)
}
inline std::string* MarketDepthUpdate::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepthUpdate.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& MarketDepthUpdate::_internal_marketid() const {
  return marketid_.Get();
}
inline void MarketDepthUpdate::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketDepthUpdate::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketDepthUpdate.marketID)
}
inline void MarketDepthUpdate::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarketDepthUpdate.marketID)
}
inline void MarketDepthUpdate::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarketDepthUpdate.marketID)
}
inline std::string* MarketDepthUpdate::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketDepthUpdate::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.MarketDepthUpdate.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDepthUpdate::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarketDepthUpdate.marketID)
}

// repeated .vega.PriceLevel buy = 2 [json_name = "buy"];
inline int MarketDepthUpdate::_internal_buy_size() const {
  return buy_.size();
}
inline int MarketDepthUpdate::buy_size() const {
  return _internal_buy_size();
}
inline void MarketDepthUpdate::clear_buy() {
  buy_.Clear();
}
inline ::vega::PriceLevel* MarketDepthUpdate::mutable_buy(int index) {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepthUpdate.buy)
  return buy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepthUpdate::mutable_buy() {
  // @@protoc_insertion_point(field_mutable_list:vega.MarketDepthUpdate.buy)
  return &buy_;
}
inline const ::vega::PriceLevel& MarketDepthUpdate::_internal_buy(int index) const {
  return buy_.Get(index);
}
inline const ::vega::PriceLevel& MarketDepthUpdate::buy(int index) const {
  // @@protoc_insertion_point(field_get:vega.MarketDepthUpdate.buy)
  return _internal_buy(index);
}
inline ::vega::PriceLevel* MarketDepthUpdate::_internal_add_buy() {
  return buy_.Add();
}
inline ::vega::PriceLevel* MarketDepthUpdate::add_buy() {
  // @@protoc_insertion_point(field_add:vega.MarketDepthUpdate.buy)
  return _internal_add_buy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepthUpdate::buy() const {
  // @@protoc_insertion_point(field_list:vega.MarketDepthUpdate.buy)
  return buy_;
}

// repeated .vega.PriceLevel sell = 3 [json_name = "sell"];
inline int MarketDepthUpdate::_internal_sell_size() const {
  return sell_.size();
}
inline int MarketDepthUpdate::sell_size() const {
  return _internal_sell_size();
}
inline void MarketDepthUpdate::clear_sell() {
  sell_.Clear();
}
inline ::vega::PriceLevel* MarketDepthUpdate::mutable_sell(int index) {
  // @@protoc_insertion_point(field_mutable:vega.MarketDepthUpdate.sell)
  return sell_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >*
MarketDepthUpdate::mutable_sell() {
  // @@protoc_insertion_point(field_mutable_list:vega.MarketDepthUpdate.sell)
  return &sell_;
}
inline const ::vega::PriceLevel& MarketDepthUpdate::_internal_sell(int index) const {
  return sell_.Get(index);
}
inline const ::vega::PriceLevel& MarketDepthUpdate::sell(int index) const {
  // @@protoc_insertion_point(field_get:vega.MarketDepthUpdate.sell)
  return _internal_sell(index);
}
inline ::vega::PriceLevel* MarketDepthUpdate::_internal_add_sell() {
  return sell_.Add();
}
inline ::vega::PriceLevel* MarketDepthUpdate::add_sell() {
  // @@protoc_insertion_point(field_add:vega.MarketDepthUpdate.sell)
  return _internal_add_sell();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceLevel >&
MarketDepthUpdate::sell() const {
  // @@protoc_insertion_point(field_list:vega.MarketDepthUpdate.sell)
  return sell_;
}

// uint64 sequenceNumber = 4 [json_name = "sequenceNumber"];
inline void MarketDepthUpdate::clear_sequencenumber() {
  sequencenumber_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepthUpdate::_internal_sequencenumber() const {
  return sequencenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketDepthUpdate::sequencenumber() const {
  // @@protoc_insertion_point(field_get:vega.MarketDepthUpdate.sequenceNumber)
  return _internal_sequencenumber();
}
inline void MarketDepthUpdate::_internal_set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  sequencenumber_ = value;
}
inline void MarketDepthUpdate::set_sequencenumber(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequencenumber(value);
  // @@protoc_insertion_point(field_set:vega.MarketDepthUpdate.sequenceNumber)
}

// -------------------------------------------------------------------

// Position

// string marketID = 1 [json_name = "marketID"];
inline void Position::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& Position::marketid() const {
  // @@protoc_insertion_point(field_get:vega.Position.marketID)
  return _internal_marketid();
}
inline void Position::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.Position.marketID)
}
inline std::string* Position::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.Position.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& Position::_internal_marketid() const {
  return marketid_.Get();
}
inline void Position::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Position::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Position.marketID)
}
inline void Position::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Position.marketID)
}
inline void Position::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Position.marketID)
}
inline std::string* Position::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Position::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.Position.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Position::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Position.marketID)
}

// string partyID = 2 [json_name = "partyID"];
inline void Position::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& Position::partyid() const {
  // @@protoc_insertion_point(field_get:vega.Position.partyID)
  return _internal_partyid();
}
inline void Position::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:vega.Position.partyID)
}
inline std::string* Position::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:vega.Position.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& Position::_internal_partyid() const {
  return partyid_.Get();
}
inline void Position::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Position::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Position.partyID)
}
inline void Position::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Position.partyID)
}
inline void Position::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Position.partyID)
}
inline std::string* Position::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Position::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.Position.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Position::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Position.partyID)
}

// int64 openVolume = 3 [json_name = "openVolume"];
inline void Position::clear_openvolume() {
  openvolume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::_internal_openvolume() const {
  return openvolume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::openvolume() const {
  // @@protoc_insertion_point(field_get:vega.Position.openVolume)
  return _internal_openvolume();
}
inline void Position::_internal_set_openvolume(::PROTOBUF_NAMESPACE_ID::int64 value) {

  openvolume_ = value;
}
inline void Position::set_openvolume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_openvolume(value);
  // @@protoc_insertion_point(field_set:vega.Position.openVolume)
}

// int64 realisedPNL = 4 [json_name = "realisedPNL"];
inline void Position::clear_realisedpnl() {
  realisedpnl_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::_internal_realisedpnl() const {
  return realisedpnl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::realisedpnl() const {
  // @@protoc_insertion_point(field_get:vega.Position.realisedPNL)
  return _internal_realisedpnl();
}
inline void Position::_internal_set_realisedpnl(::PROTOBUF_NAMESPACE_ID::int64 value) {

  realisedpnl_ = value;
}
inline void Position::set_realisedpnl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_realisedpnl(value);
  // @@protoc_insertion_point(field_set:vega.Position.realisedPNL)
}

// int64 unrealisedPNL = 5 [json_name = "unrealisedPNL"];
inline void Position::clear_unrealisedpnl() {
  unrealisedpnl_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::_internal_unrealisedpnl() const {
  return unrealisedpnl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::unrealisedpnl() const {
  // @@protoc_insertion_point(field_get:vega.Position.unrealisedPNL)
  return _internal_unrealisedpnl();
}
inline void Position::_internal_set_unrealisedpnl(::PROTOBUF_NAMESPACE_ID::int64 value) {

  unrealisedpnl_ = value;
}
inline void Position::set_unrealisedpnl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_unrealisedpnl(value);
  // @@protoc_insertion_point(field_set:vega.Position.unrealisedPNL)
}

// uint64 averageEntryPrice = 6 [json_name = "averageEntryPrice"];
inline void Position::clear_averageentryprice() {
  averageentryprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Position::_internal_averageentryprice() const {
  return averageentryprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Position::averageentryprice() const {
  // @@protoc_insertion_point(field_get:vega.Position.averageEntryPrice)
  return _internal_averageentryprice();
}
inline void Position::_internal_set_averageentryprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  averageentryprice_ = value;
}
inline void Position::set_averageentryprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_averageentryprice(value);
  // @@protoc_insertion_point(field_set:vega.Position.averageEntryPrice)
}

// int64 updatedAt = 7 [json_name = "updatedAt"];
inline void Position::clear_updatedat() {
  updatedat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::_internal_updatedat() const {
  return updatedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Position::updatedat() const {
  // @@protoc_insertion_point(field_get:vega.Position.updatedAt)
  return _internal_updatedat();
}
inline void Position::_internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {

  updatedat_ = value;
}
inline void Position::set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:vega.Position.updatedAt)
}

// -------------------------------------------------------------------

// PositionTrade

// int64 volume = 1 [json_name = "volume"];
inline void PositionTrade::clear_volume() {
  volume_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PositionTrade::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PositionTrade::volume() const {
  // @@protoc_insertion_point(field_get:vega.PositionTrade.volume)
  return _internal_volume();
}
inline void PositionTrade::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {

  volume_ = value;
}
inline void PositionTrade::set_volume(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:vega.PositionTrade.volume)
}

// uint64 price = 2 [json_name = "price"];
inline void PositionTrade::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PositionTrade::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PositionTrade::price() const {
  // @@protoc_insertion_point(field_get:vega.PositionTrade.price)
  return _internal_price();
}
inline void PositionTrade::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void PositionTrade::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.PositionTrade.price)
}

// -------------------------------------------------------------------

// Statistics

// uint64 blockHeight = 1 [json_name = "blockHeight"];
inline void Statistics::clear_blockheight() {
  blockheight_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_blockheight() const {
  return blockheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::blockheight() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.blockHeight)
  return _internal_blockheight();
}
inline void Statistics::_internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  blockheight_ = value;
}
inline void Statistics::set_blockheight(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blockheight(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.blockHeight)
}

// uint64 backlogLength = 2 [json_name = "backlogLength"];
inline void Statistics::clear_backloglength() {
  backloglength_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_backloglength() const {
  return backloglength_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::backloglength() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.backlogLength)
  return _internal_backloglength();
}
inline void Statistics::_internal_set_backloglength(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  backloglength_ = value;
}
inline void Statistics::set_backloglength(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_backloglength(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.backlogLength)
}

// uint64 totalPeers = 3 [json_name = "totalPeers"];
inline void Statistics::clear_totalpeers() {
  totalpeers_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_totalpeers() const {
  return totalpeers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::totalpeers() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.totalPeers)
  return _internal_totalpeers();
}
inline void Statistics::_internal_set_totalpeers(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  totalpeers_ = value;
}
inline void Statistics::set_totalpeers(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_totalpeers(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.totalPeers)
}

// string genesisTime = 4 [json_name = "genesisTime"];
inline void Statistics::clear_genesistime() {
  genesistime_.ClearToEmpty();
}
inline const std::string& Statistics::genesistime() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.genesisTime)
  return _internal_genesistime();
}
inline void Statistics::set_genesistime(const std::string& value) {
  _internal_set_genesistime(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.genesisTime)
}
inline std::string* Statistics::mutable_genesistime() {
  // @@protoc_insertion_point(field_mutable:vega.Statistics.genesisTime)
  return _internal_mutable_genesistime();
}
inline const std::string& Statistics::_internal_genesistime() const {
  return genesistime_.Get();
}
inline void Statistics::_internal_set_genesistime(const std::string& value) {

  genesistime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_genesistime(std::string&& value) {

  genesistime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.genesisTime)
}
inline void Statistics::set_genesistime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  genesistime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Statistics.genesisTime)
}
inline void Statistics::set_genesistime(const char* value,
    size_t size) {

  genesistime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.genesisTime)
}
inline std::string* Statistics::_internal_mutable_genesistime() {

  return genesistime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_genesistime() {
  // @@protoc_insertion_point(field_release:vega.Statistics.genesisTime)
  return genesistime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_genesistime(std::string* genesistime) {
  if (genesistime != nullptr) {

  } else {

  }
  genesistime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), genesistime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.genesisTime)
}

// string currentTime = 5 [json_name = "currentTime"];
inline void Statistics::clear_currenttime() {
  currenttime_.ClearToEmpty();
}
inline const std::string& Statistics::currenttime() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.currentTime)
  return _internal_currenttime();
}
inline void Statistics::set_currenttime(const std::string& value) {
  _internal_set_currenttime(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.currentTime)
}
inline std::string* Statistics::mutable_currenttime() {
  // @@protoc_insertion_point(field_mutable:vega.Statistics.currentTime)
  return _internal_mutable_currenttime();
}
inline const std::string& Statistics::_internal_currenttime() const {
  return currenttime_.Get();
}
inline void Statistics::_internal_set_currenttime(const std::string& value) {

  currenttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_currenttime(std::string&& value) {

  currenttime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.currentTime)
}
inline void Statistics::set_currenttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  currenttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Statistics.currentTime)
}
inline void Statistics::set_currenttime(const char* value,
    size_t size) {

  currenttime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.currentTime)
}
inline std::string* Statistics::_internal_mutable_currenttime() {

  return currenttime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_currenttime() {
  // @@protoc_insertion_point(field_release:vega.Statistics.currentTime)
  return currenttime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_currenttime(std::string* currenttime) {
  if (currenttime != nullptr) {

  } else {

  }
  currenttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currenttime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.currentTime)
}

// string vegaTime = 6 [json_name = "vegaTime"];
inline void Statistics::clear_vegatime() {
  vegatime_.ClearToEmpty();
}
inline const std::string& Statistics::vegatime() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.vegaTime)
  return _internal_vegatime();
}
inline void Statistics::set_vegatime(const std::string& value) {
  _internal_set_vegatime(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.vegaTime)
}
inline std::string* Statistics::mutable_vegatime() {
  // @@protoc_insertion_point(field_mutable:vega.Statistics.vegaTime)
  return _internal_mutable_vegatime();
}
inline const std::string& Statistics::_internal_vegatime() const {
  return vegatime_.Get();
}
inline void Statistics::_internal_set_vegatime(const std::string& value) {

  vegatime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_vegatime(std::string&& value) {

  vegatime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.vegaTime)
}
inline void Statistics::set_vegatime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  vegatime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Statistics.vegaTime)
}
inline void Statistics::set_vegatime(const char* value,
    size_t size) {

  vegatime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.vegaTime)
}
inline std::string* Statistics::_internal_mutable_vegatime() {

  return vegatime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_vegatime() {
  // @@protoc_insertion_point(field_release:vega.Statistics.vegaTime)
  return vegatime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_vegatime(std::string* vegatime) {
  if (vegatime != nullptr) {

  } else {

  }
  vegatime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vegatime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.vegaTime)
}

// .vega.ChainStatus status = 7 [json_name = "status"];
inline void Statistics::clear_status() {
  status_ = 0;
}
inline ::vega::ChainStatus Statistics::_internal_status() const {
  return static_cast< ::vega::ChainStatus >(status_);
}
inline ::vega::ChainStatus Statistics::status() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.status)
  return _internal_status();
}
inline void Statistics::_internal_set_status(::vega::ChainStatus value) {

  status_ = value;
}
inline void Statistics::set_status(::vega::ChainStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.status)
}

// uint64 txPerBlock = 8 [json_name = "txPerBlock"];
inline void Statistics::clear_txperblock() {
  txperblock_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_txperblock() const {
  return txperblock_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::txperblock() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.txPerBlock)
  return _internal_txperblock();
}
inline void Statistics::_internal_set_txperblock(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  txperblock_ = value;
}
inline void Statistics::set_txperblock(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txperblock(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.txPerBlock)
}

// uint64 averageTxBytes = 9 [json_name = "averageTxBytes"];
inline void Statistics::clear_averagetxbytes() {
  averagetxbytes_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_averagetxbytes() const {
  return averagetxbytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::averagetxbytes() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.averageTxBytes)
  return _internal_averagetxbytes();
}
inline void Statistics::_internal_set_averagetxbytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  averagetxbytes_ = value;
}
inline void Statistics::set_averagetxbytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_averagetxbytes(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.averageTxBytes)
}

// uint64 averageOrdersPerBlock = 10 [json_name = "averageOrdersPerBlock"];
inline void Statistics::clear_averageordersperblock() {
  averageordersperblock_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_averageordersperblock() const {
  return averageordersperblock_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::averageordersperblock() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.averageOrdersPerBlock)
  return _internal_averageordersperblock();
}
inline void Statistics::_internal_set_averageordersperblock(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  averageordersperblock_ = value;
}
inline void Statistics::set_averageordersperblock(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_averageordersperblock(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.averageOrdersPerBlock)
}

// uint64 tradesPerSecond = 11 [json_name = "tradesPerSecond"];
inline void Statistics::clear_tradespersecond() {
  tradespersecond_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_tradespersecond() const {
  return tradespersecond_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::tradespersecond() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.tradesPerSecond)
  return _internal_tradespersecond();
}
inline void Statistics::_internal_set_tradespersecond(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  tradespersecond_ = value;
}
inline void Statistics::set_tradespersecond(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tradespersecond(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.tradesPerSecond)
}

// uint64 ordersPerSecond = 12 [json_name = "ordersPerSecond"];
inline void Statistics::clear_orderspersecond() {
  orderspersecond_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_orderspersecond() const {
  return orderspersecond_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::orderspersecond() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.ordersPerSecond)
  return _internal_orderspersecond();
}
inline void Statistics::_internal_set_orderspersecond(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  orderspersecond_ = value;
}
inline void Statistics::set_orderspersecond(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_orderspersecond(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.ordersPerSecond)
}

// uint64 totalMarkets = 13 [json_name = "totalMarkets"];
inline void Statistics::clear_totalmarkets() {
  totalmarkets_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_totalmarkets() const {
  return totalmarkets_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::totalmarkets() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.totalMarkets)
  return _internal_totalmarkets();
}
inline void Statistics::_internal_set_totalmarkets(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  totalmarkets_ = value;
}
inline void Statistics::set_totalmarkets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_totalmarkets(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.totalMarkets)
}

// uint64 totalAmendOrder = 16 [json_name = "totalAmendOrder"];
inline void Statistics::clear_totalamendorder() {
  totalamendorder_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_totalamendorder() const {
  return totalamendorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::totalamendorder() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.totalAmendOrder)
  return _internal_totalamendorder();
}
inline void Statistics::_internal_set_totalamendorder(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  totalamendorder_ = value;
}
inline void Statistics::set_totalamendorder(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_totalamendorder(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.totalAmendOrder)
}

// uint64 totalCancelOrder = 17 [json_name = "totalCancelOrder"];
inline void Statistics::clear_totalcancelorder() {
  totalcancelorder_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_totalcancelorder() const {
  return totalcancelorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::totalcancelorder() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.totalCancelOrder)
  return _internal_totalcancelorder();
}
inline void Statistics::_internal_set_totalcancelorder(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  totalcancelorder_ = value;
}
inline void Statistics::set_totalcancelorder(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_totalcancelorder(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.totalCancelOrder)
}

// uint64 totalCreateOrder = 18 [json_name = "totalCreateOrder"];
inline void Statistics::clear_totalcreateorder() {
  totalcreateorder_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_totalcreateorder() const {
  return totalcreateorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::totalcreateorder() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.totalCreateOrder)
  return _internal_totalcreateorder();
}
inline void Statistics::_internal_set_totalcreateorder(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  totalcreateorder_ = value;
}
inline void Statistics::set_totalcreateorder(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_totalcreateorder(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.totalCreateOrder)
}

// uint64 totalOrders = 19 [json_name = "totalOrders"];
inline void Statistics::clear_totalorders() {
  totalorders_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_totalorders() const {
  return totalorders_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::totalorders() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.totalOrders)
  return _internal_totalorders();
}
inline void Statistics::_internal_set_totalorders(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  totalorders_ = value;
}
inline void Statistics::set_totalorders(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_totalorders(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.totalOrders)
}

// uint64 totalTrades = 20 [json_name = "totalTrades"];
inline void Statistics::clear_totaltrades() {
  totaltrades_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_totaltrades() const {
  return totaltrades_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::totaltrades() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.totalTrades)
  return _internal_totaltrades();
}
inline void Statistics::_internal_set_totaltrades(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  totaltrades_ = value;
}
inline void Statistics::set_totaltrades(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_totaltrades(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.totalTrades)
}

// uint32 orderSubscriptions = 21 [json_name = "orderSubscriptions"];
inline void Statistics::clear_ordersubscriptions() {
  ordersubscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_ordersubscriptions() const {
  return ordersubscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::ordersubscriptions() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.orderSubscriptions)
  return _internal_ordersubscriptions();
}
inline void Statistics::_internal_set_ordersubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  ordersubscriptions_ = value;
}
inline void Statistics::set_ordersubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ordersubscriptions(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.orderSubscriptions)
}

// uint32 tradeSubscriptions = 22 [json_name = "tradeSubscriptions"];
inline void Statistics::clear_tradesubscriptions() {
  tradesubscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_tradesubscriptions() const {
  return tradesubscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::tradesubscriptions() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.tradeSubscriptions)
  return _internal_tradesubscriptions();
}
inline void Statistics::_internal_set_tradesubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  tradesubscriptions_ = value;
}
inline void Statistics::set_tradesubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tradesubscriptions(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.tradeSubscriptions)
}

// uint32 candleSubscriptions = 23 [json_name = "candleSubscriptions"];
inline void Statistics::clear_candlesubscriptions() {
  candlesubscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_candlesubscriptions() const {
  return candlesubscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::candlesubscriptions() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.candleSubscriptions)
  return _internal_candlesubscriptions();
}
inline void Statistics::_internal_set_candlesubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  candlesubscriptions_ = value;
}
inline void Statistics::set_candlesubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_candlesubscriptions(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.candleSubscriptions)
}

// uint32 marketDepthSubscriptions = 24 [json_name = "marketDepthSubscriptions"];
inline void Statistics::clear_marketdepthsubscriptions() {
  marketdepthsubscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_marketdepthsubscriptions() const {
  return marketdepthsubscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::marketdepthsubscriptions() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.marketDepthSubscriptions)
  return _internal_marketdepthsubscriptions();
}
inline void Statistics::_internal_set_marketdepthsubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  marketdepthsubscriptions_ = value;
}
inline void Statistics::set_marketdepthsubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_marketdepthsubscriptions(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.marketDepthSubscriptions)
}

// uint32 positionsSubscriptions = 25 [json_name = "positionsSubscriptions"];
inline void Statistics::clear_positionssubscriptions() {
  positionssubscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_positionssubscriptions() const {
  return positionssubscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::positionssubscriptions() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.positionsSubscriptions)
  return _internal_positionssubscriptions();
}
inline void Statistics::_internal_set_positionssubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  positionssubscriptions_ = value;
}
inline void Statistics::set_positionssubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_positionssubscriptions(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.positionsSubscriptions)
}

// uint32 accountSubscriptions = 26 [json_name = "accountSubscriptions"];
inline void Statistics::clear_accountsubscriptions() {
  accountsubscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_accountsubscriptions() const {
  return accountsubscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::accountsubscriptions() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.accountSubscriptions)
  return _internal_accountsubscriptions();
}
inline void Statistics::_internal_set_accountsubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  accountsubscriptions_ = value;
}
inline void Statistics::set_accountsubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountsubscriptions(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.accountSubscriptions)
}

// uint32 marketDataSubscriptions = 27 [json_name = "marketDataSubscriptions"];
inline void Statistics::clear_marketdatasubscriptions() {
  marketdatasubscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_marketdatasubscriptions() const {
  return marketdatasubscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::marketdatasubscriptions() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.marketDataSubscriptions)
  return _internal_marketdatasubscriptions();
}
inline void Statistics::_internal_set_marketdatasubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  marketdatasubscriptions_ = value;
}
inline void Statistics::set_marketdatasubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_marketdatasubscriptions(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.marketDataSubscriptions)
}

// string appVersionHash = 28 [json_name = "appVersionHash"];
inline void Statistics::clear_appversionhash() {
  appversionhash_.ClearToEmpty();
}
inline const std::string& Statistics::appversionhash() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.appVersionHash)
  return _internal_appversionhash();
}
inline void Statistics::set_appversionhash(const std::string& value) {
  _internal_set_appversionhash(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.appVersionHash)
}
inline std::string* Statistics::mutable_appversionhash() {
  // @@protoc_insertion_point(field_mutable:vega.Statistics.appVersionHash)
  return _internal_mutable_appversionhash();
}
inline const std::string& Statistics::_internal_appversionhash() const {
  return appversionhash_.Get();
}
inline void Statistics::_internal_set_appversionhash(const std::string& value) {

  appversionhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_appversionhash(std::string&& value) {

  appversionhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.appVersionHash)
}
inline void Statistics::set_appversionhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  appversionhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Statistics.appVersionHash)
}
inline void Statistics::set_appversionhash(const char* value,
    size_t size) {

  appversionhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.appVersionHash)
}
inline std::string* Statistics::_internal_mutable_appversionhash() {

  return appversionhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_appversionhash() {
  // @@protoc_insertion_point(field_release:vega.Statistics.appVersionHash)
  return appversionhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_appversionhash(std::string* appversionhash) {
  if (appversionhash != nullptr) {

  } else {

  }
  appversionhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appversionhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.appVersionHash)
}

// string appVersion = 29 [json_name = "appVersion"];
inline void Statistics::clear_appversion() {
  appversion_.ClearToEmpty();
}
inline const std::string& Statistics::appversion() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.appVersion)
  return _internal_appversion();
}
inline void Statistics::set_appversion(const std::string& value) {
  _internal_set_appversion(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.appVersion)
}
inline std::string* Statistics::mutable_appversion() {
  // @@protoc_insertion_point(field_mutable:vega.Statistics.appVersion)
  return _internal_mutable_appversion();
}
inline const std::string& Statistics::_internal_appversion() const {
  return appversion_.Get();
}
inline void Statistics::_internal_set_appversion(const std::string& value) {

  appversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_appversion(std::string&& value) {

  appversion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.appVersion)
}
inline void Statistics::set_appversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  appversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Statistics.appVersion)
}
inline void Statistics::set_appversion(const char* value,
    size_t size) {

  appversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.appVersion)
}
inline std::string* Statistics::_internal_mutable_appversion() {

  return appversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_appversion() {
  // @@protoc_insertion_point(field_release:vega.Statistics.appVersion)
  return appversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_appversion(std::string* appversion) {
  if (appversion != nullptr) {

  } else {

  }
  appversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.appVersion)
}

// string chainVersion = 30 [json_name = "chainVersion"];
inline void Statistics::clear_chainversion() {
  chainversion_.ClearToEmpty();
}
inline const std::string& Statistics::chainversion() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.chainVersion)
  return _internal_chainversion();
}
inline void Statistics::set_chainversion(const std::string& value) {
  _internal_set_chainversion(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.chainVersion)
}
inline std::string* Statistics::mutable_chainversion() {
  // @@protoc_insertion_point(field_mutable:vega.Statistics.chainVersion)
  return _internal_mutable_chainversion();
}
inline const std::string& Statistics::_internal_chainversion() const {
  return chainversion_.Get();
}
inline void Statistics::_internal_set_chainversion(const std::string& value) {

  chainversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_chainversion(std::string&& value) {

  chainversion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.chainVersion)
}
inline void Statistics::set_chainversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  chainversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Statistics.chainVersion)
}
inline void Statistics::set_chainversion(const char* value,
    size_t size) {

  chainversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.chainVersion)
}
inline std::string* Statistics::_internal_mutable_chainversion() {

  return chainversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_chainversion() {
  // @@protoc_insertion_point(field_release:vega.Statistics.chainVersion)
  return chainversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_chainversion(std::string* chainversion) {
  if (chainversion != nullptr) {

  } else {

  }
  chainversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chainversion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.chainVersion)
}

// uint64 blockDuration = 31 [json_name = "blockDuration"];
inline void Statistics::clear_blockduration() {
  blockduration_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::_internal_blockduration() const {
  return blockduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Statistics::blockduration() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.blockDuration)
  return _internal_blockduration();
}
inline void Statistics::_internal_set_blockduration(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  blockduration_ = value;
}
inline void Statistics::set_blockduration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blockduration(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.blockDuration)
}

// string uptime = 32 [json_name = "uptime"];
inline void Statistics::clear_uptime() {
  uptime_.ClearToEmpty();
}
inline const std::string& Statistics::uptime() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.uptime)
  return _internal_uptime();
}
inline void Statistics::set_uptime(const std::string& value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.uptime)
}
inline std::string* Statistics::mutable_uptime() {
  // @@protoc_insertion_point(field_mutable:vega.Statistics.uptime)
  return _internal_mutable_uptime();
}
inline const std::string& Statistics::_internal_uptime() const {
  return uptime_.Get();
}
inline void Statistics::_internal_set_uptime(const std::string& value) {

  uptime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_uptime(std::string&& value) {

  uptime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.uptime)
}
inline void Statistics::set_uptime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  uptime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Statistics.uptime)
}
inline void Statistics::set_uptime(const char* value,
    size_t size) {

  uptime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.uptime)
}
inline std::string* Statistics::_internal_mutable_uptime() {

  return uptime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_uptime() {
  // @@protoc_insertion_point(field_release:vega.Statistics.uptime)
  return uptime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_uptime(std::string* uptime) {
  if (uptime != nullptr) {

  } else {

  }
  uptime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uptime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.uptime)
}

// string chainID = 33 [json_name = "chainID"];
inline void Statistics::clear_chainid() {
  chainid_.ClearToEmpty();
}
inline const std::string& Statistics::chainid() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.chainID)
  return _internal_chainid();
}
inline void Statistics::set_chainid(const std::string& value) {
  _internal_set_chainid(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.chainID)
}
inline std::string* Statistics::mutable_chainid() {
  // @@protoc_insertion_point(field_mutable:vega.Statistics.chainID)
  return _internal_mutable_chainid();
}
inline const std::string& Statistics::_internal_chainid() const {
  return chainid_.Get();
}
inline void Statistics::_internal_set_chainid(const std::string& value) {

  chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Statistics::set_chainid(std::string&& value) {

  chainid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Statistics.chainID)
}
inline void Statistics::set_chainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Statistics.chainID)
}
inline void Statistics::set_chainid(const char* value,
    size_t size) {

  chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Statistics.chainID)
}
inline std::string* Statistics::_internal_mutable_chainid() {

  return chainid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Statistics::release_chainid() {
  // @@protoc_insertion_point(field_release:vega.Statistics.chainID)
  return chainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Statistics::set_allocated_chainid(std::string* chainid) {
  if (chainid != nullptr) {

  } else {

  }
  chainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Statistics.chainID)
}

// uint32 marketDepthUpdatesSubscriptions = 34 [json_name = "marketDepthUpdatesSubscriptions"];
inline void Statistics::clear_marketdepthupdatessubscriptions() {
  marketdepthupdatessubscriptions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_marketdepthupdatessubscriptions() const {
  return marketdepthupdatessubscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::marketdepthupdatessubscriptions() const {
  // @@protoc_insertion_point(field_get:vega.Statistics.marketDepthUpdatesSubscriptions)
  return _internal_marketdepthupdatessubscriptions();
}
inline void Statistics::_internal_set_marketdepthupdatessubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  marketdepthupdatessubscriptions_ = value;
}
inline void Statistics::set_marketdepthupdatessubscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_marketdepthupdatessubscriptions(value);
  // @@protoc_insertion_point(field_set:vega.Statistics.marketDepthUpdatesSubscriptions)
}

// -------------------------------------------------------------------

// Deposit

// string id = 1 [json_name = "id"];
inline void Deposit::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Deposit::id() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.id)
  return _internal_id();
}
inline void Deposit::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.id)
}
inline std::string* Deposit::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.Deposit.id)
  return _internal_mutable_id();
}
inline const std::string& Deposit::_internal_id() const {
  return id_.Get();
}
inline void Deposit::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Deposit::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Deposit.id)
}
inline void Deposit::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Deposit.id)
}
inline void Deposit::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Deposit.id)
}
inline std::string* Deposit::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Deposit::release_id() {
  // @@protoc_insertion_point(field_release:vega.Deposit.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deposit::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Deposit.id)
}

// .vega.Deposit.Status status = 2 [json_name = "status"];
inline void Deposit::clear_status() {
  status_ = 0;
}
inline ::vega::Deposit_Status Deposit::_internal_status() const {
  return static_cast< ::vega::Deposit_Status >(status_);
}
inline ::vega::Deposit_Status Deposit::status() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.status)
  return _internal_status();
}
inline void Deposit::_internal_set_status(::vega::Deposit_Status value) {

  status_ = value;
}
inline void Deposit::set_status(::vega::Deposit_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.status)
}

// string partyID = 3 [json_name = "partyID"];
inline void Deposit::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& Deposit::partyid() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.partyID)
  return _internal_partyid();
}
inline void Deposit::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.partyID)
}
inline std::string* Deposit::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:vega.Deposit.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& Deposit::_internal_partyid() const {
  return partyid_.Get();
}
inline void Deposit::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Deposit::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Deposit.partyID)
}
inline void Deposit::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Deposit.partyID)
}
inline void Deposit::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Deposit.partyID)
}
inline std::string* Deposit::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Deposit::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.Deposit.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deposit::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Deposit.partyID)
}

// string asset = 4 [json_name = "asset"];
inline void Deposit::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& Deposit::asset() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.asset)
  return _internal_asset();
}
inline void Deposit::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.asset)
}
inline std::string* Deposit::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.Deposit.asset)
  return _internal_mutable_asset();
}
inline const std::string& Deposit::_internal_asset() const {
  return asset_.Get();
}
inline void Deposit::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Deposit::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Deposit.asset)
}
inline void Deposit::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Deposit.asset)
}
inline void Deposit::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Deposit.asset)
}
inline std::string* Deposit::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Deposit::release_asset() {
  // @@protoc_insertion_point(field_release:vega.Deposit.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deposit::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Deposit.asset)
}

// string amount = 5 [json_name = "amount"];
inline void Deposit::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Deposit::amount() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.amount)
  return _internal_amount();
}
inline void Deposit::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.amount)
}
inline std::string* Deposit::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:vega.Deposit.amount)
  return _internal_mutable_amount();
}
inline const std::string& Deposit::_internal_amount() const {
  return amount_.Get();
}
inline void Deposit::_internal_set_amount(const std::string& value) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Deposit::set_amount(std::string&& value) {

  amount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Deposit.amount)
}
inline void Deposit::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Deposit.amount)
}
inline void Deposit::set_amount(const char* value,
    size_t size) {

  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Deposit.amount)
}
inline std::string* Deposit::_internal_mutable_amount() {

  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Deposit::release_amount() {
  // @@protoc_insertion_point(field_release:vega.Deposit.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deposit::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {

  } else {

  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Deposit.amount)
}

// string txHash = 6 [json_name = "txHash"];
inline void Deposit::clear_txhash() {
  txhash_.ClearToEmpty();
}
inline const std::string& Deposit::txhash() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.txHash)
  return _internal_txhash();
}
inline void Deposit::set_txhash(const std::string& value) {
  _internal_set_txhash(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.txHash)
}
inline std::string* Deposit::mutable_txhash() {
  // @@protoc_insertion_point(field_mutable:vega.Deposit.txHash)
  return _internal_mutable_txhash();
}
inline const std::string& Deposit::_internal_txhash() const {
  return txhash_.Get();
}
inline void Deposit::_internal_set_txhash(const std::string& value) {

  txhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Deposit::set_txhash(std::string&& value) {

  txhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Deposit.txHash)
}
inline void Deposit::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  txhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Deposit.txHash)
}
inline void Deposit::set_txhash(const char* value,
    size_t size) {

  txhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Deposit.txHash)
}
inline std::string* Deposit::_internal_mutable_txhash() {

  return txhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Deposit::release_txhash() {
  // @@protoc_insertion_point(field_release:vega.Deposit.txHash)
  return txhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deposit::set_allocated_txhash(std::string* txhash) {
  if (txhash != nullptr) {

  } else {

  }
  txhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Deposit.txHash)
}

// int64 creditedTimestamp = 7 [json_name = "creditedTimestamp"];
inline void Deposit::clear_creditedtimestamp() {
  creditedtimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Deposit::_internal_creditedtimestamp() const {
  return creditedtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Deposit::creditedtimestamp() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.creditedTimestamp)
  return _internal_creditedtimestamp();
}
inline void Deposit::_internal_set_creditedtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  creditedtimestamp_ = value;
}
inline void Deposit::set_creditedtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_creditedtimestamp(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.creditedTimestamp)
}

// int64 createdTimestamp = 8 [json_name = "createdTimestamp"];
inline void Deposit::clear_createdtimestamp() {
  createdtimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Deposit::_internal_createdtimestamp() const {
  return createdtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Deposit::createdtimestamp() const {
  // @@protoc_insertion_point(field_get:vega.Deposit.createdTimestamp)
  return _internal_createdtimestamp();
}
inline void Deposit::_internal_set_createdtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  createdtimestamp_ = value;
}
inline void Deposit::set_createdtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createdtimestamp(value);
  // @@protoc_insertion_point(field_set:vega.Deposit.createdTimestamp)
}

// -------------------------------------------------------------------

// Withdrawal

// string id = 1 [json_name = "id"];
inline void Withdrawal::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Withdrawal::id() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.id)
  return _internal_id();
}
inline void Withdrawal::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.id)
}
inline std::string* Withdrawal::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.id)
  return _internal_mutable_id();
}
inline const std::string& Withdrawal::_internal_id() const {
  return id_.Get();
}
inline void Withdrawal::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Withdrawal::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Withdrawal.id)
}
inline void Withdrawal::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Withdrawal.id)
}
inline void Withdrawal::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Withdrawal.id)
}
inline std::string* Withdrawal::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Withdrawal::release_id() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Withdrawal::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.id)
}

// string partyID = 2 [json_name = "partyID"];
inline void Withdrawal::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& Withdrawal::partyid() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.partyID)
  return _internal_partyid();
}
inline void Withdrawal::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.partyID)
}
inline std::string* Withdrawal::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& Withdrawal::_internal_partyid() const {
  return partyid_.Get();
}
inline void Withdrawal::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Withdrawal::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Withdrawal.partyID)
}
inline void Withdrawal::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Withdrawal.partyID)
}
inline void Withdrawal::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Withdrawal.partyID)
}
inline std::string* Withdrawal::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Withdrawal::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Withdrawal::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.partyID)
}

// uint64 amount = 3 [json_name = "amount"];
inline void Withdrawal::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Withdrawal::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Withdrawal::amount() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.amount)
  return _internal_amount();
}
inline void Withdrawal::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  amount_ = value;
}
inline void Withdrawal::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.amount)
}

// string asset = 4 [json_name = "asset"];
inline void Withdrawal::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& Withdrawal::asset() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.asset)
  return _internal_asset();
}
inline void Withdrawal::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.asset)
}
inline std::string* Withdrawal::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.asset)
  return _internal_mutable_asset();
}
inline const std::string& Withdrawal::_internal_asset() const {
  return asset_.Get();
}
inline void Withdrawal::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Withdrawal::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Withdrawal.asset)
}
inline void Withdrawal::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Withdrawal.asset)
}
inline void Withdrawal::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Withdrawal.asset)
}
inline std::string* Withdrawal::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Withdrawal::release_asset() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Withdrawal::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.asset)
}

// .vega.Withdrawal.Status status = 5 [json_name = "status"];
inline void Withdrawal::clear_status() {
  status_ = 0;
}
inline ::vega::Withdrawal_Status Withdrawal::_internal_status() const {
  return static_cast< ::vega::Withdrawal_Status >(status_);
}
inline ::vega::Withdrawal_Status Withdrawal::status() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.status)
  return _internal_status();
}
inline void Withdrawal::_internal_set_status(::vega::Withdrawal_Status value) {

  status_ = value;
}
inline void Withdrawal::set_status(::vega::Withdrawal_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.status)
}

// string ref = 6 [json_name = "ref"];
inline void Withdrawal::clear_ref() {
  ref_.ClearToEmpty();
}
inline const std::string& Withdrawal::ref() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.ref)
  return _internal_ref();
}
inline void Withdrawal::set_ref(const std::string& value) {
  _internal_set_ref(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.ref)
}
inline std::string* Withdrawal::mutable_ref() {
  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.ref)
  return _internal_mutable_ref();
}
inline const std::string& Withdrawal::_internal_ref() const {
  return ref_.Get();
}
inline void Withdrawal::_internal_set_ref(const std::string& value) {

  ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Withdrawal::set_ref(std::string&& value) {

  ref_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Withdrawal.ref)
}
inline void Withdrawal::set_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Withdrawal.ref)
}
inline void Withdrawal::set_ref(const char* value,
    size_t size) {

  ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Withdrawal.ref)
}
inline std::string* Withdrawal::_internal_mutable_ref() {

  return ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Withdrawal::release_ref() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.ref)
  return ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Withdrawal::set_allocated_ref(std::string* ref) {
  if (ref != nullptr) {

  } else {

  }
  ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.ref)
}

// int64 expiry = 7 [json_name = "expiry"];
inline void Withdrawal::clear_expiry() {
  expiry_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Withdrawal::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Withdrawal::expiry() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.expiry)
  return _internal_expiry();
}
inline void Withdrawal::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {

  expiry_ = value;
}
inline void Withdrawal::set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.expiry)
}

// string txHash = 8 [json_name = "txHash"];
inline void Withdrawal::clear_txhash() {
  txhash_.ClearToEmpty();
}
inline const std::string& Withdrawal::txhash() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.txHash)
  return _internal_txhash();
}
inline void Withdrawal::set_txhash(const std::string& value) {
  _internal_set_txhash(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.txHash)
}
inline std::string* Withdrawal::mutable_txhash() {
  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.txHash)
  return _internal_mutable_txhash();
}
inline const std::string& Withdrawal::_internal_txhash() const {
  return txhash_.Get();
}
inline void Withdrawal::_internal_set_txhash(const std::string& value) {

  txhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Withdrawal::set_txhash(std::string&& value) {

  txhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Withdrawal.txHash)
}
inline void Withdrawal::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  txhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Withdrawal.txHash)
}
inline void Withdrawal::set_txhash(const char* value,
    size_t size) {

  txhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Withdrawal.txHash)
}
inline std::string* Withdrawal::_internal_mutable_txhash() {

  return txhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Withdrawal::release_txhash() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.txHash)
  return txhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Withdrawal::set_allocated_txhash(std::string* txhash) {
  if (txhash != nullptr) {

  } else {

  }
  txhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.txHash)
}

// int64 createdTimestamp = 9 [json_name = "createdTimestamp"];
inline void Withdrawal::clear_createdtimestamp() {
  createdtimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Withdrawal::_internal_createdtimestamp() const {
  return createdtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Withdrawal::createdtimestamp() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.createdTimestamp)
  return _internal_createdtimestamp();
}
inline void Withdrawal::_internal_set_createdtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  createdtimestamp_ = value;
}
inline void Withdrawal::set_createdtimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createdtimestamp(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.createdTimestamp)
}

// int64 withdrawnTimestamp = 10 [json_name = "withdrawnTimestamp"];
inline void Withdrawal::clear_withdrawntimestamp() {
  withdrawntimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Withdrawal::_internal_withdrawntimestamp() const {
  return withdrawntimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Withdrawal::withdrawntimestamp() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.withdrawnTimestamp)
  return _internal_withdrawntimestamp();
}
inline void Withdrawal::_internal_set_withdrawntimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  withdrawntimestamp_ = value;
}
inline void Withdrawal::set_withdrawntimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_withdrawntimestamp(value);
  // @@protoc_insertion_point(field_set:vega.Withdrawal.withdrawnTimestamp)
}

// .vega.WithdrawExt ext = 11 [json_name = "ext"];
inline bool Withdrawal::_internal_has_ext() const {
  return this != internal_default_instance() && ext_ != nullptr;
}
inline bool Withdrawal::has_ext() const {
  return _internal_has_ext();
}
inline void Withdrawal::clear_ext() {
  if (GetArena() == nullptr && ext_ != nullptr) {
    delete ext_;
  }
  ext_ = nullptr;
}
inline const ::vega::WithdrawExt& Withdrawal::_internal_ext() const {
  const ::vega::WithdrawExt* p = ext_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::WithdrawExt&>(
      ::vega::_WithdrawExt_default_instance_);
}
inline const ::vega::WithdrawExt& Withdrawal::ext() const {
  // @@protoc_insertion_point(field_get:vega.Withdrawal.ext)
  return _internal_ext();
}
inline void Withdrawal::unsafe_arena_set_allocated_ext(
    ::vega::WithdrawExt* ext) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_);
  }
  ext_ = ext;
  if (ext) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Withdrawal.ext)
}
inline ::vega::WithdrawExt* Withdrawal::release_ext() {

  ::vega::WithdrawExt* temp = ext_;
  ext_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::WithdrawExt* Withdrawal::unsafe_arena_release_ext() {
  // @@protoc_insertion_point(field_release:vega.Withdrawal.ext)

  ::vega::WithdrawExt* temp = ext_;
  ext_ = nullptr;
  return temp;
}
inline ::vega::WithdrawExt* Withdrawal::_internal_mutable_ext() {

  if (ext_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::WithdrawExt>(GetArena());
    ext_ = p;
  }
  return ext_;
}
inline ::vega::WithdrawExt* Withdrawal::mutable_ext() {
  // @@protoc_insertion_point(field_mutable:vega.Withdrawal.ext)
  return _internal_mutable_ext();
}
inline void Withdrawal::set_allocated_ext(::vega::WithdrawExt* ext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ext_;
  }
  if (ext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ext);
    if (message_arena != submessage_arena) {
      ext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext, submessage_arena);
    }

  } else {

  }
  ext_ = ext;
  // @@protoc_insertion_point(field_set_allocated:vega.Withdrawal.ext)
}

// -------------------------------------------------------------------

// WithdrawSubmission

// string partyID = 1 [json_name = "partyID"];
inline void WithdrawSubmission::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& WithdrawSubmission::partyid() const {
  // @@protoc_insertion_point(field_get:vega.WithdrawSubmission.partyID)
  return _internal_partyid();
}
inline void WithdrawSubmission::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:vega.WithdrawSubmission.partyID)
}
inline std::string* WithdrawSubmission::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:vega.WithdrawSubmission.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& WithdrawSubmission::_internal_partyid() const {
  return partyid_.Get();
}
inline void WithdrawSubmission::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WithdrawSubmission::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.WithdrawSubmission.partyID)
}
inline void WithdrawSubmission::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.WithdrawSubmission.partyID)
}
inline void WithdrawSubmission::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.WithdrawSubmission.partyID)
}
inline std::string* WithdrawSubmission::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WithdrawSubmission::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.WithdrawSubmission.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WithdrawSubmission::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.WithdrawSubmission.partyID)
}

// uint64 amount = 2 [json_name = "amount"];
inline void WithdrawSubmission::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WithdrawSubmission::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WithdrawSubmission::amount() const {
  // @@protoc_insertion_point(field_get:vega.WithdrawSubmission.amount)
  return _internal_amount();
}
inline void WithdrawSubmission::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  amount_ = value;
}
inline void WithdrawSubmission::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.WithdrawSubmission.amount)
}

// string asset = 3 [json_name = "asset"];
inline void WithdrawSubmission::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& WithdrawSubmission::asset() const {
  // @@protoc_insertion_point(field_get:vega.WithdrawSubmission.asset)
  return _internal_asset();
}
inline void WithdrawSubmission::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.WithdrawSubmission.asset)
}
inline std::string* WithdrawSubmission::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.WithdrawSubmission.asset)
  return _internal_mutable_asset();
}
inline const std::string& WithdrawSubmission::_internal_asset() const {
  return asset_.Get();
}
inline void WithdrawSubmission::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WithdrawSubmission::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.WithdrawSubmission.asset)
}
inline void WithdrawSubmission::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.WithdrawSubmission.asset)
}
inline void WithdrawSubmission::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.WithdrawSubmission.asset)
}
inline std::string* WithdrawSubmission::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WithdrawSubmission::release_asset() {
  // @@protoc_insertion_point(field_release:vega.WithdrawSubmission.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WithdrawSubmission::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.WithdrawSubmission.asset)
}

// .vega.WithdrawExt ext = 4 [json_name = "ext"];
inline bool WithdrawSubmission::_internal_has_ext() const {
  return this != internal_default_instance() && ext_ != nullptr;
}
inline bool WithdrawSubmission::has_ext() const {
  return _internal_has_ext();
}
inline void WithdrawSubmission::clear_ext() {
  if (GetArena() == nullptr && ext_ != nullptr) {
    delete ext_;
  }
  ext_ = nullptr;
}
inline const ::vega::WithdrawExt& WithdrawSubmission::_internal_ext() const {
  const ::vega::WithdrawExt* p = ext_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::WithdrawExt&>(
      ::vega::_WithdrawExt_default_instance_);
}
inline const ::vega::WithdrawExt& WithdrawSubmission::ext() const {
  // @@protoc_insertion_point(field_get:vega.WithdrawSubmission.ext)
  return _internal_ext();
}
inline void WithdrawSubmission::unsafe_arena_set_allocated_ext(
    ::vega::WithdrawExt* ext) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_);
  }
  ext_ = ext;
  if (ext) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.WithdrawSubmission.ext)
}
inline ::vega::WithdrawExt* WithdrawSubmission::release_ext() {

  ::vega::WithdrawExt* temp = ext_;
  ext_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::WithdrawExt* WithdrawSubmission::unsafe_arena_release_ext() {
  // @@protoc_insertion_point(field_release:vega.WithdrawSubmission.ext)

  ::vega::WithdrawExt* temp = ext_;
  ext_ = nullptr;
  return temp;
}
inline ::vega::WithdrawExt* WithdrawSubmission::_internal_mutable_ext() {

  if (ext_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::WithdrawExt>(GetArena());
    ext_ = p;
  }
  return ext_;
}
inline ::vega::WithdrawExt* WithdrawSubmission::mutable_ext() {
  // @@protoc_insertion_point(field_mutable:vega.WithdrawSubmission.ext)
  return _internal_mutable_ext();
}
inline void WithdrawSubmission::set_allocated_ext(::vega::WithdrawExt* ext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ext_;
  }
  if (ext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ext);
    if (message_arena != submessage_arena) {
      ext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext, submessage_arena);
    }

  } else {

  }
  ext_ = ext;
  // @@protoc_insertion_point(field_set_allocated:vega.WithdrawSubmission.ext)
}

// -------------------------------------------------------------------

// WithdrawExt

// .vega.Erc20WithdrawExt erc20 = 1 [json_name = "erc20"];
inline bool WithdrawExt::_internal_has_erc20() const {
  return ext_case() == kErc20;
}
inline bool WithdrawExt::has_erc20() const {
  return _internal_has_erc20();
}
inline void WithdrawExt::set_has_erc20() {
  _oneof_case_[0] = kErc20;
}
inline void WithdrawExt::clear_erc20() {
  if (_internal_has_erc20()) {
    if (GetArena() == nullptr) {
      delete ext_.erc20_;
    }
    clear_has_ext();
  }
}
inline ::vega::Erc20WithdrawExt* WithdrawExt::release_erc20() {
  // @@protoc_insertion_point(field_release:vega.WithdrawExt.erc20)
  if (_internal_has_erc20()) {
    clear_has_ext();
      ::vega::Erc20WithdrawExt* temp = ext_.erc20_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ext_.erc20_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Erc20WithdrawExt& WithdrawExt::_internal_erc20() const {
  return _internal_has_erc20()
      ? *ext_.erc20_
      : reinterpret_cast< ::vega::Erc20WithdrawExt&>(::vega::_Erc20WithdrawExt_default_instance_);
}
inline const ::vega::Erc20WithdrawExt& WithdrawExt::erc20() const {
  // @@protoc_insertion_point(field_get:vega.WithdrawExt.erc20)
  return _internal_erc20();
}
inline ::vega::Erc20WithdrawExt* WithdrawExt::unsafe_arena_release_erc20() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.WithdrawExt.erc20)
  if (_internal_has_erc20()) {
    clear_has_ext();
    ::vega::Erc20WithdrawExt* temp = ext_.erc20_;
    ext_.erc20_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WithdrawExt::unsafe_arena_set_allocated_erc20(::vega::Erc20WithdrawExt* erc20) {
  clear_ext();
  if (erc20) {
    set_has_erc20();
    ext_.erc20_ = erc20;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.WithdrawExt.erc20)
}
inline ::vega::Erc20WithdrawExt* WithdrawExt::_internal_mutable_erc20() {
  if (!_internal_has_erc20()) {
    clear_ext();
    set_has_erc20();
    ext_.erc20_ = CreateMaybeMessage< ::vega::Erc20WithdrawExt >(GetArena());
  }
  return ext_.erc20_;
}
inline ::vega::Erc20WithdrawExt* WithdrawExt::mutable_erc20() {
  // @@protoc_insertion_point(field_mutable:vega.WithdrawExt.erc20)
  return _internal_mutable_erc20();
}

inline bool WithdrawExt::has_ext() const {
  return ext_case() != EXT_NOT_SET;
}
inline void WithdrawExt::clear_has_ext() {
  _oneof_case_[0] = EXT_NOT_SET;
}
inline WithdrawExt::ExtCase WithdrawExt::ext_case() const {
  return WithdrawExt::ExtCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Erc20WithdrawExt

// string receiverAddress = 1 [json_name = "receiverAddress"];
inline void Erc20WithdrawExt::clear_receiveraddress() {
  receiveraddress_.ClearToEmpty();
}
inline const std::string& Erc20WithdrawExt::receiveraddress() const {
  // @@protoc_insertion_point(field_get:vega.Erc20WithdrawExt.receiverAddress)
  return _internal_receiveraddress();
}
inline void Erc20WithdrawExt::set_receiveraddress(const std::string& value) {
  _internal_set_receiveraddress(value);
  // @@protoc_insertion_point(field_set:vega.Erc20WithdrawExt.receiverAddress)
}
inline std::string* Erc20WithdrawExt::mutable_receiveraddress() {
  // @@protoc_insertion_point(field_mutable:vega.Erc20WithdrawExt.receiverAddress)
  return _internal_mutable_receiveraddress();
}
inline const std::string& Erc20WithdrawExt::_internal_receiveraddress() const {
  return receiveraddress_.Get();
}
inline void Erc20WithdrawExt::_internal_set_receiveraddress(const std::string& value) {

  receiveraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Erc20WithdrawExt::set_receiveraddress(std::string&& value) {

  receiveraddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Erc20WithdrawExt.receiverAddress)
}
inline void Erc20WithdrawExt::set_receiveraddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  receiveraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Erc20WithdrawExt.receiverAddress)
}
inline void Erc20WithdrawExt::set_receiveraddress(const char* value,
    size_t size) {

  receiveraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Erc20WithdrawExt.receiverAddress)
}
inline std::string* Erc20WithdrawExt::_internal_mutable_receiveraddress() {

  return receiveraddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Erc20WithdrawExt::release_receiveraddress() {
  // @@protoc_insertion_point(field_release:vega.Erc20WithdrawExt.receiverAddress)
  return receiveraddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Erc20WithdrawExt::set_allocated_receiveraddress(std::string* receiveraddress) {
  if (receiveraddress != nullptr) {

  } else {

  }
  receiveraddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiveraddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Erc20WithdrawExt.receiverAddress)
}

// -------------------------------------------------------------------

// OrderAmendment

// string orderID = 1 [json_name = "orderID", (.validator.field) = {
inline void OrderAmendment::clear_orderid() {
  orderid_.ClearToEmpty();
}
inline const std::string& OrderAmendment::orderid() const {
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.orderID)
  return _internal_orderid();
}
inline void OrderAmendment::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:vega.OrderAmendment.orderID)
}
inline std::string* OrderAmendment::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:vega.OrderAmendment.orderID)
  return _internal_mutable_orderid();
}
inline const std::string& OrderAmendment::_internal_orderid() const {
  return orderid_.Get();
}
inline void OrderAmendment::_internal_set_orderid(const std::string& value) {

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderAmendment::set_orderid(std::string&& value) {

  orderid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderAmendment.orderID)
}
inline void OrderAmendment::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.OrderAmendment.orderID)
}
inline void OrderAmendment::set_orderid(const char* value,
    size_t size) {

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.OrderAmendment.orderID)
}
inline std::string* OrderAmendment::_internal_mutable_orderid() {

  return orderid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderAmendment::release_orderid() {
  // @@protoc_insertion_point(field_release:vega.OrderAmendment.orderID)
  return orderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderAmendment::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {

  } else {

  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.OrderAmendment.orderID)
}

// string partyID = 2 [json_name = "partyID", (.validator.field) = {
inline void OrderAmendment::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& OrderAmendment::partyid() const {
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.partyID)
  return _internal_partyid();
}
inline void OrderAmendment::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:vega.OrderAmendment.partyID)
}
inline std::string* OrderAmendment::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:vega.OrderAmendment.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& OrderAmendment::_internal_partyid() const {
  return partyid_.Get();
}
inline void OrderAmendment::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderAmendment::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderAmendment.partyID)
}
inline void OrderAmendment::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.OrderAmendment.partyID)
}
inline void OrderAmendment::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.OrderAmendment.partyID)
}
inline std::string* OrderAmendment::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderAmendment::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.OrderAmendment.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderAmendment::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.OrderAmendment.partyID)
}

// string marketID = 3 [json_name = "marketID"];
inline void OrderAmendment::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& OrderAmendment::marketid() const {
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.marketID)
  return _internal_marketid();
}
inline void OrderAmendment::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.OrderAmendment.marketID)
}
inline std::string* OrderAmendment::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.OrderAmendment.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& OrderAmendment::_internal_marketid() const {
  return marketid_.Get();
}
inline void OrderAmendment::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderAmendment::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderAmendment.marketID)
}
inline void OrderAmendment::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.OrderAmendment.marketID)
}
inline void OrderAmendment::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.OrderAmendment.marketID)
}
inline std::string* OrderAmendment::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderAmendment::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.OrderAmendment.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderAmendment::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.OrderAmendment.marketID)
}

// .vega.Price price = 4 [json_name = "price"];
inline bool OrderAmendment::_internal_has_price() const {
  return this != internal_default_instance() && price_ != nullptr;
}
inline bool OrderAmendment::has_price() const {
  return _internal_has_price();
}
inline void OrderAmendment::clear_price() {
  if (GetArena() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
}
inline const ::vega::Price& OrderAmendment::_internal_price() const {
  const ::vega::Price* p = price_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Price&>(
      ::vega::_Price_default_instance_);
}
inline const ::vega::Price& OrderAmendment::price() const {
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.price)
  return _internal_price();
}
inline void OrderAmendment::unsafe_arena_set_allocated_price(
    ::vega::Price* price) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_);
  }
  price_ = price;
  if (price) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.OrderAmendment.price)
}
inline ::vega::Price* OrderAmendment::release_price() {

  ::vega::Price* temp = price_;
  price_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Price* OrderAmendment::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:vega.OrderAmendment.price)

  ::vega::Price* temp = price_;
  price_ = nullptr;
  return temp;
}
inline ::vega::Price* OrderAmendment::_internal_mutable_price() {

  if (price_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Price>(GetArena());
    price_ = p;
  }
  return price_;
}
inline ::vega::Price* OrderAmendment::mutable_price() {
  // @@protoc_insertion_point(field_mutable:vega.OrderAmendment.price)
  return _internal_mutable_price();
}
inline void OrderAmendment::set_allocated_price(::vega::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete price_;
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(price);
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }

  } else {

  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:vega.OrderAmendment.price)
}

// int64 sizeDelta = 5 [json_name = "sizeDelta"];
inline void OrderAmendment::clear_sizedelta() {
  sizedelta_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OrderAmendment::_internal_sizedelta() const {
  return sizedelta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OrderAmendment::sizedelta() const {
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.sizeDelta)
  return _internal_sizedelta();
}
inline void OrderAmendment::_internal_set_sizedelta(::PROTOBUF_NAMESPACE_ID::int64 value) {

  sizedelta_ = value;
}
inline void OrderAmendment::set_sizedelta(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sizedelta(value);
  // @@protoc_insertion_point(field_set:vega.OrderAmendment.sizeDelta)
}

// .vega.Timestamp expiresAt = 6 [json_name = "expiresAt"];
inline bool OrderAmendment::_internal_has_expiresat() const {
  return this != internal_default_instance() && expiresat_ != nullptr;
}
inline bool OrderAmendment::has_expiresat() const {
  return _internal_has_expiresat();
}
inline void OrderAmendment::clear_expiresat() {
  if (GetArena() == nullptr && expiresat_ != nullptr) {
    delete expiresat_;
  }
  expiresat_ = nullptr;
}
inline const ::vega::Timestamp& OrderAmendment::_internal_expiresat() const {
  const ::vega::Timestamp* p = expiresat_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Timestamp&>(
      ::vega::_Timestamp_default_instance_);
}
inline const ::vega::Timestamp& OrderAmendment::expiresat() const {
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.expiresAt)
  return _internal_expiresat();
}
inline void OrderAmendment::unsafe_arena_set_allocated_expiresat(
    ::vega::Timestamp* expiresat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiresat_);
  }
  expiresat_ = expiresat;
  if (expiresat) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.OrderAmendment.expiresAt)
}
inline ::vega::Timestamp* OrderAmendment::release_expiresat() {

  ::vega::Timestamp* temp = expiresat_;
  expiresat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Timestamp* OrderAmendment::unsafe_arena_release_expiresat() {
  // @@protoc_insertion_point(field_release:vega.OrderAmendment.expiresAt)

  ::vega::Timestamp* temp = expiresat_;
  expiresat_ = nullptr;
  return temp;
}
inline ::vega::Timestamp* OrderAmendment::_internal_mutable_expiresat() {

  if (expiresat_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Timestamp>(GetArena());
    expiresat_ = p;
  }
  return expiresat_;
}
inline ::vega::Timestamp* OrderAmendment::mutable_expiresat() {
  // @@protoc_insertion_point(field_mutable:vega.OrderAmendment.expiresAt)
  return _internal_mutable_expiresat();
}
inline void OrderAmendment::set_allocated_expiresat(::vega::Timestamp* expiresat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete expiresat_;
  }
  if (expiresat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expiresat);
    if (message_arena != submessage_arena) {
      expiresat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiresat, submessage_arena);
    }

  } else {

  }
  expiresat_ = expiresat;
  // @@protoc_insertion_point(field_set_allocated:vega.OrderAmendment.expiresAt)
}

// .vega.Order.TimeInForce timeInForce = 7 [json_name = "timeInForce"];
inline void OrderAmendment::clear_timeinforce() {
  timeinforce_ = 0;
}
inline ::vega::Order_TimeInForce OrderAmendment::_internal_timeinforce() const {
  return static_cast< ::vega::Order_TimeInForce >(timeinforce_);
}
inline ::vega::Order_TimeInForce OrderAmendment::timeinforce() const {
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.timeInForce)
  return _internal_timeinforce();
}
inline void OrderAmendment::_internal_set_timeinforce(::vega::Order_TimeInForce value) {

  timeinforce_ = value;
}
inline void OrderAmendment::set_timeinforce(::vega::Order_TimeInForce value) {
  _internal_set_timeinforce(value);
  // @@protoc_insertion_point(field_set:vega.OrderAmendment.timeInForce)
}

// .google.protobuf.Int64Value peggedOffset = 8 [json_name = "peggedOffset"];
inline bool OrderAmendment::_internal_has_peggedoffset() const {
  return this != internal_default_instance() && peggedoffset_ != nullptr;
}
inline bool OrderAmendment::has_peggedoffset() const {
  return _internal_has_peggedoffset();
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& OrderAmendment::_internal_peggedoffset() const {
  const PROTOBUF_NAMESPACE_ID::Int64Value* p = peggedoffset_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int64Value&>(
      PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& OrderAmendment::peggedoffset() const {
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.peggedOffset)
  return _internal_peggedoffset();
}
inline void OrderAmendment::unsafe_arena_set_allocated_peggedoffset(
    PROTOBUF_NAMESPACE_ID::Int64Value* peggedoffset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peggedoffset_);
  }
  peggedoffset_ = peggedoffset;
  if (peggedoffset) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.OrderAmendment.peggedOffset)
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* OrderAmendment::release_peggedoffset() {

  PROTOBUF_NAMESPACE_ID::Int64Value* temp = peggedoffset_;
  peggedoffset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* OrderAmendment::unsafe_arena_release_peggedoffset() {
  // @@protoc_insertion_point(field_release:vega.OrderAmendment.peggedOffset)

  PROTOBUF_NAMESPACE_ID::Int64Value* temp = peggedoffset_;
  peggedoffset_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* OrderAmendment::_internal_mutable_peggedoffset() {

  if (peggedoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int64Value>(GetArena());
    peggedoffset_ = p;
  }
  return peggedoffset_;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* OrderAmendment::mutable_peggedoffset() {
  // @@protoc_insertion_point(field_mutable:vega.OrderAmendment.peggedOffset)
  return _internal_mutable_peggedoffset();
}
inline void OrderAmendment::set_allocated_peggedoffset(PROTOBUF_NAMESPACE_ID::Int64Value* peggedoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peggedoffset_);
  }
  if (peggedoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peggedoffset)->GetArena();
    if (message_arena != submessage_arena) {
      peggedoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peggedoffset, submessage_arena);
    }

  } else {

  }
  peggedoffset_ = peggedoffset;
  // @@protoc_insertion_point(field_set_allocated:vega.OrderAmendment.peggedOffset)
}

// .vega.PeggedReference peggedReference = 9 [json_name = "peggedReference"];
inline void OrderAmendment::clear_peggedreference() {
  peggedreference_ = 0;
}
inline ::vega::PeggedReference OrderAmendment::_internal_peggedreference() const {
  return static_cast< ::vega::PeggedReference >(peggedreference_);
}
inline ::vega::PeggedReference OrderAmendment::peggedreference() const {
  // @@protoc_insertion_point(field_get:vega.OrderAmendment.peggedReference)
  return _internal_peggedreference();
}
inline void OrderAmendment::_internal_set_peggedreference(::vega::PeggedReference value) {

  peggedreference_ = value;
}
inline void OrderAmendment::set_peggedreference(::vega::PeggedReference value) {
  _internal_set_peggedreference(value);
  // @@protoc_insertion_point(field_set:vega.OrderAmendment.peggedReference)
}

// -------------------------------------------------------------------

// OrderSubmission

// string id = 1 [json_name = "id", (.validator.field) = {
inline void OrderSubmission::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& OrderSubmission::id() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.id)
  return _internal_id();
}
inline void OrderSubmission::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.id)
}
inline std::string* OrderSubmission::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.OrderSubmission.id)
  return _internal_mutable_id();
}
inline const std::string& OrderSubmission::_internal_id() const {
  return id_.Get();
}
inline void OrderSubmission::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderSubmission::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderSubmission.id)
}
inline void OrderSubmission::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.OrderSubmission.id)
}
inline void OrderSubmission::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.OrderSubmission.id)
}
inline std::string* OrderSubmission::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderSubmission::release_id() {
  // @@protoc_insertion_point(field_release:vega.OrderSubmission.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderSubmission::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.OrderSubmission.id)
}

// string marketID = 2 [json_name = "marketID", (.validator.field) = {
inline void OrderSubmission::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& OrderSubmission::marketid() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.marketID)
  return _internal_marketid();
}
inline void OrderSubmission::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.marketID)
}
inline std::string* OrderSubmission::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.OrderSubmission.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& OrderSubmission::_internal_marketid() const {
  return marketid_.Get();
}
inline void OrderSubmission::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderSubmission::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderSubmission.marketID)
}
inline void OrderSubmission::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.OrderSubmission.marketID)
}
inline void OrderSubmission::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.OrderSubmission.marketID)
}
inline std::string* OrderSubmission::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderSubmission::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.OrderSubmission.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderSubmission::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.OrderSubmission.marketID)
}

// string partyID = 3 [json_name = "partyID", (.validator.field) = {
inline void OrderSubmission::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& OrderSubmission::partyid() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.partyID)
  return _internal_partyid();
}
inline void OrderSubmission::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.partyID)
}
inline std::string* OrderSubmission::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:vega.OrderSubmission.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& OrderSubmission::_internal_partyid() const {
  return partyid_.Get();
}
inline void OrderSubmission::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderSubmission::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderSubmission.partyID)
}
inline void OrderSubmission::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.OrderSubmission.partyID)
}
inline void OrderSubmission::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.OrderSubmission.partyID)
}
inline std::string* OrderSubmission::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderSubmission::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.OrderSubmission.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderSubmission::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.OrderSubmission.partyID)
}

// uint64 price = 4 [json_name = "price"];
inline void OrderSubmission::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderSubmission::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderSubmission::price() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.price)
  return _internal_price();
}
inline void OrderSubmission::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void OrderSubmission::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.price)
}

// uint64 size = 5 [json_name = "size", (.validator.field) = {
inline void OrderSubmission::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderSubmission::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderSubmission::size() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.size)
  return _internal_size();
}
inline void OrderSubmission::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  size_ = value;
}
inline void OrderSubmission::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.size)
}

// .vega.Side side = 6 [json_name = "side", (.validator.field) = {
inline void OrderSubmission::clear_side() {
  side_ = 0;
}
inline ::vega::Side OrderSubmission::_internal_side() const {
  return static_cast< ::vega::Side >(side_);
}
inline ::vega::Side OrderSubmission::side() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.side)
  return _internal_side();
}
inline void OrderSubmission::_internal_set_side(::vega::Side value) {

  side_ = value;
}
inline void OrderSubmission::set_side(::vega::Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.side)
}

// .vega.Order.TimeInForce timeInForce = 7 [json_name = "timeInForce", (.validator.field) = {
inline void OrderSubmission::clear_timeinforce() {
  timeinforce_ = 0;
}
inline ::vega::Order_TimeInForce OrderSubmission::_internal_timeinforce() const {
  return static_cast< ::vega::Order_TimeInForce >(timeinforce_);
}
inline ::vega::Order_TimeInForce OrderSubmission::timeinforce() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.timeInForce)
  return _internal_timeinforce();
}
inline void OrderSubmission::_internal_set_timeinforce(::vega::Order_TimeInForce value) {

  timeinforce_ = value;
}
inline void OrderSubmission::set_timeinforce(::vega::Order_TimeInForce value) {
  _internal_set_timeinforce(value);
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.timeInForce)
}

// int64 expiresAt = 8 [json_name = "expiresAt"];
inline void OrderSubmission::clear_expiresat() {
  expiresat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OrderSubmission::_internal_expiresat() const {
  return expiresat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OrderSubmission::expiresat() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.expiresAt)
  return _internal_expiresat();
}
inline void OrderSubmission::_internal_set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value) {

  expiresat_ = value;
}
inline void OrderSubmission::set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiresat(value);
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.expiresAt)
}

// .vega.Order.Type type = 9 [json_name = "type", (.validator.field) = {
inline void OrderSubmission::clear_type() {
  type_ = 0;
}
inline ::vega::Order_Type OrderSubmission::_internal_type() const {
  return static_cast< ::vega::Order_Type >(type_);
}
inline ::vega::Order_Type OrderSubmission::type() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.type)
  return _internal_type();
}
inline void OrderSubmission::_internal_set_type(::vega::Order_Type value) {

  type_ = value;
}
inline void OrderSubmission::set_type(::vega::Order_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.type)
}

// string reference = 10 [json_name = "reference"];
inline void OrderSubmission::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& OrderSubmission::reference() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.reference)
  return _internal_reference();
}
inline void OrderSubmission::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.OrderSubmission.reference)
}
inline std::string* OrderSubmission::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:vega.OrderSubmission.reference)
  return _internal_mutable_reference();
}
inline const std::string& OrderSubmission::_internal_reference() const {
  return reference_.Get();
}
inline void OrderSubmission::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderSubmission::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderSubmission.reference)
}
inline void OrderSubmission::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.OrderSubmission.reference)
}
inline void OrderSubmission::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.OrderSubmission.reference)
}
inline std::string* OrderSubmission::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderSubmission::release_reference() {
  // @@protoc_insertion_point(field_release:vega.OrderSubmission.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderSubmission::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.OrderSubmission.reference)
}

// .vega.PeggedOrder peggedOrder = 11 [json_name = "peggedOrder"];
inline bool OrderSubmission::_internal_has_peggedorder() const {
  return this != internal_default_instance() && peggedorder_ != nullptr;
}
inline bool OrderSubmission::has_peggedorder() const {
  return _internal_has_peggedorder();
}
inline void OrderSubmission::clear_peggedorder() {
  if (GetArena() == nullptr && peggedorder_ != nullptr) {
    delete peggedorder_;
  }
  peggedorder_ = nullptr;
}
inline const ::vega::PeggedOrder& OrderSubmission::_internal_peggedorder() const {
  const ::vega::PeggedOrder* p = peggedorder_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::PeggedOrder&>(
      ::vega::_PeggedOrder_default_instance_);
}
inline const ::vega::PeggedOrder& OrderSubmission::peggedorder() const {
  // @@protoc_insertion_point(field_get:vega.OrderSubmission.peggedOrder)
  return _internal_peggedorder();
}
inline void OrderSubmission::unsafe_arena_set_allocated_peggedorder(
    ::vega::PeggedOrder* peggedorder) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peggedorder_);
  }
  peggedorder_ = peggedorder;
  if (peggedorder) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.OrderSubmission.peggedOrder)
}
inline ::vega::PeggedOrder* OrderSubmission::release_peggedorder() {

  ::vega::PeggedOrder* temp = peggedorder_;
  peggedorder_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::PeggedOrder* OrderSubmission::unsafe_arena_release_peggedorder() {
  // @@protoc_insertion_point(field_release:vega.OrderSubmission.peggedOrder)

  ::vega::PeggedOrder* temp = peggedorder_;
  peggedorder_ = nullptr;
  return temp;
}
inline ::vega::PeggedOrder* OrderSubmission::_internal_mutable_peggedorder() {

  if (peggedorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::PeggedOrder>(GetArena());
    peggedorder_ = p;
  }
  return peggedorder_;
}
inline ::vega::PeggedOrder* OrderSubmission::mutable_peggedorder() {
  // @@protoc_insertion_point(field_mutable:vega.OrderSubmission.peggedOrder)
  return _internal_mutable_peggedorder();
}
inline void OrderSubmission::set_allocated_peggedorder(::vega::PeggedOrder* peggedorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete peggedorder_;
  }
  if (peggedorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(peggedorder);
    if (message_arena != submessage_arena) {
      peggedorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peggedorder, submessage_arena);
    }

  } else {

  }
  peggedorder_ = peggedorder;
  // @@protoc_insertion_point(field_set_allocated:vega.OrderSubmission.peggedOrder)
}

// -------------------------------------------------------------------

// OrderCancellation

// string orderID = 1 [json_name = "orderID"];
inline void OrderCancellation::clear_orderid() {
  orderid_.ClearToEmpty();
}
inline const std::string& OrderCancellation::orderid() const {
  // @@protoc_insertion_point(field_get:vega.OrderCancellation.orderID)
  return _internal_orderid();
}
inline void OrderCancellation::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:vega.OrderCancellation.orderID)
}
inline std::string* OrderCancellation::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:vega.OrderCancellation.orderID)
  return _internal_mutable_orderid();
}
inline const std::string& OrderCancellation::_internal_orderid() const {
  return orderid_.Get();
}
inline void OrderCancellation::_internal_set_orderid(const std::string& value) {

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderCancellation::set_orderid(std::string&& value) {

  orderid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderCancellation.orderID)
}
inline void OrderCancellation::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.OrderCancellation.orderID)
}
inline void OrderCancellation::set_orderid(const char* value,
    size_t size) {

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.OrderCancellation.orderID)
}
inline std::string* OrderCancellation::_internal_mutable_orderid() {

  return orderid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderCancellation::release_orderid() {
  // @@protoc_insertion_point(field_release:vega.OrderCancellation.orderID)
  return orderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderCancellation::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {

  } else {

  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.OrderCancellation.orderID)
}

// string marketID = 2 [json_name = "marketID"];
inline void OrderCancellation::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& OrderCancellation::marketid() const {
  // @@protoc_insertion_point(field_get:vega.OrderCancellation.marketID)
  return _internal_marketid();
}
inline void OrderCancellation::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.OrderCancellation.marketID)
}
inline std::string* OrderCancellation::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.OrderCancellation.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& OrderCancellation::_internal_marketid() const {
  return marketid_.Get();
}
inline void OrderCancellation::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderCancellation::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderCancellation.marketID)
}
inline void OrderCancellation::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.OrderCancellation.marketID)
}
inline void OrderCancellation::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.OrderCancellation.marketID)
}
inline std::string* OrderCancellation::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderCancellation::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.OrderCancellation.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderCancellation::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.OrderCancellation.marketID)
}

// string partyID = 3 [json_name = "partyID", (.validator.field) = {
inline void OrderCancellation::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& OrderCancellation::partyid() const {
  // @@protoc_insertion_point(field_get:vega.OrderCancellation.partyID)
  return _internal_partyid();
}
inline void OrderCancellation::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:vega.OrderCancellation.partyID)
}
inline std::string* OrderCancellation::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:vega.OrderCancellation.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& OrderCancellation::_internal_partyid() const {
  return partyid_.Get();
}
inline void OrderCancellation::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OrderCancellation::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.OrderCancellation.partyID)
}
inline void OrderCancellation::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.OrderCancellation.partyID)
}
inline void OrderCancellation::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.OrderCancellation.partyID)
}
inline std::string* OrderCancellation::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OrderCancellation::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.OrderCancellation.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderCancellation::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.OrderCancellation.partyID)
}

// -------------------------------------------------------------------

// NodeRegistration

// bytes pubKey = 1 [json_name = "pubKey", (.validator.field) = {
inline void NodeRegistration::clear_pubkey() {
  pubkey_.ClearToEmpty();
}
inline const std::string& NodeRegistration::pubkey() const {
  // @@protoc_insertion_point(field_get:vega.NodeRegistration.pubKey)
  return _internal_pubkey();
}
inline void NodeRegistration::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:vega.NodeRegistration.pubKey)
}
inline std::string* NodeRegistration::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:vega.NodeRegistration.pubKey)
  return _internal_mutable_pubkey();
}
inline const std::string& NodeRegistration::_internal_pubkey() const {
  return pubkey_.Get();
}
inline void NodeRegistration::_internal_set_pubkey(const std::string& value) {

  pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NodeRegistration::set_pubkey(std::string&& value) {

  pubkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.NodeRegistration.pubKey)
}
inline void NodeRegistration::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.NodeRegistration.pubKey)
}
inline void NodeRegistration::set_pubkey(const void* value,
    size_t size) {

  pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.NodeRegistration.pubKey)
}
inline std::string* NodeRegistration::_internal_mutable_pubkey() {

  return pubkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NodeRegistration::release_pubkey() {
  // @@protoc_insertion_point(field_release:vega.NodeRegistration.pubKey)
  return pubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeRegistration::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {

  } else {

  }
  pubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.NodeRegistration.pubKey)
}

// bytes chainPubKey = 2 [json_name = "chainPubKey", (.validator.field) = {
inline void NodeRegistration::clear_chainpubkey() {
  chainpubkey_.ClearToEmpty();
}
inline const std::string& NodeRegistration::chainpubkey() const {
  // @@protoc_insertion_point(field_get:vega.NodeRegistration.chainPubKey)
  return _internal_chainpubkey();
}
inline void NodeRegistration::set_chainpubkey(const std::string& value) {
  _internal_set_chainpubkey(value);
  // @@protoc_insertion_point(field_set:vega.NodeRegistration.chainPubKey)
}
inline std::string* NodeRegistration::mutable_chainpubkey() {
  // @@protoc_insertion_point(field_mutable:vega.NodeRegistration.chainPubKey)
  return _internal_mutable_chainpubkey();
}
inline const std::string& NodeRegistration::_internal_chainpubkey() const {
  return chainpubkey_.Get();
}
inline void NodeRegistration::_internal_set_chainpubkey(const std::string& value) {

  chainpubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NodeRegistration::set_chainpubkey(std::string&& value) {

  chainpubkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.NodeRegistration.chainPubKey)
}
inline void NodeRegistration::set_chainpubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  chainpubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.NodeRegistration.chainPubKey)
}
inline void NodeRegistration::set_chainpubkey(const void* value,
    size_t size) {

  chainpubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.NodeRegistration.chainPubKey)
}
inline std::string* NodeRegistration::_internal_mutable_chainpubkey() {

  return chainpubkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NodeRegistration::release_chainpubkey() {
  // @@protoc_insertion_point(field_release:vega.NodeRegistration.chainPubKey)
  return chainpubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeRegistration::set_allocated_chainpubkey(std::string* chainpubkey) {
  if (chainpubkey != nullptr) {

  } else {

  }
  chainpubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chainpubkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.NodeRegistration.chainPubKey)
}

// -------------------------------------------------------------------

// NodeVote

// bytes pubKey = 1 [json_name = "pubKey", (.validator.field) = {
inline void NodeVote::clear_pubkey() {
  pubkey_.ClearToEmpty();
}
inline const std::string& NodeVote::pubkey() const {
  // @@protoc_insertion_point(field_get:vega.NodeVote.pubKey)
  return _internal_pubkey();
}
inline void NodeVote::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:vega.NodeVote.pubKey)
}
inline std::string* NodeVote::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:vega.NodeVote.pubKey)
  return _internal_mutable_pubkey();
}
inline const std::string& NodeVote::_internal_pubkey() const {
  return pubkey_.Get();
}
inline void NodeVote::_internal_set_pubkey(const std::string& value) {

  pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NodeVote::set_pubkey(std::string&& value) {

  pubkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.NodeVote.pubKey)
}
inline void NodeVote::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.NodeVote.pubKey)
}
inline void NodeVote::set_pubkey(const void* value,
    size_t size) {

  pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.NodeVote.pubKey)
}
inline std::string* NodeVote::_internal_mutable_pubkey() {

  return pubkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NodeVote::release_pubkey() {
  // @@protoc_insertion_point(field_release:vega.NodeVote.pubKey)
  return pubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeVote::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {

  } else {

  }
  pubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.NodeVote.pubKey)
}

// string reference = 2 [json_name = "reference", (.validator.field) = {
inline void NodeVote::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& NodeVote::reference() const {
  // @@protoc_insertion_point(field_get:vega.NodeVote.reference)
  return _internal_reference();
}
inline void NodeVote::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.NodeVote.reference)
}
inline std::string* NodeVote::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:vega.NodeVote.reference)
  return _internal_mutable_reference();
}
inline const std::string& NodeVote::_internal_reference() const {
  return reference_.Get();
}
inline void NodeVote::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NodeVote::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.NodeVote.reference)
}
inline void NodeVote::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.NodeVote.reference)
}
inline void NodeVote::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.NodeVote.reference)
}
inline std::string* NodeVote::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NodeVote::release_reference() {
  // @@protoc_insertion_point(field_release:vega.NodeVote.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeVote::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.NodeVote.reference)
}

// -------------------------------------------------------------------

// Account

// string id = 1 [json_name = "id"];
inline void Account::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Account::id() const {
  // @@protoc_insertion_point(field_get:vega.Account.id)
  return _internal_id();
}
inline void Account::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.Account.id)
}
inline std::string* Account::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.Account.id)
  return _internal_mutable_id();
}
inline const std::string& Account::_internal_id() const {
  return id_.Get();
}
inline void Account::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Account.id)
}
inline void Account::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Account.id)
}
inline void Account::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Account.id)
}
inline std::string* Account::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_id() {
  // @@protoc_insertion_point(field_release:vega.Account.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Account.id)
}

// string owner = 2 [json_name = "owner"];
inline void Account::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& Account::owner() const {
  // @@protoc_insertion_point(field_get:vega.Account.owner)
  return _internal_owner();
}
inline void Account::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:vega.Account.owner)
}
inline std::string* Account::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:vega.Account.owner)
  return _internal_mutable_owner();
}
inline const std::string& Account::_internal_owner() const {
  return owner_.Get();
}
inline void Account::_internal_set_owner(const std::string& value) {

  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_owner(std::string&& value) {

  owner_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Account.owner)
}
inline void Account::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Account.owner)
}
inline void Account::set_owner(const char* value,
    size_t size) {

  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Account.owner)
}
inline std::string* Account::_internal_mutable_owner() {

  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_owner() {
  // @@protoc_insertion_point(field_release:vega.Account.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {

  } else {

  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Account.owner)
}

// uint64 balance = 3 [json_name = "balance"];
inline void Account::clear_balance() {
  balance_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Account::_internal_balance() const {
  return balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Account::balance() const {
  // @@protoc_insertion_point(field_get:vega.Account.balance)
  return _internal_balance();
}
inline void Account::_internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  balance_ = value;
}
inline void Account::set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:vega.Account.balance)
}

// string asset = 4 [json_name = "asset"];
inline void Account::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& Account::asset() const {
  // @@protoc_insertion_point(field_get:vega.Account.asset)
  return _internal_asset();
}
inline void Account::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.Account.asset)
}
inline std::string* Account::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.Account.asset)
  return _internal_mutable_asset();
}
inline const std::string& Account::_internal_asset() const {
  return asset_.Get();
}
inline void Account::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Account.asset)
}
inline void Account::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Account.asset)
}
inline void Account::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Account.asset)
}
inline std::string* Account::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_asset() {
  // @@protoc_insertion_point(field_release:vega.Account.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Account.asset)
}

// string marketID = 5 [json_name = "marketID"];
inline void Account::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& Account::marketid() const {
  // @@protoc_insertion_point(field_get:vega.Account.marketID)
  return _internal_marketid();
}
inline void Account::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.Account.marketID)
}
inline std::string* Account::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.Account.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& Account::_internal_marketid() const {
  return marketid_.Get();
}
inline void Account::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Account::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Account.marketID)
}
inline void Account::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Account.marketID)
}
inline void Account::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Account.marketID)
}
inline std::string* Account::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Account::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.Account.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Account::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Account.marketID)
}

// .vega.AccountType type = 6 [json_name = "type"];
inline void Account::clear_type() {
  type_ = 0;
}
inline ::vega::AccountType Account::_internal_type() const {
  return static_cast< ::vega::AccountType >(type_);
}
inline ::vega::AccountType Account::type() const {
  // @@protoc_insertion_point(field_get:vega.Account.type)
  return _internal_type();
}
inline void Account::_internal_set_type(::vega::AccountType value) {

  type_ = value;
}
inline void Account::set_type(::vega::AccountType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.Account.type)
}

// -------------------------------------------------------------------

// FinancialAmount

// int64 amount = 1 [json_name = "amount"];
inline void FinancialAmount::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FinancialAmount::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FinancialAmount::amount() const {
  // @@protoc_insertion_point(field_get:vega.FinancialAmount.amount)
  return _internal_amount();
}
inline void FinancialAmount::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {

  amount_ = value;
}
inline void FinancialAmount::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.FinancialAmount.amount)
}

// string asset = 2 [json_name = "asset"];
inline void FinancialAmount::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& FinancialAmount::asset() const {
  // @@protoc_insertion_point(field_get:vega.FinancialAmount.asset)
  return _internal_asset();
}
inline void FinancialAmount::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.FinancialAmount.asset)
}
inline std::string* FinancialAmount::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.FinancialAmount.asset)
  return _internal_mutable_asset();
}
inline const std::string& FinancialAmount::_internal_asset() const {
  return asset_.Get();
}
inline void FinancialAmount::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FinancialAmount::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.FinancialAmount.asset)
}
inline void FinancialAmount::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.FinancialAmount.asset)
}
inline void FinancialAmount::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.FinancialAmount.asset)
}
inline std::string* FinancialAmount::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FinancialAmount::release_asset() {
  // @@protoc_insertion_point(field_release:vega.FinancialAmount.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FinancialAmount::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.FinancialAmount.asset)
}

// -------------------------------------------------------------------

// Transfer

// string owner = 1 [json_name = "owner"];
inline void Transfer::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& Transfer::owner() const {
  // @@protoc_insertion_point(field_get:vega.Transfer.owner)
  return _internal_owner();
}
inline void Transfer::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:vega.Transfer.owner)
}
inline std::string* Transfer::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:vega.Transfer.owner)
  return _internal_mutable_owner();
}
inline const std::string& Transfer::_internal_owner() const {
  return owner_.Get();
}
inline void Transfer::_internal_set_owner(const std::string& value) {

  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transfer::set_owner(std::string&& value) {

  owner_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Transfer.owner)
}
inline void Transfer::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Transfer.owner)
}
inline void Transfer::set_owner(const char* value,
    size_t size) {

  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Transfer.owner)
}
inline std::string* Transfer::_internal_mutable_owner() {

  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transfer::release_owner() {
  // @@protoc_insertion_point(field_release:vega.Transfer.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {

  } else {

  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Transfer.owner)
}

// .vega.FinancialAmount amount = 2 [json_name = "amount"];
inline bool Transfer::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool Transfer::has_amount() const {
  return _internal_has_amount();
}
inline void Transfer::clear_amount() {
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::vega::FinancialAmount& Transfer::_internal_amount() const {
  const ::vega::FinancialAmount* p = amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::FinancialAmount&>(
      ::vega::_FinancialAmount_default_instance_);
}
inline const ::vega::FinancialAmount& Transfer::amount() const {
  // @@protoc_insertion_point(field_get:vega.Transfer.amount)
  return _internal_amount();
}
inline void Transfer::unsafe_arena_set_allocated_amount(
    ::vega::FinancialAmount* amount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  amount_ = amount;
  if (amount) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Transfer.amount)
}
inline ::vega::FinancialAmount* Transfer::release_amount() {

  ::vega::FinancialAmount* temp = amount_;
  amount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::FinancialAmount* Transfer::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:vega.Transfer.amount)

  ::vega::FinancialAmount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::vega::FinancialAmount* Transfer::_internal_mutable_amount() {

  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::FinancialAmount>(GetArena());
    amount_ = p;
  }
  return amount_;
}
inline ::vega::FinancialAmount* Transfer::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:vega.Transfer.amount)
  return _internal_mutable_amount();
}
inline void Transfer::set_allocated_amount(::vega::FinancialAmount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(amount);
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }

  } else {

  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:vega.Transfer.amount)
}

// .vega.TransferType type = 3 [json_name = "type"];
inline void Transfer::clear_type() {
  type_ = 0;
}
inline ::vega::TransferType Transfer::_internal_type() const {
  return static_cast< ::vega::TransferType >(type_);
}
inline ::vega::TransferType Transfer::type() const {
  // @@protoc_insertion_point(field_get:vega.Transfer.type)
  return _internal_type();
}
inline void Transfer::_internal_set_type(::vega::TransferType value) {

  type_ = value;
}
inline void Transfer::set_type(::vega::TransferType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.Transfer.type)
}

// int64 minAmount = 4 [json_name = "minAmount"];
inline void Transfer::clear_minamount() {
  minamount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transfer::_internal_minamount() const {
  return minamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transfer::minamount() const {
  // @@protoc_insertion_point(field_get:vega.Transfer.minAmount)
  return _internal_minamount();
}
inline void Transfer::_internal_set_minamount(::PROTOBUF_NAMESPACE_ID::int64 value) {

  minamount_ = value;
}
inline void Transfer::set_minamount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_minamount(value);
  // @@protoc_insertion_point(field_set:vega.Transfer.minAmount)
}

// -------------------------------------------------------------------

// TransferRequest

// repeated .vega.Account fromAccount = 1 [json_name = "fromAccount"];
inline int TransferRequest::_internal_fromaccount_size() const {
  return fromaccount_.size();
}
inline int TransferRequest::fromaccount_size() const {
  return _internal_fromaccount_size();
}
inline void TransferRequest::clear_fromaccount() {
  fromaccount_.Clear();
}
inline ::vega::Account* TransferRequest::mutable_fromaccount(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TransferRequest.fromAccount)
  return fromaccount_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
TransferRequest::mutable_fromaccount() {
  // @@protoc_insertion_point(field_mutable_list:vega.TransferRequest.fromAccount)
  return &fromaccount_;
}
inline const ::vega::Account& TransferRequest::_internal_fromaccount(int index) const {
  return fromaccount_.Get(index);
}
inline const ::vega::Account& TransferRequest::fromaccount(int index) const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.fromAccount)
  return _internal_fromaccount(index);
}
inline ::vega::Account* TransferRequest::_internal_add_fromaccount() {
  return fromaccount_.Add();
}
inline ::vega::Account* TransferRequest::add_fromaccount() {
  // @@protoc_insertion_point(field_add:vega.TransferRequest.fromAccount)
  return _internal_add_fromaccount();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
TransferRequest::fromaccount() const {
  // @@protoc_insertion_point(field_list:vega.TransferRequest.fromAccount)
  return fromaccount_;
}

// repeated .vega.Account toAccount = 2 [json_name = "toAccount"];
inline int TransferRequest::_internal_toaccount_size() const {
  return toaccount_.size();
}
inline int TransferRequest::toaccount_size() const {
  return _internal_toaccount_size();
}
inline void TransferRequest::clear_toaccount() {
  toaccount_.Clear();
}
inline ::vega::Account* TransferRequest::mutable_toaccount(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TransferRequest.toAccount)
  return toaccount_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >*
TransferRequest::mutable_toaccount() {
  // @@protoc_insertion_point(field_mutable_list:vega.TransferRequest.toAccount)
  return &toaccount_;
}
inline const ::vega::Account& TransferRequest::_internal_toaccount(int index) const {
  return toaccount_.Get(index);
}
inline const ::vega::Account& TransferRequest::toaccount(int index) const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.toAccount)
  return _internal_toaccount(index);
}
inline ::vega::Account* TransferRequest::_internal_add_toaccount() {
  return toaccount_.Add();
}
inline ::vega::Account* TransferRequest::add_toaccount() {
  // @@protoc_insertion_point(field_add:vega.TransferRequest.toAccount)
  return _internal_add_toaccount();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::Account >&
TransferRequest::toaccount() const {
  // @@protoc_insertion_point(field_list:vega.TransferRequest.toAccount)
  return toaccount_;
}

// uint64 amount = 3 [json_name = "amount"];
inline void TransferRequest::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferRequest::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferRequest::amount() const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.amount)
  return _internal_amount();
}
inline void TransferRequest::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  amount_ = value;
}
inline void TransferRequest::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.TransferRequest.amount)
}

// uint64 minAmount = 4 [json_name = "minAmount"];
inline void TransferRequest::clear_minamount() {
  minamount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferRequest::_internal_minamount() const {
  return minamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferRequest::minamount() const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.minAmount)
  return _internal_minamount();
}
inline void TransferRequest::_internal_set_minamount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  minamount_ = value;
}
inline void TransferRequest::set_minamount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_minamount(value);
  // @@protoc_insertion_point(field_set:vega.TransferRequest.minAmount)
}

// string asset = 5 [json_name = "asset"];
inline void TransferRequest::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& TransferRequest::asset() const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.asset)
  return _internal_asset();
}
inline void TransferRequest::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.TransferRequest.asset)
}
inline std::string* TransferRequest::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.TransferRequest.asset)
  return _internal_mutable_asset();
}
inline const std::string& TransferRequest::_internal_asset() const {
  return asset_.Get();
}
inline void TransferRequest::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferRequest::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.TransferRequest.asset)
}
inline void TransferRequest::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.TransferRequest.asset)
}
inline void TransferRequest::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.TransferRequest.asset)
}
inline std::string* TransferRequest::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferRequest::release_asset() {
  // @@protoc_insertion_point(field_release:vega.TransferRequest.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferRequest::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.TransferRequest.asset)
}

// string reference = 6 [json_name = "reference"];
inline void TransferRequest::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& TransferRequest::reference() const {
  // @@protoc_insertion_point(field_get:vega.TransferRequest.reference)
  return _internal_reference();
}
inline void TransferRequest::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.TransferRequest.reference)
}
inline std::string* TransferRequest::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:vega.TransferRequest.reference)
  return _internal_mutable_reference();
}
inline const std::string& TransferRequest::_internal_reference() const {
  return reference_.Get();
}
inline void TransferRequest::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransferRequest::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.TransferRequest.reference)
}
inline void TransferRequest::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.TransferRequest.reference)
}
inline void TransferRequest::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.TransferRequest.reference)
}
inline std::string* TransferRequest::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransferRequest::release_reference() {
  // @@protoc_insertion_point(field_release:vega.TransferRequest.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferRequest::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.TransferRequest.reference)
}

// -------------------------------------------------------------------

// LedgerEntry

// string fromAccount = 1 [json_name = "fromAccount"];
inline void LedgerEntry::clear_fromaccount() {
  fromaccount_.ClearToEmpty();
}
inline const std::string& LedgerEntry::fromaccount() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.fromAccount)
  return _internal_fromaccount();
}
inline void LedgerEntry::set_fromaccount(const std::string& value) {
  _internal_set_fromaccount(value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.fromAccount)
}
inline std::string* LedgerEntry::mutable_fromaccount() {
  // @@protoc_insertion_point(field_mutable:vega.LedgerEntry.fromAccount)
  return _internal_mutable_fromaccount();
}
inline const std::string& LedgerEntry::_internal_fromaccount() const {
  return fromaccount_.Get();
}
inline void LedgerEntry::_internal_set_fromaccount(const std::string& value) {

  fromaccount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LedgerEntry::set_fromaccount(std::string&& value) {

  fromaccount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LedgerEntry.fromAccount)
}
inline void LedgerEntry::set_fromaccount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  fromaccount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LedgerEntry.fromAccount)
}
inline void LedgerEntry::set_fromaccount(const char* value,
    size_t size) {

  fromaccount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LedgerEntry.fromAccount)
}
inline std::string* LedgerEntry::_internal_mutable_fromaccount() {

  return fromaccount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LedgerEntry::release_fromaccount() {
  // @@protoc_insertion_point(field_release:vega.LedgerEntry.fromAccount)
  return fromaccount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LedgerEntry::set_allocated_fromaccount(std::string* fromaccount) {
  if (fromaccount != nullptr) {

  } else {

  }
  fromaccount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromaccount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LedgerEntry.fromAccount)
}

// string toAccount = 2 [json_name = "toAccount"];
inline void LedgerEntry::clear_toaccount() {
  toaccount_.ClearToEmpty();
}
inline const std::string& LedgerEntry::toaccount() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.toAccount)
  return _internal_toaccount();
}
inline void LedgerEntry::set_toaccount(const std::string& value) {
  _internal_set_toaccount(value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.toAccount)
}
inline std::string* LedgerEntry::mutable_toaccount() {
  // @@protoc_insertion_point(field_mutable:vega.LedgerEntry.toAccount)
  return _internal_mutable_toaccount();
}
inline const std::string& LedgerEntry::_internal_toaccount() const {
  return toaccount_.Get();
}
inline void LedgerEntry::_internal_set_toaccount(const std::string& value) {

  toaccount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LedgerEntry::set_toaccount(std::string&& value) {

  toaccount_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LedgerEntry.toAccount)
}
inline void LedgerEntry::set_toaccount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  toaccount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LedgerEntry.toAccount)
}
inline void LedgerEntry::set_toaccount(const char* value,
    size_t size) {

  toaccount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LedgerEntry.toAccount)
}
inline std::string* LedgerEntry::_internal_mutable_toaccount() {

  return toaccount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LedgerEntry::release_toaccount() {
  // @@protoc_insertion_point(field_release:vega.LedgerEntry.toAccount)
  return toaccount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LedgerEntry::set_allocated_toaccount(std::string* toaccount) {
  if (toaccount != nullptr) {

  } else {

  }
  toaccount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), toaccount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LedgerEntry.toAccount)
}

// uint64 amount = 3 [json_name = "amount"];
inline void LedgerEntry::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LedgerEntry::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LedgerEntry::amount() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.amount)
  return _internal_amount();
}
inline void LedgerEntry::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  amount_ = value;
}
inline void LedgerEntry::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.amount)
}

// string reference = 4 [json_name = "reference"];
inline void LedgerEntry::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& LedgerEntry::reference() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.reference)
  return _internal_reference();
}
inline void LedgerEntry::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.reference)
}
inline std::string* LedgerEntry::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:vega.LedgerEntry.reference)
  return _internal_mutable_reference();
}
inline const std::string& LedgerEntry::_internal_reference() const {
  return reference_.Get();
}
inline void LedgerEntry::_internal_set_reference(const std::string& value) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LedgerEntry::set_reference(std::string&& value) {

  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LedgerEntry.reference)
}
inline void LedgerEntry::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LedgerEntry.reference)
}
inline void LedgerEntry::set_reference(const char* value,
    size_t size) {

  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LedgerEntry.reference)
}
inline std::string* LedgerEntry::_internal_mutable_reference() {

  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LedgerEntry::release_reference() {
  // @@protoc_insertion_point(field_release:vega.LedgerEntry.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LedgerEntry::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {

  } else {

  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LedgerEntry.reference)
}

// string type = 5 [json_name = "type"];
inline void LedgerEntry::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& LedgerEntry::type() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.type)
  return _internal_type();
}
inline void LedgerEntry::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.type)
}
inline std::string* LedgerEntry::mutable_type() {
  // @@protoc_insertion_point(field_mutable:vega.LedgerEntry.type)
  return _internal_mutable_type();
}
inline const std::string& LedgerEntry::_internal_type() const {
  return type_.Get();
}
inline void LedgerEntry::_internal_set_type(const std::string& value) {

  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LedgerEntry::set_type(std::string&& value) {

  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LedgerEntry.type)
}
inline void LedgerEntry::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LedgerEntry.type)
}
inline void LedgerEntry::set_type(const char* value,
    size_t size) {

  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LedgerEntry.type)
}
inline std::string* LedgerEntry::_internal_mutable_type() {

  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LedgerEntry::release_type() {
  // @@protoc_insertion_point(field_release:vega.LedgerEntry.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LedgerEntry::set_allocated_type(std::string* type) {
  if (type != nullptr) {

  } else {

  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LedgerEntry.type)
}

// int64 timestamp = 6 [json_name = "timestamp"];
inline void LedgerEntry::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LedgerEntry::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LedgerEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.LedgerEntry.timestamp)
  return _internal_timestamp();
}
inline void LedgerEntry::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void LedgerEntry::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.LedgerEntry.timestamp)
}

// -------------------------------------------------------------------

// TransferBalance

// .vega.Account account = 1 [json_name = "account"];
inline bool TransferBalance::_internal_has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline bool TransferBalance::has_account() const {
  return _internal_has_account();
}
inline void TransferBalance::clear_account() {
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::vega::Account& TransferBalance::_internal_account() const {
  const ::vega::Account* p = account_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Account&>(
      ::vega::_Account_default_instance_);
}
inline const ::vega::Account& TransferBalance::account() const {
  // @@protoc_insertion_point(field_get:vega.TransferBalance.account)
  return _internal_account();
}
inline void TransferBalance::unsafe_arena_set_allocated_account(
    ::vega::Account* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.TransferBalance.account)
}
inline ::vega::Account* TransferBalance::release_account() {

  ::vega::Account* temp = account_;
  account_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Account* TransferBalance::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:vega.TransferBalance.account)

  ::vega::Account* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::vega::Account* TransferBalance::_internal_mutable_account() {

  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Account>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::vega::Account* TransferBalance::mutable_account() {
  // @@protoc_insertion_point(field_mutable:vega.TransferBalance.account)
  return _internal_mutable_account();
}
inline void TransferBalance::set_allocated_account(::vega::Account* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }

  } else {

  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:vega.TransferBalance.account)
}

// uint64 balance = 2 [json_name = "balance"];
inline void TransferBalance::clear_balance() {
  balance_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferBalance::_internal_balance() const {
  return balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferBalance::balance() const {
  // @@protoc_insertion_point(field_get:vega.TransferBalance.balance)
  return _internal_balance();
}
inline void TransferBalance::_internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  balance_ = value;
}
inline void TransferBalance::set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:vega.TransferBalance.balance)
}

// -------------------------------------------------------------------

// TransferResponse

// repeated .vega.LedgerEntry transfers = 1 [json_name = "transfers"];
inline int TransferResponse::_internal_transfers_size() const {
  return transfers_.size();
}
inline int TransferResponse::transfers_size() const {
  return _internal_transfers_size();
}
inline void TransferResponse::clear_transfers() {
  transfers_.Clear();
}
inline ::vega::LedgerEntry* TransferResponse::mutable_transfers(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TransferResponse.transfers)
  return transfers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LedgerEntry >*
TransferResponse::mutable_transfers() {
  // @@protoc_insertion_point(field_mutable_list:vega.TransferResponse.transfers)
  return &transfers_;
}
inline const ::vega::LedgerEntry& TransferResponse::_internal_transfers(int index) const {
  return transfers_.Get(index);
}
inline const ::vega::LedgerEntry& TransferResponse::transfers(int index) const {
  // @@protoc_insertion_point(field_get:vega.TransferResponse.transfers)
  return _internal_transfers(index);
}
inline ::vega::LedgerEntry* TransferResponse::_internal_add_transfers() {
  return transfers_.Add();
}
inline ::vega::LedgerEntry* TransferResponse::add_transfers() {
  // @@protoc_insertion_point(field_add:vega.TransferResponse.transfers)
  return _internal_add_transfers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LedgerEntry >&
TransferResponse::transfers() const {
  // @@protoc_insertion_point(field_list:vega.TransferResponse.transfers)
  return transfers_;
}

// repeated .vega.TransferBalance balances = 2 [json_name = "balances"];
inline int TransferResponse::_internal_balances_size() const {
  return balances_.size();
}
inline int TransferResponse::balances_size() const {
  return _internal_balances_size();
}
inline void TransferResponse::clear_balances() {
  balances_.Clear();
}
inline ::vega::TransferBalance* TransferResponse::mutable_balances(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TransferResponse.balances)
  return balances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferBalance >*
TransferResponse::mutable_balances() {
  // @@protoc_insertion_point(field_mutable_list:vega.TransferResponse.balances)
  return &balances_;
}
inline const ::vega::TransferBalance& TransferResponse::_internal_balances(int index) const {
  return balances_.Get(index);
}
inline const ::vega::TransferBalance& TransferResponse::balances(int index) const {
  // @@protoc_insertion_point(field_get:vega.TransferResponse.balances)
  return _internal_balances(index);
}
inline ::vega::TransferBalance* TransferResponse::_internal_add_balances() {
  return balances_.Add();
}
inline ::vega::TransferBalance* TransferResponse::add_balances() {
  // @@protoc_insertion_point(field_add:vega.TransferResponse.balances)
  return _internal_add_balances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferBalance >&
TransferResponse::balances() const {
  // @@protoc_insertion_point(field_list:vega.TransferResponse.balances)
  return balances_;
}

// -------------------------------------------------------------------

// MarginLevels

// uint64 maintenanceMargin = 1 [json_name = "maintenanceMargin"];
inline void MarginLevels::clear_maintenancemargin() {
  maintenancemargin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::_internal_maintenancemargin() const {
  return maintenancemargin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::maintenancemargin() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.maintenanceMargin)
  return _internal_maintenancemargin();
}
inline void MarginLevels::_internal_set_maintenancemargin(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  maintenancemargin_ = value;
}
inline void MarginLevels::set_maintenancemargin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maintenancemargin(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.maintenanceMargin)
}

// uint64 searchLevel = 2 [json_name = "searchLevel"];
inline void MarginLevels::clear_searchlevel() {
  searchlevel_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::_internal_searchlevel() const {
  return searchlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::searchlevel() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.searchLevel)
  return _internal_searchlevel();
}
inline void MarginLevels::_internal_set_searchlevel(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  searchlevel_ = value;
}
inline void MarginLevels::set_searchlevel(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_searchlevel(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.searchLevel)
}

// uint64 initialMargin = 3 [json_name = "initialMargin"];
inline void MarginLevels::clear_initialmargin() {
  initialmargin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::_internal_initialmargin() const {
  return initialmargin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::initialmargin() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.initialMargin)
  return _internal_initialmargin();
}
inline void MarginLevels::_internal_set_initialmargin(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  initialmargin_ = value;
}
inline void MarginLevels::set_initialmargin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_initialmargin(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.initialMargin)
}

// uint64 collateralReleaseLevel = 4 [json_name = "collateralReleaseLevel"];
inline void MarginLevels::clear_collateralreleaselevel() {
  collateralreleaselevel_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::_internal_collateralreleaselevel() const {
  return collateralreleaselevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarginLevels::collateralreleaselevel() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.collateralReleaseLevel)
  return _internal_collateralreleaselevel();
}
inline void MarginLevels::_internal_set_collateralreleaselevel(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  collateralreleaselevel_ = value;
}
inline void MarginLevels::set_collateralreleaselevel(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_collateralreleaselevel(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.collateralReleaseLevel)
}

// string partyID = 5 [json_name = "partyID"];
inline void MarginLevels::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& MarginLevels::partyid() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.partyID)
  return _internal_partyid();
}
inline void MarginLevels::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.partyID)
}
inline std::string* MarginLevels::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:vega.MarginLevels.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& MarginLevels::_internal_partyid() const {
  return partyid_.Get();
}
inline void MarginLevels::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarginLevels::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarginLevels.partyID)
}
inline void MarginLevels::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarginLevels.partyID)
}
inline void MarginLevels::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarginLevels.partyID)
}
inline std::string* MarginLevels::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarginLevels::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.MarginLevels.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarginLevels::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarginLevels.partyID)
}

// string marketID = 6 [json_name = "marketID"];
inline void MarginLevels::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& MarginLevels::marketid() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.marketID)
  return _internal_marketid();
}
inline void MarginLevels::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.marketID)
}
inline std::string* MarginLevels::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.MarginLevels.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& MarginLevels::_internal_marketid() const {
  return marketid_.Get();
}
inline void MarginLevels::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarginLevels::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarginLevels.marketID)
}
inline void MarginLevels::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarginLevels.marketID)
}
inline void MarginLevels::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarginLevels.marketID)
}
inline std::string* MarginLevels::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarginLevels::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.MarginLevels.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarginLevels::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarginLevels.marketID)
}

// string asset = 7 [json_name = "asset"];
inline void MarginLevels::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& MarginLevels::asset() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.asset)
  return _internal_asset();
}
inline void MarginLevels::set_asset(const std::string& value) {
  _internal_set_asset(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.asset)
}
inline std::string* MarginLevels::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.MarginLevels.asset)
  return _internal_mutable_asset();
}
inline const std::string& MarginLevels::_internal_asset() const {
  return asset_.Get();
}
inline void MarginLevels::_internal_set_asset(const std::string& value) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarginLevels::set_asset(std::string&& value) {

  asset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarginLevels.asset)
}
inline void MarginLevels::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarginLevels.asset)
}
inline void MarginLevels::set_asset(const char* value,
    size_t size) {

  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarginLevels.asset)
}
inline std::string* MarginLevels::_internal_mutable_asset() {

  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarginLevels::release_asset() {
  // @@protoc_insertion_point(field_release:vega.MarginLevels.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarginLevels::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {

  } else {

  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarginLevels.asset)
}

// int64 timestamp = 8 [json_name = "timestamp"];
inline void MarginLevels::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarginLevels::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarginLevels::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.MarginLevels.timestamp)
  return _internal_timestamp();
}
inline void MarginLevels::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void MarginLevels::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.MarginLevels.timestamp)
}

// -------------------------------------------------------------------

// MarketData

// uint64 markPrice = 1 [json_name = "markPrice"];
inline void MarketData::clear_markprice() {
  markprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_markprice() const {
  return markprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::markprice() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.markPrice)
  return _internal_markprice();
}
inline void MarketData::_internal_set_markprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  markprice_ = value;
}
inline void MarketData::set_markprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_markprice(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.markPrice)
}

// uint64 bestBidPrice = 2 [json_name = "bestBidPrice"];
inline void MarketData::clear_bestbidprice() {
  bestbidprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_bestbidprice() const {
  return bestbidprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::bestbidprice() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.bestBidPrice)
  return _internal_bestbidprice();
}
inline void MarketData::_internal_set_bestbidprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  bestbidprice_ = value;
}
inline void MarketData::set_bestbidprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bestbidprice(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.bestBidPrice)
}

// uint64 bestBidVolume = 3 [json_name = "bestBidVolume"];
inline void MarketData::clear_bestbidvolume() {
  bestbidvolume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_bestbidvolume() const {
  return bestbidvolume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::bestbidvolume() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.bestBidVolume)
  return _internal_bestbidvolume();
}
inline void MarketData::_internal_set_bestbidvolume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  bestbidvolume_ = value;
}
inline void MarketData::set_bestbidvolume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bestbidvolume(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.bestBidVolume)
}

// uint64 bestOfferPrice = 4 [json_name = "bestOfferPrice"];
inline void MarketData::clear_bestofferprice() {
  bestofferprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_bestofferprice() const {
  return bestofferprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::bestofferprice() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.bestOfferPrice)
  return _internal_bestofferprice();
}
inline void MarketData::_internal_set_bestofferprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  bestofferprice_ = value;
}
inline void MarketData::set_bestofferprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bestofferprice(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.bestOfferPrice)
}

// uint64 bestOfferVolume = 5 [json_name = "bestOfferVolume"];
inline void MarketData::clear_bestoffervolume() {
  bestoffervolume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_bestoffervolume() const {
  return bestoffervolume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::bestoffervolume() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.bestOfferVolume)
  return _internal_bestoffervolume();
}
inline void MarketData::_internal_set_bestoffervolume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  bestoffervolume_ = value;
}
inline void MarketData::set_bestoffervolume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bestoffervolume(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.bestOfferVolume)
}

// uint64 bestStaticBidPrice = 6 [json_name = "bestStaticBidPrice"];
inline void MarketData::clear_beststaticbidprice() {
  beststaticbidprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_beststaticbidprice() const {
  return beststaticbidprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::beststaticbidprice() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.bestStaticBidPrice)
  return _internal_beststaticbidprice();
}
inline void MarketData::_internal_set_beststaticbidprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  beststaticbidprice_ = value;
}
inline void MarketData::set_beststaticbidprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_beststaticbidprice(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.bestStaticBidPrice)
}

// uint64 bestStaticBidVolume = 7 [json_name = "bestStaticBidVolume"];
inline void MarketData::clear_beststaticbidvolume() {
  beststaticbidvolume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_beststaticbidvolume() const {
  return beststaticbidvolume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::beststaticbidvolume() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.bestStaticBidVolume)
  return _internal_beststaticbidvolume();
}
inline void MarketData::_internal_set_beststaticbidvolume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  beststaticbidvolume_ = value;
}
inline void MarketData::set_beststaticbidvolume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_beststaticbidvolume(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.bestStaticBidVolume)
}

// uint64 bestStaticOfferPrice = 8 [json_name = "bestStaticOfferPrice"];
inline void MarketData::clear_beststaticofferprice() {
  beststaticofferprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_beststaticofferprice() const {
  return beststaticofferprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::beststaticofferprice() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.bestStaticOfferPrice)
  return _internal_beststaticofferprice();
}
inline void MarketData::_internal_set_beststaticofferprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  beststaticofferprice_ = value;
}
inline void MarketData::set_beststaticofferprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_beststaticofferprice(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.bestStaticOfferPrice)
}

// uint64 bestStaticOfferVolume = 9 [json_name = "bestStaticOfferVolume"];
inline void MarketData::clear_beststaticoffervolume() {
  beststaticoffervolume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_beststaticoffervolume() const {
  return beststaticoffervolume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::beststaticoffervolume() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.bestStaticOfferVolume)
  return _internal_beststaticoffervolume();
}
inline void MarketData::_internal_set_beststaticoffervolume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  beststaticoffervolume_ = value;
}
inline void MarketData::set_beststaticoffervolume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_beststaticoffervolume(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.bestStaticOfferVolume)
}

// uint64 midPrice = 10 [json_name = "midPrice"];
inline void MarketData::clear_midprice() {
  midprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_midprice() const {
  return midprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::midprice() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.midPrice)
  return _internal_midprice();
}
inline void MarketData::_internal_set_midprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  midprice_ = value;
}
inline void MarketData::set_midprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_midprice(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.midPrice)
}

// uint64 staticMidPrice = 11 [json_name = "staticMidPrice"];
inline void MarketData::clear_staticmidprice() {
  staticmidprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_staticmidprice() const {
  return staticmidprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::staticmidprice() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.staticMidPrice)
  return _internal_staticmidprice();
}
inline void MarketData::_internal_set_staticmidprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  staticmidprice_ = value;
}
inline void MarketData::set_staticmidprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_staticmidprice(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.staticMidPrice)
}

// string market = 12 [json_name = "market"];
inline void MarketData::clear_market() {
  market_.ClearToEmpty();
}
inline const std::string& MarketData::market() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.market)
  return _internal_market();
}
inline void MarketData::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.market)
}
inline std::string* MarketData::mutable_market() {
  // @@protoc_insertion_point(field_mutable:vega.MarketData.market)
  return _internal_mutable_market();
}
inline const std::string& MarketData::_internal_market() const {
  return market_.Get();
}
inline void MarketData::_internal_set_market(const std::string& value) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketData::set_market(std::string&& value) {

  market_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketData.market)
}
inline void MarketData::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarketData.market)
}
inline void MarketData::set_market(const char* value,
    size_t size) {

  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarketData.market)
}
inline std::string* MarketData::_internal_mutable_market() {

  return market_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketData::release_market() {
  // @@protoc_insertion_point(field_release:vega.MarketData.market)
  return market_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketData::set_allocated_market(std::string* market) {
  if (market != nullptr) {

  } else {

  }
  market_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarketData.market)
}

// int64 timestamp = 13 [json_name = "timestamp"];
inline void MarketData::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketData::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.timestamp)
  return _internal_timestamp();
}
inline void MarketData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void MarketData::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.timestamp)
}

// uint64 openInterest = 14 [json_name = "openInterest"];
inline void MarketData::clear_openinterest() {
  openinterest_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_openinterest() const {
  return openinterest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::openinterest() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.openInterest)
  return _internal_openinterest();
}
inline void MarketData::_internal_set_openinterest(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  openinterest_ = value;
}
inline void MarketData::set_openinterest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_openinterest(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.openInterest)
}

// int64 auctionEnd = 15 [json_name = "auctionEnd"];
inline void MarketData::clear_auctionend() {
  auctionend_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketData::_internal_auctionend() const {
  return auctionend_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketData::auctionend() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.auctionEnd)
  return _internal_auctionend();
}
inline void MarketData::_internal_set_auctionend(::PROTOBUF_NAMESPACE_ID::int64 value) {

  auctionend_ = value;
}
inline void MarketData::set_auctionend(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_auctionend(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.auctionEnd)
}

// int64 auctionStart = 16 [json_name = "auctionStart"];
inline void MarketData::clear_auctionstart() {
  auctionstart_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketData::_internal_auctionstart() const {
  return auctionstart_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketData::auctionstart() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.auctionStart)
  return _internal_auctionstart();
}
inline void MarketData::_internal_set_auctionstart(::PROTOBUF_NAMESPACE_ID::int64 value) {

  auctionstart_ = value;
}
inline void MarketData::set_auctionstart(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_auctionstart(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.auctionStart)
}

// uint64 indicativePrice = 17 [json_name = "indicativePrice"];
inline void MarketData::clear_indicativeprice() {
  indicativeprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_indicativeprice() const {
  return indicativeprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::indicativeprice() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.indicativePrice)
  return _internal_indicativeprice();
}
inline void MarketData::_internal_set_indicativeprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  indicativeprice_ = value;
}
inline void MarketData::set_indicativeprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_indicativeprice(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.indicativePrice)
}

// uint64 indicativeVolume = 18 [json_name = "indicativeVolume"];
inline void MarketData::clear_indicativevolume() {
  indicativevolume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::_internal_indicativevolume() const {
  return indicativevolume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MarketData::indicativevolume() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.indicativeVolume)
  return _internal_indicativevolume();
}
inline void MarketData::_internal_set_indicativevolume(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  indicativevolume_ = value;
}
inline void MarketData::set_indicativevolume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_indicativevolume(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.indicativeVolume)
}

// .vega.Market.TradingMode marketTradingMode = 19 [json_name = "marketTradingMode"];
inline void MarketData::clear_markettradingmode() {
  markettradingmode_ = 0;
}
inline ::vega::Market_TradingMode MarketData::_internal_markettradingmode() const {
  return static_cast< ::vega::Market_TradingMode >(markettradingmode_);
}
inline ::vega::Market_TradingMode MarketData::markettradingmode() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.marketTradingMode)
  return _internal_markettradingmode();
}
inline void MarketData::_internal_set_markettradingmode(::vega::Market_TradingMode value) {

  markettradingmode_ = value;
}
inline void MarketData::set_markettradingmode(::vega::Market_TradingMode value) {
  _internal_set_markettradingmode(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.marketTradingMode)
}

// .vega.AuctionTrigger trigger = 20 [json_name = "trigger"];
inline void MarketData::clear_trigger() {
  trigger_ = 0;
}
inline ::vega::AuctionTrigger MarketData::_internal_trigger() const {
  return static_cast< ::vega::AuctionTrigger >(trigger_);
}
inline ::vega::AuctionTrigger MarketData::trigger() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.trigger)
  return _internal_trigger();
}
inline void MarketData::_internal_set_trigger(::vega::AuctionTrigger value) {

  trigger_ = value;
}
inline void MarketData::set_trigger(::vega::AuctionTrigger value) {
  _internal_set_trigger(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.trigger)
}

// string targetStake = 21 [json_name = "targetStake"];
inline void MarketData::clear_targetstake() {
  targetstake_.ClearToEmpty();
}
inline const std::string& MarketData::targetstake() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.targetStake)
  return _internal_targetstake();
}
inline void MarketData::set_targetstake(const std::string& value) {
  _internal_set_targetstake(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.targetStake)
}
inline std::string* MarketData::mutable_targetstake() {
  // @@protoc_insertion_point(field_mutable:vega.MarketData.targetStake)
  return _internal_mutable_targetstake();
}
inline const std::string& MarketData::_internal_targetstake() const {
  return targetstake_.Get();
}
inline void MarketData::_internal_set_targetstake(const std::string& value) {

  targetstake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketData::set_targetstake(std::string&& value) {

  targetstake_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketData.targetStake)
}
inline void MarketData::set_targetstake(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  targetstake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarketData.targetStake)
}
inline void MarketData::set_targetstake(const char* value,
    size_t size) {

  targetstake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarketData.targetStake)
}
inline std::string* MarketData::_internal_mutable_targetstake() {

  return targetstake_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketData::release_targetstake() {
  // @@protoc_insertion_point(field_release:vega.MarketData.targetStake)
  return targetstake_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketData::set_allocated_targetstake(std::string* targetstake) {
  if (targetstake != nullptr) {

  } else {

  }
  targetstake_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetstake,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarketData.targetStake)
}

// string suppliedStake = 22 [json_name = "suppliedStake"];
inline void MarketData::clear_suppliedstake() {
  suppliedstake_.ClearToEmpty();
}
inline const std::string& MarketData::suppliedstake() const {
  // @@protoc_insertion_point(field_get:vega.MarketData.suppliedStake)
  return _internal_suppliedstake();
}
inline void MarketData::set_suppliedstake(const std::string& value) {
  _internal_set_suppliedstake(value);
  // @@protoc_insertion_point(field_set:vega.MarketData.suppliedStake)
}
inline std::string* MarketData::mutable_suppliedstake() {
  // @@protoc_insertion_point(field_mutable:vega.MarketData.suppliedStake)
  return _internal_mutable_suppliedstake();
}
inline const std::string& MarketData::_internal_suppliedstake() const {
  return suppliedstake_.Get();
}
inline void MarketData::_internal_set_suppliedstake(const std::string& value) {

  suppliedstake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketData::set_suppliedstake(std::string&& value) {

  suppliedstake_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketData.suppliedStake)
}
inline void MarketData::set_suppliedstake(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  suppliedstake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarketData.suppliedStake)
}
inline void MarketData::set_suppliedstake(const char* value,
    size_t size) {

  suppliedstake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarketData.suppliedStake)
}
inline std::string* MarketData::_internal_mutable_suppliedstake() {

  return suppliedstake_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketData::release_suppliedstake() {
  // @@protoc_insertion_point(field_release:vega.MarketData.suppliedStake)
  return suppliedstake_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketData::set_allocated_suppliedstake(std::string* suppliedstake) {
  if (suppliedstake != nullptr) {

  } else {

  }
  suppliedstake_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suppliedstake,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarketData.suppliedStake)
}

// repeated .vega.PriceMonitoringBounds priceMonitoringBounds = 23 [json_name = "priceMonitoringBounds"];
inline int MarketData::_internal_pricemonitoringbounds_size() const {
  return pricemonitoringbounds_.size();
}
inline int MarketData::pricemonitoringbounds_size() const {
  return _internal_pricemonitoringbounds_size();
}
inline void MarketData::clear_pricemonitoringbounds() {
  pricemonitoringbounds_.Clear();
}
inline ::vega::PriceMonitoringBounds* MarketData::mutable_pricemonitoringbounds(int index) {
  // @@protoc_insertion_point(field_mutable:vega.MarketData.priceMonitoringBounds)
  return pricemonitoringbounds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceMonitoringBounds >*
MarketData::mutable_pricemonitoringbounds() {
  // @@protoc_insertion_point(field_mutable_list:vega.MarketData.priceMonitoringBounds)
  return &pricemonitoringbounds_;
}
inline const ::vega::PriceMonitoringBounds& MarketData::_internal_pricemonitoringbounds(int index) const {
  return pricemonitoringbounds_.Get(index);
}
inline const ::vega::PriceMonitoringBounds& MarketData::pricemonitoringbounds(int index) const {
  // @@protoc_insertion_point(field_get:vega.MarketData.priceMonitoringBounds)
  return _internal_pricemonitoringbounds(index);
}
inline ::vega::PriceMonitoringBounds* MarketData::_internal_add_pricemonitoringbounds() {
  return pricemonitoringbounds_.Add();
}
inline ::vega::PriceMonitoringBounds* MarketData::add_pricemonitoringbounds() {
  // @@protoc_insertion_point(field_add:vega.MarketData.priceMonitoringBounds)
  return _internal_add_pricemonitoringbounds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::PriceMonitoringBounds >&
MarketData::pricemonitoringbounds() const {
  // @@protoc_insertion_point(field_list:vega.MarketData.priceMonitoringBounds)
  return pricemonitoringbounds_;
}

// -------------------------------------------------------------------

// PriceMonitoringBounds

// uint64 minValidPrice = 1 [json_name = "minValidPrice"];
inline void PriceMonitoringBounds::clear_minvalidprice() {
  minvalidprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceMonitoringBounds::_internal_minvalidprice() const {
  return minvalidprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceMonitoringBounds::minvalidprice() const {
  // @@protoc_insertion_point(field_get:vega.PriceMonitoringBounds.minValidPrice)
  return _internal_minvalidprice();
}
inline void PriceMonitoringBounds::_internal_set_minvalidprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  minvalidprice_ = value;
}
inline void PriceMonitoringBounds::set_minvalidprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_minvalidprice(value);
  // @@protoc_insertion_point(field_set:vega.PriceMonitoringBounds.minValidPrice)
}

// uint64 maxValidPrice = 2 [json_name = "maxValidPrice"];
inline void PriceMonitoringBounds::clear_maxvalidprice() {
  maxvalidprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceMonitoringBounds::_internal_maxvalidprice() const {
  return maxvalidprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceMonitoringBounds::maxvalidprice() const {
  // @@protoc_insertion_point(field_get:vega.PriceMonitoringBounds.maxValidPrice)
  return _internal_maxvalidprice();
}
inline void PriceMonitoringBounds::_internal_set_maxvalidprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  maxvalidprice_ = value;
}
inline void PriceMonitoringBounds::set_maxvalidprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maxvalidprice(value);
  // @@protoc_insertion_point(field_set:vega.PriceMonitoringBounds.maxValidPrice)
}

// .vega.PriceMonitoringTrigger trigger = 3 [json_name = "trigger"];
inline bool PriceMonitoringBounds::_internal_has_trigger() const {
  return this != internal_default_instance() && trigger_ != nullptr;
}
inline bool PriceMonitoringBounds::has_trigger() const {
  return _internal_has_trigger();
}
inline const ::vega::PriceMonitoringTrigger& PriceMonitoringBounds::_internal_trigger() const {
  const ::vega::PriceMonitoringTrigger* p = trigger_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::PriceMonitoringTrigger&>(
      ::vega::_PriceMonitoringTrigger_default_instance_);
}
inline const ::vega::PriceMonitoringTrigger& PriceMonitoringBounds::trigger() const {
  // @@protoc_insertion_point(field_get:vega.PriceMonitoringBounds.trigger)
  return _internal_trigger();
}
inline void PriceMonitoringBounds::unsafe_arena_set_allocated_trigger(
    ::vega::PriceMonitoringTrigger* trigger) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_);
  }
  trigger_ = trigger;
  if (trigger) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.PriceMonitoringBounds.trigger)
}
inline ::vega::PriceMonitoringTrigger* PriceMonitoringBounds::release_trigger() {

  ::vega::PriceMonitoringTrigger* temp = trigger_;
  trigger_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::PriceMonitoringTrigger* PriceMonitoringBounds::unsafe_arena_release_trigger() {
  // @@protoc_insertion_point(field_release:vega.PriceMonitoringBounds.trigger)

  ::vega::PriceMonitoringTrigger* temp = trigger_;
  trigger_ = nullptr;
  return temp;
}
inline ::vega::PriceMonitoringTrigger* PriceMonitoringBounds::_internal_mutable_trigger() {

  if (trigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::PriceMonitoringTrigger>(GetArena());
    trigger_ = p;
  }
  return trigger_;
}
inline ::vega::PriceMonitoringTrigger* PriceMonitoringBounds::mutable_trigger() {
  // @@protoc_insertion_point(field_mutable:vega.PriceMonitoringBounds.trigger)
  return _internal_mutable_trigger();
}
inline void PriceMonitoringBounds::set_allocated_trigger(::vega::PriceMonitoringTrigger* trigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_);
  }
  if (trigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger)->GetArena();
    if (message_arena != submessage_arena) {
      trigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }

  } else {

  }
  trigger_ = trigger;
  // @@protoc_insertion_point(field_set_allocated:vega.PriceMonitoringBounds.trigger)
}

// double referencePrice = 4 [json_name = "referencePrice"];
inline void PriceMonitoringBounds::clear_referenceprice() {
  referenceprice_ = 0;
}
inline double PriceMonitoringBounds::_internal_referenceprice() const {
  return referenceprice_;
}
inline double PriceMonitoringBounds::referenceprice() const {
  // @@protoc_insertion_point(field_get:vega.PriceMonitoringBounds.referencePrice)
  return _internal_referenceprice();
}
inline void PriceMonitoringBounds::_internal_set_referenceprice(double value) {

  referenceprice_ = value;
}
inline void PriceMonitoringBounds::set_referenceprice(double value) {
  _internal_set_referenceprice(value);
  // @@protoc_insertion_point(field_set:vega.PriceMonitoringBounds.referencePrice)
}

// -------------------------------------------------------------------

// ErrorDetail

// int32 code = 1 [json_name = "code"];
inline void ErrorDetail::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorDetail::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorDetail::code() const {
  // @@protoc_insertion_point(field_get:vega.ErrorDetail.code)
  return _internal_code();
}
inline void ErrorDetail::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {

  code_ = value;
}
inline void ErrorDetail::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:vega.ErrorDetail.code)
}

// string message = 2 [json_name = "message"];
inline void ErrorDetail::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ErrorDetail::message() const {
  // @@protoc_insertion_point(field_get:vega.ErrorDetail.message)
  return _internal_message();
}
inline void ErrorDetail::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:vega.ErrorDetail.message)
}
inline std::string* ErrorDetail::mutable_message() {
  // @@protoc_insertion_point(field_mutable:vega.ErrorDetail.message)
  return _internal_mutable_message();
}
inline const std::string& ErrorDetail::_internal_message() const {
  return message_.Get();
}
inline void ErrorDetail::_internal_set_message(const std::string& value) {

  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ErrorDetail::set_message(std::string&& value) {

  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ErrorDetail.message)
}
inline void ErrorDetail::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ErrorDetail.message)
}
inline void ErrorDetail::set_message(const char* value,
    size_t size) {

  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ErrorDetail.message)
}
inline std::string* ErrorDetail::_internal_mutable_message() {

  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ErrorDetail::release_message() {
  // @@protoc_insertion_point(field_release:vega.ErrorDetail.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorDetail::set_allocated_message(std::string* message) {
  if (message != nullptr) {

  } else {

  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ErrorDetail.message)
}

// string inner = 3 [json_name = "inner"];
inline void ErrorDetail::clear_inner() {
  inner_.ClearToEmpty();
}
inline const std::string& ErrorDetail::inner() const {
  // @@protoc_insertion_point(field_get:vega.ErrorDetail.inner)
  return _internal_inner();
}
inline void ErrorDetail::set_inner(const std::string& value) {
  _internal_set_inner(value);
  // @@protoc_insertion_point(field_set:vega.ErrorDetail.inner)
}
inline std::string* ErrorDetail::mutable_inner() {
  // @@protoc_insertion_point(field_mutable:vega.ErrorDetail.inner)
  return _internal_mutable_inner();
}
inline const std::string& ErrorDetail::_internal_inner() const {
  return inner_.Get();
}
inline void ErrorDetail::_internal_set_inner(const std::string& value) {

  inner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ErrorDetail::set_inner(std::string&& value) {

  inner_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ErrorDetail.inner)
}
inline void ErrorDetail::set_inner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  inner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ErrorDetail.inner)
}
inline void ErrorDetail::set_inner(const char* value,
    size_t size) {

  inner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ErrorDetail.inner)
}
inline std::string* ErrorDetail::_internal_mutable_inner() {

  return inner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ErrorDetail::release_inner() {
  // @@protoc_insertion_point(field_release:vega.ErrorDetail.inner)
  return inner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorDetail::set_allocated_inner(std::string* inner) {
  if (inner != nullptr) {

  } else {

  }
  inner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ErrorDetail.inner)
}

// -------------------------------------------------------------------

// Transaction

// bytes inputData = 1 [json_name = "inputData"];
inline void Transaction::clear_inputdata() {
  inputdata_.ClearToEmpty();
}
inline const std::string& Transaction::inputdata() const {
  // @@protoc_insertion_point(field_get:vega.Transaction.inputData)
  return _internal_inputdata();
}
inline void Transaction::set_inputdata(const std::string& value) {
  _internal_set_inputdata(value);
  // @@protoc_insertion_point(field_set:vega.Transaction.inputData)
}
inline std::string* Transaction::mutable_inputdata() {
  // @@protoc_insertion_point(field_mutable:vega.Transaction.inputData)
  return _internal_mutable_inputdata();
}
inline const std::string& Transaction::_internal_inputdata() const {
  return inputdata_.Get();
}
inline void Transaction::_internal_set_inputdata(const std::string& value) {

  inputdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction::set_inputdata(std::string&& value) {

  inputdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Transaction.inputData)
}
inline void Transaction::set_inputdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  inputdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Transaction.inputData)
}
inline void Transaction::set_inputdata(const void* value,
    size_t size) {

  inputdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Transaction.inputData)
}
inline std::string* Transaction::_internal_mutable_inputdata() {

  return inputdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction::release_inputdata() {
  // @@protoc_insertion_point(field_release:vega.Transaction.inputData)
  return inputdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_inputdata(std::string* inputdata) {
  if (inputdata != nullptr) {

  } else {

  }
  inputdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inputdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Transaction.inputData)
}

// uint64 nonce = 2 [json_name = "nonce"];
inline void Transaction::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::nonce() const {
  // @@protoc_insertion_point(field_get:vega.Transaction.nonce)
  return _internal_nonce();
}
inline void Transaction::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  nonce_ = value;
}
inline void Transaction::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:vega.Transaction.nonce)
}

// uint64 blockHeight = 3 [json_name = "blockHeight"];
inline void Transaction::clear_blockheight() {
  blockheight_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::_internal_blockheight() const {
  return blockheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::blockheight() const {
  // @@protoc_insertion_point(field_get:vega.Transaction.blockHeight)
  return _internal_blockheight();
}
inline void Transaction::_internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  blockheight_ = value;
}
inline void Transaction::set_blockheight(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blockheight(value);
  // @@protoc_insertion_point(field_set:vega.Transaction.blockHeight)
}

// bytes address = 1001 [json_name = "address"];
inline bool Transaction::_internal_has_address() const {
  return from_case() == kAddress;
}
inline void Transaction::set_has_address() {
  _oneof_case_[0] = kAddress;
}
inline void Transaction::clear_address() {
  if (_internal_has_address()) {
    from_.address_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_from();
  }
}
inline const std::string& Transaction::address() const {
  // @@protoc_insertion_point(field_get:vega.Transaction.address)
  return _internal_address();
}
inline void Transaction::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:vega.Transaction.address)
}
inline std::string* Transaction::mutable_address() {
  // @@protoc_insertion_point(field_mutable:vega.Transaction.address)
  return _internal_mutable_address();
}
inline const std::string& Transaction::_internal_address() const {
  if (_internal_has_address()) {
    return from_.address_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Transaction::_internal_set_address(const std::string& value) {
  if (!_internal_has_address()) {
    clear_from();
    set_has_address();
    from_.address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  from_.address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction::set_address(std::string&& value) {
  // @@protoc_insertion_point(field_set:vega.Transaction.address)
  if (!_internal_has_address()) {
    clear_from();
    set_has_address();
    from_.address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  from_.address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Transaction.address)
}
inline void Transaction::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_address()) {
    clear_from();
    set_has_address();
    from_.address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  from_.address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Transaction.address)
}
inline void Transaction::set_address(const void* value,
                             size_t size) {
  if (!_internal_has_address()) {
    clear_from();
    set_has_address();
    from_.address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  from_.address_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Transaction.address)
}
inline std::string* Transaction::_internal_mutable_address() {
  if (!_internal_has_address()) {
    clear_from();
    set_has_address();
    from_.address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return from_.address_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction::release_address() {
  // @@protoc_insertion_point(field_release:vega.Transaction.address)
  if (_internal_has_address()) {
    clear_has_from();
    return from_.address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Transaction::set_allocated_address(std::string* address) {
  if (has_from()) {
    clear_from();
  }
  if (address != nullptr) {
    set_has_address();
    from_.address_.UnsafeSetDefault(address);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(address);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:vega.Transaction.address)
}

// bytes pubKey = 1002 [json_name = "pubKey"];
inline bool Transaction::_internal_has_pubkey() const {
  return from_case() == kPubKey;
}
inline void Transaction::set_has_pubkey() {
  _oneof_case_[0] = kPubKey;
}
inline void Transaction::clear_pubkey() {
  if (_internal_has_pubkey()) {
    from_.pubkey_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_from();
  }
}
inline const std::string& Transaction::pubkey() const {
  // @@protoc_insertion_point(field_get:vega.Transaction.pubKey)
  return _internal_pubkey();
}
inline void Transaction::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:vega.Transaction.pubKey)
}
inline std::string* Transaction::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:vega.Transaction.pubKey)
  return _internal_mutable_pubkey();
}
inline const std::string& Transaction::_internal_pubkey() const {
  if (_internal_has_pubkey()) {
    return from_.pubkey_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Transaction::_internal_set_pubkey(const std::string& value) {
  if (!_internal_has_pubkey()) {
    clear_from();
    set_has_pubkey();
    from_.pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  from_.pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction::set_pubkey(std::string&& value) {
  // @@protoc_insertion_point(field_set:vega.Transaction.pubKey)
  if (!_internal_has_pubkey()) {
    clear_from();
    set_has_pubkey();
    from_.pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  from_.pubkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Transaction.pubKey)
}
inline void Transaction::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_pubkey()) {
    clear_from();
    set_has_pubkey();
    from_.pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  from_.pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Transaction.pubKey)
}
inline void Transaction::set_pubkey(const void* value,
                             size_t size) {
  if (!_internal_has_pubkey()) {
    clear_from();
    set_has_pubkey();
    from_.pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  from_.pubkey_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Transaction.pubKey)
}
inline std::string* Transaction::_internal_mutable_pubkey() {
  if (!_internal_has_pubkey()) {
    clear_from();
    set_has_pubkey();
    from_.pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return from_.pubkey_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction::release_pubkey() {
  // @@protoc_insertion_point(field_release:vega.Transaction.pubKey)
  if (_internal_has_pubkey()) {
    clear_has_from();
    return from_.pubkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Transaction::set_allocated_pubkey(std::string* pubkey) {
  if (has_from()) {
    clear_from();
  }
  if (pubkey != nullptr) {
    set_has_pubkey();
    from_.pubkey_.UnsafeSetDefault(pubkey);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(pubkey);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:vega.Transaction.pubKey)
}

inline bool Transaction::has_from() const {
  return from_case() != FROM_NOT_SET;
}
inline void Transaction::clear_has_from() {
  _oneof_case_[0] = FROM_NOT_SET;
}
inline Transaction::FromCase Transaction::from_case() const {
  return Transaction::FromCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Signature

// bytes sig = 1 [json_name = "sig"];
inline void Signature::clear_sig() {
  sig_.ClearToEmpty();
}
inline const std::string& Signature::sig() const {
  // @@protoc_insertion_point(field_get:vega.Signature.sig)
  return _internal_sig();
}
inline void Signature::set_sig(const std::string& value) {
  _internal_set_sig(value);
  // @@protoc_insertion_point(field_set:vega.Signature.sig)
}
inline std::string* Signature::mutable_sig() {
  // @@protoc_insertion_point(field_mutable:vega.Signature.sig)
  return _internal_mutable_sig();
}
inline const std::string& Signature::_internal_sig() const {
  return sig_.Get();
}
inline void Signature::_internal_set_sig(const std::string& value) {

  sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Signature::set_sig(std::string&& value) {

  sig_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Signature.sig)
}
inline void Signature::set_sig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Signature.sig)
}
inline void Signature::set_sig(const void* value,
    size_t size) {

  sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Signature.sig)
}
inline std::string* Signature::_internal_mutable_sig() {

  return sig_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Signature::release_sig() {
  // @@protoc_insertion_point(field_release:vega.Signature.sig)
  return sig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Signature::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {

  } else {

  }
  sig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Signature.sig)
}

// string algo = 2 [json_name = "algo"];
inline void Signature::clear_algo() {
  algo_.ClearToEmpty();
}
inline const std::string& Signature::algo() const {
  // @@protoc_insertion_point(field_get:vega.Signature.algo)
  return _internal_algo();
}
inline void Signature::set_algo(const std::string& value) {
  _internal_set_algo(value);
  // @@protoc_insertion_point(field_set:vega.Signature.algo)
}
inline std::string* Signature::mutable_algo() {
  // @@protoc_insertion_point(field_mutable:vega.Signature.algo)
  return _internal_mutable_algo();
}
inline const std::string& Signature::_internal_algo() const {
  return algo_.Get();
}
inline void Signature::_internal_set_algo(const std::string& value) {

  algo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Signature::set_algo(std::string&& value) {

  algo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Signature.algo)
}
inline void Signature::set_algo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  algo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Signature.algo)
}
inline void Signature::set_algo(const char* value,
    size_t size) {

  algo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Signature.algo)
}
inline std::string* Signature::_internal_mutable_algo() {

  return algo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Signature::release_algo() {
  // @@protoc_insertion_point(field_release:vega.Signature.algo)
  return algo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Signature::set_allocated_algo(std::string* algo) {
  if (algo != nullptr) {

  } else {

  }
  algo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Signature.algo)
}

// uint64 version = 3 [json_name = "version"];
inline void Signature::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Signature::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Signature::version() const {
  // @@protoc_insertion_point(field_get:vega.Signature.version)
  return _internal_version();
}
inline void Signature::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  version_ = value;
}
inline void Signature::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:vega.Signature.version)
}

// -------------------------------------------------------------------

// SignedBundle

// bytes tx = 1 [json_name = "tx"];
inline void SignedBundle::clear_tx() {
  tx_.ClearToEmpty();
}
inline const std::string& SignedBundle::tx() const {
  // @@protoc_insertion_point(field_get:vega.SignedBundle.tx)
  return _internal_tx();
}
inline void SignedBundle::set_tx(const std::string& value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:vega.SignedBundle.tx)
}
inline std::string* SignedBundle::mutable_tx() {
  // @@protoc_insertion_point(field_mutable:vega.SignedBundle.tx)
  return _internal_mutable_tx();
}
inline const std::string& SignedBundle::_internal_tx() const {
  return tx_.Get();
}
inline void SignedBundle::_internal_set_tx(const std::string& value) {

  tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignedBundle::set_tx(std::string&& value) {

  tx_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.SignedBundle.tx)
}
inline void SignedBundle::set_tx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.SignedBundle.tx)
}
inline void SignedBundle::set_tx(const void* value,
    size_t size) {

  tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.SignedBundle.tx)
}
inline std::string* SignedBundle::_internal_mutable_tx() {

  return tx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignedBundle::release_tx() {
  // @@protoc_insertion_point(field_release:vega.SignedBundle.tx)
  return tx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignedBundle::set_allocated_tx(std::string* tx) {
  if (tx != nullptr) {

  } else {

  }
  tx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.SignedBundle.tx)
}

// .vega.Signature sig = 2 [json_name = "sig"];
inline bool SignedBundle::_internal_has_sig() const {
  return this != internal_default_instance() && sig_ != nullptr;
}
inline bool SignedBundle::has_sig() const {
  return _internal_has_sig();
}
inline void SignedBundle::clear_sig() {
  if (GetArena() == nullptr && sig_ != nullptr) {
    delete sig_;
  }
  sig_ = nullptr;
}
inline const ::vega::Signature& SignedBundle::_internal_sig() const {
  const ::vega::Signature* p = sig_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::Signature&>(
      ::vega::_Signature_default_instance_);
}
inline const ::vega::Signature& SignedBundle::sig() const {
  // @@protoc_insertion_point(field_get:vega.SignedBundle.sig)
  return _internal_sig();
}
inline void SignedBundle::unsafe_arena_set_allocated_sig(
    ::vega::Signature* sig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sig_);
  }
  sig_ = sig;
  if (sig) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.SignedBundle.sig)
}
inline ::vega::Signature* SignedBundle::release_sig() {

  ::vega::Signature* temp = sig_;
  sig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::Signature* SignedBundle::unsafe_arena_release_sig() {
  // @@protoc_insertion_point(field_release:vega.SignedBundle.sig)

  ::vega::Signature* temp = sig_;
  sig_ = nullptr;
  return temp;
}
inline ::vega::Signature* SignedBundle::_internal_mutable_sig() {

  if (sig_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::Signature>(GetArena());
    sig_ = p;
  }
  return sig_;
}
inline ::vega::Signature* SignedBundle::mutable_sig() {
  // @@protoc_insertion_point(field_mutable:vega.SignedBundle.sig)
  return _internal_mutable_sig();
}
inline void SignedBundle::set_allocated_sig(::vega::Signature* sig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sig_;
  }
  if (sig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sig);
    if (message_arena != submessage_arena) {
      sig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sig, submessage_arena);
    }

  } else {

  }
  sig_ = sig;
  // @@protoc_insertion_point(field_set_allocated:vega.SignedBundle.sig)
}

// -------------------------------------------------------------------

// NodeSignature

// string ID = 1 [json_name = "ID"];
inline void NodeSignature::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& NodeSignature::id() const {
  // @@protoc_insertion_point(field_get:vega.NodeSignature.ID)
  return _internal_id();
}
inline void NodeSignature::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.NodeSignature.ID)
}
inline std::string* NodeSignature::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.NodeSignature.ID)
  return _internal_mutable_id();
}
inline const std::string& NodeSignature::_internal_id() const {
  return id_.Get();
}
inline void NodeSignature::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NodeSignature::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.NodeSignature.ID)
}
inline void NodeSignature::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.NodeSignature.ID)
}
inline void NodeSignature::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.NodeSignature.ID)
}
inline std::string* NodeSignature::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NodeSignature::release_id() {
  // @@protoc_insertion_point(field_release:vega.NodeSignature.ID)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeSignature::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.NodeSignature.ID)
}

// bytes sig = 2 [json_name = "sig"];
inline void NodeSignature::clear_sig() {
  sig_.ClearToEmpty();
}
inline const std::string& NodeSignature::sig() const {
  // @@protoc_insertion_point(field_get:vega.NodeSignature.sig)
  return _internal_sig();
}
inline void NodeSignature::set_sig(const std::string& value) {
  _internal_set_sig(value);
  // @@protoc_insertion_point(field_set:vega.NodeSignature.sig)
}
inline std::string* NodeSignature::mutable_sig() {
  // @@protoc_insertion_point(field_mutable:vega.NodeSignature.sig)
  return _internal_mutable_sig();
}
inline const std::string& NodeSignature::_internal_sig() const {
  return sig_.Get();
}
inline void NodeSignature::_internal_set_sig(const std::string& value) {

  sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NodeSignature::set_sig(std::string&& value) {

  sig_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.NodeSignature.sig)
}
inline void NodeSignature::set_sig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.NodeSignature.sig)
}
inline void NodeSignature::set_sig(const void* value,
    size_t size) {

  sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.NodeSignature.sig)
}
inline std::string* NodeSignature::_internal_mutable_sig() {

  return sig_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NodeSignature::release_sig() {
  // @@protoc_insertion_point(field_release:vega.NodeSignature.sig)
  return sig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeSignature::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {

  } else {

  }
  sig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.NodeSignature.sig)
}

// .vega.NodeSignatureKind kind = 3 [json_name = "kind"];
inline void NodeSignature::clear_kind() {
  kind_ = 0;
}
inline ::vega::NodeSignatureKind NodeSignature::_internal_kind() const {
  return static_cast< ::vega::NodeSignatureKind >(kind_);
}
inline ::vega::NodeSignatureKind NodeSignature::kind() const {
  // @@protoc_insertion_point(field_get:vega.NodeSignature.kind)
  return _internal_kind();
}
inline void NodeSignature::_internal_set_kind(::vega::NodeSignatureKind value) {

  kind_ = value;
}
inline void NodeSignature::set_kind(::vega::NodeSignatureKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:vega.NodeSignature.kind)
}

// -------------------------------------------------------------------

// NetworkParameter

// string Key = 1 [json_name = "Key"];
inline void NetworkParameter::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& NetworkParameter::key() const {
  // @@protoc_insertion_point(field_get:vega.NetworkParameter.Key)
  return _internal_key();
}
inline void NetworkParameter::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:vega.NetworkParameter.Key)
}
inline std::string* NetworkParameter::mutable_key() {
  // @@protoc_insertion_point(field_mutable:vega.NetworkParameter.Key)
  return _internal_mutable_key();
}
inline const std::string& NetworkParameter::_internal_key() const {
  return key_.Get();
}
inline void NetworkParameter::_internal_set_key(const std::string& value) {

  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkParameter::set_key(std::string&& value) {

  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.NetworkParameter.Key)
}
inline void NetworkParameter::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.NetworkParameter.Key)
}
inline void NetworkParameter::set_key(const char* value,
    size_t size) {

  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.NetworkParameter.Key)
}
inline std::string* NetworkParameter::_internal_mutable_key() {

  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkParameter::release_key() {
  // @@protoc_insertion_point(field_release:vega.NetworkParameter.Key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkParameter::set_allocated_key(std::string* key) {
  if (key != nullptr) {

  } else {

  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.NetworkParameter.Key)
}

// string Value = 2 [json_name = "Value"];
inline void NetworkParameter::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& NetworkParameter::value() const {
  // @@protoc_insertion_point(field_get:vega.NetworkParameter.Value)
  return _internal_value();
}
inline void NetworkParameter::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:vega.NetworkParameter.Value)
}
inline std::string* NetworkParameter::mutable_value() {
  // @@protoc_insertion_point(field_mutable:vega.NetworkParameter.Value)
  return _internal_mutable_value();
}
inline const std::string& NetworkParameter::_internal_value() const {
  return value_.Get();
}
inline void NetworkParameter::_internal_set_value(const std::string& value) {

  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkParameter::set_value(std::string&& value) {

  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.NetworkParameter.Value)
}
inline void NetworkParameter::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.NetworkParameter.Value)
}
inline void NetworkParameter::set_value(const char* value,
    size_t size) {

  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.NetworkParameter.Value)
}
inline std::string* NetworkParameter::_internal_mutable_value() {

  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkParameter::release_value() {
  // @@protoc_insertion_point(field_release:vega.NetworkParameter.Value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkParameter::set_allocated_value(std::string* value) {
  if (value != nullptr) {

  } else {

  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.NetworkParameter.Value)
}

// -------------------------------------------------------------------

// LiquidityOrder

// .vega.PeggedReference reference = 1 [json_name = "reference"];
inline void LiquidityOrder::clear_reference() {
  reference_ = 0;
}
inline ::vega::PeggedReference LiquidityOrder::_internal_reference() const {
  return static_cast< ::vega::PeggedReference >(reference_);
}
inline ::vega::PeggedReference LiquidityOrder::reference() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityOrder.reference)
  return _internal_reference();
}
inline void LiquidityOrder::_internal_set_reference(::vega::PeggedReference value) {

  reference_ = value;
}
inline void LiquidityOrder::set_reference(::vega::PeggedReference value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityOrder.reference)
}

// uint32 proportion = 2 [json_name = "proportion"];
inline void LiquidityOrder::clear_proportion() {
  proportion_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LiquidityOrder::_internal_proportion() const {
  return proportion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LiquidityOrder::proportion() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityOrder.proportion)
  return _internal_proportion();
}
inline void LiquidityOrder::_internal_set_proportion(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  proportion_ = value;
}
inline void LiquidityOrder::set_proportion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_proportion(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityOrder.proportion)
}

// int64 offset = 3 [json_name = "offset"];
inline void LiquidityOrder::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiquidityOrder::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiquidityOrder::offset() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityOrder.offset)
  return _internal_offset();
}
inline void LiquidityOrder::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {

  offset_ = value;
}
inline void LiquidityOrder::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityOrder.offset)
}

// -------------------------------------------------------------------

// LiquidityProvisionSubmission

// string marketID = 1 [json_name = "marketID", (.validator.field) = {
inline void LiquidityProvisionSubmission::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& LiquidityProvisionSubmission::marketid() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvisionSubmission.marketID)
  return _internal_marketid();
}
inline void LiquidityProvisionSubmission::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvisionSubmission.marketID)
}
inline std::string* LiquidityProvisionSubmission::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvisionSubmission.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& LiquidityProvisionSubmission::_internal_marketid() const {
  return marketid_.Get();
}
inline void LiquidityProvisionSubmission::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvisionSubmission::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProvisionSubmission.marketID)
}
inline void LiquidityProvisionSubmission::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProvisionSubmission.marketID)
}
inline void LiquidityProvisionSubmission::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProvisionSubmission.marketID)
}
inline std::string* LiquidityProvisionSubmission::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvisionSubmission::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProvisionSubmission.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvisionSubmission::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProvisionSubmission.marketID)
}

// uint64 commitmentAmount = 2 [json_name = "commitmentAmount"];
inline void LiquidityProvisionSubmission::clear_commitmentamount() {
  commitmentamount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LiquidityProvisionSubmission::_internal_commitmentamount() const {
  return commitmentamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LiquidityProvisionSubmission::commitmentamount() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvisionSubmission.commitmentAmount)
  return _internal_commitmentamount();
}
inline void LiquidityProvisionSubmission::_internal_set_commitmentamount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  commitmentamount_ = value;
}
inline void LiquidityProvisionSubmission::set_commitmentamount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commitmentamount(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvisionSubmission.commitmentAmount)
}

// string fee = 3 [json_name = "fee"];
inline void LiquidityProvisionSubmission::clear_fee() {
  fee_.ClearToEmpty();
}
inline const std::string& LiquidityProvisionSubmission::fee() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvisionSubmission.fee)
  return _internal_fee();
}
inline void LiquidityProvisionSubmission::set_fee(const std::string& value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvisionSubmission.fee)
}
inline std::string* LiquidityProvisionSubmission::mutable_fee() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvisionSubmission.fee)
  return _internal_mutable_fee();
}
inline const std::string& LiquidityProvisionSubmission::_internal_fee() const {
  return fee_.Get();
}
inline void LiquidityProvisionSubmission::_internal_set_fee(const std::string& value) {

  fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvisionSubmission::set_fee(std::string&& value) {

  fee_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProvisionSubmission.fee)
}
inline void LiquidityProvisionSubmission::set_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProvisionSubmission.fee)
}
inline void LiquidityProvisionSubmission::set_fee(const char* value,
    size_t size) {

  fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProvisionSubmission.fee)
}
inline std::string* LiquidityProvisionSubmission::_internal_mutable_fee() {

  return fee_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvisionSubmission::release_fee() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProvisionSubmission.fee)
  return fee_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvisionSubmission::set_allocated_fee(std::string* fee) {
  if (fee != nullptr) {

  } else {

  }
  fee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProvisionSubmission.fee)
}

// repeated .vega.LiquidityOrder Sells = 4 [json_name = "Sells"];
inline int LiquidityProvisionSubmission::_internal_sells_size() const {
  return sells_.size();
}
inline int LiquidityProvisionSubmission::sells_size() const {
  return _internal_sells_size();
}
inline void LiquidityProvisionSubmission::clear_sells() {
  sells_.Clear();
}
inline ::vega::LiquidityOrder* LiquidityProvisionSubmission::mutable_sells(int index) {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvisionSubmission.Sells)
  return sells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >*
LiquidityProvisionSubmission::mutable_sells() {
  // @@protoc_insertion_point(field_mutable_list:vega.LiquidityProvisionSubmission.Sells)
  return &sells_;
}
inline const ::vega::LiquidityOrder& LiquidityProvisionSubmission::_internal_sells(int index) const {
  return sells_.Get(index);
}
inline const ::vega::LiquidityOrder& LiquidityProvisionSubmission::sells(int index) const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvisionSubmission.Sells)
  return _internal_sells(index);
}
inline ::vega::LiquidityOrder* LiquidityProvisionSubmission::_internal_add_sells() {
  return sells_.Add();
}
inline ::vega::LiquidityOrder* LiquidityProvisionSubmission::add_sells() {
  // @@protoc_insertion_point(field_add:vega.LiquidityProvisionSubmission.Sells)
  return _internal_add_sells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >&
LiquidityProvisionSubmission::sells() const {
  // @@protoc_insertion_point(field_list:vega.LiquidityProvisionSubmission.Sells)
  return sells_;
}

// repeated .vega.LiquidityOrder Buys = 5 [json_name = "Buys"];
inline int LiquidityProvisionSubmission::_internal_buys_size() const {
  return buys_.size();
}
inline int LiquidityProvisionSubmission::buys_size() const {
  return _internal_buys_size();
}
inline void LiquidityProvisionSubmission::clear_buys() {
  buys_.Clear();
}
inline ::vega::LiquidityOrder* LiquidityProvisionSubmission::mutable_buys(int index) {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvisionSubmission.Buys)
  return buys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >*
LiquidityProvisionSubmission::mutable_buys() {
  // @@protoc_insertion_point(field_mutable_list:vega.LiquidityProvisionSubmission.Buys)
  return &buys_;
}
inline const ::vega::LiquidityOrder& LiquidityProvisionSubmission::_internal_buys(int index) const {
  return buys_.Get(index);
}
inline const ::vega::LiquidityOrder& LiquidityProvisionSubmission::buys(int index) const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvisionSubmission.Buys)
  return _internal_buys(index);
}
inline ::vega::LiquidityOrder* LiquidityProvisionSubmission::_internal_add_buys() {
  return buys_.Add();
}
inline ::vega::LiquidityOrder* LiquidityProvisionSubmission::add_buys() {
  // @@protoc_insertion_point(field_add:vega.LiquidityProvisionSubmission.Buys)
  return _internal_add_buys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrder >&
LiquidityProvisionSubmission::buys() const {
  // @@protoc_insertion_point(field_list:vega.LiquidityProvisionSubmission.Buys)
  return buys_;
}

// -------------------------------------------------------------------

// LiquidityOrderReference

// string orderID = 1 [json_name = "orderID"];
inline void LiquidityOrderReference::clear_orderid() {
  orderid_.ClearToEmpty();
}
inline const std::string& LiquidityOrderReference::orderid() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityOrderReference.orderID)
  return _internal_orderid();
}
inline void LiquidityOrderReference::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityOrderReference.orderID)
}
inline std::string* LiquidityOrderReference::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityOrderReference.orderID)
  return _internal_mutable_orderid();
}
inline const std::string& LiquidityOrderReference::_internal_orderid() const {
  return orderid_.Get();
}
inline void LiquidityOrderReference::_internal_set_orderid(const std::string& value) {

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityOrderReference::set_orderid(std::string&& value) {

  orderid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityOrderReference.orderID)
}
inline void LiquidityOrderReference::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityOrderReference.orderID)
}
inline void LiquidityOrderReference::set_orderid(const char* value,
    size_t size) {

  orderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityOrderReference.orderID)
}
inline std::string* LiquidityOrderReference::_internal_mutable_orderid() {

  return orderid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityOrderReference::release_orderid() {
  // @@protoc_insertion_point(field_release:vega.LiquidityOrderReference.orderID)
  return orderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityOrderReference::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {

  } else {

  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityOrderReference.orderID)
}

// .vega.LiquidityOrder liquidityOrder = 2 [json_name = "liquidityOrder"];
inline bool LiquidityOrderReference::_internal_has_liquidityorder() const {
  return this != internal_default_instance() && liquidityorder_ != nullptr;
}
inline bool LiquidityOrderReference::has_liquidityorder() const {
  return _internal_has_liquidityorder();
}
inline void LiquidityOrderReference::clear_liquidityorder() {
  if (GetArena() == nullptr && liquidityorder_ != nullptr) {
    delete liquidityorder_;
  }
  liquidityorder_ = nullptr;
}
inline const ::vega::LiquidityOrder& LiquidityOrderReference::_internal_liquidityorder() const {
  const ::vega::LiquidityOrder* p = liquidityorder_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::LiquidityOrder&>(
      ::vega::_LiquidityOrder_default_instance_);
}
inline const ::vega::LiquidityOrder& LiquidityOrderReference::liquidityorder() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityOrderReference.liquidityOrder)
  return _internal_liquidityorder();
}
inline void LiquidityOrderReference::unsafe_arena_set_allocated_liquidityorder(
    ::vega::LiquidityOrder* liquidityorder) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(liquidityorder_);
  }
  liquidityorder_ = liquidityorder;
  if (liquidityorder) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.LiquidityOrderReference.liquidityOrder)
}
inline ::vega::LiquidityOrder* LiquidityOrderReference::release_liquidityorder() {

  ::vega::LiquidityOrder* temp = liquidityorder_;
  liquidityorder_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::LiquidityOrder* LiquidityOrderReference::unsafe_arena_release_liquidityorder() {
  // @@protoc_insertion_point(field_release:vega.LiquidityOrderReference.liquidityOrder)

  ::vega::LiquidityOrder* temp = liquidityorder_;
  liquidityorder_ = nullptr;
  return temp;
}
inline ::vega::LiquidityOrder* LiquidityOrderReference::_internal_mutable_liquidityorder() {

  if (liquidityorder_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::LiquidityOrder>(GetArena());
    liquidityorder_ = p;
  }
  return liquidityorder_;
}
inline ::vega::LiquidityOrder* LiquidityOrderReference::mutable_liquidityorder() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityOrderReference.liquidityOrder)
  return _internal_mutable_liquidityorder();
}
inline void LiquidityOrderReference::set_allocated_liquidityorder(::vega::LiquidityOrder* liquidityorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete liquidityorder_;
  }
  if (liquidityorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(liquidityorder);
    if (message_arena != submessage_arena) {
      liquidityorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, liquidityorder, submessage_arena);
    }

  } else {

  }
  liquidityorder_ = liquidityorder;
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityOrderReference.liquidityOrder)
}

// -------------------------------------------------------------------

// LiquidityProvision

// string id = 1 [json_name = "id"];
inline void LiquidityProvision::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& LiquidityProvision::id() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.id)
  return _internal_id();
}
inline void LiquidityProvision::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.id)
}
inline std::string* LiquidityProvision::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvision.id)
  return _internal_mutable_id();
}
inline const std::string& LiquidityProvision::_internal_id() const {
  return id_.Get();
}
inline void LiquidityProvision::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvision::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProvision.id)
}
inline void LiquidityProvision::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProvision.id)
}
inline void LiquidityProvision::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProvision.id)
}
inline std::string* LiquidityProvision::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvision::release_id() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProvision.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvision::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProvision.id)
}

// string partyID = 2 [json_name = "partyID"];
inline void LiquidityProvision::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& LiquidityProvision::partyid() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.partyID)
  return _internal_partyid();
}
inline void LiquidityProvision::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.partyID)
}
inline std::string* LiquidityProvision::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvision.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& LiquidityProvision::_internal_partyid() const {
  return partyid_.Get();
}
inline void LiquidityProvision::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvision::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProvision.partyID)
}
inline void LiquidityProvision::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProvision.partyID)
}
inline void LiquidityProvision::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProvision.partyID)
}
inline std::string* LiquidityProvision::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvision::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProvision.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvision::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProvision.partyID)
}

// int64 createdAt = 3 [json_name = "createdAt"];
inline void LiquidityProvision::clear_createdat() {
  createdat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiquidityProvision::_internal_createdat() const {
  return createdat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiquidityProvision::createdat() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.createdAt)
  return _internal_createdat();
}
inline void LiquidityProvision::_internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {

  createdat_ = value;
}
inline void LiquidityProvision::set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.createdAt)
}

// int64 updatedAt = 4 [json_name = "updatedAt"];
inline void LiquidityProvision::clear_updatedat() {
  updatedat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiquidityProvision::_internal_updatedat() const {
  return updatedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiquidityProvision::updatedat() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.updatedAt)
  return _internal_updatedat();
}
inline void LiquidityProvision::_internal_set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {

  updatedat_ = value;
}
inline void LiquidityProvision::set_updatedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updatedat(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.updatedAt)
}

// string marketID = 5 [json_name = "marketID", (.validator.field) = {
inline void LiquidityProvision::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& LiquidityProvision::marketid() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.marketID)
  return _internal_marketid();
}
inline void LiquidityProvision::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.marketID)
}
inline std::string* LiquidityProvision::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvision.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& LiquidityProvision::_internal_marketid() const {
  return marketid_.Get();
}
inline void LiquidityProvision::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvision::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProvision.marketID)
}
inline void LiquidityProvision::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProvision.marketID)
}
inline void LiquidityProvision::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProvision.marketID)
}
inline std::string* LiquidityProvision::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvision::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProvision.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvision::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProvision.marketID)
}

// uint64 commitmentAmount = 6 [json_name = "commitmentAmount"];
inline void LiquidityProvision::clear_commitmentamount() {
  commitmentamount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LiquidityProvision::_internal_commitmentamount() const {
  return commitmentamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LiquidityProvision::commitmentamount() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.commitmentAmount)
  return _internal_commitmentamount();
}
inline void LiquidityProvision::_internal_set_commitmentamount(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  commitmentamount_ = value;
}
inline void LiquidityProvision::set_commitmentamount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commitmentamount(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.commitmentAmount)
}

// string fee = 7 [json_name = "fee"];
inline void LiquidityProvision::clear_fee() {
  fee_.ClearToEmpty();
}
inline const std::string& LiquidityProvision::fee() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.fee)
  return _internal_fee();
}
inline void LiquidityProvision::set_fee(const std::string& value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.fee)
}
inline std::string* LiquidityProvision::mutable_fee() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvision.fee)
  return _internal_mutable_fee();
}
inline const std::string& LiquidityProvision::_internal_fee() const {
  return fee_.Get();
}
inline void LiquidityProvision::_internal_set_fee(const std::string& value) {

  fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvision::set_fee(std::string&& value) {

  fee_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProvision.fee)
}
inline void LiquidityProvision::set_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProvision.fee)
}
inline void LiquidityProvision::set_fee(const char* value,
    size_t size) {

  fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProvision.fee)
}
inline std::string* LiquidityProvision::_internal_mutable_fee() {

  return fee_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvision::release_fee() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProvision.fee)
  return fee_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvision::set_allocated_fee(std::string* fee) {
  if (fee != nullptr) {

  } else {

  }
  fee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProvision.fee)
}

// repeated .vega.LiquidityOrderReference sells = 8 [json_name = "sells"];
inline int LiquidityProvision::_internal_sells_size() const {
  return sells_.size();
}
inline int LiquidityProvision::sells_size() const {
  return _internal_sells_size();
}
inline void LiquidityProvision::clear_sells() {
  sells_.Clear();
}
inline ::vega::LiquidityOrderReference* LiquidityProvision::mutable_sells(int index) {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvision.sells)
  return sells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >*
LiquidityProvision::mutable_sells() {
  // @@protoc_insertion_point(field_mutable_list:vega.LiquidityProvision.sells)
  return &sells_;
}
inline const ::vega::LiquidityOrderReference& LiquidityProvision::_internal_sells(int index) const {
  return sells_.Get(index);
}
inline const ::vega::LiquidityOrderReference& LiquidityProvision::sells(int index) const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.sells)
  return _internal_sells(index);
}
inline ::vega::LiquidityOrderReference* LiquidityProvision::_internal_add_sells() {
  return sells_.Add();
}
inline ::vega::LiquidityOrderReference* LiquidityProvision::add_sells() {
  // @@protoc_insertion_point(field_add:vega.LiquidityProvision.sells)
  return _internal_add_sells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >&
LiquidityProvision::sells() const {
  // @@protoc_insertion_point(field_list:vega.LiquidityProvision.sells)
  return sells_;
}

// repeated .vega.LiquidityOrderReference buys = 9 [json_name = "buys"];
inline int LiquidityProvision::_internal_buys_size() const {
  return buys_.size();
}
inline int LiquidityProvision::buys_size() const {
  return _internal_buys_size();
}
inline void LiquidityProvision::clear_buys() {
  buys_.Clear();
}
inline ::vega::LiquidityOrderReference* LiquidityProvision::mutable_buys(int index) {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvision.buys)
  return buys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >*
LiquidityProvision::mutable_buys() {
  // @@protoc_insertion_point(field_mutable_list:vega.LiquidityProvision.buys)
  return &buys_;
}
inline const ::vega::LiquidityOrderReference& LiquidityProvision::_internal_buys(int index) const {
  return buys_.Get(index);
}
inline const ::vega::LiquidityOrderReference& LiquidityProvision::buys(int index) const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.buys)
  return _internal_buys(index);
}
inline ::vega::LiquidityOrderReference* LiquidityProvision::_internal_add_buys() {
  return buys_.Add();
}
inline ::vega::LiquidityOrderReference* LiquidityProvision::add_buys() {
  // @@protoc_insertion_point(field_add:vega.LiquidityProvision.buys)
  return _internal_add_buys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::LiquidityOrderReference >&
LiquidityProvision::buys() const {
  // @@protoc_insertion_point(field_list:vega.LiquidityProvision.buys)
  return buys_;
}

// string version = 10 [json_name = "version"];
inline void LiquidityProvision::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& LiquidityProvision::version() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.version)
  return _internal_version();
}
inline void LiquidityProvision::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.version)
}
inline std::string* LiquidityProvision::mutable_version() {
  // @@protoc_insertion_point(field_mutable:vega.LiquidityProvision.version)
  return _internal_mutable_version();
}
inline const std::string& LiquidityProvision::_internal_version() const {
  return version_.Get();
}
inline void LiquidityProvision::_internal_set_version(const std::string& value) {

  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LiquidityProvision::set_version(std::string&& value) {

  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LiquidityProvision.version)
}
inline void LiquidityProvision::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LiquidityProvision.version)
}
inline void LiquidityProvision::set_version(const char* value,
    size_t size) {

  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LiquidityProvision.version)
}
inline std::string* LiquidityProvision::_internal_mutable_version() {

  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LiquidityProvision::release_version() {
  // @@protoc_insertion_point(field_release:vega.LiquidityProvision.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LiquidityProvision::set_allocated_version(std::string* version) {
  if (version != nullptr) {

  } else {

  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LiquidityProvision.version)
}

// .vega.LiquidityProvision.Status status = 11 [json_name = "status"];
inline void LiquidityProvision::clear_status() {
  status_ = 0;
}
inline ::vega::LiquidityProvision_Status LiquidityProvision::_internal_status() const {
  return static_cast< ::vega::LiquidityProvision_Status >(status_);
}
inline ::vega::LiquidityProvision_Status LiquidityProvision::status() const {
  // @@protoc_insertion_point(field_get:vega.LiquidityProvision.status)
  return _internal_status();
}
inline void LiquidityProvision::_internal_set_status(::vega::LiquidityProvision_Status value) {

  status_ = value;
}
inline void LiquidityProvision::set_status(::vega::LiquidityProvision_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:vega.LiquidityProvision.status)
}

// -------------------------------------------------------------------

// EthereumConfig

// string networkId = 1 [json_name = "networkId"];
inline void EthereumConfig::clear_networkid() {
  networkid_.ClearToEmpty();
}
inline const std::string& EthereumConfig::networkid() const {
  // @@protoc_insertion_point(field_get:vega.EthereumConfig.networkId)
  return _internal_networkid();
}
inline void EthereumConfig::set_networkid(const std::string& value) {
  _internal_set_networkid(value);
  // @@protoc_insertion_point(field_set:vega.EthereumConfig.networkId)
}
inline std::string* EthereumConfig::mutable_networkid() {
  // @@protoc_insertion_point(field_mutable:vega.EthereumConfig.networkId)
  return _internal_mutable_networkid();
}
inline const std::string& EthereumConfig::_internal_networkid() const {
  return networkid_.Get();
}
inline void EthereumConfig::_internal_set_networkid(const std::string& value) {

  networkid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EthereumConfig::set_networkid(std::string&& value) {

  networkid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.EthereumConfig.networkId)
}
inline void EthereumConfig::set_networkid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  networkid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.EthereumConfig.networkId)
}
inline void EthereumConfig::set_networkid(const char* value,
    size_t size) {

  networkid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.EthereumConfig.networkId)
}
inline std::string* EthereumConfig::_internal_mutable_networkid() {

  return networkid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EthereumConfig::release_networkid() {
  // @@protoc_insertion_point(field_release:vega.EthereumConfig.networkId)
  return networkid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EthereumConfig::set_allocated_networkid(std::string* networkid) {
  if (networkid != nullptr) {

  } else {

  }
  networkid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), networkid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.EthereumConfig.networkId)
}

// string chainId = 2 [json_name = "chainId"];
inline void EthereumConfig::clear_chainid() {
  chainid_.ClearToEmpty();
}
inline const std::string& EthereumConfig::chainid() const {
  // @@protoc_insertion_point(field_get:vega.EthereumConfig.chainId)
  return _internal_chainid();
}
inline void EthereumConfig::set_chainid(const std::string& value) {
  _internal_set_chainid(value);
  // @@protoc_insertion_point(field_set:vega.EthereumConfig.chainId)
}
inline std::string* EthereumConfig::mutable_chainid() {
  // @@protoc_insertion_point(field_mutable:vega.EthereumConfig.chainId)
  return _internal_mutable_chainid();
}
inline const std::string& EthereumConfig::_internal_chainid() const {
  return chainid_.Get();
}
inline void EthereumConfig::_internal_set_chainid(const std::string& value) {

  chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EthereumConfig::set_chainid(std::string&& value) {

  chainid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.EthereumConfig.chainId)
}
inline void EthereumConfig::set_chainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.EthereumConfig.chainId)
}
inline void EthereumConfig::set_chainid(const char* value,
    size_t size) {

  chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.EthereumConfig.chainId)
}
inline std::string* EthereumConfig::_internal_mutable_chainid() {

  return chainid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EthereumConfig::release_chainid() {
  // @@protoc_insertion_point(field_release:vega.EthereumConfig.chainId)
  return chainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EthereumConfig::set_allocated_chainid(std::string* chainid) {
  if (chainid != nullptr) {

  } else {

  }
  chainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.EthereumConfig.chainId)
}

// string bridgeAddress = 3 [json_name = "bridgeAddress"];
inline void EthereumConfig::clear_bridgeaddress() {
  bridgeaddress_.ClearToEmpty();
}
inline const std::string& EthereumConfig::bridgeaddress() const {
  // @@protoc_insertion_point(field_get:vega.EthereumConfig.bridgeAddress)
  return _internal_bridgeaddress();
}
inline void EthereumConfig::set_bridgeaddress(const std::string& value) {
  _internal_set_bridgeaddress(value);
  // @@protoc_insertion_point(field_set:vega.EthereumConfig.bridgeAddress)
}
inline std::string* EthereumConfig::mutable_bridgeaddress() {
  // @@protoc_insertion_point(field_mutable:vega.EthereumConfig.bridgeAddress)
  return _internal_mutable_bridgeaddress();
}
inline const std::string& EthereumConfig::_internal_bridgeaddress() const {
  return bridgeaddress_.Get();
}
inline void EthereumConfig::_internal_set_bridgeaddress(const std::string& value) {

  bridgeaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EthereumConfig::set_bridgeaddress(std::string&& value) {

  bridgeaddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.EthereumConfig.bridgeAddress)
}
inline void EthereumConfig::set_bridgeaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  bridgeaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.EthereumConfig.bridgeAddress)
}
inline void EthereumConfig::set_bridgeaddress(const char* value,
    size_t size) {

  bridgeaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.EthereumConfig.bridgeAddress)
}
inline std::string* EthereumConfig::_internal_mutable_bridgeaddress() {

  return bridgeaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EthereumConfig::release_bridgeaddress() {
  // @@protoc_insertion_point(field_release:vega.EthereumConfig.bridgeAddress)
  return bridgeaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EthereumConfig::set_allocated_bridgeaddress(std::string* bridgeaddress) {
  if (bridgeaddress != nullptr) {

  } else {

  }
  bridgeaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bridgeaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.EthereumConfig.bridgeAddress)
}

// uint32 confirmations = 4 [json_name = "confirmations"];
inline void EthereumConfig::clear_confirmations() {
  confirmations_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EthereumConfig::_internal_confirmations() const {
  return confirmations_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EthereumConfig::confirmations() const {
  // @@protoc_insertion_point(field_get:vega.EthereumConfig.confirmations)
  return _internal_confirmations();
}
inline void EthereumConfig::_internal_set_confirmations(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  confirmations_ = value;
}
inline void EthereumConfig::set_confirmations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_confirmations(value);
  // @@protoc_insertion_point(field_set:vega.EthereumConfig.confirmations)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vega

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vega::Order_TimeInForce> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Order_TimeInForce>() {
  return ::vega::Order_TimeInForce_descriptor();
}
template <> struct is_proto_enum< ::vega::Order_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Order_Type>() {
  return ::vega::Order_Type_descriptor();
}
template <> struct is_proto_enum< ::vega::Order_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Order_Status>() {
  return ::vega::Order_Status_descriptor();
}
template <> struct is_proto_enum< ::vega::Trade_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Trade_Type>() {
  return ::vega::Trade_Type_descriptor();
}
template <> struct is_proto_enum< ::vega::Deposit_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Deposit_Status>() {
  return ::vega::Deposit_Status_descriptor();
}
template <> struct is_proto_enum< ::vega::Withdrawal_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Withdrawal_Status>() {
  return ::vega::Withdrawal_Status_descriptor();
}
template <> struct is_proto_enum< ::vega::LiquidityProvision_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::LiquidityProvision_Status>() {
  return ::vega::LiquidityProvision_Status_descriptor();
}
template <> struct is_proto_enum< ::vega::Side> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Side>() {
  return ::vega::Side_descriptor();
}
template <> struct is_proto_enum< ::vega::Interval> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::Interval>() {
  return ::vega::Interval_descriptor();
}
template <> struct is_proto_enum< ::vega::AuctionTrigger> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::AuctionTrigger>() {
  return ::vega::AuctionTrigger_descriptor();
}
template <> struct is_proto_enum< ::vega::PeggedReference> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::PeggedReference>() {
  return ::vega::PeggedReference_descriptor();
}
template <> struct is_proto_enum< ::vega::OrderError> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::OrderError>() {
  return ::vega::OrderError_descriptor();
}
template <> struct is_proto_enum< ::vega::ChainStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::ChainStatus>() {
  return ::vega::ChainStatus_descriptor();
}
template <> struct is_proto_enum< ::vega::AccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::AccountType>() {
  return ::vega::AccountType_descriptor();
}
template <> struct is_proto_enum< ::vega::TransferType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::TransferType>() {
  return ::vega::TransferType_descriptor();
}
template <> struct is_proto_enum< ::vega::NodeSignatureKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::NodeSignatureKind>() {
  return ::vega::NodeSignatureKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vega_2eproto
