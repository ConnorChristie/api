// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: assets.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_assets_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_assets_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_assets_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_assets_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_assets_2eproto;
namespace vega {
class Asset;
class AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
class AssetSource;
class AssetSourceDefaultTypeInternal;
extern AssetSourceDefaultTypeInternal _AssetSource_default_instance_;
class BuiltinAsset;
class BuiltinAssetDefaultTypeInternal;
extern BuiltinAssetDefaultTypeInternal _BuiltinAsset_default_instance_;
class DevAssets;
class DevAssetsDefaultTypeInternal;
extern DevAssetsDefaultTypeInternal _DevAssets_default_instance_;
class ERC20;
class ERC20DefaultTypeInternal;
extern ERC20DefaultTypeInternal _ERC20_default_instance_;
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> ::vega::Asset* Arena::CreateMaybeMessage<::vega::Asset>(Arena*);
template<> ::vega::AssetSource* Arena::CreateMaybeMessage<::vega::AssetSource>(Arena*);
template<> ::vega::BuiltinAsset* Arena::CreateMaybeMessage<::vega::BuiltinAsset>(Arena*);
template<> ::vega::DevAssets* Arena::CreateMaybeMessage<::vega::DevAssets>(Arena*);
template<> ::vega::ERC20* Arena::CreateMaybeMessage<::vega::ERC20>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vega {

// ===================================================================

class Asset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.Asset) */ {
 public:
  inline Asset() : Asset(nullptr) {}
  virtual ~Asset();

  Asset(const Asset& from);
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset& operator=(Asset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Asset& default_instance();

  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Asset* New() const final {
    return CreateMaybeMessage<Asset>(nullptr);
  }

  Asset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Asset& from);
  void MergeFrom(const Asset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.Asset";
  }
  protected:
  explicit Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_assets_2eproto);
    return ::descriptor_table_assets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kNameFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kTotalSupplyFieldNumber = 4,
    kSourceFieldNumber = 7,
    kDecimalsFieldNumber = 5,
  };
  // string ID = 1 [json_name = "ID"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string symbol = 3 [json_name = "symbol"];
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string totalSupply = 4 [json_name = "totalSupply"];
  void clear_totalsupply();
  const std::string& totalsupply() const;
  void set_totalsupply(const std::string& value);
  void set_totalsupply(std::string&& value);
  void set_totalsupply(const char* value);
  void set_totalsupply(const char* value, size_t size);
  std::string* mutable_totalsupply();
  std::string* release_totalsupply();
  void set_allocated_totalsupply(std::string* totalsupply);
  private:
  const std::string& _internal_totalsupply() const;
  void _internal_set_totalsupply(const std::string& value);
  std::string* _internal_mutable_totalsupply();
  public:

  // .vega.AssetSource source = 7 [json_name = "source"];
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::vega::AssetSource& source() const;
  ::vega::AssetSource* release_source();
  ::vega::AssetSource* mutable_source();
  void set_allocated_source(::vega::AssetSource* source);
  private:
  const ::vega::AssetSource& _internal_source() const;
  ::vega::AssetSource* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::vega::AssetSource* source);
  ::vega::AssetSource* unsafe_arena_release_source();

  // uint64 decimals = 5 [json_name = "decimals"];
  void clear_decimals();
  ::PROTOBUF_NAMESPACE_ID::uint64 decimals() const;
  void set_decimals(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_decimals() const;
  void _internal_set_decimals(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.Asset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr totalsupply_;
  ::vega::AssetSource* source_;
  ::PROTOBUF_NAMESPACE_ID::uint64 decimals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_assets_2eproto;
};
// -------------------------------------------------------------------

class AssetSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.AssetSource) */ {
 public:
  inline AssetSource() : AssetSource(nullptr) {}
  virtual ~AssetSource();

  AssetSource(const AssetSource& from);
  AssetSource(AssetSource&& from) noexcept
    : AssetSource() {
    *this = ::std::move(from);
  }

  inline AssetSource& operator=(const AssetSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetSource& operator=(AssetSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetSource& default_instance();

  enum SourceCase {
    kBuiltinAsset = 1,
    kErc20 = 2,
    SOURCE_NOT_SET = 0,
  };

  static inline const AssetSource* internal_default_instance() {
    return reinterpret_cast<const AssetSource*>(
               &_AssetSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AssetSource& a, AssetSource& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetSource* New() const final {
    return CreateMaybeMessage<AssetSource>(nullptr);
  }

  AssetSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetSource& from);
  void MergeFrom(const AssetSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.AssetSource";
  }
  protected:
  explicit AssetSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_assets_2eproto);
    return ::descriptor_table_assets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuiltinAssetFieldNumber = 1,
    kErc20FieldNumber = 2,
  };
  // .vega.BuiltinAsset builtinAsset = 1 [json_name = "builtinAsset"];
  bool has_builtinasset() const;
  private:
  bool _internal_has_builtinasset() const;
  public:
  void clear_builtinasset();
  const ::vega::BuiltinAsset& builtinasset() const;
  ::vega::BuiltinAsset* release_builtinasset();
  ::vega::BuiltinAsset* mutable_builtinasset();
  void set_allocated_builtinasset(::vega::BuiltinAsset* builtinasset);
  private:
  const ::vega::BuiltinAsset& _internal_builtinasset() const;
  ::vega::BuiltinAsset* _internal_mutable_builtinasset();
  public:
  void unsafe_arena_set_allocated_builtinasset(
      ::vega::BuiltinAsset* builtinasset);
  ::vega::BuiltinAsset* unsafe_arena_release_builtinasset();

  // .vega.ERC20 erc20 = 2 [json_name = "erc20"];
  bool has_erc20() const;
  private:
  bool _internal_has_erc20() const;
  public:
  void clear_erc20();
  const ::vega::ERC20& erc20() const;
  ::vega::ERC20* release_erc20();
  ::vega::ERC20* mutable_erc20();
  void set_allocated_erc20(::vega::ERC20* erc20);
  private:
  const ::vega::ERC20& _internal_erc20() const;
  ::vega::ERC20* _internal_mutable_erc20();
  public:
  void unsafe_arena_set_allocated_erc20(
      ::vega::ERC20* erc20);
  ::vega::ERC20* unsafe_arena_release_erc20();

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:vega.AssetSource)
 private:
  class _Internal;
  void set_has_builtinasset();
  void set_has_erc20();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SourceUnion {
    SourceUnion() {}
    ::vega::BuiltinAsset* builtinasset_;
    ::vega::ERC20* erc20_;
  } source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_assets_2eproto;
};
// -------------------------------------------------------------------

class BuiltinAsset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.BuiltinAsset) */ {
 public:
  inline BuiltinAsset() : BuiltinAsset(nullptr) {}
  virtual ~BuiltinAsset();

  BuiltinAsset(const BuiltinAsset& from);
  BuiltinAsset(BuiltinAsset&& from) noexcept
    : BuiltinAsset() {
    *this = ::std::move(from);
  }

  inline BuiltinAsset& operator=(const BuiltinAsset& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuiltinAsset& operator=(BuiltinAsset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuiltinAsset& default_instance();

  static inline const BuiltinAsset* internal_default_instance() {
    return reinterpret_cast<const BuiltinAsset*>(
               &_BuiltinAsset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BuiltinAsset& a, BuiltinAsset& b) {
    a.Swap(&b);
  }
  inline void Swap(BuiltinAsset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuiltinAsset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuiltinAsset* New() const final {
    return CreateMaybeMessage<BuiltinAsset>(nullptr);
  }

  BuiltinAsset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuiltinAsset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuiltinAsset& from);
  void MergeFrom(const BuiltinAsset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuiltinAsset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.BuiltinAsset";
  }
  protected:
  explicit BuiltinAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_assets_2eproto);
    return ::descriptor_table_assets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kTotalSupplyFieldNumber = 3,
    kMaxFaucetAmountMintFieldNumber = 5,
    kDecimalsFieldNumber = 4,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string symbol = 2 [json_name = "symbol"];
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string totalSupply = 3 [json_name = "totalSupply"];
  void clear_totalsupply();
  const std::string& totalsupply() const;
  void set_totalsupply(const std::string& value);
  void set_totalsupply(std::string&& value);
  void set_totalsupply(const char* value);
  void set_totalsupply(const char* value, size_t size);
  std::string* mutable_totalsupply();
  std::string* release_totalsupply();
  void set_allocated_totalsupply(std::string* totalsupply);
  private:
  const std::string& _internal_totalsupply() const;
  void _internal_set_totalsupply(const std::string& value);
  std::string* _internal_mutable_totalsupply();
  public:

  // string maxFaucetAmountMint = 5 [json_name = "maxFaucetAmountMint"];
  void clear_maxfaucetamountmint();
  const std::string& maxfaucetamountmint() const;
  void set_maxfaucetamountmint(const std::string& value);
  void set_maxfaucetamountmint(std::string&& value);
  void set_maxfaucetamountmint(const char* value);
  void set_maxfaucetamountmint(const char* value, size_t size);
  std::string* mutable_maxfaucetamountmint();
  std::string* release_maxfaucetamountmint();
  void set_allocated_maxfaucetamountmint(std::string* maxfaucetamountmint);
  private:
  const std::string& _internal_maxfaucetamountmint() const;
  void _internal_set_maxfaucetamountmint(const std::string& value);
  std::string* _internal_mutable_maxfaucetamountmint();
  public:

  // uint64 decimals = 4 [json_name = "decimals"];
  void clear_decimals();
  ::PROTOBUF_NAMESPACE_ID::uint64 decimals() const;
  void set_decimals(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_decimals() const;
  void _internal_set_decimals(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.BuiltinAsset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr totalsupply_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maxfaucetamountmint_;
  ::PROTOBUF_NAMESPACE_ID::uint64 decimals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_assets_2eproto;
};
// -------------------------------------------------------------------

class ERC20 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.ERC20) */ {
 public:
  inline ERC20() : ERC20(nullptr) {}
  virtual ~ERC20();

  ERC20(const ERC20& from);
  ERC20(ERC20&& from) noexcept
    : ERC20() {
    *this = ::std::move(from);
  }

  inline ERC20& operator=(const ERC20& from) {
    CopyFrom(from);
    return *this;
  }
  inline ERC20& operator=(ERC20&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ERC20& default_instance();

  static inline const ERC20* internal_default_instance() {
    return reinterpret_cast<const ERC20*>(
               &_ERC20_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ERC20& a, ERC20& b) {
    a.Swap(&b);
  }
  inline void Swap(ERC20* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ERC20* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ERC20* New() const final {
    return CreateMaybeMessage<ERC20>(nullptr);
  }

  ERC20* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ERC20>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ERC20& from);
  void MergeFrom(const ERC20& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ERC20* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.ERC20";
  }
  protected:
  explicit ERC20(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_assets_2eproto);
    return ::descriptor_table_assets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractAddressFieldNumber = 1,
  };
  // string contractAddress = 1 [json_name = "contractAddress"];
  void clear_contractaddress();
  const std::string& contractaddress() const;
  void set_contractaddress(const std::string& value);
  void set_contractaddress(std::string&& value);
  void set_contractaddress(const char* value);
  void set_contractaddress(const char* value, size_t size);
  std::string* mutable_contractaddress();
  std::string* release_contractaddress();
  void set_allocated_contractaddress(std::string* contractaddress);
  private:
  const std::string& _internal_contractaddress() const;
  void _internal_set_contractaddress(const std::string& value);
  std::string* _internal_mutable_contractaddress();
  public:

  // @@protoc_insertion_point(class_scope:vega.ERC20)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_assets_2eproto;
};
// -------------------------------------------------------------------

class DevAssets PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.DevAssets) */ {
 public:
  inline DevAssets() : DevAssets(nullptr) {}
  virtual ~DevAssets();

  DevAssets(const DevAssets& from);
  DevAssets(DevAssets&& from) noexcept
    : DevAssets() {
    *this = ::std::move(from);
  }

  inline DevAssets& operator=(const DevAssets& from) {
    CopyFrom(from);
    return *this;
  }
  inline DevAssets& operator=(DevAssets&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DevAssets& default_instance();

  static inline const DevAssets* internal_default_instance() {
    return reinterpret_cast<const DevAssets*>(
               &_DevAssets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DevAssets& a, DevAssets& b) {
    a.Swap(&b);
  }
  inline void Swap(DevAssets* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DevAssets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DevAssets* New() const final {
    return CreateMaybeMessage<DevAssets>(nullptr);
  }

  DevAssets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DevAssets>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DevAssets& from);
  void MergeFrom(const DevAssets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DevAssets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.DevAssets";
  }
  protected:
  explicit DevAssets(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_assets_2eproto);
    return ::descriptor_table_assets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcesFieldNumber = 1,
  };
  // repeated .vega.AssetSource sources = 1 [json_name = "sources"];
  int sources_size() const;
  private:
  int _internal_sources_size() const;
  public:
  void clear_sources();
  ::vega::AssetSource* mutable_sources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::AssetSource >*
      mutable_sources();
  private:
  const ::vega::AssetSource& _internal_sources(int index) const;
  ::vega::AssetSource* _internal_add_sources();
  public:
  const ::vega::AssetSource& sources(int index) const;
  ::vega::AssetSource* add_sources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::AssetSource >&
      sources() const;

  // @@protoc_insertion_point(class_scope:vega.DevAssets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::AssetSource > sources_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_assets_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Asset

// string ID = 1 [json_name = "ID"];
inline void Asset::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Asset::id() const {
  // @@protoc_insertion_point(field_get:vega.Asset.ID)
  return _internal_id();
}
inline void Asset::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.Asset.ID)
}
inline std::string* Asset::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.Asset.ID)
  return _internal_mutable_id();
}
inline const std::string& Asset::_internal_id() const {
  return id_.Get();
}
inline void Asset::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Asset.ID)
}
inline void Asset::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Asset.ID)
}
inline void Asset::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Asset.ID)
}
inline std::string* Asset::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_id() {
  // @@protoc_insertion_point(field_release:vega.Asset.ID)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Asset.ID)
}

// string name = 2 [json_name = "name"];
inline void Asset::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Asset::name() const {
  // @@protoc_insertion_point(field_get:vega.Asset.name)
  return _internal_name();
}
inline void Asset::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:vega.Asset.name)
}
inline std::string* Asset::mutable_name() {
  // @@protoc_insertion_point(field_mutable:vega.Asset.name)
  return _internal_mutable_name();
}
inline const std::string& Asset::_internal_name() const {
  return name_.Get();
}
inline void Asset::_internal_set_name(const std::string& value) {

  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_name(std::string&& value) {

  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Asset.name)
}
inline void Asset::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Asset.name)
}
inline void Asset::set_name(const char* value,
    size_t size) {

  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Asset.name)
}
inline std::string* Asset::_internal_mutable_name() {

  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_name() {
  // @@protoc_insertion_point(field_release:vega.Asset.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_name(std::string* name) {
  if (name != nullptr) {

  } else {

  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Asset.name)
}

// string symbol = 3 [json_name = "symbol"];
inline void Asset::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& Asset::symbol() const {
  // @@protoc_insertion_point(field_get:vega.Asset.symbol)
  return _internal_symbol();
}
inline void Asset::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:vega.Asset.symbol)
}
inline std::string* Asset::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:vega.Asset.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& Asset::_internal_symbol() const {
  return symbol_.Get();
}
inline void Asset::_internal_set_symbol(const std::string& value) {

  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_symbol(std::string&& value) {

  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Asset.symbol)
}
inline void Asset::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Asset.symbol)
}
inline void Asset::set_symbol(const char* value,
    size_t size) {

  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Asset.symbol)
}
inline std::string* Asset::_internal_mutable_symbol() {

  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_symbol() {
  // @@protoc_insertion_point(field_release:vega.Asset.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {

  } else {

  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Asset.symbol)
}

// string totalSupply = 4 [json_name = "totalSupply"];
inline void Asset::clear_totalsupply() {
  totalsupply_.ClearToEmpty();
}
inline const std::string& Asset::totalsupply() const {
  // @@protoc_insertion_point(field_get:vega.Asset.totalSupply)
  return _internal_totalsupply();
}
inline void Asset::set_totalsupply(const std::string& value) {
  _internal_set_totalsupply(value);
  // @@protoc_insertion_point(field_set:vega.Asset.totalSupply)
}
inline std::string* Asset::mutable_totalsupply() {
  // @@protoc_insertion_point(field_mutable:vega.Asset.totalSupply)
  return _internal_mutable_totalsupply();
}
inline const std::string& Asset::_internal_totalsupply() const {
  return totalsupply_.Get();
}
inline void Asset::_internal_set_totalsupply(const std::string& value) {

  totalsupply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_totalsupply(std::string&& value) {

  totalsupply_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.Asset.totalSupply)
}
inline void Asset::set_totalsupply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  totalsupply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.Asset.totalSupply)
}
inline void Asset::set_totalsupply(const char* value,
    size_t size) {

  totalsupply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.Asset.totalSupply)
}
inline std::string* Asset::_internal_mutable_totalsupply() {

  return totalsupply_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_totalsupply() {
  // @@protoc_insertion_point(field_release:vega.Asset.totalSupply)
  return totalsupply_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_totalsupply(std::string* totalsupply) {
  if (totalsupply != nullptr) {

  } else {

  }
  totalsupply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), totalsupply,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.Asset.totalSupply)
}

// uint64 decimals = 5 [json_name = "decimals"];
inline void Asset::clear_decimals() {
  decimals_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Asset::_internal_decimals() const {
  return decimals_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Asset::decimals() const {
  // @@protoc_insertion_point(field_get:vega.Asset.decimals)
  return _internal_decimals();
}
inline void Asset::_internal_set_decimals(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  decimals_ = value;
}
inline void Asset::set_decimals(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_decimals(value);
  // @@protoc_insertion_point(field_set:vega.Asset.decimals)
}

// .vega.AssetSource source = 7 [json_name = "source"];
inline bool Asset::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool Asset::has_source() const {
  return _internal_has_source();
}
inline void Asset::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::vega::AssetSource& Asset::_internal_source() const {
  const ::vega::AssetSource* p = source_;
  return p != nullptr ? *p : reinterpret_cast<const ::vega::AssetSource&>(
      ::vega::_AssetSource_default_instance_);
}
inline const ::vega::AssetSource& Asset::source() const {
  // @@protoc_insertion_point(field_get:vega.Asset.source)
  return _internal_source();
}
inline void Asset::unsafe_arena_set_allocated_source(
    ::vega::AssetSource* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.Asset.source)
}
inline ::vega::AssetSource* Asset::release_source() {

  ::vega::AssetSource* temp = source_;
  source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vega::AssetSource* Asset::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:vega.Asset.source)

  ::vega::AssetSource* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::vega::AssetSource* Asset::_internal_mutable_source() {

  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::vega::AssetSource>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::vega::AssetSource* Asset::mutable_source() {
  // @@protoc_insertion_point(field_mutable:vega.Asset.source)
  return _internal_mutable_source();
}
inline void Asset::set_allocated_source(::vega::AssetSource* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }

  } else {

  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:vega.Asset.source)
}

// -------------------------------------------------------------------

// AssetSource

// .vega.BuiltinAsset builtinAsset = 1 [json_name = "builtinAsset"];
inline bool AssetSource::_internal_has_builtinasset() const {
  return source_case() == kBuiltinAsset;
}
inline bool AssetSource::has_builtinasset() const {
  return _internal_has_builtinasset();
}
inline void AssetSource::set_has_builtinasset() {
  _oneof_case_[0] = kBuiltinAsset;
}
inline void AssetSource::clear_builtinasset() {
  if (_internal_has_builtinasset()) {
    if (GetArena() == nullptr) {
      delete source_.builtinasset_;
    }
    clear_has_source();
  }
}
inline ::vega::BuiltinAsset* AssetSource::release_builtinasset() {
  // @@protoc_insertion_point(field_release:vega.AssetSource.builtinAsset)
  if (_internal_has_builtinasset()) {
    clear_has_source();
      ::vega::BuiltinAsset* temp = source_.builtinasset_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    source_.builtinasset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::BuiltinAsset& AssetSource::_internal_builtinasset() const {
  return _internal_has_builtinasset()
      ? *source_.builtinasset_
      : reinterpret_cast< ::vega::BuiltinAsset&>(::vega::_BuiltinAsset_default_instance_);
}
inline const ::vega::BuiltinAsset& AssetSource::builtinasset() const {
  // @@protoc_insertion_point(field_get:vega.AssetSource.builtinAsset)
  return _internal_builtinasset();
}
inline ::vega::BuiltinAsset* AssetSource::unsafe_arena_release_builtinasset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.AssetSource.builtinAsset)
  if (_internal_has_builtinasset()) {
    clear_has_source();
    ::vega::BuiltinAsset* temp = source_.builtinasset_;
    source_.builtinasset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AssetSource::unsafe_arena_set_allocated_builtinasset(::vega::BuiltinAsset* builtinasset) {
  clear_source();
  if (builtinasset) {
    set_has_builtinasset();
    source_.builtinasset_ = builtinasset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.AssetSource.builtinAsset)
}
inline ::vega::BuiltinAsset* AssetSource::_internal_mutable_builtinasset() {
  if (!_internal_has_builtinasset()) {
    clear_source();
    set_has_builtinasset();
    source_.builtinasset_ = CreateMaybeMessage< ::vega::BuiltinAsset >(GetArena());
  }
  return source_.builtinasset_;
}
inline ::vega::BuiltinAsset* AssetSource::mutable_builtinasset() {
  // @@protoc_insertion_point(field_mutable:vega.AssetSource.builtinAsset)
  return _internal_mutable_builtinasset();
}

// .vega.ERC20 erc20 = 2 [json_name = "erc20"];
inline bool AssetSource::_internal_has_erc20() const {
  return source_case() == kErc20;
}
inline bool AssetSource::has_erc20() const {
  return _internal_has_erc20();
}
inline void AssetSource::set_has_erc20() {
  _oneof_case_[0] = kErc20;
}
inline void AssetSource::clear_erc20() {
  if (_internal_has_erc20()) {
    if (GetArena() == nullptr) {
      delete source_.erc20_;
    }
    clear_has_source();
  }
}
inline ::vega::ERC20* AssetSource::release_erc20() {
  // @@protoc_insertion_point(field_release:vega.AssetSource.erc20)
  if (_internal_has_erc20()) {
    clear_has_source();
      ::vega::ERC20* temp = source_.erc20_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    source_.erc20_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::ERC20& AssetSource::_internal_erc20() const {
  return _internal_has_erc20()
      ? *source_.erc20_
      : reinterpret_cast< ::vega::ERC20&>(::vega::_ERC20_default_instance_);
}
inline const ::vega::ERC20& AssetSource::erc20() const {
  // @@protoc_insertion_point(field_get:vega.AssetSource.erc20)
  return _internal_erc20();
}
inline ::vega::ERC20* AssetSource::unsafe_arena_release_erc20() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.AssetSource.erc20)
  if (_internal_has_erc20()) {
    clear_has_source();
    ::vega::ERC20* temp = source_.erc20_;
    source_.erc20_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AssetSource::unsafe_arena_set_allocated_erc20(::vega::ERC20* erc20) {
  clear_source();
  if (erc20) {
    set_has_erc20();
    source_.erc20_ = erc20;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.AssetSource.erc20)
}
inline ::vega::ERC20* AssetSource::_internal_mutable_erc20() {
  if (!_internal_has_erc20()) {
    clear_source();
    set_has_erc20();
    source_.erc20_ = CreateMaybeMessage< ::vega::ERC20 >(GetArena());
  }
  return source_.erc20_;
}
inline ::vega::ERC20* AssetSource::mutable_erc20() {
  // @@protoc_insertion_point(field_mutable:vega.AssetSource.erc20)
  return _internal_mutable_erc20();
}

inline bool AssetSource::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void AssetSource::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline AssetSource::SourceCase AssetSource::source_case() const {
  return AssetSource::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BuiltinAsset

// string name = 1 [json_name = "name"];
inline void BuiltinAsset::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BuiltinAsset::name() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAsset.name)
  return _internal_name();
}
inline void BuiltinAsset::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:vega.BuiltinAsset.name)
}
inline std::string* BuiltinAsset::mutable_name() {
  // @@protoc_insertion_point(field_mutable:vega.BuiltinAsset.name)
  return _internal_mutable_name();
}
inline const std::string& BuiltinAsset::_internal_name() const {
  return name_.Get();
}
inline void BuiltinAsset::_internal_set_name(const std::string& value) {

  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BuiltinAsset::set_name(std::string&& value) {

  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BuiltinAsset.name)
}
inline void BuiltinAsset::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BuiltinAsset.name)
}
inline void BuiltinAsset::set_name(const char* value,
    size_t size) {

  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BuiltinAsset.name)
}
inline std::string* BuiltinAsset::_internal_mutable_name() {

  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BuiltinAsset::release_name() {
  // @@protoc_insertion_point(field_release:vega.BuiltinAsset.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuiltinAsset::set_allocated_name(std::string* name) {
  if (name != nullptr) {

  } else {

  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BuiltinAsset.name)
}

// string symbol = 2 [json_name = "symbol"];
inline void BuiltinAsset::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& BuiltinAsset::symbol() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAsset.symbol)
  return _internal_symbol();
}
inline void BuiltinAsset::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:vega.BuiltinAsset.symbol)
}
inline std::string* BuiltinAsset::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:vega.BuiltinAsset.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& BuiltinAsset::_internal_symbol() const {
  return symbol_.Get();
}
inline void BuiltinAsset::_internal_set_symbol(const std::string& value) {

  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BuiltinAsset::set_symbol(std::string&& value) {

  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BuiltinAsset.symbol)
}
inline void BuiltinAsset::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BuiltinAsset.symbol)
}
inline void BuiltinAsset::set_symbol(const char* value,
    size_t size) {

  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BuiltinAsset.symbol)
}
inline std::string* BuiltinAsset::_internal_mutable_symbol() {

  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BuiltinAsset::release_symbol() {
  // @@protoc_insertion_point(field_release:vega.BuiltinAsset.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuiltinAsset::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {

  } else {

  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BuiltinAsset.symbol)
}

// string totalSupply = 3 [json_name = "totalSupply"];
inline void BuiltinAsset::clear_totalsupply() {
  totalsupply_.ClearToEmpty();
}
inline const std::string& BuiltinAsset::totalsupply() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAsset.totalSupply)
  return _internal_totalsupply();
}
inline void BuiltinAsset::set_totalsupply(const std::string& value) {
  _internal_set_totalsupply(value);
  // @@protoc_insertion_point(field_set:vega.BuiltinAsset.totalSupply)
}
inline std::string* BuiltinAsset::mutable_totalsupply() {
  // @@protoc_insertion_point(field_mutable:vega.BuiltinAsset.totalSupply)
  return _internal_mutable_totalsupply();
}
inline const std::string& BuiltinAsset::_internal_totalsupply() const {
  return totalsupply_.Get();
}
inline void BuiltinAsset::_internal_set_totalsupply(const std::string& value) {

  totalsupply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BuiltinAsset::set_totalsupply(std::string&& value) {

  totalsupply_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BuiltinAsset.totalSupply)
}
inline void BuiltinAsset::set_totalsupply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  totalsupply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BuiltinAsset.totalSupply)
}
inline void BuiltinAsset::set_totalsupply(const char* value,
    size_t size) {

  totalsupply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BuiltinAsset.totalSupply)
}
inline std::string* BuiltinAsset::_internal_mutable_totalsupply() {

  return totalsupply_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BuiltinAsset::release_totalsupply() {
  // @@protoc_insertion_point(field_release:vega.BuiltinAsset.totalSupply)
  return totalsupply_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuiltinAsset::set_allocated_totalsupply(std::string* totalsupply) {
  if (totalsupply != nullptr) {

  } else {

  }
  totalsupply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), totalsupply,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BuiltinAsset.totalSupply)
}

// uint64 decimals = 4 [json_name = "decimals"];
inline void BuiltinAsset::clear_decimals() {
  decimals_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuiltinAsset::_internal_decimals() const {
  return decimals_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuiltinAsset::decimals() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAsset.decimals)
  return _internal_decimals();
}
inline void BuiltinAsset::_internal_set_decimals(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  decimals_ = value;
}
inline void BuiltinAsset::set_decimals(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_decimals(value);
  // @@protoc_insertion_point(field_set:vega.BuiltinAsset.decimals)
}

// string maxFaucetAmountMint = 5 [json_name = "maxFaucetAmountMint"];
inline void BuiltinAsset::clear_maxfaucetamountmint() {
  maxfaucetamountmint_.ClearToEmpty();
}
inline const std::string& BuiltinAsset::maxfaucetamountmint() const {
  // @@protoc_insertion_point(field_get:vega.BuiltinAsset.maxFaucetAmountMint)
  return _internal_maxfaucetamountmint();
}
inline void BuiltinAsset::set_maxfaucetamountmint(const std::string& value) {
  _internal_set_maxfaucetamountmint(value);
  // @@protoc_insertion_point(field_set:vega.BuiltinAsset.maxFaucetAmountMint)
}
inline std::string* BuiltinAsset::mutable_maxfaucetamountmint() {
  // @@protoc_insertion_point(field_mutable:vega.BuiltinAsset.maxFaucetAmountMint)
  return _internal_mutable_maxfaucetamountmint();
}
inline const std::string& BuiltinAsset::_internal_maxfaucetamountmint() const {
  return maxfaucetamountmint_.Get();
}
inline void BuiltinAsset::_internal_set_maxfaucetamountmint(const std::string& value) {

  maxfaucetamountmint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BuiltinAsset::set_maxfaucetamountmint(std::string&& value) {

  maxfaucetamountmint_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BuiltinAsset.maxFaucetAmountMint)
}
inline void BuiltinAsset::set_maxfaucetamountmint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  maxfaucetamountmint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BuiltinAsset.maxFaucetAmountMint)
}
inline void BuiltinAsset::set_maxfaucetamountmint(const char* value,
    size_t size) {

  maxfaucetamountmint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BuiltinAsset.maxFaucetAmountMint)
}
inline std::string* BuiltinAsset::_internal_mutable_maxfaucetamountmint() {

  return maxfaucetamountmint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BuiltinAsset::release_maxfaucetamountmint() {
  // @@protoc_insertion_point(field_release:vega.BuiltinAsset.maxFaucetAmountMint)
  return maxfaucetamountmint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuiltinAsset::set_allocated_maxfaucetamountmint(std::string* maxfaucetamountmint) {
  if (maxfaucetamountmint != nullptr) {

  } else {

  }
  maxfaucetamountmint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maxfaucetamountmint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BuiltinAsset.maxFaucetAmountMint)
}

// -------------------------------------------------------------------

// ERC20

// string contractAddress = 1 [json_name = "contractAddress"];
inline void ERC20::clear_contractaddress() {
  contractaddress_.ClearToEmpty();
}
inline const std::string& ERC20::contractaddress() const {
  // @@protoc_insertion_point(field_get:vega.ERC20.contractAddress)
  return _internal_contractaddress();
}
inline void ERC20::set_contractaddress(const std::string& value) {
  _internal_set_contractaddress(value);
  // @@protoc_insertion_point(field_set:vega.ERC20.contractAddress)
}
inline std::string* ERC20::mutable_contractaddress() {
  // @@protoc_insertion_point(field_mutable:vega.ERC20.contractAddress)
  return _internal_mutable_contractaddress();
}
inline const std::string& ERC20::_internal_contractaddress() const {
  return contractaddress_.Get();
}
inline void ERC20::_internal_set_contractaddress(const std::string& value) {

  contractaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ERC20::set_contractaddress(std::string&& value) {

  contractaddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.ERC20.contractAddress)
}
inline void ERC20::set_contractaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  contractaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.ERC20.contractAddress)
}
inline void ERC20::set_contractaddress(const char* value,
    size_t size) {

  contractaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.ERC20.contractAddress)
}
inline std::string* ERC20::_internal_mutable_contractaddress() {

  return contractaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ERC20::release_contractaddress() {
  // @@protoc_insertion_point(field_release:vega.ERC20.contractAddress)
  return contractaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ERC20::set_allocated_contractaddress(std::string* contractaddress) {
  if (contractaddress != nullptr) {

  } else {

  }
  contractaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.ERC20.contractAddress)
}

// -------------------------------------------------------------------

// DevAssets

// repeated .vega.AssetSource sources = 1 [json_name = "sources"];
inline int DevAssets::_internal_sources_size() const {
  return sources_.size();
}
inline int DevAssets::sources_size() const {
  return _internal_sources_size();
}
inline void DevAssets::clear_sources() {
  sources_.Clear();
}
inline ::vega::AssetSource* DevAssets::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:vega.DevAssets.sources)
  return sources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::AssetSource >*
DevAssets::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:vega.DevAssets.sources)
  return &sources_;
}
inline const ::vega::AssetSource& DevAssets::_internal_sources(int index) const {
  return sources_.Get(index);
}
inline const ::vega::AssetSource& DevAssets::sources(int index) const {
  // @@protoc_insertion_point(field_get:vega.DevAssets.sources)
  return _internal_sources(index);
}
inline ::vega::AssetSource* DevAssets::_internal_add_sources() {
  return sources_.Add();
}
inline ::vega::AssetSource* DevAssets::add_sources() {
  // @@protoc_insertion_point(field_add:vega.DevAssets.sources)
  return _internal_add_sources();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::AssetSource >&
DevAssets::sources() const {
  // @@protoc_insertion_point(field_list:vega.DevAssets.sources)
  return sources_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vega

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_assets_2eproto
