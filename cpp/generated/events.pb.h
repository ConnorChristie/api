// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_events_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_events_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "markets.pb.h"
#include "assets.pb.h"
#include "governance.pb.h"
#include "vega.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_events_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_events_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_events_2eproto;
namespace vega {
class AuctionEvent;
class AuctionEventDefaultTypeInternal;
extern AuctionEventDefaultTypeInternal _AuctionEvent_default_instance_;
class BusEvent;
class BusEventDefaultTypeInternal;
extern BusEventDefaultTypeInternal _BusEvent_default_instance_;
class LossSocialization;
class LossSocializationDefaultTypeInternal;
extern LossSocializationDefaultTypeInternal _LossSocialization_default_instance_;
class MarketEvent;
class MarketEventDefaultTypeInternal;
extern MarketEventDefaultTypeInternal _MarketEvent_default_instance_;
class MarketTick;
class MarketTickDefaultTypeInternal;
extern MarketTickDefaultTypeInternal _MarketTick_default_instance_;
class PositionResolution;
class PositionResolutionDefaultTypeInternal;
extern PositionResolutionDefaultTypeInternal _PositionResolution_default_instance_;
class SettleDistressed;
class SettleDistressedDefaultTypeInternal;
extern SettleDistressedDefaultTypeInternal _SettleDistressed_default_instance_;
class SettlePosition;
class SettlePositionDefaultTypeInternal;
extern SettlePositionDefaultTypeInternal _SettlePosition_default_instance_;
class TimeUpdate;
class TimeUpdateDefaultTypeInternal;
extern TimeUpdateDefaultTypeInternal _TimeUpdate_default_instance_;
class TradeSettlement;
class TradeSettlementDefaultTypeInternal;
extern TradeSettlementDefaultTypeInternal _TradeSettlement_default_instance_;
class TransferResponses;
class TransferResponsesDefaultTypeInternal;
extern TransferResponsesDefaultTypeInternal _TransferResponses_default_instance_;
class TxErrorEvent;
class TxErrorEventDefaultTypeInternal;
extern TxErrorEventDefaultTypeInternal _TxErrorEvent_default_instance_;
}  // namespace vega
PROTOBUF_NAMESPACE_OPEN
template<> ::vega::AuctionEvent* Arena::CreateMaybeMessage<::vega::AuctionEvent>(Arena*);
template<> ::vega::BusEvent* Arena::CreateMaybeMessage<::vega::BusEvent>(Arena*);
template<> ::vega::LossSocialization* Arena::CreateMaybeMessage<::vega::LossSocialization>(Arena*);
template<> ::vega::MarketEvent* Arena::CreateMaybeMessage<::vega::MarketEvent>(Arena*);
template<> ::vega::MarketTick* Arena::CreateMaybeMessage<::vega::MarketTick>(Arena*);
template<> ::vega::PositionResolution* Arena::CreateMaybeMessage<::vega::PositionResolution>(Arena*);
template<> ::vega::SettleDistressed* Arena::CreateMaybeMessage<::vega::SettleDistressed>(Arena*);
template<> ::vega::SettlePosition* Arena::CreateMaybeMessage<::vega::SettlePosition>(Arena*);
template<> ::vega::TimeUpdate* Arena::CreateMaybeMessage<::vega::TimeUpdate>(Arena*);
template<> ::vega::TradeSettlement* Arena::CreateMaybeMessage<::vega::TradeSettlement>(Arena*);
template<> ::vega::TransferResponses* Arena::CreateMaybeMessage<::vega::TransferResponses>(Arena*);
template<> ::vega::TxErrorEvent* Arena::CreateMaybeMessage<::vega::TxErrorEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vega {

enum BusEventType : int {
  BUS_EVENT_TYPE_UNSPECIFIED = 0,
  BUS_EVENT_TYPE_ALL = 1,
  BUS_EVENT_TYPE_TIME_UPDATE = 2,
  BUS_EVENT_TYPE_TRANSFER_RESPONSES = 3,
  BUS_EVENT_TYPE_POSITION_RESOLUTION = 4,
  BUS_EVENT_TYPE_ORDER = 5,
  BUS_EVENT_TYPE_ACCOUNT = 6,
  BUS_EVENT_TYPE_PARTY = 7,
  BUS_EVENT_TYPE_TRADE = 8,
  BUS_EVENT_TYPE_MARGIN_LEVELS = 9,
  BUS_EVENT_TYPE_PROPOSAL = 10,
  BUS_EVENT_TYPE_VOTE = 11,
  BUS_EVENT_TYPE_MARKET_DATA = 12,
  BUS_EVENT_TYPE_NODE_SIGNATURE = 13,
  BUS_EVENT_TYPE_LOSS_SOCIALIZATION = 14,
  BUS_EVENT_TYPE_SETTLE_POSITION = 15,
  BUS_EVENT_TYPE_SETTLE_DISTRESSED = 16,
  BUS_EVENT_TYPE_MARKET_CREATED = 17,
  BUS_EVENT_TYPE_ASSET = 18,
  BUS_EVENT_TYPE_MARKET_TICK = 19,
  BUS_EVENT_TYPE_WITHDRAWAL = 20,
  BUS_EVENT_TYPE_DEPOSIT = 21,
  BUS_EVENT_TYPE_AUCTION = 22,
  BUS_EVENT_TYPE_RISK_FACTOR = 23,
  BUS_EVENT_TYPE_NETWORK_PARAMETER = 24,
  BUS_EVENT_TYPE_LIQUIDITY_PROVISION = 25,
  BUS_EVENT_TYPE_MARKET_UPDATED = 26,
  BUS_EVENT_TYPE_MARKET = 101,
  BUS_EVENT_TYPE_TX_ERROR = 201,
  BusEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BusEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BusEventType_IsValid(int value);
constexpr BusEventType BusEventType_MIN = BUS_EVENT_TYPE_UNSPECIFIED;
constexpr BusEventType BusEventType_MAX = BUS_EVENT_TYPE_TX_ERROR;
constexpr int BusEventType_ARRAYSIZE = BusEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BusEventType_descriptor();
template<typename T>
inline const std::string& BusEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BusEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BusEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BusEventType_descriptor(), enum_t_value);
}
inline bool BusEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BusEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BusEventType>(
    BusEventType_descriptor(), name, value);
}
// ===================================================================

class MarketEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.MarketEvent) */ {
 public:
  inline MarketEvent() : MarketEvent(nullptr) {}
  virtual ~MarketEvent();

  MarketEvent(const MarketEvent& from);
  MarketEvent(MarketEvent&& from) noexcept
    : MarketEvent() {
    *this = ::std::move(from);
  }

  inline MarketEvent& operator=(const MarketEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketEvent& operator=(MarketEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketEvent& default_instance();

  static inline const MarketEvent* internal_default_instance() {
    return reinterpret_cast<const MarketEvent*>(
               &_MarketEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MarketEvent& a, MarketEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketEvent* New() const final {
    return CreateMaybeMessage<MarketEvent>(nullptr);
  }

  MarketEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketEvent& from);
  void MergeFrom(const MarketEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.MarketEvent";
  }
  protected:
  explicit MarketEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string payload = 2 [json_name = "payload"];
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:vega.MarketEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class TxErrorEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.TxErrorEvent) */ {
 public:
  inline TxErrorEvent() : TxErrorEvent(nullptr) {}
  virtual ~TxErrorEvent();

  TxErrorEvent(const TxErrorEvent& from);
  TxErrorEvent(TxErrorEvent&& from) noexcept
    : TxErrorEvent() {
    *this = ::std::move(from);
  }

  inline TxErrorEvent& operator=(const TxErrorEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxErrorEvent& operator=(TxErrorEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxErrorEvent& default_instance();

  enum TransactionCase {
    kOrderSubmission = 101,
    kOrderAmendment = 102,
    kOrderCancellation = 103,
    kProposal = 104,
    kVote = 105,
    TRANSACTION_NOT_SET = 0,
  };

  static inline const TxErrorEvent* internal_default_instance() {
    return reinterpret_cast<const TxErrorEvent*>(
               &_TxErrorEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TxErrorEvent& a, TxErrorEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TxErrorEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxErrorEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxErrorEvent* New() const final {
    return CreateMaybeMessage<TxErrorEvent>(nullptr);
  }

  TxErrorEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxErrorEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxErrorEvent& from);
  void MergeFrom(const TxErrorEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxErrorEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.TxErrorEvent";
  }
  protected:
  explicit TxErrorEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIDFieldNumber = 1,
    kErrMsgFieldNumber = 2,
    kOrderSubmissionFieldNumber = 101,
    kOrderAmendmentFieldNumber = 102,
    kOrderCancellationFieldNumber = 103,
    kProposalFieldNumber = 104,
    kVoteFieldNumber = 105,
  };
  // string PartyID = 1 [json_name = "PartyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // string errMsg = 2 [json_name = "errMsg"];
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // .vega.OrderSubmission orderSubmission = 101 [json_name = "orderSubmission"];
  bool has_ordersubmission() const;
  private:
  bool _internal_has_ordersubmission() const;
  public:
  void clear_ordersubmission();
  const ::vega::OrderSubmission& ordersubmission() const;
  ::vega::OrderSubmission* release_ordersubmission();
  ::vega::OrderSubmission* mutable_ordersubmission();
  void set_allocated_ordersubmission(::vega::OrderSubmission* ordersubmission);
  private:
  const ::vega::OrderSubmission& _internal_ordersubmission() const;
  ::vega::OrderSubmission* _internal_mutable_ordersubmission();
  public:
  void unsafe_arena_set_allocated_ordersubmission(
      ::vega::OrderSubmission* ordersubmission);
  ::vega::OrderSubmission* unsafe_arena_release_ordersubmission();

  // .vega.OrderAmendment orderAmendment = 102 [json_name = "orderAmendment"];
  bool has_orderamendment() const;
  private:
  bool _internal_has_orderamendment() const;
  public:
  void clear_orderamendment();
  const ::vega::OrderAmendment& orderamendment() const;
  ::vega::OrderAmendment* release_orderamendment();
  ::vega::OrderAmendment* mutable_orderamendment();
  void set_allocated_orderamendment(::vega::OrderAmendment* orderamendment);
  private:
  const ::vega::OrderAmendment& _internal_orderamendment() const;
  ::vega::OrderAmendment* _internal_mutable_orderamendment();
  public:
  void unsafe_arena_set_allocated_orderamendment(
      ::vega::OrderAmendment* orderamendment);
  ::vega::OrderAmendment* unsafe_arena_release_orderamendment();

  // .vega.OrderCancellation orderCancellation = 103 [json_name = "orderCancellation"];
  bool has_ordercancellation() const;
  private:
  bool _internal_has_ordercancellation() const;
  public:
  void clear_ordercancellation();
  const ::vega::OrderCancellation& ordercancellation() const;
  ::vega::OrderCancellation* release_ordercancellation();
  ::vega::OrderCancellation* mutable_ordercancellation();
  void set_allocated_ordercancellation(::vega::OrderCancellation* ordercancellation);
  private:
  const ::vega::OrderCancellation& _internal_ordercancellation() const;
  ::vega::OrderCancellation* _internal_mutable_ordercancellation();
  public:
  void unsafe_arena_set_allocated_ordercancellation(
      ::vega::OrderCancellation* ordercancellation);
  ::vega::OrderCancellation* unsafe_arena_release_ordercancellation();

  // .vega.Proposal proposal = 104 [json_name = "proposal"];
  bool has_proposal() const;
  private:
  bool _internal_has_proposal() const;
  public:
  void clear_proposal();
  const ::vega::Proposal& proposal() const;
  ::vega::Proposal* release_proposal();
  ::vega::Proposal* mutable_proposal();
  void set_allocated_proposal(::vega::Proposal* proposal);
  private:
  const ::vega::Proposal& _internal_proposal() const;
  ::vega::Proposal* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::vega::Proposal* proposal);
  ::vega::Proposal* unsafe_arena_release_proposal();

  // .vega.Vote vote = 105 [json_name = "vote"];
  bool has_vote() const;
  private:
  bool _internal_has_vote() const;
  public:
  void clear_vote();
  const ::vega::Vote& vote() const;
  ::vega::Vote* release_vote();
  ::vega::Vote* mutable_vote();
  void set_allocated_vote(::vega::Vote* vote);
  private:
  const ::vega::Vote& _internal_vote() const;
  ::vega::Vote* _internal_mutable_vote();
  public:
  void unsafe_arena_set_allocated_vote(
      ::vega::Vote* vote);
  ::vega::Vote* unsafe_arena_release_vote();

  void clear_transaction();
  TransactionCase transaction_case() const;
  // @@protoc_insertion_point(class_scope:vega.TxErrorEvent)
 private:
  class _Internal;
  void set_has_ordersubmission();
  void set_has_orderamendment();
  void set_has_ordercancellation();
  void set_has_proposal();
  void set_has_vote();

  inline bool has_transaction() const;
  inline void clear_has_transaction();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  union TransactionUnion {
    TransactionUnion() {}
    ::vega::OrderSubmission* ordersubmission_;
    ::vega::OrderAmendment* orderamendment_;
    ::vega::OrderCancellation* ordercancellation_;
    ::vega::Proposal* proposal_;
    ::vega::Vote* vote_;
  } transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class TimeUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.TimeUpdate) */ {
 public:
  inline TimeUpdate() : TimeUpdate(nullptr) {}
  virtual ~TimeUpdate();

  TimeUpdate(const TimeUpdate& from);
  TimeUpdate(TimeUpdate&& from) noexcept
    : TimeUpdate() {
    *this = ::std::move(from);
  }

  inline TimeUpdate& operator=(const TimeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeUpdate& operator=(TimeUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeUpdate& default_instance();

  static inline const TimeUpdate* internal_default_instance() {
    return reinterpret_cast<const TimeUpdate*>(
               &_TimeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TimeUpdate& a, TimeUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeUpdate* New() const final {
    return CreateMaybeMessage<TimeUpdate>(nullptr);
  }

  TimeUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeUpdate& from);
  void MergeFrom(const TimeUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.TimeUpdate";
  }
  protected:
  explicit TimeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 timestamp = 1 [json_name = "timestamp"];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.TimeUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class TransferResponses PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.TransferResponses) */ {
 public:
  inline TransferResponses() : TransferResponses(nullptr) {}
  virtual ~TransferResponses();

  TransferResponses(const TransferResponses& from);
  TransferResponses(TransferResponses&& from) noexcept
    : TransferResponses() {
    *this = ::std::move(from);
  }

  inline TransferResponses& operator=(const TransferResponses& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferResponses& operator=(TransferResponses&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferResponses& default_instance();

  static inline const TransferResponses* internal_default_instance() {
    return reinterpret_cast<const TransferResponses*>(
               &_TransferResponses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransferResponses& a, TransferResponses& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferResponses* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferResponses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferResponses* New() const final {
    return CreateMaybeMessage<TransferResponses>(nullptr);
  }

  TransferResponses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferResponses>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferResponses& from);
  void MergeFrom(const TransferResponses& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferResponses* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.TransferResponses";
  }
  protected:
  explicit TransferResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 1,
  };
  // repeated .vega.TransferResponse responses = 1 [json_name = "responses"];
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::vega::TransferResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferResponse >*
      mutable_responses();
  private:
  const ::vega::TransferResponse& _internal_responses(int index) const;
  ::vega::TransferResponse* _internal_add_responses();
  public:
  const ::vega::TransferResponse& responses(int index) const;
  ::vega::TransferResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferResponse >&
      responses() const;

  // @@protoc_insertion_point(class_scope:vega.TransferResponses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferResponse > responses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class PositionResolution PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.PositionResolution) */ {
 public:
  inline PositionResolution() : PositionResolution(nullptr) {}
  virtual ~PositionResolution();

  PositionResolution(const PositionResolution& from);
  PositionResolution(PositionResolution&& from) noexcept
    : PositionResolution() {
    *this = ::std::move(from);
  }

  inline PositionResolution& operator=(const PositionResolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionResolution& operator=(PositionResolution&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionResolution& default_instance();

  static inline const PositionResolution* internal_default_instance() {
    return reinterpret_cast<const PositionResolution*>(
               &_PositionResolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PositionResolution& a, PositionResolution& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionResolution* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionResolution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionResolution* New() const final {
    return CreateMaybeMessage<PositionResolution>(nullptr);
  }

  PositionResolution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionResolution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionResolution& from);
  void MergeFrom(const PositionResolution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionResolution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.PositionResolution";
  }
  protected:
  explicit PositionResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kDistressedFieldNumber = 2,
    kClosedFieldNumber = 3,
    kMarkPriceFieldNumber = 4,
  };
  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // int64 distressed = 2 [json_name = "distressed"];
  void clear_distressed();
  ::PROTOBUF_NAMESPACE_ID::int64 distressed() const;
  void set_distressed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_distressed() const;
  void _internal_set_distressed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 closed = 3 [json_name = "closed"];
  void clear_closed();
  ::PROTOBUF_NAMESPACE_ID::int64 closed() const;
  void set_closed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_closed() const;
  void _internal_set_closed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 markPrice = 4 [json_name = "markPrice"];
  void clear_markprice();
  ::PROTOBUF_NAMESPACE_ID::uint64 markprice() const;
  void set_markprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_markprice() const;
  void _internal_set_markprice(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.PositionResolution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::int64 distressed_;
  ::PROTOBUF_NAMESPACE_ID::int64 closed_;
  ::PROTOBUF_NAMESPACE_ID::uint64 markprice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class LossSocialization PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.LossSocialization) */ {
 public:
  inline LossSocialization() : LossSocialization(nullptr) {}
  virtual ~LossSocialization();

  LossSocialization(const LossSocialization& from);
  LossSocialization(LossSocialization&& from) noexcept
    : LossSocialization() {
    *this = ::std::move(from);
  }

  inline LossSocialization& operator=(const LossSocialization& from) {
    CopyFrom(from);
    return *this;
  }
  inline LossSocialization& operator=(LossSocialization&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LossSocialization& default_instance();

  static inline const LossSocialization* internal_default_instance() {
    return reinterpret_cast<const LossSocialization*>(
               &_LossSocialization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LossSocialization& a, LossSocialization& b) {
    a.Swap(&b);
  }
  inline void Swap(LossSocialization* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LossSocialization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LossSocialization* New() const final {
    return CreateMaybeMessage<LossSocialization>(nullptr);
  }

  LossSocialization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LossSocialization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LossSocialization& from);
  void MergeFrom(const LossSocialization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LossSocialization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.LossSocialization";
  }
  protected:
  explicit LossSocialization(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kPartyIDFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string partyID = 2 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // int64 amount = 3 [json_name = "amount"];
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.LossSocialization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class TradeSettlement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.TradeSettlement) */ {
 public:
  inline TradeSettlement() : TradeSettlement(nullptr) {}
  virtual ~TradeSettlement();

  TradeSettlement(const TradeSettlement& from);
  TradeSettlement(TradeSettlement&& from) noexcept
    : TradeSettlement() {
    *this = ::std::move(from);
  }

  inline TradeSettlement& operator=(const TradeSettlement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeSettlement& operator=(TradeSettlement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeSettlement& default_instance();

  static inline const TradeSettlement* internal_default_instance() {
    return reinterpret_cast<const TradeSettlement*>(
               &_TradeSettlement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TradeSettlement& a, TradeSettlement& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeSettlement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeSettlement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeSettlement* New() const final {
    return CreateMaybeMessage<TradeSettlement>(nullptr);
  }

  TradeSettlement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeSettlement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeSettlement& from);
  void MergeFrom(const TradeSettlement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeSettlement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.TradeSettlement";
  }
  protected:
  explicit TradeSettlement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // int64 size = 1 [json_name = "size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 price = 2 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.TradeSettlement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class SettlePosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.SettlePosition) */ {
 public:
  inline SettlePosition() : SettlePosition(nullptr) {}
  virtual ~SettlePosition();

  SettlePosition(const SettlePosition& from);
  SettlePosition(SettlePosition&& from) noexcept
    : SettlePosition() {
    *this = ::std::move(from);
  }

  inline SettlePosition& operator=(const SettlePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettlePosition& operator=(SettlePosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SettlePosition& default_instance();

  static inline const SettlePosition* internal_default_instance() {
    return reinterpret_cast<const SettlePosition*>(
               &_SettlePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SettlePosition& a, SettlePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(SettlePosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SettlePosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettlePosition* New() const final {
    return CreateMaybeMessage<SettlePosition>(nullptr);
  }

  SettlePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettlePosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettlePosition& from);
  void MergeFrom(const SettlePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettlePosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.SettlePosition";
  }
  protected:
  explicit SettlePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeSettlementsFieldNumber = 4,
    kMarketIDFieldNumber = 1,
    kPartyIDFieldNumber = 2,
    kPriceFieldNumber = 3,
  };
  // repeated .vega.TradeSettlement tradeSettlements = 4 [json_name = "tradeSettlements"];
  int tradesettlements_size() const;
  private:
  int _internal_tradesettlements_size() const;
  public:
  void clear_tradesettlements();
  ::vega::TradeSettlement* mutable_tradesettlements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TradeSettlement >*
      mutable_tradesettlements();
  private:
  const ::vega::TradeSettlement& _internal_tradesettlements(int index) const;
  ::vega::TradeSettlement* _internal_add_tradesettlements();
  public:
  const ::vega::TradeSettlement& tradesettlements(int index) const;
  ::vega::TradeSettlement* add_tradesettlements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TradeSettlement >&
      tradesettlements() const;

  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string partyID = 2 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // uint64 price = 3 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.SettlePosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TradeSettlement > tradesettlements_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class SettleDistressed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.SettleDistressed) */ {
 public:
  inline SettleDistressed() : SettleDistressed(nullptr) {}
  virtual ~SettleDistressed();

  SettleDistressed(const SettleDistressed& from);
  SettleDistressed(SettleDistressed&& from) noexcept
    : SettleDistressed() {
    *this = ::std::move(from);
  }

  inline SettleDistressed& operator=(const SettleDistressed& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettleDistressed& operator=(SettleDistressed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SettleDistressed& default_instance();

  static inline const SettleDistressed* internal_default_instance() {
    return reinterpret_cast<const SettleDistressed*>(
               &_SettleDistressed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SettleDistressed& a, SettleDistressed& b) {
    a.Swap(&b);
  }
  inline void Swap(SettleDistressed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SettleDistressed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettleDistressed* New() const final {
    return CreateMaybeMessage<SettleDistressed>(nullptr);
  }

  SettleDistressed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettleDistressed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettleDistressed& from);
  void MergeFrom(const SettleDistressed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettleDistressed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.SettleDistressed";
  }
  protected:
  explicit SettleDistressed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kPartyIDFieldNumber = 2,
    kMarginFieldNumber = 3,
    kPriceFieldNumber = 4,
  };
  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // string partyID = 2 [json_name = "partyID"];
  void clear_partyid();
  const std::string& partyid() const;
  void set_partyid(const std::string& value);
  void set_partyid(std::string&& value);
  void set_partyid(const char* value);
  void set_partyid(const char* value, size_t size);
  std::string* mutable_partyid();
  std::string* release_partyid();
  void set_allocated_partyid(std::string* partyid);
  private:
  const std::string& _internal_partyid() const;
  void _internal_set_partyid(const std::string& value);
  std::string* _internal_mutable_partyid();
  public:

  // uint64 margin = 3 [json_name = "margin"];
  void clear_margin();
  ::PROTOBUF_NAMESPACE_ID::uint64 margin() const;
  void set_margin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_margin() const;
  void _internal_set_margin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 price = 4 [json_name = "price"];
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.SettleDistressed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partyid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 margin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class MarketTick PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.MarketTick) */ {
 public:
  inline MarketTick() : MarketTick(nullptr) {}
  virtual ~MarketTick();

  MarketTick(const MarketTick& from);
  MarketTick(MarketTick&& from) noexcept
    : MarketTick() {
    *this = ::std::move(from);
  }

  inline MarketTick& operator=(const MarketTick& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketTick& operator=(MarketTick&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketTick& default_instance();

  static inline const MarketTick* internal_default_instance() {
    return reinterpret_cast<const MarketTick*>(
               &_MarketTick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MarketTick& a, MarketTick& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketTick* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketTick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketTick* New() const final {
    return CreateMaybeMessage<MarketTick>(nullptr);
  }

  MarketTick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketTick>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketTick& from);
  void MergeFrom(const MarketTick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketTick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.MarketTick";
  }
  protected:
  explicit MarketTick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // string ID = 1 [json_name = "ID"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int64 time = 2 [json_name = "time"];
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.MarketTick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class AuctionEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.AuctionEvent) */ {
 public:
  inline AuctionEvent() : AuctionEvent(nullptr) {}
  virtual ~AuctionEvent();

  AuctionEvent(const AuctionEvent& from);
  AuctionEvent(AuctionEvent&& from) noexcept
    : AuctionEvent() {
    *this = ::std::move(from);
  }

  inline AuctionEvent& operator=(const AuctionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuctionEvent& operator=(AuctionEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuctionEvent& default_instance();

  static inline const AuctionEvent* internal_default_instance() {
    return reinterpret_cast<const AuctionEvent*>(
               &_AuctionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AuctionEvent& a, AuctionEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(AuctionEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuctionEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuctionEvent* New() const final {
    return CreateMaybeMessage<AuctionEvent>(nullptr);
  }

  AuctionEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuctionEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuctionEvent& from);
  void MergeFrom(const AuctionEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuctionEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.AuctionEvent";
  }
  protected:
  explicit AuctionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIDFieldNumber = 1,
    kOpeningAuctionFieldNumber = 2,
    kLeaveFieldNumber = 3,
    kTriggerFieldNumber = 6,
    kStartFieldNumber = 4,
    kEndFieldNumber = 5,
  };
  // string marketID = 1 [json_name = "marketID"];
  void clear_marketid();
  const std::string& marketid() const;
  void set_marketid(const std::string& value);
  void set_marketid(std::string&& value);
  void set_marketid(const char* value);
  void set_marketid(const char* value, size_t size);
  std::string* mutable_marketid();
  std::string* release_marketid();
  void set_allocated_marketid(std::string* marketid);
  private:
  const std::string& _internal_marketid() const;
  void _internal_set_marketid(const std::string& value);
  std::string* _internal_mutable_marketid();
  public:

  // bool openingAuction = 2 [json_name = "openingAuction"];
  void clear_openingauction();
  bool openingauction() const;
  void set_openingauction(bool value);
  private:
  bool _internal_openingauction() const;
  void _internal_set_openingauction(bool value);
  public:

  // bool leave = 3 [json_name = "leave"];
  void clear_leave();
  bool leave() const;
  void set_leave(bool value);
  private:
  bool _internal_leave() const;
  void _internal_set_leave(bool value);
  public:

  // .vega.AuctionTrigger trigger = 6 [json_name = "trigger"];
  void clear_trigger();
  ::vega::AuctionTrigger trigger() const;
  void set_trigger(::vega::AuctionTrigger value);
  private:
  ::vega::AuctionTrigger _internal_trigger() const;
  void _internal_set_trigger(::vega::AuctionTrigger value);
  public:

  // int64 start = 4 [json_name = "start"];
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end = 5 [json_name = "end"];
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:vega.AuctionEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
  bool openingauction_;
  bool leave_;
  int trigger_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class BusEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vega.BusEvent) */ {
 public:
  inline BusEvent() : BusEvent(nullptr) {}
  virtual ~BusEvent();

  BusEvent(const BusEvent& from);
  BusEvent(BusEvent&& from) noexcept
    : BusEvent() {
    *this = ::std::move(from);
  }

  inline BusEvent& operator=(const BusEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusEvent& operator=(BusEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BusEvent& default_instance();

  enum EventCase {
    kTimeUpdate = 101,
    kTransferResponses = 102,
    kPositionResolution = 103,
    kOrder = 104,
    kAccount = 105,
    kParty = 106,
    kTrade = 107,
    kMarginLevels = 108,
    kProposal = 109,
    kVote = 110,
    kMarketData = 111,
    kNodeSignature = 112,
    kLossSocialization = 113,
    kSettlePosition = 114,
    kSettleDistressed = 115,
    kMarketCreated = 116,
    kAsset = 117,
    kMarketTick = 118,
    kWithdrawal = 119,
    kDeposit = 120,
    kAuction = 121,
    kRiskFactor = 122,
    kNetworkParameter = 123,
    kLiquidityProvision = 124,
    kMarketUpdated = 125,
    kMarket = 1001,
    kTxErrEvent = 2001,
    EVENT_NOT_SET = 0,
  };

  static inline const BusEvent* internal_default_instance() {
    return reinterpret_cast<const BusEvent*>(
               &_BusEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BusEvent& a, BusEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BusEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusEvent* New() const final {
    return CreateMaybeMessage<BusEvent>(nullptr);
  }

  BusEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BusEvent& from);
  void MergeFrom(const BusEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vega.BusEvent";
  }
  protected:
  explicit BusEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kBlockFieldNumber = 2,
    kTypeFieldNumber = 3,
    kTimeUpdateFieldNumber = 101,
    kTransferResponsesFieldNumber = 102,
    kPositionResolutionFieldNumber = 103,
    kOrderFieldNumber = 104,
    kAccountFieldNumber = 105,
    kPartyFieldNumber = 106,
    kTradeFieldNumber = 107,
    kMarginLevelsFieldNumber = 108,
    kProposalFieldNumber = 109,
    kVoteFieldNumber = 110,
    kMarketDataFieldNumber = 111,
    kNodeSignatureFieldNumber = 112,
    kLossSocializationFieldNumber = 113,
    kSettlePositionFieldNumber = 114,
    kSettleDistressedFieldNumber = 115,
    kMarketCreatedFieldNumber = 116,
    kAssetFieldNumber = 117,
    kMarketTickFieldNumber = 118,
    kWithdrawalFieldNumber = 119,
    kDepositFieldNumber = 120,
    kAuctionFieldNumber = 121,
    kRiskFactorFieldNumber = 122,
    kNetworkParameterFieldNumber = 123,
    kLiquidityProvisionFieldNumber = 124,
    kMarketUpdatedFieldNumber = 125,
    kMarketFieldNumber = 1001,
    kTxErrEventFieldNumber = 2001,
  };
  // string ID = 1 [json_name = "ID"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string block = 2 [json_name = "block"];
  void clear_block();
  const std::string& block() const;
  void set_block(const std::string& value);
  void set_block(std::string&& value);
  void set_block(const char* value);
  void set_block(const char* value, size_t size);
  std::string* mutable_block();
  std::string* release_block();
  void set_allocated_block(std::string* block);
  private:
  const std::string& _internal_block() const;
  void _internal_set_block(const std::string& value);
  std::string* _internal_mutable_block();
  public:

  // .vega.BusEventType type = 3 [json_name = "type"];
  void clear_type();
  ::vega::BusEventType type() const;
  void set_type(::vega::BusEventType value);
  private:
  ::vega::BusEventType _internal_type() const;
  void _internal_set_type(::vega::BusEventType value);
  public:

  // .vega.TimeUpdate timeUpdate = 101 [json_name = "timeUpdate"];
  bool has_timeupdate() const;
  private:
  bool _internal_has_timeupdate() const;
  public:
  void clear_timeupdate();
  const ::vega::TimeUpdate& timeupdate() const;
  ::vega::TimeUpdate* release_timeupdate();
  ::vega::TimeUpdate* mutable_timeupdate();
  void set_allocated_timeupdate(::vega::TimeUpdate* timeupdate);
  private:
  const ::vega::TimeUpdate& _internal_timeupdate() const;
  ::vega::TimeUpdate* _internal_mutable_timeupdate();
  public:
  void unsafe_arena_set_allocated_timeupdate(
      ::vega::TimeUpdate* timeupdate);
  ::vega::TimeUpdate* unsafe_arena_release_timeupdate();

  // .vega.TransferResponses transferResponses = 102 [json_name = "transferResponses"];
  bool has_transferresponses() const;
  private:
  bool _internal_has_transferresponses() const;
  public:
  void clear_transferresponses();
  const ::vega::TransferResponses& transferresponses() const;
  ::vega::TransferResponses* release_transferresponses();
  ::vega::TransferResponses* mutable_transferresponses();
  void set_allocated_transferresponses(::vega::TransferResponses* transferresponses);
  private:
  const ::vega::TransferResponses& _internal_transferresponses() const;
  ::vega::TransferResponses* _internal_mutable_transferresponses();
  public:
  void unsafe_arena_set_allocated_transferresponses(
      ::vega::TransferResponses* transferresponses);
  ::vega::TransferResponses* unsafe_arena_release_transferresponses();

  // .vega.PositionResolution positionResolution = 103 [json_name = "positionResolution"];
  bool has_positionresolution() const;
  private:
  bool _internal_has_positionresolution() const;
  public:
  void clear_positionresolution();
  const ::vega::PositionResolution& positionresolution() const;
  ::vega::PositionResolution* release_positionresolution();
  ::vega::PositionResolution* mutable_positionresolution();
  void set_allocated_positionresolution(::vega::PositionResolution* positionresolution);
  private:
  const ::vega::PositionResolution& _internal_positionresolution() const;
  ::vega::PositionResolution* _internal_mutable_positionresolution();
  public:
  void unsafe_arena_set_allocated_positionresolution(
      ::vega::PositionResolution* positionresolution);
  ::vega::PositionResolution* unsafe_arena_release_positionresolution();

  // .vega.Order order = 104 [json_name = "order"];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::vega::Order& order() const;
  ::vega::Order* release_order();
  ::vega::Order* mutable_order();
  void set_allocated_order(::vega::Order* order);
  private:
  const ::vega::Order& _internal_order() const;
  ::vega::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::vega::Order* order);
  ::vega::Order* unsafe_arena_release_order();

  // .vega.Account account = 105 [json_name = "account"];
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::vega::Account& account() const;
  ::vega::Account* release_account();
  ::vega::Account* mutable_account();
  void set_allocated_account(::vega::Account* account);
  private:
  const ::vega::Account& _internal_account() const;
  ::vega::Account* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::vega::Account* account);
  ::vega::Account* unsafe_arena_release_account();

  // .vega.Party party = 106 [json_name = "party"];
  bool has_party() const;
  private:
  bool _internal_has_party() const;
  public:
  void clear_party();
  const ::vega::Party& party() const;
  ::vega::Party* release_party();
  ::vega::Party* mutable_party();
  void set_allocated_party(::vega::Party* party);
  private:
  const ::vega::Party& _internal_party() const;
  ::vega::Party* _internal_mutable_party();
  public:
  void unsafe_arena_set_allocated_party(
      ::vega::Party* party);
  ::vega::Party* unsafe_arena_release_party();

  // .vega.Trade trade = 107 [json_name = "trade"];
  bool has_trade() const;
  private:
  bool _internal_has_trade() const;
  public:
  void clear_trade();
  const ::vega::Trade& trade() const;
  ::vega::Trade* release_trade();
  ::vega::Trade* mutable_trade();
  void set_allocated_trade(::vega::Trade* trade);
  private:
  const ::vega::Trade& _internal_trade() const;
  ::vega::Trade* _internal_mutable_trade();
  public:
  void unsafe_arena_set_allocated_trade(
      ::vega::Trade* trade);
  ::vega::Trade* unsafe_arena_release_trade();

  // .vega.MarginLevels marginLevels = 108 [json_name = "marginLevels"];
  bool has_marginlevels() const;
  private:
  bool _internal_has_marginlevels() const;
  public:
  void clear_marginlevels();
  const ::vega::MarginLevels& marginlevels() const;
  ::vega::MarginLevels* release_marginlevels();
  ::vega::MarginLevels* mutable_marginlevels();
  void set_allocated_marginlevels(::vega::MarginLevels* marginlevels);
  private:
  const ::vega::MarginLevels& _internal_marginlevels() const;
  ::vega::MarginLevels* _internal_mutable_marginlevels();
  public:
  void unsafe_arena_set_allocated_marginlevels(
      ::vega::MarginLevels* marginlevels);
  ::vega::MarginLevels* unsafe_arena_release_marginlevels();

  // .vega.Proposal proposal = 109 [json_name = "proposal"];
  bool has_proposal() const;
  private:
  bool _internal_has_proposal() const;
  public:
  void clear_proposal();
  const ::vega::Proposal& proposal() const;
  ::vega::Proposal* release_proposal();
  ::vega::Proposal* mutable_proposal();
  void set_allocated_proposal(::vega::Proposal* proposal);
  private:
  const ::vega::Proposal& _internal_proposal() const;
  ::vega::Proposal* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::vega::Proposal* proposal);
  ::vega::Proposal* unsafe_arena_release_proposal();

  // .vega.Vote vote = 110 [json_name = "vote"];
  bool has_vote() const;
  private:
  bool _internal_has_vote() const;
  public:
  void clear_vote();
  const ::vega::Vote& vote() const;
  ::vega::Vote* release_vote();
  ::vega::Vote* mutable_vote();
  void set_allocated_vote(::vega::Vote* vote);
  private:
  const ::vega::Vote& _internal_vote() const;
  ::vega::Vote* _internal_mutable_vote();
  public:
  void unsafe_arena_set_allocated_vote(
      ::vega::Vote* vote);
  ::vega::Vote* unsafe_arena_release_vote();

  // .vega.MarketData marketData = 111 [json_name = "marketData"];
  bool has_marketdata() const;
  private:
  bool _internal_has_marketdata() const;
  public:
  void clear_marketdata();
  const ::vega::MarketData& marketdata() const;
  ::vega::MarketData* release_marketdata();
  ::vega::MarketData* mutable_marketdata();
  void set_allocated_marketdata(::vega::MarketData* marketdata);
  private:
  const ::vega::MarketData& _internal_marketdata() const;
  ::vega::MarketData* _internal_mutable_marketdata();
  public:
  void unsafe_arena_set_allocated_marketdata(
      ::vega::MarketData* marketdata);
  ::vega::MarketData* unsafe_arena_release_marketdata();

  // .vega.NodeSignature nodeSignature = 112 [json_name = "nodeSignature"];
  bool has_nodesignature() const;
  private:
  bool _internal_has_nodesignature() const;
  public:
  void clear_nodesignature();
  const ::vega::NodeSignature& nodesignature() const;
  ::vega::NodeSignature* release_nodesignature();
  ::vega::NodeSignature* mutable_nodesignature();
  void set_allocated_nodesignature(::vega::NodeSignature* nodesignature);
  private:
  const ::vega::NodeSignature& _internal_nodesignature() const;
  ::vega::NodeSignature* _internal_mutable_nodesignature();
  public:
  void unsafe_arena_set_allocated_nodesignature(
      ::vega::NodeSignature* nodesignature);
  ::vega::NodeSignature* unsafe_arena_release_nodesignature();

  // .vega.LossSocialization lossSocialization = 113 [json_name = "lossSocialization"];
  bool has_losssocialization() const;
  private:
  bool _internal_has_losssocialization() const;
  public:
  void clear_losssocialization();
  const ::vega::LossSocialization& losssocialization() const;
  ::vega::LossSocialization* release_losssocialization();
  ::vega::LossSocialization* mutable_losssocialization();
  void set_allocated_losssocialization(::vega::LossSocialization* losssocialization);
  private:
  const ::vega::LossSocialization& _internal_losssocialization() const;
  ::vega::LossSocialization* _internal_mutable_losssocialization();
  public:
  void unsafe_arena_set_allocated_losssocialization(
      ::vega::LossSocialization* losssocialization);
  ::vega::LossSocialization* unsafe_arena_release_losssocialization();

  // .vega.SettlePosition settlePosition = 114 [json_name = "settlePosition"];
  bool has_settleposition() const;
  private:
  bool _internal_has_settleposition() const;
  public:
  void clear_settleposition();
  const ::vega::SettlePosition& settleposition() const;
  ::vega::SettlePosition* release_settleposition();
  ::vega::SettlePosition* mutable_settleposition();
  void set_allocated_settleposition(::vega::SettlePosition* settleposition);
  private:
  const ::vega::SettlePosition& _internal_settleposition() const;
  ::vega::SettlePosition* _internal_mutable_settleposition();
  public:
  void unsafe_arena_set_allocated_settleposition(
      ::vega::SettlePosition* settleposition);
  ::vega::SettlePosition* unsafe_arena_release_settleposition();

  // .vega.SettleDistressed settleDistressed = 115 [json_name = "settleDistressed"];
  bool has_settledistressed() const;
  private:
  bool _internal_has_settledistressed() const;
  public:
  void clear_settledistressed();
  const ::vega::SettleDistressed& settledistressed() const;
  ::vega::SettleDistressed* release_settledistressed();
  ::vega::SettleDistressed* mutable_settledistressed();
  void set_allocated_settledistressed(::vega::SettleDistressed* settledistressed);
  private:
  const ::vega::SettleDistressed& _internal_settledistressed() const;
  ::vega::SettleDistressed* _internal_mutable_settledistressed();
  public:
  void unsafe_arena_set_allocated_settledistressed(
      ::vega::SettleDistressed* settledistressed);
  ::vega::SettleDistressed* unsafe_arena_release_settledistressed();

  // .vega.Market marketCreated = 116 [json_name = "marketCreated"];
  bool has_marketcreated() const;
  private:
  bool _internal_has_marketcreated() const;
  public:
  void clear_marketcreated();
  const ::vega::Market& marketcreated() const;
  ::vega::Market* release_marketcreated();
  ::vega::Market* mutable_marketcreated();
  void set_allocated_marketcreated(::vega::Market* marketcreated);
  private:
  const ::vega::Market& _internal_marketcreated() const;
  ::vega::Market* _internal_mutable_marketcreated();
  public:
  void unsafe_arena_set_allocated_marketcreated(
      ::vega::Market* marketcreated);
  ::vega::Market* unsafe_arena_release_marketcreated();

  // .vega.Asset asset = 117 [json_name = "asset"];
  bool has_asset() const;
  private:
  bool _internal_has_asset() const;
  public:
  void clear_asset();
  const ::vega::Asset& asset() const;
  ::vega::Asset* release_asset();
  ::vega::Asset* mutable_asset();
  void set_allocated_asset(::vega::Asset* asset);
  private:
  const ::vega::Asset& _internal_asset() const;
  ::vega::Asset* _internal_mutable_asset();
  public:
  void unsafe_arena_set_allocated_asset(
      ::vega::Asset* asset);
  ::vega::Asset* unsafe_arena_release_asset();

  // .vega.MarketTick marketTick = 118 [json_name = "marketTick"];
  bool has_markettick() const;
  private:
  bool _internal_has_markettick() const;
  public:
  void clear_markettick();
  const ::vega::MarketTick& markettick() const;
  ::vega::MarketTick* release_markettick();
  ::vega::MarketTick* mutable_markettick();
  void set_allocated_markettick(::vega::MarketTick* markettick);
  private:
  const ::vega::MarketTick& _internal_markettick() const;
  ::vega::MarketTick* _internal_mutable_markettick();
  public:
  void unsafe_arena_set_allocated_markettick(
      ::vega::MarketTick* markettick);
  ::vega::MarketTick* unsafe_arena_release_markettick();

  // .vega.Withdrawal withdrawal = 119 [json_name = "withdrawal"];
  bool has_withdrawal() const;
  private:
  bool _internal_has_withdrawal() const;
  public:
  void clear_withdrawal();
  const ::vega::Withdrawal& withdrawal() const;
  ::vega::Withdrawal* release_withdrawal();
  ::vega::Withdrawal* mutable_withdrawal();
  void set_allocated_withdrawal(::vega::Withdrawal* withdrawal);
  private:
  const ::vega::Withdrawal& _internal_withdrawal() const;
  ::vega::Withdrawal* _internal_mutable_withdrawal();
  public:
  void unsafe_arena_set_allocated_withdrawal(
      ::vega::Withdrawal* withdrawal);
  ::vega::Withdrawal* unsafe_arena_release_withdrawal();

  // .vega.Deposit deposit = 120 [json_name = "deposit"];
  bool has_deposit() const;
  private:
  bool _internal_has_deposit() const;
  public:
  void clear_deposit();
  const ::vega::Deposit& deposit() const;
  ::vega::Deposit* release_deposit();
  ::vega::Deposit* mutable_deposit();
  void set_allocated_deposit(::vega::Deposit* deposit);
  private:
  const ::vega::Deposit& _internal_deposit() const;
  ::vega::Deposit* _internal_mutable_deposit();
  public:
  void unsafe_arena_set_allocated_deposit(
      ::vega::Deposit* deposit);
  ::vega::Deposit* unsafe_arena_release_deposit();

  // .vega.AuctionEvent auction = 121 [json_name = "auction"];
  bool has_auction() const;
  private:
  bool _internal_has_auction() const;
  public:
  void clear_auction();
  const ::vega::AuctionEvent& auction() const;
  ::vega::AuctionEvent* release_auction();
  ::vega::AuctionEvent* mutable_auction();
  void set_allocated_auction(::vega::AuctionEvent* auction);
  private:
  const ::vega::AuctionEvent& _internal_auction() const;
  ::vega::AuctionEvent* _internal_mutable_auction();
  public:
  void unsafe_arena_set_allocated_auction(
      ::vega::AuctionEvent* auction);
  ::vega::AuctionEvent* unsafe_arena_release_auction();

  // .vega.RiskFactor riskFactor = 122 [json_name = "riskFactor"];
  bool has_riskfactor() const;
  private:
  bool _internal_has_riskfactor() const;
  public:
  void clear_riskfactor();
  const ::vega::RiskFactor& riskfactor() const;
  ::vega::RiskFactor* release_riskfactor();
  ::vega::RiskFactor* mutable_riskfactor();
  void set_allocated_riskfactor(::vega::RiskFactor* riskfactor);
  private:
  const ::vega::RiskFactor& _internal_riskfactor() const;
  ::vega::RiskFactor* _internal_mutable_riskfactor();
  public:
  void unsafe_arena_set_allocated_riskfactor(
      ::vega::RiskFactor* riskfactor);
  ::vega::RiskFactor* unsafe_arena_release_riskfactor();

  // .vega.NetworkParameter networkParameter = 123 [json_name = "networkParameter"];
  bool has_networkparameter() const;
  private:
  bool _internal_has_networkparameter() const;
  public:
  void clear_networkparameter();
  const ::vega::NetworkParameter& networkparameter() const;
  ::vega::NetworkParameter* release_networkparameter();
  ::vega::NetworkParameter* mutable_networkparameter();
  void set_allocated_networkparameter(::vega::NetworkParameter* networkparameter);
  private:
  const ::vega::NetworkParameter& _internal_networkparameter() const;
  ::vega::NetworkParameter* _internal_mutable_networkparameter();
  public:
  void unsafe_arena_set_allocated_networkparameter(
      ::vega::NetworkParameter* networkparameter);
  ::vega::NetworkParameter* unsafe_arena_release_networkparameter();

  // .vega.LiquidityProvision liquidityProvision = 124 [json_name = "liquidityProvision"];
  bool has_liquidityprovision() const;
  private:
  bool _internal_has_liquidityprovision() const;
  public:
  void clear_liquidityprovision();
  const ::vega::LiquidityProvision& liquidityprovision() const;
  ::vega::LiquidityProvision* release_liquidityprovision();
  ::vega::LiquidityProvision* mutable_liquidityprovision();
  void set_allocated_liquidityprovision(::vega::LiquidityProvision* liquidityprovision);
  private:
  const ::vega::LiquidityProvision& _internal_liquidityprovision() const;
  ::vega::LiquidityProvision* _internal_mutable_liquidityprovision();
  public:
  void unsafe_arena_set_allocated_liquidityprovision(
      ::vega::LiquidityProvision* liquidityprovision);
  ::vega::LiquidityProvision* unsafe_arena_release_liquidityprovision();

  // .vega.Market marketUpdated = 125 [json_name = "marketUpdated"];
  bool has_marketupdated() const;
  private:
  bool _internal_has_marketupdated() const;
  public:
  void clear_marketupdated();
  const ::vega::Market& marketupdated() const;
  ::vega::Market* release_marketupdated();
  ::vega::Market* mutable_marketupdated();
  void set_allocated_marketupdated(::vega::Market* marketupdated);
  private:
  const ::vega::Market& _internal_marketupdated() const;
  ::vega::Market* _internal_mutable_marketupdated();
  public:
  void unsafe_arena_set_allocated_marketupdated(
      ::vega::Market* marketupdated);
  ::vega::Market* unsafe_arena_release_marketupdated();

  // .vega.MarketEvent market = 1001 [json_name = "market"];
  bool has_market() const;
  private:
  bool _internal_has_market() const;
  public:
  void clear_market();
  const ::vega::MarketEvent& market() const;
  ::vega::MarketEvent* release_market();
  ::vega::MarketEvent* mutable_market();
  void set_allocated_market(::vega::MarketEvent* market);
  private:
  const ::vega::MarketEvent& _internal_market() const;
  ::vega::MarketEvent* _internal_mutable_market();
  public:
  void unsafe_arena_set_allocated_market(
      ::vega::MarketEvent* market);
  ::vega::MarketEvent* unsafe_arena_release_market();

  // .vega.TxErrorEvent txErrEvent = 2001 [json_name = "txErrEvent"];
  bool has_txerrevent() const;
  private:
  bool _internal_has_txerrevent() const;
  public:
  void clear_txerrevent();
  const ::vega::TxErrorEvent& txerrevent() const;
  ::vega::TxErrorEvent* release_txerrevent();
  ::vega::TxErrorEvent* mutable_txerrevent();
  void set_allocated_txerrevent(::vega::TxErrorEvent* txerrevent);
  private:
  const ::vega::TxErrorEvent& _internal_txerrevent() const;
  ::vega::TxErrorEvent* _internal_mutable_txerrevent();
  public:
  void unsafe_arena_set_allocated_txerrevent(
      ::vega::TxErrorEvent* txerrevent);
  ::vega::TxErrorEvent* unsafe_arena_release_txerrevent();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:vega.BusEvent)
 private:
  class _Internal;
  void set_has_timeupdate();
  void set_has_transferresponses();
  void set_has_positionresolution();
  void set_has_order();
  void set_has_account();
  void set_has_party();
  void set_has_trade();
  void set_has_marginlevels();
  void set_has_proposal();
  void set_has_vote();
  void set_has_marketdata();
  void set_has_nodesignature();
  void set_has_losssocialization();
  void set_has_settleposition();
  void set_has_settledistressed();
  void set_has_marketcreated();
  void set_has_asset();
  void set_has_markettick();
  void set_has_withdrawal();
  void set_has_deposit();
  void set_has_auction();
  void set_has_riskfactor();
  void set_has_networkparameter();
  void set_has_liquidityprovision();
  void set_has_marketupdated();
  void set_has_market();
  void set_has_txerrevent();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_;
  int type_;
  union EventUnion {
    EventUnion() {}
    ::vega::TimeUpdate* timeupdate_;
    ::vega::TransferResponses* transferresponses_;
    ::vega::PositionResolution* positionresolution_;
    ::vega::Order* order_;
    ::vega::Account* account_;
    ::vega::Party* party_;
    ::vega::Trade* trade_;
    ::vega::MarginLevels* marginlevels_;
    ::vega::Proposal* proposal_;
    ::vega::Vote* vote_;
    ::vega::MarketData* marketdata_;
    ::vega::NodeSignature* nodesignature_;
    ::vega::LossSocialization* losssocialization_;
    ::vega::SettlePosition* settleposition_;
    ::vega::SettleDistressed* settledistressed_;
    ::vega::Market* marketcreated_;
    ::vega::Asset* asset_;
    ::vega::MarketTick* markettick_;
    ::vega::Withdrawal* withdrawal_;
    ::vega::Deposit* deposit_;
    ::vega::AuctionEvent* auction_;
    ::vega::RiskFactor* riskfactor_;
    ::vega::NetworkParameter* networkparameter_;
    ::vega::LiquidityProvision* liquidityprovision_;
    ::vega::Market* marketupdated_;
    ::vega::MarketEvent* market_;
    ::vega::TxErrorEvent* txerrevent_;
  } event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_events_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MarketEvent

// string marketID = 1 [json_name = "marketID"];
inline void MarketEvent::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& MarketEvent::marketid() const {
  // @@protoc_insertion_point(field_get:vega.MarketEvent.marketID)
  return _internal_marketid();
}
inline void MarketEvent::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.MarketEvent.marketID)
}
inline std::string* MarketEvent::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.MarketEvent.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& MarketEvent::_internal_marketid() const {
  return marketid_.Get();
}
inline void MarketEvent::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketEvent::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketEvent.marketID)
}
inline void MarketEvent::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarketEvent.marketID)
}
inline void MarketEvent::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarketEvent.marketID)
}
inline std::string* MarketEvent::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketEvent::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.MarketEvent.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketEvent::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarketEvent.marketID)
}

// string payload = 2 [json_name = "payload"];
inline void MarketEvent::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& MarketEvent::payload() const {
  // @@protoc_insertion_point(field_get:vega.MarketEvent.payload)
  return _internal_payload();
}
inline void MarketEvent::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:vega.MarketEvent.payload)
}
inline std::string* MarketEvent::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:vega.MarketEvent.payload)
  return _internal_mutable_payload();
}
inline const std::string& MarketEvent::_internal_payload() const {
  return payload_.Get();
}
inline void MarketEvent::_internal_set_payload(const std::string& value) {

  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketEvent::set_payload(std::string&& value) {

  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketEvent.payload)
}
inline void MarketEvent::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarketEvent.payload)
}
inline void MarketEvent::set_payload(const char* value,
    size_t size) {

  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarketEvent.payload)
}
inline std::string* MarketEvent::_internal_mutable_payload() {

  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketEvent::release_payload() {
  // @@protoc_insertion_point(field_release:vega.MarketEvent.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketEvent::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {

  } else {

  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarketEvent.payload)
}

// -------------------------------------------------------------------

// TxErrorEvent

// string PartyID = 1 [json_name = "PartyID"];
inline void TxErrorEvent::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& TxErrorEvent::partyid() const {
  // @@protoc_insertion_point(field_get:vega.TxErrorEvent.PartyID)
  return _internal_partyid();
}
inline void TxErrorEvent::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:vega.TxErrorEvent.PartyID)
}
inline std::string* TxErrorEvent::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:vega.TxErrorEvent.PartyID)
  return _internal_mutable_partyid();
}
inline const std::string& TxErrorEvent::_internal_partyid() const {
  return partyid_.Get();
}
inline void TxErrorEvent::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TxErrorEvent::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.TxErrorEvent.PartyID)
}
inline void TxErrorEvent::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.TxErrorEvent.PartyID)
}
inline void TxErrorEvent::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.TxErrorEvent.PartyID)
}
inline std::string* TxErrorEvent::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TxErrorEvent::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.TxErrorEvent.PartyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TxErrorEvent::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.TxErrorEvent.PartyID)
}

// string errMsg = 2 [json_name = "errMsg"];
inline void TxErrorEvent::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& TxErrorEvent::errmsg() const {
  // @@protoc_insertion_point(field_get:vega.TxErrorEvent.errMsg)
  return _internal_errmsg();
}
inline void TxErrorEvent::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:vega.TxErrorEvent.errMsg)
}
inline std::string* TxErrorEvent::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:vega.TxErrorEvent.errMsg)
  return _internal_mutable_errmsg();
}
inline const std::string& TxErrorEvent::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void TxErrorEvent::_internal_set_errmsg(const std::string& value) {

  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TxErrorEvent::set_errmsg(std::string&& value) {

  errmsg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.TxErrorEvent.errMsg)
}
inline void TxErrorEvent::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.TxErrorEvent.errMsg)
}
inline void TxErrorEvent::set_errmsg(const char* value,
    size_t size) {

  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.TxErrorEvent.errMsg)
}
inline std::string* TxErrorEvent::_internal_mutable_errmsg() {

  return errmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TxErrorEvent::release_errmsg() {
  // @@protoc_insertion_point(field_release:vega.TxErrorEvent.errMsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TxErrorEvent::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {

  } else {

  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.TxErrorEvent.errMsg)
}

// .vega.OrderSubmission orderSubmission = 101 [json_name = "orderSubmission"];
inline bool TxErrorEvent::_internal_has_ordersubmission() const {
  return transaction_case() == kOrderSubmission;
}
inline bool TxErrorEvent::has_ordersubmission() const {
  return _internal_has_ordersubmission();
}
inline void TxErrorEvent::set_has_ordersubmission() {
  _oneof_case_[0] = kOrderSubmission;
}
inline ::vega::OrderSubmission* TxErrorEvent::release_ordersubmission() {
  // @@protoc_insertion_point(field_release:vega.TxErrorEvent.orderSubmission)
  if (_internal_has_ordersubmission()) {
    clear_has_transaction();
      ::vega::OrderSubmission* temp = transaction_.ordersubmission_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_.ordersubmission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::OrderSubmission& TxErrorEvent::_internal_ordersubmission() const {
  return _internal_has_ordersubmission()
      ? *transaction_.ordersubmission_
      : reinterpret_cast< ::vega::OrderSubmission&>(::vega::_OrderSubmission_default_instance_);
}
inline const ::vega::OrderSubmission& TxErrorEvent::ordersubmission() const {
  // @@protoc_insertion_point(field_get:vega.TxErrorEvent.orderSubmission)
  return _internal_ordersubmission();
}
inline ::vega::OrderSubmission* TxErrorEvent::unsafe_arena_release_ordersubmission() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.TxErrorEvent.orderSubmission)
  if (_internal_has_ordersubmission()) {
    clear_has_transaction();
    ::vega::OrderSubmission* temp = transaction_.ordersubmission_;
    transaction_.ordersubmission_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TxErrorEvent::unsafe_arena_set_allocated_ordersubmission(::vega::OrderSubmission* ordersubmission) {
  clear_transaction();
  if (ordersubmission) {
    set_has_ordersubmission();
    transaction_.ordersubmission_ = ordersubmission;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.TxErrorEvent.orderSubmission)
}
inline ::vega::OrderSubmission* TxErrorEvent::_internal_mutable_ordersubmission() {
  if (!_internal_has_ordersubmission()) {
    clear_transaction();
    set_has_ordersubmission();
    transaction_.ordersubmission_ = CreateMaybeMessage< ::vega::OrderSubmission >(GetArena());
  }
  return transaction_.ordersubmission_;
}
inline ::vega::OrderSubmission* TxErrorEvent::mutable_ordersubmission() {
  // @@protoc_insertion_point(field_mutable:vega.TxErrorEvent.orderSubmission)
  return _internal_mutable_ordersubmission();
}

// .vega.OrderAmendment orderAmendment = 102 [json_name = "orderAmendment"];
inline bool TxErrorEvent::_internal_has_orderamendment() const {
  return transaction_case() == kOrderAmendment;
}
inline bool TxErrorEvent::has_orderamendment() const {
  return _internal_has_orderamendment();
}
inline void TxErrorEvent::set_has_orderamendment() {
  _oneof_case_[0] = kOrderAmendment;
}
inline ::vega::OrderAmendment* TxErrorEvent::release_orderamendment() {
  // @@protoc_insertion_point(field_release:vega.TxErrorEvent.orderAmendment)
  if (_internal_has_orderamendment()) {
    clear_has_transaction();
      ::vega::OrderAmendment* temp = transaction_.orderamendment_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_.orderamendment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::OrderAmendment& TxErrorEvent::_internal_orderamendment() const {
  return _internal_has_orderamendment()
      ? *transaction_.orderamendment_
      : reinterpret_cast< ::vega::OrderAmendment&>(::vega::_OrderAmendment_default_instance_);
}
inline const ::vega::OrderAmendment& TxErrorEvent::orderamendment() const {
  // @@protoc_insertion_point(field_get:vega.TxErrorEvent.orderAmendment)
  return _internal_orderamendment();
}
inline ::vega::OrderAmendment* TxErrorEvent::unsafe_arena_release_orderamendment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.TxErrorEvent.orderAmendment)
  if (_internal_has_orderamendment()) {
    clear_has_transaction();
    ::vega::OrderAmendment* temp = transaction_.orderamendment_;
    transaction_.orderamendment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TxErrorEvent::unsafe_arena_set_allocated_orderamendment(::vega::OrderAmendment* orderamendment) {
  clear_transaction();
  if (orderamendment) {
    set_has_orderamendment();
    transaction_.orderamendment_ = orderamendment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.TxErrorEvent.orderAmendment)
}
inline ::vega::OrderAmendment* TxErrorEvent::_internal_mutable_orderamendment() {
  if (!_internal_has_orderamendment()) {
    clear_transaction();
    set_has_orderamendment();
    transaction_.orderamendment_ = CreateMaybeMessage< ::vega::OrderAmendment >(GetArena());
  }
  return transaction_.orderamendment_;
}
inline ::vega::OrderAmendment* TxErrorEvent::mutable_orderamendment() {
  // @@protoc_insertion_point(field_mutable:vega.TxErrorEvent.orderAmendment)
  return _internal_mutable_orderamendment();
}

// .vega.OrderCancellation orderCancellation = 103 [json_name = "orderCancellation"];
inline bool TxErrorEvent::_internal_has_ordercancellation() const {
  return transaction_case() == kOrderCancellation;
}
inline bool TxErrorEvent::has_ordercancellation() const {
  return _internal_has_ordercancellation();
}
inline void TxErrorEvent::set_has_ordercancellation() {
  _oneof_case_[0] = kOrderCancellation;
}
inline ::vega::OrderCancellation* TxErrorEvent::release_ordercancellation() {
  // @@protoc_insertion_point(field_release:vega.TxErrorEvent.orderCancellation)
  if (_internal_has_ordercancellation()) {
    clear_has_transaction();
      ::vega::OrderCancellation* temp = transaction_.ordercancellation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_.ordercancellation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::OrderCancellation& TxErrorEvent::_internal_ordercancellation() const {
  return _internal_has_ordercancellation()
      ? *transaction_.ordercancellation_
      : reinterpret_cast< ::vega::OrderCancellation&>(::vega::_OrderCancellation_default_instance_);
}
inline const ::vega::OrderCancellation& TxErrorEvent::ordercancellation() const {
  // @@protoc_insertion_point(field_get:vega.TxErrorEvent.orderCancellation)
  return _internal_ordercancellation();
}
inline ::vega::OrderCancellation* TxErrorEvent::unsafe_arena_release_ordercancellation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.TxErrorEvent.orderCancellation)
  if (_internal_has_ordercancellation()) {
    clear_has_transaction();
    ::vega::OrderCancellation* temp = transaction_.ordercancellation_;
    transaction_.ordercancellation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TxErrorEvent::unsafe_arena_set_allocated_ordercancellation(::vega::OrderCancellation* ordercancellation) {
  clear_transaction();
  if (ordercancellation) {
    set_has_ordercancellation();
    transaction_.ordercancellation_ = ordercancellation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.TxErrorEvent.orderCancellation)
}
inline ::vega::OrderCancellation* TxErrorEvent::_internal_mutable_ordercancellation() {
  if (!_internal_has_ordercancellation()) {
    clear_transaction();
    set_has_ordercancellation();
    transaction_.ordercancellation_ = CreateMaybeMessage< ::vega::OrderCancellation >(GetArena());
  }
  return transaction_.ordercancellation_;
}
inline ::vega::OrderCancellation* TxErrorEvent::mutable_ordercancellation() {
  // @@protoc_insertion_point(field_mutable:vega.TxErrorEvent.orderCancellation)
  return _internal_mutable_ordercancellation();
}

// .vega.Proposal proposal = 104 [json_name = "proposal"];
inline bool TxErrorEvent::_internal_has_proposal() const {
  return transaction_case() == kProposal;
}
inline bool TxErrorEvent::has_proposal() const {
  return _internal_has_proposal();
}
inline void TxErrorEvent::set_has_proposal() {
  _oneof_case_[0] = kProposal;
}
inline ::vega::Proposal* TxErrorEvent::release_proposal() {
  // @@protoc_insertion_point(field_release:vega.TxErrorEvent.proposal)
  if (_internal_has_proposal()) {
    clear_has_transaction();
      ::vega::Proposal* temp = transaction_.proposal_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_.proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Proposal& TxErrorEvent::_internal_proposal() const {
  return _internal_has_proposal()
      ? *transaction_.proposal_
      : reinterpret_cast< ::vega::Proposal&>(::vega::_Proposal_default_instance_);
}
inline const ::vega::Proposal& TxErrorEvent::proposal() const {
  // @@protoc_insertion_point(field_get:vega.TxErrorEvent.proposal)
  return _internal_proposal();
}
inline ::vega::Proposal* TxErrorEvent::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.TxErrorEvent.proposal)
  if (_internal_has_proposal()) {
    clear_has_transaction();
    ::vega::Proposal* temp = transaction_.proposal_;
    transaction_.proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TxErrorEvent::unsafe_arena_set_allocated_proposal(::vega::Proposal* proposal) {
  clear_transaction();
  if (proposal) {
    set_has_proposal();
    transaction_.proposal_ = proposal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.TxErrorEvent.proposal)
}
inline ::vega::Proposal* TxErrorEvent::_internal_mutable_proposal() {
  if (!_internal_has_proposal()) {
    clear_transaction();
    set_has_proposal();
    transaction_.proposal_ = CreateMaybeMessage< ::vega::Proposal >(GetArena());
  }
  return transaction_.proposal_;
}
inline ::vega::Proposal* TxErrorEvent::mutable_proposal() {
  // @@protoc_insertion_point(field_mutable:vega.TxErrorEvent.proposal)
  return _internal_mutable_proposal();
}

// .vega.Vote vote = 105 [json_name = "vote"];
inline bool TxErrorEvent::_internal_has_vote() const {
  return transaction_case() == kVote;
}
inline bool TxErrorEvent::has_vote() const {
  return _internal_has_vote();
}
inline void TxErrorEvent::set_has_vote() {
  _oneof_case_[0] = kVote;
}
inline ::vega::Vote* TxErrorEvent::release_vote() {
  // @@protoc_insertion_point(field_release:vega.TxErrorEvent.vote)
  if (_internal_has_vote()) {
    clear_has_transaction();
      ::vega::Vote* temp = transaction_.vote_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    transaction_.vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Vote& TxErrorEvent::_internal_vote() const {
  return _internal_has_vote()
      ? *transaction_.vote_
      : reinterpret_cast< ::vega::Vote&>(::vega::_Vote_default_instance_);
}
inline const ::vega::Vote& TxErrorEvent::vote() const {
  // @@protoc_insertion_point(field_get:vega.TxErrorEvent.vote)
  return _internal_vote();
}
inline ::vega::Vote* TxErrorEvent::unsafe_arena_release_vote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.TxErrorEvent.vote)
  if (_internal_has_vote()) {
    clear_has_transaction();
    ::vega::Vote* temp = transaction_.vote_;
    transaction_.vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TxErrorEvent::unsafe_arena_set_allocated_vote(::vega::Vote* vote) {
  clear_transaction();
  if (vote) {
    set_has_vote();
    transaction_.vote_ = vote;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.TxErrorEvent.vote)
}
inline ::vega::Vote* TxErrorEvent::_internal_mutable_vote() {
  if (!_internal_has_vote()) {
    clear_transaction();
    set_has_vote();
    transaction_.vote_ = CreateMaybeMessage< ::vega::Vote >(GetArena());
  }
  return transaction_.vote_;
}
inline ::vega::Vote* TxErrorEvent::mutable_vote() {
  // @@protoc_insertion_point(field_mutable:vega.TxErrorEvent.vote)
  return _internal_mutable_vote();
}

inline bool TxErrorEvent::has_transaction() const {
  return transaction_case() != TRANSACTION_NOT_SET;
}
inline void TxErrorEvent::clear_has_transaction() {
  _oneof_case_[0] = TRANSACTION_NOT_SET;
}
inline TxErrorEvent::TransactionCase TxErrorEvent::transaction_case() const {
  return TxErrorEvent::TransactionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TimeUpdate

// int64 timestamp = 1 [json_name = "timestamp"];
inline void TimeUpdate::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeUpdate::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeUpdate::timestamp() const {
  // @@protoc_insertion_point(field_get:vega.TimeUpdate.timestamp)
  return _internal_timestamp();
}
inline void TimeUpdate::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {

  timestamp_ = value;
}
inline void TimeUpdate::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:vega.TimeUpdate.timestamp)
}

// -------------------------------------------------------------------

// TransferResponses

// repeated .vega.TransferResponse responses = 1 [json_name = "responses"];
inline int TransferResponses::_internal_responses_size() const {
  return responses_.size();
}
inline int TransferResponses::responses_size() const {
  return _internal_responses_size();
}
inline ::vega::TransferResponse* TransferResponses::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:vega.TransferResponses.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferResponse >*
TransferResponses::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:vega.TransferResponses.responses)
  return &responses_;
}
inline const ::vega::TransferResponse& TransferResponses::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::vega::TransferResponse& TransferResponses::responses(int index) const {
  // @@protoc_insertion_point(field_get:vega.TransferResponses.responses)
  return _internal_responses(index);
}
inline ::vega::TransferResponse* TransferResponses::_internal_add_responses() {
  return responses_.Add();
}
inline ::vega::TransferResponse* TransferResponses::add_responses() {
  // @@protoc_insertion_point(field_add:vega.TransferResponses.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TransferResponse >&
TransferResponses::responses() const {
  // @@protoc_insertion_point(field_list:vega.TransferResponses.responses)
  return responses_;
}

// -------------------------------------------------------------------

// PositionResolution

// string marketID = 1 [json_name = "marketID"];
inline void PositionResolution::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& PositionResolution::marketid() const {
  // @@protoc_insertion_point(field_get:vega.PositionResolution.marketID)
  return _internal_marketid();
}
inline void PositionResolution::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.PositionResolution.marketID)
}
inline std::string* PositionResolution::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.PositionResolution.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& PositionResolution::_internal_marketid() const {
  return marketid_.Get();
}
inline void PositionResolution::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionResolution::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.PositionResolution.marketID)
}
inline void PositionResolution::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.PositionResolution.marketID)
}
inline void PositionResolution::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.PositionResolution.marketID)
}
inline std::string* PositionResolution::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionResolution::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.PositionResolution.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionResolution::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.PositionResolution.marketID)
}

// int64 distressed = 2 [json_name = "distressed"];
inline void PositionResolution::clear_distressed() {
  distressed_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PositionResolution::_internal_distressed() const {
  return distressed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PositionResolution::distressed() const {
  // @@protoc_insertion_point(field_get:vega.PositionResolution.distressed)
  return _internal_distressed();
}
inline void PositionResolution::_internal_set_distressed(::PROTOBUF_NAMESPACE_ID::int64 value) {

  distressed_ = value;
}
inline void PositionResolution::set_distressed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_distressed(value);
  // @@protoc_insertion_point(field_set:vega.PositionResolution.distressed)
}

// int64 closed = 3 [json_name = "closed"];
inline void PositionResolution::clear_closed() {
  closed_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PositionResolution::_internal_closed() const {
  return closed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PositionResolution::closed() const {
  // @@protoc_insertion_point(field_get:vega.PositionResolution.closed)
  return _internal_closed();
}
inline void PositionResolution::_internal_set_closed(::PROTOBUF_NAMESPACE_ID::int64 value) {

  closed_ = value;
}
inline void PositionResolution::set_closed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_closed(value);
  // @@protoc_insertion_point(field_set:vega.PositionResolution.closed)
}

// uint64 markPrice = 4 [json_name = "markPrice"];
inline void PositionResolution::clear_markprice() {
  markprice_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PositionResolution::_internal_markprice() const {
  return markprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PositionResolution::markprice() const {
  // @@protoc_insertion_point(field_get:vega.PositionResolution.markPrice)
  return _internal_markprice();
}
inline void PositionResolution::_internal_set_markprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  markprice_ = value;
}
inline void PositionResolution::set_markprice(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_markprice(value);
  // @@protoc_insertion_point(field_set:vega.PositionResolution.markPrice)
}

// -------------------------------------------------------------------

// LossSocialization

// string marketID = 1 [json_name = "marketID"];
inline void LossSocialization::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& LossSocialization::marketid() const {
  // @@protoc_insertion_point(field_get:vega.LossSocialization.marketID)
  return _internal_marketid();
}
inline void LossSocialization::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.LossSocialization.marketID)
}
inline std::string* LossSocialization::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.LossSocialization.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& LossSocialization::_internal_marketid() const {
  return marketid_.Get();
}
inline void LossSocialization::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LossSocialization::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LossSocialization.marketID)
}
inline void LossSocialization::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LossSocialization.marketID)
}
inline void LossSocialization::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LossSocialization.marketID)
}
inline std::string* LossSocialization::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LossSocialization::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.LossSocialization.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LossSocialization::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LossSocialization.marketID)
}

// string partyID = 2 [json_name = "partyID"];
inline void LossSocialization::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& LossSocialization::partyid() const {
  // @@protoc_insertion_point(field_get:vega.LossSocialization.partyID)
  return _internal_partyid();
}
inline void LossSocialization::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:vega.LossSocialization.partyID)
}
inline std::string* LossSocialization::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:vega.LossSocialization.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& LossSocialization::_internal_partyid() const {
  return partyid_.Get();
}
inline void LossSocialization::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LossSocialization::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.LossSocialization.partyID)
}
inline void LossSocialization::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.LossSocialization.partyID)
}
inline void LossSocialization::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.LossSocialization.partyID)
}
inline std::string* LossSocialization::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LossSocialization::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.LossSocialization.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LossSocialization::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.LossSocialization.partyID)
}

// int64 amount = 3 [json_name = "amount"];
inline void LossSocialization::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LossSocialization::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LossSocialization::amount() const {
  // @@protoc_insertion_point(field_get:vega.LossSocialization.amount)
  return _internal_amount();
}
inline void LossSocialization::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {

  amount_ = value;
}
inline void LossSocialization::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:vega.LossSocialization.amount)
}

// -------------------------------------------------------------------

// TradeSettlement

// int64 size = 1 [json_name = "size"];
inline void TradeSettlement::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeSettlement::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TradeSettlement::size() const {
  // @@protoc_insertion_point(field_get:vega.TradeSettlement.size)
  return _internal_size();
}
inline void TradeSettlement::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {

  size_ = value;
}
inline void TradeSettlement::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:vega.TradeSettlement.size)
}

// uint64 price = 2 [json_name = "price"];
inline void TradeSettlement::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradeSettlement::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradeSettlement::price() const {
  // @@protoc_insertion_point(field_get:vega.TradeSettlement.price)
  return _internal_price();
}
inline void TradeSettlement::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void TradeSettlement::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.TradeSettlement.price)
}

// -------------------------------------------------------------------

// SettlePosition

// string marketID = 1 [json_name = "marketID"];
inline void SettlePosition::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& SettlePosition::marketid() const {
  // @@protoc_insertion_point(field_get:vega.SettlePosition.marketID)
  return _internal_marketid();
}
inline void SettlePosition::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.SettlePosition.marketID)
}
inline std::string* SettlePosition::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.SettlePosition.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& SettlePosition::_internal_marketid() const {
  return marketid_.Get();
}
inline void SettlePosition::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SettlePosition::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.SettlePosition.marketID)
}
inline void SettlePosition::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.SettlePosition.marketID)
}
inline void SettlePosition::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.SettlePosition.marketID)
}
inline std::string* SettlePosition::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettlePosition::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.SettlePosition.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettlePosition::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.SettlePosition.marketID)
}

// string partyID = 2 [json_name = "partyID"];
inline void SettlePosition::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& SettlePosition::partyid() const {
  // @@protoc_insertion_point(field_get:vega.SettlePosition.partyID)
  return _internal_partyid();
}
inline void SettlePosition::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:vega.SettlePosition.partyID)
}
inline std::string* SettlePosition::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:vega.SettlePosition.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& SettlePosition::_internal_partyid() const {
  return partyid_.Get();
}
inline void SettlePosition::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SettlePosition::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.SettlePosition.partyID)
}
inline void SettlePosition::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.SettlePosition.partyID)
}
inline void SettlePosition::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.SettlePosition.partyID)
}
inline std::string* SettlePosition::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettlePosition::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.SettlePosition.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettlePosition::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.SettlePosition.partyID)
}

// uint64 price = 3 [json_name = "price"];
inline void SettlePosition::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettlePosition::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettlePosition::price() const {
  // @@protoc_insertion_point(field_get:vega.SettlePosition.price)
  return _internal_price();
}
inline void SettlePosition::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void SettlePosition::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.SettlePosition.price)
}

// repeated .vega.TradeSettlement tradeSettlements = 4 [json_name = "tradeSettlements"];
inline int SettlePosition::_internal_tradesettlements_size() const {
  return tradesettlements_.size();
}
inline int SettlePosition::tradesettlements_size() const {
  return _internal_tradesettlements_size();
}
inline void SettlePosition::clear_tradesettlements() {
  tradesettlements_.Clear();
}
inline ::vega::TradeSettlement* SettlePosition::mutable_tradesettlements(int index) {
  // @@protoc_insertion_point(field_mutable:vega.SettlePosition.tradeSettlements)
  return tradesettlements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TradeSettlement >*
SettlePosition::mutable_tradesettlements() {
  // @@protoc_insertion_point(field_mutable_list:vega.SettlePosition.tradeSettlements)
  return &tradesettlements_;
}
inline const ::vega::TradeSettlement& SettlePosition::_internal_tradesettlements(int index) const {
  return tradesettlements_.Get(index);
}
inline const ::vega::TradeSettlement& SettlePosition::tradesettlements(int index) const {
  // @@protoc_insertion_point(field_get:vega.SettlePosition.tradeSettlements)
  return _internal_tradesettlements(index);
}
inline ::vega::TradeSettlement* SettlePosition::_internal_add_tradesettlements() {
  return tradesettlements_.Add();
}
inline ::vega::TradeSettlement* SettlePosition::add_tradesettlements() {
  // @@protoc_insertion_point(field_add:vega.SettlePosition.tradeSettlements)
  return _internal_add_tradesettlements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vega::TradeSettlement >&
SettlePosition::tradesettlements() const {
  // @@protoc_insertion_point(field_list:vega.SettlePosition.tradeSettlements)
  return tradesettlements_;
}

// -------------------------------------------------------------------

// SettleDistressed

// string marketID = 1 [json_name = "marketID"];
inline void SettleDistressed::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& SettleDistressed::marketid() const {
  // @@protoc_insertion_point(field_get:vega.SettleDistressed.marketID)
  return _internal_marketid();
}
inline void SettleDistressed::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.SettleDistressed.marketID)
}
inline std::string* SettleDistressed::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.SettleDistressed.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& SettleDistressed::_internal_marketid() const {
  return marketid_.Get();
}
inline void SettleDistressed::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SettleDistressed::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.SettleDistressed.marketID)
}
inline void SettleDistressed::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.SettleDistressed.marketID)
}
inline void SettleDistressed::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.SettleDistressed.marketID)
}
inline std::string* SettleDistressed::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettleDistressed::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.SettleDistressed.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettleDistressed::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.SettleDistressed.marketID)
}

// string partyID = 2 [json_name = "partyID"];
inline void SettleDistressed::clear_partyid() {
  partyid_.ClearToEmpty();
}
inline const std::string& SettleDistressed::partyid() const {
  // @@protoc_insertion_point(field_get:vega.SettleDistressed.partyID)
  return _internal_partyid();
}
inline void SettleDistressed::set_partyid(const std::string& value) {
  _internal_set_partyid(value);
  // @@protoc_insertion_point(field_set:vega.SettleDistressed.partyID)
}
inline std::string* SettleDistressed::mutable_partyid() {
  // @@protoc_insertion_point(field_mutable:vega.SettleDistressed.partyID)
  return _internal_mutable_partyid();
}
inline const std::string& SettleDistressed::_internal_partyid() const {
  return partyid_.Get();
}
inline void SettleDistressed::_internal_set_partyid(const std::string& value) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SettleDistressed::set_partyid(std::string&& value) {

  partyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.SettleDistressed.partyID)
}
inline void SettleDistressed::set_partyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.SettleDistressed.partyID)
}
inline void SettleDistressed::set_partyid(const char* value,
    size_t size) {

  partyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.SettleDistressed.partyID)
}
inline std::string* SettleDistressed::_internal_mutable_partyid() {

  return partyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SettleDistressed::release_partyid() {
  // @@protoc_insertion_point(field_release:vega.SettleDistressed.partyID)
  return partyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettleDistressed::set_allocated_partyid(std::string* partyid) {
  if (partyid != nullptr) {

  } else {

  }
  partyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.SettleDistressed.partyID)
}

// uint64 margin = 3 [json_name = "margin"];
inline void SettleDistressed::clear_margin() {
  margin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettleDistressed::_internal_margin() const {
  return margin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettleDistressed::margin() const {
  // @@protoc_insertion_point(field_get:vega.SettleDistressed.margin)
  return _internal_margin();
}
inline void SettleDistressed::_internal_set_margin(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  margin_ = value;
}
inline void SettleDistressed::set_margin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:vega.SettleDistressed.margin)
}

// uint64 price = 4 [json_name = "price"];
inline void SettleDistressed::clear_price() {
  price_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettleDistressed::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettleDistressed::price() const {
  // @@protoc_insertion_point(field_get:vega.SettleDistressed.price)
  return _internal_price();
}
inline void SettleDistressed::_internal_set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  price_ = value;
}
inline void SettleDistressed::set_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:vega.SettleDistressed.price)
}

// -------------------------------------------------------------------

// MarketTick

// string ID = 1 [json_name = "ID"];
inline void MarketTick::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& MarketTick::id() const {
  // @@protoc_insertion_point(field_get:vega.MarketTick.ID)
  return _internal_id();
}
inline void MarketTick::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.MarketTick.ID)
}
inline std::string* MarketTick::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.MarketTick.ID)
  return _internal_mutable_id();
}
inline const std::string& MarketTick::_internal_id() const {
  return id_.Get();
}
inline void MarketTick::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MarketTick::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.MarketTick.ID)
}
inline void MarketTick::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.MarketTick.ID)
}
inline void MarketTick::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.MarketTick.ID)
}
inline std::string* MarketTick::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MarketTick::release_id() {
  // @@protoc_insertion_point(field_release:vega.MarketTick.ID)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketTick::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.MarketTick.ID)
}

// int64 time = 2 [json_name = "time"];
inline void MarketTick::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketTick::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketTick::time() const {
  // @@protoc_insertion_point(field_get:vega.MarketTick.time)
  return _internal_time();
}
inline void MarketTick::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {

  time_ = value;
}
inline void MarketTick::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:vega.MarketTick.time)
}

// -------------------------------------------------------------------

// AuctionEvent

// string marketID = 1 [json_name = "marketID"];
inline void AuctionEvent::clear_marketid() {
  marketid_.ClearToEmpty();
}
inline const std::string& AuctionEvent::marketid() const {
  // @@protoc_insertion_point(field_get:vega.AuctionEvent.marketID)
  return _internal_marketid();
}
inline void AuctionEvent::set_marketid(const std::string& value) {
  _internal_set_marketid(value);
  // @@protoc_insertion_point(field_set:vega.AuctionEvent.marketID)
}
inline std::string* AuctionEvent::mutable_marketid() {
  // @@protoc_insertion_point(field_mutable:vega.AuctionEvent.marketID)
  return _internal_mutable_marketid();
}
inline const std::string& AuctionEvent::_internal_marketid() const {
  return marketid_.Get();
}
inline void AuctionEvent::_internal_set_marketid(const std::string& value) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuctionEvent::set_marketid(std::string&& value) {

  marketid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.AuctionEvent.marketID)
}
inline void AuctionEvent::set_marketid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.AuctionEvent.marketID)
}
inline void AuctionEvent::set_marketid(const char* value,
    size_t size) {

  marketid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.AuctionEvent.marketID)
}
inline std::string* AuctionEvent::_internal_mutable_marketid() {

  return marketid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuctionEvent::release_marketid() {
  // @@protoc_insertion_point(field_release:vega.AuctionEvent.marketID)
  return marketid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuctionEvent::set_allocated_marketid(std::string* marketid) {
  if (marketid != nullptr) {

  } else {

  }
  marketid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), marketid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.AuctionEvent.marketID)
}

// bool openingAuction = 2 [json_name = "openingAuction"];
inline void AuctionEvent::clear_openingauction() {
  openingauction_ = false;
}
inline bool AuctionEvent::_internal_openingauction() const {
  return openingauction_;
}
inline bool AuctionEvent::openingauction() const {
  // @@protoc_insertion_point(field_get:vega.AuctionEvent.openingAuction)
  return _internal_openingauction();
}
inline void AuctionEvent::_internal_set_openingauction(bool value) {

  openingauction_ = value;
}
inline void AuctionEvent::set_openingauction(bool value) {
  _internal_set_openingauction(value);
  // @@protoc_insertion_point(field_set:vega.AuctionEvent.openingAuction)
}

// bool leave = 3 [json_name = "leave"];
inline void AuctionEvent::clear_leave() {
  leave_ = false;
}
inline bool AuctionEvent::_internal_leave() const {
  return leave_;
}
inline bool AuctionEvent::leave() const {
  // @@protoc_insertion_point(field_get:vega.AuctionEvent.leave)
  return _internal_leave();
}
inline void AuctionEvent::_internal_set_leave(bool value) {

  leave_ = value;
}
inline void AuctionEvent::set_leave(bool value) {
  _internal_set_leave(value);
  // @@protoc_insertion_point(field_set:vega.AuctionEvent.leave)
}

// int64 start = 4 [json_name = "start"];
inline void AuctionEvent::clear_start() {
  start_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionEvent::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionEvent::start() const {
  // @@protoc_insertion_point(field_get:vega.AuctionEvent.start)
  return _internal_start();
}
inline void AuctionEvent::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int64 value) {

  start_ = value;
}
inline void AuctionEvent::set_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:vega.AuctionEvent.start)
}

// int64 end = 5 [json_name = "end"];
inline void AuctionEvent::clear_end() {
  end_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionEvent::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuctionEvent::end() const {
  // @@protoc_insertion_point(field_get:vega.AuctionEvent.end)
  return _internal_end();
}
inline void AuctionEvent::_internal_set_end(::PROTOBUF_NAMESPACE_ID::int64 value) {

  end_ = value;
}
inline void AuctionEvent::set_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:vega.AuctionEvent.end)
}

// .vega.AuctionTrigger trigger = 6 [json_name = "trigger"];
inline void AuctionEvent::clear_trigger() {
  trigger_ = 0;
}
inline ::vega::AuctionTrigger AuctionEvent::_internal_trigger() const {
  return static_cast< ::vega::AuctionTrigger >(trigger_);
}
inline ::vega::AuctionTrigger AuctionEvent::trigger() const {
  // @@protoc_insertion_point(field_get:vega.AuctionEvent.trigger)
  return _internal_trigger();
}
inline void AuctionEvent::_internal_set_trigger(::vega::AuctionTrigger value) {

  trigger_ = value;
}
inline void AuctionEvent::set_trigger(::vega::AuctionTrigger value) {
  _internal_set_trigger(value);
  // @@protoc_insertion_point(field_set:vega.AuctionEvent.trigger)
}

// -------------------------------------------------------------------

// BusEvent

// string ID = 1 [json_name = "ID"];
inline void BusEvent::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& BusEvent::id() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.ID)
  return _internal_id();
}
inline void BusEvent::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vega.BusEvent.ID)
}
inline std::string* BusEvent::mutable_id() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.ID)
  return _internal_mutable_id();
}
inline const std::string& BusEvent::_internal_id() const {
  return id_.Get();
}
inline void BusEvent::_internal_set_id(const std::string& value) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BusEvent::set_id(std::string&& value) {

  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BusEvent.ID)
}
inline void BusEvent::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BusEvent.ID)
}
inline void BusEvent::set_id(const char* value,
    size_t size) {

  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BusEvent.ID)
}
inline std::string* BusEvent::_internal_mutable_id() {

  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BusEvent::release_id() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.ID)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BusEvent::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {

  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.ID)
}

// string block = 2 [json_name = "block"];
inline void BusEvent::clear_block() {
  block_.ClearToEmpty();
}
inline const std::string& BusEvent::block() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.block)
  return _internal_block();
}
inline void BusEvent::set_block(const std::string& value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:vega.BusEvent.block)
}
inline std::string* BusEvent::mutable_block() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.block)
  return _internal_mutable_block();
}
inline const std::string& BusEvent::_internal_block() const {
  return block_.Get();
}
inline void BusEvent::_internal_set_block(const std::string& value) {

  block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BusEvent::set_block(std::string&& value) {

  block_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vega.BusEvent.block)
}
inline void BusEvent::set_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vega.BusEvent.block)
}
inline void BusEvent::set_block(const char* value,
    size_t size) {

  block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vega.BusEvent.block)
}
inline std::string* BusEvent::_internal_mutable_block() {

  return block_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BusEvent::release_block() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.block)
  return block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BusEvent::set_allocated_block(std::string* block) {
  if (block != nullptr) {

  } else {

  }
  block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vega.BusEvent.block)
}

// .vega.BusEventType type = 3 [json_name = "type"];
inline void BusEvent::clear_type() {
  type_ = 0;
}
inline ::vega::BusEventType BusEvent::_internal_type() const {
  return static_cast< ::vega::BusEventType >(type_);
}
inline ::vega::BusEventType BusEvent::type() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.type)
  return _internal_type();
}
inline void BusEvent::_internal_set_type(::vega::BusEventType value) {

  type_ = value;
}
inline void BusEvent::set_type(::vega::BusEventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vega.BusEvent.type)
}

// .vega.TimeUpdate timeUpdate = 101 [json_name = "timeUpdate"];
inline bool BusEvent::_internal_has_timeupdate() const {
  return event_case() == kTimeUpdate;
}
inline bool BusEvent::has_timeupdate() const {
  return _internal_has_timeupdate();
}
inline void BusEvent::set_has_timeupdate() {
  _oneof_case_[0] = kTimeUpdate;
}
inline void BusEvent::clear_timeupdate() {
  if (_internal_has_timeupdate()) {
    if (GetArena() == nullptr) {
      delete event_.timeupdate_;
    }
    clear_has_event();
  }
}
inline ::vega::TimeUpdate* BusEvent::release_timeupdate() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.timeUpdate)
  if (_internal_has_timeupdate()) {
    clear_has_event();
      ::vega::TimeUpdate* temp = event_.timeupdate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.timeupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::TimeUpdate& BusEvent::_internal_timeupdate() const {
  return _internal_has_timeupdate()
      ? *event_.timeupdate_
      : reinterpret_cast< ::vega::TimeUpdate&>(::vega::_TimeUpdate_default_instance_);
}
inline const ::vega::TimeUpdate& BusEvent::timeupdate() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.timeUpdate)
  return _internal_timeupdate();
}
inline ::vega::TimeUpdate* BusEvent::unsafe_arena_release_timeupdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.timeUpdate)
  if (_internal_has_timeupdate()) {
    clear_has_event();
    ::vega::TimeUpdate* temp = event_.timeupdate_;
    event_.timeupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_timeupdate(::vega::TimeUpdate* timeupdate) {
  clear_event();
  if (timeupdate) {
    set_has_timeupdate();
    event_.timeupdate_ = timeupdate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.timeUpdate)
}
inline ::vega::TimeUpdate* BusEvent::_internal_mutable_timeupdate() {
  if (!_internal_has_timeupdate()) {
    clear_event();
    set_has_timeupdate();
    event_.timeupdate_ = CreateMaybeMessage< ::vega::TimeUpdate >(GetArena());
  }
  return event_.timeupdate_;
}
inline ::vega::TimeUpdate* BusEvent::mutable_timeupdate() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.timeUpdate)
  return _internal_mutable_timeupdate();
}

// .vega.TransferResponses transferResponses = 102 [json_name = "transferResponses"];
inline bool BusEvent::_internal_has_transferresponses() const {
  return event_case() == kTransferResponses;
}
inline bool BusEvent::has_transferresponses() const {
  return _internal_has_transferresponses();
}
inline void BusEvent::set_has_transferresponses() {
  _oneof_case_[0] = kTransferResponses;
}
inline void BusEvent::clear_transferresponses() {
  if (_internal_has_transferresponses()) {
    if (GetArena() == nullptr) {
      delete event_.transferresponses_;
    }
    clear_has_event();
  }
}
inline ::vega::TransferResponses* BusEvent::release_transferresponses() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.transferResponses)
  if (_internal_has_transferresponses()) {
    clear_has_event();
      ::vega::TransferResponses* temp = event_.transferresponses_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.transferresponses_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::TransferResponses& BusEvent::_internal_transferresponses() const {
  return _internal_has_transferresponses()
      ? *event_.transferresponses_
      : reinterpret_cast< ::vega::TransferResponses&>(::vega::_TransferResponses_default_instance_);
}
inline const ::vega::TransferResponses& BusEvent::transferresponses() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.transferResponses)
  return _internal_transferresponses();
}
inline ::vega::TransferResponses* BusEvent::unsafe_arena_release_transferresponses() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.transferResponses)
  if (_internal_has_transferresponses()) {
    clear_has_event();
    ::vega::TransferResponses* temp = event_.transferresponses_;
    event_.transferresponses_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_transferresponses(::vega::TransferResponses* transferresponses) {
  clear_event();
  if (transferresponses) {
    set_has_transferresponses();
    event_.transferresponses_ = transferresponses;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.transferResponses)
}
inline ::vega::TransferResponses* BusEvent::_internal_mutable_transferresponses() {
  if (!_internal_has_transferresponses()) {
    clear_event();
    set_has_transferresponses();
    event_.transferresponses_ = CreateMaybeMessage< ::vega::TransferResponses >(GetArena());
  }
  return event_.transferresponses_;
}
inline ::vega::TransferResponses* BusEvent::mutable_transferresponses() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.transferResponses)
  return _internal_mutable_transferresponses();
}

// .vega.PositionResolution positionResolution = 103 [json_name = "positionResolution"];
inline bool BusEvent::_internal_has_positionresolution() const {
  return event_case() == kPositionResolution;
}
inline bool BusEvent::has_positionresolution() const {
  return _internal_has_positionresolution();
}
inline void BusEvent::set_has_positionresolution() {
  _oneof_case_[0] = kPositionResolution;
}
inline void BusEvent::clear_positionresolution() {
  if (_internal_has_positionresolution()) {
    if (GetArena() == nullptr) {
      delete event_.positionresolution_;
    }
    clear_has_event();
  }
}
inline ::vega::PositionResolution* BusEvent::release_positionresolution() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.positionResolution)
  if (_internal_has_positionresolution()) {
    clear_has_event();
      ::vega::PositionResolution* temp = event_.positionresolution_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.positionresolution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::PositionResolution& BusEvent::_internal_positionresolution() const {
  return _internal_has_positionresolution()
      ? *event_.positionresolution_
      : reinterpret_cast< ::vega::PositionResolution&>(::vega::_PositionResolution_default_instance_);
}
inline const ::vega::PositionResolution& BusEvent::positionresolution() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.positionResolution)
  return _internal_positionresolution();
}
inline ::vega::PositionResolution* BusEvent::unsafe_arena_release_positionresolution() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.positionResolution)
  if (_internal_has_positionresolution()) {
    clear_has_event();
    ::vega::PositionResolution* temp = event_.positionresolution_;
    event_.positionresolution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_positionresolution(::vega::PositionResolution* positionresolution) {
  clear_event();
  if (positionresolution) {
    set_has_positionresolution();
    event_.positionresolution_ = positionresolution;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.positionResolution)
}
inline ::vega::PositionResolution* BusEvent::_internal_mutable_positionresolution() {
  if (!_internal_has_positionresolution()) {
    clear_event();
    set_has_positionresolution();
    event_.positionresolution_ = CreateMaybeMessage< ::vega::PositionResolution >(GetArena());
  }
  return event_.positionresolution_;
}
inline ::vega::PositionResolution* BusEvent::mutable_positionresolution() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.positionResolution)
  return _internal_mutable_positionresolution();
}

// .vega.Order order = 104 [json_name = "order"];
inline bool BusEvent::_internal_has_order() const {
  return event_case() == kOrder;
}
inline bool BusEvent::has_order() const {
  return _internal_has_order();
}
inline void BusEvent::set_has_order() {
  _oneof_case_[0] = kOrder;
}
inline ::vega::Order* BusEvent::release_order() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.order)
  if (_internal_has_order()) {
    clear_has_event();
      ::vega::Order* temp = event_.order_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Order& BusEvent::_internal_order() const {
  return _internal_has_order()
      ? *event_.order_
      : reinterpret_cast< ::vega::Order&>(::vega::_Order_default_instance_);
}
inline const ::vega::Order& BusEvent::order() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.order)
  return _internal_order();
}
inline ::vega::Order* BusEvent::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.order)
  if (_internal_has_order()) {
    clear_has_event();
    ::vega::Order* temp = event_.order_;
    event_.order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_order(::vega::Order* order) {
  clear_event();
  if (order) {
    set_has_order();
    event_.order_ = order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.order)
}
inline ::vega::Order* BusEvent::_internal_mutable_order() {
  if (!_internal_has_order()) {
    clear_event();
    set_has_order();
    event_.order_ = CreateMaybeMessage< ::vega::Order >(GetArena());
  }
  return event_.order_;
}
inline ::vega::Order* BusEvent::mutable_order() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.order)
  return _internal_mutable_order();
}

// .vega.Account account = 105 [json_name = "account"];
inline bool BusEvent::_internal_has_account() const {
  return event_case() == kAccount;
}
inline bool BusEvent::has_account() const {
  return _internal_has_account();
}
inline void BusEvent::set_has_account() {
  _oneof_case_[0] = kAccount;
}
inline ::vega::Account* BusEvent::release_account() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.account)
  if (_internal_has_account()) {
    clear_has_event();
      ::vega::Account* temp = event_.account_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Account& BusEvent::_internal_account() const {
  return _internal_has_account()
      ? *event_.account_
      : reinterpret_cast< ::vega::Account&>(::vega::_Account_default_instance_);
}
inline const ::vega::Account& BusEvent::account() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.account)
  return _internal_account();
}
inline ::vega::Account* BusEvent::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.account)
  if (_internal_has_account()) {
    clear_has_event();
    ::vega::Account* temp = event_.account_;
    event_.account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_account(::vega::Account* account) {
  clear_event();
  if (account) {
    set_has_account();
    event_.account_ = account;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.account)
}
inline ::vega::Account* BusEvent::_internal_mutable_account() {
  if (!_internal_has_account()) {
    clear_event();
    set_has_account();
    event_.account_ = CreateMaybeMessage< ::vega::Account >(GetArena());
  }
  return event_.account_;
}
inline ::vega::Account* BusEvent::mutable_account() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.account)
  return _internal_mutable_account();
}

// .vega.Party party = 106 [json_name = "party"];
inline bool BusEvent::_internal_has_party() const {
  return event_case() == kParty;
}
inline bool BusEvent::has_party() const {
  return _internal_has_party();
}
inline void BusEvent::set_has_party() {
  _oneof_case_[0] = kParty;
}
inline ::vega::Party* BusEvent::release_party() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.party)
  if (_internal_has_party()) {
    clear_has_event();
      ::vega::Party* temp = event_.party_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.party_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Party& BusEvent::_internal_party() const {
  return _internal_has_party()
      ? *event_.party_
      : reinterpret_cast< ::vega::Party&>(::vega::_Party_default_instance_);
}
inline const ::vega::Party& BusEvent::party() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.party)
  return _internal_party();
}
inline ::vega::Party* BusEvent::unsafe_arena_release_party() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.party)
  if (_internal_has_party()) {
    clear_has_event();
    ::vega::Party* temp = event_.party_;
    event_.party_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_party(::vega::Party* party) {
  clear_event();
  if (party) {
    set_has_party();
    event_.party_ = party;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.party)
}
inline ::vega::Party* BusEvent::_internal_mutable_party() {
  if (!_internal_has_party()) {
    clear_event();
    set_has_party();
    event_.party_ = CreateMaybeMessage< ::vega::Party >(GetArena());
  }
  return event_.party_;
}
inline ::vega::Party* BusEvent::mutable_party() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.party)
  return _internal_mutable_party();
}

// .vega.Trade trade = 107 [json_name = "trade"];
inline bool BusEvent::_internal_has_trade() const {
  return event_case() == kTrade;
}
inline bool BusEvent::has_trade() const {
  return _internal_has_trade();
}
inline void BusEvent::set_has_trade() {
  _oneof_case_[0] = kTrade;
}
inline ::vega::Trade* BusEvent::release_trade() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.trade)
  if (_internal_has_trade()) {
    clear_has_event();
      ::vega::Trade* temp = event_.trade_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.trade_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Trade& BusEvent::_internal_trade() const {
  return _internal_has_trade()
      ? *event_.trade_
      : reinterpret_cast< ::vega::Trade&>(::vega::_Trade_default_instance_);
}
inline const ::vega::Trade& BusEvent::trade() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.trade)
  return _internal_trade();
}
inline ::vega::Trade* BusEvent::unsafe_arena_release_trade() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.trade)
  if (_internal_has_trade()) {
    clear_has_event();
    ::vega::Trade* temp = event_.trade_;
    event_.trade_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_trade(::vega::Trade* trade) {
  clear_event();
  if (trade) {
    set_has_trade();
    event_.trade_ = trade;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.trade)
}
inline ::vega::Trade* BusEvent::_internal_mutable_trade() {
  if (!_internal_has_trade()) {
    clear_event();
    set_has_trade();
    event_.trade_ = CreateMaybeMessage< ::vega::Trade >(GetArena());
  }
  return event_.trade_;
}
inline ::vega::Trade* BusEvent::mutable_trade() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.trade)
  return _internal_mutable_trade();
}

// .vega.MarginLevels marginLevels = 108 [json_name = "marginLevels"];
inline bool BusEvent::_internal_has_marginlevels() const {
  return event_case() == kMarginLevels;
}
inline bool BusEvent::has_marginlevels() const {
  return _internal_has_marginlevels();
}
inline void BusEvent::set_has_marginlevels() {
  _oneof_case_[0] = kMarginLevels;
}
inline ::vega::MarginLevels* BusEvent::release_marginlevels() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.marginLevels)
  if (_internal_has_marginlevels()) {
    clear_has_event();
      ::vega::MarginLevels* temp = event_.marginlevels_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.marginlevels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::MarginLevels& BusEvent::_internal_marginlevels() const {
  return _internal_has_marginlevels()
      ? *event_.marginlevels_
      : reinterpret_cast< ::vega::MarginLevels&>(::vega::_MarginLevels_default_instance_);
}
inline const ::vega::MarginLevels& BusEvent::marginlevels() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.marginLevels)
  return _internal_marginlevels();
}
inline ::vega::MarginLevels* BusEvent::unsafe_arena_release_marginlevels() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.marginLevels)
  if (_internal_has_marginlevels()) {
    clear_has_event();
    ::vega::MarginLevels* temp = event_.marginlevels_;
    event_.marginlevels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_marginlevels(::vega::MarginLevels* marginlevels) {
  clear_event();
  if (marginlevels) {
    set_has_marginlevels();
    event_.marginlevels_ = marginlevels;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.marginLevels)
}
inline ::vega::MarginLevels* BusEvent::_internal_mutable_marginlevels() {
  if (!_internal_has_marginlevels()) {
    clear_event();
    set_has_marginlevels();
    event_.marginlevels_ = CreateMaybeMessage< ::vega::MarginLevels >(GetArena());
  }
  return event_.marginlevels_;
}
inline ::vega::MarginLevels* BusEvent::mutable_marginlevels() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.marginLevels)
  return _internal_mutable_marginlevels();
}

// .vega.Proposal proposal = 109 [json_name = "proposal"];
inline bool BusEvent::_internal_has_proposal() const {
  return event_case() == kProposal;
}
inline bool BusEvent::has_proposal() const {
  return _internal_has_proposal();
}
inline void BusEvent::set_has_proposal() {
  _oneof_case_[0] = kProposal;
}
inline ::vega::Proposal* BusEvent::release_proposal() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.proposal)
  if (_internal_has_proposal()) {
    clear_has_event();
      ::vega::Proposal* temp = event_.proposal_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Proposal& BusEvent::_internal_proposal() const {
  return _internal_has_proposal()
      ? *event_.proposal_
      : reinterpret_cast< ::vega::Proposal&>(::vega::_Proposal_default_instance_);
}
inline const ::vega::Proposal& BusEvent::proposal() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.proposal)
  return _internal_proposal();
}
inline ::vega::Proposal* BusEvent::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.proposal)
  if (_internal_has_proposal()) {
    clear_has_event();
    ::vega::Proposal* temp = event_.proposal_;
    event_.proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_proposal(::vega::Proposal* proposal) {
  clear_event();
  if (proposal) {
    set_has_proposal();
    event_.proposal_ = proposal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.proposal)
}
inline ::vega::Proposal* BusEvent::_internal_mutable_proposal() {
  if (!_internal_has_proposal()) {
    clear_event();
    set_has_proposal();
    event_.proposal_ = CreateMaybeMessage< ::vega::Proposal >(GetArena());
  }
  return event_.proposal_;
}
inline ::vega::Proposal* BusEvent::mutable_proposal() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.proposal)
  return _internal_mutable_proposal();
}

// .vega.Vote vote = 110 [json_name = "vote"];
inline bool BusEvent::_internal_has_vote() const {
  return event_case() == kVote;
}
inline bool BusEvent::has_vote() const {
  return _internal_has_vote();
}
inline void BusEvent::set_has_vote() {
  _oneof_case_[0] = kVote;
}
inline ::vega::Vote* BusEvent::release_vote() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.vote)
  if (_internal_has_vote()) {
    clear_has_event();
      ::vega::Vote* temp = event_.vote_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Vote& BusEvent::_internal_vote() const {
  return _internal_has_vote()
      ? *event_.vote_
      : reinterpret_cast< ::vega::Vote&>(::vega::_Vote_default_instance_);
}
inline const ::vega::Vote& BusEvent::vote() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.vote)
  return _internal_vote();
}
inline ::vega::Vote* BusEvent::unsafe_arena_release_vote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.vote)
  if (_internal_has_vote()) {
    clear_has_event();
    ::vega::Vote* temp = event_.vote_;
    event_.vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_vote(::vega::Vote* vote) {
  clear_event();
  if (vote) {
    set_has_vote();
    event_.vote_ = vote;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.vote)
}
inline ::vega::Vote* BusEvent::_internal_mutable_vote() {
  if (!_internal_has_vote()) {
    clear_event();
    set_has_vote();
    event_.vote_ = CreateMaybeMessage< ::vega::Vote >(GetArena());
  }
  return event_.vote_;
}
inline ::vega::Vote* BusEvent::mutable_vote() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.vote)
  return _internal_mutable_vote();
}

// .vega.MarketData marketData = 111 [json_name = "marketData"];
inline bool BusEvent::_internal_has_marketdata() const {
  return event_case() == kMarketData;
}
inline bool BusEvent::has_marketdata() const {
  return _internal_has_marketdata();
}
inline void BusEvent::set_has_marketdata() {
  _oneof_case_[0] = kMarketData;
}
inline ::vega::MarketData* BusEvent::release_marketdata() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.marketData)
  if (_internal_has_marketdata()) {
    clear_has_event();
      ::vega::MarketData* temp = event_.marketdata_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.marketdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::MarketData& BusEvent::_internal_marketdata() const {
  return _internal_has_marketdata()
      ? *event_.marketdata_
      : reinterpret_cast< ::vega::MarketData&>(::vega::_MarketData_default_instance_);
}
inline const ::vega::MarketData& BusEvent::marketdata() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.marketData)
  return _internal_marketdata();
}
inline ::vega::MarketData* BusEvent::unsafe_arena_release_marketdata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.marketData)
  if (_internal_has_marketdata()) {
    clear_has_event();
    ::vega::MarketData* temp = event_.marketdata_;
    event_.marketdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_marketdata(::vega::MarketData* marketdata) {
  clear_event();
  if (marketdata) {
    set_has_marketdata();
    event_.marketdata_ = marketdata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.marketData)
}
inline ::vega::MarketData* BusEvent::_internal_mutable_marketdata() {
  if (!_internal_has_marketdata()) {
    clear_event();
    set_has_marketdata();
    event_.marketdata_ = CreateMaybeMessage< ::vega::MarketData >(GetArena());
  }
  return event_.marketdata_;
}
inline ::vega::MarketData* BusEvent::mutable_marketdata() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.marketData)
  return _internal_mutable_marketdata();
}

// .vega.NodeSignature nodeSignature = 112 [json_name = "nodeSignature"];
inline bool BusEvent::_internal_has_nodesignature() const {
  return event_case() == kNodeSignature;
}
inline bool BusEvent::has_nodesignature() const {
  return _internal_has_nodesignature();
}
inline void BusEvent::set_has_nodesignature() {
  _oneof_case_[0] = kNodeSignature;
}
inline ::vega::NodeSignature* BusEvent::release_nodesignature() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.nodeSignature)
  if (_internal_has_nodesignature()) {
    clear_has_event();
      ::vega::NodeSignature* temp = event_.nodesignature_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.nodesignature_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::NodeSignature& BusEvent::_internal_nodesignature() const {
  return _internal_has_nodesignature()
      ? *event_.nodesignature_
      : reinterpret_cast< ::vega::NodeSignature&>(::vega::_NodeSignature_default_instance_);
}
inline const ::vega::NodeSignature& BusEvent::nodesignature() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.nodeSignature)
  return _internal_nodesignature();
}
inline ::vega::NodeSignature* BusEvent::unsafe_arena_release_nodesignature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.nodeSignature)
  if (_internal_has_nodesignature()) {
    clear_has_event();
    ::vega::NodeSignature* temp = event_.nodesignature_;
    event_.nodesignature_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_nodesignature(::vega::NodeSignature* nodesignature) {
  clear_event();
  if (nodesignature) {
    set_has_nodesignature();
    event_.nodesignature_ = nodesignature;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.nodeSignature)
}
inline ::vega::NodeSignature* BusEvent::_internal_mutable_nodesignature() {
  if (!_internal_has_nodesignature()) {
    clear_event();
    set_has_nodesignature();
    event_.nodesignature_ = CreateMaybeMessage< ::vega::NodeSignature >(GetArena());
  }
  return event_.nodesignature_;
}
inline ::vega::NodeSignature* BusEvent::mutable_nodesignature() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.nodeSignature)
  return _internal_mutable_nodesignature();
}

// .vega.LossSocialization lossSocialization = 113 [json_name = "lossSocialization"];
inline bool BusEvent::_internal_has_losssocialization() const {
  return event_case() == kLossSocialization;
}
inline bool BusEvent::has_losssocialization() const {
  return _internal_has_losssocialization();
}
inline void BusEvent::set_has_losssocialization() {
  _oneof_case_[0] = kLossSocialization;
}
inline void BusEvent::clear_losssocialization() {
  if (_internal_has_losssocialization()) {
    if (GetArena() == nullptr) {
      delete event_.losssocialization_;
    }
    clear_has_event();
  }
}
inline ::vega::LossSocialization* BusEvent::release_losssocialization() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.lossSocialization)
  if (_internal_has_losssocialization()) {
    clear_has_event();
      ::vega::LossSocialization* temp = event_.losssocialization_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.losssocialization_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::LossSocialization& BusEvent::_internal_losssocialization() const {
  return _internal_has_losssocialization()
      ? *event_.losssocialization_
      : reinterpret_cast< ::vega::LossSocialization&>(::vega::_LossSocialization_default_instance_);
}
inline const ::vega::LossSocialization& BusEvent::losssocialization() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.lossSocialization)
  return _internal_losssocialization();
}
inline ::vega::LossSocialization* BusEvent::unsafe_arena_release_losssocialization() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.lossSocialization)
  if (_internal_has_losssocialization()) {
    clear_has_event();
    ::vega::LossSocialization* temp = event_.losssocialization_;
    event_.losssocialization_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_losssocialization(::vega::LossSocialization* losssocialization) {
  clear_event();
  if (losssocialization) {
    set_has_losssocialization();
    event_.losssocialization_ = losssocialization;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.lossSocialization)
}
inline ::vega::LossSocialization* BusEvent::_internal_mutable_losssocialization() {
  if (!_internal_has_losssocialization()) {
    clear_event();
    set_has_losssocialization();
    event_.losssocialization_ = CreateMaybeMessage< ::vega::LossSocialization >(GetArena());
  }
  return event_.losssocialization_;
}
inline ::vega::LossSocialization* BusEvent::mutable_losssocialization() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.lossSocialization)
  return _internal_mutable_losssocialization();
}

// .vega.SettlePosition settlePosition = 114 [json_name = "settlePosition"];
inline bool BusEvent::_internal_has_settleposition() const {
  return event_case() == kSettlePosition;
}
inline bool BusEvent::has_settleposition() const {
  return _internal_has_settleposition();
}
inline void BusEvent::set_has_settleposition() {
  _oneof_case_[0] = kSettlePosition;
}
inline void BusEvent::clear_settleposition() {
  if (_internal_has_settleposition()) {
    if (GetArena() == nullptr) {
      delete event_.settleposition_;
    }
    clear_has_event();
  }
}
inline ::vega::SettlePosition* BusEvent::release_settleposition() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.settlePosition)
  if (_internal_has_settleposition()) {
    clear_has_event();
      ::vega::SettlePosition* temp = event_.settleposition_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.settleposition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::SettlePosition& BusEvent::_internal_settleposition() const {
  return _internal_has_settleposition()
      ? *event_.settleposition_
      : reinterpret_cast< ::vega::SettlePosition&>(::vega::_SettlePosition_default_instance_);
}
inline const ::vega::SettlePosition& BusEvent::settleposition() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.settlePosition)
  return _internal_settleposition();
}
inline ::vega::SettlePosition* BusEvent::unsafe_arena_release_settleposition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.settlePosition)
  if (_internal_has_settleposition()) {
    clear_has_event();
    ::vega::SettlePosition* temp = event_.settleposition_;
    event_.settleposition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_settleposition(::vega::SettlePosition* settleposition) {
  clear_event();
  if (settleposition) {
    set_has_settleposition();
    event_.settleposition_ = settleposition;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.settlePosition)
}
inline ::vega::SettlePosition* BusEvent::_internal_mutable_settleposition() {
  if (!_internal_has_settleposition()) {
    clear_event();
    set_has_settleposition();
    event_.settleposition_ = CreateMaybeMessage< ::vega::SettlePosition >(GetArena());
  }
  return event_.settleposition_;
}
inline ::vega::SettlePosition* BusEvent::mutable_settleposition() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.settlePosition)
  return _internal_mutable_settleposition();
}

// .vega.SettleDistressed settleDistressed = 115 [json_name = "settleDistressed"];
inline bool BusEvent::_internal_has_settledistressed() const {
  return event_case() == kSettleDistressed;
}
inline bool BusEvent::has_settledistressed() const {
  return _internal_has_settledistressed();
}
inline void BusEvent::set_has_settledistressed() {
  _oneof_case_[0] = kSettleDistressed;
}
inline void BusEvent::clear_settledistressed() {
  if (_internal_has_settledistressed()) {
    if (GetArena() == nullptr) {
      delete event_.settledistressed_;
    }
    clear_has_event();
  }
}
inline ::vega::SettleDistressed* BusEvent::release_settledistressed() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.settleDistressed)
  if (_internal_has_settledistressed()) {
    clear_has_event();
      ::vega::SettleDistressed* temp = event_.settledistressed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.settledistressed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::SettleDistressed& BusEvent::_internal_settledistressed() const {
  return _internal_has_settledistressed()
      ? *event_.settledistressed_
      : reinterpret_cast< ::vega::SettleDistressed&>(::vega::_SettleDistressed_default_instance_);
}
inline const ::vega::SettleDistressed& BusEvent::settledistressed() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.settleDistressed)
  return _internal_settledistressed();
}
inline ::vega::SettleDistressed* BusEvent::unsafe_arena_release_settledistressed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.settleDistressed)
  if (_internal_has_settledistressed()) {
    clear_has_event();
    ::vega::SettleDistressed* temp = event_.settledistressed_;
    event_.settledistressed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_settledistressed(::vega::SettleDistressed* settledistressed) {
  clear_event();
  if (settledistressed) {
    set_has_settledistressed();
    event_.settledistressed_ = settledistressed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.settleDistressed)
}
inline ::vega::SettleDistressed* BusEvent::_internal_mutable_settledistressed() {
  if (!_internal_has_settledistressed()) {
    clear_event();
    set_has_settledistressed();
    event_.settledistressed_ = CreateMaybeMessage< ::vega::SettleDistressed >(GetArena());
  }
  return event_.settledistressed_;
}
inline ::vega::SettleDistressed* BusEvent::mutable_settledistressed() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.settleDistressed)
  return _internal_mutable_settledistressed();
}

// .vega.Market marketCreated = 116 [json_name = "marketCreated"];
inline bool BusEvent::_internal_has_marketcreated() const {
  return event_case() == kMarketCreated;
}
inline bool BusEvent::has_marketcreated() const {
  return _internal_has_marketcreated();
}
inline void BusEvent::set_has_marketcreated() {
  _oneof_case_[0] = kMarketCreated;
}
inline ::vega::Market* BusEvent::release_marketcreated() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.marketCreated)
  if (_internal_has_marketcreated()) {
    clear_has_event();
      ::vega::Market* temp = event_.marketcreated_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.marketcreated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Market& BusEvent::_internal_marketcreated() const {
  return _internal_has_marketcreated()
      ? *event_.marketcreated_
      : reinterpret_cast< ::vega::Market&>(::vega::_Market_default_instance_);
}
inline const ::vega::Market& BusEvent::marketcreated() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.marketCreated)
  return _internal_marketcreated();
}
inline ::vega::Market* BusEvent::unsafe_arena_release_marketcreated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.marketCreated)
  if (_internal_has_marketcreated()) {
    clear_has_event();
    ::vega::Market* temp = event_.marketcreated_;
    event_.marketcreated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_marketcreated(::vega::Market* marketcreated) {
  clear_event();
  if (marketcreated) {
    set_has_marketcreated();
    event_.marketcreated_ = marketcreated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.marketCreated)
}
inline ::vega::Market* BusEvent::_internal_mutable_marketcreated() {
  if (!_internal_has_marketcreated()) {
    clear_event();
    set_has_marketcreated();
    event_.marketcreated_ = CreateMaybeMessage< ::vega::Market >(GetArena());
  }
  return event_.marketcreated_;
}
inline ::vega::Market* BusEvent::mutable_marketcreated() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.marketCreated)
  return _internal_mutable_marketcreated();
}

// .vega.Asset asset = 117 [json_name = "asset"];
inline bool BusEvent::_internal_has_asset() const {
  return event_case() == kAsset;
}
inline bool BusEvent::has_asset() const {
  return _internal_has_asset();
}
inline void BusEvent::set_has_asset() {
  _oneof_case_[0] = kAsset;
}
inline ::vega::Asset* BusEvent::release_asset() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.asset)
  if (_internal_has_asset()) {
    clear_has_event();
      ::vega::Asset* temp = event_.asset_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.asset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Asset& BusEvent::_internal_asset() const {
  return _internal_has_asset()
      ? *event_.asset_
      : reinterpret_cast< ::vega::Asset&>(::vega::_Asset_default_instance_);
}
inline const ::vega::Asset& BusEvent::asset() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.asset)
  return _internal_asset();
}
inline ::vega::Asset* BusEvent::unsafe_arena_release_asset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.asset)
  if (_internal_has_asset()) {
    clear_has_event();
    ::vega::Asset* temp = event_.asset_;
    event_.asset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_asset(::vega::Asset* asset) {
  clear_event();
  if (asset) {
    set_has_asset();
    event_.asset_ = asset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.asset)
}
inline ::vega::Asset* BusEvent::_internal_mutable_asset() {
  if (!_internal_has_asset()) {
    clear_event();
    set_has_asset();
    event_.asset_ = CreateMaybeMessage< ::vega::Asset >(GetArena());
  }
  return event_.asset_;
}
inline ::vega::Asset* BusEvent::mutable_asset() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.asset)
  return _internal_mutable_asset();
}

// .vega.MarketTick marketTick = 118 [json_name = "marketTick"];
inline bool BusEvent::_internal_has_markettick() const {
  return event_case() == kMarketTick;
}
inline bool BusEvent::has_markettick() const {
  return _internal_has_markettick();
}
inline void BusEvent::set_has_markettick() {
  _oneof_case_[0] = kMarketTick;
}
inline void BusEvent::clear_markettick() {
  if (_internal_has_markettick()) {
    if (GetArena() == nullptr) {
      delete event_.markettick_;
    }
    clear_has_event();
  }
}
inline ::vega::MarketTick* BusEvent::release_markettick() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.marketTick)
  if (_internal_has_markettick()) {
    clear_has_event();
      ::vega::MarketTick* temp = event_.markettick_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.markettick_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::MarketTick& BusEvent::_internal_markettick() const {
  return _internal_has_markettick()
      ? *event_.markettick_
      : reinterpret_cast< ::vega::MarketTick&>(::vega::_MarketTick_default_instance_);
}
inline const ::vega::MarketTick& BusEvent::markettick() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.marketTick)
  return _internal_markettick();
}
inline ::vega::MarketTick* BusEvent::unsafe_arena_release_markettick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.marketTick)
  if (_internal_has_markettick()) {
    clear_has_event();
    ::vega::MarketTick* temp = event_.markettick_;
    event_.markettick_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_markettick(::vega::MarketTick* markettick) {
  clear_event();
  if (markettick) {
    set_has_markettick();
    event_.markettick_ = markettick;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.marketTick)
}
inline ::vega::MarketTick* BusEvent::_internal_mutable_markettick() {
  if (!_internal_has_markettick()) {
    clear_event();
    set_has_markettick();
    event_.markettick_ = CreateMaybeMessage< ::vega::MarketTick >(GetArena());
  }
  return event_.markettick_;
}
inline ::vega::MarketTick* BusEvent::mutable_markettick() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.marketTick)
  return _internal_mutable_markettick();
}

// .vega.Withdrawal withdrawal = 119 [json_name = "withdrawal"];
inline bool BusEvent::_internal_has_withdrawal() const {
  return event_case() == kWithdrawal;
}
inline bool BusEvent::has_withdrawal() const {
  return _internal_has_withdrawal();
}
inline void BusEvent::set_has_withdrawal() {
  _oneof_case_[0] = kWithdrawal;
}
inline ::vega::Withdrawal* BusEvent::release_withdrawal() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.withdrawal)
  if (_internal_has_withdrawal()) {
    clear_has_event();
      ::vega::Withdrawal* temp = event_.withdrawal_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.withdrawal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Withdrawal& BusEvent::_internal_withdrawal() const {
  return _internal_has_withdrawal()
      ? *event_.withdrawal_
      : reinterpret_cast< ::vega::Withdrawal&>(::vega::_Withdrawal_default_instance_);
}
inline const ::vega::Withdrawal& BusEvent::withdrawal() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.withdrawal)
  return _internal_withdrawal();
}
inline ::vega::Withdrawal* BusEvent::unsafe_arena_release_withdrawal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.withdrawal)
  if (_internal_has_withdrawal()) {
    clear_has_event();
    ::vega::Withdrawal* temp = event_.withdrawal_;
    event_.withdrawal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_withdrawal(::vega::Withdrawal* withdrawal) {
  clear_event();
  if (withdrawal) {
    set_has_withdrawal();
    event_.withdrawal_ = withdrawal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.withdrawal)
}
inline ::vega::Withdrawal* BusEvent::_internal_mutable_withdrawal() {
  if (!_internal_has_withdrawal()) {
    clear_event();
    set_has_withdrawal();
    event_.withdrawal_ = CreateMaybeMessage< ::vega::Withdrawal >(GetArena());
  }
  return event_.withdrawal_;
}
inline ::vega::Withdrawal* BusEvent::mutable_withdrawal() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.withdrawal)
  return _internal_mutable_withdrawal();
}

// .vega.Deposit deposit = 120 [json_name = "deposit"];
inline bool BusEvent::_internal_has_deposit() const {
  return event_case() == kDeposit;
}
inline bool BusEvent::has_deposit() const {
  return _internal_has_deposit();
}
inline void BusEvent::set_has_deposit() {
  _oneof_case_[0] = kDeposit;
}
inline ::vega::Deposit* BusEvent::release_deposit() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.deposit)
  if (_internal_has_deposit()) {
    clear_has_event();
      ::vega::Deposit* temp = event_.deposit_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Deposit& BusEvent::_internal_deposit() const {
  return _internal_has_deposit()
      ? *event_.deposit_
      : reinterpret_cast< ::vega::Deposit&>(::vega::_Deposit_default_instance_);
}
inline const ::vega::Deposit& BusEvent::deposit() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.deposit)
  return _internal_deposit();
}
inline ::vega::Deposit* BusEvent::unsafe_arena_release_deposit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.deposit)
  if (_internal_has_deposit()) {
    clear_has_event();
    ::vega::Deposit* temp = event_.deposit_;
    event_.deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_deposit(::vega::Deposit* deposit) {
  clear_event();
  if (deposit) {
    set_has_deposit();
    event_.deposit_ = deposit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.deposit)
}
inline ::vega::Deposit* BusEvent::_internal_mutable_deposit() {
  if (!_internal_has_deposit()) {
    clear_event();
    set_has_deposit();
    event_.deposit_ = CreateMaybeMessage< ::vega::Deposit >(GetArena());
  }
  return event_.deposit_;
}
inline ::vega::Deposit* BusEvent::mutable_deposit() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.deposit)
  return _internal_mutable_deposit();
}

// .vega.AuctionEvent auction = 121 [json_name = "auction"];
inline bool BusEvent::_internal_has_auction() const {
  return event_case() == kAuction;
}
inline bool BusEvent::has_auction() const {
  return _internal_has_auction();
}
inline void BusEvent::set_has_auction() {
  _oneof_case_[0] = kAuction;
}
inline void BusEvent::clear_auction() {
  if (_internal_has_auction()) {
    if (GetArena() == nullptr) {
      delete event_.auction_;
    }
    clear_has_event();
  }
}
inline ::vega::AuctionEvent* BusEvent::release_auction() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.auction)
  if (_internal_has_auction()) {
    clear_has_event();
      ::vega::AuctionEvent* temp = event_.auction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.auction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::AuctionEvent& BusEvent::_internal_auction() const {
  return _internal_has_auction()
      ? *event_.auction_
      : reinterpret_cast< ::vega::AuctionEvent&>(::vega::_AuctionEvent_default_instance_);
}
inline const ::vega::AuctionEvent& BusEvent::auction() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.auction)
  return _internal_auction();
}
inline ::vega::AuctionEvent* BusEvent::unsafe_arena_release_auction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.auction)
  if (_internal_has_auction()) {
    clear_has_event();
    ::vega::AuctionEvent* temp = event_.auction_;
    event_.auction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_auction(::vega::AuctionEvent* auction) {
  clear_event();
  if (auction) {
    set_has_auction();
    event_.auction_ = auction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.auction)
}
inline ::vega::AuctionEvent* BusEvent::_internal_mutable_auction() {
  if (!_internal_has_auction()) {
    clear_event();
    set_has_auction();
    event_.auction_ = CreateMaybeMessage< ::vega::AuctionEvent >(GetArena());
  }
  return event_.auction_;
}
inline ::vega::AuctionEvent* BusEvent::mutable_auction() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.auction)
  return _internal_mutable_auction();
}

// .vega.RiskFactor riskFactor = 122 [json_name = "riskFactor"];
inline bool BusEvent::_internal_has_riskfactor() const {
  return event_case() == kRiskFactor;
}
inline bool BusEvent::has_riskfactor() const {
  return _internal_has_riskfactor();
}
inline void BusEvent::set_has_riskfactor() {
  _oneof_case_[0] = kRiskFactor;
}
inline ::vega::RiskFactor* BusEvent::release_riskfactor() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.riskFactor)
  if (_internal_has_riskfactor()) {
    clear_has_event();
      ::vega::RiskFactor* temp = event_.riskfactor_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.riskfactor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::RiskFactor& BusEvent::_internal_riskfactor() const {
  return _internal_has_riskfactor()
      ? *event_.riskfactor_
      : reinterpret_cast< ::vega::RiskFactor&>(::vega::_RiskFactor_default_instance_);
}
inline const ::vega::RiskFactor& BusEvent::riskfactor() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.riskFactor)
  return _internal_riskfactor();
}
inline ::vega::RiskFactor* BusEvent::unsafe_arena_release_riskfactor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.riskFactor)
  if (_internal_has_riskfactor()) {
    clear_has_event();
    ::vega::RiskFactor* temp = event_.riskfactor_;
    event_.riskfactor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_riskfactor(::vega::RiskFactor* riskfactor) {
  clear_event();
  if (riskfactor) {
    set_has_riskfactor();
    event_.riskfactor_ = riskfactor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.riskFactor)
}
inline ::vega::RiskFactor* BusEvent::_internal_mutable_riskfactor() {
  if (!_internal_has_riskfactor()) {
    clear_event();
    set_has_riskfactor();
    event_.riskfactor_ = CreateMaybeMessage< ::vega::RiskFactor >(GetArena());
  }
  return event_.riskfactor_;
}
inline ::vega::RiskFactor* BusEvent::mutable_riskfactor() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.riskFactor)
  return _internal_mutable_riskfactor();
}

// .vega.NetworkParameter networkParameter = 123 [json_name = "networkParameter"];
inline bool BusEvent::_internal_has_networkparameter() const {
  return event_case() == kNetworkParameter;
}
inline bool BusEvent::has_networkparameter() const {
  return _internal_has_networkparameter();
}
inline void BusEvent::set_has_networkparameter() {
  _oneof_case_[0] = kNetworkParameter;
}
inline ::vega::NetworkParameter* BusEvent::release_networkparameter() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.networkParameter)
  if (_internal_has_networkparameter()) {
    clear_has_event();
      ::vega::NetworkParameter* temp = event_.networkparameter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.networkparameter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::NetworkParameter& BusEvent::_internal_networkparameter() const {
  return _internal_has_networkparameter()
      ? *event_.networkparameter_
      : reinterpret_cast< ::vega::NetworkParameter&>(::vega::_NetworkParameter_default_instance_);
}
inline const ::vega::NetworkParameter& BusEvent::networkparameter() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.networkParameter)
  return _internal_networkparameter();
}
inline ::vega::NetworkParameter* BusEvent::unsafe_arena_release_networkparameter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.networkParameter)
  if (_internal_has_networkparameter()) {
    clear_has_event();
    ::vega::NetworkParameter* temp = event_.networkparameter_;
    event_.networkparameter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_networkparameter(::vega::NetworkParameter* networkparameter) {
  clear_event();
  if (networkparameter) {
    set_has_networkparameter();
    event_.networkparameter_ = networkparameter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.networkParameter)
}
inline ::vega::NetworkParameter* BusEvent::_internal_mutable_networkparameter() {
  if (!_internal_has_networkparameter()) {
    clear_event();
    set_has_networkparameter();
    event_.networkparameter_ = CreateMaybeMessage< ::vega::NetworkParameter >(GetArena());
  }
  return event_.networkparameter_;
}
inline ::vega::NetworkParameter* BusEvent::mutable_networkparameter() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.networkParameter)
  return _internal_mutable_networkparameter();
}

// .vega.LiquidityProvision liquidityProvision = 124 [json_name = "liquidityProvision"];
inline bool BusEvent::_internal_has_liquidityprovision() const {
  return event_case() == kLiquidityProvision;
}
inline bool BusEvent::has_liquidityprovision() const {
  return _internal_has_liquidityprovision();
}
inline void BusEvent::set_has_liquidityprovision() {
  _oneof_case_[0] = kLiquidityProvision;
}
inline ::vega::LiquidityProvision* BusEvent::release_liquidityprovision() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.liquidityProvision)
  if (_internal_has_liquidityprovision()) {
    clear_has_event();
      ::vega::LiquidityProvision* temp = event_.liquidityprovision_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.liquidityprovision_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::LiquidityProvision& BusEvent::_internal_liquidityprovision() const {
  return _internal_has_liquidityprovision()
      ? *event_.liquidityprovision_
      : reinterpret_cast< ::vega::LiquidityProvision&>(::vega::_LiquidityProvision_default_instance_);
}
inline const ::vega::LiquidityProvision& BusEvent::liquidityprovision() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.liquidityProvision)
  return _internal_liquidityprovision();
}
inline ::vega::LiquidityProvision* BusEvent::unsafe_arena_release_liquidityprovision() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.liquidityProvision)
  if (_internal_has_liquidityprovision()) {
    clear_has_event();
    ::vega::LiquidityProvision* temp = event_.liquidityprovision_;
    event_.liquidityprovision_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_liquidityprovision(::vega::LiquidityProvision* liquidityprovision) {
  clear_event();
  if (liquidityprovision) {
    set_has_liquidityprovision();
    event_.liquidityprovision_ = liquidityprovision;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.liquidityProvision)
}
inline ::vega::LiquidityProvision* BusEvent::_internal_mutable_liquidityprovision() {
  if (!_internal_has_liquidityprovision()) {
    clear_event();
    set_has_liquidityprovision();
    event_.liquidityprovision_ = CreateMaybeMessage< ::vega::LiquidityProvision >(GetArena());
  }
  return event_.liquidityprovision_;
}
inline ::vega::LiquidityProvision* BusEvent::mutable_liquidityprovision() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.liquidityProvision)
  return _internal_mutable_liquidityprovision();
}

// .vega.Market marketUpdated = 125 [json_name = "marketUpdated"];
inline bool BusEvent::_internal_has_marketupdated() const {
  return event_case() == kMarketUpdated;
}
inline bool BusEvent::has_marketupdated() const {
  return _internal_has_marketupdated();
}
inline void BusEvent::set_has_marketupdated() {
  _oneof_case_[0] = kMarketUpdated;
}
inline ::vega::Market* BusEvent::release_marketupdated() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.marketUpdated)
  if (_internal_has_marketupdated()) {
    clear_has_event();
      ::vega::Market* temp = event_.marketupdated_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.marketupdated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::Market& BusEvent::_internal_marketupdated() const {
  return _internal_has_marketupdated()
      ? *event_.marketupdated_
      : reinterpret_cast< ::vega::Market&>(::vega::_Market_default_instance_);
}
inline const ::vega::Market& BusEvent::marketupdated() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.marketUpdated)
  return _internal_marketupdated();
}
inline ::vega::Market* BusEvent::unsafe_arena_release_marketupdated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.marketUpdated)
  if (_internal_has_marketupdated()) {
    clear_has_event();
    ::vega::Market* temp = event_.marketupdated_;
    event_.marketupdated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_marketupdated(::vega::Market* marketupdated) {
  clear_event();
  if (marketupdated) {
    set_has_marketupdated();
    event_.marketupdated_ = marketupdated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.marketUpdated)
}
inline ::vega::Market* BusEvent::_internal_mutable_marketupdated() {
  if (!_internal_has_marketupdated()) {
    clear_event();
    set_has_marketupdated();
    event_.marketupdated_ = CreateMaybeMessage< ::vega::Market >(GetArena());
  }
  return event_.marketupdated_;
}
inline ::vega::Market* BusEvent::mutable_marketupdated() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.marketUpdated)
  return _internal_mutable_marketupdated();
}

// .vega.MarketEvent market = 1001 [json_name = "market"];
inline bool BusEvent::_internal_has_market() const {
  return event_case() == kMarket;
}
inline bool BusEvent::has_market() const {
  return _internal_has_market();
}
inline void BusEvent::set_has_market() {
  _oneof_case_[0] = kMarket;
}
inline void BusEvent::clear_market() {
  if (_internal_has_market()) {
    if (GetArena() == nullptr) {
      delete event_.market_;
    }
    clear_has_event();
  }
}
inline ::vega::MarketEvent* BusEvent::release_market() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.market)
  if (_internal_has_market()) {
    clear_has_event();
      ::vega::MarketEvent* temp = event_.market_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.market_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::MarketEvent& BusEvent::_internal_market() const {
  return _internal_has_market()
      ? *event_.market_
      : reinterpret_cast< ::vega::MarketEvent&>(::vega::_MarketEvent_default_instance_);
}
inline const ::vega::MarketEvent& BusEvent::market() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.market)
  return _internal_market();
}
inline ::vega::MarketEvent* BusEvent::unsafe_arena_release_market() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.market)
  if (_internal_has_market()) {
    clear_has_event();
    ::vega::MarketEvent* temp = event_.market_;
    event_.market_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_market(::vega::MarketEvent* market) {
  clear_event();
  if (market) {
    set_has_market();
    event_.market_ = market;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.market)
}
inline ::vega::MarketEvent* BusEvent::_internal_mutable_market() {
  if (!_internal_has_market()) {
    clear_event();
    set_has_market();
    event_.market_ = CreateMaybeMessage< ::vega::MarketEvent >(GetArena());
  }
  return event_.market_;
}
inline ::vega::MarketEvent* BusEvent::mutable_market() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.market)
  return _internal_mutable_market();
}

// .vega.TxErrorEvent txErrEvent = 2001 [json_name = "txErrEvent"];
inline bool BusEvent::_internal_has_txerrevent() const {
  return event_case() == kTxErrEvent;
}
inline bool BusEvent::has_txerrevent() const {
  return _internal_has_txerrevent();
}
inline void BusEvent::set_has_txerrevent() {
  _oneof_case_[0] = kTxErrEvent;
}
inline void BusEvent::clear_txerrevent() {
  if (_internal_has_txerrevent()) {
    if (GetArena() == nullptr) {
      delete event_.txerrevent_;
    }
    clear_has_event();
  }
}
inline ::vega::TxErrorEvent* BusEvent::release_txerrevent() {
  // @@protoc_insertion_point(field_release:vega.BusEvent.txErrEvent)
  if (_internal_has_txerrevent()) {
    clear_has_event();
      ::vega::TxErrorEvent* temp = event_.txerrevent_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.txerrevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::vega::TxErrorEvent& BusEvent::_internal_txerrevent() const {
  return _internal_has_txerrevent()
      ? *event_.txerrevent_
      : reinterpret_cast< ::vega::TxErrorEvent&>(::vega::_TxErrorEvent_default_instance_);
}
inline const ::vega::TxErrorEvent& BusEvent::txerrevent() const {
  // @@protoc_insertion_point(field_get:vega.BusEvent.txErrEvent)
  return _internal_txerrevent();
}
inline ::vega::TxErrorEvent* BusEvent::unsafe_arena_release_txerrevent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:vega.BusEvent.txErrEvent)
  if (_internal_has_txerrevent()) {
    clear_has_event();
    ::vega::TxErrorEvent* temp = event_.txerrevent_;
    event_.txerrevent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BusEvent::unsafe_arena_set_allocated_txerrevent(::vega::TxErrorEvent* txerrevent) {
  clear_event();
  if (txerrevent) {
    set_has_txerrevent();
    event_.txerrevent_ = txerrevent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vega.BusEvent.txErrEvent)
}
inline ::vega::TxErrorEvent* BusEvent::_internal_mutable_txerrevent() {
  if (!_internal_has_txerrevent()) {
    clear_event();
    set_has_txerrevent();
    event_.txerrevent_ = CreateMaybeMessage< ::vega::TxErrorEvent >(GetArena());
  }
  return event_.txerrevent_;
}
inline ::vega::TxErrorEvent* BusEvent::mutable_txerrevent() {
  // @@protoc_insertion_point(field_mutable:vega.BusEvent.txErrEvent)
  return _internal_mutable_txerrevent();
}

inline bool BusEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void BusEvent::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline BusEvent::EventCase BusEvent::event_case() const {
  return BusEvent::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vega

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vega::BusEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vega::BusEventType>() {
  return ::vega::BusEventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_events_2eproto
