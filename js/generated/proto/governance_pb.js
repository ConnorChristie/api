/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_mwitkow_go$proto$validators_validator_pb = require('../external/github.com/mwitkow/go-proto-validators/validator_pb.js');
goog.object.extend(proto, github_com_mwitkow_go$proto$validators_validator_pb);
var proto_markets_pb = require('../proto/markets_pb.js');
goog.object.extend(proto, proto_markets_pb);
var proto_assets_pb = require('../proto/assets_pb.js');
goog.object.extend(proto, proto_assets_pb);
goog.exportSymbol('proto.vega.FeeFactorsConfiguration', null, global);
goog.exportSymbol('proto.vega.FutureProduct', null, global);
goog.exportSymbol('proto.vega.GovernanceData', null, global);
goog.exportSymbol('proto.vega.InstrumentConfiguration', null, global);
goog.exportSymbol('proto.vega.NetworkConfiguration', null, global);
goog.exportSymbol('proto.vega.NewAsset', null, global);
goog.exportSymbol('proto.vega.NewMarket', null, global);
goog.exportSymbol('proto.vega.NewMarketConfiguration', null, global);
goog.exportSymbol('proto.vega.Proposal', null, global);
goog.exportSymbol('proto.vega.Proposal.State', null, global);
goog.exportSymbol('proto.vega.ProposalError', null, global);
goog.exportSymbol('proto.vega.ProposalTerms', null, global);
goog.exportSymbol('proto.vega.UpdateMarket', null, global);
goog.exportSymbol('proto.vega.UpdateNetwork', null, global);
goog.exportSymbol('proto.vega.Vote', null, global);
goog.exportSymbol('proto.vega.Vote.Value', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.NetworkConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.NetworkConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.NetworkConfiguration.displayName = 'proto.vega.NetworkConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.FeeFactorsConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.FeeFactorsConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.FeeFactorsConfiguration.displayName = 'proto.vega.FeeFactorsConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.UpdateMarket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.UpdateMarket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.UpdateMarket.displayName = 'proto.vega.UpdateMarket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.FutureProduct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.FutureProduct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.FutureProduct.displayName = 'proto.vega.FutureProduct';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.InstrumentConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vega.InstrumentConfiguration.oneofGroups_);
};
goog.inherits(proto.vega.InstrumentConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.InstrumentConfiguration.displayName = 'proto.vega.InstrumentConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.NewMarketConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.NewMarketConfiguration.repeatedFields_, proto.vega.NewMarketConfiguration.oneofGroups_);
};
goog.inherits(proto.vega.NewMarketConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.NewMarketConfiguration.displayName = 'proto.vega.NewMarketConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.NewMarket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.NewMarket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.NewMarket.displayName = 'proto.vega.NewMarket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.UpdateNetwork = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.UpdateNetwork, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.UpdateNetwork.displayName = 'proto.vega.UpdateNetwork';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.NewAsset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.NewAsset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.NewAsset.displayName = 'proto.vega.NewAsset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ProposalTerms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vega.ProposalTerms.oneofGroups_);
};
goog.inherits(proto.vega.ProposalTerms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ProposalTerms.displayName = 'proto.vega.ProposalTerms';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.GovernanceData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.GovernanceData.repeatedFields_, null);
};
goog.inherits(proto.vega.GovernanceData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.GovernanceData.displayName = 'proto.vega.GovernanceData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.Proposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.Proposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.Proposal.displayName = 'proto.vega.Proposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.Vote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.Vote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.Vote.displayName = 'proto.vega.Vote';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.NetworkConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.NetworkConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.NetworkConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NetworkConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    mincloseinseconds: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxcloseinseconds: jspb.Message.getFieldWithDefault(msg, 2, 0),
    minenactinseconds: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxenactinseconds: jspb.Message.getFieldWithDefault(msg, 4, 0),
    requiredparticipation: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    requiredmajority: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    minproposerbalance: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    minvoterbalance: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    marginconfiguration: (f = msg.getMarginconfiguration()) && proto_markets_pb.ScalingFactors.toObject(includeInstance, f),
    feefactorsconfiguration: (f = msg.getFeefactorsconfiguration()) && proto.vega.FeeFactorsConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.NetworkConfiguration}
 */
proto.vega.NetworkConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.NetworkConfiguration;
  return proto.vega.NetworkConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.NetworkConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.NetworkConfiguration}
 */
proto.vega.NetworkConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMincloseinseconds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxcloseinseconds(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinenactinseconds(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxenactinseconds(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRequiredparticipation(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRequiredmajority(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinproposerbalance(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinvoterbalance(value);
      break;
    case 9:
      var value = new proto_markets_pb.ScalingFactors;
      reader.readMessage(value,proto_markets_pb.ScalingFactors.deserializeBinaryFromReader);
      msg.setMarginconfiguration(value);
      break;
    case 10:
      var value = new proto.vega.FeeFactorsConfiguration;
      reader.readMessage(value,proto.vega.FeeFactorsConfiguration.deserializeBinaryFromReader);
      msg.setFeefactorsconfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.NetworkConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.NetworkConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.NetworkConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NetworkConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMincloseinseconds();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMaxcloseinseconds();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMinenactinseconds();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMaxenactinseconds();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getRequiredparticipation();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getRequiredmajority();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getMinproposerbalance();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getMinvoterbalance();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getMarginconfiguration();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto_markets_pb.ScalingFactors.serializeBinaryToWriter
    );
  }
  f = message.getFeefactorsconfiguration();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.vega.FeeFactorsConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 minCloseInSeconds = 1;
 * @return {number}
 */
proto.vega.NetworkConfiguration.prototype.getMincloseinseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.vega.NetworkConfiguration.prototype.setMincloseinseconds = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 maxCloseInSeconds = 2;
 * @return {number}
 */
proto.vega.NetworkConfiguration.prototype.getMaxcloseinseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.vega.NetworkConfiguration.prototype.setMaxcloseinseconds = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 minEnactInSeconds = 3;
 * @return {number}
 */
proto.vega.NetworkConfiguration.prototype.getMinenactinseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.vega.NetworkConfiguration.prototype.setMinenactinseconds = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 maxEnactInSeconds = 4;
 * @return {number}
 */
proto.vega.NetworkConfiguration.prototype.getMaxenactinseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.vega.NetworkConfiguration.prototype.setMaxenactinseconds = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional float requiredParticipation = 5;
 * @return {number}
 */
proto.vega.NetworkConfiguration.prototype.getRequiredparticipation = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.vega.NetworkConfiguration.prototype.setRequiredparticipation = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float requiredMajority = 6;
 * @return {number}
 */
proto.vega.NetworkConfiguration.prototype.getRequiredmajority = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.vega.NetworkConfiguration.prototype.setRequiredmajority = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float minProposerBalance = 7;
 * @return {number}
 */
proto.vega.NetworkConfiguration.prototype.getMinproposerbalance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.vega.NetworkConfiguration.prototype.setMinproposerbalance = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float minVoterBalance = 8;
 * @return {number}
 */
proto.vega.NetworkConfiguration.prototype.getMinvoterbalance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.vega.NetworkConfiguration.prototype.setMinvoterbalance = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional ScalingFactors marginConfiguration = 9;
 * @return {?proto.vega.ScalingFactors}
 */
proto.vega.NetworkConfiguration.prototype.getMarginconfiguration = function() {
  return /** @type{?proto.vega.ScalingFactors} */ (
    jspb.Message.getWrapperField(this, proto_markets_pb.ScalingFactors, 9));
};


/** @param {?proto.vega.ScalingFactors|undefined} value */
proto.vega.NetworkConfiguration.prototype.setMarginconfiguration = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.NetworkConfiguration.prototype.clearMarginconfiguration = function() {
  this.setMarginconfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NetworkConfiguration.prototype.hasMarginconfiguration = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional FeeFactorsConfiguration feeFactorsConfiguration = 10;
 * @return {?proto.vega.FeeFactorsConfiguration}
 */
proto.vega.NetworkConfiguration.prototype.getFeefactorsconfiguration = function() {
  return /** @type{?proto.vega.FeeFactorsConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.vega.FeeFactorsConfiguration, 10));
};


/** @param {?proto.vega.FeeFactorsConfiguration|undefined} value */
proto.vega.NetworkConfiguration.prototype.setFeefactorsconfiguration = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.NetworkConfiguration.prototype.clearFeefactorsconfiguration = function() {
  this.setFeefactorsconfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NetworkConfiguration.prototype.hasFeefactorsconfiguration = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.FeeFactorsConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.FeeFactorsConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.FeeFactorsConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.FeeFactorsConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    infrastructurefee: jspb.Message.getFieldWithDefault(msg, 1, ""),
    makerfee: jspb.Message.getFieldWithDefault(msg, 2, ""),
    liquidityfee: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.FeeFactorsConfiguration}
 */
proto.vega.FeeFactorsConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.FeeFactorsConfiguration;
  return proto.vega.FeeFactorsConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.FeeFactorsConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.FeeFactorsConfiguration}
 */
proto.vega.FeeFactorsConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfrastructurefee(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMakerfee(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiquidityfee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.FeeFactorsConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.FeeFactorsConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.FeeFactorsConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.FeeFactorsConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfrastructurefee();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMakerfee();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLiquidityfee();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string infrastructureFee = 1;
 * @return {string}
 */
proto.vega.FeeFactorsConfiguration.prototype.getInfrastructurefee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vega.FeeFactorsConfiguration.prototype.setInfrastructurefee = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string makerFee = 2;
 * @return {string}
 */
proto.vega.FeeFactorsConfiguration.prototype.getMakerfee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vega.FeeFactorsConfiguration.prototype.setMakerfee = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string liquidityFee = 3;
 * @return {string}
 */
proto.vega.FeeFactorsConfiguration.prototype.getLiquidityfee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.vega.FeeFactorsConfiguration.prototype.setLiquidityfee = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.UpdateMarket.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.UpdateMarket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.UpdateMarket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateMarket.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.UpdateMarket}
 */
proto.vega.UpdateMarket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.UpdateMarket;
  return proto.vega.UpdateMarket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.UpdateMarket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.UpdateMarket}
 */
proto.vega.UpdateMarket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.UpdateMarket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.UpdateMarket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.UpdateMarket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateMarket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.FutureProduct.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.FutureProduct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.FutureProduct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.FutureProduct.toObject = function(includeInstance, msg) {
  var f, obj = {
    maturity: jspb.Message.getFieldWithDefault(msg, 1, ""),
    asset: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.FutureProduct}
 */
proto.vega.FutureProduct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.FutureProduct;
  return proto.vega.FutureProduct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.FutureProduct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.FutureProduct}
 */
proto.vega.FutureProduct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaturity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.FutureProduct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.FutureProduct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.FutureProduct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.FutureProduct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaturity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string maturity = 1;
 * @return {string}
 */
proto.vega.FutureProduct.prototype.getMaturity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vega.FutureProduct.prototype.setMaturity = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string asset = 2;
 * @return {string}
 */
proto.vega.FutureProduct.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vega.FutureProduct.prototype.setAsset = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.InstrumentConfiguration.oneofGroups_ = [[100]];

/**
 * @enum {number}
 */
proto.vega.InstrumentConfiguration.ProductCase = {
  PRODUCT_NOT_SET: 0,
  FUTURE: 100
};

/**
 * @return {proto.vega.InstrumentConfiguration.ProductCase}
 */
proto.vega.InstrumentConfiguration.prototype.getProductCase = function() {
  return /** @type {proto.vega.InstrumentConfiguration.ProductCase} */(jspb.Message.computeOneofCase(this, proto.vega.InstrumentConfiguration.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.InstrumentConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.InstrumentConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.InstrumentConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.InstrumentConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    basename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    quotename: jspb.Message.getFieldWithDefault(msg, 4, ""),
    future: (f = msg.getFuture()) && proto.vega.FutureProduct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.InstrumentConfiguration}
 */
proto.vega.InstrumentConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.InstrumentConfiguration;
  return proto.vega.InstrumentConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.InstrumentConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.InstrumentConfiguration}
 */
proto.vega.InstrumentConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBasename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuotename(value);
      break;
    case 100:
      var value = new proto.vega.FutureProduct;
      reader.readMessage(value,proto.vega.FutureProduct.deserializeBinaryFromReader);
      msg.setFuture(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.InstrumentConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.InstrumentConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.InstrumentConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.InstrumentConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBasename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getQuotename();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFuture();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.vega.FutureProduct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.vega.InstrumentConfiguration.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vega.InstrumentConfiguration.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.vega.InstrumentConfiguration.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vega.InstrumentConfiguration.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string baseName = 3;
 * @return {string}
 */
proto.vega.InstrumentConfiguration.prototype.getBasename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.vega.InstrumentConfiguration.prototype.setBasename = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string quoteName = 4;
 * @return {string}
 */
proto.vega.InstrumentConfiguration.prototype.getQuotename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.vega.InstrumentConfiguration.prototype.setQuotename = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional FutureProduct future = 100;
 * @return {?proto.vega.FutureProduct}
 */
proto.vega.InstrumentConfiguration.prototype.getFuture = function() {
  return /** @type{?proto.vega.FutureProduct} */ (
    jspb.Message.getWrapperField(this, proto.vega.FutureProduct, 100));
};


/** @param {?proto.vega.FutureProduct|undefined} value */
proto.vega.InstrumentConfiguration.prototype.setFuture = function(value) {
  jspb.Message.setOneofWrapperField(this, 100, proto.vega.InstrumentConfiguration.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.InstrumentConfiguration.prototype.clearFuture = function() {
  this.setFuture(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.InstrumentConfiguration.prototype.hasFuture = function() {
  return jspb.Message.getField(this, 100) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.NewMarketConfiguration.repeatedFields_ = [3];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.NewMarketConfiguration.oneofGroups_ = [[100,101],[200,201]];

/**
 * @enum {number}
 */
proto.vega.NewMarketConfiguration.RiskparametersCase = {
  RISKPARAMETERS_NOT_SET: 0,
  SIMPLE: 100,
  LOGNORMAL: 101
};

/**
 * @return {proto.vega.NewMarketConfiguration.RiskparametersCase}
 */
proto.vega.NewMarketConfiguration.prototype.getRiskparametersCase = function() {
  return /** @type {proto.vega.NewMarketConfiguration.RiskparametersCase} */(jspb.Message.computeOneofCase(this, proto.vega.NewMarketConfiguration.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.vega.NewMarketConfiguration.TradingmodeCase = {
  TRADINGMODE_NOT_SET: 0,
  CONTINUOUS: 200,
  DISCRETE: 201
};

/**
 * @return {proto.vega.NewMarketConfiguration.TradingmodeCase}
 */
proto.vega.NewMarketConfiguration.prototype.getTradingmodeCase = function() {
  return /** @type {proto.vega.NewMarketConfiguration.TradingmodeCase} */(jspb.Message.computeOneofCase(this, proto.vega.NewMarketConfiguration.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.NewMarketConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.NewMarketConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.NewMarketConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NewMarketConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    instrument: (f = msg.getInstrument()) && proto.vega.InstrumentConfiguration.toObject(includeInstance, f),
    decimalplaces: jspb.Message.getFieldWithDefault(msg, 2, 0),
    metadataList: jspb.Message.getRepeatedField(msg, 3),
    openingauctionduration: jspb.Message.getFieldWithDefault(msg, 4, 0),
    simple: (f = msg.getSimple()) && proto_markets_pb.SimpleModelParams.toObject(includeInstance, f),
    lognormal: (f = msg.getLognormal()) && proto_markets_pb.LogNormalRiskModel.toObject(includeInstance, f),
    continuous: (f = msg.getContinuous()) && proto_markets_pb.ContinuousTrading.toObject(includeInstance, f),
    discrete: (f = msg.getDiscrete()) && proto_markets_pb.DiscreteTrading.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.NewMarketConfiguration}
 */
proto.vega.NewMarketConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.NewMarketConfiguration;
  return proto.vega.NewMarketConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.NewMarketConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.NewMarketConfiguration}
 */
proto.vega.NewMarketConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.InstrumentConfiguration;
      reader.readMessage(value,proto.vega.InstrumentConfiguration.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDecimalplaces(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addMetadata(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpeningauctionduration(value);
      break;
    case 100:
      var value = new proto_markets_pb.SimpleModelParams;
      reader.readMessage(value,proto_markets_pb.SimpleModelParams.deserializeBinaryFromReader);
      msg.setSimple(value);
      break;
    case 101:
      var value = new proto_markets_pb.LogNormalRiskModel;
      reader.readMessage(value,proto_markets_pb.LogNormalRiskModel.deserializeBinaryFromReader);
      msg.setLognormal(value);
      break;
    case 200:
      var value = new proto_markets_pb.ContinuousTrading;
      reader.readMessage(value,proto_markets_pb.ContinuousTrading.deserializeBinaryFromReader);
      msg.setContinuous(value);
      break;
    case 201:
      var value = new proto_markets_pb.DiscreteTrading;
      reader.readMessage(value,proto_markets_pb.DiscreteTrading.deserializeBinaryFromReader);
      msg.setDiscrete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.NewMarketConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.NewMarketConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.NewMarketConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NewMarketConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.InstrumentConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getDecimalplaces();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMetadataList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getOpeningauctionduration();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getSimple();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto_markets_pb.SimpleModelParams.serializeBinaryToWriter
    );
  }
  f = message.getLognormal();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto_markets_pb.LogNormalRiskModel.serializeBinaryToWriter
    );
  }
  f = message.getContinuous();
  if (f != null) {
    writer.writeMessage(
      200,
      f,
      proto_markets_pb.ContinuousTrading.serializeBinaryToWriter
    );
  }
  f = message.getDiscrete();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto_markets_pb.DiscreteTrading.serializeBinaryToWriter
    );
  }
};


/**
 * optional InstrumentConfiguration instrument = 1;
 * @return {?proto.vega.InstrumentConfiguration}
 */
proto.vega.NewMarketConfiguration.prototype.getInstrument = function() {
  return /** @type{?proto.vega.InstrumentConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.vega.InstrumentConfiguration, 1));
};


/** @param {?proto.vega.InstrumentConfiguration|undefined} value */
proto.vega.NewMarketConfiguration.prototype.setInstrument = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.NewMarketConfiguration.prototype.clearInstrument = function() {
  this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NewMarketConfiguration.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 decimalPlaces = 2;
 * @return {number}
 */
proto.vega.NewMarketConfiguration.prototype.getDecimalplaces = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.vega.NewMarketConfiguration.prototype.setDecimalplaces = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string metadata = 3;
 * @return {!Array<string>}
 */
proto.vega.NewMarketConfiguration.prototype.getMetadataList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.vega.NewMarketConfiguration.prototype.setMetadataList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.vega.NewMarketConfiguration.prototype.addMetadata = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.vega.NewMarketConfiguration.prototype.clearMetadataList = function() {
  this.setMetadataList([]);
};


/**
 * optional int64 openingAuctionDuration = 4;
 * @return {number}
 */
proto.vega.NewMarketConfiguration.prototype.getOpeningauctionduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.vega.NewMarketConfiguration.prototype.setOpeningauctionduration = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional SimpleModelParams simple = 100;
 * @return {?proto.vega.SimpleModelParams}
 */
proto.vega.NewMarketConfiguration.prototype.getSimple = function() {
  return /** @type{?proto.vega.SimpleModelParams} */ (
    jspb.Message.getWrapperField(this, proto_markets_pb.SimpleModelParams, 100));
};


/** @param {?proto.vega.SimpleModelParams|undefined} value */
proto.vega.NewMarketConfiguration.prototype.setSimple = function(value) {
  jspb.Message.setOneofWrapperField(this, 100, proto.vega.NewMarketConfiguration.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.NewMarketConfiguration.prototype.clearSimple = function() {
  this.setSimple(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NewMarketConfiguration.prototype.hasSimple = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional LogNormalRiskModel logNormal = 101;
 * @return {?proto.vega.LogNormalRiskModel}
 */
proto.vega.NewMarketConfiguration.prototype.getLognormal = function() {
  return /** @type{?proto.vega.LogNormalRiskModel} */ (
    jspb.Message.getWrapperField(this, proto_markets_pb.LogNormalRiskModel, 101));
};


/** @param {?proto.vega.LogNormalRiskModel|undefined} value */
proto.vega.NewMarketConfiguration.prototype.setLognormal = function(value) {
  jspb.Message.setOneofWrapperField(this, 101, proto.vega.NewMarketConfiguration.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.NewMarketConfiguration.prototype.clearLognormal = function() {
  this.setLognormal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NewMarketConfiguration.prototype.hasLognormal = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional ContinuousTrading continuous = 200;
 * @return {?proto.vega.ContinuousTrading}
 */
proto.vega.NewMarketConfiguration.prototype.getContinuous = function() {
  return /** @type{?proto.vega.ContinuousTrading} */ (
    jspb.Message.getWrapperField(this, proto_markets_pb.ContinuousTrading, 200));
};


/** @param {?proto.vega.ContinuousTrading|undefined} value */
proto.vega.NewMarketConfiguration.prototype.setContinuous = function(value) {
  jspb.Message.setOneofWrapperField(this, 200, proto.vega.NewMarketConfiguration.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.NewMarketConfiguration.prototype.clearContinuous = function() {
  this.setContinuous(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NewMarketConfiguration.prototype.hasContinuous = function() {
  return jspb.Message.getField(this, 200) != null;
};


/**
 * optional DiscreteTrading discrete = 201;
 * @return {?proto.vega.DiscreteTrading}
 */
proto.vega.NewMarketConfiguration.prototype.getDiscrete = function() {
  return /** @type{?proto.vega.DiscreteTrading} */ (
    jspb.Message.getWrapperField(this, proto_markets_pb.DiscreteTrading, 201));
};


/** @param {?proto.vega.DiscreteTrading|undefined} value */
proto.vega.NewMarketConfiguration.prototype.setDiscrete = function(value) {
  jspb.Message.setOneofWrapperField(this, 201, proto.vega.NewMarketConfiguration.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.NewMarketConfiguration.prototype.clearDiscrete = function() {
  this.setDiscrete(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NewMarketConfiguration.prototype.hasDiscrete = function() {
  return jspb.Message.getField(this, 201) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.NewMarket.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.NewMarket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.NewMarket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NewMarket.toObject = function(includeInstance, msg) {
  var f, obj = {
    changes: (f = msg.getChanges()) && proto.vega.NewMarketConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.NewMarket}
 */
proto.vega.NewMarket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.NewMarket;
  return proto.vega.NewMarket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.NewMarket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.NewMarket}
 */
proto.vega.NewMarket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.NewMarketConfiguration;
      reader.readMessage(value,proto.vega.NewMarketConfiguration.deserializeBinaryFromReader);
      msg.setChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.NewMarket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.NewMarket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.NewMarket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NewMarket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChanges();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.NewMarketConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional NewMarketConfiguration changes = 1;
 * @return {?proto.vega.NewMarketConfiguration}
 */
proto.vega.NewMarket.prototype.getChanges = function() {
  return /** @type{?proto.vega.NewMarketConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.vega.NewMarketConfiguration, 1));
};


/** @param {?proto.vega.NewMarketConfiguration|undefined} value */
proto.vega.NewMarket.prototype.setChanges = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.NewMarket.prototype.clearChanges = function() {
  this.setChanges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NewMarket.prototype.hasChanges = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.UpdateNetwork.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.UpdateNetwork.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.UpdateNetwork} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateNetwork.toObject = function(includeInstance, msg) {
  var f, obj = {
    changes: (f = msg.getChanges()) && proto.vega.NetworkConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.UpdateNetwork}
 */
proto.vega.UpdateNetwork.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.UpdateNetwork;
  return proto.vega.UpdateNetwork.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.UpdateNetwork} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.UpdateNetwork}
 */
proto.vega.UpdateNetwork.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.NetworkConfiguration;
      reader.readMessage(value,proto.vega.NetworkConfiguration.deserializeBinaryFromReader);
      msg.setChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.UpdateNetwork.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.UpdateNetwork.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.UpdateNetwork} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.UpdateNetwork.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChanges();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.NetworkConfiguration.serializeBinaryToWriter
    );
  }
};


/**
 * optional NetworkConfiguration changes = 1;
 * @return {?proto.vega.NetworkConfiguration}
 */
proto.vega.UpdateNetwork.prototype.getChanges = function() {
  return /** @type{?proto.vega.NetworkConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.vega.NetworkConfiguration, 1));
};


/** @param {?proto.vega.NetworkConfiguration|undefined} value */
proto.vega.UpdateNetwork.prototype.setChanges = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.UpdateNetwork.prototype.clearChanges = function() {
  this.setChanges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.UpdateNetwork.prototype.hasChanges = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.NewAsset.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.NewAsset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.NewAsset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NewAsset.toObject = function(includeInstance, msg) {
  var f, obj = {
    changes: (f = msg.getChanges()) && proto_assets_pb.AssetSource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.NewAsset}
 */
proto.vega.NewAsset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.NewAsset;
  return proto.vega.NewAsset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.NewAsset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.NewAsset}
 */
proto.vega.NewAsset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_assets_pb.AssetSource;
      reader.readMessage(value,proto_assets_pb.AssetSource.deserializeBinaryFromReader);
      msg.setChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.NewAsset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.NewAsset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.NewAsset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.NewAsset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChanges();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_assets_pb.AssetSource.serializeBinaryToWriter
    );
  }
};


/**
 * optional AssetSource changes = 1;
 * @return {?proto.vega.AssetSource}
 */
proto.vega.NewAsset.prototype.getChanges = function() {
  return /** @type{?proto.vega.AssetSource} */ (
    jspb.Message.getWrapperField(this, proto_assets_pb.AssetSource, 1));
};


/** @param {?proto.vega.AssetSource|undefined} value */
proto.vega.NewAsset.prototype.setChanges = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.NewAsset.prototype.clearChanges = function() {
  this.setChanges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.NewAsset.prototype.hasChanges = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.ProposalTerms.oneofGroups_ = [[101,102,103,104]];

/**
 * @enum {number}
 */
proto.vega.ProposalTerms.ChangeCase = {
  CHANGE_NOT_SET: 0,
  UPDATEMARKET: 101,
  NEWMARKET: 102,
  UPDATENETWORK: 103,
  NEWASSET: 104
};

/**
 * @return {proto.vega.ProposalTerms.ChangeCase}
 */
proto.vega.ProposalTerms.prototype.getChangeCase = function() {
  return /** @type {proto.vega.ProposalTerms.ChangeCase} */(jspb.Message.computeOneofCase(this, proto.vega.ProposalTerms.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ProposalTerms.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ProposalTerms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ProposalTerms} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ProposalTerms.toObject = function(includeInstance, msg) {
  var f, obj = {
    closingtimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    enactmenttimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    validationtimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    updatemarket: (f = msg.getUpdatemarket()) && proto.vega.UpdateMarket.toObject(includeInstance, f),
    newmarket: (f = msg.getNewmarket()) && proto.vega.NewMarket.toObject(includeInstance, f),
    updatenetwork: (f = msg.getUpdatenetwork()) && proto.vega.UpdateNetwork.toObject(includeInstance, f),
    newasset: (f = msg.getNewasset()) && proto.vega.NewAsset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ProposalTerms}
 */
proto.vega.ProposalTerms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ProposalTerms;
  return proto.vega.ProposalTerms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ProposalTerms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ProposalTerms}
 */
proto.vega.ProposalTerms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClosingtimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEnactmenttimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValidationtimestamp(value);
      break;
    case 101:
      var value = new proto.vega.UpdateMarket;
      reader.readMessage(value,proto.vega.UpdateMarket.deserializeBinaryFromReader);
      msg.setUpdatemarket(value);
      break;
    case 102:
      var value = new proto.vega.NewMarket;
      reader.readMessage(value,proto.vega.NewMarket.deserializeBinaryFromReader);
      msg.setNewmarket(value);
      break;
    case 103:
      var value = new proto.vega.UpdateNetwork;
      reader.readMessage(value,proto.vega.UpdateNetwork.deserializeBinaryFromReader);
      msg.setUpdatenetwork(value);
      break;
    case 104:
      var value = new proto.vega.NewAsset;
      reader.readMessage(value,proto.vega.NewAsset.deserializeBinaryFromReader);
      msg.setNewasset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ProposalTerms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ProposalTerms.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ProposalTerms} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ProposalTerms.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClosingtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEnactmenttimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getValidationtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getUpdatemarket();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.vega.UpdateMarket.serializeBinaryToWriter
    );
  }
  f = message.getNewmarket();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.vega.NewMarket.serializeBinaryToWriter
    );
  }
  f = message.getUpdatenetwork();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.vega.UpdateNetwork.serializeBinaryToWriter
    );
  }
  f = message.getNewasset();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.vega.NewAsset.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 closingTimestamp = 1;
 * @return {number}
 */
proto.vega.ProposalTerms.prototype.getClosingtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.vega.ProposalTerms.prototype.setClosingtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 enactmentTimestamp = 2;
 * @return {number}
 */
proto.vega.ProposalTerms.prototype.getEnactmenttimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.vega.ProposalTerms.prototype.setEnactmenttimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 validationTimestamp = 3;
 * @return {number}
 */
proto.vega.ProposalTerms.prototype.getValidationtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.vega.ProposalTerms.prototype.setValidationtimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional UpdateMarket updateMarket = 101;
 * @return {?proto.vega.UpdateMarket}
 */
proto.vega.ProposalTerms.prototype.getUpdatemarket = function() {
  return /** @type{?proto.vega.UpdateMarket} */ (
    jspb.Message.getWrapperField(this, proto.vega.UpdateMarket, 101));
};


/** @param {?proto.vega.UpdateMarket|undefined} value */
proto.vega.ProposalTerms.prototype.setUpdatemarket = function(value) {
  jspb.Message.setOneofWrapperField(this, 101, proto.vega.ProposalTerms.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.ProposalTerms.prototype.clearUpdatemarket = function() {
  this.setUpdatemarket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ProposalTerms.prototype.hasUpdatemarket = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional NewMarket newMarket = 102;
 * @return {?proto.vega.NewMarket}
 */
proto.vega.ProposalTerms.prototype.getNewmarket = function() {
  return /** @type{?proto.vega.NewMarket} */ (
    jspb.Message.getWrapperField(this, proto.vega.NewMarket, 102));
};


/** @param {?proto.vega.NewMarket|undefined} value */
proto.vega.ProposalTerms.prototype.setNewmarket = function(value) {
  jspb.Message.setOneofWrapperField(this, 102, proto.vega.ProposalTerms.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.ProposalTerms.prototype.clearNewmarket = function() {
  this.setNewmarket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ProposalTerms.prototype.hasNewmarket = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional UpdateNetwork updateNetwork = 103;
 * @return {?proto.vega.UpdateNetwork}
 */
proto.vega.ProposalTerms.prototype.getUpdatenetwork = function() {
  return /** @type{?proto.vega.UpdateNetwork} */ (
    jspb.Message.getWrapperField(this, proto.vega.UpdateNetwork, 103));
};


/** @param {?proto.vega.UpdateNetwork|undefined} value */
proto.vega.ProposalTerms.prototype.setUpdatenetwork = function(value) {
  jspb.Message.setOneofWrapperField(this, 103, proto.vega.ProposalTerms.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.ProposalTerms.prototype.clearUpdatenetwork = function() {
  this.setUpdatenetwork(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ProposalTerms.prototype.hasUpdatenetwork = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional NewAsset newAsset = 104;
 * @return {?proto.vega.NewAsset}
 */
proto.vega.ProposalTerms.prototype.getNewasset = function() {
  return /** @type{?proto.vega.NewAsset} */ (
    jspb.Message.getWrapperField(this, proto.vega.NewAsset, 104));
};


/** @param {?proto.vega.NewAsset|undefined} value */
proto.vega.ProposalTerms.prototype.setNewasset = function(value) {
  jspb.Message.setOneofWrapperField(this, 104, proto.vega.ProposalTerms.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.ProposalTerms.prototype.clearNewasset = function() {
  this.setNewasset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.ProposalTerms.prototype.hasNewasset = function() {
  return jspb.Message.getField(this, 104) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.GovernanceData.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.GovernanceData.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.GovernanceData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.GovernanceData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.GovernanceData.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposal: (f = msg.getProposal()) && proto.vega.Proposal.toObject(includeInstance, f),
    yesList: jspb.Message.toObjectList(msg.getYesList(),
    proto.vega.Vote.toObject, includeInstance),
    noList: jspb.Message.toObjectList(msg.getNoList(),
    proto.vega.Vote.toObject, includeInstance),
    yespartyMap: (f = msg.getYespartyMap()) ? f.toObject(includeInstance, proto.vega.Vote.toObject) : [],
    nopartyMap: (f = msg.getNopartyMap()) ? f.toObject(includeInstance, proto.vega.Vote.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.GovernanceData}
 */
proto.vega.GovernanceData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.GovernanceData;
  return proto.vega.GovernanceData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.GovernanceData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.GovernanceData}
 */
proto.vega.GovernanceData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.Proposal;
      reader.readMessage(value,proto.vega.Proposal.deserializeBinaryFromReader);
      msg.setProposal(value);
      break;
    case 2:
      var value = new proto.vega.Vote;
      reader.readMessage(value,proto.vega.Vote.deserializeBinaryFromReader);
      msg.addYes(value);
      break;
    case 3:
      var value = new proto.vega.Vote;
      reader.readMessage(value,proto.vega.Vote.deserializeBinaryFromReader);
      msg.addNo(value);
      break;
    case 4:
      var value = msg.getYespartyMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.vega.Vote.deserializeBinaryFromReader, "");
         });
      break;
    case 5:
      var value = msg.getNopartyMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.vega.Vote.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.GovernanceData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.GovernanceData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.GovernanceData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.GovernanceData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.Proposal.serializeBinaryToWriter
    );
  }
  f = message.getYesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.vega.Vote.serializeBinaryToWriter
    );
  }
  f = message.getNoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.vega.Vote.serializeBinaryToWriter
    );
  }
  f = message.getYespartyMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.vega.Vote.serializeBinaryToWriter);
  }
  f = message.getNopartyMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.vega.Vote.serializeBinaryToWriter);
  }
};


/**
 * optional Proposal proposal = 1;
 * @return {?proto.vega.Proposal}
 */
proto.vega.GovernanceData.prototype.getProposal = function() {
  return /** @type{?proto.vega.Proposal} */ (
    jspb.Message.getWrapperField(this, proto.vega.Proposal, 1));
};


/** @param {?proto.vega.Proposal|undefined} value */
proto.vega.GovernanceData.prototype.setProposal = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.GovernanceData.prototype.clearProposal = function() {
  this.setProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.GovernanceData.prototype.hasProposal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Vote yes = 2;
 * @return {!Array<!proto.vega.Vote>}
 */
proto.vega.GovernanceData.prototype.getYesList = function() {
  return /** @type{!Array<!proto.vega.Vote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.Vote, 2));
};


/** @param {!Array<!proto.vega.Vote>} value */
proto.vega.GovernanceData.prototype.setYesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.vega.Vote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.Vote}
 */
proto.vega.GovernanceData.prototype.addYes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.vega.Vote, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.vega.GovernanceData.prototype.clearYesList = function() {
  this.setYesList([]);
};


/**
 * repeated Vote no = 3;
 * @return {!Array<!proto.vega.Vote>}
 */
proto.vega.GovernanceData.prototype.getNoList = function() {
  return /** @type{!Array<!proto.vega.Vote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.Vote, 3));
};


/** @param {!Array<!proto.vega.Vote>} value */
proto.vega.GovernanceData.prototype.setNoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.vega.Vote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.Vote}
 */
proto.vega.GovernanceData.prototype.addNo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.vega.Vote, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.vega.GovernanceData.prototype.clearNoList = function() {
  this.setNoList([]);
};


/**
 * map<string, Vote> yesParty = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.vega.Vote>}
 */
proto.vega.GovernanceData.prototype.getYespartyMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.vega.Vote>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.vega.Vote));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.vega.GovernanceData.prototype.clearYespartyMap = function() {
  this.getYespartyMap().clear();
};


/**
 * map<string, Vote> noParty = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.vega.Vote>}
 */
proto.vega.GovernanceData.prototype.getNopartyMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.vega.Vote>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.vega.Vote));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.vega.GovernanceData.prototype.clearNopartyMap = function() {
  this.getNopartyMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.Proposal.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.Proposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.Proposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Proposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    reference: jspb.Message.getFieldWithDefault(msg, 2, ""),
    partyid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    state: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    terms: (f = msg.getTerms()) && proto.vega.ProposalTerms.toObject(includeInstance, f),
    reason: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.Proposal}
 */
proto.vega.Proposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.Proposal;
  return proto.vega.Proposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.Proposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.Proposal}
 */
proto.vega.Proposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReference(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartyid(value);
      break;
    case 4:
      var value = /** @type {!proto.vega.Proposal.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = new proto.vega.ProposalTerms;
      reader.readMessage(value,proto.vega.ProposalTerms.deserializeBinaryFromReader);
      msg.setTerms(value);
      break;
    case 7:
      var value = /** @type {!proto.vega.ProposalError} */ (reader.readEnum());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.Proposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.Proposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.Proposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Proposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReference();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPartyid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getTerms();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.vega.ProposalTerms.serializeBinaryToWriter
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vega.Proposal.State = {
  STATE_UNSPECIFIED: 0,
  STATE_FAILED: 1,
  STATE_OPEN: 2,
  STATE_PASSED: 3,
  STATE_REJECTED: 4,
  STATE_DECLINED: 5,
  STATE_ENACTED: 6,
  STATE_WAITING_FOR_NODE_VOTE: 7
};

/**
 * optional string ID = 1;
 * @return {string}
 */
proto.vega.Proposal.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vega.Proposal.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string reference = 2;
 * @return {string}
 */
proto.vega.Proposal.prototype.getReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vega.Proposal.prototype.setReference = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string partyID = 3;
 * @return {string}
 */
proto.vega.Proposal.prototype.getPartyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.vega.Proposal.prototype.setPartyid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional State state = 4;
 * @return {!proto.vega.Proposal.State}
 */
proto.vega.Proposal.prototype.getState = function() {
  return /** @type {!proto.vega.Proposal.State} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.vega.Proposal.State} value */
proto.vega.Proposal.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int64 timestamp = 5;
 * @return {number}
 */
proto.vega.Proposal.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.vega.Proposal.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional ProposalTerms terms = 6;
 * @return {?proto.vega.ProposalTerms}
 */
proto.vega.Proposal.prototype.getTerms = function() {
  return /** @type{?proto.vega.ProposalTerms} */ (
    jspb.Message.getWrapperField(this, proto.vega.ProposalTerms, 6));
};


/** @param {?proto.vega.ProposalTerms|undefined} value */
proto.vega.Proposal.prototype.setTerms = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.Proposal.prototype.clearTerms = function() {
  this.setTerms(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Proposal.prototype.hasTerms = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ProposalError reason = 7;
 * @return {!proto.vega.ProposalError}
 */
proto.vega.Proposal.prototype.getReason = function() {
  return /** @type {!proto.vega.ProposalError} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.vega.ProposalError} value */
proto.vega.Proposal.prototype.setReason = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.Vote.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.Vote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.Vote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Vote.toObject = function(includeInstance, msg) {
  var f, obj = {
    partyid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0),
    proposalid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.Vote}
 */
proto.vega.Vote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.Vote;
  return proto.vega.Vote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.Vote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.Vote}
 */
proto.vega.Vote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartyid(value);
      break;
    case 2:
      var value = /** @type {!proto.vega.Vote.Value} */ (reader.readEnum());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposalid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.Vote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.Vote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.Vote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Vote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getProposalid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.vega.Vote.Value = {
  VALUE_UNSPECIFIED: 0,
  VALUE_NO: 1,
  VALUE_YES: 2
};

/**
 * optional string partyID = 1;
 * @return {string}
 */
proto.vega.Vote.prototype.getPartyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vega.Vote.prototype.setPartyid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Value value = 2;
 * @return {!proto.vega.Vote.Value}
 */
proto.vega.Vote.prototype.getValue = function() {
  return /** @type {!proto.vega.Vote.Value} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.vega.Vote.Value} value */
proto.vega.Vote.prototype.setValue = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string proposalID = 3;
 * @return {string}
 */
proto.vega.Vote.prototype.getProposalid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.vega.Vote.prototype.setProposalid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.vega.Vote.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.vega.Vote.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.vega.ProposalError = {
  PROPOSAL_ERROR_UNSPECIFIED: 0,
  PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON: 1,
  PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE: 2,
  PROPOSAL_ERROR_ENACT_TIME_TOO_SOON: 3,
  PROPOSAL_ERROR_ENACT_TIME_TOO_LATE: 4,
  PROPOSAL_ERROR_INSUFFICIENT_TOKENS: 5,
  PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY: 6,
  PROPOSAL_ERROR_NO_PRODUCT: 7,
  PROPOSAL_ERROR_UNSUPPORTED_PRODUCT: 8,
  PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT_TIMESTAMP: 9,
  PROPOSAL_ERROR_PRODUCT_MATURITY_IS_PASSED: 10,
  PROPOSAL_ERROR_NO_TRADING_MODE: 11,
  PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE: 12,
  PROPOSAL_ERROR_NODE_VALIDATION_FAILED: 13,
  PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD: 14,
  PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS: 15
};

goog.object.extend(exports, proto.vega);
