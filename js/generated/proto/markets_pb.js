/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_mwitkow_go$proto$validators_validator_pb = require('../external/github.com/mwitkow/go-proto-validators/validator_pb.js');
goog.object.extend(proto, github_com_mwitkow_go$proto$validators_validator_pb);
goog.exportSymbol('proto.vega.AuctionDuration', null, global);
goog.exportSymbol('proto.vega.ContinuousTrading', null, global);
goog.exportSymbol('proto.vega.DiscreteTrading', null, global);
goog.exportSymbol('proto.vega.EthereumEvent', null, global);
goog.exportSymbol('proto.vega.FeeFactors', null, global);
goog.exportSymbol('proto.vega.Fees', null, global);
goog.exportSymbol('proto.vega.Future', null, global);
goog.exportSymbol('proto.vega.Instrument', null, global);
goog.exportSymbol('proto.vega.InstrumentMetadata', null, global);
goog.exportSymbol('proto.vega.LogNormalModelParams', null, global);
goog.exportSymbol('proto.vega.LogNormalRiskModel', null, global);
goog.exportSymbol('proto.vega.MarginCalculator', null, global);
goog.exportSymbol('proto.vega.Market', null, global);
goog.exportSymbol('proto.vega.PriceMonitoringParameters', null, global);
goog.exportSymbol('proto.vega.PriceMonitoringSettings', null, global);
goog.exportSymbol('proto.vega.PriceMonitoringTrigger', null, global);
goog.exportSymbol('proto.vega.ScalingFactors', null, global);
goog.exportSymbol('proto.vega.SimpleModelParams', null, global);
goog.exportSymbol('proto.vega.SimpleRiskModel', null, global);
goog.exportSymbol('proto.vega.TradableInstrument', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.AuctionDuration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.AuctionDuration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.AuctionDuration.displayName = 'proto.vega.AuctionDuration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ContinuousTrading = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.ContinuousTrading, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ContinuousTrading.displayName = 'proto.vega.ContinuousTrading';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.DiscreteTrading = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.DiscreteTrading, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.DiscreteTrading.displayName = 'proto.vega.DiscreteTrading';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.Future = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vega.Future.oneofGroups_);
};
goog.inherits(proto.vega.Future, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.Future.displayName = 'proto.vega.Future';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.EthereumEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.EthereumEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.EthereumEvent.displayName = 'proto.vega.EthereumEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.InstrumentMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.InstrumentMetadata.repeatedFields_, null);
};
goog.inherits(proto.vega.InstrumentMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.InstrumentMetadata.displayName = 'proto.vega.InstrumentMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.Instrument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vega.Instrument.oneofGroups_);
};
goog.inherits(proto.vega.Instrument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.Instrument.displayName = 'proto.vega.Instrument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.LogNormalRiskModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.LogNormalRiskModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.LogNormalRiskModel.displayName = 'proto.vega.LogNormalRiskModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.LogNormalModelParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.LogNormalModelParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.LogNormalModelParams.displayName = 'proto.vega.LogNormalModelParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.SimpleRiskModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.SimpleRiskModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.SimpleRiskModel.displayName = 'proto.vega.SimpleRiskModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.SimpleModelParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.SimpleModelParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.SimpleModelParams.displayName = 'proto.vega.SimpleModelParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.ScalingFactors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.ScalingFactors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.ScalingFactors.displayName = 'proto.vega.ScalingFactors';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.MarginCalculator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.MarginCalculator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.MarginCalculator.displayName = 'proto.vega.MarginCalculator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.TradableInstrument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vega.TradableInstrument.oneofGroups_);
};
goog.inherits(proto.vega.TradableInstrument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.TradableInstrument.displayName = 'proto.vega.TradableInstrument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.FeeFactors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.FeeFactors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.FeeFactors.displayName = 'proto.vega.FeeFactors';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.Fees = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.Fees, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.Fees.displayName = 'proto.vega.Fees';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.PriceMonitoringTrigger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.PriceMonitoringTrigger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.PriceMonitoringTrigger.displayName = 'proto.vega.PriceMonitoringTrigger';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.PriceMonitoringParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vega.PriceMonitoringParameters.repeatedFields_, null);
};
goog.inherits(proto.vega.PriceMonitoringParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.PriceMonitoringParameters.displayName = 'proto.vega.PriceMonitoringParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.PriceMonitoringSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vega.PriceMonitoringSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.PriceMonitoringSettings.displayName = 'proto.vega.PriceMonitoringSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vega.Market = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.vega.Market.oneofGroups_);
};
goog.inherits(proto.vega.Market, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vega.Market.displayName = 'proto.vega.Market';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.AuctionDuration.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.AuctionDuration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.AuctionDuration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.AuctionDuration.toObject = function(includeInstance, msg) {
  var f, obj = {
    duration: jspb.Message.getFieldWithDefault(msg, 1, 0),
    volume: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.AuctionDuration}
 */
proto.vega.AuctionDuration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.AuctionDuration;
  return proto.vega.AuctionDuration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.AuctionDuration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.AuctionDuration}
 */
proto.vega.AuctionDuration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.AuctionDuration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.AuctionDuration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.AuctionDuration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.AuctionDuration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional int64 duration = 1;
 * @return {number}
 */
proto.vega.AuctionDuration.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.vega.AuctionDuration.prototype.setDuration = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 volume = 2;
 * @return {number}
 */
proto.vega.AuctionDuration.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.vega.AuctionDuration.prototype.setVolume = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ContinuousTrading.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ContinuousTrading.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ContinuousTrading} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ContinuousTrading.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticksize: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ContinuousTrading}
 */
proto.vega.ContinuousTrading.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ContinuousTrading;
  return proto.vega.ContinuousTrading.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ContinuousTrading} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ContinuousTrading}
 */
proto.vega.ContinuousTrading.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicksize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ContinuousTrading.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ContinuousTrading.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ContinuousTrading} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ContinuousTrading.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicksize();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tickSize = 1;
 * @return {string}
 */
proto.vega.ContinuousTrading.prototype.getTicksize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vega.ContinuousTrading.prototype.setTicksize = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.DiscreteTrading.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.DiscreteTrading.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.DiscreteTrading} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DiscreteTrading.toObject = function(includeInstance, msg) {
  var f, obj = {
    durationns: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ticksize: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.DiscreteTrading}
 */
proto.vega.DiscreteTrading.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.DiscreteTrading;
  return proto.vega.DiscreteTrading.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.DiscreteTrading} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.DiscreteTrading}
 */
proto.vega.DiscreteTrading.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDurationns(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicksize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.DiscreteTrading.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.DiscreteTrading.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.DiscreteTrading} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.DiscreteTrading.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDurationns();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTicksize();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 durationNs = 1;
 * @return {number}
 */
proto.vega.DiscreteTrading.prototype.getDurationns = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.vega.DiscreteTrading.prototype.setDurationns = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string tickSize = 2;
 * @return {string}
 */
proto.vega.DiscreteTrading.prototype.getTicksize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vega.DiscreteTrading.prototype.setTicksize = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.Future.oneofGroups_ = [[100]];

/**
 * @enum {number}
 */
proto.vega.Future.OracleCase = {
  ORACLE_NOT_SET: 0,
  ETHEREUMEVENT: 100
};

/**
 * @return {proto.vega.Future.OracleCase}
 */
proto.vega.Future.prototype.getOracleCase = function() {
  return /** @type {proto.vega.Future.OracleCase} */(jspb.Message.computeOneofCase(this, proto.vega.Future.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.Future.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.Future.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.Future} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Future.toObject = function(includeInstance, msg) {
  var f, obj = {
    maturity: jspb.Message.getFieldWithDefault(msg, 1, ""),
    asset: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ethereumevent: (f = msg.getEthereumevent()) && proto.vega.EthereumEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.Future}
 */
proto.vega.Future.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.Future;
  return proto.vega.Future.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.Future} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.Future}
 */
proto.vega.Future.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaturity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 100:
      var value = new proto.vega.EthereumEvent;
      reader.readMessage(value,proto.vega.EthereumEvent.deserializeBinaryFromReader);
      msg.setEthereumevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.Future.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.Future.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.Future} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Future.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaturity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEthereumevent();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.vega.EthereumEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional string maturity = 1;
 * @return {string}
 */
proto.vega.Future.prototype.getMaturity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vega.Future.prototype.setMaturity = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string asset = 2;
 * @return {string}
 */
proto.vega.Future.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vega.Future.prototype.setAsset = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional EthereumEvent ethereumEvent = 100;
 * @return {?proto.vega.EthereumEvent}
 */
proto.vega.Future.prototype.getEthereumevent = function() {
  return /** @type{?proto.vega.EthereumEvent} */ (
    jspb.Message.getWrapperField(this, proto.vega.EthereumEvent, 100));
};


/** @param {?proto.vega.EthereumEvent|undefined} value */
proto.vega.Future.prototype.setEthereumevent = function(value) {
  jspb.Message.setOneofWrapperField(this, 100, proto.vega.Future.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.Future.prototype.clearEthereumevent = function() {
  this.setEthereumevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Future.prototype.hasEthereumevent = function() {
  return jspb.Message.getField(this, 100) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.EthereumEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.EthereumEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.EthereumEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.EthereumEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    event: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.EthereumEvent}
 */
proto.vega.EthereumEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.EthereumEvent;
  return proto.vega.EthereumEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.EthereumEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.EthereumEvent}
 */
proto.vega.EthereumEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvent(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.EthereumEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.EthereumEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.EthereumEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.EthereumEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEvent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string contractID = 1;
 * @return {string}
 */
proto.vega.EthereumEvent.prototype.getContractid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vega.EthereumEvent.prototype.setContractid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string event = 2;
 * @return {string}
 */
proto.vega.EthereumEvent.prototype.getEvent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vega.EthereumEvent.prototype.setEvent = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 value = 3;
 * @return {number}
 */
proto.vega.EthereumEvent.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.vega.EthereumEvent.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.InstrumentMetadata.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.InstrumentMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.InstrumentMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.InstrumentMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.InstrumentMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.InstrumentMetadata}
 */
proto.vega.InstrumentMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.InstrumentMetadata;
  return proto.vega.InstrumentMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.InstrumentMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.InstrumentMetadata}
 */
proto.vega.InstrumentMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.InstrumentMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.InstrumentMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.InstrumentMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.InstrumentMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string tags = 1;
 * @return {!Array<string>}
 */
proto.vega.InstrumentMetadata.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.vega.InstrumentMetadata.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.vega.InstrumentMetadata.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.vega.InstrumentMetadata.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.Instrument.oneofGroups_ = [[100]];

/**
 * @enum {number}
 */
proto.vega.Instrument.ProductCase = {
  PRODUCT_NOT_SET: 0,
  FUTURE: 100
};

/**
 * @return {proto.vega.Instrument.ProductCase}
 */
proto.vega.Instrument.prototype.getProductCase = function() {
  return /** @type {proto.vega.Instrument.ProductCase} */(jspb.Message.computeOneofCase(this, proto.vega.Instrument.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.Instrument.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.Instrument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.Instrument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Instrument.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    quotename: jspb.Message.getFieldWithDefault(msg, 4, ""),
    metadata: (f = msg.getMetadata()) && proto.vega.InstrumentMetadata.toObject(includeInstance, f),
    initialmarkprice: jspb.Message.getFieldWithDefault(msg, 6, 0),
    future: (f = msg.getFuture()) && proto.vega.Future.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.Instrument}
 */
proto.vega.Instrument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.Instrument;
  return proto.vega.Instrument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.Instrument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.Instrument}
 */
proto.vega.Instrument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuotename(value);
      break;
    case 5:
      var value = new proto.vega.InstrumentMetadata;
      reader.readMessage(value,proto.vega.InstrumentMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInitialmarkprice(value);
      break;
    case 100:
      var value = new proto.vega.Future;
      reader.readMessage(value,proto.vega.Future.deserializeBinaryFromReader);
      msg.setFuture(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.Instrument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.Instrument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.Instrument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Instrument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getQuotename();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.vega.InstrumentMetadata.serializeBinaryToWriter
    );
  }
  f = message.getInitialmarkprice();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getFuture();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.vega.Future.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.vega.Instrument.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vega.Instrument.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.vega.Instrument.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vega.Instrument.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.vega.Instrument.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.vega.Instrument.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string quoteName = 4;
 * @return {string}
 */
proto.vega.Instrument.prototype.getQuotename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.vega.Instrument.prototype.setQuotename = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional InstrumentMetadata metadata = 5;
 * @return {?proto.vega.InstrumentMetadata}
 */
proto.vega.Instrument.prototype.getMetadata = function() {
  return /** @type{?proto.vega.InstrumentMetadata} */ (
    jspb.Message.getWrapperField(this, proto.vega.InstrumentMetadata, 5));
};


/** @param {?proto.vega.InstrumentMetadata|undefined} value */
proto.vega.Instrument.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.Instrument.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Instrument.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 initialMarkPrice = 6;
 * @return {number}
 */
proto.vega.Instrument.prototype.getInitialmarkprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.vega.Instrument.prototype.setInitialmarkprice = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional Future future = 100;
 * @return {?proto.vega.Future}
 */
proto.vega.Instrument.prototype.getFuture = function() {
  return /** @type{?proto.vega.Future} */ (
    jspb.Message.getWrapperField(this, proto.vega.Future, 100));
};


/** @param {?proto.vega.Future|undefined} value */
proto.vega.Instrument.prototype.setFuture = function(value) {
  jspb.Message.setOneofWrapperField(this, 100, proto.vega.Instrument.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.Instrument.prototype.clearFuture = function() {
  this.setFuture(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Instrument.prototype.hasFuture = function() {
  return jspb.Message.getField(this, 100) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.LogNormalRiskModel.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.LogNormalRiskModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.LogNormalRiskModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.LogNormalRiskModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    riskaversionparameter: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    tau: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    params: (f = msg.getParams()) && proto.vega.LogNormalModelParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.LogNormalRiskModel}
 */
proto.vega.LogNormalRiskModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.LogNormalRiskModel;
  return proto.vega.LogNormalRiskModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.LogNormalRiskModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.LogNormalRiskModel}
 */
proto.vega.LogNormalRiskModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRiskaversionparameter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTau(value);
      break;
    case 3:
      var value = new proto.vega.LogNormalModelParams;
      reader.readMessage(value,proto.vega.LogNormalModelParams.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.LogNormalRiskModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.LogNormalRiskModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.LogNormalRiskModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.LogNormalRiskModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRiskaversionparameter();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getTau();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.vega.LogNormalModelParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional double riskAversionParameter = 1;
 * @return {number}
 */
proto.vega.LogNormalRiskModel.prototype.getRiskaversionparameter = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.vega.LogNormalRiskModel.prototype.setRiskaversionparameter = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double tau = 2;
 * @return {number}
 */
proto.vega.LogNormalRiskModel.prototype.getTau = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.vega.LogNormalRiskModel.prototype.setTau = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional LogNormalModelParams params = 3;
 * @return {?proto.vega.LogNormalModelParams}
 */
proto.vega.LogNormalRiskModel.prototype.getParams = function() {
  return /** @type{?proto.vega.LogNormalModelParams} */ (
    jspb.Message.getWrapperField(this, proto.vega.LogNormalModelParams, 3));
};


/** @param {?proto.vega.LogNormalModelParams|undefined} value */
proto.vega.LogNormalRiskModel.prototype.setParams = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.LogNormalRiskModel.prototype.clearParams = function() {
  this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.LogNormalRiskModel.prototype.hasParams = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.LogNormalModelParams.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.LogNormalModelParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.LogNormalModelParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.LogNormalModelParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    mu: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    r: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    sigma: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.LogNormalModelParams}
 */
proto.vega.LogNormalModelParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.LogNormalModelParams;
  return proto.vega.LogNormalModelParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.LogNormalModelParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.LogNormalModelParams}
 */
proto.vega.LogNormalModelParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMu(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setR(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSigma(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.LogNormalModelParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.LogNormalModelParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.LogNormalModelParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.LogNormalModelParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMu();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getR();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getSigma();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double mu = 1;
 * @return {number}
 */
proto.vega.LogNormalModelParams.prototype.getMu = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.vega.LogNormalModelParams.prototype.setMu = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double r = 2;
 * @return {number}
 */
proto.vega.LogNormalModelParams.prototype.getR = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.vega.LogNormalModelParams.prototype.setR = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double sigma = 3;
 * @return {number}
 */
proto.vega.LogNormalModelParams.prototype.getSigma = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.vega.LogNormalModelParams.prototype.setSigma = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.SimpleRiskModel.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.SimpleRiskModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.SimpleRiskModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.SimpleRiskModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    params: (f = msg.getParams()) && proto.vega.SimpleModelParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.SimpleRiskModel}
 */
proto.vega.SimpleRiskModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.SimpleRiskModel;
  return proto.vega.SimpleRiskModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.SimpleRiskModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.SimpleRiskModel}
 */
proto.vega.SimpleRiskModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.SimpleModelParams;
      reader.readMessage(value,proto.vega.SimpleModelParams.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.SimpleRiskModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.SimpleRiskModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.SimpleRiskModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.SimpleRiskModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.SimpleModelParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleModelParams params = 1;
 * @return {?proto.vega.SimpleModelParams}
 */
proto.vega.SimpleRiskModel.prototype.getParams = function() {
  return /** @type{?proto.vega.SimpleModelParams} */ (
    jspb.Message.getWrapperField(this, proto.vega.SimpleModelParams, 1));
};


/** @param {?proto.vega.SimpleModelParams|undefined} value */
proto.vega.SimpleRiskModel.prototype.setParams = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.SimpleRiskModel.prototype.clearParams = function() {
  this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.SimpleRiskModel.prototype.hasParams = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.SimpleModelParams.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.SimpleModelParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.SimpleModelParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.SimpleModelParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    factorlong: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    factorshort: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    maxmoveup: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    minmovedown: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    probabilityoftrading: +jspb.Message.getFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.SimpleModelParams}
 */
proto.vega.SimpleModelParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.SimpleModelParams;
  return proto.vega.SimpleModelParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.SimpleModelParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.SimpleModelParams}
 */
proto.vega.SimpleModelParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFactorlong(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFactorshort(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxmoveup(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinmovedown(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProbabilityoftrading(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.SimpleModelParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.SimpleModelParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.SimpleModelParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.SimpleModelParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFactorlong();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getFactorshort();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMaxmoveup();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getMinmovedown();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getProbabilityoftrading();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional double factorLong = 1;
 * @return {number}
 */
proto.vega.SimpleModelParams.prototype.getFactorlong = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.vega.SimpleModelParams.prototype.setFactorlong = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double factorShort = 2;
 * @return {number}
 */
proto.vega.SimpleModelParams.prototype.getFactorshort = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.vega.SimpleModelParams.prototype.setFactorshort = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double maxMoveUp = 3;
 * @return {number}
 */
proto.vega.SimpleModelParams.prototype.getMaxmoveup = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.vega.SimpleModelParams.prototype.setMaxmoveup = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double minMoveDown = 4;
 * @return {number}
 */
proto.vega.SimpleModelParams.prototype.getMinmovedown = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.vega.SimpleModelParams.prototype.setMinmovedown = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double probabilityOfTrading = 5;
 * @return {number}
 */
proto.vega.SimpleModelParams.prototype.getProbabilityoftrading = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.vega.SimpleModelParams.prototype.setProbabilityoftrading = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.ScalingFactors.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.ScalingFactors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.ScalingFactors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ScalingFactors.toObject = function(includeInstance, msg) {
  var f, obj = {
    searchlevel: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    initialmargin: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    collateralrelease: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.ScalingFactors}
 */
proto.vega.ScalingFactors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.ScalingFactors;
  return proto.vega.ScalingFactors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.ScalingFactors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.ScalingFactors}
 */
proto.vega.ScalingFactors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSearchlevel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInitialmargin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCollateralrelease(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.ScalingFactors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.ScalingFactors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.ScalingFactors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.ScalingFactors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSearchlevel();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getInitialmargin();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getCollateralrelease();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double searchLevel = 1;
 * @return {number}
 */
proto.vega.ScalingFactors.prototype.getSearchlevel = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.vega.ScalingFactors.prototype.setSearchlevel = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double initialMargin = 2;
 * @return {number}
 */
proto.vega.ScalingFactors.prototype.getInitialmargin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.vega.ScalingFactors.prototype.setInitialmargin = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double collateralRelease = 3;
 * @return {number}
 */
proto.vega.ScalingFactors.prototype.getCollateralrelease = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.vega.ScalingFactors.prototype.setCollateralrelease = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.MarginCalculator.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.MarginCalculator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.MarginCalculator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.MarginCalculator.toObject = function(includeInstance, msg) {
  var f, obj = {
    scalingfactors: (f = msg.getScalingfactors()) && proto.vega.ScalingFactors.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.MarginCalculator}
 */
proto.vega.MarginCalculator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.MarginCalculator;
  return proto.vega.MarginCalculator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.MarginCalculator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.MarginCalculator}
 */
proto.vega.MarginCalculator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.ScalingFactors;
      reader.readMessage(value,proto.vega.ScalingFactors.deserializeBinaryFromReader);
      msg.setScalingfactors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.MarginCalculator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.MarginCalculator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.MarginCalculator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.MarginCalculator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScalingfactors();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.ScalingFactors.serializeBinaryToWriter
    );
  }
};


/**
 * optional ScalingFactors scalingFactors = 1;
 * @return {?proto.vega.ScalingFactors}
 */
proto.vega.MarginCalculator.prototype.getScalingfactors = function() {
  return /** @type{?proto.vega.ScalingFactors} */ (
    jspb.Message.getWrapperField(this, proto.vega.ScalingFactors, 1));
};


/** @param {?proto.vega.ScalingFactors|undefined} value */
proto.vega.MarginCalculator.prototype.setScalingfactors = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.MarginCalculator.prototype.clearScalingfactors = function() {
  this.setScalingfactors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.MarginCalculator.prototype.hasScalingfactors = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.TradableInstrument.oneofGroups_ = [[100,101]];

/**
 * @enum {number}
 */
proto.vega.TradableInstrument.RiskmodelCase = {
  RISKMODEL_NOT_SET: 0,
  LOGNORMALRISKMODEL: 100,
  SIMPLERISKMODEL: 101
};

/**
 * @return {proto.vega.TradableInstrument.RiskmodelCase}
 */
proto.vega.TradableInstrument.prototype.getRiskmodelCase = function() {
  return /** @type {proto.vega.TradableInstrument.RiskmodelCase} */(jspb.Message.computeOneofCase(this, proto.vega.TradableInstrument.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.TradableInstrument.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.TradableInstrument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.TradableInstrument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.TradableInstrument.toObject = function(includeInstance, msg) {
  var f, obj = {
    instrument: (f = msg.getInstrument()) && proto.vega.Instrument.toObject(includeInstance, f),
    margincalculator: (f = msg.getMargincalculator()) && proto.vega.MarginCalculator.toObject(includeInstance, f),
    lognormalriskmodel: (f = msg.getLognormalriskmodel()) && proto.vega.LogNormalRiskModel.toObject(includeInstance, f),
    simpleriskmodel: (f = msg.getSimpleriskmodel()) && proto.vega.SimpleRiskModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.TradableInstrument}
 */
proto.vega.TradableInstrument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.TradableInstrument;
  return proto.vega.TradableInstrument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.TradableInstrument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.TradableInstrument}
 */
proto.vega.TradableInstrument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.Instrument;
      reader.readMessage(value,proto.vega.Instrument.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    case 2:
      var value = new proto.vega.MarginCalculator;
      reader.readMessage(value,proto.vega.MarginCalculator.deserializeBinaryFromReader);
      msg.setMargincalculator(value);
      break;
    case 100:
      var value = new proto.vega.LogNormalRiskModel;
      reader.readMessage(value,proto.vega.LogNormalRiskModel.deserializeBinaryFromReader);
      msg.setLognormalriskmodel(value);
      break;
    case 101:
      var value = new proto.vega.SimpleRiskModel;
      reader.readMessage(value,proto.vega.SimpleRiskModel.deserializeBinaryFromReader);
      msg.setSimpleriskmodel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.TradableInstrument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.TradableInstrument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.TradableInstrument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.TradableInstrument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.Instrument.serializeBinaryToWriter
    );
  }
  f = message.getMargincalculator();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vega.MarginCalculator.serializeBinaryToWriter
    );
  }
  f = message.getLognormalriskmodel();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.vega.LogNormalRiskModel.serializeBinaryToWriter
    );
  }
  f = message.getSimpleriskmodel();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.vega.SimpleRiskModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional Instrument instrument = 1;
 * @return {?proto.vega.Instrument}
 */
proto.vega.TradableInstrument.prototype.getInstrument = function() {
  return /** @type{?proto.vega.Instrument} */ (
    jspb.Message.getWrapperField(this, proto.vega.Instrument, 1));
};


/** @param {?proto.vega.Instrument|undefined} value */
proto.vega.TradableInstrument.prototype.setInstrument = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.TradableInstrument.prototype.clearInstrument = function() {
  this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.TradableInstrument.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MarginCalculator marginCalculator = 2;
 * @return {?proto.vega.MarginCalculator}
 */
proto.vega.TradableInstrument.prototype.getMargincalculator = function() {
  return /** @type{?proto.vega.MarginCalculator} */ (
    jspb.Message.getWrapperField(this, proto.vega.MarginCalculator, 2));
};


/** @param {?proto.vega.MarginCalculator|undefined} value */
proto.vega.TradableInstrument.prototype.setMargincalculator = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.TradableInstrument.prototype.clearMargincalculator = function() {
  this.setMargincalculator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.TradableInstrument.prototype.hasMargincalculator = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LogNormalRiskModel logNormalRiskModel = 100;
 * @return {?proto.vega.LogNormalRiskModel}
 */
proto.vega.TradableInstrument.prototype.getLognormalriskmodel = function() {
  return /** @type{?proto.vega.LogNormalRiskModel} */ (
    jspb.Message.getWrapperField(this, proto.vega.LogNormalRiskModel, 100));
};


/** @param {?proto.vega.LogNormalRiskModel|undefined} value */
proto.vega.TradableInstrument.prototype.setLognormalriskmodel = function(value) {
  jspb.Message.setOneofWrapperField(this, 100, proto.vega.TradableInstrument.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.TradableInstrument.prototype.clearLognormalriskmodel = function() {
  this.setLognormalriskmodel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.TradableInstrument.prototype.hasLognormalriskmodel = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional SimpleRiskModel simpleRiskModel = 101;
 * @return {?proto.vega.SimpleRiskModel}
 */
proto.vega.TradableInstrument.prototype.getSimpleriskmodel = function() {
  return /** @type{?proto.vega.SimpleRiskModel} */ (
    jspb.Message.getWrapperField(this, proto.vega.SimpleRiskModel, 101));
};


/** @param {?proto.vega.SimpleRiskModel|undefined} value */
proto.vega.TradableInstrument.prototype.setSimpleriskmodel = function(value) {
  jspb.Message.setOneofWrapperField(this, 101, proto.vega.TradableInstrument.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.TradableInstrument.prototype.clearSimpleriskmodel = function() {
  this.setSimpleriskmodel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.TradableInstrument.prototype.hasSimpleriskmodel = function() {
  return jspb.Message.getField(this, 101) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.FeeFactors.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.FeeFactors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.FeeFactors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.FeeFactors.toObject = function(includeInstance, msg) {
  var f, obj = {
    makerfee: jspb.Message.getFieldWithDefault(msg, 1, ""),
    infrastructurefee: jspb.Message.getFieldWithDefault(msg, 2, ""),
    liquidityfee: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.FeeFactors}
 */
proto.vega.FeeFactors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.FeeFactors;
  return proto.vega.FeeFactors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.FeeFactors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.FeeFactors}
 */
proto.vega.FeeFactors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMakerfee(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfrastructurefee(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiquidityfee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.FeeFactors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.FeeFactors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.FeeFactors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.FeeFactors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMakerfee();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInfrastructurefee();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLiquidityfee();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string makerFee = 1;
 * @return {string}
 */
proto.vega.FeeFactors.prototype.getMakerfee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vega.FeeFactors.prototype.setMakerfee = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string infrastructureFee = 2;
 * @return {string}
 */
proto.vega.FeeFactors.prototype.getInfrastructurefee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vega.FeeFactors.prototype.setInfrastructurefee = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string liquidityFee = 3;
 * @return {string}
 */
proto.vega.FeeFactors.prototype.getLiquidityfee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.vega.FeeFactors.prototype.setLiquidityfee = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.Fees.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.Fees.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.Fees} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Fees.toObject = function(includeInstance, msg) {
  var f, obj = {
    factors: (f = msg.getFactors()) && proto.vega.FeeFactors.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.Fees}
 */
proto.vega.Fees.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.Fees;
  return proto.vega.Fees.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.Fees} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.Fees}
 */
proto.vega.Fees.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.FeeFactors;
      reader.readMessage(value,proto.vega.FeeFactors.deserializeBinaryFromReader);
      msg.setFactors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.Fees.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.Fees.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.Fees} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Fees.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFactors();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.FeeFactors.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeeFactors factors = 1;
 * @return {?proto.vega.FeeFactors}
 */
proto.vega.Fees.prototype.getFactors = function() {
  return /** @type{?proto.vega.FeeFactors} */ (
    jspb.Message.getWrapperField(this, proto.vega.FeeFactors, 1));
};


/** @param {?proto.vega.FeeFactors|undefined} value */
proto.vega.Fees.prototype.setFactors = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.Fees.prototype.clearFactors = function() {
  this.setFactors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Fees.prototype.hasFactors = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.PriceMonitoringTrigger.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.PriceMonitoringTrigger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.PriceMonitoringTrigger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.PriceMonitoringTrigger.toObject = function(includeInstance, msg) {
  var f, obj = {
    horizon: jspb.Message.getFieldWithDefault(msg, 1, 0),
    probability: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    auctionextension: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.PriceMonitoringTrigger}
 */
proto.vega.PriceMonitoringTrigger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.PriceMonitoringTrigger;
  return proto.vega.PriceMonitoringTrigger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.PriceMonitoringTrigger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.PriceMonitoringTrigger}
 */
proto.vega.PriceMonitoringTrigger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHorizon(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProbability(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAuctionextension(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.PriceMonitoringTrigger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.PriceMonitoringTrigger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.PriceMonitoringTrigger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.PriceMonitoringTrigger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHorizon();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getProbability();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getAuctionextension();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 horizon = 1;
 * @return {number}
 */
proto.vega.PriceMonitoringTrigger.prototype.getHorizon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.vega.PriceMonitoringTrigger.prototype.setHorizon = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double probability = 2;
 * @return {number}
 */
proto.vega.PriceMonitoringTrigger.prototype.getProbability = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.vega.PriceMonitoringTrigger.prototype.setProbability = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int64 auctionExtension = 3;
 * @return {number}
 */
proto.vega.PriceMonitoringTrigger.prototype.getAuctionextension = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.vega.PriceMonitoringTrigger.prototype.setAuctionextension = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vega.PriceMonitoringParameters.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.PriceMonitoringParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.PriceMonitoringParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.PriceMonitoringParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.PriceMonitoringParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    triggersList: jspb.Message.toObjectList(msg.getTriggersList(),
    proto.vega.PriceMonitoringTrigger.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.PriceMonitoringParameters}
 */
proto.vega.PriceMonitoringParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.PriceMonitoringParameters;
  return proto.vega.PriceMonitoringParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.PriceMonitoringParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.PriceMonitoringParameters}
 */
proto.vega.PriceMonitoringParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.PriceMonitoringTrigger;
      reader.readMessage(value,proto.vega.PriceMonitoringTrigger.deserializeBinaryFromReader);
      msg.addTriggers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.PriceMonitoringParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.PriceMonitoringParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.PriceMonitoringParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.PriceMonitoringParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTriggersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vega.PriceMonitoringTrigger.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PriceMonitoringTrigger triggers = 1;
 * @return {!Array<!proto.vega.PriceMonitoringTrigger>}
 */
proto.vega.PriceMonitoringParameters.prototype.getTriggersList = function() {
  return /** @type{!Array<!proto.vega.PriceMonitoringTrigger>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vega.PriceMonitoringTrigger, 1));
};


/** @param {!Array<!proto.vega.PriceMonitoringTrigger>} value */
proto.vega.PriceMonitoringParameters.prototype.setTriggersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vega.PriceMonitoringTrigger=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vega.PriceMonitoringTrigger}
 */
proto.vega.PriceMonitoringParameters.prototype.addTriggers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vega.PriceMonitoringTrigger, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.vega.PriceMonitoringParameters.prototype.clearTriggersList = function() {
  this.setTriggersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.PriceMonitoringSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.PriceMonitoringSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.PriceMonitoringSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.PriceMonitoringSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    parameters: (f = msg.getParameters()) && proto.vega.PriceMonitoringParameters.toObject(includeInstance, f),
    updatefrequency: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.PriceMonitoringSettings}
 */
proto.vega.PriceMonitoringSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.PriceMonitoringSettings;
  return proto.vega.PriceMonitoringSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.PriceMonitoringSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.PriceMonitoringSettings}
 */
proto.vega.PriceMonitoringSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vega.PriceMonitoringParameters;
      reader.readMessage(value,proto.vega.PriceMonitoringParameters.deserializeBinaryFromReader);
      msg.setParameters(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatefrequency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.PriceMonitoringSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.PriceMonitoringSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.PriceMonitoringSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.PriceMonitoringSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParameters();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vega.PriceMonitoringParameters.serializeBinaryToWriter
    );
  }
  f = message.getUpdatefrequency();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional PriceMonitoringParameters parameters = 1;
 * @return {?proto.vega.PriceMonitoringParameters}
 */
proto.vega.PriceMonitoringSettings.prototype.getParameters = function() {
  return /** @type{?proto.vega.PriceMonitoringParameters} */ (
    jspb.Message.getWrapperField(this, proto.vega.PriceMonitoringParameters, 1));
};


/** @param {?proto.vega.PriceMonitoringParameters|undefined} value */
proto.vega.PriceMonitoringSettings.prototype.setParameters = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.PriceMonitoringSettings.prototype.clearParameters = function() {
  this.setParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.PriceMonitoringSettings.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 updateFrequency = 2;
 * @return {number}
 */
proto.vega.PriceMonitoringSettings.prototype.getUpdatefrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.vega.PriceMonitoringSettings.prototype.setUpdatefrequency = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.vega.Market.oneofGroups_ = [[100,101]];

/**
 * @enum {number}
 */
proto.vega.Market.TradingmodeCase = {
  TRADINGMODE_NOT_SET: 0,
  CONTINUOUS: 100,
  DISCRETE: 101
};

/**
 * @return {proto.vega.Market.TradingmodeCase}
 */
proto.vega.Market.prototype.getTradingmodeCase = function() {
  return /** @type {proto.vega.Market.TradingmodeCase} */(jspb.Message.computeOneofCase(this, proto.vega.Market.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vega.Market.prototype.toObject = function(opt_includeInstance) {
  return proto.vega.Market.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vega.Market} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Market.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tradableinstrument: (f = msg.getTradableinstrument()) && proto.vega.TradableInstrument.toObject(includeInstance, f),
    decimalplaces: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fees: (f = msg.getFees()) && proto.vega.Fees.toObject(includeInstance, f),
    openingauction: (f = msg.getOpeningauction()) && proto.vega.AuctionDuration.toObject(includeInstance, f),
    continuous: (f = msg.getContinuous()) && proto.vega.ContinuousTrading.toObject(includeInstance, f),
    discrete: (f = msg.getDiscrete()) && proto.vega.DiscreteTrading.toObject(includeInstance, f),
    pricemonitoringsettings: (f = msg.getPricemonitoringsettings()) && proto.vega.PriceMonitoringSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vega.Market}
 */
proto.vega.Market.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vega.Market;
  return proto.vega.Market.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vega.Market} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vega.Market}
 */
proto.vega.Market.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.vega.TradableInstrument;
      reader.readMessage(value,proto.vega.TradableInstrument.deserializeBinaryFromReader);
      msg.setTradableinstrument(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDecimalplaces(value);
      break;
    case 4:
      var value = new proto.vega.Fees;
      reader.readMessage(value,proto.vega.Fees.deserializeBinaryFromReader);
      msg.setFees(value);
      break;
    case 5:
      var value = new proto.vega.AuctionDuration;
      reader.readMessage(value,proto.vega.AuctionDuration.deserializeBinaryFromReader);
      msg.setOpeningauction(value);
      break;
    case 100:
      var value = new proto.vega.ContinuousTrading;
      reader.readMessage(value,proto.vega.ContinuousTrading.deserializeBinaryFromReader);
      msg.setContinuous(value);
      break;
    case 101:
      var value = new proto.vega.DiscreteTrading;
      reader.readMessage(value,proto.vega.DiscreteTrading.deserializeBinaryFromReader);
      msg.setDiscrete(value);
      break;
    case 6:
      var value = new proto.vega.PriceMonitoringSettings;
      reader.readMessage(value,proto.vega.PriceMonitoringSettings.deserializeBinaryFromReader);
      msg.setPricemonitoringsettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vega.Market.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vega.Market.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vega.Market} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vega.Market.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTradableinstrument();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vega.TradableInstrument.serializeBinaryToWriter
    );
  }
  f = message.getDecimalplaces();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFees();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.vega.Fees.serializeBinaryToWriter
    );
  }
  f = message.getOpeningauction();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.vega.AuctionDuration.serializeBinaryToWriter
    );
  }
  f = message.getContinuous();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.vega.ContinuousTrading.serializeBinaryToWriter
    );
  }
  f = message.getDiscrete();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.vega.DiscreteTrading.serializeBinaryToWriter
    );
  }
  f = message.getPricemonitoringsettings();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.vega.PriceMonitoringSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.vega.Market.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vega.Market.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TradableInstrument tradableInstrument = 2;
 * @return {?proto.vega.TradableInstrument}
 */
proto.vega.Market.prototype.getTradableinstrument = function() {
  return /** @type{?proto.vega.TradableInstrument} */ (
    jspb.Message.getWrapperField(this, proto.vega.TradableInstrument, 2));
};


/** @param {?proto.vega.TradableInstrument|undefined} value */
proto.vega.Market.prototype.setTradableinstrument = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.Market.prototype.clearTradableinstrument = function() {
  this.setTradableinstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Market.prototype.hasTradableinstrument = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 decimalPlaces = 3;
 * @return {number}
 */
proto.vega.Market.prototype.getDecimalplaces = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.vega.Market.prototype.setDecimalplaces = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Fees fees = 4;
 * @return {?proto.vega.Fees}
 */
proto.vega.Market.prototype.getFees = function() {
  return /** @type{?proto.vega.Fees} */ (
    jspb.Message.getWrapperField(this, proto.vega.Fees, 4));
};


/** @param {?proto.vega.Fees|undefined} value */
proto.vega.Market.prototype.setFees = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.Market.prototype.clearFees = function() {
  this.setFees(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Market.prototype.hasFees = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AuctionDuration openingAuction = 5;
 * @return {?proto.vega.AuctionDuration}
 */
proto.vega.Market.prototype.getOpeningauction = function() {
  return /** @type{?proto.vega.AuctionDuration} */ (
    jspb.Message.getWrapperField(this, proto.vega.AuctionDuration, 5));
};


/** @param {?proto.vega.AuctionDuration|undefined} value */
proto.vega.Market.prototype.setOpeningauction = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.Market.prototype.clearOpeningauction = function() {
  this.setOpeningauction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Market.prototype.hasOpeningauction = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ContinuousTrading continuous = 100;
 * @return {?proto.vega.ContinuousTrading}
 */
proto.vega.Market.prototype.getContinuous = function() {
  return /** @type{?proto.vega.ContinuousTrading} */ (
    jspb.Message.getWrapperField(this, proto.vega.ContinuousTrading, 100));
};


/** @param {?proto.vega.ContinuousTrading|undefined} value */
proto.vega.Market.prototype.setContinuous = function(value) {
  jspb.Message.setOneofWrapperField(this, 100, proto.vega.Market.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.Market.prototype.clearContinuous = function() {
  this.setContinuous(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Market.prototype.hasContinuous = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional DiscreteTrading discrete = 101;
 * @return {?proto.vega.DiscreteTrading}
 */
proto.vega.Market.prototype.getDiscrete = function() {
  return /** @type{?proto.vega.DiscreteTrading} */ (
    jspb.Message.getWrapperField(this, proto.vega.DiscreteTrading, 101));
};


/** @param {?proto.vega.DiscreteTrading|undefined} value */
proto.vega.Market.prototype.setDiscrete = function(value) {
  jspb.Message.setOneofWrapperField(this, 101, proto.vega.Market.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.Market.prototype.clearDiscrete = function() {
  this.setDiscrete(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Market.prototype.hasDiscrete = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional PriceMonitoringSettings priceMonitoringSettings = 6;
 * @return {?proto.vega.PriceMonitoringSettings}
 */
proto.vega.Market.prototype.getPricemonitoringsettings = function() {
  return /** @type{?proto.vega.PriceMonitoringSettings} */ (
    jspb.Message.getWrapperField(this, proto.vega.PriceMonitoringSettings, 6));
};


/** @param {?proto.vega.PriceMonitoringSettings|undefined} value */
proto.vega.Market.prototype.setPricemonitoringsettings = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.vega.Market.prototype.clearPricemonitoringsettings = function() {
  this.setPricemonitoringsettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vega.Market.prototype.hasPricemonitoringsettings = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.vega);
